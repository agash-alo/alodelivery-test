{"ast":null,"code":"/**\r\n * Module for a multi-part arched line.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Polyline } from \"./Polyline\";\nimport { registry } from \"../Registry\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Draws a multi-part arched line.\r\n *\r\n * @see {@link IPolyarcEvents} for a list of available events\r\n * @see {@link IPolyarcAdapters} for a list of available Adapters\r\n */\nvar Polyarc = /** @class */function (_super) {\n  __extends(Polyarc, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Polyarc() {\n    var _this = _super.call(this) || this;\n    _this.className = \"Polyarc\";\n    _this.controlPointDistance = 0.5;\n    _this.controlPointPosition = 0.5;\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Creats and adds an SVG path for the arc.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Polyarc.prototype.makePath = function () {\n    this._distance = 0;\n    var segments = this.segments;\n    if (segments && segments.length > 0) {\n      var path = \"\";\n      this._realSegments = [];\n      for (var i = 0, len = segments.length; i < len; i++) {\n        var points = segments[i];\n        var realPoints = [];\n        this._realSegments.push(realPoints);\n        if (points.length > 0) {\n          path += $path.moveTo(points[0]);\n          for (var p = 1; p < points.length; p++) {\n            var pointA = points[p - 1];\n            var pointB = points[p];\n            var distanceAB = $math.getDistance(pointB, pointA);\n            var cpDistance = distanceAB * this.controlPointDistance;\n            var controlPointPosition = this.controlPointPosition;\n            var angle = -$math.getAngle(pointA, pointB);\n            var cpx = pointA.x + (pointB.x - pointA.x) * controlPointPosition * 0.5 - cpDistance * $math.sin(angle);\n            var cpy = pointA.y + (pointB.y - pointA.y) * controlPointPosition * 0.5 - cpDistance * $math.cos(angle);\n            var controlPoint1 = {\n              x: cpx,\n              y: cpy\n            };\n            var cpx2 = pointA.x + (pointB.x - pointA.x) * controlPointPosition * 1.5 - cpDistance * $math.sin(angle);\n            var cpy2 = pointA.y + (pointB.y - pointA.y) * controlPointPosition * 1.5 - cpDistance * $math.cos(angle);\n            var controlPoint2 = {\n              x: cpx2,\n              y: cpy2\n            };\n            path += $path.cubicCurveTo(pointB, controlPoint1, controlPoint2);\n            // we add a lot of points in order to get the position/angle later\n            var stepCount = Math.ceil(distanceAB);\n            var prevPoint = pointA;\n            if (stepCount > 0) {\n              for (var i_1 = 0; i_1 <= stepCount; i_1++) {\n                var point = $math.getPointOnCubicCurve(pointA, pointB, controlPoint1, controlPoint2, i_1 / stepCount);\n                realPoints.push(point);\n                this._distance += $math.getDistance(prevPoint, point);\n                prevPoint = point;\n              }\n            } else {\n              realPoints.push(pointA);\n            }\n          }\n        }\n      }\n      this.path = path;\n    }\n  };\n  Object.defineProperty(Polyarc.prototype, \"controlPointPosition\", {\n    /**\r\n     * @return Position (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"controlPointPosition\");\n    },\n    /**\r\n     * Relative position along the line the control point is. (0-1)\r\n     *\r\n     * @default 0.5\r\n     * @param value  Position (0-1)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"controlPointPosition\", value);\n      this.makePath();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Polyarc.prototype, \"controlPointDistance\", {\n    /**\r\n     * @return Distance (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"controlPointDistance\");\n    },\n    /**\r\n     * Relative distance of the control point. (0-1)\r\n     *\r\n     * Default is half the length of the line. (0.5)\r\n     *\r\n     * @default 0.5\r\n     * @param value  Distance (0-1)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"controlPointDistance\", value);\n      this.makePath();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Polyarc;\n}(Polyline);\nexport { Polyarc };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Polyarc\"] = Polyarc;","map":{"version":3,"names":["__extends","Polyline","registry","$math","$path","Polyarc","_super","_this","call","className","controlPointDistance","controlPointPosition","applyTheme","prototype","makePath","_distance","segments","length","path","_realSegments","i","len","points","realPoints","push","moveTo","p","pointA","pointB","distanceAB","getDistance","cpDistance","angle","getAngle","cpx","x","sin","cpy","y","cos","controlPoint1","cpx2","cpy2","controlPoint2","cubicCurveTo","stepCount","Math","ceil","prevPoint","i_1","point","getPointOnCubicCurve","Object","defineProperty","get","getPropertyValue","set","value","setPropertyValue","enumerable","configurable","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/elements/Polyarc.js"],"sourcesContent":["/**\r\n * Module for a multi-part arched line.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Polyline } from \"./Polyline\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws a multi-part arched line.\r\n *\r\n * @see {@link IPolyarcEvents} for a list of available events\r\n * @see {@link IPolyarcAdapters} for a list of available Adapters\r\n */\r\nvar Polyarc = /** @class */ (function (_super) {\r\n    __extends(Polyarc, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Polyarc() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Polyarc\";\r\n        _this.controlPointDistance = 0.5;\r\n        _this.controlPointPosition = 0.5;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Creats and adds an SVG path for the arc.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Polyarc.prototype.makePath = function () {\r\n        this._distance = 0;\r\n        var segments = this.segments;\r\n        if (segments && segments.length > 0) {\r\n            var path = \"\";\r\n            this._realSegments = [];\r\n            for (var i = 0, len = segments.length; i < len; i++) {\r\n                var points = segments[i];\r\n                var realPoints = [];\r\n                this._realSegments.push(realPoints);\r\n                if (points.length > 0) {\r\n                    path += $path.moveTo(points[0]);\r\n                    for (var p = 1; p < points.length; p++) {\r\n                        var pointA = points[p - 1];\r\n                        var pointB = points[p];\r\n                        var distanceAB = $math.getDistance(pointB, pointA);\r\n                        var cpDistance = distanceAB * this.controlPointDistance;\r\n                        var controlPointPosition = this.controlPointPosition;\r\n                        var angle = -$math.getAngle(pointA, pointB);\r\n                        var cpx = pointA.x + (pointB.x - pointA.x) * controlPointPosition * 0.5 - cpDistance * $math.sin(angle);\r\n                        var cpy = pointA.y + (pointB.y - pointA.y) * controlPointPosition * 0.5 - cpDistance * $math.cos(angle);\r\n                        var controlPoint1 = { x: cpx, y: cpy };\r\n                        var cpx2 = pointA.x + (pointB.x - pointA.x) * controlPointPosition * 1.5 - cpDistance * $math.sin(angle);\r\n                        var cpy2 = pointA.y + (pointB.y - pointA.y) * controlPointPosition * 1.5 - cpDistance * $math.cos(angle);\r\n                        var controlPoint2 = { x: cpx2, y: cpy2 };\r\n                        path += $path.cubicCurveTo(pointB, controlPoint1, controlPoint2);\r\n                        // we add a lot of points in order to get the position/angle later\r\n                        var stepCount = Math.ceil(distanceAB);\r\n                        var prevPoint = pointA;\r\n                        if (stepCount > 0) {\r\n                            for (var i_1 = 0; i_1 <= stepCount; i_1++) {\r\n                                var point = $math.getPointOnCubicCurve(pointA, pointB, controlPoint1, controlPoint2, i_1 / stepCount);\r\n                                realPoints.push(point);\r\n                                this._distance += $math.getDistance(prevPoint, point);\r\n                                prevPoint = point;\r\n                            }\r\n                        }\r\n                        else {\r\n                            realPoints.push(pointA);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.path = path;\r\n        }\r\n    };\r\n    Object.defineProperty(Polyarc.prototype, \"controlPointPosition\", {\r\n        /**\r\n         * @return Position (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"controlPointPosition\");\r\n        },\r\n        /**\r\n         * Relative position along the line the control point is. (0-1)\r\n         *\r\n         * @default 0.5\r\n         * @param value  Position (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"controlPointPosition\", value);\r\n            this.makePath();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Polyarc.prototype, \"controlPointDistance\", {\r\n        /**\r\n         * @return Distance (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"controlPointDistance\");\r\n        },\r\n        /**\r\n         * Relative distance of the control point. (0-1)\r\n         *\r\n         * Default is half the length of the line. (0.5)\r\n         *\r\n         * @default 0.5\r\n         * @param value  Distance (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"controlPointDistance\", value);\r\n            this.makePath();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Polyarc;\r\n}(Polyline));\r\nexport { Polyarc };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Polyarc\"] = Polyarc;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}