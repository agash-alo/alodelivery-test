{"ast":null,"code":"/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Container } from \"../../core/Container\";\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\nimport { registry } from \"../../core/Registry\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $object from \"../../core/utils/Object\";\nimport * as $type from \"../../core/utils/Type\";\nimport { color } from \"../../core/utils/Color\";\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link ILineSeriesSegmentEvents} for a list of available events\r\n * @see {@link ILineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\nvar LineSeriesSegment = /** @class */function (_super) {\n  __extends(LineSeriesSegment, _super);\n  /**\r\n   * Constructor\r\n   */\n  function LineSeriesSegment() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    _this.className = \"LineSeriesSegment\";\n    // Set defaults\n    _this.isMeasured = false;\n    _this.interactionsEnabled = false;\n    _this.layout = \"none\";\n    // Create fill element\n    var fillSprite = _this.createChild(Sprite);\n    _this.fillSprite = fillSprite;\n    fillSprite.shouldClone = false;\n    fillSprite.setElement(_this.paper.add(\"path\"));\n    fillSprite.isMeasured = false;\n    _this._disposers.push(fillSprite);\n    // Create line element\n    var strokeSprite = _this.createChild(Sprite);\n    _this.strokeSprite = strokeSprite;\n    strokeSprite.shouldClone = false;\n    strokeSprite.fill = color();\n    strokeSprite.setElement(_this.paper.add(\"path\"));\n    strokeSprite.isMeasured = false;\n    _this._disposers.push(strokeSprite);\n    return _this;\n  }\n  /**\r\n   * Draws the series segment.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param points       Points to connect\r\n   * @param closePoints  ?\r\n   * @param smoothnessX  Horizontal bezier setting (?)\r\n   * @param smoothnessY  Vertical bezier setting (?)\r\n   */\n  LineSeriesSegment.prototype.drawSegment = function (points, closePoints, smoothnessX, smoothnessY) {\n    if (!this.disabled) {\n      if (points.length > 0 && closePoints.length > 0 && $type.isNumber(points[0].x) && $type.isNumber(points[0].y)) {\n        // first moveTo helps to avoid Chrome straight line in the mask bug.\n        var path = $path.moveTo({\n          x: points[0].x - 0.2,\n          y: points[0].y - 0.2\n        }) + $path.moveTo(points[0]);\n        var series = this.series;\n        if (series.smoothing == \"bezier\") {\n          path += new $smoothing.Tension(smoothnessX, smoothnessY).smooth(points);\n        } else if (series.smoothing == \"monotoneX\") {\n          path += new $smoothing.MonotoneX({\n            closed: false\n          }).smooth(points);\n        } else if (series.smoothing == \"monotoneY\") {\n          path += new $smoothing.MonotoneY({\n            closed: false\n          }).smooth(points);\n        }\n        if (this.strokeOpacity == 0 || this.strokeSprite.strokeOpacity == 0) {\n          // like this and not if != 0, otherwise ranges stroke won't be drawn.\n        } else {\n          this.strokeSprite.path = path;\n        }\n        if (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) {\n          // helps to avoid drawing fill object if fill is not visible\n          if ($type.isNumber(closePoints[0].x) && $type.isNumber(closePoints[0].y)) {\n            path += $path.lineTo(closePoints[0]);\n            if (series.smoothing == \"bezier\") {\n              path += new $smoothing.Tension(smoothnessX, smoothnessY).smooth(closePoints);\n            } else if (series.smoothing == \"monotoneX\") {\n              path += new $smoothing.MonotoneX({\n                closed: false\n              }).smooth(closePoints);\n            } else if (series.smoothing == \"monotoneY\") {\n              path += new $smoothing.MonotoneY({\n                closed: false\n              }).smooth(closePoints);\n            }\n            path += $path.lineTo(points[0]);\n            path += $path.closePath();\n            this.fillSprite.path = path;\n          }\n        }\n      } else {\n        this.fillSprite.path = \"\";\n        this.strokeSprite.path = \"\";\n      }\n    }\n  };\n  /**\r\n   * Copies properties from a [[Sprite]] to both line and fill elements.\r\n   *\r\n   * @param source Source [[Sprite]] to copy properties from\r\n   */\n  LineSeriesSegment.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    var lineElement = this.strokeSprite;\n    $object.copyProperties(source, lineElement.properties, visualProperties);\n    lineElement.events.copyFrom(source.strokeSprite.events);\n    lineElement.fillOpacity = 0;\n    var fillElement = this.fillSprite;\n    $object.copyProperties(source, fillElement.properties, visualProperties);\n    fillElement.events.copyFrom(source.fillSprite.events);\n    fillElement.strokeOpacity = 0;\n  };\n  return LineSeriesSegment;\n}(Container);\nexport { LineSeriesSegment };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"LineSeriesSegment\"] = LineSeriesSegment;","map":{"version":3,"names":["__extends","Container","Sprite","visualProperties","registry","$path","$object","$type","color","$smoothing","LineSeriesSegment","_super","_this","call","className","isMeasured","interactionsEnabled","layout","fillSprite","createChild","shouldClone","setElement","paper","add","_disposers","push","strokeSprite","fill","prototype","drawSegment","points","closePoints","smoothnessX","smoothnessY","disabled","length","isNumber","x","y","path","moveTo","series","smoothing","Tension","smooth","MonotoneX","closed","MonotoneY","strokeOpacity","fillOpacity","lineTo","closePath","copyFrom","source","lineElement","copyProperties","properties","events","fillElement","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/charts/series/LineSeriesSegment.js"],"sourcesContent":["/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../../core/Container\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link ILineSeriesSegmentEvents} for a list of available events\r\n * @see {@link ILineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nvar LineSeriesSegment = /** @class */ (function (_super) {\r\n    __extends(LineSeriesSegment, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function LineSeriesSegment() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"LineSeriesSegment\";\r\n        // Set defaults\r\n        _this.isMeasured = false;\r\n        _this.interactionsEnabled = false;\r\n        _this.layout = \"none\";\r\n        // Create fill element\r\n        var fillSprite = _this.createChild(Sprite);\r\n        _this.fillSprite = fillSprite;\r\n        fillSprite.shouldClone = false;\r\n        fillSprite.setElement(_this.paper.add(\"path\"));\r\n        fillSprite.isMeasured = false;\r\n        _this._disposers.push(fillSprite);\r\n        // Create line element\r\n        var strokeSprite = _this.createChild(Sprite);\r\n        _this.strokeSprite = strokeSprite;\r\n        strokeSprite.shouldClone = false;\r\n        strokeSprite.fill = color();\r\n        strokeSprite.setElement(_this.paper.add(\"path\"));\r\n        strokeSprite.isMeasured = false;\r\n        _this._disposers.push(strokeSprite);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the series segment.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param points       Points to connect\r\n     * @param closePoints  ?\r\n     * @param smoothnessX  Horizontal bezier setting (?)\r\n     * @param smoothnessY  Vertical bezier setting (?)\r\n     */\r\n    LineSeriesSegment.prototype.drawSegment = function (points, closePoints, smoothnessX, smoothnessY) {\r\n        if (!this.disabled) {\r\n            if (points.length > 0 && closePoints.length > 0 && $type.isNumber(points[0].x) && $type.isNumber(points[0].y)) {\r\n                // first moveTo helps to avoid Chrome straight line in the mask bug.\r\n                var path = $path.moveTo({ x: points[0].x - 0.2, y: points[0].y - 0.2 }) + $path.moveTo(points[0]);\r\n                var series = this.series;\r\n                if (series.smoothing == \"bezier\") {\r\n                    path += new $smoothing.Tension(smoothnessX, smoothnessY).smooth(points);\r\n                }\r\n                else if (series.smoothing == \"monotoneX\") {\r\n                    path += new $smoothing.MonotoneX({ closed: false }).smooth(points);\r\n                }\r\n                else if (series.smoothing == \"monotoneY\") {\r\n                    path += new $smoothing.MonotoneY({ closed: false }).smooth(points);\r\n                }\r\n                if (this.strokeOpacity == 0 || this.strokeSprite.strokeOpacity == 0) {\r\n                    // like this and not if != 0, otherwise ranges stroke won't be drawn.\r\n                }\r\n                else {\r\n                    this.strokeSprite.path = path;\r\n                }\r\n                if (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n                    if ($type.isNumber(closePoints[0].x) && $type.isNumber(closePoints[0].y)) {\r\n                        path += $path.lineTo(closePoints[0]);\r\n                        if (series.smoothing == \"bezier\") {\r\n                            path += new $smoothing.Tension(smoothnessX, smoothnessY).smooth(closePoints);\r\n                        }\r\n                        else if (series.smoothing == \"monotoneX\") {\r\n                            path += new $smoothing.MonotoneX({ closed: false }).smooth(closePoints);\r\n                        }\r\n                        else if (series.smoothing == \"monotoneY\") {\r\n                            path += new $smoothing.MonotoneY({ closed: false }).smooth(closePoints);\r\n                        }\r\n                        path += $path.lineTo(points[0]);\r\n                        path += $path.closePath();\r\n                        this.fillSprite.path = path;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                this.fillSprite.path = \"\";\r\n                this.strokeSprite.path = \"\";\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Copies properties from a [[Sprite]] to both line and fill elements.\r\n     *\r\n     * @param source Source [[Sprite]] to copy properties from\r\n     */\r\n    LineSeriesSegment.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        var lineElement = this.strokeSprite;\r\n        $object.copyProperties(source, lineElement.properties, visualProperties);\r\n        lineElement.events.copyFrom(source.strokeSprite.events);\r\n        lineElement.fillOpacity = 0;\r\n        var fillElement = this.fillSprite;\r\n        $object.copyProperties(source, fillElement.properties, visualProperties);\r\n        fillElement.events.copyFrom(source.fillSprite.events);\r\n        fillElement.strokeOpacity = 0;\r\n    };\r\n    return LineSeriesSegment;\r\n}(Container));\r\nexport { LineSeriesSegment };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeriesSegment\"] = LineSeriesSegment;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}