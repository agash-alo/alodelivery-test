{"ast":null,"code":"/**\r\n * XY Chart module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { SerialChart, SerialChartDataItem } from \"./SerialChart\";\nimport { Container } from \"../../core/Container\";\nimport { List, ListDisposer } from \"../../core/utils/List\";\nimport { Color } from \"../../core/utils/Color\";\nimport { ValueAxis } from \"../axes/ValueAxis\";\nimport { DateAxis } from \"../axes/DateAxis\";\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\nimport { XYSeries } from \"../series/XYSeries\";\nimport { Disposer } from \"../../core/utils/Disposer\";\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../../core/Registry\";\nimport { XYChartScrollbar } from \"../elements/XYChartScrollbar\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $number from \"../../core/utils/Number\";\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines a [[DataItem]] for [[XYChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar XYChartDataItem = /** @class */function (_super) {\n  __extends(XYChartDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function XYChartDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"XYChartDataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  return XYChartDataItem;\n}(SerialChartDataItem);\nexport { XYChartDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\r\n *\r\n * Basically this is a chart type, that is used to display any chart\r\n * information in a square plot area.\r\n *\r\n * The horizontal and vertical scale is determined by the type of Axis.\r\n *\r\n * The plot types are determined by type of Series.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * let series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * var series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Category axis\r\n * \t\"xAxes\": [{\r\n * \t\t\"type\": \"CategoryAxis\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Value axis\r\n * \t\"yAxes\": [{\r\n * \t\t\"type\": \"ValueAxis\"\r\n * \t}],\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"ColumnSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"categoryX\": \"country\",\r\n * \t\t\t\"valueY\": \"visits\"\r\n * \t\t},\r\n * \t\t\"name\": \"Web Traffic\"\r\n * \t}],\r\n *\r\n * \t// Cursor\r\n * \t\"cursor\": {},\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"USA\",\r\n * \t\t\"visits\": 3025\r\n * \t}, {\r\n * \t\t\"country\": \"China\",\r\n * \t\t\"visits\": 1882\r\n * \t}, {\r\n * \t\t\"country\": \"Japan\",\r\n * \t\t\"visits\": 1809\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"XYChart\");\r\n * ```\r\n *\r\n *\r\n * @see {@link IXYChartEvents} for a list of available Events\r\n * @see {@link IXYChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\nvar XYChart = /** @class */function (_super) {\n  __extends(XYChart, _super);\n  /**\r\n   * Constructor\r\n   */\n  function XYChart() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * Defines the type of horizontal axis rederer.\r\n     */\n    _this._axisRendererX = AxisRendererX;\n    /**\r\n     * Defines the type of vertical axis rederer.\r\n     */\n    _this._axisRendererY = AxisRendererY;\n    /**\r\n     * @ignore\r\n     */\n    _this._seriesPoints = [];\n    _this.className = \"XYChart\";\n    // Set defaults\n    //this.margin(10, 10, 10, 10);\n    _this.maskBullets = true;\n    _this.arrangeTooltips = true;\n    // Create main chart container\n    var chartContainer = _this.chartContainer;\n    chartContainer.layout = \"vertical\";\n    _this.padding(15, 15, 15, 15);\n    // Create top axes container\n    var topAxesCont = chartContainer.createChild(Container);\n    topAxesCont.shouldClone = false;\n    topAxesCont.layout = \"vertical\";\n    topAxesCont.width = percent(100);\n    topAxesCont.zIndex = 1;\n    _this.topAxesContainer = topAxesCont;\n    // Create vertical axes and plot area container\n    // Plot area and vertical axes share the whole width of the chart,\n    // so we need to put then into a separate container so that layouting\n    // engine takes care of the positioning\n    var yAxesAndPlotCont = chartContainer.createChild(Container);\n    yAxesAndPlotCont.shouldClone = false;\n    yAxesAndPlotCont.layout = \"horizontal\";\n    yAxesAndPlotCont.width = percent(100);\n    yAxesAndPlotCont.height = percent(100);\n    yAxesAndPlotCont.zIndex = 0;\n    _this.yAxesAndPlotContainer = yAxesAndPlotCont;\n    // Create a container for bottom axes\n    var bottomAxesCont = chartContainer.createChild(Container);\n    bottomAxesCont.shouldClone = false;\n    bottomAxesCont.width = percent(100);\n    bottomAxesCont.layout = \"vertical\";\n    bottomAxesCont.zIndex = 1;\n    _this.bottomAxesContainer = bottomAxesCont;\n    // Create a container for left-side axes\n    var leftAxesCont = yAxesAndPlotCont.createChild(Container);\n    leftAxesCont.shouldClone = false;\n    leftAxesCont.layout = \"horizontal\";\n    leftAxesCont.height = percent(100);\n    leftAxesCont.contentAlign = \"right\";\n    leftAxesCont.events.on(\"transformed\", _this.updateXAxesMargins, _this, false);\n    leftAxesCont.zIndex = 1;\n    _this.leftAxesContainer = leftAxesCont;\n    // Create a container for plot area\n    var plotCont = yAxesAndPlotCont.createChild(Container);\n    plotCont.shouldClone = false;\n    plotCont.height = percent(100);\n    plotCont.width = percent(100);\n    // Create transparend background for plot container so that hover works\n    // on all of it\n    plotCont.background.fillOpacity = 0;\n    _this.plotContainer = plotCont;\n    // must go below plot container\n    _this.mouseWheelBehavior = \"none\";\n    _this._cursorContainer = plotCont;\n    // Create a container for right-side axes\n    var rightAxesCont = yAxesAndPlotCont.createChild(Container);\n    rightAxesCont.shouldClone = false;\n    rightAxesCont.layout = \"horizontal\";\n    rightAxesCont.height = percent(100);\n    rightAxesCont.zIndex = 1;\n    rightAxesCont.events.on(\"transformed\", _this.updateXAxesMargins, _this, false);\n    _this.rightAxesContainer = rightAxesCont;\n    _this.seriesContainer.parent = plotCont;\n    _this.bulletsContainer.parent = plotCont;\n    var zoomOutButton = plotCont.createChild(ZoomOutButton);\n    zoomOutButton.shouldClone = false;\n    zoomOutButton.align = \"right\";\n    zoomOutButton.valign = \"top\";\n    zoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\n    zoomOutButton.marginTop = 5;\n    zoomOutButton.marginRight = 5;\n    zoomOutButton.hide(0);\n    _this.zoomOutButton = zoomOutButton;\n    // Create a container for bullets\n    var axisBulletsContainer = _this.plotContainer.createChild(Container);\n    axisBulletsContainer.shouldClone = false;\n    axisBulletsContainer.width = percent(100);\n    axisBulletsContainer.height = percent(100);\n    axisBulletsContainer.isMeasured = false;\n    axisBulletsContainer.zIndex = 4;\n    axisBulletsContainer.layout = \"none\";\n    _this.axisBulletsContainer = axisBulletsContainer;\n    _this._bulletMask = _this.plotContainer;\n    _this.events.on(\"beforedatavalidated\", function () {\n      _this.series.each(function (series) {\n        series.dataGrouped = false;\n        series._baseInterval = {};\n      });\n    }, _this, false);\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n  XYChart.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n    this.zoomOutButton.exportable = false;\n    // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"X/Y chart\");\n    }\n  };\n  /**\r\n   * Draws the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  XYChart.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n    this.seriesContainer.toFront();\n    this.bulletsContainer.toFront();\n    if (this.maskBullets) {\n      this.bulletsContainer.mask = this._bulletMask;\n    }\n    this.updateSeriesLegend();\n  };\n  /**\r\n   * Triggers a redrawing of all chart's series.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  XYChart.prototype.updatePlotElements = function () {\n    $iter.each(this.series.iterator(), function (series) {\n      series.invalidate();\n    });\n  };\n  /**\r\n   * Triggers data (re)validation which in turn can cause a redraw of the\r\n   * whole chart or just aprticular series / elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  XYChart.prototype.validateData = function () {\n    // tell axes that data changed\n    if (this._parseDataFrom == 0) {\n      $iter.each(this.xAxes.iterator(), function (axis) {\n        axis.dataChangeUpdate();\n      });\n      $iter.each(this.yAxes.iterator(), function (axis) {\n        axis.dataChangeUpdate();\n      });\n      $iter.each(this.series.iterator(), function (series) {\n        series.dataChangeUpdate();\n      });\n    }\n    _super.prototype.validateData.call(this);\n  };\n  /**\r\n   * Updates margins for horizontal axes based on settings and available space.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  XYChart.prototype.updateXAxesMargins = function () {\n    var leftAxesWidth = this.leftAxesContainer.measuredWidth;\n    var rightAxesWidth = this.rightAxesContainer.measuredWidth;\n    var bottomAxesCont = this.bottomAxesContainer;\n    if (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {\n      bottomAxesCont.paddingLeft = leftAxesWidth;\n      bottomAxesCont.paddingRight = rightAxesWidth;\n    }\n    var topAxesCont = this.topAxesContainer;\n    if (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {\n      topAxesCont.paddingLeft = leftAxesWidth;\n      topAxesCont.paddingRight = rightAxesWidth;\n    }\n  };\n  /**\r\n   * Triggers a re-initialization of this element.\r\n   *\r\n   * Will result in complete redrawing of the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  XYChart.prototype.reinit = function () {\n    _super.prototype.reinit.call(this);\n    this.series.each(function (series) {\n      series.appeared = false;\n    });\n  };\n  /**\r\n   * Triggers an update on the horizontal axis when one of its properties\r\n   * change.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event An event object\r\n   */\n  XYChart.prototype.handleXAxisChange = function (event) {\n    this.updateXAxis(event.target);\n  };\n  /**\r\n   * Triggers an update on the vertical axis when one of its properties\r\n   * change.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event An event object\r\n   */\n  XYChart.prototype.handleYAxisChange = function (event) {\n    this.updateYAxis(event.target);\n  };\n  /**\r\n   * Sets up a new horizontal (X) axis when it is added to the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Axis insert event\r\n   */\n  XYChart.prototype.processXAxis = function (event) {\n    var axis = event.newValue;\n    axis.chart = this;\n    if (!axis.renderer) {\n      axis.renderer = new this._axisRendererX();\n      axis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleXAxisChange, this, false);\n    }\n    axis.axisLetter = \"X\";\n    axis.events.on(\"startendchanged\", this.handleXAxisRangeChange, this, false);\n    //axis.events.on(\"endchanged\", this.handleXAxisRangeChange, this, false);\n    // Although axis does not use data directly, we set dataProvider here\n    // (but not add to chart data users) to hold up rendering before data\n    // is parsed (system handles this)\n    axis.dataProvider = this;\n    this.updateXAxis(axis.renderer);\n    this.processAxis(axis);\n  };\n  /**\r\n   * Sets up a new vertical (Y) axis when it is added to the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event Axis insert event\r\n   */\n  XYChart.prototype.processYAxis = function (event) {\n    var axis = event.newValue;\n    axis.chart = this;\n    if (!axis.renderer) {\n      axis.renderer = new this._axisRendererY();\n      axis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleYAxisChange, this, false);\n    }\n    axis.axisLetter = \"Y\";\n    axis.events.on(\"startendchanged\", this.handleYAxisRangeChange, this, false);\n    //axis.events.on(\"endchanged\", this.handleYAxisRangeChange, this, false);\n    // Although axis does not use data directly, we set dataProvider here\n    // (but not add to chart data users) to hold up rendering before data\n    // is parsed (system handles this)\n    axis.dataProvider = this;\n    this.updateYAxis(axis.renderer);\n    this.processAxis(axis);\n  };\n  /**\r\n   * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'\r\n   * value range changes.\r\n   */\n  XYChart.prototype.handleXAxisRangeChange = function () {\n    var range = this.getCommonAxisRange(this.xAxes);\n    if (this.scrollbarX) {\n      this.zoomAxes(this.xAxes, range, true);\n    }\n    this.toggleZoomOutButton();\n    this.updateScrollbar(this.scrollbarX, range);\n  };\n  /**\r\n   * Shows or hides the Zoom Out button depending on whether the chart is fully\r\n   * zoomed out or not.\r\n   */\n  XYChart.prototype.toggleZoomOutButton = function () {\n    if (this.zoomOutButton) {\n      var show_1 = false;\n      $iter.eachContinue(this.xAxes.iterator(), function (axis) {\n        if (axis.toggleZoomOutButton) {\n          if (axis.maxZoomCount > 0) {\n            var minZoomFactor = axis.maxZoomFactor / axis.maxZoomCount;\n            if ($math.round(axis.end - axis.start, 3) < 1 / minZoomFactor) {\n              show_1 = true;\n              return false;\n            }\n          } else {\n            if ($math.round(axis.start, 3) > 0 || $math.round(axis.end, 3) < 1) {\n              show_1 = true;\n              return false;\n            }\n          }\n        }\n        return true;\n      });\n      $iter.eachContinue(this.yAxes.iterator(), function (axis) {\n        if (axis.toggleZoomOutButton) {\n          if (axis.maxZoomCount > 0) {\n            var minZoomFactor = axis.maxZoomFactor / axis.maxZoomCount;\n            if ($math.round(axis.end - axis.start, 3) < 1 / minZoomFactor) {\n              show_1 = true;\n              return false;\n            }\n          } else {\n            if ($math.round(axis.start, 3) > 0 || $math.round(axis.end, 3) < 1) {\n              show_1 = true;\n              return false;\n            }\n          }\n          return true;\n        }\n      });\n      if (!this.seriesAppeared) {\n        show_1 = false;\n      }\n      if (show_1) {\n        this.zoomOutButton.show();\n      } else {\n        this.zoomOutButton.hide();\n      }\n    }\n  };\n  /**\r\n   * @ignore\r\n   * moved this check to a separate method so that we could override it in TreeMapSeries\r\n   */\n  XYChart.prototype.seriesAppeared = function () {\n    var appeared = false;\n    $iter.each(this.series.iterator(), function (series) {\n      if (!series.appeared) {\n        appeared = false;\n        return false;\n      }\n    });\n    return appeared;\n  };\n  /**\r\n   * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'\r\n   * value range changes.\r\n   */\n  XYChart.prototype.handleYAxisRangeChange = function () {\n    var range = this.getCommonAxisRange(this.yAxes);\n    if (this.scrollbarY) {\n      this.zoomAxes(this.yAxes, range, true);\n    }\n    this.toggleZoomOutButton();\n    this.updateScrollbar(this.scrollbarY, range);\n  };\n  /**\r\n   * Updates a relative scrollbar whenever data range of the axis changes.\r\n   *\r\n   * @param scrollbar  Scrollbar instance\r\n   * @param range      New data (values) range of the axis\r\n   */\n  XYChart.prototype.updateScrollbar = function (scrollbar, range) {\n    if (scrollbar) {\n      scrollbar.skipRangeEvents();\n      scrollbar.start = range.start;\n      scrollbar.end = range.end;\n    }\n  };\n  /**\r\n   * Returns a common range of values between a list of axes.\r\n   *\r\n   * This is used to synchronize the zoom between multiple axes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axes  A list of axes\r\n   * @return Common value range\r\n   */\n  XYChart.prototype.getCommonAxisRange = function (axes) {\n    var start;\n    var end;\n    axes.each(function (axis) {\n      if (!axis.zoomable || axis instanceof ValueAxis && axis.syncWithAxis) {} else {\n        var axisStart = axis.start;\n        var axisEnd = axis.end;\n        if (axis.renderer.inversed) {\n          axisStart = 1 - axis.end;\n          axisEnd = 1 - axis.start;\n        }\n        if (!$type.isNumber(start) || axisStart < start) {\n          start = axisStart;\n        }\n        if (!$type.isNumber(end) || axisEnd > end) {\n          end = axisEnd;\n        }\n      }\n    });\n    return {\n      start: start,\n      end: end\n    };\n  };\n  /**\r\n   * Triggers (re)rendering of the horizontal (X) axis.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axis  Axis\r\n   */\n  XYChart.prototype.updateXAxis = function (renderer) {\n    var axis = renderer.axis;\n    if (renderer.opposite) {\n      axis.parent = this.topAxesContainer;\n      axis.toFront();\n    } else {\n      axis.parent = this.bottomAxesContainer;\n      axis.toBack();\n    }\n    if (axis.renderer) {\n      axis.renderer.processRenderer();\n    }\n  };\n  /**\r\n   * Triggers (re)rendering of the vertical (Y) axis.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axis  Axis\r\n   */\n  XYChart.prototype.updateYAxis = function (renderer) {\n    var axis = renderer.axis;\n    if (renderer.opposite) {\n      axis.parent = this.rightAxesContainer;\n      axis.toBack();\n    } else {\n      axis.parent = this.leftAxesContainer;\n      axis.toFront();\n    }\n    if (axis.renderer) {\n      axis.renderer.processRenderer();\n    }\n  };\n  /**\r\n   * Decorates an Axis for use with this chart, e.g. sets proper renderer\r\n   * and containers for placement.\r\n   *\r\n   * @param axis  Axis\r\n   */\n  XYChart.prototype.processAxis = function (axis) {\n    var _this = this;\n    // Value axis does not use data directly, only category axis does\n    if (axis instanceof CategoryAxis) {\n      this._dataUsers.moveValue(axis);\n    }\n    var renderer = axis.renderer;\n    renderer.gridContainer.parent = this.plotContainer;\n    renderer.gridContainer.toBack();\n    renderer.breakContainer.parent = this.plotContainer;\n    renderer.breakContainer.toFront();\n    renderer.breakContainer.zIndex = 10;\n    axis.addDisposer(new Disposer(function () {\n      _this.dataUsers.removeValue(axis);\n    }));\n    renderer.bulletsContainer.parent = this.axisBulletsContainer;\n    this._disposers.push(axis.events.on(\"positionchanged\", function () {\n      var point = $utils.spritePointToSprite({\n        x: 0,\n        y: 0\n      }, axis, _this.axisBulletsContainer);\n      if (axis.renderer instanceof AxisRendererY) {\n        renderer.bulletsContainer.y = point.y;\n      }\n      if (axis.renderer instanceof AxisRendererX) {\n        renderer.bulletsContainer.x = point.x;\n      }\n    }, undefined, false));\n    this.plotContainer.events.on(\"maxsizechanged\", function () {\n      if (_this.inited) {\n        axis.invalidateDataItems();\n        _this.updateSeriesMasks();\n      }\n    }, axis, false);\n  };\n  /**\r\n   * This is done because for some reason IE doesn't change mask if path of a\r\n   * mask changes.\r\n   */\n  XYChart.prototype.updateSeriesMasks = function () {\n    if ($utils.isIE()) {\n      this.series.each(function (series) {\n        var mask = series.mainContainer.mask;\n        series.mainContainer.mask = undefined;\n        series.mainContainer.mask = mask;\n      });\n    }\n  };\n  XYChart.prototype.handleSeriesRemoved = function (event) {\n    var series = event.oldValue;\n    if (series) {\n      if (series.xAxis) {\n        series.xAxis.series.removeValue(series);\n        series.xAxis.invalidateProcessedData();\n      }\n      if (series.yAxis) {\n        series.yAxis.series.removeValue(series);\n        series.yAxis.invalidateProcessedData();\n      }\n      // otherwise extremes won't change\n      this.series.each(function (series) {\n        series.resetExtremes();\n      });\n    }\n    _super.prototype.handleSeriesRemoved.call(this, event);\n  };\n  Object.defineProperty(XYChart.prototype, \"xAxes\", {\n    /**\r\n     * A list of horizontal (X) axes.\r\n     *\r\n     * @return List of axes\r\n     */\n    get: function () {\n      if (!this._xAxes) {\n        this._xAxes = new List();\n        this._xAxes.events.on(\"inserted\", this.processXAxis, this, false);\n        this._xAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\n        this._disposers.push(new ListDisposer(this._xAxes, false));\n      }\n      return this._xAxes;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n  XYChart.prototype.handleAxisRemoval = function (event) {\n    var axis = event.oldValue;\n    this.dataUsers.removeValue(axis); // need to remove, as it might not be disposed\n    if (axis.autoDispose) {\n      axis.dispose();\n    }\n  };\n  Object.defineProperty(XYChart.prototype, \"yAxes\", {\n    /**\r\n     * A list of vertical (Y) axes.\r\n     *\r\n     * @return List of axes\r\n     */\n    get: function () {\n      if (!this._yAxes) {\n        this._yAxes = new List();\n        this._yAxes.events.on(\"inserted\", this.processYAxis, this, false);\n        this._yAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\n        this._disposers.push(new ListDisposer(this._yAxes, false));\n      }\n      return this._yAxes;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Decorates a new [[XYSeries]] object with required parameters when it is\r\n   * added to the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n  XYChart.prototype.handleSeriesAdded = function (event) {\n    try {\n      _super.prototype.handleSeriesAdded.call(this, event);\n      var series = event.newValue;\n      if (this.xAxes.length == 0 || this.yAxes.length == 0) {\n        registry.removeFromInvalidComponents(series);\n        series.dataInvalid = false;\n      }\n      $utils.used(series.xAxis); // this is enough to get axis, handled in getter\n      $utils.used(series.yAxis); // this is enough to get axis, handled in getter\n      series.maskBullets = series.maskBullets;\n      if (series.fill == undefined) {\n        if (this.patterns) {\n          if (!$type.hasValue(series.stroke)) {\n            series.stroke = this.colors.next();\n          }\n          series.fill = this.patterns.next();\n          if ($type.hasValue(series.fillOpacity)) {\n            series.fill.backgroundOpacity = series.fillOpacity;\n          }\n          if (series.stroke instanceof Color) {\n            series.fill.stroke = series.stroke;\n            series.fill.fill = series.stroke;\n          }\n        } else {\n          series.fill = this.colors.next();\n        }\n      }\n      if (!$type.hasValue(series.stroke)) {\n        series.stroke = series.fill;\n      }\n    } catch (e) {\n      this.raiseCriticalError(e);\n    }\n  };\n  Object.defineProperty(XYChart.prototype, \"cursor\", {\n    /**\r\n     * @return Cursor\r\n     */\n    get: function () {\n      return this._cursor;\n    },\n    /**\r\n     * Chart's [[Cursor]].\r\n     *\r\n     * @param cursor  Cursor\r\n     */\n    set: function (cursor) {\n      if (this._cursor != cursor) {\n        if (this._cursor) {\n          this.removeDispose(this._cursor);\n        }\n        this._cursor = cursor;\n        if (cursor) {\n          // TODO this is wrong, fix it\n          this._disposers.push(cursor);\n          cursor.chart = this;\n          cursor.shouldClone = false;\n          cursor.parent = this._cursorContainer;\n          cursor.events.on(\"cursorpositionchanged\", this.handleCursorPositionChange, this, false);\n          cursor.events.on(\"zoomstarted\", this.handleCursorZoomStart, this, false);\n          cursor.events.on(\"zoomended\", this.handleCursorZoomEnd, this, false);\n          cursor.events.on(\"panstarted\", this.handleCursorPanStart, this, false);\n          cursor.events.on(\"panning\", this.handleCursorPanning, this, false);\n          cursor.events.on(\"panended\", this.handleCursorPanEnd, this, false);\n          cursor.events.on(\"behaviorcanceled\", this.handleCursorCanceled, this, false);\n          cursor.events.on(\"hidden\", this.handleHideCursor, this, false);\n          cursor.zIndex = Number.MAX_SAFE_INTEGER - 1;\n          if (this.tapToActivate) {\n            // We need this in order to setup cursor properly\n            this.setTapToActivate(this.tapToActivate);\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Performs tasks when the cursor's position changes, e.g. shows proper\r\n   * tooltips on axes and series.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  XYChart.prototype.handleCursorPositionChange = function () {\n    var cursor = this.cursor;\n    if (cursor.visible && !cursor.isHiding) {\n      var xPosition_1 = this.cursor.xPosition;\n      var yPosition_1 = this.cursor.yPosition;\n      this.showSeriesTooltip({\n        x: xPosition_1,\n        y: yPosition_1\n      });\n      var exceptAxes_1 = [];\n      var snapToSeries = cursor.snapToSeries;\n      if (snapToSeries && !cursor.downPoint) {\n        if (snapToSeries instanceof XYSeries) {\n          snapToSeries = [snapToSeries];\n        }\n        var dataItems_1 = [];\n        $array.each(snapToSeries, function (snpSeries) {\n          if (!snpSeries.isHidden && !snpSeries.isHiding) {\n            var xAxis = snpSeries.xAxis;\n            var yAxis = snpSeries.yAxis;\n            if (xAxis instanceof ValueAxis && !(xAxis instanceof DateAxis) && yAxis instanceof ValueAxis && !(yAxis instanceof DateAxis)) {\n              snpSeries.dataItems.each(function (dataItem) {\n                dataItems_1.push(dataItem);\n              });\n              $array.move(exceptAxes_1, snpSeries.yAxis);\n              $array.move(exceptAxes_1, snpSeries.xAxis);\n            } else {\n              if (snpSeries.baseAxis == snpSeries.xAxis) {\n                $array.move(exceptAxes_1, snpSeries.yAxis);\n                dataItems_1.push(xAxis.getSeriesDataItem(snpSeries, xAxis.toAxisPosition(xPosition_1), true));\n              }\n              if (snpSeries.baseAxis == snpSeries.yAxis) {\n                $array.move(exceptAxes_1, snpSeries.xAxis);\n                dataItems_1.push(yAxis.getSeriesDataItem(snpSeries, yAxis.toAxisPosition(yPosition_1), true));\n              }\n            }\n          }\n        });\n        var closestDataItem_1 = this.getClosest(dataItems_1, xPosition_1, yPosition_1);\n        if (closestDataItem_1) {\n          this.series.each(function (series) {\n            var closestSeries = closestDataItem_1.component;\n            if (series != closestSeries) {\n              series.hideTooltip();\n              if (series.xAxis != closestSeries.xAxis) {\n                series.xAxis.hideTooltip();\n                exceptAxes_1.push(series.xAxis);\n              }\n              if (series.yAxis != closestSeries.yAxis) {\n                series.yAxis.hideTooltip();\n                exceptAxes_1.push(series.yAxis);\n              }\n            }\n          });\n          closestDataItem_1.component.showTooltipAtDataItem(closestDataItem_1);\n          cursor.handleSnap(closestDataItem_1.component);\n        }\n      }\n      //}\n      this._seriesPoints = [];\n      if (this._cursorXPosition != xPosition_1) {\n        this.showAxisTooltip(this.xAxes, xPosition_1, exceptAxes_1);\n      }\n      if (this._cursorYPosition != yPosition_1) {\n        this.showAxisTooltip(this.yAxes, yPosition_1, exceptAxes_1);\n      }\n      if (this.arrangeTooltips) {\n        this.sortSeriesTooltips(this._seriesPoints);\n      }\n      if (this.legend) {\n        this.legend.afterDraw();\n      }\n    }\n  };\n  /**\r\n   * Finds closest data item to position out of the array of items.\r\n   *\r\n   * @since 4.9.29\r\n   * @param   dataItems  Array of items\r\n   * @param              xPosition X position\r\n   * @param              yPosition Y position\r\n   * @return             Data item\r\n   */\n  XYChart.prototype.getClosest = function (dataItems, xPosition, yPosition) {\n    var minDistance = Infinity;\n    var closestDataItem;\n    $array.eachContinue(dataItems, function (dataItem) {\n      if (dataItem) {\n        var xAxis = dataItem.component.xAxis;\n        var yAxis = dataItem.component.yAxis;\n        var xPos = xAxis.positionToCoordinate(xAxis.toGlobalPosition(xAxis.toAxisPosition(xPosition)));\n        var yPos = yAxis.positionToCoordinate(yAxis.toGlobalPosition(yAxis.toAxisPosition(yPosition)));\n        var xField = dataItem.component.xField;\n        var yField = dataItem.component.yField;\n        if (xAxis instanceof ValueAxis && !$type.isNumber(dataItem.getValue(xField))) {\n          return true;\n        }\n        if (yAxis instanceof ValueAxis && !$type.isNumber(dataItem.getValue(yField))) {\n          return true;\n        }\n        var dxPosition = xAxis.positionToCoordinate(xAxis.toGlobalPosition(xAxis.getPositionX(dataItem, xField, dataItem.locations[xField], \"valueX\")));\n        var dyPosition = yAxis.positionToCoordinate(yAxis.toGlobalPosition(yAxis.getPositionY(dataItem, yField, dataItem.locations[yField], \"valueY\")));\n        var distance = Math.sqrt(Math.pow(xPos - dxPosition, 2) + Math.pow(yPos - dyPosition, 2));\n        if (distance < minDistance) {\n          minDistance = distance;\n          closestDataItem = dataItem;\n        }\n        return true;\n      }\n    });\n    return closestDataItem;\n  };\n  /**\r\n   * Hides all cursor-related tooltips when the cursor itself is hidden.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  XYChart.prototype.handleHideCursor = function () {\n    this.hideObjectTooltip(this.xAxes);\n    this.hideObjectTooltip(this.yAxes);\n    this.hideObjectTooltip(this.series);\n    this._cursorXPosition = undefined;\n    this._cursorYPosition = undefined;\n    this.updateSeriesLegend();\n  };\n  /**\r\n   * Updates values for each series' legend item.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  XYChart.prototype.updateSeriesLegend = function () {\n    $iter.each(this.series.iterator(), function (series) {\n      series.updateLegendValue();\n    });\n  };\n  /**\r\n   * Hides a tooltip for a list of objects.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param sprites  A list of sprites to hide tooltip for\r\n   */\n  XYChart.prototype.hideObjectTooltip = function (sprites) {\n    $iter.each(sprites.iterator(), function (sprite) {\n      if (sprite.cursorTooltipEnabled) {\n        sprite.hideTooltip(0);\n      }\n    });\n  };\n  /**\r\n   * Shows a tooltip for all chart's series, using specific coordinates as a\r\n   * reference point.\r\n   *\r\n   * The tooltip might be shown at different coordinates depending on the\r\n   * actual data point's position, overlapping with other tooltips, etc.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param position  Reference point\r\n   */\n  XYChart.prototype.showSeriesTooltip = function (position) {\n    var _this = this;\n    if (!position) {\n      this.series.each(function (series) {\n        series.hideTooltip();\n      });\n      return;\n    }\n    var seriesPoints = [];\n    this.series.each(function (series) {\n      //if (series.tooltipText || series.tooltipHTML) { // not good, bullets are not hovered then\n      if (series.xAxis instanceof DateAxis && series.xAxis.snapTooltip || series.yAxis instanceof DateAxis && series.yAxis.snapTooltip) {\n        // void\n      } else {\n        var point = series.showTooltipAtPosition(position.x, position.y);\n        if (point) {\n          series.tooltip.setBounds($utils.spriteRectToSvg({\n            x: 0,\n            y: 0,\n            width: _this.pixelWidth,\n            height: _this.pixelHeight\n          }, _this));\n          seriesPoints.push({\n            series: series,\n            point: point\n          });\n        }\n      }\n      //}\n    });\n\n    if (this.arrangeTooltips) {\n      this.sortSeriesTooltips(seriesPoints);\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n  XYChart.prototype.sortSeriesTooltips = function (seriesPoints) {\n    if (seriesPoints.length > 0) {\n      var cursor_1 = this.cursor;\n      if (cursor_1 && $type.isNumber(cursor_1.maxTooltipDistance)) {\n        var cursorPoint_1 = $utils.spritePointToSvg({\n          x: cursor_1.point.x,\n          y: cursor_1.point.y\n        }, cursor_1);\n        var nearestSeries_1;\n        var nearestPoint_1;\n        var smallestDistance_1 = Infinity;\n        $array.each(seriesPoints, function (seriesPoint) {\n          var series = seriesPoint.series;\n          var fixedPoint = seriesPoint.point;\n          if (fixedPoint) {\n            var point = {\n              x: fixedPoint.x,\n              y: fixedPoint.y\n            };\n            var distance = Math.abs($math.getDistance(point, cursorPoint_1));\n            if (distance < smallestDistance_1) {\n              nearestPoint_1 = point;\n              smallestDistance_1 = distance;\n              nearestSeries_1 = series;\n            }\n          }\n        });\n        var newSeriesPoints_1 = [];\n        if (nearestSeries_1) {\n          $array.each(seriesPoints, function (seriesPoint) {\n            if (Math.abs($math.getDistance(seriesPoint.point, nearestPoint_1)) <= Math.abs(cursor_1.maxTooltipDistance)) {\n              newSeriesPoints_1.push({\n                series: seriesPoint.series,\n                point: seriesPoint.point\n              });\n            } else {\n              var tooltipDataItem = seriesPoint.series.tooltipDataItem;\n              if (tooltipDataItem) {\n                $array.each(tooltipDataItem.sprites, function (sprite) {\n                  sprite.isHover = false;\n                  sprite.handleOutReal(); // to avoid flicker\n                });\n              }\n\n              seriesPoint.series.hideTooltip(0);\n            }\n          });\n          if (cursor_1.maxTooltipDistance < 0) {\n            if (newSeriesPoints_1.length > 0) {\n              $array.each(newSeriesPoints_1, function (np) {\n                if (nearestSeries_1 != np.series) {\n                  np.series.hideTooltip(0);\n                }\n              });\n            }\n            newSeriesPoints_1 = [{\n              series: nearestSeries_1,\n              point: nearestPoint_1\n            }];\n          }\n        }\n        seriesPoints = newSeriesPoints_1;\n      }\n      var topLeft_1 = $utils.spritePointToSvg({\n        x: -0.5,\n        y: -0.5\n      }, this.plotContainer);\n      var bottomRight_1 = $utils.spritePointToSvg({\n        x: this.plotContainer.pixelWidth + 0.5,\n        y: this.plotContainer.pixelHeight + 0.5\n      }, this.plotContainer);\n      var sum_1 = 0;\n      var filteredSeriesPoints_1 = [];\n      $array.each(seriesPoints, function (seriesPoint) {\n        var point = seriesPoint.point;\n        if (point && $math.isInRectangle(point, {\n          x: topLeft_1.x,\n          y: topLeft_1.y,\n          width: bottomRight_1.x - topLeft_1.x,\n          height: bottomRight_1.y - topLeft_1.y\n        })) {\n          filteredSeriesPoints_1.push({\n            point: point,\n            series: seriesPoint.series\n          });\n          sum_1 += point.y;\n        }\n      });\n      seriesPoints = filteredSeriesPoints_1;\n      var firstSeries = this.series.getIndex(0);\n      var inversed = false;\n      if (firstSeries && firstSeries.yAxis && firstSeries.yAxis.renderer.inversed) {\n        inversed = true;\n      }\n      if (inversed) {\n        seriesPoints.sort(function (a, b) {\n          return $number.order(a.point.y, b.point.y);\n        });\n      } else {\n        seriesPoints.sort(function (a, b) {\n          return $number.order(b.point.y, a.point.y);\n        });\n        seriesPoints.reverse();\n      }\n      var averageY = sum_1 / seriesPoints.length;\n      var maxY = $utils.svgPointToDocument({\n        x: 0,\n        y: 0\n      }, this.svgContainer.SVGContainer).y;\n      if (seriesPoints.length > 0) {\n        var top_1 = topLeft_1.y;\n        var bottom = bottomRight_1.y;\n        // TODO is this needed ?\n        $utils.spritePointToDocument({\n          x: 0,\n          y: top_1\n        }, this);\n        var dropped = false;\n        if (averageY > top_1 + (bottom - top_1) / 2) {\n          var nextHeight = bottom;\n          for (var i = seriesPoints.length - 1; i >= 0; i--) {\n            var series = seriesPoints[i].series;\n            var tooltip = series.tooltip;\n            var pointY = seriesPoints[i].point.y;\n            tooltip.setBounds({\n              x: 0,\n              y: -maxY,\n              width: this.pixelWidth,\n              height: nextHeight + maxY\n            });\n            if (tooltip.invalid) {\n              tooltip.validate();\n            }\n            tooltip.toBack();\n            nextHeight = $utils.spritePointToSvg({\n              x: 0,\n              y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop\n            }, tooltip).y;\n            if (nextHeight < -maxY) {\n              dropped = true;\n              break;\n            }\n          }\n        }\n        if (averageY <= top_1 + (bottom - top_1) / 2 || dropped) {\n          var nextY = top_1;\n          for (var i = 0, len = seriesPoints.length; i < len; i++) {\n            var series = seriesPoints[i].series;\n            var pointY = seriesPoints[i].point.y;\n            var tooltip = series.tooltip;\n            tooltip.setBounds({\n              x: 0,\n              y: nextY,\n              width: this.pixelWidth,\n              height: bottom\n            });\n            if (tooltip.invalid) {\n              tooltip.validate();\n            }\n            tooltip.toBack();\n            nextY = $utils.spritePointToSvg({\n              x: 0,\n              y: tooltip.label.pixelY + tooltip.label.measuredHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom\n            }, tooltip).y;\n          }\n        }\n      }\n    }\n  };\n  /**\r\n   * Shows tooltips for a list of axes at specific position.\r\n   *\r\n   * Position might be X coordinate for horizontal axes, and Y coordinate for\r\n   * vertical axes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axes      List of axes to show tooltip on\r\n   * @param position  Position (px)\r\n   */\n  XYChart.prototype.showAxisTooltip = function (axes, position, except) {\n    var _this = this;\n    $iter.each(axes.iterator(), function (axis) {\n      if (!except || except.indexOf(axis) == -1) {\n        if (_this.dataItems.length > 0 || axis.dataItems.length > 0) {\n          axis.showTooltipAtPosition(position);\n        }\n      }\n    });\n  };\n  /**\r\n   * Recalculates the value range for the axis taking into account zoom level & inversed.\r\n   *\r\n   * @param axis   Axis\r\n   * @param range  Range\r\n   * @return Modified range\r\n   */\n  XYChart.prototype.getUpdatedRange = function (axis, range) {\n    if (!axis) {\n      return;\n    }\n    var start;\n    var end;\n    var inversed = axis.renderer.inversed;\n    if (inversed) {\n      $math.invertRange(range);\n      start = 1 - axis.end;\n      end = 1 - axis.start;\n    } else {\n      start = axis.start;\n      end = axis.end;\n    }\n    var difference = end - start;\n    return {\n      start: start + range.start * difference,\n      end: start + range.end * difference\n    };\n  };\n  /**\r\n   * Performs zoom and other operations when user finishes zooming using chart\r\n   * cursor, e.g. zooms axes.\r\n   *\r\n   * @param event Cursor's event\r\n   */\n  XYChart.prototype.handleCursorZoomEnd = function (event) {\n    var cursor = this.cursor;\n    var behavior = cursor.behavior;\n    if (behavior == \"zoomX\" || behavior == \"zoomXY\") {\n      var xRange = cursor.xRange;\n      if (xRange && this.xAxes.length > 0) {\n        xRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);\n        xRange.priority = \"start\";\n        this.zoomAxes(this.xAxes, xRange);\n      }\n    }\n    if (behavior == \"zoomY\" || behavior == \"zoomXY\") {\n      var yRange = cursor.yRange;\n      if (yRange && this.yAxes.length > 0) {\n        yRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);\n        yRange.priority = \"start\";\n        this.zoomAxes(this.yAxes, yRange);\n      }\n    }\n    this.handleHideCursor();\n  };\n  /**\r\n   * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n   *\r\n   * @param event Cursor's event\r\n   */\n  XYChart.prototype.handleCursorPanStart = function (event) {\n    var xAxis = this.xAxes.getIndex(0);\n    if (xAxis) {\n      this._panStartXRange = {\n        start: xAxis.start,\n        end: xAxis.end\n      };\n      if (xAxis.renderer.inversed) {\n        this._panStartXRange = $math.invertRange(this._panStartXRange);\n      }\n    }\n    var yAxis = this.yAxes.getIndex(0);\n    if (yAxis) {\n      this._panStartYRange = {\n        start: yAxis.start,\n        end: yAxis.end\n      };\n      if (yAxis.renderer.inversed) {\n        this._panStartYRange = $math.invertRange(this._panStartYRange);\n      }\n    }\n  };\n  /**\r\n   * Performs zoom and other operations when user ends panning\r\n   *\r\n   * @param event Cursor's event\r\n   */\n  XYChart.prototype.handleCursorPanEnd = function (event) {\n    var cursor = this.cursor;\n    var behavior = cursor.behavior;\n    if (this._panEndXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\n      var panEndRange = this._panEndXRange;\n      var panStartRange = this._panStartXRange;\n      var delta = 0;\n      if (panEndRange.start < 0) {\n        delta = panEndRange.start;\n      }\n      if (panStartRange.end > 1) {\n        if (panEndRange.end > panStartRange.end) {\n          delta = panEndRange.end - panStartRange.end;\n        }\n      } else if (panEndRange.end > 1) {\n        delta = panEndRange.end - 1;\n      }\n      this.zoomAxes(this.xAxes, {\n        start: panEndRange.start - delta,\n        end: panEndRange.end - delta\n      }, false, cursor.snapOnPan);\n      this._panEndXRange = undefined;\n      this._panStartXRange = undefined;\n    }\n    if (this._panEndYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\n      var panEndRange = this._panEndYRange;\n      var delta = 0;\n      if (panEndRange.start < 0) {\n        delta = panEndRange.start;\n      }\n      if (panEndRange.end > 1) {\n        delta = panEndRange.end - 1;\n      }\n      this.zoomAxes(this.yAxes, {\n        start: panEndRange.start - delta,\n        end: panEndRange.end - delta\n      }, false, cursor.snapOnPan);\n      this._panEndYRange = undefined;\n      this._panStartYRange = undefined;\n    }\n  };\n  XYChart.prototype.handleCursorCanceled = function () {\n    this._panEndXRange = undefined;\n    this._panStartXRange = undefined;\n  };\n  /**\r\n   * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n   *\r\n   * @param event Cursor's event\r\n   */\n  XYChart.prototype.handleCursorPanning = function (event) {\n    var cursor = this.cursor;\n    var behavior = cursor.behavior;\n    var maxPanOut = cursor.maxPanOut;\n    if (this._panStartXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\n      var panStartRange = this._panStartXRange;\n      var range = cursor.xRange;\n      var axisRange = this.getCommonAxisRange(this.xAxes);\n      var difference = panStartRange.end - panStartRange.start;\n      var delta = range.start * (axisRange.end - axisRange.start);\n      var newStart = Math.max(-maxPanOut, delta + panStartRange.start);\n      var newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\n      if (newStart <= 0) {\n        newEnd = newStart + difference;\n      }\n      if (newEnd >= 1) {\n        newStart = newEnd - difference;\n      }\n      var newRange = {\n        start: newStart,\n        end: newEnd\n      };\n      this._panEndXRange = newRange;\n      this.zoomAxes(this.xAxes, newRange, false, false, cursor.maxPanOut);\n    }\n    if (this._panStartYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\n      var panStartRange = this._panStartYRange;\n      var range = cursor.yRange;\n      var axisRange = this.getCommonAxisRange(this.yAxes);\n      var difference = panStartRange.end - panStartRange.start;\n      var delta = range.start * (axisRange.end - axisRange.start);\n      var newStart = Math.max(-maxPanOut, delta + panStartRange.start);\n      var newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\n      if (newStart <= 0) {\n        newEnd = newStart + difference;\n      }\n      if (newEnd >= 1) {\n        newStart = newEnd - difference;\n      }\n      var newRange = {\n        start: newStart,\n        end: newEnd\n      };\n      this._panEndYRange = newRange;\n      this.zoomAxes(this.yAxes, newRange, false, false, cursor.maxPanOut);\n    }\n    this.handleHideCursor();\n  };\n  /**\r\n   * @ignore\r\n   */\n  XYChart.prototype.handleYAxisSet = function (series) {};\n  /**\r\n   * Performs zoom and other operations when user starts zooming using chart\r\n   * cursor, e.g. zooms axes.\r\n   *\r\n   * @param event Cursor's event\r\n   */\n  XYChart.prototype.handleCursorZoomStart = function (event) {\n    // Nothing here\n    // This method is here only as a \"placeholder\" for extending classes to\n    // override if necessary\n  };\n  Object.defineProperty(XYChart.prototype, \"scrollbarX\", {\n    /**\r\n     * @return Scrollbar\r\n     */\n    get: function () {\n      return this._scrollbarX;\n    },\n    /**\r\n     * Horizontal (X) scrollbar.\r\n     *\r\n     * @param scrollbar Scrollbar\r\n     */\n    set: function (scrollbar) {\n      var _this = this;\n      if (this._scrollbarX) {\n        this.removeDispose(this._scrollbarX);\n      }\n      this._scrollbarX = scrollbar;\n      if (scrollbar) {\n        this._disposers.push(scrollbar);\n        scrollbar.parent = this.topAxesContainer;\n        scrollbar.shouldClone = false;\n        scrollbar.startGrip.exportable = false;\n        scrollbar.endGrip.exportable = false;\n        scrollbar.toBack();\n        scrollbar.orientation = \"horizontal\";\n        scrollbar.events.on(\"rangechanged\", this.handleXScrollbarChange, this, false);\n        this.events.on(\"datavalidated\", function () {\n          return scrollbar.updateThumb(false);\n        }, this, false);\n        // accessibility related\n        scrollbar.adapter.add(\"positionValue\", function (arg) {\n          var xAxis = _this.xAxes.getIndex(0);\n          if (xAxis) {\n            arg.value = xAxis.getPositionLabel(xAxis.renderer.inversed ? 1 - arg.position : arg.position);\n          }\n          return arg;\n        });\n        scrollbar.adapter.add(\"positionValueDirection\", function (arg) {\n          var xAxis = _this.xAxes.getIndex(0);\n          if (xAxis) {\n            arg.flipped = xAxis.renderer.inversed;\n          }\n          return arg;\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChart.prototype, \"scrollbarY\", {\n    /**\r\n     * @return Scrollbar\r\n     */\n    get: function () {\n      return this._scrollbarY;\n    },\n    /**\r\n     * Vertical (Y) scrollbar.\r\n     *\r\n     * @param scrollbar Scrollbar\r\n     */\n    set: function (scrollbar) {\n      var _this = this;\n      if (this._scrollbarY) {\n        this.removeDispose(this._scrollbarY);\n      }\n      this._scrollbarY = scrollbar;\n      if (scrollbar) {\n        this._disposers.push(scrollbar);\n        scrollbar.parent = this.rightAxesContainer;\n        scrollbar.startGrip.exportable = false;\n        scrollbar.shouldClone = false;\n        scrollbar.endGrip.exportable = false;\n        scrollbar.toFront();\n        scrollbar.orientation = \"vertical\";\n        scrollbar.events.on(\"rangechanged\", this.handleYScrollbarChange, this, false);\n        this.events.on(\"datavalidated\", function () {\n          return scrollbar.updateThumb(false);\n        }, this, false);\n        // accessibility related\n        scrollbar.adapter.add(\"positionValue\", function (arg) {\n          var yAxis = _this.yAxes.getIndex(0);\n          if (yAxis) {\n            arg.value = yAxis.getPositionLabel(yAxis.renderer.inversed ? arg.position : 1 - arg.position);\n          }\n          return arg;\n        });\n        scrollbar.adapter.add(\"positionValueDirection\", function (arg) {\n          var yAxis = _this.yAxes.getIndex(0);\n          if (yAxis) {\n            arg.flipped = !yAxis.renderer.inversed;\n          }\n          return arg;\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Zooms axes affected by the horizontal (X) scrollbar when the selection\r\n   * on it changes.\r\n   *\r\n   * @param event Scrollbar range change event\r\n   */\n  XYChart.prototype.handleXScrollbarChange = function (event) {\n    if (this.inited) {\n      var scrollbar = event.target;\n      var range = scrollbar.range;\n      if (range.start == 0) {\n        range.priority = \"start\";\n      }\n      if (range.end == 1) {\n        range.priority = \"end\";\n      }\n      range = this.zoomAxes(this.xAxes, range);\n      scrollbar.fixRange(range);\n    }\n  };\n  /**\r\n   * Zooms axes affected by the vertical (Y) scrollbar when the selection\r\n   * on it changes.\r\n   *\r\n   * @param event Scrollbar range change event\r\n   */\n  XYChart.prototype.handleYScrollbarChange = function (event) {\n    if (this.inited) {\n      var scrollbar = event.target;\n      var range = scrollbar.range;\n      if (range.end == 1) {\n        range.priority = \"end\";\n      }\n      if (range.start == 0) {\n        range.priority = \"start\";\n      }\n      range = this.zoomAxes(this.yAxes, range);\n      scrollbar.fixRange(range);\n    }\n  };\n  /**\r\n   * Zooms axes that are affected by to specific relative range.\r\n   *\r\n   * @param axes       List of axes to zoom\r\n   * @param range      Range of values to zoom to (0-1)\r\n   * @param instantly  If set to `true` will skip zooming animation\r\n   * @return Recalculated range that is common to all involved axes\r\n   */\n  XYChart.prototype.zoomAxes = function (axes, range, instantly, round, declination, stop) {\n    var realRange = {\n      start: 0,\n      end: 1\n    };\n    this.showSeriesTooltip(); // hides\n    var originalRange = range;\n    if (!this.dataInvalid) {\n      $iter.each(axes.iterator(), function (axis) {\n        var maxZoomFactor = axis.maxZoomFactor;\n        if ($type.isNumber(axis.minZoomCount)) {\n          maxZoomFactor = maxZoomFactor / axis.minZoomCount;\n        }\n        if (stop && 1 / (range.end - range.start) >= maxZoomFactor) {\n          // void\n        } else {\n          if (axis.zoomable) {\n            if (axis.renderer.inversed) {\n              range = $math.invertRange(originalRange);\n            } else {\n              range = originalRange;\n            }\n            axis.hideTooltip(0);\n            if (round) {\n              //let diff = range.end - range.start;\n              if (axis instanceof CategoryAxis) {\n                var cellWidth = axis.getCellEndPosition(0) - axis.getCellStartPosition(0);\n                range.start = axis.roundPosition(range.start + cellWidth / 2 - axis.startLocation * cellWidth, axis.startLocation);\n                range.end = axis.roundPosition(range.end - cellWidth / 2 + (1 - axis.endLocation) * cellWidth, axis.endLocation);\n              } else {\n                var d = 0.0001;\n                range.start = axis.roundPosition(range.start + d, 0, axis.startLocation);\n                range.end = axis.roundPosition(range.end + d, 0, axis.endLocation);\n              }\n            }\n            var axisRange = axis.zoom(range, instantly, instantly, declination);\n            if (axis.renderer.inversed) {\n              axisRange = $math.invertRange(axisRange);\n            }\n            realRange = axisRange;\n          }\n        }\n      });\n    }\n    return realRange;\n  };\n  Object.defineProperty(XYChart.prototype, \"maskBullets\", {\n    /**\r\n     * @return Mask bullet container?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maskBullets\");\n    },\n    /**\r\n     * Indicates if bullet container is masked.\r\n     *\r\n     * If it is set to `true`, any bullets that do not fit into bullet container\r\n     * will be clipped off. Settting to `false` will allow bullets to \"spill out\"\r\n     * of the plot area so they are not cut off.\r\n     *\r\n     * @param value Mask bullet container?\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"maskBullets\", value, true) && this.bulletsContainer) {\n        if (value) {\n          this.bulletsContainer.mask = this._bulletMask;\n        } else {\n          this.bulletsContainer.mask = undefined;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChart.prototype, \"arrangeTooltips\", {\n    /**\r\n     * @return Arrange tooltips?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"arrangeTooltips\");\n    },\n    /**\r\n     * Indicates if chart should arrange series tooltips so that they would not\r\n     * overlap.\r\n     *\r\n     * If set to `true` (default), the chart will adjust vertical positions of\r\n     * all simultaneously shown tooltips to avoid overlapping.\r\n     *\r\n     * However, if you have a vertically-arranged chart, it might not make sense,\r\n     * because tooltips would most probably not be aligned horizontally. In this\r\n     * case it would probably be a good idea to set this setting to `false`.\r\n     *\r\n     * @default true\r\n     * @param value Arrange tooltips?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"arrangeTooltips\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Handles mouse wheel event.\r\n   *\r\n   * @param event  Original event\r\n   */\n  XYChart.prototype.handleWheel = function (event) {\n    var plotContainer = this.plotContainer;\n    var svgPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\n    var plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\n    var shift = event.shift.y;\n    this.handleWheelReal(shift, this.mouseWheelBehavior, plotPoint);\n  };\n  /**\r\n   * Handles mouse wheel event.\r\n   *\r\n   * @param event  Original event\r\n   */\n  XYChart.prototype.handleHorizontalWheel = function (event) {\n    var plotContainer = this.plotContainer;\n    var svgPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\n    var plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\n    this.handleWheelReal(event.shift.x, this.horizontalMouseWheelBehavior, plotPoint);\n  };\n  /**\r\n   * @ignore\r\n   */\n  XYChart.prototype.handleWheelReal = function (shift, mouseWheelBehavior, plotPoint) {\n    if (shift != 0) {\n      var plotContainer = this.plotContainer;\n      var rangeX = this.getCommonAxisRange(this.xAxes);\n      var rangeY = this.getCommonAxisRange(this.yAxes);\n      var shiftStep = .1;\n      var maxPanOut = 0;\n      if (mouseWheelBehavior == \"panX\" || mouseWheelBehavior == \"panXY\") {\n        var xAxis = this.xAxes.getIndex(0);\n        var round = false;\n        var singleItemStep = shiftStep;\n        if (xAxis instanceof CategoryAxis) {\n          singleItemStep = .5 / ((rangeX.end - rangeX.start) * xAxis.dataItems.length);\n          round = true;\n        }\n        shiftStep = Math.max(0.2, singleItemStep);\n        var differenceX = rangeX.end - rangeX.start;\n        var newStartX = Math.max(-maxPanOut, rangeX.start + shiftStep * shift / 100 * (rangeX.end - rangeX.start));\n        var newEndX = Math.min(rangeX.end + shiftStep * shift / 100 * (rangeX.end - rangeX.start), 1 + maxPanOut);\n        if (newStartX <= 0) {\n          newEndX = newStartX + differenceX;\n        }\n        if (newEndX >= 1) {\n          newStartX = newEndX - differenceX;\n        }\n        this.zoomAxes(this.xAxes, {\n          start: newStartX,\n          end: newEndX\n        }, undefined, round);\n      }\n      if (mouseWheelBehavior == \"panY\" || mouseWheelBehavior == \"panXY\") {\n        var yAxis = this.yAxes.getIndex(0);\n        var singleItemStep = shiftStep;\n        var round = false;\n        if (yAxis instanceof CategoryAxis) {\n          singleItemStep = .5 / ((rangeX.end - rangeX.start) * yAxis.dataItems.length);\n          round = true;\n        }\n        shiftStep = Math.max(0.2, singleItemStep);\n        shift *= -1;\n        var differenceY = rangeY.end - rangeY.start;\n        var newStartY = Math.max(-maxPanOut, rangeY.start + shiftStep * shift / 100 * (rangeY.end - rangeY.start));\n        var newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * (rangeY.end - rangeY.start), 1 + maxPanOut);\n        if (newStartY <= 0) {\n          newEndY = newStartY + differenceY;\n        }\n        if (newEndY >= 1) {\n          newStartY = newEndY - differenceY;\n        }\n        this.zoomAxes(this.yAxes, {\n          start: newStartY,\n          end: newEndY\n        }, undefined, round);\n      }\n      if (mouseWheelBehavior == \"zoomX\" || mouseWheelBehavior == \"zoomXY\") {\n        var locationX = plotPoint.x / plotContainer.maxWidth;\n        var location2X = this.xAxes.getIndex(0).toAxisPosition(locationX);\n        var newStartX = Math.max(-maxPanOut, rangeX.start - shiftStep * (rangeX.end - rangeX.start) * shift / 100 * locationX);\n        newStartX = Math.min(newStartX, location2X);\n        var newEndX = Math.min(rangeX.end + shiftStep * (rangeX.end - rangeX.start) * shift / 100 * (1 - locationX), 1 + maxPanOut);\n        newEndX = Math.max(newEndX, location2X);\n        this.zoomAxes(this.xAxes, {\n          start: newStartX,\n          end: newEndX\n        }, undefined);\n      }\n      if (mouseWheelBehavior == \"zoomY\" || mouseWheelBehavior == \"zoomXY\") {\n        var locationY = plotPoint.y / plotContainer.maxHeight;\n        var location2Y = this.yAxes.getIndex(0).toAxisPosition(locationY);\n        var newStartY = Math.max(-maxPanOut, rangeY.start - shiftStep * (rangeY.end - rangeY.start) * shift / 100 * (1 - locationY));\n        newStartY = Math.min(newStartY, location2Y);\n        var newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * locationY * (rangeY.end - rangeY.start), 1 + maxPanOut);\n        newEndY = Math.max(newEndY, location2Y);\n        this.zoomAxes(this.yAxes, {\n          start: newStartY,\n          end: newEndY\n        }, undefined);\n      }\n    }\n  };\n  Object.defineProperty(XYChart.prototype, \"mouseWheelBehavior\", {\n    /**\r\n     * @return Mouse wheel behavior\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"mouseWheelBehavior\");\n    },\n    /**\r\n     * Specifies action for when mouse wheel is used when over the chart.\r\n     *\r\n     * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`,`\"panXY\"`, `\"none\"` (default).\r\n     *\r\n     * You can control sensitivity of wheel zooming via `mouseOptions`.\r\n     *\r\n     * @default \"none\"\r\n     * @see {@link https://www.amcharts.com/docs/v4/reference/sprite/#mouseOptions_property} More information about `mouseOptions`\r\n     * @param mouse wheel behavior\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\n        if (value != \"none\") {\n          this._mouseWheelDisposer = this.plotContainer.events.on(\"wheel\", this.handleWheel, this, false);\n          this._disposers.push(this._mouseWheelDisposer);\n        } else {\n          if (this._mouseWheelDisposer) {\n            this.plotContainer.wheelable = false;\n            this.plotContainer.hoverable = false;\n            this._mouseWheelDisposer.dispose();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChart.prototype, \"horizontalMouseWheelBehavior\", {\n    /**\r\n     * @return Horizontal mouse wheel behavior\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"horizontalMouseWheelBehavior\");\n    },\n    /**\r\n     * Specifies action for when horizontal mouse wheel is used when over the chart.\r\n     *\r\n     * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`, `\"panXY\"`, `\"none\"` (default).\r\n     *\r\n     * @default \"none\"\r\n     * @see {@link https://www.amcharts.com/docs/v4/reference/sprite/#mouseOptions_property} More information about `mouseOptions`\r\n     * @param mouse wheel behavior\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"horizontalMouseWheelBehavior\", value)) {\n        if (value != \"none\") {\n          this._mouseWheelDisposer2 = this.plotContainer.events.on(\"wheel\", this.handleHorizontalWheel, this, false);\n          this._disposers.push(this._mouseWheelDisposer2);\n        } else {\n          if (this._mouseWheelDisposer2) {\n            this.plotContainer.wheelable = false;\n            this.plotContainer.hoverable = false;\n            this._mouseWheelDisposer2.dispose();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n   * so that particular chart types can popuplate this setting with their\r\n   * own type-specific data fields so they are parsed properly.\r\n   *\r\n   * @param fields  Array of date fields\r\n   * @return Array of date fields populated with chart's date fields\r\n   */\n  XYChart.prototype.dataSourceDateFields = function (fields) {\n    var _this = this;\n    // Process parent\n    fields = _super.prototype.dataSourceDateFields.call(this, fields);\n    // Check if we have any series with date-fields\n    $iter.each(this.series.iterator(), function (series) {\n      fields = _this.populateDataSourceFields(fields, series.dataFields, [\"dateX\", \"dateY\", \"openDateX\", \"openDateY\"]);\n    });\n    return fields;\n  };\n  /**\r\n   * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n   * so that particular chart types can popuplate this setting with their\r\n   * own type-specific data fields so they are parsed properly.\r\n   *\r\n   * @param value  Array of number fields\r\n   * @return Array of number fields populated with chart's number fields\r\n   */\n  XYChart.prototype.dataSourceNumberFields = function (fields) {\n    var _this = this;\n    fields = _super.prototype.dataSourceDateFields.call(this, fields);\n    // Check if we have any series with date-fields\n    $iter.each(this.series.iterator(), function (series) {\n      fields = _this.populateDataSourceFields(fields, series.dataFields, [\"valueX\", \"valueY\", \"openValueX\", \"openValueY\"]);\n    });\n    return fields;\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n  XYChart.prototype.processConfig = function (config) {\n    if (config) {\n      // Save axis ranges for later processing\n      var xAxes = [];\n      var yAxes = [];\n      // Set up axes\n      if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\n        for (var i = 0, len = config.xAxes.length; i < len; i++) {\n          if (!config.xAxes[i].type) {\n            throw Error(\"[XYChart error] No type set for xAxes[\" + i + \"].\");\n          } else if ($type.hasValue(config.xAxes[i][\"axisRanges\"])) {\n            // Maybe convert string dates?\n            for (var x = 0, len_1 = config.xAxes[i][\"axisRanges\"].length; x < len_1; x++) {\n              var range = config.xAxes[i][\"axisRanges\"][x];\n              if ($type.hasValue(range.date) && $type.isString(range.date)) {\n                range.date = this.dateFormatter.parse(range.date);\n              }\n              if ($type.hasValue(range.endDate) && $type.isString(range.endDate)) {\n                range.endDate = this.dateFormatter.parse(range.endDate);\n              }\n            }\n            xAxes.push({\n              axisRanges: config.xAxes[i][\"axisRanges\"],\n              index: i\n            });\n            delete config.xAxes[i][\"axisRanges\"];\n          }\n        }\n      }\n      if ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\n        for (var i = 0, len = config.yAxes.length; i < len; i++) {\n          if (!config.yAxes[i].type) {\n            throw Error(\"[XYChart error] No type set for yAxes[\" + i + \"].\");\n          } else if ($type.hasValue(config.yAxes[i][\"axisRanges\"])) {\n            // Maybe convert string dates?\n            for (var x = 0, len_2 = config.yAxes[i][\"axisRanges\"].length; x < len_2; x++) {\n              var range = config.yAxes[i][\"axisRanges\"][x];\n              if ($type.hasValue(range.date) && $type.isString(range.date)) {\n                range.date = this.dateFormatter.parse(range.date);\n              }\n              if ($type.hasValue(range.endDate) && $type.isString(range.endDate)) {\n                range.endDate = this.dateFormatter.parse(range.endDate);\n              }\n            }\n            yAxes.push({\n              axisRanges: config.yAxes[i][\"axisRanges\"],\n              index: i\n            });\n            delete config.yAxes[i][\"axisRanges\"];\n          }\n        }\n      }\n      // Set up series\n      if ($type.hasValue(config.series) && $type.isArray(config.series)) {\n        for (var i = 0, len = config.series.length; i < len; i++) {\n          config.series[i].type = config.series[i].type || \"LineSeries\";\n        }\n      }\n      // Set up cursor\n      if ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\n        config.cursor.type = \"XYCursor\";\n      }\n      // Set up scrollbars\n      if ($type.hasValue(config.scrollbarX) && !$type.hasValue(config.scrollbarX.type)) {\n        config.scrollbarX.type = \"Scrollbar\";\n      }\n      if ($type.hasValue(config.scrollbarY) && !$type.hasValue(config.scrollbarY.type)) {\n        config.scrollbarY.type = \"Scrollbar\";\n      }\n      _super.prototype.processConfig.call(this, config);\n      // Finish up with ranges.\n      // We need to do this here because series are processed last in JSON\n      // config. Therefore their respective objects are not yet are available\n      // when axis (and respectively their ranges) are being processed.\n      if (yAxes.length) {\n        for (var i = 0, len = yAxes.length; i < len; i++) {\n          this.yAxes.getIndex(yAxes[i].index).config = {\n            axisRanges: yAxes[i].axisRanges\n          };\n        }\n      }\n      if (xAxes.length) {\n        for (var i = 0, len = xAxes.length; i < len; i++) {\n          this.xAxes.getIndex(xAxes[i].index).config = {\n            axisRanges: xAxes[i].axisRanges\n          };\n        }\n      }\n    }\n  };\n  /**\r\n   * This function is used to sort element's JSON config properties, so that\r\n   * some properties that absolutely need to be processed last, can be put at\r\n   * the end.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param a  Element 1\r\n   * @param b  Element 2\r\n   * @return Sorting number\r\n   */\n  XYChart.prototype.configOrder = function (a, b) {\n    if (a == b) {\n      return 0;\n    }\n    // Must come last\n    else if (a == \"scrollbarX\") {\n      return 1;\n    } else if (b == \"scrollbarX\") {\n      return -1;\n    } else if (a == \"scrollbarY\") {\n      return 1;\n    } else if (b == \"scrollbarY\") {\n      return -1;\n    } else if (a == \"cursor\") {\n      return 1;\n    } else if (b == \"cursor\") {\n      return -1;\n    } else if (a == \"series\") {\n      return 1;\n    } else if (b == \"series\") {\n      return -1;\n    } else {\n      return _super.prototype.configOrder.call(this, a, b);\n    }\n  };\n  /**\r\n   * Creates a new Series of type suitable for this chart.\r\n   *\r\n   * @return New series\r\n   */\n  XYChart.prototype.createSeries = function () {\n    return new XYSeries();\n  };\n  Object.defineProperty(XYChart.prototype, \"zoomOutButton\", {\n    /**\r\n     * @return Zoom out button\r\n     */\n    get: function () {\n      return this._zoomOutButton;\n    },\n    /**\r\n     * A [[Button]] element that is used for zooming out the chart.\r\n     *\r\n     * This button appears only when chart is zoomed in, and disappears\r\n     * autoamatically when it is zoome dout.\r\n     *\r\n     * @param button  Zoom out button\r\n     */\n    set: function (button) {\n      var _this = this;\n      this._zoomOutButton = button;\n      if (button) {\n        button.events.on(\"hit\", function () {\n          _this.zoomAxes(_this.xAxes, {\n            start: 0,\n            end: 1\n          });\n          _this.zoomAxes(_this.yAxes, {\n            start: 0,\n            end: 1\n          });\n        }, undefined, false);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all parameters from another [[XYChart]].\r\n   *\r\n   * @param source Source XYChart\r\n   */\n  XYChart.prototype.copyFrom = function (source) {\n    var _this = this;\n    source.xAxes.each(function (axis) {\n      var a = _this.xAxes.push(axis.clone());\n      a.chart = _this;\n      a.renderer.chart = _this;\n    });\n    source.yAxes.each(function (axis) {\n      var a = _this.yAxes.push(axis.clone());\n      a.renderer.chart = _this;\n      a.chart = _this;\n    });\n    //this.xAxes.copyFrom(source.xAxes);\n    //this.yAxes.copyFrom(source.yAxes);\n    _super.prototype.copyFrom.call(this, source);\n    //this.zoomOutButton.copyFrom(source.zoomOutButton);\n    if (source.cursor) {\n      this.cursor = source.cursor.clone();\n    }\n    if (source.scrollbarX) {\n      this.scrollbarX = source.scrollbarX.clone();\n    }\n    if (source.scrollbarY) {\n      this.scrollbarY = source.scrollbarY.clone();\n    }\n    //@todo copy all container properties\n  };\n  /**\r\n   * @ignore\r\n   */\n  XYChart.prototype.disposeData = function () {\n    _super.prototype.disposeData.call(this);\n    var scrollbarX = this.scrollbarX;\n    if (scrollbarX && scrollbarX instanceof XYChartScrollbar) {\n      scrollbarX.scrollbarChart.disposeData();\n    }\n    var scrollbarY = this.scrollbarY;\n    if (scrollbarY && scrollbarY instanceof XYChartScrollbar) {\n      scrollbarY.scrollbarChart.disposeData();\n    }\n    this.xAxes.each(function (axis) {\n      if (axis instanceof CategoryAxis) {\n        axis.disposeData();\n      }\n    });\n    this.yAxes.each(function (axis) {\n      if (axis instanceof CategoryAxis) {\n        axis.disposeData();\n      }\n    });\n  };\n  /**\r\n   * Adds one or several (array) of data items to the existing data.\r\n   *\r\n   * @param rawDataItem One or many raw data item objects\r\n   */\n  XYChart.prototype.addData = function (rawDataItem, removeCount) {\n    if (this.scrollbarX instanceof XYChartScrollbar) {\n      this.addScrollbarData(this.scrollbarX, removeCount);\n    }\n    if (this.scrollbarY instanceof XYChartScrollbar) {\n      this.addScrollbarData(this.scrollbarY, removeCount);\n    }\n    _super.prototype.addData.call(this, rawDataItem, removeCount);\n  };\n  /**\r\n   * @ignore\r\n   */\n  XYChart.prototype.addScrollbarData = function (scrollbar, removeCount) {\n    var chart = scrollbar.scrollbarChart;\n    chart._parseDataFrom = chart.data.length;\n    chart.invalidateData();\n  };\n  /**\r\n   * @ignore\r\n   */\n  XYChart.prototype.removeScrollbarData = function (scrollbar, removeCount) {\n    var chart = scrollbar.scrollbarChart;\n    if ($type.isNumber(removeCount)) {\n      while (removeCount > 0) {\n        var dataItem = this.dataItems.getIndex(0);\n        if (dataItem) {\n          chart.dataItems.remove(dataItem);\n        }\n        chart.dataUsers.each(function (dataUser) {\n          var dataItem = dataUser.dataItems.getIndex(0);\n          if (dataItem) {\n            dataUser.dataItems.remove(dataItem);\n          }\n        });\n        chart._parseDataFrom--;\n        removeCount--;\n      }\n      chart.invalidateData();\n    }\n  };\n  /**\r\n   * Removes elements from the beginning of data\r\n   *\r\n   * @param count number of elements to remove\r\n   */\n  XYChart.prototype.removeData = function (count) {\n    if (this.scrollbarX instanceof XYChartScrollbar) {\n      this.removeScrollbarData(this.scrollbarX, count);\n    }\n    if (this.scrollbarY instanceof XYChartScrollbar) {\n      this.removeScrollbarData(this.scrollbarY, count);\n    }\n    _super.prototype.removeData.call(this, count);\n  };\n  /**\r\n   * @param  value  Tap to activate?\r\n   */\n  XYChart.prototype.setTapToActivate = function (value) {\n    _super.prototype.setTapToActivate.call(this, value);\n    if (this.cursor) {\n      this.cursor.interactions.isTouchProtected = value;\n      this.plotContainer.interactions.isTouchProtected = value;\n    }\n  };\n  XYChart.prototype.handleTapToActivate = function () {\n    _super.prototype.handleTapToActivate.call(this);\n    if (this.cursor) {\n      this.cursor.interactions.isTouchProtected = false;\n      this.plotContainer.interactions.isTouchProtected = false;\n    }\n  };\n  XYChart.prototype.handleTapToActivateDeactivation = function () {\n    _super.prototype.handleTapToActivateDeactivation.call(this);\n    if (this.cursor) {\n      this.cursor.interactions.isTouchProtected = true;\n      this.plotContainer.interactions.isTouchProtected = true;\n    }\n  };\n  return XYChart;\n}(SerialChart);\nexport { XYChart };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"XYChart\"] = XYChart;\n/**\r\n * Add default responsive rules\r\n */\n/**\r\n * Remove horizontal scrollbar on narrow charts.\r\n */\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.maybeXS,\n  state: function (target, stateId) {\n    if (target instanceof XYChart && target.scrollbarX) {\n      var state = target.states.create(stateId);\n      var sbstate = target.scrollbarX.states.create(stateId);\n      sbstate.properties.disabled = true;\n      return state;\n    }\n    return null;\n  }\n});\n/**\r\n * Remove vertical scrollbar on short charts.\r\n */\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.maybeXS,\n  state: function (target, stateId) {\n    if (target instanceof XYChart && target.scrollbarY) {\n      var state = target.states.create(stateId);\n      var sbstate = target.scrollbarY.states.create(stateId);\n      sbstate.properties.disabled = true;\n      return state;\n    }\n    return null;\n  }\n});","map":{"version":3,"names":["__extends","SerialChart","SerialChartDataItem","Container","List","ListDisposer","Color","ValueAxis","DateAxis","AxisRendererX","AxisRendererY","CategoryAxis","XYSeries","Disposer","ZoomOutButton","percent","registry","XYChartScrollbar","$math","$iter","$type","$utils","$array","$number","defaultRules","ResponsiveBreakpoints","XYChartDataItem","_super","_this","call","className","applyTheme","XYChart","_axisRendererX","_axisRendererY","_seriesPoints","maskBullets","arrangeTooltips","chartContainer","layout","padding","topAxesCont","createChild","shouldClone","width","zIndex","topAxesContainer","yAxesAndPlotCont","height","yAxesAndPlotContainer","bottomAxesCont","bottomAxesContainer","leftAxesCont","contentAlign","events","on","updateXAxesMargins","leftAxesContainer","plotCont","background","fillOpacity","plotContainer","mouseWheelBehavior","_cursorContainer","rightAxesCont","rightAxesContainer","seriesContainer","parent","bulletsContainer","zoomOutButton","align","valign","Number","MAX_SAFE_INTEGER","marginTop","marginRight","hide","axisBulletsContainer","isMeasured","_bulletMask","series","each","dataGrouped","_baseInterval","prototype","applyInternalDefaults","exportable","hasValue","readerTitle","language","translate","draw","toFront","mask","updateSeriesLegend","updatePlotElements","iterator","invalidate","validateData","_parseDataFrom","xAxes","axis","dataChangeUpdate","yAxes","leftAxesWidth","measuredWidth","rightAxesWidth","paddingLeft","paddingRight","reinit","appeared","handleXAxisChange","event","updateXAxis","target","handleYAxisChange","updateYAxis","processXAxis","newValue","chart","renderer","observe","axisLetter","handleXAxisRangeChange","dataProvider","processAxis","processYAxis","handleYAxisRangeChange","range","getCommonAxisRange","scrollbarX","zoomAxes","toggleZoomOutButton","updateScrollbar","show_1","eachContinue","maxZoomCount","minZoomFactor","maxZoomFactor","round","end","start","seriesAppeared","show","scrollbarY","scrollbar","skipRangeEvents","axes","zoomable","syncWithAxis","axisStart","axisEnd","inversed","isNumber","opposite","toBack","processRenderer","_dataUsers","moveValue","gridContainer","breakContainer","addDisposer","dataUsers","removeValue","_disposers","push","point","spritePointToSprite","x","y","undefined","inited","invalidateDataItems","updateSeriesMasks","isIE","mainContainer","handleSeriesRemoved","oldValue","xAxis","invalidateProcessedData","yAxis","resetExtremes","Object","defineProperty","get","_xAxes","handleAxisRemoval","enumerable","configurable","autoDispose","dispose","_yAxes","handleSeriesAdded","length","removeFromInvalidComponents","dataInvalid","used","fill","patterns","stroke","colors","next","backgroundOpacity","e","raiseCriticalError","_cursor","set","cursor","removeDispose","handleCursorPositionChange","handleCursorZoomStart","handleCursorZoomEnd","handleCursorPanStart","handleCursorPanning","handleCursorPanEnd","handleCursorCanceled","handleHideCursor","tapToActivate","setTapToActivate","visible","isHiding","xPosition_1","xPosition","yPosition_1","yPosition","showSeriesTooltip","exceptAxes_1","snapToSeries","downPoint","dataItems_1","snpSeries","isHidden","dataItems","dataItem","move","baseAxis","getSeriesDataItem","toAxisPosition","closestDataItem_1","getClosest","closestSeries","component","hideTooltip","showTooltipAtDataItem","handleSnap","_cursorXPosition","showAxisTooltip","_cursorYPosition","sortSeriesTooltips","legend","afterDraw","minDistance","Infinity","closestDataItem","xPos","positionToCoordinate","toGlobalPosition","yPos","xField","yField","getValue","dxPosition","getPositionX","locations","dyPosition","getPositionY","distance","Math","sqrt","pow","hideObjectTooltip","updateLegendValue","sprites","sprite","cursorTooltipEnabled","position","seriesPoints","snapTooltip","showTooltipAtPosition","tooltip","setBounds","spriteRectToSvg","pixelWidth","pixelHeight","cursor_1","maxTooltipDistance","cursorPoint_1","spritePointToSvg","nearestSeries_1","nearestPoint_1","smallestDistance_1","seriesPoint","fixedPoint","abs","getDistance","newSeriesPoints_1","tooltipDataItem","isHover","handleOutReal","np","topLeft_1","bottomRight_1","sum_1","filteredSeriesPoints_1","isInRectangle","firstSeries","getIndex","sort","a","b","order","reverse","averageY","maxY","svgPointToDocument","svgContainer","SVGContainer","top_1","bottom","spritePointToDocument","dropped","nextHeight","i","pointY","invalid","validate","label","pixelY","pixelMarginTop","nextY","len","measuredHeight","pixelMarginBottom","except","indexOf","getUpdatedRange","invertRange","difference","behavior","xRange","priority","yRange","_panStartXRange","_panStartYRange","_panEndXRange","panEndRange","panStartRange","delta","snapOnPan","_panEndYRange","maxPanOut","axisRange","newStart","max","newEnd","min","newRange","handleYAxisSet","_scrollbarX","startGrip","endGrip","orientation","handleXScrollbarChange","updateThumb","adapter","add","arg","value","getPositionLabel","flipped","_scrollbarY","handleYScrollbarChange","fixRange","instantly","declination","stop","realRange","originalRange","minZoomCount","cellWidth","getCellEndPosition","getCellStartPosition","roundPosition","startLocation","endLocation","d","zoom","getPropertyValue","setPropertyValue","handleWheel","svgPoint","documentPointToSvg","htmlContainer","cssScale","plotPoint","svgPointToSprite","shift","handleWheelReal","handleHorizontalWheel","horizontalMouseWheelBehavior","rangeX","rangeY","shiftStep","singleItemStep","differenceX","newStartX","newEndX","differenceY","newStartY","newEndY","locationX","maxWidth","location2X","locationY","maxHeight","location2Y","_mouseWheelDisposer","wheelable","hoverable","_mouseWheelDisposer2","dataSourceDateFields","fields","populateDataSourceFields","dataFields","dataSourceNumberFields","processConfig","config","isArray","type","Error","len_1","date","isString","dateFormatter","parse","endDate","axisRanges","index","len_2","configOrder","createSeries","_zoomOutButton","button","copyFrom","source","clone","disposeData","scrollbarChart","addData","rawDataItem","removeCount","addScrollbarData","data","invalidateData","removeScrollbarData","remove","dataUser","removeData","count","interactions","isTouchProtected","handleTapToActivate","handleTapToActivateDeactivation","registeredClasses","relevant","maybeXS","state","stateId","states","create","sbstate","properties","disabled"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/charts/types/XYChart.js"],"sourcesContent":["/**\r\n * XY Chart module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { List, ListDisposer } from \"../../core/utils/List\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { XYChartScrollbar } from \"../elements/XYChartScrollbar\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar XYChartDataItem = /** @class */ (function (_super) {\r\n    __extends(XYChartDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function XYChartDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"XYChartDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return XYChartDataItem;\r\n}(SerialChartDataItem));\r\nexport { XYChartDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\r\n *\r\n * Basically this is a chart type, that is used to display any chart\r\n * information in a square plot area.\r\n *\r\n * The horizontal and vertical scale is determined by the type of Axis.\r\n *\r\n * The plot types are determined by type of Series.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * let series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * var series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Category axis\r\n * \t\"xAxes\": [{\r\n * \t\t\"type\": \"CategoryAxis\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Value axis\r\n * \t\"yAxes\": [{\r\n * \t\t\"type\": \"ValueAxis\"\r\n * \t}],\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"ColumnSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"categoryX\": \"country\",\r\n * \t\t\t\"valueY\": \"visits\"\r\n * \t\t},\r\n * \t\t\"name\": \"Web Traffic\"\r\n * \t}],\r\n *\r\n * \t// Cursor\r\n * \t\"cursor\": {},\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"USA\",\r\n * \t\t\"visits\": 3025\r\n * \t}, {\r\n * \t\t\"country\": \"China\",\r\n * \t\t\"visits\": 1882\r\n * \t}, {\r\n * \t\t\"country\": \"Japan\",\r\n * \t\t\"visits\": 1809\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"XYChart\");\r\n * ```\r\n *\r\n *\r\n * @see {@link IXYChartEvents} for a list of available Events\r\n * @see {@link IXYChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nvar XYChart = /** @class */ (function (_super) {\r\n    __extends(XYChart, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function XYChart() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Defines the type of horizontal axis rederer.\r\n         */\r\n        _this._axisRendererX = AxisRendererX;\r\n        /**\r\n         * Defines the type of vertical axis rederer.\r\n         */\r\n        _this._axisRendererY = AxisRendererY;\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this._seriesPoints = [];\r\n        _this.className = \"XYChart\";\r\n        // Set defaults\r\n        //this.margin(10, 10, 10, 10);\r\n        _this.maskBullets = true;\r\n        _this.arrangeTooltips = true;\r\n        // Create main chart container\r\n        var chartContainer = _this.chartContainer;\r\n        chartContainer.layout = \"vertical\";\r\n        _this.padding(15, 15, 15, 15);\r\n        // Create top axes container\r\n        var topAxesCont = chartContainer.createChild(Container);\r\n        topAxesCont.shouldClone = false;\r\n        topAxesCont.layout = \"vertical\";\r\n        topAxesCont.width = percent(100);\r\n        topAxesCont.zIndex = 1;\r\n        _this.topAxesContainer = topAxesCont;\r\n        // Create vertical axes and plot area container\r\n        // Plot area and vertical axes share the whole width of the chart,\r\n        // so we need to put then into a separate container so that layouting\r\n        // engine takes care of the positioning\r\n        var yAxesAndPlotCont = chartContainer.createChild(Container);\r\n        yAxesAndPlotCont.shouldClone = false;\r\n        yAxesAndPlotCont.layout = \"horizontal\";\r\n        yAxesAndPlotCont.width = percent(100);\r\n        yAxesAndPlotCont.height = percent(100);\r\n        yAxesAndPlotCont.zIndex = 0;\r\n        _this.yAxesAndPlotContainer = yAxesAndPlotCont;\r\n        // Create a container for bottom axes\r\n        var bottomAxesCont = chartContainer.createChild(Container);\r\n        bottomAxesCont.shouldClone = false;\r\n        bottomAxesCont.width = percent(100);\r\n        bottomAxesCont.layout = \"vertical\";\r\n        bottomAxesCont.zIndex = 1;\r\n        _this.bottomAxesContainer = bottomAxesCont;\r\n        // Create a container for left-side axes\r\n        var leftAxesCont = yAxesAndPlotCont.createChild(Container);\r\n        leftAxesCont.shouldClone = false;\r\n        leftAxesCont.layout = \"horizontal\";\r\n        leftAxesCont.height = percent(100);\r\n        leftAxesCont.contentAlign = \"right\";\r\n        leftAxesCont.events.on(\"transformed\", _this.updateXAxesMargins, _this, false);\r\n        leftAxesCont.zIndex = 1;\r\n        _this.leftAxesContainer = leftAxesCont;\r\n        // Create a container for plot area\r\n        var plotCont = yAxesAndPlotCont.createChild(Container);\r\n        plotCont.shouldClone = false;\r\n        plotCont.height = percent(100);\r\n        plotCont.width = percent(100);\r\n        // Create transparend background for plot container so that hover works\r\n        // on all of it\r\n        plotCont.background.fillOpacity = 0;\r\n        _this.plotContainer = plotCont;\r\n        // must go below plot container\r\n        _this.mouseWheelBehavior = \"none\";\r\n        _this._cursorContainer = plotCont;\r\n        // Create a container for right-side axes\r\n        var rightAxesCont = yAxesAndPlotCont.createChild(Container);\r\n        rightAxesCont.shouldClone = false;\r\n        rightAxesCont.layout = \"horizontal\";\r\n        rightAxesCont.height = percent(100);\r\n        rightAxesCont.zIndex = 1;\r\n        rightAxesCont.events.on(\"transformed\", _this.updateXAxesMargins, _this, false);\r\n        _this.rightAxesContainer = rightAxesCont;\r\n        _this.seriesContainer.parent = plotCont;\r\n        _this.bulletsContainer.parent = plotCont;\r\n        var zoomOutButton = plotCont.createChild(ZoomOutButton);\r\n        zoomOutButton.shouldClone = false;\r\n        zoomOutButton.align = \"right\";\r\n        zoomOutButton.valign = \"top\";\r\n        zoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\r\n        zoomOutButton.marginTop = 5;\r\n        zoomOutButton.marginRight = 5;\r\n        zoomOutButton.hide(0);\r\n        _this.zoomOutButton = zoomOutButton;\r\n        // Create a container for bullets\r\n        var axisBulletsContainer = _this.plotContainer.createChild(Container);\r\n        axisBulletsContainer.shouldClone = false;\r\n        axisBulletsContainer.width = percent(100);\r\n        axisBulletsContainer.height = percent(100);\r\n        axisBulletsContainer.isMeasured = false;\r\n        axisBulletsContainer.zIndex = 4;\r\n        axisBulletsContainer.layout = \"none\";\r\n        _this.axisBulletsContainer = axisBulletsContainer;\r\n        _this._bulletMask = _this.plotContainer;\r\n        _this.events.on(\"beforedatavalidated\", function () {\r\n            _this.series.each(function (series) {\r\n                series.dataGrouped = false;\r\n                series._baseInterval = {};\r\n            });\r\n        }, _this, false);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    XYChart.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        this.zoomOutButton.exportable = false;\r\n        // Add a default screen reader title for accessibility\r\n        // This will be overridden in screen reader if there are any `titles` set\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"X/Y chart\");\r\n        }\r\n    };\r\n    /**\r\n     * Draws the chart.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYChart.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        this.seriesContainer.toFront();\r\n        this.bulletsContainer.toFront();\r\n        if (this.maskBullets) {\r\n            this.bulletsContainer.mask = this._bulletMask;\r\n        }\r\n        this.updateSeriesLegend();\r\n    };\r\n    /**\r\n     * Triggers a redrawing of all chart's series.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYChart.prototype.updatePlotElements = function () {\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            series.invalidate();\r\n        });\r\n    };\r\n    /**\r\n     * Triggers data (re)validation which in turn can cause a redraw of the\r\n     * whole chart or just aprticular series / elements.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYChart.prototype.validateData = function () {\r\n        // tell axes that data changed\r\n        if (this._parseDataFrom == 0) {\r\n            $iter.each(this.xAxes.iterator(), function (axis) {\r\n                axis.dataChangeUpdate();\r\n            });\r\n            $iter.each(this.yAxes.iterator(), function (axis) {\r\n                axis.dataChangeUpdate();\r\n            });\r\n            $iter.each(this.series.iterator(), function (series) {\r\n                series.dataChangeUpdate();\r\n            });\r\n        }\r\n        _super.prototype.validateData.call(this);\r\n    };\r\n    /**\r\n     * Updates margins for horizontal axes based on settings and available space.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYChart.prototype.updateXAxesMargins = function () {\r\n        var leftAxesWidth = this.leftAxesContainer.measuredWidth;\r\n        var rightAxesWidth = this.rightAxesContainer.measuredWidth;\r\n        var bottomAxesCont = this.bottomAxesContainer;\r\n        if (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {\r\n            bottomAxesCont.paddingLeft = leftAxesWidth;\r\n            bottomAxesCont.paddingRight = rightAxesWidth;\r\n        }\r\n        var topAxesCont = this.topAxesContainer;\r\n        if (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {\r\n            topAxesCont.paddingLeft = leftAxesWidth;\r\n            topAxesCont.paddingRight = rightAxesWidth;\r\n        }\r\n    };\r\n    /**\r\n     * Triggers a re-initialization of this element.\r\n     *\r\n     * Will result in complete redrawing of the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYChart.prototype.reinit = function () {\r\n        _super.prototype.reinit.call(this);\r\n        this.series.each(function (series) {\r\n            series.appeared = false;\r\n        });\r\n    };\r\n    /**\r\n     * Triggers an update on the horizontal axis when one of its properties\r\n     * change.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event An event object\r\n     */\r\n    XYChart.prototype.handleXAxisChange = function (event) {\r\n        this.updateXAxis(event.target);\r\n    };\r\n    /**\r\n     * Triggers an update on the vertical axis when one of its properties\r\n     * change.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event An event object\r\n     */\r\n    XYChart.prototype.handleYAxisChange = function (event) {\r\n        this.updateYAxis(event.target);\r\n    };\r\n    /**\r\n     * Sets up a new horizontal (X) axis when it is added to the chart.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event  Axis insert event\r\n     */\r\n    XYChart.prototype.processXAxis = function (event) {\r\n        var axis = event.newValue;\r\n        axis.chart = this;\r\n        if (!axis.renderer) {\r\n            axis.renderer = new this._axisRendererX();\r\n            axis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleXAxisChange, this, false);\r\n        }\r\n        axis.axisLetter = \"X\";\r\n        axis.events.on(\"startendchanged\", this.handleXAxisRangeChange, this, false);\r\n        //axis.events.on(\"endchanged\", this.handleXAxisRangeChange, this, false);\r\n        // Although axis does not use data directly, we set dataProvider here\r\n        // (but not add to chart data users) to hold up rendering before data\r\n        // is parsed (system handles this)\r\n        axis.dataProvider = this;\r\n        this.updateXAxis(axis.renderer);\r\n        this.processAxis(axis);\r\n    };\r\n    /**\r\n     * Sets up a new vertical (Y) axis when it is added to the chart.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event Axis insert event\r\n     */\r\n    XYChart.prototype.processYAxis = function (event) {\r\n        var axis = event.newValue;\r\n        axis.chart = this;\r\n        if (!axis.renderer) {\r\n            axis.renderer = new this._axisRendererY();\r\n            axis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleYAxisChange, this, false);\r\n        }\r\n        axis.axisLetter = \"Y\";\r\n        axis.events.on(\"startendchanged\", this.handleYAxisRangeChange, this, false);\r\n        //axis.events.on(\"endchanged\", this.handleYAxisRangeChange, this, false);\r\n        // Although axis does not use data directly, we set dataProvider here\r\n        // (but not add to chart data users) to hold up rendering before data\r\n        // is parsed (system handles this)\r\n        axis.dataProvider = this;\r\n        this.updateYAxis(axis.renderer);\r\n        this.processAxis(axis);\r\n    };\r\n    /**\r\n     * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'\r\n     * value range changes.\r\n     */\r\n    XYChart.prototype.handleXAxisRangeChange = function () {\r\n        var range = this.getCommonAxisRange(this.xAxes);\r\n        if (this.scrollbarX) {\r\n            this.zoomAxes(this.xAxes, range, true);\r\n        }\r\n        this.toggleZoomOutButton();\r\n        this.updateScrollbar(this.scrollbarX, range);\r\n    };\r\n    /**\r\n     * Shows or hides the Zoom Out button depending on whether the chart is fully\r\n     * zoomed out or not.\r\n     */\r\n    XYChart.prototype.toggleZoomOutButton = function () {\r\n        if (this.zoomOutButton) {\r\n            var show_1 = false;\r\n            $iter.eachContinue(this.xAxes.iterator(), function (axis) {\r\n                if (axis.toggleZoomOutButton) {\r\n                    if (axis.maxZoomCount > 0) {\r\n                        var minZoomFactor = axis.maxZoomFactor / axis.maxZoomCount;\r\n                        if ($math.round(axis.end - axis.start, 3) < 1 / minZoomFactor) {\r\n                            show_1 = true;\r\n                            return false;\r\n                        }\r\n                    }\r\n                    else {\r\n                        if ($math.round(axis.start, 3) > 0 || $math.round(axis.end, 3) < 1) {\r\n                            show_1 = true;\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n                return true;\r\n            });\r\n            $iter.eachContinue(this.yAxes.iterator(), function (axis) {\r\n                if (axis.toggleZoomOutButton) {\r\n                    if (axis.maxZoomCount > 0) {\r\n                        var minZoomFactor = axis.maxZoomFactor / axis.maxZoomCount;\r\n                        if ($math.round(axis.end - axis.start, 3) < 1 / minZoomFactor) {\r\n                            show_1 = true;\r\n                            return false;\r\n                        }\r\n                    }\r\n                    else {\r\n                        if ($math.round(axis.start, 3) > 0 || $math.round(axis.end, 3) < 1) {\r\n                            show_1 = true;\r\n                            return false;\r\n                        }\r\n                    }\r\n                    return true;\r\n                }\r\n            });\r\n            if (!this.seriesAppeared) {\r\n                show_1 = false;\r\n            }\r\n            if (show_1) {\r\n                this.zoomOutButton.show();\r\n            }\r\n            else {\r\n                this.zoomOutButton.hide();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     * moved this check to a separate method so that we could override it in TreeMapSeries\r\n     */\r\n    XYChart.prototype.seriesAppeared = function () {\r\n        var appeared = false;\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            if (!series.appeared) {\r\n                appeared = false;\r\n                return false;\r\n            }\r\n        });\r\n        return appeared;\r\n    };\r\n    /**\r\n     * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'\r\n     * value range changes.\r\n     */\r\n    XYChart.prototype.handleYAxisRangeChange = function () {\r\n        var range = this.getCommonAxisRange(this.yAxes);\r\n        if (this.scrollbarY) {\r\n            this.zoomAxes(this.yAxes, range, true);\r\n        }\r\n        this.toggleZoomOutButton();\r\n        this.updateScrollbar(this.scrollbarY, range);\r\n    };\r\n    /**\r\n     * Updates a relative scrollbar whenever data range of the axis changes.\r\n     *\r\n     * @param scrollbar  Scrollbar instance\r\n     * @param range      New data (values) range of the axis\r\n     */\r\n    XYChart.prototype.updateScrollbar = function (scrollbar, range) {\r\n        if (scrollbar) {\r\n            scrollbar.skipRangeEvents();\r\n            scrollbar.start = range.start;\r\n            scrollbar.end = range.end;\r\n        }\r\n    };\r\n    /**\r\n     * Returns a common range of values between a list of axes.\r\n     *\r\n     * This is used to synchronize the zoom between multiple axes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param axes  A list of axes\r\n     * @return Common value range\r\n     */\r\n    XYChart.prototype.getCommonAxisRange = function (axes) {\r\n        var start;\r\n        var end;\r\n        axes.each(function (axis) {\r\n            if (!axis.zoomable || (axis instanceof ValueAxis && axis.syncWithAxis)) {\r\n            }\r\n            else {\r\n                var axisStart = axis.start;\r\n                var axisEnd = axis.end;\r\n                if (axis.renderer.inversed) {\r\n                    axisStart = 1 - axis.end;\r\n                    axisEnd = 1 - axis.start;\r\n                }\r\n                if (!$type.isNumber(start) || (axisStart < start)) {\r\n                    start = axisStart;\r\n                }\r\n                if (!$type.isNumber(end) || (axisEnd > end)) {\r\n                    end = axisEnd;\r\n                }\r\n            }\r\n        });\r\n        return { start: start, end: end };\r\n    };\r\n    /**\r\n     * Triggers (re)rendering of the horizontal (X) axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param axis  Axis\r\n     */\r\n    XYChart.prototype.updateXAxis = function (renderer) {\r\n        var axis = renderer.axis;\r\n        if (renderer.opposite) {\r\n            axis.parent = this.topAxesContainer;\r\n            axis.toFront();\r\n        }\r\n        else {\r\n            axis.parent = this.bottomAxesContainer;\r\n            axis.toBack();\r\n        }\r\n        if (axis.renderer) {\r\n            axis.renderer.processRenderer();\r\n        }\r\n    };\r\n    /**\r\n     * Triggers (re)rendering of the vertical (Y) axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param axis  Axis\r\n     */\r\n    XYChart.prototype.updateYAxis = function (renderer) {\r\n        var axis = renderer.axis;\r\n        if (renderer.opposite) {\r\n            axis.parent = this.rightAxesContainer;\r\n            axis.toBack();\r\n        }\r\n        else {\r\n            axis.parent = this.leftAxesContainer;\r\n            axis.toFront();\r\n        }\r\n        if (axis.renderer) {\r\n            axis.renderer.processRenderer();\r\n        }\r\n    };\r\n    /**\r\n     * Decorates an Axis for use with this chart, e.g. sets proper renderer\r\n     * and containers for placement.\r\n     *\r\n     * @param axis  Axis\r\n     */\r\n    XYChart.prototype.processAxis = function (axis) {\r\n        var _this = this;\r\n        // Value axis does not use data directly, only category axis does\r\n        if (axis instanceof CategoryAxis) {\r\n            this._dataUsers.moveValue(axis);\r\n        }\r\n        var renderer = axis.renderer;\r\n        renderer.gridContainer.parent = this.plotContainer;\r\n        renderer.gridContainer.toBack();\r\n        renderer.breakContainer.parent = this.plotContainer;\r\n        renderer.breakContainer.toFront();\r\n        renderer.breakContainer.zIndex = 10;\r\n        axis.addDisposer(new Disposer(function () {\r\n            _this.dataUsers.removeValue(axis);\r\n        }));\r\n        renderer.bulletsContainer.parent = this.axisBulletsContainer;\r\n        this._disposers.push(axis.events.on(\"positionchanged\", function () {\r\n            var point = $utils.spritePointToSprite({ x: 0, y: 0 }, axis, _this.axisBulletsContainer);\r\n            if (axis.renderer instanceof AxisRendererY) {\r\n                renderer.bulletsContainer.y = point.y;\r\n            }\r\n            if (axis.renderer instanceof AxisRendererX) {\r\n                renderer.bulletsContainer.x = point.x;\r\n            }\r\n        }, undefined, false));\r\n        this.plotContainer.events.on(\"maxsizechanged\", function () {\r\n            if (_this.inited) {\r\n                axis.invalidateDataItems();\r\n                _this.updateSeriesMasks();\r\n            }\r\n        }, axis, false);\r\n    };\r\n    /**\r\n     * This is done because for some reason IE doesn't change mask if path of a\r\n     * mask changes.\r\n     */\r\n    XYChart.prototype.updateSeriesMasks = function () {\r\n        if ($utils.isIE()) {\r\n            this.series.each(function (series) {\r\n                var mask = series.mainContainer.mask;\r\n                series.mainContainer.mask = undefined;\r\n                series.mainContainer.mask = mask;\r\n            });\r\n        }\r\n    };\r\n    XYChart.prototype.handleSeriesRemoved = function (event) {\r\n        var series = event.oldValue;\r\n        if (series) {\r\n            if (series.xAxis) {\r\n                series.xAxis.series.removeValue(series);\r\n                series.xAxis.invalidateProcessedData();\r\n            }\r\n            if (series.yAxis) {\r\n                series.yAxis.series.removeValue(series);\r\n                series.yAxis.invalidateProcessedData();\r\n            }\r\n            // otherwise extremes won't change\r\n            this.series.each(function (series) {\r\n                series.resetExtremes();\r\n            });\r\n        }\r\n        _super.prototype.handleSeriesRemoved.call(this, event);\r\n    };\r\n    Object.defineProperty(XYChart.prototype, \"xAxes\", {\r\n        /**\r\n         * A list of horizontal (X) axes.\r\n         *\r\n         * @return List of axes\r\n         */\r\n        get: function () {\r\n            if (!this._xAxes) {\r\n                this._xAxes = new List();\r\n                this._xAxes.events.on(\"inserted\", this.processXAxis, this, false);\r\n                this._xAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n                this._disposers.push(new ListDisposer(this._xAxes, false));\r\n            }\r\n            return this._xAxes;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    XYChart.prototype.handleAxisRemoval = function (event) {\r\n        var axis = event.oldValue;\r\n        this.dataUsers.removeValue(axis); // need to remove, as it might not be disposed\r\n        if (axis.autoDispose) {\r\n            axis.dispose();\r\n        }\r\n    };\r\n    Object.defineProperty(XYChart.prototype, \"yAxes\", {\r\n        /**\r\n         * A list of vertical (Y) axes.\r\n         *\r\n         * @return List of axes\r\n         */\r\n        get: function () {\r\n            if (!this._yAxes) {\r\n                this._yAxes = new List();\r\n                this._yAxes.events.on(\"inserted\", this.processYAxis, this, false);\r\n                this._yAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n                this._disposers.push(new ListDisposer(this._yAxes, false));\r\n            }\r\n            return this._yAxes;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Decorates a new [[XYSeries]] object with required parameters when it is\r\n     * added to the chart.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event  Event\r\n     */\r\n    XYChart.prototype.handleSeriesAdded = function (event) {\r\n        try {\r\n            _super.prototype.handleSeriesAdded.call(this, event);\r\n            var series = event.newValue;\r\n            if (this.xAxes.length == 0 || this.yAxes.length == 0) {\r\n                registry.removeFromInvalidComponents(series);\r\n                series.dataInvalid = false;\r\n            }\r\n            $utils.used(series.xAxis); // this is enough to get axis, handled in getter\r\n            $utils.used(series.yAxis); // this is enough to get axis, handled in getter\r\n            series.maskBullets = series.maskBullets;\r\n            if (series.fill == undefined) {\r\n                if (this.patterns) {\r\n                    if (!$type.hasValue(series.stroke)) {\r\n                        series.stroke = this.colors.next();\r\n                    }\r\n                    series.fill = this.patterns.next();\r\n                    if ($type.hasValue(series.fillOpacity)) {\r\n                        series.fill.backgroundOpacity = series.fillOpacity;\r\n                    }\r\n                    if (series.stroke instanceof Color) {\r\n                        series.fill.stroke = series.stroke;\r\n                        series.fill.fill = series.stroke;\r\n                    }\r\n                }\r\n                else {\r\n                    series.fill = this.colors.next();\r\n                }\r\n            }\r\n            if (!$type.hasValue(series.stroke)) {\r\n                series.stroke = series.fill;\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.raiseCriticalError(e);\r\n        }\r\n    };\r\n    Object.defineProperty(XYChart.prototype, \"cursor\", {\r\n        /**\r\n         * @return Cursor\r\n         */\r\n        get: function () {\r\n            return this._cursor;\r\n        },\r\n        /**\r\n         * Chart's [[Cursor]].\r\n         *\r\n         * @param cursor  Cursor\r\n         */\r\n        set: function (cursor) {\r\n            if (this._cursor != cursor) {\r\n                if (this._cursor) {\r\n                    this.removeDispose(this._cursor);\r\n                }\r\n                this._cursor = cursor;\r\n                if (cursor) {\r\n                    // TODO this is wrong, fix it\r\n                    this._disposers.push(cursor);\r\n                    cursor.chart = this;\r\n                    cursor.shouldClone = false;\r\n                    cursor.parent = this._cursorContainer;\r\n                    cursor.events.on(\"cursorpositionchanged\", this.handleCursorPositionChange, this, false);\r\n                    cursor.events.on(\"zoomstarted\", this.handleCursorZoomStart, this, false);\r\n                    cursor.events.on(\"zoomended\", this.handleCursorZoomEnd, this, false);\r\n                    cursor.events.on(\"panstarted\", this.handleCursorPanStart, this, false);\r\n                    cursor.events.on(\"panning\", this.handleCursorPanning, this, false);\r\n                    cursor.events.on(\"panended\", this.handleCursorPanEnd, this, false);\r\n                    cursor.events.on(\"behaviorcanceled\", this.handleCursorCanceled, this, false);\r\n                    cursor.events.on(\"hidden\", this.handleHideCursor, this, false);\r\n                    cursor.zIndex = Number.MAX_SAFE_INTEGER - 1;\r\n                    if (this.tapToActivate) {\r\n                        // We need this in order to setup cursor properly\r\n                        this.setTapToActivate(this.tapToActivate);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Performs tasks when the cursor's position changes, e.g. shows proper\r\n     * tooltips on axes and series.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYChart.prototype.handleCursorPositionChange = function () {\r\n        var cursor = this.cursor;\r\n        if (cursor.visible && !cursor.isHiding) {\r\n            var xPosition_1 = this.cursor.xPosition;\r\n            var yPosition_1 = this.cursor.yPosition;\r\n            this.showSeriesTooltip({\r\n                x: xPosition_1,\r\n                y: yPosition_1\r\n            });\r\n            var exceptAxes_1 = [];\r\n            var snapToSeries = cursor.snapToSeries;\r\n            if (snapToSeries && !cursor.downPoint) {\r\n                if (snapToSeries instanceof XYSeries) {\r\n                    snapToSeries = [snapToSeries];\r\n                }\r\n                var dataItems_1 = [];\r\n                $array.each(snapToSeries, function (snpSeries) {\r\n                    if (!snpSeries.isHidden && !snpSeries.isHiding) {\r\n                        var xAxis = snpSeries.xAxis;\r\n                        var yAxis = snpSeries.yAxis;\r\n                        if (xAxis instanceof ValueAxis && !(xAxis instanceof DateAxis) && yAxis instanceof ValueAxis && !(yAxis instanceof DateAxis)) {\r\n                            snpSeries.dataItems.each(function (dataItem) {\r\n                                dataItems_1.push(dataItem);\r\n                            });\r\n                            $array.move(exceptAxes_1, snpSeries.yAxis);\r\n                            $array.move(exceptAxes_1, snpSeries.xAxis);\r\n                        }\r\n                        else {\r\n                            if (snpSeries.baseAxis == snpSeries.xAxis) {\r\n                                $array.move(exceptAxes_1, snpSeries.yAxis);\r\n                                dataItems_1.push(xAxis.getSeriesDataItem(snpSeries, xAxis.toAxisPosition(xPosition_1), true));\r\n                            }\r\n                            if (snpSeries.baseAxis == snpSeries.yAxis) {\r\n                                $array.move(exceptAxes_1, snpSeries.xAxis);\r\n                                dataItems_1.push(yAxis.getSeriesDataItem(snpSeries, yAxis.toAxisPosition(yPosition_1), true));\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n                var closestDataItem_1 = this.getClosest(dataItems_1, xPosition_1, yPosition_1);\r\n                if (closestDataItem_1) {\r\n                    this.series.each(function (series) {\r\n                        var closestSeries = closestDataItem_1.component;\r\n                        if (series != closestSeries) {\r\n                            series.hideTooltip();\r\n                            if (series.xAxis != closestSeries.xAxis) {\r\n                                series.xAxis.hideTooltip();\r\n                                exceptAxes_1.push(series.xAxis);\r\n                            }\r\n                            if (series.yAxis != closestSeries.yAxis) {\r\n                                series.yAxis.hideTooltip();\r\n                                exceptAxes_1.push(series.yAxis);\r\n                            }\r\n                        }\r\n                    });\r\n                    closestDataItem_1.component.showTooltipAtDataItem(closestDataItem_1);\r\n                    cursor.handleSnap(closestDataItem_1.component);\r\n                }\r\n            }\r\n            //}\r\n            this._seriesPoints = [];\r\n            if (this._cursorXPosition != xPosition_1) {\r\n                this.showAxisTooltip(this.xAxes, xPosition_1, exceptAxes_1);\r\n            }\r\n            if (this._cursorYPosition != yPosition_1) {\r\n                this.showAxisTooltip(this.yAxes, yPosition_1, exceptAxes_1);\r\n            }\r\n            if (this.arrangeTooltips) {\r\n                this.sortSeriesTooltips(this._seriesPoints);\r\n            }\r\n            if (this.legend) {\r\n                this.legend.afterDraw();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Finds closest data item to position out of the array of items.\r\n     *\r\n     * @since 4.9.29\r\n     * @param   dataItems  Array of items\r\n     * @param              xPosition X position\r\n     * @param              yPosition Y position\r\n     * @return             Data item\r\n     */\r\n    XYChart.prototype.getClosest = function (dataItems, xPosition, yPosition) {\r\n        var minDistance = Infinity;\r\n        var closestDataItem;\r\n        $array.eachContinue(dataItems, function (dataItem) {\r\n            if (dataItem) {\r\n                var xAxis = dataItem.component.xAxis;\r\n                var yAxis = dataItem.component.yAxis;\r\n                var xPos = xAxis.positionToCoordinate(xAxis.toGlobalPosition(xAxis.toAxisPosition(xPosition)));\r\n                var yPos = yAxis.positionToCoordinate(yAxis.toGlobalPosition(yAxis.toAxisPosition(yPosition)));\r\n                var xField = dataItem.component.xField;\r\n                var yField = dataItem.component.yField;\r\n                if (xAxis instanceof ValueAxis && !$type.isNumber(dataItem.getValue(xField))) {\r\n                    return true;\r\n                }\r\n                if (yAxis instanceof ValueAxis && !$type.isNumber(dataItem.getValue(yField))) {\r\n                    return true;\r\n                }\r\n                var dxPosition = xAxis.positionToCoordinate(xAxis.toGlobalPosition(xAxis.getPositionX(dataItem, xField, dataItem.locations[xField], \"valueX\")));\r\n                var dyPosition = yAxis.positionToCoordinate(yAxis.toGlobalPosition(yAxis.getPositionY(dataItem, yField, dataItem.locations[yField], \"valueY\")));\r\n                var distance = Math.sqrt(Math.pow(xPos - dxPosition, 2) + Math.pow(yPos - dyPosition, 2));\r\n                if (distance < minDistance) {\r\n                    minDistance = distance;\r\n                    closestDataItem = dataItem;\r\n                }\r\n                return true;\r\n            }\r\n        });\r\n        return closestDataItem;\r\n    };\r\n    /**\r\n     * Hides all cursor-related tooltips when the cursor itself is hidden.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYChart.prototype.handleHideCursor = function () {\r\n        this.hideObjectTooltip(this.xAxes);\r\n        this.hideObjectTooltip(this.yAxes);\r\n        this.hideObjectTooltip(this.series);\r\n        this._cursorXPosition = undefined;\r\n        this._cursorYPosition = undefined;\r\n        this.updateSeriesLegend();\r\n    };\r\n    /**\r\n     * Updates values for each series' legend item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    XYChart.prototype.updateSeriesLegend = function () {\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            series.updateLegendValue();\r\n        });\r\n    };\r\n    /**\r\n     * Hides a tooltip for a list of objects.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param sprites  A list of sprites to hide tooltip for\r\n     */\r\n    XYChart.prototype.hideObjectTooltip = function (sprites) {\r\n        $iter.each(sprites.iterator(), function (sprite) {\r\n            if (sprite.cursorTooltipEnabled) {\r\n                sprite.hideTooltip(0);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Shows a tooltip for all chart's series, using specific coordinates as a\r\n     * reference point.\r\n     *\r\n     * The tooltip might be shown at different coordinates depending on the\r\n     * actual data point's position, overlapping with other tooltips, etc.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param position  Reference point\r\n     */\r\n    XYChart.prototype.showSeriesTooltip = function (position) {\r\n        var _this = this;\r\n        if (!position) {\r\n            this.series.each(function (series) {\r\n                series.hideTooltip();\r\n            });\r\n            return;\r\n        }\r\n        var seriesPoints = [];\r\n        this.series.each(function (series) {\r\n            //if (series.tooltipText || series.tooltipHTML) { // not good, bullets are not hovered then\r\n            if ((series.xAxis instanceof DateAxis && series.xAxis.snapTooltip) || (series.yAxis instanceof DateAxis && series.yAxis.snapTooltip)) {\r\n                // void\r\n            }\r\n            else {\r\n                var point = series.showTooltipAtPosition(position.x, position.y);\r\n                if (point) {\r\n                    series.tooltip.setBounds($utils.spriteRectToSvg({ x: 0, y: 0, width: _this.pixelWidth, height: _this.pixelHeight }, _this));\r\n                    seriesPoints.push({ series: series, point: point });\r\n                }\r\n            }\r\n            //}\r\n        });\r\n        if (this.arrangeTooltips) {\r\n            this.sortSeriesTooltips(seriesPoints);\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    XYChart.prototype.sortSeriesTooltips = function (seriesPoints) {\r\n        if (seriesPoints.length > 0) {\r\n            var cursor_1 = this.cursor;\r\n            if (cursor_1 && $type.isNumber(cursor_1.maxTooltipDistance)) {\r\n                var cursorPoint_1 = $utils.spritePointToSvg({ x: cursor_1.point.x, y: cursor_1.point.y }, cursor_1);\r\n                var nearestSeries_1;\r\n                var nearestPoint_1;\r\n                var smallestDistance_1 = Infinity;\r\n                $array.each(seriesPoints, function (seriesPoint) {\r\n                    var series = seriesPoint.series;\r\n                    var fixedPoint = seriesPoint.point;\r\n                    if (fixedPoint) {\r\n                        var point = { x: fixedPoint.x, y: fixedPoint.y };\r\n                        var distance = Math.abs($math.getDistance(point, cursorPoint_1));\r\n                        if (distance < smallestDistance_1) {\r\n                            nearestPoint_1 = point;\r\n                            smallestDistance_1 = distance;\r\n                            nearestSeries_1 = series;\r\n                        }\r\n                    }\r\n                });\r\n                var newSeriesPoints_1 = [];\r\n                if (nearestSeries_1) {\r\n                    $array.each(seriesPoints, function (seriesPoint) {\r\n                        if (Math.abs($math.getDistance(seriesPoint.point, nearestPoint_1)) <= Math.abs(cursor_1.maxTooltipDistance)) {\r\n                            newSeriesPoints_1.push({ series: seriesPoint.series, point: seriesPoint.point });\r\n                        }\r\n                        else {\r\n                            var tooltipDataItem = seriesPoint.series.tooltipDataItem;\r\n                            if (tooltipDataItem) {\r\n                                $array.each(tooltipDataItem.sprites, function (sprite) {\r\n                                    sprite.isHover = false;\r\n                                    sprite.handleOutReal(); // to avoid flicker\r\n                                });\r\n                            }\r\n                            seriesPoint.series.hideTooltip(0);\r\n                        }\r\n                    });\r\n                    if (cursor_1.maxTooltipDistance < 0) {\r\n                        if (newSeriesPoints_1.length > 0) {\r\n                            $array.each(newSeriesPoints_1, function (np) {\r\n                                if (nearestSeries_1 != np.series) {\r\n                                    np.series.hideTooltip(0);\r\n                                }\r\n                            });\r\n                        }\r\n                        newSeriesPoints_1 = [{ series: nearestSeries_1, point: nearestPoint_1 }];\r\n                    }\r\n                }\r\n                seriesPoints = newSeriesPoints_1;\r\n            }\r\n            var topLeft_1 = $utils.spritePointToSvg({ x: -0.5, y: -0.5 }, this.plotContainer);\r\n            var bottomRight_1 = $utils.spritePointToSvg({ x: this.plotContainer.pixelWidth + 0.5, y: this.plotContainer.pixelHeight + 0.5 }, this.plotContainer);\r\n            var sum_1 = 0;\r\n            var filteredSeriesPoints_1 = [];\r\n            $array.each(seriesPoints, function (seriesPoint) {\r\n                var point = seriesPoint.point;\r\n                if (point && $math.isInRectangle(point, { x: topLeft_1.x, y: topLeft_1.y, width: bottomRight_1.x - topLeft_1.x, height: bottomRight_1.y - topLeft_1.y })) {\r\n                    filteredSeriesPoints_1.push({ point: point, series: seriesPoint.series });\r\n                    sum_1 += point.y;\r\n                }\r\n            });\r\n            seriesPoints = filteredSeriesPoints_1;\r\n            var firstSeries = this.series.getIndex(0);\r\n            var inversed = false;\r\n            if (firstSeries && firstSeries.yAxis && firstSeries.yAxis.renderer.inversed) {\r\n                inversed = true;\r\n            }\r\n            if (inversed) {\r\n                seriesPoints.sort(function (a, b) { return $number.order(a.point.y, b.point.y); });\r\n            }\r\n            else {\r\n                seriesPoints.sort(function (a, b) { return $number.order(b.point.y, a.point.y); });\r\n                seriesPoints.reverse();\r\n            }\r\n            var averageY = sum_1 / seriesPoints.length;\r\n            var maxY = $utils.svgPointToDocument({ x: 0, y: 0 }, this.svgContainer.SVGContainer).y;\r\n            if (seriesPoints.length > 0) {\r\n                var top_1 = topLeft_1.y;\r\n                var bottom = bottomRight_1.y;\r\n                // TODO is this needed ?\r\n                $utils.spritePointToDocument({ x: 0, y: top_1 }, this);\r\n                var dropped = false;\r\n                if (averageY > top_1 + (bottom - top_1) / 2) {\r\n                    var nextHeight = bottom;\r\n                    for (var i = seriesPoints.length - 1; i >= 0; i--) {\r\n                        var series = seriesPoints[i].series;\r\n                        var tooltip = series.tooltip;\r\n                        var pointY = seriesPoints[i].point.y;\r\n                        tooltip.setBounds({ x: 0, y: -maxY, width: this.pixelWidth, height: nextHeight + maxY });\r\n                        if (tooltip.invalid) {\r\n                            tooltip.validate();\r\n                        }\r\n                        tooltip.toBack();\r\n                        nextHeight = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop }, tooltip).y;\r\n                        if (nextHeight < -maxY) {\r\n                            dropped = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (averageY <= top_1 + (bottom - top_1) / 2 || dropped) {\r\n                    var nextY = top_1;\r\n                    for (var i = 0, len = seriesPoints.length; i < len; i++) {\r\n                        var series = seriesPoints[i].series;\r\n                        var pointY = seriesPoints[i].point.y;\r\n                        var tooltip = series.tooltip;\r\n                        tooltip.setBounds({ x: 0, y: nextY, width: this.pixelWidth, height: bottom });\r\n                        if (tooltip.invalid) {\r\n                            tooltip.validate();\r\n                        }\r\n                        tooltip.toBack();\r\n                        nextY = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY + tooltip.label.measuredHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom }, tooltip).y;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Shows tooltips for a list of axes at specific position.\r\n     *\r\n     * Position might be X coordinate for horizontal axes, and Y coordinate for\r\n     * vertical axes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param axes      List of axes to show tooltip on\r\n     * @param position  Position (px)\r\n     */\r\n    XYChart.prototype.showAxisTooltip = function (axes, position, except) {\r\n        var _this = this;\r\n        $iter.each(axes.iterator(), function (axis) {\r\n            if (!except || except.indexOf(axis) == -1) {\r\n                if (_this.dataItems.length > 0 || axis.dataItems.length > 0) {\r\n                    axis.showTooltipAtPosition(position);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Recalculates the value range for the axis taking into account zoom level & inversed.\r\n     *\r\n     * @param axis   Axis\r\n     * @param range  Range\r\n     * @return Modified range\r\n     */\r\n    XYChart.prototype.getUpdatedRange = function (axis, range) {\r\n        if (!axis) {\r\n            return;\r\n        }\r\n        var start;\r\n        var end;\r\n        var inversed = axis.renderer.inversed;\r\n        if (inversed) {\r\n            $math.invertRange(range);\r\n            start = 1 - axis.end;\r\n            end = 1 - axis.start;\r\n        }\r\n        else {\r\n            start = axis.start;\r\n            end = axis.end;\r\n        }\r\n        var difference = end - start;\r\n        return {\r\n            start: start + range.start * difference,\r\n            end: start + range.end * difference\r\n        };\r\n    };\r\n    /**\r\n     * Performs zoom and other operations when user finishes zooming using chart\r\n     * cursor, e.g. zooms axes.\r\n     *\r\n     * @param event Cursor's event\r\n     */\r\n    XYChart.prototype.handleCursorZoomEnd = function (event) {\r\n        var cursor = this.cursor;\r\n        var behavior = cursor.behavior;\r\n        if (behavior == \"zoomX\" || behavior == \"zoomXY\") {\r\n            var xRange = cursor.xRange;\r\n            if (xRange && this.xAxes.length > 0) {\r\n                xRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);\r\n                xRange.priority = \"start\";\r\n                this.zoomAxes(this.xAxes, xRange);\r\n            }\r\n        }\r\n        if (behavior == \"zoomY\" || behavior == \"zoomXY\") {\r\n            var yRange = cursor.yRange;\r\n            if (yRange && this.yAxes.length > 0) {\r\n                yRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);\r\n                yRange.priority = \"start\";\r\n                this.zoomAxes(this.yAxes, yRange);\r\n            }\r\n        }\r\n        this.handleHideCursor();\r\n    };\r\n    /**\r\n     * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n     *\r\n     * @param event Cursor's event\r\n     */\r\n    XYChart.prototype.handleCursorPanStart = function (event) {\r\n        var xAxis = this.xAxes.getIndex(0);\r\n        if (xAxis) {\r\n            this._panStartXRange = { start: xAxis.start, end: xAxis.end };\r\n            if (xAxis.renderer.inversed) {\r\n                this._panStartXRange = $math.invertRange(this._panStartXRange);\r\n            }\r\n        }\r\n        var yAxis = this.yAxes.getIndex(0);\r\n        if (yAxis) {\r\n            this._panStartYRange = { start: yAxis.start, end: yAxis.end };\r\n            if (yAxis.renderer.inversed) {\r\n                this._panStartYRange = $math.invertRange(this._panStartYRange);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Performs zoom and other operations when user ends panning\r\n     *\r\n     * @param event Cursor's event\r\n     */\r\n    XYChart.prototype.handleCursorPanEnd = function (event) {\r\n        var cursor = this.cursor;\r\n        var behavior = cursor.behavior;\r\n        if (this._panEndXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n            var panEndRange = this._panEndXRange;\r\n            var panStartRange = this._panStartXRange;\r\n            var delta = 0;\r\n            if (panEndRange.start < 0) {\r\n                delta = panEndRange.start;\r\n            }\r\n            if (panStartRange.end > 1) {\r\n                if (panEndRange.end > panStartRange.end) {\r\n                    delta = panEndRange.end - panStartRange.end;\r\n                }\r\n            }\r\n            else if (panEndRange.end > 1) {\r\n                delta = panEndRange.end - 1;\r\n            }\r\n            this.zoomAxes(this.xAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, cursor.snapOnPan);\r\n            this._panEndXRange = undefined;\r\n            this._panStartXRange = undefined;\r\n        }\r\n        if (this._panEndYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n            var panEndRange = this._panEndYRange;\r\n            var delta = 0;\r\n            if (panEndRange.start < 0) {\r\n                delta = panEndRange.start;\r\n            }\r\n            if (panEndRange.end > 1) {\r\n                delta = panEndRange.end - 1;\r\n            }\r\n            this.zoomAxes(this.yAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, cursor.snapOnPan);\r\n            this._panEndYRange = undefined;\r\n            this._panStartYRange = undefined;\r\n        }\r\n    };\r\n    XYChart.prototype.handleCursorCanceled = function () {\r\n        this._panEndXRange = undefined;\r\n        this._panStartXRange = undefined;\r\n    };\r\n    /**\r\n     * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n     *\r\n     * @param event Cursor's event\r\n     */\r\n    XYChart.prototype.handleCursorPanning = function (event) {\r\n        var cursor = this.cursor;\r\n        var behavior = cursor.behavior;\r\n        var maxPanOut = cursor.maxPanOut;\r\n        if (this._panStartXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n            var panStartRange = this._panStartXRange;\r\n            var range = cursor.xRange;\r\n            var axisRange = this.getCommonAxisRange(this.xAxes);\r\n            var difference = (panStartRange.end - panStartRange.start);\r\n            var delta = range.start * (axisRange.end - axisRange.start);\r\n            var newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n            var newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\r\n            if (newStart <= 0) {\r\n                newEnd = newStart + difference;\r\n            }\r\n            if (newEnd >= 1) {\r\n                newStart = newEnd - difference;\r\n            }\r\n            var newRange = {\r\n                start: newStart,\r\n                end: newEnd\r\n            };\r\n            this._panEndXRange = newRange;\r\n            this.zoomAxes(this.xAxes, newRange, false, false, cursor.maxPanOut);\r\n        }\r\n        if (this._panStartYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n            var panStartRange = this._panStartYRange;\r\n            var range = cursor.yRange;\r\n            var axisRange = this.getCommonAxisRange(this.yAxes);\r\n            var difference = panStartRange.end - panStartRange.start;\r\n            var delta = range.start * (axisRange.end - axisRange.start);\r\n            var newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n            var newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\r\n            if (newStart <= 0) {\r\n                newEnd = newStart + difference;\r\n            }\r\n            if (newEnd >= 1) {\r\n                newStart = newEnd - difference;\r\n            }\r\n            var newRange = {\r\n                start: newStart,\r\n                end: newEnd\r\n            };\r\n            this._panEndYRange = newRange;\r\n            this.zoomAxes(this.yAxes, newRange, false, false, cursor.maxPanOut);\r\n        }\r\n        this.handleHideCursor();\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    XYChart.prototype.handleYAxisSet = function (series) {\r\n    };\r\n    /**\r\n     * Performs zoom and other operations when user starts zooming using chart\r\n     * cursor, e.g. zooms axes.\r\n     *\r\n     * @param event Cursor's event\r\n     */\r\n    XYChart.prototype.handleCursorZoomStart = function (event) {\r\n        // Nothing here\r\n        // This method is here only as a \"placeholder\" for extending classes to\r\n        // override if necessary\r\n    };\r\n    Object.defineProperty(XYChart.prototype, \"scrollbarX\", {\r\n        /**\r\n         * @return Scrollbar\r\n         */\r\n        get: function () {\r\n            return this._scrollbarX;\r\n        },\r\n        /**\r\n         * Horizontal (X) scrollbar.\r\n         *\r\n         * @param scrollbar Scrollbar\r\n         */\r\n        set: function (scrollbar) {\r\n            var _this = this;\r\n            if (this._scrollbarX) {\r\n                this.removeDispose(this._scrollbarX);\r\n            }\r\n            this._scrollbarX = scrollbar;\r\n            if (scrollbar) {\r\n                this._disposers.push(scrollbar);\r\n                scrollbar.parent = this.topAxesContainer;\r\n                scrollbar.shouldClone = false;\r\n                scrollbar.startGrip.exportable = false;\r\n                scrollbar.endGrip.exportable = false;\r\n                scrollbar.toBack();\r\n                scrollbar.orientation = \"horizontal\";\r\n                scrollbar.events.on(\"rangechanged\", this.handleXScrollbarChange, this, false);\r\n                this.events.on(\"datavalidated\", function () { return scrollbar.updateThumb(false); }, this, false);\r\n                // accessibility related\r\n                scrollbar.adapter.add(\"positionValue\", function (arg) {\r\n                    var xAxis = _this.xAxes.getIndex(0);\r\n                    if (xAxis) {\r\n                        arg.value = xAxis.getPositionLabel(xAxis.renderer.inversed\r\n                            ? 1 - arg.position\r\n                            : arg.position);\r\n                    }\r\n                    return arg;\r\n                });\r\n                scrollbar.adapter.add(\"positionValueDirection\", function (arg) {\r\n                    var xAxis = _this.xAxes.getIndex(0);\r\n                    if (xAxis) {\r\n                        arg.flipped = xAxis.renderer.inversed;\r\n                    }\r\n                    return arg;\r\n                });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYChart.prototype, \"scrollbarY\", {\r\n        /**\r\n         * @return Scrollbar\r\n         */\r\n        get: function () {\r\n            return this._scrollbarY;\r\n        },\r\n        /**\r\n         * Vertical (Y) scrollbar.\r\n         *\r\n         * @param scrollbar Scrollbar\r\n         */\r\n        set: function (scrollbar) {\r\n            var _this = this;\r\n            if (this._scrollbarY) {\r\n                this.removeDispose(this._scrollbarY);\r\n            }\r\n            this._scrollbarY = scrollbar;\r\n            if (scrollbar) {\r\n                this._disposers.push(scrollbar);\r\n                scrollbar.parent = this.rightAxesContainer;\r\n                scrollbar.startGrip.exportable = false;\r\n                scrollbar.shouldClone = false;\r\n                scrollbar.endGrip.exportable = false;\r\n                scrollbar.toFront();\r\n                scrollbar.orientation = \"vertical\";\r\n                scrollbar.events.on(\"rangechanged\", this.handleYScrollbarChange, this, false);\r\n                this.events.on(\"datavalidated\", function () { return scrollbar.updateThumb(false); }, this, false);\r\n                // accessibility related\r\n                scrollbar.adapter.add(\"positionValue\", function (arg) {\r\n                    var yAxis = _this.yAxes.getIndex(0);\r\n                    if (yAxis) {\r\n                        arg.value = yAxis.getPositionLabel(yAxis.renderer.inversed ? arg.position : 1 - arg.position);\r\n                    }\r\n                    return arg;\r\n                });\r\n                scrollbar.adapter.add(\"positionValueDirection\", function (arg) {\r\n                    var yAxis = _this.yAxes.getIndex(0);\r\n                    if (yAxis) {\r\n                        arg.flipped = !yAxis.renderer.inversed;\r\n                    }\r\n                    return arg;\r\n                });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Zooms axes affected by the horizontal (X) scrollbar when the selection\r\n     * on it changes.\r\n     *\r\n     * @param event Scrollbar range change event\r\n     */\r\n    XYChart.prototype.handleXScrollbarChange = function (event) {\r\n        if (this.inited) {\r\n            var scrollbar = event.target;\r\n            var range = scrollbar.range;\r\n            if (range.start == 0) {\r\n                range.priority = \"start\";\r\n            }\r\n            if (range.end == 1) {\r\n                range.priority = \"end\";\r\n            }\r\n            range = this.zoomAxes(this.xAxes, range);\r\n            scrollbar.fixRange(range);\r\n        }\r\n    };\r\n    /**\r\n     * Zooms axes affected by the vertical (Y) scrollbar when the selection\r\n     * on it changes.\r\n     *\r\n     * @param event Scrollbar range change event\r\n     */\r\n    XYChart.prototype.handleYScrollbarChange = function (event) {\r\n        if (this.inited) {\r\n            var scrollbar = event.target;\r\n            var range = scrollbar.range;\r\n            if (range.end == 1) {\r\n                range.priority = \"end\";\r\n            }\r\n            if (range.start == 0) {\r\n                range.priority = \"start\";\r\n            }\r\n            range = this.zoomAxes(this.yAxes, range);\r\n            scrollbar.fixRange(range);\r\n        }\r\n    };\r\n    /**\r\n     * Zooms axes that are affected by to specific relative range.\r\n     *\r\n     * @param axes       List of axes to zoom\r\n     * @param range      Range of values to zoom to (0-1)\r\n     * @param instantly  If set to `true` will skip zooming animation\r\n     * @return Recalculated range that is common to all involved axes\r\n     */\r\n    XYChart.prototype.zoomAxes = function (axes, range, instantly, round, declination, stop) {\r\n        var realRange = { start: 0, end: 1 };\r\n        this.showSeriesTooltip(); // hides\r\n        var originalRange = range;\r\n        if (!this.dataInvalid) {\r\n            $iter.each(axes.iterator(), function (axis) {\r\n                var maxZoomFactor = axis.maxZoomFactor;\r\n                if ($type.isNumber(axis.minZoomCount)) {\r\n                    maxZoomFactor = maxZoomFactor / axis.minZoomCount;\r\n                }\r\n                if (stop && 1 / (range.end - range.start) >= maxZoomFactor) {\r\n                    // void\r\n                }\r\n                else {\r\n                    if (axis.zoomable) {\r\n                        if (axis.renderer.inversed) {\r\n                            range = $math.invertRange(originalRange);\r\n                        }\r\n                        else {\r\n                            range = originalRange;\r\n                        }\r\n                        axis.hideTooltip(0);\r\n                        if (round) {\r\n                            //let diff = range.end - range.start;\r\n                            if (axis instanceof CategoryAxis) {\r\n                                var cellWidth = axis.getCellEndPosition(0) - axis.getCellStartPosition(0);\r\n                                range.start = axis.roundPosition(range.start + cellWidth / 2 - (axis.startLocation) * cellWidth, axis.startLocation);\r\n                                range.end = axis.roundPosition(range.end - cellWidth / 2 + (1 - axis.endLocation) * cellWidth, axis.endLocation);\r\n                            }\r\n                            else {\r\n                                var d = 0.0001;\r\n                                range.start = axis.roundPosition(range.start + d, 0, axis.startLocation);\r\n                                range.end = axis.roundPosition(range.end + d, 0, axis.endLocation);\r\n                            }\r\n                        }\r\n                        var axisRange = axis.zoom(range, instantly, instantly, declination);\r\n                        if (axis.renderer.inversed) {\r\n                            axisRange = $math.invertRange(axisRange);\r\n                        }\r\n                        realRange = axisRange;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        return realRange;\r\n    };\r\n    Object.defineProperty(XYChart.prototype, \"maskBullets\", {\r\n        /**\r\n         * @return Mask bullet container?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maskBullets\");\r\n        },\r\n        /**\r\n         * Indicates if bullet container is masked.\r\n         *\r\n         * If it is set to `true`, any bullets that do not fit into bullet container\r\n         * will be clipped off. Settting to `false` will allow bullets to \"spill out\"\r\n         * of the plot area so they are not cut off.\r\n         *\r\n         * @param value Mask bullet container?\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"maskBullets\", value, true) && this.bulletsContainer) {\r\n                if (value) {\r\n                    this.bulletsContainer.mask = this._bulletMask;\r\n                }\r\n                else {\r\n                    this.bulletsContainer.mask = undefined;\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYChart.prototype, \"arrangeTooltips\", {\r\n        /**\r\n         * @return Arrange tooltips?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"arrangeTooltips\");\r\n        },\r\n        /**\r\n         * Indicates if chart should arrange series tooltips so that they would not\r\n         * overlap.\r\n         *\r\n         * If set to `true` (default), the chart will adjust vertical positions of\r\n         * all simultaneously shown tooltips to avoid overlapping.\r\n         *\r\n         * However, if you have a vertically-arranged chart, it might not make sense,\r\n         * because tooltips would most probably not be aligned horizontally. In this\r\n         * case it would probably be a good idea to set this setting to `false`.\r\n         *\r\n         * @default true\r\n         * @param value Arrange tooltips?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"arrangeTooltips\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Handles mouse wheel event.\r\n     *\r\n     * @param event  Original event\r\n     */\r\n    XYChart.prototype.handleWheel = function (event) {\r\n        var plotContainer = this.plotContainer;\r\n        var svgPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\r\n        var plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\r\n        var shift = event.shift.y;\r\n        this.handleWheelReal(shift, this.mouseWheelBehavior, plotPoint);\r\n    };\r\n    /**\r\n     * Handles mouse wheel event.\r\n     *\r\n     * @param event  Original event\r\n     */\r\n    XYChart.prototype.handleHorizontalWheel = function (event) {\r\n        var plotContainer = this.plotContainer;\r\n        var svgPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\r\n        var plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\r\n        this.handleWheelReal(event.shift.x, this.horizontalMouseWheelBehavior, plotPoint);\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    XYChart.prototype.handleWheelReal = function (shift, mouseWheelBehavior, plotPoint) {\r\n        if (shift != 0) {\r\n            var plotContainer = this.plotContainer;\r\n            var rangeX = this.getCommonAxisRange(this.xAxes);\r\n            var rangeY = this.getCommonAxisRange(this.yAxes);\r\n            var shiftStep = .1;\r\n            var maxPanOut = 0;\r\n            if (mouseWheelBehavior == \"panX\" || mouseWheelBehavior == \"panXY\") {\r\n                var xAxis = this.xAxes.getIndex(0);\r\n                var round = false;\r\n                var singleItemStep = shiftStep;\r\n                if (xAxis instanceof CategoryAxis) {\r\n                    singleItemStep = .5 / ((rangeX.end - rangeX.start) * xAxis.dataItems.length);\r\n                    round = true;\r\n                }\r\n                shiftStep = Math.max(0.2, singleItemStep);\r\n                var differenceX = rangeX.end - rangeX.start;\r\n                var newStartX = Math.max(-maxPanOut, rangeX.start + shiftStep * shift / 100 * (rangeX.end - rangeX.start));\r\n                var newEndX = Math.min(rangeX.end + shiftStep * shift / 100 * (rangeX.end - rangeX.start), 1 + maxPanOut);\r\n                if (newStartX <= 0) {\r\n                    newEndX = newStartX + differenceX;\r\n                }\r\n                if (newEndX >= 1) {\r\n                    newStartX = newEndX - differenceX;\r\n                }\r\n                this.zoomAxes(this.xAxes, { start: newStartX, end: newEndX }, undefined, round);\r\n            }\r\n            if (mouseWheelBehavior == \"panY\" || mouseWheelBehavior == \"panXY\") {\r\n                var yAxis = this.yAxes.getIndex(0);\r\n                var singleItemStep = shiftStep;\r\n                var round = false;\r\n                if (yAxis instanceof CategoryAxis) {\r\n                    singleItemStep = .5 / ((rangeX.end - rangeX.start) * yAxis.dataItems.length);\r\n                    round = true;\r\n                }\r\n                shiftStep = Math.max(0.2, singleItemStep);\r\n                shift *= -1;\r\n                var differenceY = rangeY.end - rangeY.start;\r\n                var newStartY = Math.max(-maxPanOut, rangeY.start + shiftStep * shift / 100 * (rangeY.end - rangeY.start));\r\n                var newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * (rangeY.end - rangeY.start), 1 + maxPanOut);\r\n                if (newStartY <= 0) {\r\n                    newEndY = newStartY + differenceY;\r\n                }\r\n                if (newEndY >= 1) {\r\n                    newStartY = newEndY - differenceY;\r\n                }\r\n                this.zoomAxes(this.yAxes, { start: newStartY, end: newEndY }, undefined, round);\r\n            }\r\n            if (mouseWheelBehavior == \"zoomX\" || mouseWheelBehavior == \"zoomXY\") {\r\n                var locationX = plotPoint.x / plotContainer.maxWidth;\r\n                var location2X = this.xAxes.getIndex(0).toAxisPosition(locationX);\r\n                var newStartX = Math.max(-maxPanOut, rangeX.start - shiftStep * (rangeX.end - rangeX.start) * shift / 100 * locationX);\r\n                newStartX = Math.min(newStartX, location2X);\r\n                var newEndX = Math.min(rangeX.end + shiftStep * (rangeX.end - rangeX.start) * shift / 100 * (1 - locationX), 1 + maxPanOut);\r\n                newEndX = Math.max(newEndX, location2X);\r\n                this.zoomAxes(this.xAxes, { start: newStartX, end: newEndX }, undefined);\r\n            }\r\n            if (mouseWheelBehavior == \"zoomY\" || mouseWheelBehavior == \"zoomXY\") {\r\n                var locationY = plotPoint.y / plotContainer.maxHeight;\r\n                var location2Y = this.yAxes.getIndex(0).toAxisPosition(locationY);\r\n                var newStartY = Math.max(-maxPanOut, rangeY.start - shiftStep * (rangeY.end - rangeY.start) * shift / 100 * (1 - locationY));\r\n                newStartY = Math.min(newStartY, location2Y);\r\n                var newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * locationY * (rangeY.end - rangeY.start), 1 + maxPanOut);\r\n                newEndY = Math.max(newEndY, location2Y);\r\n                this.zoomAxes(this.yAxes, { start: newStartY, end: newEndY }, undefined);\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(XYChart.prototype, \"mouseWheelBehavior\", {\r\n        /**\r\n         * @return Mouse wheel behavior\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"mouseWheelBehavior\");\r\n        },\r\n        /**\r\n         * Specifies action for when mouse wheel is used when over the chart.\r\n         *\r\n         * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`,`\"panXY\"`, `\"none\"` (default).\r\n         *\r\n         * You can control sensitivity of wheel zooming via `mouseOptions`.\r\n         *\r\n         * @default \"none\"\r\n         * @see {@link https://www.amcharts.com/docs/v4/reference/sprite/#mouseOptions_property} More information about `mouseOptions`\r\n         * @param mouse wheel behavior\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\r\n                if (value != \"none\") {\r\n                    this._mouseWheelDisposer = this.plotContainer.events.on(\"wheel\", this.handleWheel, this, false);\r\n                    this._disposers.push(this._mouseWheelDisposer);\r\n                }\r\n                else {\r\n                    if (this._mouseWheelDisposer) {\r\n                        this.plotContainer.wheelable = false;\r\n                        this.plotContainer.hoverable = false;\r\n                        this._mouseWheelDisposer.dispose();\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(XYChart.prototype, \"horizontalMouseWheelBehavior\", {\r\n        /**\r\n         * @return Horizontal mouse wheel behavior\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"horizontalMouseWheelBehavior\");\r\n        },\r\n        /**\r\n         * Specifies action for when horizontal mouse wheel is used when over the chart.\r\n         *\r\n         * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`, `\"panXY\"`, `\"none\"` (default).\r\n         *\r\n         * @default \"none\"\r\n         * @see {@link https://www.amcharts.com/docs/v4/reference/sprite/#mouseOptions_property} More information about `mouseOptions`\r\n         * @param mouse wheel behavior\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"horizontalMouseWheelBehavior\", value)) {\r\n                if (value != \"none\") {\r\n                    this._mouseWheelDisposer2 = this.plotContainer.events.on(\"wheel\", this.handleHorizontalWheel, this, false);\r\n                    this._disposers.push(this._mouseWheelDisposer2);\r\n                }\r\n                else {\r\n                    if (this._mouseWheelDisposer2) {\r\n                        this.plotContainer.wheelable = false;\r\n                        this.plotContainer.hoverable = false;\r\n                        this._mouseWheelDisposer2.dispose();\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n     * so that particular chart types can popuplate this setting with their\r\n     * own type-specific data fields so they are parsed properly.\r\n     *\r\n     * @param fields  Array of date fields\r\n     * @return Array of date fields populated with chart's date fields\r\n     */\r\n    XYChart.prototype.dataSourceDateFields = function (fields) {\r\n        var _this = this;\r\n        // Process parent\r\n        fields = _super.prototype.dataSourceDateFields.call(this, fields);\r\n        // Check if we have any series with date-fields\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            fields = _this.populateDataSourceFields(fields, series.dataFields, [\"dateX\", \"dateY\", \"openDateX\", \"openDateY\"]);\r\n        });\r\n        return fields;\r\n    };\r\n    /**\r\n     * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n     * so that particular chart types can popuplate this setting with their\r\n     * own type-specific data fields so they are parsed properly.\r\n     *\r\n     * @param value  Array of number fields\r\n     * @return Array of number fields populated with chart's number fields\r\n     */\r\n    XYChart.prototype.dataSourceNumberFields = function (fields) {\r\n        var _this = this;\r\n        fields = _super.prototype.dataSourceDateFields.call(this, fields);\r\n        // Check if we have any series with date-fields\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            fields = _this.populateDataSourceFields(fields, series.dataFields, [\"valueX\", \"valueY\", \"openValueX\", \"openValueY\"]);\r\n        });\r\n        return fields;\r\n    };\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param config  Config\r\n     */\r\n    XYChart.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Save axis ranges for later processing\r\n            var xAxes = [];\r\n            var yAxes = [];\r\n            // Set up axes\r\n            if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n                for (var i = 0, len = config.xAxes.length; i < len; i++) {\r\n                    if (!config.xAxes[i].type) {\r\n                        throw Error(\"[XYChart error] No type set for xAxes[\" + i + \"].\");\r\n                    }\r\n                    else if ($type.hasValue(config.xAxes[i][\"axisRanges\"])) {\r\n                        // Maybe convert string dates?\r\n                        for (var x = 0, len_1 = config.xAxes[i][\"axisRanges\"].length; x < len_1; x++) {\r\n                            var range = config.xAxes[i][\"axisRanges\"][x];\r\n                            if ($type.hasValue(range.date) && $type.isString(range.date)) {\r\n                                range.date = this.dateFormatter.parse(range.date);\r\n                            }\r\n                            if ($type.hasValue(range.endDate) && $type.isString(range.endDate)) {\r\n                                range.endDate = this.dateFormatter.parse(range.endDate);\r\n                            }\r\n                        }\r\n                        xAxes.push({\r\n                            axisRanges: config.xAxes[i][\"axisRanges\"],\r\n                            index: i\r\n                        });\r\n                        delete (config.xAxes[i][\"axisRanges\"]);\r\n                    }\r\n                }\r\n            }\r\n            if ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n                for (var i = 0, len = config.yAxes.length; i < len; i++) {\r\n                    if (!config.yAxes[i].type) {\r\n                        throw Error(\"[XYChart error] No type set for yAxes[\" + i + \"].\");\r\n                    }\r\n                    else if ($type.hasValue(config.yAxes[i][\"axisRanges\"])) {\r\n                        // Maybe convert string dates?\r\n                        for (var x = 0, len_2 = config.yAxes[i][\"axisRanges\"].length; x < len_2; x++) {\r\n                            var range = config.yAxes[i][\"axisRanges\"][x];\r\n                            if ($type.hasValue(range.date) && $type.isString(range.date)) {\r\n                                range.date = this.dateFormatter.parse(range.date);\r\n                            }\r\n                            if ($type.hasValue(range.endDate) && $type.isString(range.endDate)) {\r\n                                range.endDate = this.dateFormatter.parse(range.endDate);\r\n                            }\r\n                        }\r\n                        yAxes.push({\r\n                            axisRanges: config.yAxes[i][\"axisRanges\"],\r\n                            index: i\r\n                        });\r\n                        delete (config.yAxes[i][\"axisRanges\"]);\r\n                    }\r\n                }\r\n            }\r\n            // Set up series\r\n            if ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n                for (var i = 0, len = config.series.length; i < len; i++) {\r\n                    config.series[i].type = config.series[i].type || \"LineSeries\";\r\n                }\r\n            }\r\n            // Set up cursor\r\n            if ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n                config.cursor.type = \"XYCursor\";\r\n            }\r\n            // Set up scrollbars\r\n            if ($type.hasValue(config.scrollbarX) && !$type.hasValue(config.scrollbarX.type)) {\r\n                config.scrollbarX.type = \"Scrollbar\";\r\n            }\r\n            if ($type.hasValue(config.scrollbarY) && !$type.hasValue(config.scrollbarY.type)) {\r\n                config.scrollbarY.type = \"Scrollbar\";\r\n            }\r\n            _super.prototype.processConfig.call(this, config);\r\n            // Finish up with ranges.\r\n            // We need to do this here because series are processed last in JSON\r\n            // config. Therefore their respective objects are not yet are available\r\n            // when axis (and respectively their ranges) are being processed.\r\n            if (yAxes.length) {\r\n                for (var i = 0, len = yAxes.length; i < len; i++) {\r\n                    this.yAxes.getIndex(yAxes[i].index).config = {\r\n                        axisRanges: yAxes[i].axisRanges\r\n                    };\r\n                }\r\n            }\r\n            if (xAxes.length) {\r\n                for (var i = 0, len = xAxes.length; i < len; i++) {\r\n                    this.xAxes.getIndex(xAxes[i].index).config = {\r\n                        axisRanges: xAxes[i].axisRanges\r\n                    };\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * This function is used to sort element's JSON config properties, so that\r\n     * some properties that absolutely need to be processed last, can be put at\r\n     * the end.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param a  Element 1\r\n     * @param b  Element 2\r\n     * @return Sorting number\r\n     */\r\n    XYChart.prototype.configOrder = function (a, b) {\r\n        if (a == b) {\r\n            return 0;\r\n        }\r\n        // Must come last\r\n        else if (a == \"scrollbarX\") {\r\n            return 1;\r\n        }\r\n        else if (b == \"scrollbarX\") {\r\n            return -1;\r\n        }\r\n        else if (a == \"scrollbarY\") {\r\n            return 1;\r\n        }\r\n        else if (b == \"scrollbarY\") {\r\n            return -1;\r\n        }\r\n        else if (a == \"cursor\") {\r\n            return 1;\r\n        }\r\n        else if (b == \"cursor\") {\r\n            return -1;\r\n        }\r\n        else if (a == \"series\") {\r\n            return 1;\r\n        }\r\n        else if (b == \"series\") {\r\n            return -1;\r\n        }\r\n        else {\r\n            return _super.prototype.configOrder.call(this, a, b);\r\n        }\r\n    };\r\n    /**\r\n     * Creates a new Series of type suitable for this chart.\r\n     *\r\n     * @return New series\r\n     */\r\n    XYChart.prototype.createSeries = function () {\r\n        return new XYSeries();\r\n    };\r\n    Object.defineProperty(XYChart.prototype, \"zoomOutButton\", {\r\n        /**\r\n         * @return Zoom out button\r\n         */\r\n        get: function () {\r\n            return this._zoomOutButton;\r\n        },\r\n        /**\r\n         * A [[Button]] element that is used for zooming out the chart.\r\n         *\r\n         * This button appears only when chart is zoomed in, and disappears\r\n         * autoamatically when it is zoome dout.\r\n         *\r\n         * @param button  Zoom out button\r\n         */\r\n        set: function (button) {\r\n            var _this = this;\r\n            this._zoomOutButton = button;\r\n            if (button) {\r\n                button.events.on(\"hit\", function () {\r\n                    _this.zoomAxes(_this.xAxes, { start: 0, end: 1 });\r\n                    _this.zoomAxes(_this.yAxes, { start: 0, end: 1 });\r\n                }, undefined, false);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies all parameters from another [[XYChart]].\r\n     *\r\n     * @param source Source XYChart\r\n     */\r\n    XYChart.prototype.copyFrom = function (source) {\r\n        var _this = this;\r\n        source.xAxes.each(function (axis) {\r\n            var a = _this.xAxes.push(axis.clone());\r\n            a.chart = _this;\r\n            a.renderer.chart = _this;\r\n        });\r\n        source.yAxes.each(function (axis) {\r\n            var a = _this.yAxes.push(axis.clone());\r\n            a.renderer.chart = _this;\r\n            a.chart = _this;\r\n        });\r\n        //this.xAxes.copyFrom(source.xAxes);\r\n        //this.yAxes.copyFrom(source.yAxes);\r\n        _super.prototype.copyFrom.call(this, source);\r\n        //this.zoomOutButton.copyFrom(source.zoomOutButton);\r\n        if (source.cursor) {\r\n            this.cursor = source.cursor.clone();\r\n        }\r\n        if (source.scrollbarX) {\r\n            this.scrollbarX = source.scrollbarX.clone();\r\n        }\r\n        if (source.scrollbarY) {\r\n            this.scrollbarY = source.scrollbarY.clone();\r\n        }\r\n        //@todo copy all container properties\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    XYChart.prototype.disposeData = function () {\r\n        _super.prototype.disposeData.call(this);\r\n        var scrollbarX = this.scrollbarX;\r\n        if (scrollbarX && scrollbarX instanceof XYChartScrollbar) {\r\n            scrollbarX.scrollbarChart.disposeData();\r\n        }\r\n        var scrollbarY = this.scrollbarY;\r\n        if (scrollbarY && scrollbarY instanceof XYChartScrollbar) {\r\n            scrollbarY.scrollbarChart.disposeData();\r\n        }\r\n        this.xAxes.each(function (axis) {\r\n            if (axis instanceof CategoryAxis) {\r\n                axis.disposeData();\r\n            }\r\n        });\r\n        this.yAxes.each(function (axis) {\r\n            if (axis instanceof CategoryAxis) {\r\n                axis.disposeData();\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Adds one or several (array) of data items to the existing data.\r\n     *\r\n     * @param rawDataItem One or many raw data item objects\r\n     */\r\n    XYChart.prototype.addData = function (rawDataItem, removeCount) {\r\n        if (this.scrollbarX instanceof XYChartScrollbar) {\r\n            this.addScrollbarData(this.scrollbarX, removeCount);\r\n        }\r\n        if (this.scrollbarY instanceof XYChartScrollbar) {\r\n            this.addScrollbarData(this.scrollbarY, removeCount);\r\n        }\r\n        _super.prototype.addData.call(this, rawDataItem, removeCount);\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    XYChart.prototype.addScrollbarData = function (scrollbar, removeCount) {\r\n        var chart = scrollbar.scrollbarChart;\r\n        chart._parseDataFrom = chart.data.length;\r\n        chart.invalidateData();\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    XYChart.prototype.removeScrollbarData = function (scrollbar, removeCount) {\r\n        var chart = scrollbar.scrollbarChart;\r\n        if ($type.isNumber(removeCount)) {\r\n            while (removeCount > 0) {\r\n                var dataItem = this.dataItems.getIndex(0);\r\n                if (dataItem) {\r\n                    chart.dataItems.remove(dataItem);\r\n                }\r\n                chart.dataUsers.each(function (dataUser) {\r\n                    var dataItem = dataUser.dataItems.getIndex(0);\r\n                    if (dataItem) {\r\n                        dataUser.dataItems.remove(dataItem);\r\n                    }\r\n                });\r\n                chart._parseDataFrom--;\r\n                removeCount--;\r\n            }\r\n            chart.invalidateData();\r\n        }\r\n    };\r\n    /**\r\n     * Removes elements from the beginning of data\r\n     *\r\n     * @param count number of elements to remove\r\n     */\r\n    XYChart.prototype.removeData = function (count) {\r\n        if (this.scrollbarX instanceof XYChartScrollbar) {\r\n            this.removeScrollbarData(this.scrollbarX, count);\r\n        }\r\n        if (this.scrollbarY instanceof XYChartScrollbar) {\r\n            this.removeScrollbarData(this.scrollbarY, count);\r\n        }\r\n        _super.prototype.removeData.call(this, count);\r\n    };\r\n    /**\r\n     * @param  value  Tap to activate?\r\n     */\r\n    XYChart.prototype.setTapToActivate = function (value) {\r\n        _super.prototype.setTapToActivate.call(this, value);\r\n        if (this.cursor) {\r\n            this.cursor.interactions.isTouchProtected = value;\r\n            this.plotContainer.interactions.isTouchProtected = value;\r\n        }\r\n    };\r\n    XYChart.prototype.handleTapToActivate = function () {\r\n        _super.prototype.handleTapToActivate.call(this);\r\n        if (this.cursor) {\r\n            this.cursor.interactions.isTouchProtected = false;\r\n            this.plotContainer.interactions.isTouchProtected = false;\r\n        }\r\n    };\r\n    XYChart.prototype.handleTapToActivateDeactivation = function () {\r\n        _super.prototype.handleTapToActivateDeactivation.call(this);\r\n        if (this.cursor) {\r\n            this.cursor.interactions.isTouchProtected = true;\r\n            this.plotContainer.interactions.isTouchProtected = true;\r\n        }\r\n    };\r\n    return XYChart;\r\n}(SerialChart));\r\nexport { XYChart };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart\"] = XYChart;\r\n/**\r\n * Add default responsive rules\r\n */\r\n/**\r\n * Remove horizontal scrollbar on narrow charts.\r\n */\r\ndefaultRules.push({\r\n    relevant: ResponsiveBreakpoints.maybeXS,\r\n    state: function (target, stateId) {\r\n        if (target instanceof XYChart && target.scrollbarX) {\r\n            var state = target.states.create(stateId);\r\n            var sbstate = target.scrollbarX.states.create(stateId);\r\n            sbstate.properties.disabled = true;\r\n            return state;\r\n        }\r\n        return null;\r\n    }\r\n});\r\n/**\r\n * Remove vertical scrollbar on short charts.\r\n */\r\ndefaultRules.push({\r\n    relevant: ResponsiveBreakpoints.maybeXS,\r\n    state: function (target, stateId) {\r\n        if (target instanceof XYChart && target.scrollbarY) {\r\n            var state = target.states.create(stateId);\r\n            var sbstate = target.scrollbarY.states.create(stateId);\r\n            sbstate.properties.disabled = true;\r\n            return state;\r\n        }\r\n        return null;\r\n    }\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}