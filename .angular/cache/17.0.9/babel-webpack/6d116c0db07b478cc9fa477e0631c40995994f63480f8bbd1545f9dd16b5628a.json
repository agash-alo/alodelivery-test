{"ast":null,"code":"/**\r\n * Data parser module.\r\n */\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { DateFormatter } from \"../formatters/DateFormatter\";\nimport * as $utils from \"../utils/Utils\";\nimport * as $type from \"../utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Base class for the data parsers.\r\n */\nvar DataParser = /** @class */function () {\n  function DataParser() {}\n  /**\r\n   * A \"placeholder\" function for real parsers to override.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param data  Source data\r\n   * @return Parsed data (empty)\r\n   */\n  DataParser.prototype.parse = function (data) {\n    return [];\n  };\n  ;\n  Object.defineProperty(DataParser.prototype, \"parsableNumbers\", {\n    /**\r\n     * Checks if there are any numeric fields that need to be converted to\r\n     * numbers.\r\n     *\r\n     * @return Numeric fields?\r\n     */\n    get: function () {\n      return this.options.numberFields && this.options.numberFields.length > 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts a value to 'number' if it is in `numberFields`.\r\n   *\r\n   * @param field  Field name\r\n   * @param value  Value\r\n   * @return Parsed or original value\r\n   */\n  DataParser.prototype.maybeToNumber = function (field, value) {\n    if (this.options.numberFields.indexOf(field) !== -1) {\n      return $utils.anyToNumber(value);\n    }\n    return value;\n  };\n  Object.defineProperty(DataParser.prototype, \"parsableDates\", {\n    /**\r\n     * Checks if there are any date fields that need to be converted to `Date`\r\n     * objects.\r\n     *\r\n     * @return Date fields?\r\n     */\n    get: function () {\n      return this.options.dateFields && this.options.dateFields.length > 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts a value to `Date` if it is in `dateFields`.\r\n   *\r\n   * @param field  Field name\r\n   * @param value  Value\r\n   * @return Parsed or original value\r\n   */\n  DataParser.prototype.maybeToDate = function (field, value) {\n    if (this.options.dateFields.indexOf(field) !== -1) {\n      return this.options.dateFormatter.parse(value, this.dateFormat);\n    }\n    return value;\n  };\n  /**\r\n   * Replaces empty value with something else.\r\n   *\r\n   * @param value  Source value\r\n   * @return Source value or replacement\r\n   */\n  DataParser.prototype.maybeToEmpty = function (value) {\n    if ((!$type.hasValue(value) || value == \"\") && $type.hasValue(this.options.emptyAs)) {\n      return this.options.emptyAs;\n    }\n    return value;\n  };\n  Object.defineProperty(DataParser.prototype, \"dateFormatter\", {\n    /**\r\n     * [[DateFormatter]] object for date parsing.\r\n     *\r\n     * If there was not [[DateFormatter]] supplied in parser options, a new one\r\n     * is created.\r\n     *\r\n     * @return Date formatter\r\n     * @see {@link DateFormatter}\r\n     */\n    get: function () {\n      if (!this.options.dateFormatter) {\n        this.options.dateFormatter = new DateFormatter();\n        if (this.options.dateFormat) {\n          this.options.dateFormat = this.options.dateFormat;\n        }\n      }\n      return this.options.dateFormatter;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataParser.prototype, \"dateFormat\", {\n    /**\r\n     * A date format to use when parsing dates.\r\n     *\r\n     * @return Date format\r\n     * @see {@link DateFormatter}\r\n     */\n    get: function () {\n      return this.options.dateFormat || this.dateFormatter.inputDateFormat;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return DataParser;\n}();\nexport { DataParser };","map":{"version":3,"names":["DateFormatter","$utils","$type","DataParser","prototype","parse","data","Object","defineProperty","get","options","numberFields","length","enumerable","configurable","maybeToNumber","field","value","indexOf","anyToNumber","dateFields","maybeToDate","dateFormatter","dateFormat","maybeToEmpty","hasValue","emptyAs","inputDateFormat"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/data/DataParser.js"],"sourcesContent":["/**\r\n * Data parser module.\r\n */\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { DateFormatter } from \"../formatters/DateFormatter\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $type from \"../utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Base class for the data parsers.\r\n */\r\nvar DataParser = /** @class */ (function () {\r\n    function DataParser() {\r\n    }\r\n    /**\r\n     * A \"placeholder\" function for real parsers to override.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param data  Source data\r\n     * @return Parsed data (empty)\r\n     */\r\n    DataParser.prototype.parse = function (data) {\r\n        return [];\r\n    };\r\n    ;\r\n    Object.defineProperty(DataParser.prototype, \"parsableNumbers\", {\r\n        /**\r\n         * Checks if there are any numeric fields that need to be converted to\r\n         * numbers.\r\n         *\r\n         * @return Numeric fields?\r\n         */\r\n        get: function () {\r\n            return this.options.numberFields && (this.options.numberFields.length > 0);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts a value to 'number' if it is in `numberFields`.\r\n     *\r\n     * @param field  Field name\r\n     * @param value  Value\r\n     * @return Parsed or original value\r\n     */\r\n    DataParser.prototype.maybeToNumber = function (field, value) {\r\n        if (this.options.numberFields.indexOf(field) !== -1) {\r\n            return $utils.anyToNumber(value);\r\n        }\r\n        return value;\r\n    };\r\n    Object.defineProperty(DataParser.prototype, \"parsableDates\", {\r\n        /**\r\n         * Checks if there are any date fields that need to be converted to `Date`\r\n         * objects.\r\n         *\r\n         * @return Date fields?\r\n         */\r\n        get: function () {\r\n            return this.options.dateFields && (this.options.dateFields.length > 0);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts a value to `Date` if it is in `dateFields`.\r\n     *\r\n     * @param field  Field name\r\n     * @param value  Value\r\n     * @return Parsed or original value\r\n     */\r\n    DataParser.prototype.maybeToDate = function (field, value) {\r\n        if (this.options.dateFields.indexOf(field) !== -1) {\r\n            return this.options.dateFormatter.parse(value, this.dateFormat);\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * Replaces empty value with something else.\r\n     *\r\n     * @param value  Source value\r\n     * @return Source value or replacement\r\n     */\r\n    DataParser.prototype.maybeToEmpty = function (value) {\r\n        if ((!$type.hasValue(value) || value == \"\") && $type.hasValue(this.options.emptyAs)) {\r\n            return this.options.emptyAs;\r\n        }\r\n        return value;\r\n    };\r\n    Object.defineProperty(DataParser.prototype, \"dateFormatter\", {\r\n        /**\r\n         * [[DateFormatter]] object for date parsing.\r\n         *\r\n         * If there was not [[DateFormatter]] supplied in parser options, a new one\r\n         * is created.\r\n         *\r\n         * @return Date formatter\r\n         * @see {@link DateFormatter}\r\n         */\r\n        get: function () {\r\n            if (!this.options.dateFormatter) {\r\n                this.options.dateFormatter = new DateFormatter;\r\n                if (this.options.dateFormat) {\r\n                    this.options.dateFormat = this.options.dateFormat;\r\n                }\r\n            }\r\n            return this.options.dateFormatter;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataParser.prototype, \"dateFormat\", {\r\n        /**\r\n         * A date format to use when parsing dates.\r\n         *\r\n         * @return Date format\r\n         * @see {@link DateFormatter}\r\n         */\r\n        get: function () {\r\n            return this.options.dateFormat || this.dateFormatter.inputDateFormat;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return DataParser;\r\n}());\r\nexport { DataParser };\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,aAAa,QAAQ,6BAA6B;AAC3D,OAAO,KAAKC,MAAM,MAAM,gBAAgB;AACxC,OAAO,KAAKC,KAAK,MAAM,eAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,UAAU,GAAG,aAAe,YAAY;EACxC,SAASA,UAAUA,CAAA,EAAG,CACtB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIA,UAAU,CAACC,SAAS,CAACC,KAAK,GAAG,UAAUC,IAAI,EAAE;IACzC,OAAO,EAAE;EACb,CAAC;EACD;EACAC,MAAM,CAACC,cAAc,CAACL,UAAU,CAACC,SAAS,EAAE,iBAAiB,EAAE;IAC3D;AACR;AACA;AACA;AACA;AACA;IACQK,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACC,OAAO,CAACC,YAAY,IAAK,IAAI,CAACD,OAAO,CAACC,YAAY,CAACC,MAAM,GAAG,CAAE;IAC9E,CAAC;IACDC,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF;AACJ;AACA;AACA;AACA;AACA;AACA;EACIX,UAAU,CAACC,SAAS,CAACW,aAAa,GAAG,UAAUC,KAAK,EAAEC,KAAK,EAAE;IACzD,IAAI,IAAI,CAACP,OAAO,CAACC,YAAY,CAACO,OAAO,CAACF,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;MACjD,OAAOf,MAAM,CAACkB,WAAW,CAACF,KAAK,CAAC;IACpC;IACA,OAAOA,KAAK;EAChB,CAAC;EACDV,MAAM,CAACC,cAAc,CAACL,UAAU,CAACC,SAAS,EAAE,eAAe,EAAE;IACzD;AACR;AACA;AACA;AACA;AACA;IACQK,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACC,OAAO,CAACU,UAAU,IAAK,IAAI,CAACV,OAAO,CAACU,UAAU,CAACR,MAAM,GAAG,CAAE;IAC1E,CAAC;IACDC,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF;AACJ;AACA;AACA;AACA;AACA;AACA;EACIX,UAAU,CAACC,SAAS,CAACiB,WAAW,GAAG,UAAUL,KAAK,EAAEC,KAAK,EAAE;IACvD,IAAI,IAAI,CAACP,OAAO,CAACU,UAAU,CAACF,OAAO,CAACF,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;MAC/C,OAAO,IAAI,CAACN,OAAO,CAACY,aAAa,CAACjB,KAAK,CAACY,KAAK,EAAE,IAAI,CAACM,UAAU,CAAC;IACnE;IACA,OAAON,KAAK;EAChB,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACId,UAAU,CAACC,SAAS,CAACoB,YAAY,GAAG,UAAUP,KAAK,EAAE;IACjD,IAAI,CAAC,CAACf,KAAK,CAACuB,QAAQ,CAACR,KAAK,CAAC,IAAIA,KAAK,IAAI,EAAE,KAAKf,KAAK,CAACuB,QAAQ,CAAC,IAAI,CAACf,OAAO,CAACgB,OAAO,CAAC,EAAE;MACjF,OAAO,IAAI,CAAChB,OAAO,CAACgB,OAAO;IAC/B;IACA,OAAOT,KAAK;EAChB,CAAC;EACDV,MAAM,CAACC,cAAc,CAACL,UAAU,CAACC,SAAS,EAAE,eAAe,EAAE;IACzD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQK,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,IAAI,CAAC,IAAI,CAACC,OAAO,CAACY,aAAa,EAAE;QAC7B,IAAI,CAACZ,OAAO,CAACY,aAAa,GAAG,IAAItB,aAAa,CAAD,CAAC;QAC9C,IAAI,IAAI,CAACU,OAAO,CAACa,UAAU,EAAE;UACzB,IAAI,CAACb,OAAO,CAACa,UAAU,GAAG,IAAI,CAACb,OAAO,CAACa,UAAU;QACrD;MACJ;MACA,OAAO,IAAI,CAACb,OAAO,CAACY,aAAa;IACrC,CAAC;IACDT,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFP,MAAM,CAACC,cAAc,CAACL,UAAU,CAACC,SAAS,EAAE,YAAY,EAAE;IACtD;AACR;AACA;AACA;AACA;AACA;IACQK,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACC,OAAO,CAACa,UAAU,IAAI,IAAI,CAACD,aAAa,CAACK,eAAe;IACxE,CAAC;IACDd,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF,OAAOX,UAAU;AACrB,CAAC,CAAC,CAAE;AACJ,SAASA,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}