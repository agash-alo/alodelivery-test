{"ast":null,"code":"/**\r\n * Module that defines everything related to building Columns.\r\n * It is a container which has column element which is a RoundedRectangle.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Container } from \"../../core/Container\";\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\nimport { registry } from \"../../core/Registry\";\nimport { percent } from \"../../core/utils/Percent\";\nimport * as $math from \"../../core/utils/Math\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Class used to creates Columns.\r\n *\r\n * @see {@link IColumnEvents} for a list of available events\r\n * @see {@link IColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\nvar Column = /** @class */function (_super) {\n  __extends(Column, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Column() {\n    var _this = _super.call(this) || this;\n    _this.className = \"Column\";\n    _this.width = percent(80);\n    _this.height = percent(80);\n    //this.isMeasured = true; // for correct position of the tooltip\n    _this.events.disableType(\"transformed\"); // not to bug parent\n    _this.applyOnClones = true;\n    _this.strokeOpacity = 1;\n    _this.layout = \"none\";\n    _this.createAssets();\n    // otherwise users will have to set layout themselves if they'll want to align, scale etc children\n    _this.events.on(\"childadded\", _this.handleKidAdded, _this, false);\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n  Column.prototype.handleKidAdded = function () {\n    if (this.layout == \"none\") {\n      this.layout = \"absolute\";\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n  Column.prototype.createAssets = function () {\n    this.column = this.createChild(RoundedRectangle);\n    this.column.shouldClone = false;\n    this.column.isMeasured = false;\n    this.column.cornerRadius(0, 0, 0, 0);\n    this._disposers.push(this.column);\n  };\n  /**\r\n   * @ignore Exclude from docs\r\n   */\n  Column.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n    var column = this.column;\n    if (column) {\n      column.width = $math.min(this.pixelWidth, this.maxWidth);\n      column.height = $math.min(this.pixelHeight, this.maxHeight);\n      if (column.invalid) {\n        column.validate(); // important!\n      }\n    }\n  };\n  /**\r\n   * Copies all parameters from another [[Column]].\r\n   *\r\n   * @param source Source Column\r\n   */\n  Column.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    if (this.column) {\n      this.column.copyFrom(source.column);\n    }\n  };\n  Object.defineProperty(Column.prototype, \"bbox\", {\n    /**\r\n     * Returns bounding box (square) for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    get: function () {\n      if (this.definedBBox) {\n        return this.definedBBox;\n      }\n      if (this.column) {\n        return {\n          x: 0,\n          y: 0,\n          width: this.column.measuredWidth,\n          height: this.column.measuredHeight\n        };\n      } else {\n        return {\n          x: 0,\n          y: 0,\n          width: $math.min(this.pixelWidth, this.maxWidth),\n          height: $math.min(this.pixelHeight, this.maxHeight)\n        };\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Column;\n}(Container);\nexport { Column };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Column\"] = Column;","map":{"version":3,"names":["__extends","Container","RoundedRectangle","registry","percent","$math","Column","_super","_this","call","className","width","height","events","disableType","applyOnClones","strokeOpacity","layout","createAssets","on","handleKidAdded","prototype","column","createChild","shouldClone","isMeasured","cornerRadius","_disposers","push","validate","min","pixelWidth","maxWidth","pixelHeight","maxHeight","invalid","copyFrom","source","Object","defineProperty","get","definedBBox","x","y","measuredWidth","measuredHeight","enumerable","configurable","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/charts/elements/Column.js"],"sourcesContent":["/**\r\n * Module that defines everything related to building Columns.\r\n * It is a container which has column element which is a RoundedRectangle.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../../core/Container\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Class used to creates Columns.\r\n *\r\n * @see {@link IColumnEvents} for a list of available events\r\n * @see {@link IColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nvar Column = /** @class */ (function (_super) {\r\n    __extends(Column, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Column() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Column\";\r\n        _this.width = percent(80);\r\n        _this.height = percent(80);\r\n        //this.isMeasured = true; // for correct position of the tooltip\r\n        _this.events.disableType(\"transformed\"); // not to bug parent\r\n        _this.applyOnClones = true;\r\n        _this.strokeOpacity = 1;\r\n        _this.layout = \"none\";\r\n        _this.createAssets();\r\n        // otherwise users will have to set layout themselves if they'll want to align, scale etc children\r\n        _this.events.on(\"childadded\", _this.handleKidAdded, _this, false);\r\n        return _this;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    Column.prototype.handleKidAdded = function () {\r\n        if (this.layout == \"none\") {\r\n            this.layout = \"absolute\";\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Column.prototype.createAssets = function () {\r\n        this.column = this.createChild(RoundedRectangle);\r\n        this.column.shouldClone = false;\r\n        this.column.isMeasured = false;\r\n        this.column.cornerRadius(0, 0, 0, 0);\r\n        this._disposers.push(this.column);\r\n    };\r\n    /**\r\n     * @ignore Exclude from docs\r\n     */\r\n    Column.prototype.validate = function () {\r\n        _super.prototype.validate.call(this);\r\n        var column = this.column;\r\n        if (column) {\r\n            column.width = $math.min(this.pixelWidth, this.maxWidth);\r\n            column.height = $math.min(this.pixelHeight, this.maxHeight);\r\n            if (column.invalid) {\r\n                column.validate(); // important!\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Copies all parameters from another [[Column]].\r\n     *\r\n     * @param source Source Column\r\n     */\r\n    Column.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        if (this.column) {\r\n            this.column.copyFrom(source.column);\r\n        }\r\n    };\r\n    Object.defineProperty(Column.prototype, \"bbox\", {\r\n        /**\r\n         * Returns bounding box (square) for this element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        get: function () {\r\n            if (this.definedBBox) {\r\n                return this.definedBBox;\r\n            }\r\n            if (this.column) {\r\n                return { x: 0, y: 0, width: this.column.measuredWidth, height: this.column.measuredHeight };\r\n            }\r\n            else {\r\n                return { x: 0, y: 0, width: $math.min(this.pixelWidth, this.maxWidth), height: $math.min(this.pixelHeight, this.maxHeight) };\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Column;\r\n}(Container));\r\nexport { Column };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column\"] = Column;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}