{"ast":null,"code":"/**\r\n * This functionality is related to the HTML wrapper that houses `<svg>` tag.\r\n */\nimport { Popup } from \"../elements/Popup\";\nimport { Modal } from \"../elements/Modal\";\nimport { ListTemplate, ListDisposer } from \"../utils/List\";\nimport * as $utils from \"../utils/Utils\";\nimport * as $dom from \"../utils/DOM\";\nimport * as $array from \"../utils/Array\";\nimport * as $type from \"../utils/Type\";\nimport { ResizeSensor } from \"../utils/ResizeSensor\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * A array of all SVG Containers (one SVG container per chart instance).\r\n *\r\n * @ignore Exclude from docs\r\n */\nexport var svgContainers = [];\n/**\r\n * A class used to create an HTML wrapper for the SVG contents.\r\n */\nvar SVGContainer = /** @class */function () {\n  /**\r\n   * Constructor\r\n   *\r\n   * * Creates an HTML wrapper for SVG\r\n   */\n  function SVGContainer(htmlElement, ghost) {\n    var _this = this;\n    /**\r\n     * Indicates if this object has already been deleted. Any\r\n     * destruction/disposal code should take this into account when deciding\r\n     * wheter to run potentially costly disposal operations if they already have\r\n     * been run.\r\n     */\n    this._disposed = false;\n    /**\r\n     * If this component is in a separate HTML container, `autoResize` means the\r\n     * module will constantly measure container's size and adopt contents to it.\r\n     */\n    this.autoResize = true;\n    /**\r\n     * Holds list of references to [[Sprite]] objects that should not be exported\r\n     * when exporting chart to an image.\r\n     *\r\n     * @ignore\r\n     */\n    this.nonExportableSprites = [];\n    /**\r\n     * List of objects that need to be disposed when this one is disposed.\r\n     */\n    this._disposers = [];\n    this.cssScale = 1;\n    // This is needed so that it won't resize while printing, so that way printing works correctly.\n    this._printing = false;\n    // Log parent HTML element\n    this.htmlElement = htmlElement;\n    if (!ghost) {\n      this._printing = false;\n      this.initSensor();\n      this._disposers.push($dom.addEventListener(window, \"beforeprint\", function () {\n        _this._printing = true;\n      }));\n      this._disposers.push($dom.addEventListener(window, \"afterprint\", function () {\n        _this._printing = false;\n      }));\n    }\n    // Adds to containers array\n    svgContainers.push(this);\n    /**\r\n     * Create child div for the container - it will have svg node\r\n     * It might seem that this container is not necessay, however having it solves\r\n     * a problems with mouse position detection and some other.\r\n     */\n    var svgContainer = document.createElement(\"div\");\n    var style = svgContainer.style;\n    style.width = \"100%\";\n    style.height = \"100%\";\n    style.position = \"relative\";\n    htmlElement.appendChild(svgContainer);\n    this.SVGContainer = svgContainer;\n  }\n  /**\r\n   * (Re)Initializes a resize sensor.\r\n   */\n  SVGContainer.prototype.initSensor = function () {\n    var _this = this;\n    if (this.resizeSensor) {\n      this.resizeSensor.dispose();\n    }\n    var callback = function () {\n      if (_this.autoResize && !_this._printing) {\n        _this.measure();\n      }\n    };\n    this.resizeSensor = new ResizeSensor(this.htmlElement, callback);\n    this._disposers.push(this.resizeSensor);\n  };\n  /**\r\n   * Measures size of parent HTML element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  SVGContainer.prototype.measure = function () {\n    var width = $utils.width(this.htmlElement);\n    var height = $utils.height(this.htmlElement);\n    var container = this.container;\n    if (container) {\n      if (this.width != width || this.height != height) {\n        this.width = width;\n        this.height = height;\n        if (width > 0) {\n          container.maxWidth = width;\n        }\n        if (height > 0) {\n          container.maxHeight = height;\n        }\n        $dom.fixPixelPerfect(this.SVGContainer);\n      }\n      if (!container.maxWidth) {\n        container.maxWidth = 0;\n      }\n      if (!container.maxHeight) {\n        container.maxHeight = 0;\n      }\n      this.cssScale = 1;\n      this.checkTransform(this.htmlElement);\n    }\n  };\n  Object.defineProperty(SVGContainer.prototype, \"container\", {\n    /**\r\n     * @return Container\r\n     */\n    get: function () {\n      return this._container;\n    },\n    /**\r\n     * A [[Container]] element which is placed into container.\r\n     *\r\n     * @param container  Container\r\n     */\n    set: function (container) {\n      this._container = container;\n      this.measure();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns if this object has been already been disposed.\r\n   *\r\n   * @return Is disposed?\r\n   */\n  SVGContainer.prototype.isDisposed = function () {\n    return this._disposed;\n  };\n  /**\r\n   * Removes this container from SVG container list in system, which\r\n   * effectively disables size change monitoring for it.\r\n   */\n  SVGContainer.prototype.dispose = function () {\n    if (!this._disposed) {\n      $array.remove(svgContainers, this);\n    }\n    $array.each(this._disposers, function (item) {\n      item.dispose();\n    });\n  };\n  Object.defineProperty(SVGContainer.prototype, \"hideOverflow\", {\n    /**\r\n     * Indicates if chart container should have its style set\r\n     * to `overflow: hidden`.\r\n     *\r\n     * Normally, we don't want that, so that certain elements, such as tooltips,\r\n     * would be able to go outside chart area.\r\n     *\r\n     * There is one issue though. Some browsers ignore SVG masks and would\r\n     * display scrollbars if chart elements, that go outside chart area extend\r\n     * outside window.\r\n     *\r\n     * This is especially true for [[MapChart]], which can have its elements\r\n     * extend very widely when zoomed in. Even if those parts are not visible\r\n     * because of SVG masks, some browsers might still display window scrollbars.\r\n     *\r\n     * This is why we set this setting to `true` in [[MapChart]].\r\n     *\r\n     * Other charts use default of `false`.\r\n     */\n    set: function (value) {\n      if (value) {\n        this.SVGContainer.style.overflow = \"hidden\";\n      } else {\n        this.SVGContainer.style.overflow = \"\";\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SVGContainer.prototype, \"modal\", {\n    /**\r\n     * ==========================================================================\r\n     * MODAL/POPUP RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Returns a [[Modal]] instance, associated with this chart.\r\n     * (elements top parent)\r\n     *\r\n     * Accessing modal does not make it appear. To make a modal appear, use\r\n     * `showModal()` method.\r\n     *\r\n     * @see {@link Modal} for more information about using Modal windows\r\n     * @return Modal instance\r\n     */\n    get: function () {\n      if (!$type.hasValue(this._modal)) {\n        // Create new modal\n        this._modal = new Modal();\n        this._modal.container = this.SVGContainer;\n        // Add to disposers\n        this._disposers.push(this._modal);\n      }\n      return this._modal;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Opens a modal window with specific content (`text` parameter) and,\r\n   * optionally, `title`.\r\n   *\r\n   * The `text` parameter can contain HTML content.\r\n   *\r\n   * @see {@link Modal} for more information about using Modal windows\r\n   * @param text   Modal contents\r\n   * @param title  Title for the modal window\r\n   */\n  SVGContainer.prototype.openModal = function (text, title) {\n    // Hide previous modal\n    this.closeModal();\n    // Create modal\n    var modal = this.modal;\n    modal.content = text;\n    modal.readerTitle = title || \"\";\n    modal.title = title || \"\";\n    modal.open();\n    return modal;\n  };\n  /**\r\n   * Hides modal window if there is one currently open.\r\n   */\n  SVGContainer.prototype.closeModal = function () {\n    if (this._modal) {\n      this.modal.close();\n    }\n  };\n  Object.defineProperty(SVGContainer.prototype, \"popups\", {\n    /**\r\n     * A list of popups for this chart.\r\n     *\r\n     * @return Popups\r\n     */\n    get: function () {\n      if (!$type.hasValue(this._popups)) {\n        // Create popup template\n        var popupTemplate = new Popup();\n        popupTemplate.container = this.SVGContainer;\n        // Create the list\n        this._popups = new ListTemplate(popupTemplate);\n        // Add to disposers\n        this._disposers.push(new ListDisposer(this._popups));\n        this._disposers.push(this._popups.template);\n      }\n      return this._popups;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates, opens, and returns a new [[Popup]] window.\r\n   *\r\n   * `text` can be any valid HTML.\r\n   *\r\n   * `title` is currently not supported.\r\n   *\r\n   * @param text   Popup contents\r\n   * @param title  Popup title\r\n   * @return Popup instance\r\n   */\n  SVGContainer.prototype.openPopup = function (text, title) {\n    var popup = this.popups.create();\n    popup.content = text;\n    if ($type.hasValue(title)) {\n      popup.title = title;\n    }\n    popup.open();\n    return popup;\n  };\n  /**\r\n   * Closes all currently open popup windows\r\n   */\n  SVGContainer.prototype.closeAllPopups = function () {\n    this.popups.each(function (popup) {\n      popup.close();\n    });\n  };\n  Object.defineProperty(SVGContainer.prototype, \"readerAlertElement\", {\n    /**\r\n     * ==========================================================================\r\n     * ACCESSIBILITY STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * A `<div>` element used as as placeholder to trigger screen alerts.\r\n     *\r\n     * @sunce 4.9.2\r\n     * @return Element\r\n     */\n    get: function () {\n      if (!$type.hasValue(this._readerAlertElement)) {\n        // Create element\n        var div = document.createElement(\"div\");\n        div.setAttribute(\"role\", \"alert\");\n        div.style.zIndex = \"-100000\";\n        div.style.opacity = \"0\";\n        div.style.position = \"absolute\";\n        div.style.top = \"0\";\n        this.SVGContainer.appendChild(div);\n        this._readerAlertElement = div;\n      }\n      return this._readerAlertElement;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Triggers screen reader read out a message.\r\n   *\r\n   * @since 4.9.2\r\n   * @param  text  Alert text\r\n   */\n  SVGContainer.prototype.readerAlert = function (text) {\n    this.readerAlertElement.innerHTML = text;\n  };\n  /**\r\n   * ==========================================================================\r\n   * OTHER STUFF\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n  SVGContainer.prototype.checkTransform = function (div) {\n    if (window.getComputedStyle) {\n      if (div && div.style) {\n        var style = window.getComputedStyle(div, null);\n        if (style) {\n          var matrix = style.getPropertyValue(\"-webkit-transform\") || style.getPropertyValue(\"-moz-transform\") || style.getPropertyValue(\"-ms-transform\") || style.getPropertyValue(\"-o-transform\") || style.getPropertyValue(\"transform\");\n          if (matrix && matrix !== \"none\") {\n            var values = matrix.split('(')[1].split(')')[0].split(',');\n            var a = Number(values[0]);\n            var b = Number(values[1]);\n            var scale = Math.sqrt(a * a + b * b);\n            if (!isNaN(scale)) {\n              this.cssScale *= scale;\n            }\n          }\n        }\n      }\n      if (div.parentNode && div.parentNode instanceof HTMLElement) {\n        this.checkTransform(div.parentNode);\n      }\n    }\n  };\n  return SVGContainer;\n}();\nexport { SVGContainer };","map":{"version":3,"names":["Popup","Modal","ListTemplate","ListDisposer","$utils","$dom","$array","$type","ResizeSensor","svgContainers","SVGContainer","htmlElement","ghost","_this","_disposed","autoResize","nonExportableSprites","_disposers","cssScale","_printing","initSensor","push","addEventListener","window","svgContainer","document","createElement","style","width","height","position","appendChild","prototype","resizeSensor","dispose","callback","measure","container","maxWidth","maxHeight","fixPixelPerfect","checkTransform","Object","defineProperty","get","_container","set","enumerable","configurable","isDisposed","remove","each","item","value","overflow","hasValue","_modal","openModal","text","title","closeModal","modal","content","readerTitle","open","close","_popups","popupTemplate","template","openPopup","popup","popups","create","closeAllPopups","_readerAlertElement","div","setAttribute","zIndex","opacity","top","readerAlert","readerAlertElement","innerHTML","getComputedStyle","matrix","getPropertyValue","values","split","a","Number","b","scale","Math","sqrt","isNaN","parentNode","HTMLElement"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/rendering/SVGContainer.js"],"sourcesContent":["/**\r\n * This functionality is related to the HTML wrapper that houses `<svg>` tag.\r\n */\r\nimport { Popup } from \"../elements/Popup\";\r\nimport { Modal } from \"../elements/Modal\";\r\nimport { ListTemplate, ListDisposer } from \"../utils/List\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $dom from \"../utils/DOM\";\r\nimport * as $array from \"../utils/Array\";\r\nimport * as $type from \"../utils/Type\";\r\nimport { ResizeSensor } from \"../utils/ResizeSensor\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A array of all SVG Containers (one SVG container per chart instance).\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport var svgContainers = [];\r\n/**\r\n * A class used to create an HTML wrapper for the SVG contents.\r\n */\r\nvar SVGContainer = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     *\r\n     * * Creates an HTML wrapper for SVG\r\n     */\r\n    function SVGContainer(htmlElement, ghost) {\r\n        var _this = this;\r\n        /**\r\n         * Indicates if this object has already been deleted. Any\r\n         * destruction/disposal code should take this into account when deciding\r\n         * wheter to run potentially costly disposal operations if they already have\r\n         * been run.\r\n         */\r\n        this._disposed = false;\r\n        /**\r\n         * If this component is in a separate HTML container, `autoResize` means the\r\n         * module will constantly measure container's size and adopt contents to it.\r\n         */\r\n        this.autoResize = true;\r\n        /**\r\n         * Holds list of references to [[Sprite]] objects that should not be exported\r\n         * when exporting chart to an image.\r\n         *\r\n         * @ignore\r\n         */\r\n        this.nonExportableSprites = [];\r\n        /**\r\n         * List of objects that need to be disposed when this one is disposed.\r\n         */\r\n        this._disposers = [];\r\n        this.cssScale = 1;\r\n        // This is needed so that it won't resize while printing, so that way printing works correctly.\r\n        this._printing = false;\r\n        // Log parent HTML element\r\n        this.htmlElement = htmlElement;\r\n        if (!ghost) {\r\n            this._printing = false;\r\n            this.initSensor();\r\n            this._disposers.push($dom.addEventListener(window, \"beforeprint\", function () {\r\n                _this._printing = true;\r\n            }));\r\n            this._disposers.push($dom.addEventListener(window, \"afterprint\", function () {\r\n                _this._printing = false;\r\n            }));\r\n        }\r\n        // Adds to containers array\r\n        svgContainers.push(this);\r\n        /**\r\n         * Create child div for the container - it will have svg node\r\n         * It might seem that this container is not necessay, however having it solves\r\n         * a problems with mouse position detection and some other.\r\n         */\r\n        var svgContainer = document.createElement(\"div\");\r\n        var style = svgContainer.style;\r\n        style.width = \"100%\";\r\n        style.height = \"100%\";\r\n        style.position = \"relative\";\r\n        htmlElement.appendChild(svgContainer);\r\n        this.SVGContainer = svgContainer;\r\n    }\r\n    /**\r\n     * (Re)Initializes a resize sensor.\r\n     */\r\n    SVGContainer.prototype.initSensor = function () {\r\n        var _this = this;\r\n        if (this.resizeSensor) {\r\n            this.resizeSensor.dispose();\r\n        }\r\n        var callback = function () {\r\n            if (_this.autoResize && !_this._printing) {\r\n                _this.measure();\r\n            }\r\n        };\r\n        this.resizeSensor = new ResizeSensor(this.htmlElement, callback);\r\n        this._disposers.push(this.resizeSensor);\r\n    };\r\n    /**\r\n     * Measures size of parent HTML element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    SVGContainer.prototype.measure = function () {\r\n        var width = $utils.width(this.htmlElement);\r\n        var height = $utils.height(this.htmlElement);\r\n        var container = this.container;\r\n        if (container) {\r\n            if (this.width != width || this.height != height) {\r\n                this.width = width;\r\n                this.height = height;\r\n                if (width > 0) {\r\n                    container.maxWidth = width;\r\n                }\r\n                if (height > 0) {\r\n                    container.maxHeight = height;\r\n                }\r\n                $dom.fixPixelPerfect(this.SVGContainer);\r\n            }\r\n            if (!container.maxWidth) {\r\n                container.maxWidth = 0;\r\n            }\r\n            if (!container.maxHeight) {\r\n                container.maxHeight = 0;\r\n            }\r\n            this.cssScale = 1;\r\n            this.checkTransform(this.htmlElement);\r\n        }\r\n    };\r\n    Object.defineProperty(SVGContainer.prototype, \"container\", {\r\n        /**\r\n         * @return Container\r\n         */\r\n        get: function () {\r\n            return this._container;\r\n        },\r\n        /**\r\n         * A [[Container]] element which is placed into container.\r\n         *\r\n         * @param container  Container\r\n         */\r\n        set: function (container) {\r\n            this._container = container;\r\n            this.measure();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns if this object has been already been disposed.\r\n     *\r\n     * @return Is disposed?\r\n     */\r\n    SVGContainer.prototype.isDisposed = function () {\r\n        return this._disposed;\r\n    };\r\n    /**\r\n     * Removes this container from SVG container list in system, which\r\n     * effectively disables size change monitoring for it.\r\n     */\r\n    SVGContainer.prototype.dispose = function () {\r\n        if (!this._disposed) {\r\n            $array.remove(svgContainers, this);\r\n        }\r\n        $array.each(this._disposers, function (item) {\r\n            item.dispose();\r\n        });\r\n    };\r\n    Object.defineProperty(SVGContainer.prototype, \"hideOverflow\", {\r\n        /**\r\n         * Indicates if chart container should have its style set\r\n         * to `overflow: hidden`.\r\n         *\r\n         * Normally, we don't want that, so that certain elements, such as tooltips,\r\n         * would be able to go outside chart area.\r\n         *\r\n         * There is one issue though. Some browsers ignore SVG masks and would\r\n         * display scrollbars if chart elements, that go outside chart area extend\r\n         * outside window.\r\n         *\r\n         * This is especially true for [[MapChart]], which can have its elements\r\n         * extend very widely when zoomed in. Even if those parts are not visible\r\n         * because of SVG masks, some browsers might still display window scrollbars.\r\n         *\r\n         * This is why we set this setting to `true` in [[MapChart]].\r\n         *\r\n         * Other charts use default of `false`.\r\n         */\r\n        set: function (value) {\r\n            if (value) {\r\n                this.SVGContainer.style.overflow = \"hidden\";\r\n            }\r\n            else {\r\n                this.SVGContainer.style.overflow = \"\";\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SVGContainer.prototype, \"modal\", {\r\n        /**\r\n         * ==========================================================================\r\n         * MODAL/POPUP RELATED STUFF\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Returns a [[Modal]] instance, associated with this chart.\r\n         * (elements top parent)\r\n         *\r\n         * Accessing modal does not make it appear. To make a modal appear, use\r\n         * `showModal()` method.\r\n         *\r\n         * @see {@link Modal} for more information about using Modal windows\r\n         * @return Modal instance\r\n         */\r\n        get: function () {\r\n            if (!$type.hasValue(this._modal)) {\r\n                // Create new modal\r\n                this._modal = new Modal();\r\n                this._modal.container = this.SVGContainer;\r\n                // Add to disposers\r\n                this._disposers.push(this._modal);\r\n            }\r\n            return this._modal;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Opens a modal window with specific content (`text` parameter) and,\r\n     * optionally, `title`.\r\n     *\r\n     * The `text` parameter can contain HTML content.\r\n     *\r\n     * @see {@link Modal} for more information about using Modal windows\r\n     * @param text   Modal contents\r\n     * @param title  Title for the modal window\r\n     */\r\n    SVGContainer.prototype.openModal = function (text, title) {\r\n        // Hide previous modal\r\n        this.closeModal();\r\n        // Create modal\r\n        var modal = this.modal;\r\n        modal.content = text;\r\n        modal.readerTitle = title || \"\";\r\n        modal.title = title || \"\";\r\n        modal.open();\r\n        return modal;\r\n    };\r\n    /**\r\n     * Hides modal window if there is one currently open.\r\n     */\r\n    SVGContainer.prototype.closeModal = function () {\r\n        if (this._modal) {\r\n            this.modal.close();\r\n        }\r\n    };\r\n    Object.defineProperty(SVGContainer.prototype, \"popups\", {\r\n        /**\r\n         * A list of popups for this chart.\r\n         *\r\n         * @return Popups\r\n         */\r\n        get: function () {\r\n            if (!$type.hasValue(this._popups)) {\r\n                // Create popup template\r\n                var popupTemplate = new Popup();\r\n                popupTemplate.container = this.SVGContainer;\r\n                // Create the list\r\n                this._popups = new ListTemplate(popupTemplate);\r\n                // Add to disposers\r\n                this._disposers.push(new ListDisposer(this._popups));\r\n                this._disposers.push(this._popups.template);\r\n            }\r\n            return this._popups;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates, opens, and returns a new [[Popup]] window.\r\n     *\r\n     * `text` can be any valid HTML.\r\n     *\r\n     * `title` is currently not supported.\r\n     *\r\n     * @param text   Popup contents\r\n     * @param title  Popup title\r\n     * @return Popup instance\r\n     */\r\n    SVGContainer.prototype.openPopup = function (text, title) {\r\n        var popup = this.popups.create();\r\n        popup.content = text;\r\n        if ($type.hasValue(title)) {\r\n            popup.title = title;\r\n        }\r\n        popup.open();\r\n        return popup;\r\n    };\r\n    /**\r\n     * Closes all currently open popup windows\r\n     */\r\n    SVGContainer.prototype.closeAllPopups = function () {\r\n        this.popups.each(function (popup) {\r\n            popup.close();\r\n        });\r\n    };\r\n    Object.defineProperty(SVGContainer.prototype, \"readerAlertElement\", {\r\n        /**\r\n         * ==========================================================================\r\n         * ACCESSIBILITY STUFF\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * A `<div>` element used as as placeholder to trigger screen alerts.\r\n         *\r\n         * @sunce 4.9.2\r\n         * @return Element\r\n         */\r\n        get: function () {\r\n            if (!$type.hasValue(this._readerAlertElement)) {\r\n                // Create element\r\n                var div = document.createElement(\"div\");\r\n                div.setAttribute(\"role\", \"alert\");\r\n                div.style.zIndex = \"-100000\";\r\n                div.style.opacity = \"0\";\r\n                div.style.position = \"absolute\";\r\n                div.style.top = \"0\";\r\n                this.SVGContainer.appendChild(div);\r\n                this._readerAlertElement = div;\r\n            }\r\n            return this._readerAlertElement;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Triggers screen reader read out a message.\r\n     *\r\n     * @since 4.9.2\r\n     * @param  text  Alert text\r\n     */\r\n    SVGContainer.prototype.readerAlert = function (text) {\r\n        this.readerAlertElement.innerHTML = text;\r\n    };\r\n    /**\r\n     * ==========================================================================\r\n     * OTHER STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    SVGContainer.prototype.checkTransform = function (div) {\r\n        if (window.getComputedStyle) {\r\n            if (div && div.style) {\r\n                var style = window.getComputedStyle(div, null);\r\n                if (style) {\r\n                    var matrix = style.getPropertyValue(\"-webkit-transform\") ||\r\n                        style.getPropertyValue(\"-moz-transform\") ||\r\n                        style.getPropertyValue(\"-ms-transform\") ||\r\n                        style.getPropertyValue(\"-o-transform\") ||\r\n                        style.getPropertyValue(\"transform\");\r\n                    if (matrix && matrix !== \"none\") {\r\n                        var values = matrix.split('(')[1].split(')')[0].split(',');\r\n                        var a = Number(values[0]);\r\n                        var b = Number(values[1]);\r\n                        var scale = Math.sqrt(a * a + b * b);\r\n                        if (!isNaN(scale)) {\r\n                            this.cssScale *= scale;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (div.parentNode && div.parentNode instanceof HTMLElement) {\r\n                this.checkTransform(div.parentNode);\r\n            }\r\n        }\r\n    };\r\n    return SVGContainer;\r\n}());\r\nexport { SVGContainer };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}