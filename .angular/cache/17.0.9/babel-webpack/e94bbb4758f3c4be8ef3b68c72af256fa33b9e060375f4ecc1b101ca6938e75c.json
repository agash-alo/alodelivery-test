{"ast":null,"code":"/**\r\n * Ellipse module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Circle } from \"./Circle\";\nimport { registry } from \"../Registry\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Draws an ellipse\r\n * @see {@link IEllipseEvents} for a list of available events\r\n * @see {@link IEllipseAdapters} for a list of available Adapters\r\n */\nvar Ellipse = /** @class */function (_super) {\n  __extends(Ellipse, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Ellipse() {\n    var _this = _super.call(this) || this;\n    _this.className = \"Ellipse\";\n    _this.element = _this.paper.add(\"ellipse\");\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Draws the ellipsis.\r\n   */\n  Ellipse.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n    this.element.attr({\n      \"rx\": this.radius\n    });\n    this.element.attr({\n      \"ry\": this.radiusY\n    });\n  };\n  Object.defineProperty(Ellipse.prototype, \"radiusY\", {\n    /**\r\n     * @return Vertical radius\r\n     */\n    get: function () {\n      return this.innerHeight / 2;\n    },\n    /**\r\n     * Vertical radius.\r\n     *\r\n     * It's a relative size to the `radius`.\r\n     *\r\n     * E.g. 0.8 will mean the height of the ellipsis will be 80% of it's\r\n     * horizontal radius.\r\n     *\r\n     * @param value  Vertical radius\r\n     */\n    set: function (value) {\n      this.height = value * 2;\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Ellipse.prototype, \"radius\", {\n    /**\r\n     * @return Horizontal radius\r\n     */\n    get: function () {\n      return this.innerWidth / 2;\n    },\n    /**\r\n     * Horizontal radius.\r\n     *\r\n     * @param value  Horizontal radius\r\n     */\n    set: function (value) {\n      this.width = value * 2;\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Ellipse;\n}(Circle);\nexport { Ellipse };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Ellipse\"] = Ellipse;","map":{"version":3,"names":["__extends","Circle","registry","Ellipse","_super","_this","call","className","element","paper","add","applyTheme","prototype","draw","attr","radius","radiusY","Object","defineProperty","get","innerHeight","set","value","height","invalidate","enumerable","configurable","innerWidth","width","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/elements/Ellipse.js"],"sourcesContent":["/**\r\n * Ellipse module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Circle } from \"./Circle\";\r\nimport { registry } from \"../Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws an ellipse\r\n * @see {@link IEllipseEvents} for a list of available events\r\n * @see {@link IEllipseAdapters} for a list of available Adapters\r\n */\r\nvar Ellipse = /** @class */ (function (_super) {\r\n    __extends(Ellipse, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Ellipse() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Ellipse\";\r\n        _this.element = _this.paper.add(\"ellipse\");\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the ellipsis.\r\n     */\r\n    Ellipse.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        this.element.attr({ \"rx\": this.radius });\r\n        this.element.attr({ \"ry\": this.radiusY });\r\n    };\r\n    Object.defineProperty(Ellipse.prototype, \"radiusY\", {\r\n        /**\r\n         * @return Vertical radius\r\n         */\r\n        get: function () {\r\n            return this.innerHeight / 2;\r\n        },\r\n        /**\r\n         * Vertical radius.\r\n         *\r\n         * It's a relative size to the `radius`.\r\n         *\r\n         * E.g. 0.8 will mean the height of the ellipsis will be 80% of it's\r\n         * horizontal radius.\r\n         *\r\n         * @param value  Vertical radius\r\n         */\r\n        set: function (value) {\r\n            this.height = value * 2;\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Ellipse.prototype, \"radius\", {\r\n        /**\r\n         * @return Horizontal radius\r\n         */\r\n        get: function () {\r\n            return this.innerWidth / 2;\r\n        },\r\n        /**\r\n         * Horizontal radius.\r\n         *\r\n         * @param value  Horizontal radius\r\n         */\r\n        set: function (value) {\r\n            this.width = value * 2;\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Ellipse;\r\n}(Circle));\r\nexport { Ellipse };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Ellipse\"] = Ellipse;\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,SAAS,QAAQ,OAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,MAAM,QAAQ,UAAU;AACjC,SAASC,QAAQ,QAAQ,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,OAAO,GAAG,aAAe,UAAUC,MAAM,EAAE;EAC3CJ,SAAS,CAACG,OAAO,EAAEC,MAAM,CAAC;EAC1B;AACJ;AACA;EACI,SAASD,OAAOA,CAAA,EAAG;IACf,IAAIE,KAAK,GAAGD,MAAM,CAACE,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI;IACrCD,KAAK,CAACE,SAAS,GAAG,SAAS;IAC3BF,KAAK,CAACG,OAAO,GAAGH,KAAK,CAACI,KAAK,CAACC,GAAG,CAAC,SAAS,CAAC;IAC1CL,KAAK,CAACM,UAAU,CAAC,CAAC;IAClB,OAAON,KAAK;EAChB;EACA;AACJ;AACA;EACIF,OAAO,CAACS,SAAS,CAACC,IAAI,GAAG,YAAY;IACjCT,MAAM,CAACQ,SAAS,CAACC,IAAI,CAACP,IAAI,CAAC,IAAI,CAAC;IAChC,IAAI,CAACE,OAAO,CAACM,IAAI,CAAC;MAAE,IAAI,EAAE,IAAI,CAACC;IAAO,CAAC,CAAC;IACxC,IAAI,CAACP,OAAO,CAACM,IAAI,CAAC;MAAE,IAAI,EAAE,IAAI,CAACE;IAAQ,CAAC,CAAC;EAC7C,CAAC;EACDC,MAAM,CAACC,cAAc,CAACf,OAAO,CAACS,SAAS,EAAE,SAAS,EAAE;IAChD;AACR;AACA;IACQO,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACC,WAAW,GAAG,CAAC;IAC/B,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAACC,MAAM,GAAGD,KAAK,GAAG,CAAC;MACvB,IAAI,CAACE,UAAU,CAAC,CAAC;IACrB,CAAC;IACDC,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFT,MAAM,CAACC,cAAc,CAACf,OAAO,CAACS,SAAS,EAAE,QAAQ,EAAE;IAC/C;AACR;AACA;IACQO,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACQ,UAAU,GAAG,CAAC;IAC9B,CAAC;IACD;AACR;AACA;AACA;AACA;IACQN,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAACM,KAAK,GAAGN,KAAK,GAAG,CAAC;MACtB,IAAI,CAACE,UAAU,CAAC,CAAC;IACrB,CAAC;IACDC,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF,OAAOvB,OAAO;AAClB,CAAC,CAACF,MAAM,CAAE;AACV,SAASE,OAAO;AAChB;AACA;AACA;AACA;AACA;AACA;AACAD,QAAQ,CAAC2B,iBAAiB,CAAC,SAAS,CAAC,GAAG1B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}