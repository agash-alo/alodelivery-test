{"ast":null,"code":"/**\r\n * Base functionality\r\n*/\nimport { __extends } from \"tslib\";\nimport { List, ListTemplate } from \"./utils/List\";\nimport { OrderedListTemplate, SortedListTemplate } from \"./utils/SortedList\";\nimport { Dictionary, DictionaryTemplate } from \"./utils/Dictionary\";\nimport { Disposer } from \"./utils/Disposer\";\nimport { EventDispatcher } from \"./utils/EventDispatcher\";\nimport { Adapter } from \"./utils/Adapter\";\nimport { Color, color } from \"./utils/Color\";\nimport { Percent, percent } from \"./utils/Percent\";\nimport { registry } from \"./Registry\";\nimport { cache } from \"./utils/Cache\";\nimport * as $array from \"./utils/Array\";\nimport * as $object from \"./utils/Object\";\nimport * as $type from \"./utils/Type\";\n//import * as $debug from \"./utils/Debug\";\n/**\r\n * Provides base functionality for all derivative objects, like generating ids,\r\n * handling cache, etc.\r\n */\nvar BaseObject = /** @class */function () {\n  //protected _classes: { [index: string]: any } = {};\n  /**\r\n   * Constructor\r\n   * * Sets class name\r\n   */\n  function BaseObject() {\n    /**\r\n     * Indicates if this object has already been deleted. Any\r\n     * destruction/disposal code should take this into account when deciding\r\n     * wheter to run potentially costly disposal operations if they already have\r\n     * been run.\r\n     */\n    this._disposed = false;\n    /**\r\n     * List of IDisposer which will be disposed when the BaseObject is disposed.\r\n     */\n    this._disposers = [];\n    this.className = \"BaseObject\";\n    //this.debug();\n  }\n\n  BaseObject.prototype.debug = function () {\n    //$debug.debug(this);\n  };\n  Object.defineProperty(BaseObject.prototype, \"uid\", {\n    /**\r\n     * Returns object's internal unique ID.\r\n     *\r\n     * @return Unique ID\r\n     */\n    get: function () {\n      if (!this._uid) {\n        this._uid = registry.getUniqueId();\n        registry.map.setKey(this._uid, this);\n      }\n      return this._uid;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseObject.prototype, \"id\", {\n    /**\r\n     * @return Id\r\n     */\n    get: function () {\n      return this._id;\n    },\n    /**\r\n     * Sets the user-defined id of the element.\r\n     *\r\n     * @param value Id\r\n     */\n    set: function (value) {\n      //registry.map.setKey(value, this); // registry.map only stores by uid\n      this._id = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseObject.prototype, \"map\", {\n    /**\r\n     * Returns a universal collection for mapping ids with objects.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Map collection\r\n     */\n    get: function () {\n      if (!this._map) {\n        this._map = new Dictionary();\n      }\n      return this._map;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BaseObject.prototype, \"delayedMap\", {\n    /**\r\n     * Returns mapping for objects referenced by id in JSON config that are not yet\r\n     * available at processing time.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Map collection\r\n     */\n    get: function () {\n      if (!this._delayedMap) {\n        this._delayedMap = new Dictionary();\n      }\n      return this._delayedMap;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Logs an id and property of the target element that is not yet available\r\n   * for later assignment.\r\n   *\r\n   * @ignore\r\n   * @param  property  Property to set\r\n   * @param  id        ID of the target element\r\n   */\n  BaseObject.prototype.addDelayedMap = function (property, id) {\n    var map = this.delayedMap;\n    if (!map.hasKey(id)) {\n      map.setKey(id, []);\n    }\n    var list = map.getKey(id);\n    list.push({\n      property: property,\n      target: this\n    });\n  };\n  /**\r\n   * Processes delayed JSON config items.\r\n   *\r\n   * @ignore\r\n   */\n  BaseObject.prototype.processDelayedMap = function () {\n    var _this = this;\n    this.delayedMap.each(function (id, list) {\n      if (_this.map.hasKey(id)) {\n        var target_1 = _this.map.getKey(id);\n        $array.each(list, function (item) {\n          item.target[item.property] = target_1;\n        });\n        _this.delayedMap.removeKey(id);\n      }\n    });\n  };\n  /**\r\n   * Applies properties from all assigned themes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  BaseObject.prototype.applyTheme = function () {\n    var _this = this;\n    // TODO is this needed ?\n    if (registry) {\n      var themes = this.getCurrentThemes();\n      // TODO is this needed ?\n      if (themes) {\n        $array.each(themes, function (theme, index) {\n          theme(_this);\n        });\n      }\n    }\n  };\n  Object.defineProperty(BaseObject.prototype, \"themes\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return An array of themes\r\n     */\n    get: function () {\n      return this._themes;\n    },\n    /**\r\n     * A list of themes to be used for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value An array of themes\r\n     */\n    set: function (value) {\n      this._themes = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a list of themes that should be applied to this element. It could\r\n   * either be a list of themes set explicitly on this element, or system-wide.\r\n   *\r\n   * @return List of themes\r\n   */\n  BaseObject.prototype.getCurrentThemes = function () {\n    return this.themes || registry.themes;\n  };\n  /**\r\n   * Returns if this object has been already been disposed.\r\n   *\r\n   * @return Is disposed?\r\n   */\n  BaseObject.prototype.isDisposed = function () {\n    return this._disposed;\n  };\n  /**\r\n   * Destroys this object and all related data.\r\n   */\n  BaseObject.prototype.dispose = function () {\n    if (!this._disposed) {\n      this._disposed = true;\n      var a = this._disposers;\n      this._disposers = null;\n      while (a.length !== 0) {\n        var disposer = a.shift();\n        disposer.dispose();\n      }\n      // Clear cache\n      this.clearCache();\n      // remove from clones list\n      if (this.clonedFrom) {\n        this.clonedFrom.clones.removeValue(this);\n      }\n      var uid = this._uid;\n      if (uid != null) {\n        registry.map.removeKey(uid);\n      }\n    }\n  };\n  /**\r\n   * Adds an IDisposer, which will be disposed when this object is disposed.\r\n   *\r\n   * @param target Object to dispose\r\n   * @ignore Exclude from docs\r\n   */\n  BaseObject.prototype.addDisposer = function (target) {\n    this._disposers.push(target);\n  };\n  /**\r\n   * Disposes disposable object and removes it from `_disposers`.\r\n   *\r\n   * @param target Object to dispose\r\n   * @ignore Exclude from docs\r\n   */\n  BaseObject.prototype.removeDispose = function (target) {\n    //if(target){\n    if (!this._disposed) {\n      var index = $array.indexOf(this._disposers, target);\n      if (index > -1) {\n        this._disposers.splice(index, 1);\n      }\n    }\n    target.dispose();\n    //}\n  };\n  /**\r\n   * Makes a copy of this object and returns the clone. Try to avoid cloning complex objects like chart, create new instances if you need them.\r\n   *\r\n   * @param cloneId  An id to use for clone (if not set a unique id will be generated)\r\n   * @returns Clone\r\n   */\n  BaseObject.prototype.clone = function (cloneId) {\n    if (!cloneId) {\n      cloneId = \"clone-\" + registry.getUniqueId();\n    }\n    var newObject = new this.constructor();\n    newObject.cloneId = cloneId;\n    newObject.copyFrom(this);\n    // add to clones list\n    // this.clones.push(newObject); // moved this to copyFrom\n    return newObject;\n  };\n  Object.defineProperty(BaseObject.prototype, \"clones\", {\n    /**\r\n     * Returns a collection of object's clones.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Clones\r\n     */\n    get: function () {\n      if (!this._clones) {\n        this._clones = new List();\n      }\n      return this._clones;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all properties and related data from different element.\r\n   *\r\n   * @param object Source element\r\n   */\n  BaseObject.prototype.copyFrom = function (object) {\n    object.clones.push(this); // do not moveValue, as it is expensive! even if there will be several items in clones list, it's not that bad.\n    this.clonedFrom = object;\n  };\n  Object.defineProperty(BaseObject.prototype, \"className\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Class name\r\n     */\n    get: function () {\n      return this._className;\n    },\n    /**\r\n     * Element's class name. (a class that was used to instantiate the element)\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Class name\r\n     */\n    set: function (value) {\n      this._className = value;\n      /*if (registry) {\r\n          registry.registeredClasses[value] = typeof this;\r\n      }*/\n    },\n\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Caches value in object's cache.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param key    Key\r\n   * @param value  Value\r\n   * @param ttl    TTL in seconds\r\n   */\n  BaseObject.prototype.setCache = function (key, value, ttl) {\n    cache.set(this.uid, key, value, ttl);\n  };\n  /**\r\n   * Retrieves cached value.\r\n   *\r\n   * If optional second padarameter is specified, it will return that value\r\n   * if cache is not available or is expired.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param key    Key\r\n   * @param value  Value to return if cache is not available\r\n   * @return Value\r\n   */\n  BaseObject.prototype.getCache = function (key, value) {\n    if (value === void 0) {\n      value = undefined;\n    }\n    return cache.get(this.uid, key, value);\n  };\n  /**\r\n   * Clears object's local cache.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  BaseObject.prototype.clearCache = function () {\n    cache.clear(this.uid);\n  };\n  /**\r\n   * Creates [[Disposer]] for `setTimeout` function call. This ensures that all\r\n   * timeouts created by the object will be cleared when object itself is\r\n   * disposed.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param fn     Callback function\r\n   * @param delay  Timeout (ms)\r\n   * @return Disposer for timeout\r\n   */\n  BaseObject.prototype.setTimeout = function (fn, delay) {\n    var _this = this;\n    var id = setTimeout(function () {\n      _this.removeDispose(disposer);\n      fn();\n    }, delay);\n    var disposer = new Disposer(function () {\n      clearTimeout(id);\n    });\n    this._disposers.push(disposer);\n    return disposer;\n  };\n  /**\r\n   * Creates [[Disposer]] for `setInterval` function call. This ensures that all\r\n   * timeouts created by the object will be cleared when object itself is\r\n   * disposed.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param fn     Callback function\r\n   * @param delay  Timeout (ms)\r\n   * @return Disposer for timeout\r\n   */\n  BaseObject.prototype.setInterval = function (fn, delay) {\n    var _this = this;\n    var id = setInterval(function () {\n      _this.removeDispose(disposer);\n      fn();\n    }, delay);\n    var disposer = new Disposer(function () {\n      clearTimeout(id);\n    });\n    this._disposers.push(disposer);\n    return disposer;\n  };\n  Object.defineProperty(BaseObject.prototype, \"config\", {\n    /**\r\n     * ==========================================================================\r\n     * JSON-BASED CONFIG PROCESSING\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Use this property to set JSON-based config. When set, triggers processing\r\n     * routine, which will go through all properties, and try to apply values,\r\n     * create instances, etc.\r\n     *\r\n     * Use this with caution, as it is a time-consuming process. It's used for\r\n     * initialchart setup only, not routine operations.\r\n     *\r\n     * @param json JSON config\r\n     */\n    set: function (config) {\n      try {\n        this.processConfig(config);\n      } catch (e) {\n        /*if (this instanceof Sprite) {\r\n            this.raiseCriticalError(e);\r\n        }*/\n        this.raiseCriticalError(e);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Processes the JSON config.\r\n   *\r\n   * @param json  JSON config\r\n   * @ignore Exclude from docs\r\n   */\n  BaseObject.prototype.processConfig = function (config) {\n    var _this = this;\n    if (!config) {\n      return;\n    }\n    // Get target\n    var target = this;\n    // Iterate through all of the items\n    $object.eachOrdered(config, function (configKey, value) {\n      var configValue = value;\n      // Is this a callback?\n      if (configKey == \"callback\" && typeof value == \"function\") {\n        value.call(target);\n      }\n      // Check if there's a property in target\n      if (_this.hasProperty(configKey)) {\n        var item_1;\n        // Do we have instructions to create an object?\n        // We create a new object if \"type\" key is set, but only if the\n        // target object is of different type.\n        if ($type.isObject(configValue) && $type.hasValue(configValue[\"type\"]) && (!$type.isObject(target[configKey]) || !$type.hasValue(target[configKey].className) || configValue[\"forceCreate\"] || target[configKey].className != configValue[\"type\"]) && !_this.asIs(configKey)) {\n          item_1 = _this.createClassInstance(configValue[\"type\"]);\n          // Create new instance\n          if (item_1) {\n            target[configKey] = item_1;\n          } else {\n            item_1 = target[configKey];\n          }\n        } else {\n          // Get item from the object\n          item_1 = target[configKey];\n        }\n        /**\r\n         * It is...\r\n         * --------------------------------------------------------------------\r\n         */\n        if (item_1 instanceof Adapter) {\n          // ... an Adapter, try to add handlers to it\n          // ------------------------------------------------------------------\n          _this.processAdapters(item_1, configValue);\n        } else if (item_1 instanceof EventDispatcher) {\n          // ... an EventDispatcher, try to add handlers to it\n          // ------------------------------------------------------------------\n          _this.processEvents(item_1, configValue);\n        } else if (configKey == \"locale\" && $type.isString(configValue)) {\n          // ... a locale specified as string, e.g. \"fr_FR\"\n          // ------------------------------------------------------------------\n          if (window[\"am4lang_\" + configValue]) {\n            target[configKey] = window[\"am4lang_\" + configValue];\n          }\n        } else if (configKey == \"parent\" && $type.isString(configValue)) {\n          // ... a parent referred via its it\n          // ------------------------------------------------------------------\n          var parent_1 = _this.map.getKey(configValue);\n          if (parent_1) {\n            target[configKey] = parent_1;\n          } else {\n            _this.addDelayedMap(\"parent\", configValue);\n          }\n        } else if (_this.asIs(configKey)) {\n          // ... a special field, just set it to new value\n          // ------------------------------------------------------------------\n          // (no need to add each indvidual item)\n          target[configKey] = configValue;\n        } else if (_this.asFunction(configKey) && $type.isString(configValue)) {\n          // ... a field indicating function name to look for in registry\n          // ------------------------------------------------------------------\n          if ($type.hasValue(registry.registeredClasses[configValue])) {\n            target[configKey] = registry.registeredClasses[configValue];\n          } else {\n            throw Error(\"Invalid easing function: \" + configValue);\n          }\n        } else if (configValue instanceof BaseObject) {\n          // ... a BaseObject object, we just going to use it as it is\n          // ------------------------------------------------------------------\n          target[configKey] = configValue;\n        } else if (item_1 instanceof BaseObject) {\n          // ... another child BaseObject\n          // ------------------------------------------------------------------\n          // Let's just pass in config part in and let itself deal with it\n          item_1.config = configValue;\n        } else if (item_1 instanceof ListTemplate || item_1 instanceof OrderedListTemplate || item_1 instanceof SortedListTemplate) {\n          // ... a list with template\n          // ------------------------------------------------------------------\n          // Let's see what we can do with it\n          if ($type.isArray(configValue)) {\n            // It's an array.\n            // Create a list item for entry, or try to apply properties to an\n            // existing entry if possible and it is present.\n            if (item_1 instanceof ListTemplate) {\n              _this.processListTemplate(configValue, item_1);\n            } else {\n              _this.processOrderedTemplate(configValue, item_1);\n            }\n          } else if ($type.isObject(configValue)) {\n            // It's a single oject.\n            // Treat it as a template.\n            if (configValue instanceof BaseObject) {\n              // Item is already a BaseObject, no need to process it further\n              item_1.template = configValue;\n            } else {\n              // Now let's find out if the whole object if a template, or we\n              // need to get it from `template` key\n              var templateValue = void 0;\n              if ($type.hasValue(configValue.template)) {\n                templateValue = configValue.template;\n              } else {\n                templateValue = configValue;\n              }\n              if (item_1.template instanceof BaseObject) {\n                // Template is a BaseObject so we will just let its config\n                // deal with the configuration\n                item_1.template.config = templateValue;\n              } else {\n                $object.each(templateValue, function (entryKey, entryValue) {\n                  var listItem = item_1.template[entryKey];\n                  if (listItem instanceof Adapter) {\n                    _this.processAdapters(listItem, entryValue);\n                  } else if (listItem instanceof EventDispatcher) {\n                    _this.processEvents(listItem, entryValue);\n                  } else if (listItem instanceof DictionaryTemplate) {\n                    _this.processDictionaryTemplate(listItem, entryValue);\n                  } else if (item_1.template[entryKey] instanceof BaseObject) {\n                    // Template is a BaseObject. Let it deal with its own config.\n                    item_1.template[entryKey].config = entryValue;\n                  } else if ($type.isObject(entryValue) && $type.hasValue(entryValue[\"type\"])) {\n                    listItem = _this.createClassInstance(entryValue[\"type\"]);\n                    if (listItem) {\n                      if (listItem instanceof BaseObject) {\n                        listItem.config = entryValue;\n                      }\n                      item_1.template[entryKey] = listItem;\n                    } else {\n                      item_1.template[entryKey] = entryValue;\n                    }\n                  } else if (listItem instanceof List) {\n                    // It's List, process it\n                    _this.processList(entryValue, listItem);\n                  } else {\n                    // Aything else. Just assing and be done with it.\n                    item_1.template[entryKey] = _this.maybeColorOrPercent(entryValue);\n                  }\n                });\n              }\n              // Check maybe there are `values` to insert\n              if ($type.hasValue(configValue.values)) {\n                if (item_1 instanceof ListTemplate) {\n                  _this.processListTemplate(configValue.values, item_1);\n                } else {\n                  _this.processOrderedTemplate(configValue.values, item_1);\n                }\n              }\n            }\n          } else {\n            // Something else?\n            // Not sure what to do with it on a list - ignore\n          }\n        } else if (item_1 instanceof List) {\n          // ... a list\n          // ------------------------------------------------------------------\n          if (configKey == \"children\") {\n            _this.processList(configValue, item_1, _this);\n          } else {\n            _this.processList(configValue, item_1);\n          }\n        } else if (item_1 instanceof DictionaryTemplate) {\n          // ... a dictionary with template\n          // ------------------------------------------------------------------\n          _this.processDictionaryTemplate(item_1, configValue);\n        } else if (item_1 instanceof Dictionary) {\n          // ... a dictionary\n          // ------------------------------------------------------------------\n          _this.processDictionary(item_1, configValue);\n        } else if (item_1 instanceof Color || item_1 instanceof Percent) {\n          // ... it's a Color or Percent\n          // ------------------------------------------------------------------\n          target[configKey] = _this.maybeColorOrPercent(configValue);\n        } else if ($type.isObject(item_1) && $type.isObject(configValue)) {\n          // ... a regular object\n          // ------------------------------------------------------------------\n          $object.copyAllProperties(configValue, item_1);\n        } else {\n          // ... something else - probably a simple property or object\n          // ------------------------------------------------------------------\n          // Maybe convert to `Percent` or `Color`?\n          configValue = _this.maybeColorOrPercent(configValue);\n          // Assign\n          target[configKey] = configValue;\n        }\n      } else if (!_this.isReserved(configKey)) {\n        // Doesn't have property set. But we're going to assume JSON config\n        // creator knows what he/she is doing and set it anyway.\n        target[configKey] = configValue;\n      }\n    }, this.configOrder);\n    // Any errors?\n    if (this.processingErrors.length) {\n      var errors = this.processingErrors.join(\"\\n\");\n      this._processingErrors = [];\n      throw Error(errors);\n    }\n  };\n  /**\r\n   * Tries to detect if value is color or percent and converts to proper object\r\n   * if necessary.\r\n   *\r\n   * Returns the same source value if no color/percent detected\r\n   *\r\n   * @param value  Source value\r\n   * @return Converted value\r\n   */\n  BaseObject.prototype.maybeColorOrPercent = function (value) {\n    if ($type.isString(value)) {\n      if (value.match(/^[\\-]?[0-9.]+\\%$/)) {\n        return percent($type.toNumber(value));\n      } else if (value.match(/^\\#[0-9abcdef]{3,}$/i)) {\n        return color(value);\n      }\n    }\n    return value;\n  };\n  BaseObject.prototype.processAdapters = function (item, config) {\n    var _this = this;\n    if ($type.isArray(config)) {\n      $array.each(config, function (entry, index) {\n        item.add(entry.key, entry.callback, entry.priority || 0, _this);\n      });\n    } else if ($type.isObject(config)) {\n      $object.each(config, function (key, entry) {\n        if (!item.has(key, entry)) {\n          item.add(key, entry);\n        }\n      });\n    }\n  };\n  BaseObject.prototype.processEvents = function (item, config) {\n    var _this = this;\n    if ($type.isArray(config)) {\n      $array.each(config, function (entry, index) {\n        item.on(entry.type, entry.callback, _this);\n      });\n    } else if ($type.isObject(config)) {\n      $object.each(config, function (key, entry) {\n        if (!item.has(key, entry)) {\n          item.on(key, entry);\n        }\n      });\n    }\n  };\n  /**\r\n   * Processes JSON config for a [[DictionaryTemplate]] item.\r\n   *\r\n   * @todo Description\r\n   * @param item    Item\r\n   * @param config  Config\r\n   */\n  BaseObject.prototype.processDictionaryTemplate = function (item, config) {\n    // We can only process object\n    // Not sure what to do with other types - ignore\n    if ($type.isObject(config)) {\n      // Create an entry for each item, or override properties for\n      // existing one.\n      $object.each(config, function (entryKey, entryValue) {\n        var listItem;\n        // Get existing one, or create a new one\n        if (entryKey == \"template\") {\n          listItem = item.template;\n        } else if (item.hasKey(entryKey)) {\n          listItem = item.getKey(entryKey);\n        } else {\n          listItem = item.create(entryKey);\n        }\n        // Set data\n        if (listItem instanceof BaseObject) {\n          listItem.config = entryValue;\n        } else if ($type.isObject(listItem) && $type.isObject(entryValue)) {\n          $object.copyAllProperties(entryValue, listItem);\n        } else {\n          listItem.setKey(entryKey, entryValue);\n        }\n      });\n    }\n  };\n  /**\r\n   * Processes JSON config for a [[Dictionary]] item.\r\n   *\r\n   * @todo Description\r\n   * @param item    Item\r\n   * @param config  Config\r\n   */\n  BaseObject.prototype.processDictionary = function (item, config) {\n    // We can only process object\n    // Not sure what to do with other types - ignore\n    if ($type.isObject(config)) {\n      // Create an entry for each item, or override properties for\n      // existing one.\n      // @todo support for non-basic types\n      $object.each(config, function (entryKey, entryValue) {\n        item.setKey(entryKey, entryValue);\n      });\n    }\n  };\n  /**\r\n   * Processes [[ListTemplate]].\r\n   *\r\n   * @param configValue  Config value\r\n   * @param item         Item\r\n   */\n  BaseObject.prototype.processListTemplate = function (configValue, item) {\n    var _this = this;\n    $array.each(configValue, function (entry, index) {\n      var type = _this.getConfigEntryType(entry);\n      var listItem;\n      if (item.hasIndex(index) && !entry[\"forceCreate\"]) {\n        listItem = item.getIndex(index);\n      } else if (entry instanceof BaseObject) {\n        // Item is already a BaseObject, no need to process it further\n        item.push(entry);\n        return;\n      } else if (type) {\n        listItem = item.create(type);\n      } else {\n        listItem = item.create();\n      }\n      if (entry === listItem) {\n        // It's already the same item, do nothing\n      } else {\n        if ($type.isObject(entry)) {\n          // If the list item is BaseObject, we just need to let it\n          // deal if its own config\n          if (listItem instanceof BaseObject) {\n            listItem.config = entry;\n          } else if ($type.isObject(listItem) && $type.isObject(entry)) {\n            $object.copyAllProperties(entry, listItem);\n          } else {\n            item.setIndex(item.indexOf(listItem), entry);\n          }\n        }\n      }\n    });\n    // Truncate the list if it contains less items than the config\n    // array\n    while (configValue.length > item.length) {\n      item.pop();\n    }\n  };\n  /**\r\n   * Processes [[OrdererListTemplate]] or [[SortedListTemplate]].\r\n   *\r\n   * @param configValue  Config value\r\n   * @param item         Item\r\n   */\n  BaseObject.prototype.processOrderedTemplate = function (configValue, item) {\n    var _this = this;\n    $array.each(configValue, function (entry, index) {\n      var type = _this.getConfigEntryType(entry);\n      var listItem;\n      if (type) {\n        listItem = item.create(type);\n      } else {\n        listItem = item.create();\n      }\n      if ($type.isObject(entry)) {\n        // If the list item is BaseObject, we just need to let it\n        // deal if its own config\n        if (listItem instanceof BaseObject) {\n          listItem.config = entry;\n        } else if ($type.isObject(listItem) && $type.isObject(entry)) {\n          $object.copyAllProperties(entry, listItem);\n        } else {\n          item.insert(entry);\n        }\n      }\n    });\n  };\n  /**\r\n   * Processes [[List]].\r\n   *\r\n   * @param configValue  Config value\r\n   * @param item         Item\r\n   */\n  BaseObject.prototype.processList = function (configValue, item, parent) {\n    var _this = this;\n    // Convert to array if necessary\n    if (!$type.isArray(configValue)) {\n      configValue = [configValue];\n    }\n    // It's an array\n    // Create a list item for entry\n    var itemCount = item.length;\n    var extraCount = 0;\n    $array.each(configValue, function (entry, index) {\n      if ($type.isObject(entry)) {\n        // An object.\n        //\n        // Let's see if we can instantiate a class out of it, or we need\n        // to push it into list as it is.\n        //\n        // If there are items already at the specified index in the list,\n        // apply properties rather than create a new one.\n        var listItem = void 0;\n        if (index < itemCount && !entry[\"forceCreate\"]) {\n          listItem = item.getIndex(index);\n        } else if (entry instanceof BaseObject) {\n          // Item is already a BaseObject, no need to process it further\n          item.push(entry);\n          return;\n        } else {\n          extraCount++;\n          listItem = _this.createEntryInstance(entry);\n          if (parent) {\n            listItem.parent = parent;\n          } else {\n            item.push(listItem);\n          }\n        }\n        // If the list item is BaseObject, we just need to let it\n        // deal if its own config\n        if (listItem instanceof BaseObject) {\n          listItem.config = entry;\n        } else if ($type.isObject(listItem) && $type.isObject(entry)) {\n          $object.copyAllProperties(entry, listItem);\n        }\n      } else {\n        // Basic value.\n        // Just push it into list, or override existing value\n        if (item.hasIndex(index)) {\n          item.setIndex(index, entry);\n        } else {\n          item.push(entry);\n        }\n      }\n    });\n    // Truncate the list if it contains less items than the config\n    // array\n    while (!parent && configValue.length + extraCount < item.length) {\n      item.pop();\n    }\n  };\n  /**\r\n   * This function is used to sort element's JSON config properties, so that\r\n   * some properties that absolutely need to be processed last, can be put at\r\n   * the end.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param a  Element 1\r\n   * @param b  Element 2\r\n   * @return Sorting number\r\n   */\n  BaseObject.prototype.configOrder = function (a, b) {\n    if (a == b) {\n      return 0;\n    }\n    // Language must come first, so it's all set up when the rest of the\n    // elements are being instantiated\n    else if (a == \"language\") {\n      return -1;\n    } else if (b == \"language\") {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n  /**\r\n   * Checks if field should be just assigned as is, without any checking when\r\n   * processing JSON config.\r\n   *\r\n   * Extending functions can override this function to do their own checks.\r\n   *\r\n   * @param field  Field name\r\n   * @return Assign as is?\r\n   */\n  BaseObject.prototype.asIs = function (field) {\n    return $array.indexOf([\"locale\"], field) != -1;\n  };\n  /**\r\n   * Checks if field needs to be converted to function, if it is specified\r\n   * as string.\r\n   *\r\n   * @param field  Field name\r\n   * @return Assign as function?\r\n   */\n  BaseObject.prototype.asFunction = function (field) {\n    return false;\n  };\n  /**\r\n   * Creates a relevant class instance if such class definition exists.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param className  Class name\r\n   * @return Instance\r\n   */\n  BaseObject.prototype.createClassInstance = function (className) {\n    if ($type.hasValue(registry.registeredClasses[className])) {\n      return new registry.registeredClasses[className]();\n    } else {\n      throw Error(\"Invalid type: \\\"\" + className + \"\\\".\");\n    }\n  };\n  /**\r\n   * Creates a class instance for a config entry using it's type. (as set in\r\n   * `type` property)\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config part\r\n   * @return Instance\r\n   */\n  BaseObject.prototype.createEntryInstance = function (config) {\n    var res;\n    if ($type.hasValue(config[\"type\"])) {\n      res = this.createClassInstance(config[\"type\"]);\n    }\n    if (!res) {\n      return config;\n    }\n    return res;\n  };\n  /**\r\n   * Determines config object type.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config part\r\n   * @return Type\r\n   */\n  BaseObject.prototype.getConfigEntryType = function (config) {\n    if ($type.hasValue(config[\"type\"])) {\n      if ($type.hasValue(registry.registeredClasses[config[\"type\"]])) {\n        return registry.registeredClasses[config[\"type\"]];\n      } else {\n        throw Error(\"Invalid type: \\\"\" + config[\"type\"] + \"\\\".\");\n      }\n    }\n    return;\n  };\n  /**\r\n   * Checks if this element has a property.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param prop  Property name\r\n   * @return Has property?\r\n   */\n  BaseObject.prototype.hasProperty = function (prop) {\n    return prop in this ? true : false;\n  };\n  /**\r\n   * Checkes whether JSON key is a reserved keyword.\r\n   *\r\n   * @param key  Key\r\n   * @return Reserved\r\n   */\n  BaseObject.prototype.isReserved = function (key) {\n    return [\"type\", \"forceCreate\"].indexOf(key) !== -1;\n  };\n  Object.defineProperty(BaseObject.prototype, \"processingErrors\", {\n    /**\r\n     * A list of errors that happened during JSON processing.\r\n     *\r\n     * @return Errors\r\n     */\n    get: function () {\n      if (!this._processingErrors) {\n        this._processingErrors = [];\n      }\n      return this._processingErrors;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return BaseObject;\n}();\nexport { BaseObject };\n;\n/**\r\n * A version of [[BaseObject]] with events properties and methods.\r\n * Classes that use [[EventDispatcher]] should extend this instead of\r\n * [[BaseObject]] directly.\r\n */\nvar BaseObjectEvents = /** @class */function (_super) {\n  __extends(BaseObjectEvents, _super);\n  /**\r\n   * Constructor\r\n   */\n  function BaseObjectEvents() {\n    var _this = _super.call(this) || this;\n    _this.className = \"BaseObjectEvents\";\n    return _this;\n  }\n  Object.defineProperty(BaseObjectEvents.prototype, \"events\", {\n    /**\r\n     * An [[EventDispatcher]] instance\r\n     */\n    get: function () {\n      if (!this._eventDispatcher) {\n        this._eventDispatcher = new EventDispatcher();\n        this._disposers.push(this._eventDispatcher);\n      }\n      return this._eventDispatcher;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  //public set events(value:EventDispatcher<AMEvent<this, this[\"_events\"]>>){\n  //\tthis._eventDispatcher = value;\n  //}\n  /**\r\n   * Dispatches an event using own event dispatcher. Will automatically\r\n   * populate event data object with event type and target (this element).\r\n   * It also checks if there are any handlers registered for this sepecific\r\n   * event.\r\n   *\r\n   * @param eventType Event type (name)\r\n   * @param data      Data to pass into event handler(s)\r\n   */\n  BaseObjectEvents.prototype.dispatch = function (eventType, data) {\n    // @todo Implement proper type check\n    if (this._eventDispatcher) {\n      if (this.events.isEnabled(eventType)) {\n        if (data) {\n          data.type = eventType;\n          data.target = data.target || this;\n          this.events.dispatch(eventType, {\n            type: eventType,\n            target: this\n          });\n        } else {\n          this.events.dispatch(eventType, {\n            type: eventType,\n            target: this\n          });\n        }\n      }\n    }\n  };\n  /**\r\n   * Works like `dispatch`, except event is triggered immediately, without\r\n   * waiting for the next frame cycle.\r\n   *\r\n   * @param eventType Event type (name)\r\n   * @param data      Data to pass into event handler(s)\r\n   */\n  BaseObjectEvents.prototype.dispatchImmediately = function (eventType, data) {\n    // @todo Implement proper type check\n    if (this._eventDispatcher) {\n      if (this.events.isEnabled(eventType)) {\n        if (data) {\n          data.type = eventType;\n          data.target = data.target || this;\n          this.events.dispatchImmediately(eventType, data);\n        } else {\n          this.events.dispatchImmediately(eventType, {\n            type: eventType,\n            target: this\n          });\n        }\n      }\n    }\n  };\n  /**\r\n   * Copies all parameters from another [[Sprite]].\r\n   *\r\n   * @param source Source object\r\n   */\n  BaseObjectEvents.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    if (source._eventDispatcher) {\n      this.events.copyFrom(source._eventDispatcher);\n    }\n  };\n  return BaseObjectEvents;\n}(BaseObject);\nexport { BaseObjectEvents };","map":{"version":3,"names":["__extends","List","ListTemplate","OrderedListTemplate","SortedListTemplate","Dictionary","DictionaryTemplate","Disposer","EventDispatcher","Adapter","Color","color","Percent","percent","registry","cache","$array","$object","$type","BaseObject","_disposed","_disposers","className","prototype","debug","Object","defineProperty","get","_uid","getUniqueId","map","setKey","enumerable","configurable","_id","set","value","_map","_delayedMap","addDelayedMap","property","id","delayedMap","hasKey","list","getKey","push","target","processDelayedMap","_this","each","target_1","item","removeKey","applyTheme","themes","getCurrentThemes","theme","index","_themes","isDisposed","dispose","a","length","disposer","shift","clearCache","clonedFrom","clones","removeValue","uid","addDisposer","removeDispose","indexOf","splice","clone","cloneId","newObject","constructor","copyFrom","_clones","object","_className","setCache","key","ttl","getCache","undefined","clear","setTimeout","fn","delay","clearTimeout","setInterval","config","processConfig","e","raiseCriticalError","eachOrdered","configKey","configValue","call","hasProperty","item_1","isObject","hasValue","asIs","createClassInstance","processAdapters","processEvents","isString","window","parent_1","asFunction","registeredClasses","Error","isArray","processListTemplate","processOrderedTemplate","template","templateValue","entryKey","entryValue","listItem","processDictionaryTemplate","processList","maybeColorOrPercent","values","processDictionary","copyAllProperties","isReserved","configOrder","processingErrors","errors","join","_processingErrors","match","toNumber","entry","add","callback","priority","has","on","type","create","getConfigEntryType","hasIndex","getIndex","setIndex","pop","insert","parent","itemCount","extraCount","createEntryInstance","b","field","res","prop","BaseObjectEvents","_super","_eventDispatcher","dispatch","eventType","data","events","isEnabled","dispatchImmediately","source"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/Base.js"],"sourcesContent":["/**\r\n * Base functionality\r\n*/\r\nimport { __extends } from \"tslib\";\r\nimport { List, ListTemplate } from \"./utils/List\";\r\nimport { OrderedListTemplate, SortedListTemplate } from \"./utils/SortedList\";\r\nimport { Dictionary, DictionaryTemplate } from \"./utils/Dictionary\";\r\nimport { Disposer } from \"./utils/Disposer\";\r\nimport { EventDispatcher } from \"./utils/EventDispatcher\";\r\nimport { Adapter } from \"./utils/Adapter\";\r\nimport { Color, color } from \"./utils/Color\";\r\nimport { Percent, percent } from \"./utils/Percent\";\r\nimport { registry } from \"./Registry\";\r\nimport { cache } from \"./utils/Cache\";\r\nimport * as $array from \"./utils/Array\";\r\nimport * as $object from \"./utils/Object\";\r\nimport * as $type from \"./utils/Type\";\r\n//import * as $debug from \"./utils/Debug\";\r\n/**\r\n * Provides base functionality for all derivative objects, like generating ids,\r\n * handling cache, etc.\r\n */\r\nvar BaseObject = /** @class */ (function () {\r\n    //protected _classes: { [index: string]: any } = {};\r\n    /**\r\n     * Constructor\r\n     * * Sets class name\r\n     */\r\n    function BaseObject() {\r\n        /**\r\n         * Indicates if this object has already been deleted. Any\r\n         * destruction/disposal code should take this into account when deciding\r\n         * wheter to run potentially costly disposal operations if they already have\r\n         * been run.\r\n         */\r\n        this._disposed = false;\r\n        /**\r\n         * List of IDisposer which will be disposed when the BaseObject is disposed.\r\n         */\r\n        this._disposers = [];\r\n        this.className = \"BaseObject\";\r\n        //this.debug();\r\n    }\r\n    BaseObject.prototype.debug = function () {\r\n        //$debug.debug(this);\r\n    };\r\n    Object.defineProperty(BaseObject.prototype, \"uid\", {\r\n        /**\r\n         * Returns object's internal unique ID.\r\n         *\r\n         * @return Unique ID\r\n         */\r\n        get: function () {\r\n            if (!this._uid) {\r\n                this._uid = registry.getUniqueId();\r\n                registry.map.setKey(this._uid, this);\r\n            }\r\n            return this._uid;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BaseObject.prototype, \"id\", {\r\n        /**\r\n         * @return Id\r\n         */\r\n        get: function () {\r\n            return this._id;\r\n        },\r\n        /**\r\n         * Sets the user-defined id of the element.\r\n         *\r\n         * @param value Id\r\n         */\r\n        set: function (value) {\r\n            //registry.map.setKey(value, this); // registry.map only stores by uid\r\n            this._id = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BaseObject.prototype, \"map\", {\r\n        /**\r\n         * Returns a universal collection for mapping ids with objects.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return Map collection\r\n         */\r\n        get: function () {\r\n            if (!this._map) {\r\n                this._map = new Dictionary();\r\n            }\r\n            return this._map;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BaseObject.prototype, \"delayedMap\", {\r\n        /**\r\n         * Returns mapping for objects referenced by id in JSON config that are not yet\r\n         * available at processing time.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return Map collection\r\n         */\r\n        get: function () {\r\n            if (!this._delayedMap) {\r\n                this._delayedMap = new Dictionary();\r\n            }\r\n            return this._delayedMap;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Logs an id and property of the target element that is not yet available\r\n     * for later assignment.\r\n     *\r\n     * @ignore\r\n     * @param  property  Property to set\r\n     * @param  id        ID of the target element\r\n     */\r\n    BaseObject.prototype.addDelayedMap = function (property, id) {\r\n        var map = this.delayedMap;\r\n        if (!map.hasKey(id)) {\r\n            map.setKey(id, []);\r\n        }\r\n        var list = map.getKey(id);\r\n        list.push({\r\n            property: property,\r\n            target: this\r\n        });\r\n    };\r\n    /**\r\n     * Processes delayed JSON config items.\r\n     *\r\n     * @ignore\r\n     */\r\n    BaseObject.prototype.processDelayedMap = function () {\r\n        var _this = this;\r\n        this.delayedMap.each(function (id, list) {\r\n            if (_this.map.hasKey(id)) {\r\n                var target_1 = _this.map.getKey(id);\r\n                $array.each(list, function (item) {\r\n                    item.target[item.property] = target_1;\r\n                });\r\n                _this.delayedMap.removeKey(id);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Applies properties from all assigned themes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    BaseObject.prototype.applyTheme = function () {\r\n        var _this = this;\r\n        // TODO is this needed ?\r\n        if (registry) {\r\n            var themes = this.getCurrentThemes();\r\n            // TODO is this needed ?\r\n            if (themes) {\r\n                $array.each(themes, function (theme, index) {\r\n                    theme(_this);\r\n                });\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(BaseObject.prototype, \"themes\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return An array of themes\r\n         */\r\n        get: function () {\r\n            return this._themes;\r\n        },\r\n        /**\r\n         * A list of themes to be used for this element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value An array of themes\r\n         */\r\n        set: function (value) {\r\n            this._themes = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a list of themes that should be applied to this element. It could\r\n     * either be a list of themes set explicitly on this element, or system-wide.\r\n     *\r\n     * @return List of themes\r\n     */\r\n    BaseObject.prototype.getCurrentThemes = function () {\r\n        return this.themes || registry.themes;\r\n    };\r\n    /**\r\n     * Returns if this object has been already been disposed.\r\n     *\r\n     * @return Is disposed?\r\n     */\r\n    BaseObject.prototype.isDisposed = function () {\r\n        return this._disposed;\r\n    };\r\n    /**\r\n     * Destroys this object and all related data.\r\n     */\r\n    BaseObject.prototype.dispose = function () {\r\n        if (!this._disposed) {\r\n            this._disposed = true;\r\n            var a = this._disposers;\r\n            this._disposers = null;\r\n            while (a.length !== 0) {\r\n                var disposer = a.shift();\r\n                disposer.dispose();\r\n            }\r\n            // Clear cache\r\n            this.clearCache();\r\n            // remove from clones list\r\n            if (this.clonedFrom) {\r\n                this.clonedFrom.clones.removeValue(this);\r\n            }\r\n            var uid = this._uid;\r\n            if (uid != null) {\r\n                registry.map.removeKey(uid);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Adds an IDisposer, which will be disposed when this object is disposed.\r\n     *\r\n     * @param target Object to dispose\r\n     * @ignore Exclude from docs\r\n     */\r\n    BaseObject.prototype.addDisposer = function (target) {\r\n        this._disposers.push(target);\r\n    };\r\n    /**\r\n     * Disposes disposable object and removes it from `_disposers`.\r\n     *\r\n     * @param target Object to dispose\r\n     * @ignore Exclude from docs\r\n     */\r\n    BaseObject.prototype.removeDispose = function (target) {\r\n        //if(target){\r\n        if (!this._disposed) {\r\n            var index = $array.indexOf(this._disposers, target);\r\n            if (index > -1) {\r\n                this._disposers.splice(index, 1);\r\n            }\r\n        }\r\n        target.dispose();\r\n        //}\r\n    };\r\n    /**\r\n     * Makes a copy of this object and returns the clone. Try to avoid cloning complex objects like chart, create new instances if you need them.\r\n     *\r\n     * @param cloneId  An id to use for clone (if not set a unique id will be generated)\r\n     * @returns Clone\r\n     */\r\n    BaseObject.prototype.clone = function (cloneId) {\r\n        if (!cloneId) {\r\n            cloneId = \"clone-\" + registry.getUniqueId();\r\n        }\r\n        var newObject = new this.constructor();\r\n        newObject.cloneId = cloneId;\r\n        newObject.copyFrom(this);\r\n        // add to clones list\r\n        // this.clones.push(newObject); // moved this to copyFrom\r\n        return newObject;\r\n    };\r\n    Object.defineProperty(BaseObject.prototype, \"clones\", {\r\n        /**\r\n         * Returns a collection of object's clones.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return Clones\r\n         */\r\n        get: function () {\r\n            if (!this._clones) {\r\n                this._clones = new List();\r\n            }\r\n            return this._clones;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies all properties and related data from different element.\r\n     *\r\n     * @param object Source element\r\n     */\r\n    BaseObject.prototype.copyFrom = function (object) {\r\n        object.clones.push(this); // do not moveValue, as it is expensive! even if there will be several items in clones list, it's not that bad.\r\n        this.clonedFrom = object;\r\n    };\r\n    Object.defineProperty(BaseObject.prototype, \"className\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Class name\r\n         */\r\n        get: function () {\r\n            return this._className;\r\n        },\r\n        /**\r\n         * Element's class name. (a class that was used to instantiate the element)\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value  Class name\r\n         */\r\n        set: function (value) {\r\n            this._className = value;\r\n            /*if (registry) {\r\n                registry.registeredClasses[value] = typeof this;\r\n            }*/\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Caches value in object's cache.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param key    Key\r\n     * @param value  Value\r\n     * @param ttl    TTL in seconds\r\n     */\r\n    BaseObject.prototype.setCache = function (key, value, ttl) {\r\n        cache.set(this.uid, key, value, ttl);\r\n    };\r\n    /**\r\n     * Retrieves cached value.\r\n     *\r\n     * If optional second padarameter is specified, it will return that value\r\n     * if cache is not available or is expired.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param key    Key\r\n     * @param value  Value to return if cache is not available\r\n     * @return Value\r\n     */\r\n    BaseObject.prototype.getCache = function (key, value) {\r\n        if (value === void 0) { value = undefined; }\r\n        return cache.get(this.uid, key, value);\r\n    };\r\n    /**\r\n     * Clears object's local cache.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    BaseObject.prototype.clearCache = function () {\r\n        cache.clear(this.uid);\r\n    };\r\n    /**\r\n     * Creates [[Disposer]] for `setTimeout` function call. This ensures that all\r\n     * timeouts created by the object will be cleared when object itself is\r\n     * disposed.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param fn     Callback function\r\n     * @param delay  Timeout (ms)\r\n     * @return Disposer for timeout\r\n     */\r\n    BaseObject.prototype.setTimeout = function (fn, delay) {\r\n        var _this = this;\r\n        var id = setTimeout(function () {\r\n            _this.removeDispose(disposer);\r\n            fn();\r\n        }, delay);\r\n        var disposer = new Disposer(function () {\r\n            clearTimeout(id);\r\n        });\r\n        this._disposers.push(disposer);\r\n        return disposer;\r\n    };\r\n    /**\r\n     * Creates [[Disposer]] for `setInterval` function call. This ensures that all\r\n     * timeouts created by the object will be cleared when object itself is\r\n     * disposed.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param fn     Callback function\r\n     * @param delay  Timeout (ms)\r\n     * @return Disposer for timeout\r\n     */\r\n    BaseObject.prototype.setInterval = function (fn, delay) {\r\n        var _this = this;\r\n        var id = setInterval(function () {\r\n            _this.removeDispose(disposer);\r\n            fn();\r\n        }, delay);\r\n        var disposer = new Disposer(function () {\r\n            clearTimeout(id);\r\n        });\r\n        this._disposers.push(disposer);\r\n        return disposer;\r\n    };\r\n    Object.defineProperty(BaseObject.prototype, \"config\", {\r\n        /**\r\n         * ==========================================================================\r\n         * JSON-BASED CONFIG PROCESSING\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Use this property to set JSON-based config. When set, triggers processing\r\n         * routine, which will go through all properties, and try to apply values,\r\n         * create instances, etc.\r\n         *\r\n         * Use this with caution, as it is a time-consuming process. It's used for\r\n         * initialchart setup only, not routine operations.\r\n         *\r\n         * @param json JSON config\r\n         */\r\n        set: function (config) {\r\n            try {\r\n                this.processConfig(config);\r\n            }\r\n            catch (e) {\r\n                /*if (this instanceof Sprite) {\r\n                    this.raiseCriticalError(e);\r\n                }*/\r\n                this.raiseCriticalError(e);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Processes the JSON config.\r\n     *\r\n     * @param json  JSON config\r\n     * @ignore Exclude from docs\r\n     */\r\n    BaseObject.prototype.processConfig = function (config) {\r\n        var _this = this;\r\n        if (!config) {\r\n            return;\r\n        }\r\n        // Get target\r\n        var target = this;\r\n        // Iterate through all of the items\r\n        $object.eachOrdered(config, function (configKey, value) {\r\n            var configValue = value;\r\n            // Is this a callback?\r\n            if (configKey == \"callback\" && typeof value == \"function\") {\r\n                value.call(target);\r\n            }\r\n            // Check if there's a property in target\r\n            if (_this.hasProperty(configKey)) {\r\n                var item_1;\r\n                // Do we have instructions to create an object?\r\n                // We create a new object if \"type\" key is set, but only if the\r\n                // target object is of different type.\r\n                if ($type.isObject(configValue)\r\n                    && $type.hasValue(configValue[\"type\"])\r\n                    && (!$type.isObject(target[configKey])\r\n                        || !$type.hasValue(target[configKey].className)\r\n                        || configValue[\"forceCreate\"]\r\n                        || target[configKey].className != configValue[\"type\"])\r\n                    && !_this.asIs(configKey)) {\r\n                    item_1 = _this.createClassInstance(configValue[\"type\"]);\r\n                    // Create new instance\r\n                    if (item_1) {\r\n                        target[configKey] = item_1;\r\n                    }\r\n                    else {\r\n                        item_1 = target[configKey];\r\n                    }\r\n                }\r\n                else {\r\n                    // Get item from the object\r\n                    item_1 = target[configKey];\r\n                }\r\n                /**\r\n                 * It is...\r\n                 * --------------------------------------------------------------------\r\n                 */\r\n                if (item_1 instanceof Adapter) {\r\n                    // ... an Adapter, try to add handlers to it\r\n                    // ------------------------------------------------------------------\r\n                    _this.processAdapters(item_1, configValue);\r\n                }\r\n                else if (item_1 instanceof EventDispatcher) {\r\n                    // ... an EventDispatcher, try to add handlers to it\r\n                    // ------------------------------------------------------------------\r\n                    _this.processEvents(item_1, configValue);\r\n                }\r\n                else if (configKey == \"locale\" && $type.isString(configValue)) {\r\n                    // ... a locale specified as string, e.g. \"fr_FR\"\r\n                    // ------------------------------------------------------------------\r\n                    if (window[\"am4lang_\" + configValue]) {\r\n                        target[configKey] = window[\"am4lang_\" + configValue];\r\n                    }\r\n                }\r\n                else if (configKey == \"parent\" && $type.isString(configValue)) {\r\n                    // ... a parent referred via its it\r\n                    // ------------------------------------------------------------------\r\n                    var parent_1 = _this.map.getKey(configValue);\r\n                    if (parent_1) {\r\n                        target[configKey] = parent_1;\r\n                    }\r\n                    else {\r\n                        _this.addDelayedMap(\"parent\", configValue);\r\n                    }\r\n                }\r\n                else if (_this.asIs(configKey)) {\r\n                    // ... a special field, just set it to new value\r\n                    // ------------------------------------------------------------------\r\n                    // (no need to add each indvidual item)\r\n                    target[configKey] = configValue;\r\n                }\r\n                else if (_this.asFunction(configKey) && $type.isString(configValue)) {\r\n                    // ... a field indicating function name to look for in registry\r\n                    // ------------------------------------------------------------------\r\n                    if ($type.hasValue(registry.registeredClasses[configValue])) {\r\n                        target[configKey] = registry.registeredClasses[configValue];\r\n                    }\r\n                    else {\r\n                        throw Error(\"Invalid easing function: \" + configValue);\r\n                    }\r\n                }\r\n                else if (configValue instanceof BaseObject) {\r\n                    // ... a BaseObject object, we just going to use it as it is\r\n                    // ------------------------------------------------------------------\r\n                    target[configKey] = configValue;\r\n                }\r\n                else if (item_1 instanceof BaseObject) {\r\n                    // ... another child BaseObject\r\n                    // ------------------------------------------------------------------\r\n                    // Let's just pass in config part in and let itself deal with it\r\n                    item_1.config = configValue;\r\n                }\r\n                else if (item_1 instanceof ListTemplate || item_1 instanceof OrderedListTemplate || item_1 instanceof SortedListTemplate) {\r\n                    // ... a list with template\r\n                    // ------------------------------------------------------------------\r\n                    // Let's see what we can do with it\r\n                    if ($type.isArray(configValue)) {\r\n                        // It's an array.\r\n                        // Create a list item for entry, or try to apply properties to an\r\n                        // existing entry if possible and it is present.\r\n                        if (item_1 instanceof ListTemplate) {\r\n                            _this.processListTemplate(configValue, item_1);\r\n                        }\r\n                        else {\r\n                            _this.processOrderedTemplate(configValue, item_1);\r\n                        }\r\n                    }\r\n                    else if ($type.isObject(configValue)) {\r\n                        // It's a single oject.\r\n                        // Treat it as a template.\r\n                        if (configValue instanceof BaseObject) {\r\n                            // Item is already a BaseObject, no need to process it further\r\n                            item_1.template = configValue;\r\n                        }\r\n                        else {\r\n                            // Now let's find out if the whole object if a template, or we\r\n                            // need to get it from `template` key\r\n                            var templateValue = void 0;\r\n                            if ($type.hasValue(configValue.template)) {\r\n                                templateValue = configValue.template;\r\n                            }\r\n                            else {\r\n                                templateValue = configValue;\r\n                            }\r\n                            if (item_1.template instanceof BaseObject) {\r\n                                // Template is a BaseObject so we will just let its config\r\n                                // deal with the configuration\r\n                                item_1.template.config = templateValue;\r\n                            }\r\n                            else {\r\n                                $object.each(templateValue, function (entryKey, entryValue) {\r\n                                    var listItem = item_1.template[entryKey];\r\n                                    if (listItem instanceof Adapter) {\r\n                                        _this.processAdapters(listItem, entryValue);\r\n                                    }\r\n                                    else if (listItem instanceof EventDispatcher) {\r\n                                        _this.processEvents(listItem, entryValue);\r\n                                    }\r\n                                    else if (listItem instanceof DictionaryTemplate) {\r\n                                        _this.processDictionaryTemplate(listItem, entryValue);\r\n                                    }\r\n                                    else if (item_1.template[entryKey] instanceof BaseObject) {\r\n                                        // Template is a BaseObject. Let it deal with its own config.\r\n                                        item_1.template[entryKey].config = entryValue;\r\n                                    }\r\n                                    else if ($type.isObject(entryValue) && $type.hasValue(entryValue[\"type\"])) {\r\n                                        listItem = _this.createClassInstance(entryValue[\"type\"]);\r\n                                        if (listItem) {\r\n                                            if (listItem instanceof BaseObject) {\r\n                                                listItem.config = entryValue;\r\n                                            }\r\n                                            item_1.template[entryKey] = listItem;\r\n                                        }\r\n                                        else {\r\n                                            item_1.template[entryKey] = entryValue;\r\n                                        }\r\n                                    }\r\n                                    else if (listItem instanceof List) {\r\n                                        // It's List, process it\r\n                                        _this.processList(entryValue, listItem);\r\n                                    }\r\n                                    else {\r\n                                        // Aything else. Just assing and be done with it.\r\n                                        item_1.template[entryKey] = _this.maybeColorOrPercent(entryValue);\r\n                                    }\r\n                                });\r\n                            }\r\n                            // Check maybe there are `values` to insert\r\n                            if ($type.hasValue(configValue.values)) {\r\n                                if (item_1 instanceof ListTemplate) {\r\n                                    _this.processListTemplate(configValue.values, item_1);\r\n                                }\r\n                                else {\r\n                                    _this.processOrderedTemplate(configValue.values, item_1);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        // Something else?\r\n                        // Not sure what to do with it on a list - ignore\r\n                    }\r\n                }\r\n                else if (item_1 instanceof List) {\r\n                    // ... a list\r\n                    // ------------------------------------------------------------------\r\n                    if (configKey == \"children\") {\r\n                        _this.processList(configValue, item_1, _this);\r\n                    }\r\n                    else {\r\n                        _this.processList(configValue, item_1);\r\n                    }\r\n                }\r\n                else if (item_1 instanceof DictionaryTemplate) {\r\n                    // ... a dictionary with template\r\n                    // ------------------------------------------------------------------\r\n                    _this.processDictionaryTemplate(item_1, configValue);\r\n                }\r\n                else if (item_1 instanceof Dictionary) {\r\n                    // ... a dictionary\r\n                    // ------------------------------------------------------------------\r\n                    _this.processDictionary(item_1, configValue);\r\n                }\r\n                else if (item_1 instanceof Color || item_1 instanceof Percent) {\r\n                    // ... it's a Color or Percent\r\n                    // ------------------------------------------------------------------\r\n                    target[configKey] = _this.maybeColorOrPercent(configValue);\r\n                }\r\n                else if ($type.isObject(item_1) && $type.isObject(configValue)) {\r\n                    // ... a regular object\r\n                    // ------------------------------------------------------------------\r\n                    $object.copyAllProperties(configValue, item_1);\r\n                }\r\n                else {\r\n                    // ... something else - probably a simple property or object\r\n                    // ------------------------------------------------------------------\r\n                    // Maybe convert to `Percent` or `Color`?\r\n                    configValue = _this.maybeColorOrPercent(configValue);\r\n                    // Assign\r\n                    target[configKey] = configValue;\r\n                }\r\n            }\r\n            else if (!_this.isReserved(configKey)) {\r\n                // Doesn't have property set. But we're going to assume JSON config\r\n                // creator knows what he/she is doing and set it anyway.\r\n                target[configKey] = configValue;\r\n            }\r\n        }, this.configOrder);\r\n        // Any errors?\r\n        if (this.processingErrors.length) {\r\n            var errors = this.processingErrors.join(\"\\n\");\r\n            this._processingErrors = [];\r\n            throw Error(errors);\r\n        }\r\n    };\r\n    /**\r\n     * Tries to detect if value is color or percent and converts to proper object\r\n     * if necessary.\r\n     *\r\n     * Returns the same source value if no color/percent detected\r\n     *\r\n     * @param value  Source value\r\n     * @return Converted value\r\n     */\r\n    BaseObject.prototype.maybeColorOrPercent = function (value) {\r\n        if ($type.isString(value)) {\r\n            if (value.match(/^[\\-]?[0-9.]+\\%$/)) {\r\n                return percent($type.toNumber(value));\r\n            }\r\n            else if (value.match(/^\\#[0-9abcdef]{3,}$/i)) {\r\n                return color(value);\r\n            }\r\n        }\r\n        return value;\r\n    };\r\n    BaseObject.prototype.processAdapters = function (item, config) {\r\n        var _this = this;\r\n        if ($type.isArray(config)) {\r\n            $array.each(config, function (entry, index) {\r\n                item.add(entry.key, entry.callback, entry.priority || 0, _this);\r\n            });\r\n        }\r\n        else if ($type.isObject(config)) {\r\n            $object.each(config, function (key, entry) {\r\n                if (!item.has(key, entry)) {\r\n                    item.add(key, entry);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    BaseObject.prototype.processEvents = function (item, config) {\r\n        var _this = this;\r\n        if ($type.isArray(config)) {\r\n            $array.each(config, function (entry, index) {\r\n                item.on(entry.type, entry.callback, _this);\r\n            });\r\n        }\r\n        else if ($type.isObject(config)) {\r\n            $object.each(config, function (key, entry) {\r\n                if (!item.has(key, entry)) {\r\n                    item.on(key, entry);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Processes JSON config for a [[DictionaryTemplate]] item.\r\n     *\r\n     * @todo Description\r\n     * @param item    Item\r\n     * @param config  Config\r\n     */\r\n    BaseObject.prototype.processDictionaryTemplate = function (item, config) {\r\n        // We can only process object\r\n        // Not sure what to do with other types - ignore\r\n        if ($type.isObject(config)) {\r\n            // Create an entry for each item, or override properties for\r\n            // existing one.\r\n            $object.each(config, function (entryKey, entryValue) {\r\n                var listItem;\r\n                // Get existing one, or create a new one\r\n                if (entryKey == \"template\") {\r\n                    listItem = item.template;\r\n                }\r\n                else if (item.hasKey(entryKey)) {\r\n                    listItem = item.getKey(entryKey);\r\n                }\r\n                else {\r\n                    listItem = item.create(entryKey);\r\n                }\r\n                // Set data\r\n                if (listItem instanceof BaseObject) {\r\n                    listItem.config = entryValue;\r\n                }\r\n                else if ($type.isObject(listItem) && $type.isObject(entryValue)) {\r\n                    $object.copyAllProperties(entryValue, listItem);\r\n                }\r\n                else {\r\n                    listItem.setKey(entryKey, entryValue);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Processes JSON config for a [[Dictionary]] item.\r\n     *\r\n     * @todo Description\r\n     * @param item    Item\r\n     * @param config  Config\r\n     */\r\n    BaseObject.prototype.processDictionary = function (item, config) {\r\n        // We can only process object\r\n        // Not sure what to do with other types - ignore\r\n        if ($type.isObject(config)) {\r\n            // Create an entry for each item, or override properties for\r\n            // existing one.\r\n            // @todo support for non-basic types\r\n            $object.each(config, function (entryKey, entryValue) {\r\n                item.setKey(entryKey, entryValue);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Processes [[ListTemplate]].\r\n     *\r\n     * @param configValue  Config value\r\n     * @param item         Item\r\n     */\r\n    BaseObject.prototype.processListTemplate = function (configValue, item) {\r\n        var _this = this;\r\n        $array.each(configValue, function (entry, index) {\r\n            var type = _this.getConfigEntryType(entry);\r\n            var listItem;\r\n            if (item.hasIndex(index) && !entry[\"forceCreate\"]) {\r\n                listItem = item.getIndex(index);\r\n            }\r\n            else if (entry instanceof BaseObject) {\r\n                // Item is already a BaseObject, no need to process it further\r\n                item.push(entry);\r\n                return;\r\n            }\r\n            else if (type) {\r\n                listItem = item.create(type);\r\n            }\r\n            else {\r\n                listItem = item.create();\r\n            }\r\n            if (entry === listItem) {\r\n                // It's already the same item, do nothing\r\n            }\r\n            else {\r\n                if ($type.isObject(entry)) {\r\n                    // If the list item is BaseObject, we just need to let it\r\n                    // deal if its own config\r\n                    if (listItem instanceof BaseObject) {\r\n                        listItem.config = entry;\r\n                    }\r\n                    else if ($type.isObject(listItem) && $type.isObject(entry)) {\r\n                        $object.copyAllProperties(entry, listItem);\r\n                    }\r\n                    else {\r\n                        item.setIndex(item.indexOf(listItem), entry);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        // Truncate the list if it contains less items than the config\r\n        // array\r\n        while (configValue.length > item.length) {\r\n            item.pop();\r\n        }\r\n    };\r\n    /**\r\n     * Processes [[OrdererListTemplate]] or [[SortedListTemplate]].\r\n     *\r\n     * @param configValue  Config value\r\n     * @param item         Item\r\n     */\r\n    BaseObject.prototype.processOrderedTemplate = function (configValue, item) {\r\n        var _this = this;\r\n        $array.each(configValue, function (entry, index) {\r\n            var type = _this.getConfigEntryType(entry);\r\n            var listItem;\r\n            if (type) {\r\n                listItem = item.create(type);\r\n            }\r\n            else {\r\n                listItem = item.create();\r\n            }\r\n            if ($type.isObject(entry)) {\r\n                // If the list item is BaseObject, we just need to let it\r\n                // deal if its own config\r\n                if (listItem instanceof BaseObject) {\r\n                    listItem.config = entry;\r\n                }\r\n                else if ($type.isObject(listItem) && $type.isObject(entry)) {\r\n                    $object.copyAllProperties(entry, listItem);\r\n                }\r\n                else {\r\n                    item.insert(entry);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Processes [[List]].\r\n     *\r\n     * @param configValue  Config value\r\n     * @param item         Item\r\n     */\r\n    BaseObject.prototype.processList = function (configValue, item, parent) {\r\n        var _this = this;\r\n        // Convert to array if necessary\r\n        if (!$type.isArray(configValue)) {\r\n            configValue = [configValue];\r\n        }\r\n        // It's an array\r\n        // Create a list item for entry\r\n        var itemCount = item.length;\r\n        var extraCount = 0;\r\n        $array.each(configValue, function (entry, index) {\r\n            if ($type.isObject(entry)) {\r\n                // An object.\r\n                //\r\n                // Let's see if we can instantiate a class out of it, or we need\r\n                // to push it into list as it is.\r\n                //\r\n                // If there are items already at the specified index in the list,\r\n                // apply properties rather than create a new one.\r\n                var listItem = void 0;\r\n                if ((index < itemCount) && !entry[\"forceCreate\"]) {\r\n                    listItem = item.getIndex(index);\r\n                }\r\n                else if (entry instanceof BaseObject) {\r\n                    // Item is already a BaseObject, no need to process it further\r\n                    item.push(entry);\r\n                    return;\r\n                }\r\n                else {\r\n                    extraCount++;\r\n                    listItem = _this.createEntryInstance(entry);\r\n                    if (parent) {\r\n                        listItem.parent = parent;\r\n                    }\r\n                    else {\r\n                        item.push(listItem);\r\n                    }\r\n                }\r\n                // If the list item is BaseObject, we just need to let it\r\n                // deal if its own config\r\n                if (listItem instanceof BaseObject) {\r\n                    listItem.config = entry;\r\n                }\r\n                else if ($type.isObject(listItem) && $type.isObject(entry)) {\r\n                    $object.copyAllProperties(entry, listItem);\r\n                }\r\n            }\r\n            else {\r\n                // Basic value.\r\n                // Just push it into list, or override existing value\r\n                if (item.hasIndex(index)) {\r\n                    item.setIndex(index, entry);\r\n                }\r\n                else {\r\n                    item.push(entry);\r\n                }\r\n            }\r\n        });\r\n        // Truncate the list if it contains less items than the config\r\n        // array\r\n        while (!parent && (configValue.length + extraCount) < item.length) {\r\n            item.pop();\r\n        }\r\n    };\r\n    /**\r\n     * This function is used to sort element's JSON config properties, so that\r\n     * some properties that absolutely need to be processed last, can be put at\r\n     * the end.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param a  Element 1\r\n     * @param b  Element 2\r\n     * @return Sorting number\r\n     */\r\n    BaseObject.prototype.configOrder = function (a, b) {\r\n        if (a == b) {\r\n            return 0;\r\n        }\r\n        // Language must come first, so it's all set up when the rest of the\r\n        // elements are being instantiated\r\n        else if (a == \"language\") {\r\n            return -1;\r\n        }\r\n        else if (b == \"language\") {\r\n            return 1;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    };\r\n    /**\r\n     * Checks if field should be just assigned as is, without any checking when\r\n     * processing JSON config.\r\n     *\r\n     * Extending functions can override this function to do their own checks.\r\n     *\r\n     * @param field  Field name\r\n     * @return Assign as is?\r\n     */\r\n    BaseObject.prototype.asIs = function (field) {\r\n        return $array.indexOf([\"locale\"], field) != -1;\r\n    };\r\n    /**\r\n     * Checks if field needs to be converted to function, if it is specified\r\n     * as string.\r\n     *\r\n     * @param field  Field name\r\n     * @return Assign as function?\r\n     */\r\n    BaseObject.prototype.asFunction = function (field) {\r\n        return false;\r\n    };\r\n    /**\r\n     * Creates a relevant class instance if such class definition exists.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param className  Class name\r\n     * @return Instance\r\n     */\r\n    BaseObject.prototype.createClassInstance = function (className) {\r\n        if ($type.hasValue(registry.registeredClasses[className])) {\r\n            return new registry.registeredClasses[className]();\r\n        }\r\n        else {\r\n            throw Error(\"Invalid type: \\\"\" + className + \"\\\".\");\r\n        }\r\n    };\r\n    /**\r\n     * Creates a class instance for a config entry using it's type. (as set in\r\n     * `type` property)\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param config  Config part\r\n     * @return Instance\r\n     */\r\n    BaseObject.prototype.createEntryInstance = function (config) {\r\n        var res;\r\n        if ($type.hasValue(config[\"type\"])) {\r\n            res = this.createClassInstance(config[\"type\"]);\r\n        }\r\n        if (!res) {\r\n            return config;\r\n        }\r\n        return res;\r\n    };\r\n    /**\r\n     * Determines config object type.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param config  Config part\r\n     * @return Type\r\n     */\r\n    BaseObject.prototype.getConfigEntryType = function (config) {\r\n        if ($type.hasValue(config[\"type\"])) {\r\n            if ($type.hasValue(registry.registeredClasses[config[\"type\"]])) {\r\n                return registry.registeredClasses[config[\"type\"]];\r\n            }\r\n            else {\r\n                throw Error(\"Invalid type: \\\"\" + config[\"type\"] + \"\\\".\");\r\n            }\r\n        }\r\n        return;\r\n    };\r\n    /**\r\n     * Checks if this element has a property.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param prop  Property name\r\n     * @return Has property?\r\n     */\r\n    BaseObject.prototype.hasProperty = function (prop) {\r\n        return prop in this ? true : false;\r\n    };\r\n    /**\r\n     * Checkes whether JSON key is a reserved keyword.\r\n     *\r\n     * @param key  Key\r\n     * @return Reserved\r\n     */\r\n    BaseObject.prototype.isReserved = function (key) {\r\n        return [\"type\", \"forceCreate\"].indexOf(key) !== -1;\r\n    };\r\n    Object.defineProperty(BaseObject.prototype, \"processingErrors\", {\r\n        /**\r\n         * A list of errors that happened during JSON processing.\r\n         *\r\n         * @return Errors\r\n         */\r\n        get: function () {\r\n            if (!this._processingErrors) {\r\n                this._processingErrors = [];\r\n            }\r\n            return this._processingErrors;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return BaseObject;\r\n}());\r\nexport { BaseObject };\r\n;\r\n/**\r\n * A version of [[BaseObject]] with events properties and methods.\r\n * Classes that use [[EventDispatcher]] should extend this instead of\r\n * [[BaseObject]] directly.\r\n */\r\nvar BaseObjectEvents = /** @class */ (function (_super) {\r\n    __extends(BaseObjectEvents, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function BaseObjectEvents() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"BaseObjectEvents\";\r\n        return _this;\r\n    }\r\n    Object.defineProperty(BaseObjectEvents.prototype, \"events\", {\r\n        /**\r\n         * An [[EventDispatcher]] instance\r\n         */\r\n        get: function () {\r\n            if (!this._eventDispatcher) {\r\n                this._eventDispatcher = new EventDispatcher();\r\n                this._disposers.push(this._eventDispatcher);\r\n            }\r\n            return this._eventDispatcher;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    //public set events(value:EventDispatcher<AMEvent<this, this[\"_events\"]>>){\r\n    //\tthis._eventDispatcher = value;\r\n    //}\r\n    /**\r\n     * Dispatches an event using own event dispatcher. Will automatically\r\n     * populate event data object with event type and target (this element).\r\n     * It also checks if there are any handlers registered for this sepecific\r\n     * event.\r\n     *\r\n     * @param eventType Event type (name)\r\n     * @param data      Data to pass into event handler(s)\r\n     */\r\n    BaseObjectEvents.prototype.dispatch = function (eventType, data) {\r\n        // @todo Implement proper type check\r\n        if (this._eventDispatcher) {\r\n            if (this.events.isEnabled(eventType)) {\r\n                if (data) {\r\n                    data.type = eventType;\r\n                    data.target = data.target || this;\r\n                    this.events.dispatch(eventType, {\r\n                        type: eventType,\r\n                        target: this\r\n                    });\r\n                }\r\n                else {\r\n                    this.events.dispatch(eventType, {\r\n                        type: eventType,\r\n                        target: this\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Works like `dispatch`, except event is triggered immediately, without\r\n     * waiting for the next frame cycle.\r\n     *\r\n     * @param eventType Event type (name)\r\n     * @param data      Data to pass into event handler(s)\r\n     */\r\n    BaseObjectEvents.prototype.dispatchImmediately = function (eventType, data) {\r\n        // @todo Implement proper type check\r\n        if (this._eventDispatcher) {\r\n            if (this.events.isEnabled(eventType)) {\r\n                if (data) {\r\n                    data.type = eventType;\r\n                    data.target = data.target || this;\r\n                    this.events.dispatchImmediately(eventType, data);\r\n                }\r\n                else {\r\n                    this.events.dispatchImmediately(eventType, {\r\n                        type: eventType,\r\n                        target: this\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Copies all parameters from another [[Sprite]].\r\n     *\r\n     * @param source Source object\r\n     */\r\n    BaseObjectEvents.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        if (source._eventDispatcher) {\r\n            this.events.copyFrom(source._eventDispatcher);\r\n        }\r\n    };\r\n    return BaseObjectEvents;\r\n}(BaseObject));\r\nexport { BaseObjectEvents };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}