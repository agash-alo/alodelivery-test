{"ast":null,"code":"/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport * as $array from \"./Array\";\nimport * as $type from \"./Type\";\n/**\r\n * ============================================================================\r\n * UTILITY FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Returns an iterator for all entries in object.\r\n *\r\n * Can be used to safely iterate through all properties of the object.\r\n *\r\n * @param object  Source object\r\n * @returns Iterator\r\n */\nexport function entries(object) {\n  return function (push) {\n    // TODO make this more efficient ?\n    for (var key in object) {\n      if (hasKey(object, key)) {\n        if (!push([key, object[key]])) {\n          break;\n        }\n      }\n    }\n  };\n}\n/**\r\n * Returns an array of object's property names.\r\n *\r\n * @param object  Source object\r\n * @returns Object property names\r\n */\nexport function keys(object) {\n  var output = [];\n  for (var key in object) {\n    if (hasKey(object, key)) {\n      output.push(key);\n    }\n  }\n  return output;\n}\n/**\r\n * Returns an array of object's property names ordered using specific ordering\r\n * function.\r\n *\r\n * @param object  Source object\r\n * @param order   Ordering function\r\n * @returns Object property names\r\n */\nexport function keysOrdered(object, order) {\n  return keys(object).sort(order);\n}\n/**\r\n * Checks if `object` has a specific `key`.\r\n *\r\n * @param object  Source object\r\n * @param key     Property name\r\n * @returns Has key?\r\n */\nexport function hasKey(object, key) {\n  return {}.hasOwnProperty.call(object, key);\n}\n/**\r\n * Returns value of the specific `key`.\r\n *\r\n * @param object  Source object\r\n * @param key     Property name\r\n * @returns Key value\r\n */\nexport function getKey(object, key) {\n  return object[key];\n}\n/**\r\n * Iterates through all properties of the object calling `fn` for each of them.\r\n *\r\n * If return value of the function evaluates to `false` further iteration is\r\n * cancelled.\r\n *\r\n * @param object  Source object\r\n * @param fn      Callback function\r\n */\nexport function eachContinue(object, fn) {\n  for (var key in object) {\n    if (hasKey(object, key)) {\n      if (!fn(key, object[key])) {\n        break;\n      }\n    }\n  }\n}\n/**\r\n * Iterates through all properties of the object calling `fn` for each of them.\r\n *\r\n * @param object  Source object\r\n * @param fn      Callback function\r\n */\nexport function each(object, fn) {\n  eachContinue(object, function (key, value) {\n    fn(key, value);\n    return true;\n  });\n}\n/**\r\n * Orders object properties using custom `ord` function and iterates through\r\n * them calling `fn` for each of them.\r\n *\r\n * @param object  Source object\r\n * @param fn      Callback function\r\n * @param order   Ordering function\r\n */\nexport function eachOrdered(object, fn, ord) {\n  $array.each(keysOrdered(object, ord), function (key) {\n    fn(key, object[key]);\n  });\n}\n/**\r\n * Returns a copy of the object.\r\n *\r\n * @param object  Source object\r\n * @returns Copy of the object\r\n */\nexport function copy(object) {\n  return Object.assign({}, object);\n}\n/**\r\n * Merges two objects and returns a new object that contains properties from\r\n * both source objects.\r\n *\r\n * @param object1  Source object #1\r\n * @param object2  Source object #2\r\n * @returns Combined object\r\n */\nexport function merge(object1, object2) {\n  return Object.assign({}, object1, object2);\n}\n/**\r\n * Returns object clone.\r\n *\r\n * @param object  Source object\r\n * @returns       Clone\r\n */\nexport function clone(object) {\n  return JSON.parse(JSON.stringify(object));\n}\n/**\r\n * Copies a list of properties from one object to another.\r\n *\r\n * Will not copy empty properties.\r\n *\r\n * @param source  Source object\r\n * @param target    Target object\r\n * @param keys  List of keys to copy\r\n */\nexport function copyProperties(source, target, keys) {\n  $array.each(keys, function (key) {\n    if ($type.hasValue(source[key])) {\n      target[key] = source[key];\n    }\n  });\n}\n/**\r\n * Copies a list of properties from one object to another only if target does't have value of the property set.\r\n *\r\n * Will not copy empty properties.\r\n *\r\n * @param source  Source object\r\n * @param target    Target object\r\n * @param keys  List of keys to copy\r\n */\nexport function softCopyProperties(source, target, keys) {\n  $array.each(keys, function (key) {\n    if ($type.hasValue(source[key]) && !$type.hasValue(target[key])) {\n      target[key] = source[key];\n    }\n  });\n}\n/**\r\n * Copies a list of properties from one object to another.\r\n *\r\n * Will copy empty properties.\r\n *\r\n * @param source  Source object\r\n * @param target    Target object\r\n * @param keys  List of keys to copy\r\n */\nexport function forceCopyProperties(source, target, keys) {\n  $array.each(keys, function (key) {\n    target[key] = source[key];\n  });\n}\n/**\r\n * Copies all properties from one object to another.\r\n *\r\n * @param from  Source object\r\n * @param to    Target object\r\n */\nexport function copyAllProperties(from, to) {\n  copyProperties(from, to, keys(from));\n}","map":{"version":3,"names":["$array","$type","entries","object","push","key","hasKey","keys","output","keysOrdered","order","sort","hasOwnProperty","call","getKey","eachContinue","fn","each","value","eachOrdered","ord","copy","Object","assign","merge","object1","object2","clone","JSON","parse","stringify","copyProperties","source","target","hasValue","softCopyProperties","forceCopyProperties","copyAllProperties","from","to"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/utils/Object.js"],"sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $array from \"./Array\";\r\nimport * as $type from \"./Type\";\r\n/**\r\n * ============================================================================\r\n * UTILITY FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Returns an iterator for all entries in object.\r\n *\r\n * Can be used to safely iterate through all properties of the object.\r\n *\r\n * @param object  Source object\r\n * @returns Iterator\r\n */\r\nexport function entries(object) {\r\n    return function (push) {\r\n        // TODO make this more efficient ?\r\n        for (var key in object) {\r\n            if (hasKey(object, key)) {\r\n                if (!push([key, object[key]])) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * Returns an array of object's property names.\r\n *\r\n * @param object  Source object\r\n * @returns Object property names\r\n */\r\nexport function keys(object) {\r\n    var output = [];\r\n    for (var key in object) {\r\n        if (hasKey(object, key)) {\r\n            output.push(key);\r\n        }\r\n    }\r\n    return output;\r\n}\r\n/**\r\n * Returns an array of object's property names ordered using specific ordering\r\n * function.\r\n *\r\n * @param object  Source object\r\n * @param order   Ordering function\r\n * @returns Object property names\r\n */\r\nexport function keysOrdered(object, order) {\r\n    return keys(object).sort(order);\r\n}\r\n/**\r\n * Checks if `object` has a specific `key`.\r\n *\r\n * @param object  Source object\r\n * @param key     Property name\r\n * @returns Has key?\r\n */\r\nexport function hasKey(object, key) {\r\n    return {}.hasOwnProperty.call(object, key);\r\n}\r\n/**\r\n * Returns value of the specific `key`.\r\n *\r\n * @param object  Source object\r\n * @param key     Property name\r\n * @returns Key value\r\n */\r\nexport function getKey(object, key) {\r\n    return object[key];\r\n}\r\n/**\r\n * Iterates through all properties of the object calling `fn` for each of them.\r\n *\r\n * If return value of the function evaluates to `false` further iteration is\r\n * cancelled.\r\n *\r\n * @param object  Source object\r\n * @param fn      Callback function\r\n */\r\nexport function eachContinue(object, fn) {\r\n    for (var key in object) {\r\n        if (hasKey(object, key)) {\r\n            if (!fn(key, object[key])) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * Iterates through all properties of the object calling `fn` for each of them.\r\n *\r\n * @param object  Source object\r\n * @param fn      Callback function\r\n */\r\nexport function each(object, fn) {\r\n    eachContinue(object, function (key, value) {\r\n        fn(key, value);\r\n        return true;\r\n    });\r\n}\r\n/**\r\n * Orders object properties using custom `ord` function and iterates through\r\n * them calling `fn` for each of them.\r\n *\r\n * @param object  Source object\r\n * @param fn      Callback function\r\n * @param order   Ordering function\r\n */\r\nexport function eachOrdered(object, fn, ord) {\r\n    $array.each(keysOrdered(object, ord), function (key) {\r\n        fn(key, object[key]);\r\n    });\r\n}\r\n/**\r\n * Returns a copy of the object.\r\n *\r\n * @param object  Source object\r\n * @returns Copy of the object\r\n */\r\nexport function copy(object) {\r\n    return Object.assign({}, object);\r\n}\r\n/**\r\n * Merges two objects and returns a new object that contains properties from\r\n * both source objects.\r\n *\r\n * @param object1  Source object #1\r\n * @param object2  Source object #2\r\n * @returns Combined object\r\n */\r\nexport function merge(object1, object2) {\r\n    return Object.assign({}, object1, object2);\r\n}\r\n/**\r\n * Returns object clone.\r\n *\r\n * @param object  Source object\r\n * @returns       Clone\r\n */\r\nexport function clone(object) {\r\n    return JSON.parse(JSON.stringify(object));\r\n}\r\n/**\r\n * Copies a list of properties from one object to another.\r\n *\r\n * Will not copy empty properties.\r\n *\r\n * @param source  Source object\r\n * @param target    Target object\r\n * @param keys  List of keys to copy\r\n */\r\nexport function copyProperties(source, target, keys) {\r\n    $array.each(keys, function (key) {\r\n        if ($type.hasValue(source[key])) {\r\n            target[key] = source[key];\r\n        }\r\n    });\r\n}\r\n/**\r\n * Copies a list of properties from one object to another only if target does't have value of the property set.\r\n *\r\n * Will not copy empty properties.\r\n *\r\n * @param source  Source object\r\n * @param target    Target object\r\n * @param keys  List of keys to copy\r\n */\r\nexport function softCopyProperties(source, target, keys) {\r\n    $array.each(keys, function (key) {\r\n        if ($type.hasValue(source[key]) && !($type.hasValue(target[key]))) {\r\n            target[key] = source[key];\r\n        }\r\n    });\r\n}\r\n/**\r\n * Copies a list of properties from one object to another.\r\n *\r\n * Will copy empty properties.\r\n *\r\n * @param source  Source object\r\n * @param target    Target object\r\n * @param keys  List of keys to copy\r\n */\r\nexport function forceCopyProperties(source, target, keys) {\r\n    $array.each(keys, function (key) {\r\n        target[key] = source[key];\r\n    });\r\n}\r\n/**\r\n * Copies all properties from one object to another.\r\n *\r\n * @param from  Source object\r\n * @param to    Target object\r\n */\r\nexport function copyAllProperties(from, to) {\r\n    copyProperties(from, to, keys(from));\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}