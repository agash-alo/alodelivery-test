{"ast":null,"code":"/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { registry, is } from \"./Registry\";\nimport { Container } from \"./Container\";\nimport { raf } from \"./utils/AsyncPending\";\nimport { triggerIdle } from \"./utils/AsyncPending\";\nimport * as $array from \"./utils/Array\";\nimport * as $object from \"./utils/Object\";\nimport * as $log from \"./utils/Log\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * The main class that handles system-wide tasks, like caching, heartbeats, etc.\r\n * @important\r\n */\nvar System = /** @class */function () {\n  /**\r\n   * Performs initialization of the System object.\r\n   *\r\n   * Called when the first [[Sprite]] object is created.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  function System() {\n    /**\r\n     * A flag indicating if the system is on pause.\r\n     */\n    this._isPaused = false;\n    /**\r\n     * Holds the list of currently playing animations.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    this.animations = [];\n    /**\r\n     * Unique ID of the object.\r\n     */\n    this.uid = registry.getUniqueId();\n    /**\r\n     * @todo Description\r\n     * @todo Needed?\r\n     * @ignore Exclude from docs\r\n     */\n    this.dummyCounter = 0;\n    this._frameRequested = false;\n    this.updateStepDuration = 45;\n    this.time = Date.now();\n  }\n  /**\r\n   * Reports time elapsed since timer was reset.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Needed?\r\n   * @param msg    Message to report in console\r\n   * @param reset  Reset time counter\r\n   */\n  System.prototype.reportTime = function (msg, reset) {\n    if (this.dummyCounter < 6) {\n      //console.log(Date.now() - this.time, msg, this.dummyCounter2);\n    }\n    if (reset) {\n      this.time = Date.now();\n    }\n  };\n  /**\r\n   * Performs \"heartbeat\" operations `frameRate` number of times per second.\r\n   *\r\n   * When the chart element is invalidated, it is not immediately redrawn.\r\n   *\r\n   * Instead it waits for the next `update()` cycle to be re-validated.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Maybe should be private?\r\n   */\n  System.prototype.update = function () {\n    var _this = this;\n    if (this._isPaused) {\n      return;\n    }\n    this._frameRequested = false;\n    var time = Date.now();\n    registry.dispatchImmediately(\"enterframe\");\n    //this.validateLayouts();\n    //this.validatePositions();\n    /*\r\n            for (let key in registry.invalidLayouts) {\r\n                this.validateLayouts(key);\r\n            }\r\n            for (let key in registry.invalidPositions) {\r\n                this.validatePositions(key);\r\n            }\r\n    */\n    var skippedComponents = [];\n    // data objects first - do all calculations\n    // only data is parsed in chunks, thats why we do for loop instead of a while like with other invalid items.\n    // important to go backwards, as items are removed!\n    // TODO use iterator instead\n    for (var key in registry.invalidDatas) {\n      if ($object.hasKey(registry.invalidDatas, key)) {\n        var invalidData = registry.invalidDatas[key];\n        while (invalidData.length > 0) {\n          var component = invalidData[0];\n          var dataProvider = component.dataProvider;\n          if (!component.isDisposed()) {\n            if (dataProvider && dataProvider.dataInvalid) {\n              try {\n                dataProvider.validateData();\n                if (dataProvider.dataValidationProgress < 1) {\n                  break;\n                }\n              } catch (e) {\n                $array.remove(invalidData, dataProvider);\n                dataProvider.raiseCriticalError(e);\n              }\n            } else {\n              try {\n                component.validateData();\n                if (component.dataValidationProgress < 1) {\n                  break;\n                }\n              } catch (e) {\n                $array.remove(invalidData, component);\n                component.raiseCriticalError(e);\n              }\n            }\n          } else {\n            $array.remove(invalidData, component);\n          }\n        }\n        if (Date.now() - time > this.updateStepDuration) {\n          break;\n        }\n      }\n    }\n    while (registry.invalidRawDatas.length > 0) {\n      var component = registry.invalidRawDatas[0];\n      if (!component.isDisposed()) {\n        try {\n          component.validateRawData();\n        } catch (e) {\n          $array.remove(registry.invalidRawDatas, component);\n          component.raiseCriticalError(e);\n        }\n      } else {\n        $array.remove(registry.invalidRawDatas, component);\n      }\n    }\n    // TODO use iterator instead\n    while (registry.invalidDataItems.length > 0) {\n      var component = registry.invalidDataItems[0];\n      var dataProvider = component.dataProvider;\n      // this is needed to avoid partial value validation when data is parsed in chunks\n      if (component.isDisposed() || component.dataInvalid || dataProvider && dataProvider.dataInvalid) {\n        // void\n      } else {\n        try {\n          component.validateDataItems();\n        } catch (e) {\n          $array.remove(registry.invalidDataItems, component);\n          component.raiseCriticalError(e);\n        }\n      }\n      // this might seem too much, as validateValues removes from invalidDataItems aswell, but just to be sure (in case validateData is overriden and no super is called)\n      $array.remove(registry.invalidDataItems, component);\n    }\n    // TODO use iterator instead\n    while (registry.invalidDataRange.length > 0) {\n      var component = registry.invalidDataRange[0];\n      var dataProvider = component.dataProvider;\n      if (component.isDisposed() || component.dataInvalid || dataProvider && dataProvider.dataInvalid) {\n        // void\n      } else {\n        try {\n          component.validateDataRange();\n          if (!component.skipRangeEvent) {\n            component.dispatchImmediately(\"datarangechanged\");\n          }\n          component.skipRangeEvent = false;\n        } catch (e) {\n          $array.remove(registry.invalidDataRange, component);\n          component.raiseCriticalError(e);\n        }\n      }\n      // this might seem too much, as validateDataRange removes from invalidDataRange aswell, but just to be sure (in case validateData is overriden and no super is called)\n      $array.remove(registry.invalidDataRange, component);\n    }\n    var skippedSprites = [];\n    // display objects later\n    // TODO use iterator instead\n    $object.each(registry.invalidLayouts, function (key) {\n      _this.validateLayouts(key);\n    });\n    $object.each(registry.invalidPositions, function (key) {\n      _this.validatePositions(key);\n    });\n    var hasSkipped = false;\n    time = Date.now();\n    $object.each(registry.invalidSprites, function (key, invalidSprites) {\n      var count = 0;\n      while (invalidSprites.length > 0) {\n        _this.validateLayouts(key);\n        _this.validatePositions(key);\n        count++;\n        if (count == 5) {\n          if (Date.now() - time > _this.updateStepDuration) {\n            break;\n          }\n          count = 0;\n        }\n        var sprite = invalidSprites[invalidSprites.length - 1];\n        // we need to check this, as validateLayout might validate sprite\n        if (sprite && !sprite.isDisposed()) {\n          if (!sprite._systemCheckIfValidate()) {\n            // void\n            skippedSprites.push(sprite);\n          } else {\n            if (!_this.checkIfValidate2(sprite)) {\n              // void\n              skippedSprites.push(sprite);\n            } else {\n              try {\n                sprite._systemUpdate(skippedSprites);\n              } catch (e) {\n                sprite.invalid = false;\n                $array.remove(invalidSprites, sprite);\n                sprite.raiseCriticalError(e);\n              }\n            }\n          }\n          // this might seem too much, but it's ok\n          sprite.invalid = false;\n        }\n        $array.remove(invalidSprites, sprite);\n      }\n      registry.invalidSprites[key] = registry.invalidSprites[key].concat(skippedSprites);\n    });\n    $object.each(registry.invalidSprites, function (key, value) {\n      if (value.length > 0) {\n        hasSkipped = true;\n      }\n    });\n    $object.each(registry.invalidDatas, function (key, value) {\n      if (value.length > 0) {\n        hasSkipped = true;\n      }\n    });\n    // TODO make this more efficient\n    // TODO don't copy the array\n    $array.each($array.copy(this.animations), function (x) {\n      x.update();\n    });\n    //if(!hasSkipped){\n    $object.each(registry.invalidLayouts, function (key) {\n      _this.validateLayouts(key);\n    });\n    $object.each(registry.invalidPositions, function (key) {\n      _this.validatePositions(key);\n    });\n    //}\n    triggerIdle();\n    $object.each(registry.invalidLayouts, function (key) {\n      _this.validateLayouts(key);\n    });\n    $object.each(registry.invalidPositions, function (key) {\n      _this.validatePositions(key);\n    });\n    registry.dispatchImmediately(\"exitframe\");\n    if (hasSkipped || this.animations.length > 0 || skippedComponents.length > 0) {\n      this.requestFrame();\n    }\n    if (this.updateStepDuration < 200) {\n      var all0_1 = true;\n      $object.each(registry.invalidDatas, function (key, value) {\n        if (value.length > 0) {\n          all0_1 = false;\n        }\n      });\n      $object.each(registry.invalidSprites, function (key, value) {\n        if (value.length > 0) {\n          all0_1 = false;\n        }\n      });\n      if (all0_1) {\n        this.updateStepDuration = 200;\n      }\n    }\n  };\n  System.prototype.checkIfValidate2 = function (sprite) {\n    if (sprite.dataItem && sprite.dataItem.component && sprite.dataItem.component.dataInvalid && !sprite.dataItem.component.isTemplate) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n  /**\r\n   * Requests new animation frame\r\n   */\n  System.prototype.requestFrame = function () {\n    var _this = this;\n    if (!this._frameRequested) {\n      raf(function () {\n        _this.update();\n      });\n      this._frameRequested = true;\n    }\n  };\n  /**\r\n   * Call this method if you update data or config of a chart that is in\r\n   * hidden container, after revealing the container, so that labels and\r\n   * possibly other elements can correctly arrange themselves.\r\n   *\r\n   * @since 4.7.10\r\n   * @param  container  Target container\r\n   */\n  System.prototype.softInvalidate = function (container) {\n    var _this = this;\n    container.children.each(function (child) {\n      if (child instanceof Container) {\n        _this.softInvalidate(child);\n      }\n      if (child.measureFailed) {\n        if (is(child, \"Label\")) {\n          child.hardInvalidate();\n        } else {\n          child.invalidate();\n        }\n        child.measureFailed = false;\n      }\n    });\n  };\n  /**\r\n   * Triggers position re-validation on all [[Sprite]] elements that have\r\n   * invalid(ated) positions.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Maybe should be private?\r\n   */\n  System.prototype.validatePositions = function (id) {\n    // invalid positions\n    // TODO use iterator instead\n    var invalidPositions = registry.invalidPositions[id];\n    while (invalidPositions.length > 0) {\n      var sprite = invalidPositions[invalidPositions.length - 1];\n      if (!sprite.isDisposed()) {\n        try {\n          sprite._systemValidatePositions();\n        } catch (e) {\n          sprite.positionInvalid = false;\n          $array.remove(invalidPositions, sprite);\n          sprite.raiseCriticalError(e);\n        }\n      } else {\n        $array.remove(invalidPositions, sprite);\n      }\n    }\n  };\n  /**\r\n   * Triggers position re-validation on all [[Container]] elements that have\r\n   * invalid(ated) layouts.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Maybe should be private?\r\n   */\n  System.prototype.validateLayouts = function (id) {\n    // invalid positions\n    // TODO use iterator instead\n    var invalidLayouts = registry.invalidLayouts[id];\n    while (invalidLayouts.length > 0) {\n      var container = invalidLayouts[invalidLayouts.length - 1];\n      if (!container.isDisposed()) {\n        try {\n          container.children.each(function (sprite) {\n            sprite._systemValidateLayouts();\n          });\n          container.validateLayout();\n        } catch (e) {\n          container.layoutInvalid = false;\n          $array.remove(invalidLayouts, container);\n          container.raiseCriticalError(e);\n        }\n      } else {\n        $array.remove(invalidLayouts, container);\n      }\n    }\n  };\n  /**\r\n   * Outputs string to console if `verbose` is `true`.\r\n   *\r\n   * @param value Message to output to console\r\n   */\n  System.prototype.log = function (value) {\n    $log.log(value);\n  };\n  Object.defineProperty(System.prototype, \"isPaused\", {\n    /**\r\n     * @return Is system on pause?\r\n     */\n    get: function () {\n      return this._isPaused;\n    },\n    /**\r\n     * Pauses all the processes of all the amCharts objects on the page\r\n     *\r\n     * @return is paused?\r\n     */\n    set: function (value) {\n      this._isPaused = value;\n      if (!value) {\n        this._frameRequested = false;\n        this.requestFrame();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * amCharts Version.\r\n   *\r\n   * This follows npm's semver specification.\r\n   *\r\n   * @see {@link https://docs.npmjs.com/misc/semver}\r\n   */\n  System.VERSION = \"4.10.36\";\n  return System;\n}();\nexport { System };\n/**\r\n * A singleton global instance of [[System]].\r\n *\r\n * All code should use this, rather than instantiating their\r\n * own System objects.\r\n */\nexport var system = new System();","map":{"version":3,"names":["registry","is","Container","raf","triggerIdle","$array","$object","$log","System","_isPaused","animations","uid","getUniqueId","dummyCounter","_frameRequested","updateStepDuration","time","Date","now","prototype","reportTime","msg","reset","update","_this","dispatchImmediately","skippedComponents","key","invalidDatas","hasKey","invalidData","length","component","dataProvider","isDisposed","dataInvalid","validateData","dataValidationProgress","e","remove","raiseCriticalError","invalidRawDatas","validateRawData","invalidDataItems","validateDataItems","invalidDataRange","validateDataRange","skipRangeEvent","skippedSprites","each","invalidLayouts","validateLayouts","invalidPositions","validatePositions","hasSkipped","invalidSprites","count","sprite","_systemCheckIfValidate","push","checkIfValidate2","_systemUpdate","invalid","concat","value","copy","x","requestFrame","all0_1","dataItem","isTemplate","softInvalidate","container","children","child","measureFailed","hardInvalidate","invalidate","id","_systemValidatePositions","positionInvalid","_systemValidateLayouts","validateLayout","layoutInvalid","log","Object","defineProperty","get","set","enumerable","configurable","VERSION","system"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/System.js"],"sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { registry, is } from \"./Registry\";\r\nimport { Container } from \"./Container\";\r\nimport { raf } from \"./utils/AsyncPending\";\r\nimport { triggerIdle } from \"./utils/AsyncPending\";\r\nimport * as $array from \"./utils/Array\";\r\nimport * as $object from \"./utils/Object\";\r\nimport * as $log from \"./utils/Log\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * The main class that handles system-wide tasks, like caching, heartbeats, etc.\r\n * @important\r\n */\r\nvar System = /** @class */ (function () {\r\n    /**\r\n     * Performs initialization of the System object.\r\n     *\r\n     * Called when the first [[Sprite]] object is created.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    function System() {\r\n        /**\r\n         * A flag indicating if the system is on pause.\r\n         */\r\n        this._isPaused = false;\r\n        /**\r\n         * Holds the list of currently playing animations.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        this.animations = [];\r\n        /**\r\n         * Unique ID of the object.\r\n         */\r\n        this.uid = registry.getUniqueId();\r\n        /**\r\n         * @todo Description\r\n         * @todo Needed?\r\n         * @ignore Exclude from docs\r\n         */\r\n        this.dummyCounter = 0;\r\n        this._frameRequested = false;\r\n        this.updateStepDuration = 45;\r\n        this.time = Date.now();\r\n    }\r\n    /**\r\n     * Reports time elapsed since timer was reset.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Needed?\r\n     * @param msg    Message to report in console\r\n     * @param reset  Reset time counter\r\n     */\r\n    System.prototype.reportTime = function (msg, reset) {\r\n        if (this.dummyCounter < 6) {\r\n            //console.log(Date.now() - this.time, msg, this.dummyCounter2);\r\n        }\r\n        if (reset) {\r\n            this.time = Date.now();\r\n        }\r\n    };\r\n    /**\r\n     * Performs \"heartbeat\" operations `frameRate` number of times per second.\r\n     *\r\n     * When the chart element is invalidated, it is not immediately redrawn.\r\n     *\r\n     * Instead it waits for the next `update()` cycle to be re-validated.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Maybe should be private?\r\n     */\r\n    System.prototype.update = function () {\r\n        var _this = this;\r\n        if (this._isPaused) {\r\n            return;\r\n        }\r\n        this._frameRequested = false;\r\n        var time = Date.now();\r\n        registry.dispatchImmediately(\"enterframe\");\r\n        //this.validateLayouts();\r\n        //this.validatePositions();\r\n        /*\r\n                for (let key in registry.invalidLayouts) {\r\n                    this.validateLayouts(key);\r\n                }\r\n                for (let key in registry.invalidPositions) {\r\n                    this.validatePositions(key);\r\n                }\r\n        */\r\n        var skippedComponents = [];\r\n        // data objects first - do all calculations\r\n        // only data is parsed in chunks, thats why we do for loop instead of a while like with other invalid items.\r\n        // important to go backwards, as items are removed!\r\n        // TODO use iterator instead\r\n        for (var key in registry.invalidDatas) {\r\n            if ($object.hasKey(registry.invalidDatas, key)) {\r\n                var invalidData = registry.invalidDatas[key];\r\n                while (invalidData.length > 0) {\r\n                    var component = invalidData[0];\r\n                    var dataProvider = component.dataProvider;\r\n                    if (!component.isDisposed()) {\r\n                        if (dataProvider && dataProvider.dataInvalid) {\r\n                            try {\r\n                                dataProvider.validateData();\r\n                                if (dataProvider.dataValidationProgress < 1) {\r\n                                    break;\r\n                                }\r\n                            }\r\n                            catch (e) {\r\n                                $array.remove(invalidData, dataProvider);\r\n                                dataProvider.raiseCriticalError(e);\r\n                            }\r\n                        }\r\n                        else {\r\n                            try {\r\n                                component.validateData();\r\n                                if (component.dataValidationProgress < 1) {\r\n                                    break;\r\n                                }\r\n                            }\r\n                            catch (e) {\r\n                                $array.remove(invalidData, component);\r\n                                component.raiseCriticalError(e);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        $array.remove(invalidData, component);\r\n                    }\r\n                }\r\n                if (Date.now() - time > this.updateStepDuration) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        while (registry.invalidRawDatas.length > 0) {\r\n            var component = registry.invalidRawDatas[0];\r\n            if (!component.isDisposed()) {\r\n                try {\r\n                    component.validateRawData();\r\n                }\r\n                catch (e) {\r\n                    $array.remove(registry.invalidRawDatas, component);\r\n                    component.raiseCriticalError(e);\r\n                }\r\n            }\r\n            else {\r\n                $array.remove(registry.invalidRawDatas, component);\r\n            }\r\n        }\r\n        // TODO use iterator instead\r\n        while (registry.invalidDataItems.length > 0) {\r\n            var component = registry.invalidDataItems[0];\r\n            var dataProvider = component.dataProvider;\r\n            // this is needed to avoid partial value validation when data is parsed in chunks\r\n            if (component.isDisposed() || component.dataInvalid || (dataProvider && dataProvider.dataInvalid)) {\r\n                // void\r\n            }\r\n            else {\r\n                try {\r\n                    component.validateDataItems();\r\n                }\r\n                catch (e) {\r\n                    $array.remove(registry.invalidDataItems, component);\r\n                    component.raiseCriticalError(e);\r\n                }\r\n            }\r\n            // this might seem too much, as validateValues removes from invalidDataItems aswell, but just to be sure (in case validateData is overriden and no super is called)\r\n            $array.remove(registry.invalidDataItems, component);\r\n        }\r\n        // TODO use iterator instead\r\n        while (registry.invalidDataRange.length > 0) {\r\n            var component = registry.invalidDataRange[0];\r\n            var dataProvider = component.dataProvider;\r\n            if (component.isDisposed() || component.dataInvalid || (dataProvider && dataProvider.dataInvalid)) {\r\n                // void\r\n            }\r\n            else {\r\n                try {\r\n                    component.validateDataRange();\r\n                    if (!component.skipRangeEvent) {\r\n                        component.dispatchImmediately(\"datarangechanged\");\r\n                    }\r\n                    component.skipRangeEvent = false;\r\n                }\r\n                catch (e) {\r\n                    $array.remove(registry.invalidDataRange, component);\r\n                    component.raiseCriticalError(e);\r\n                }\r\n            }\r\n            // this might seem too much, as validateDataRange removes from invalidDataRange aswell, but just to be sure (in case validateData is overriden and no super is called)\r\n            $array.remove(registry.invalidDataRange, component);\r\n        }\r\n        var skippedSprites = [];\r\n        // display objects later\r\n        // TODO use iterator instead\r\n        $object.each(registry.invalidLayouts, function (key) {\r\n            _this.validateLayouts(key);\r\n        });\r\n        $object.each(registry.invalidPositions, function (key) {\r\n            _this.validatePositions(key);\r\n        });\r\n        var hasSkipped = false;\r\n        time = Date.now();\r\n        $object.each(registry.invalidSprites, function (key, invalidSprites) {\r\n            var count = 0;\r\n            while (invalidSprites.length > 0) {\r\n                _this.validateLayouts(key);\r\n                _this.validatePositions(key);\r\n                count++;\r\n                if (count == 5) {\r\n                    if (Date.now() - time > _this.updateStepDuration) {\r\n                        break;\r\n                    }\r\n                    count = 0;\r\n                }\r\n                var sprite = invalidSprites[invalidSprites.length - 1];\r\n                // we need to check this, as validateLayout might validate sprite\r\n                if (sprite && !sprite.isDisposed()) {\r\n                    if (!sprite._systemCheckIfValidate()) {\r\n                        // void\r\n                        skippedSprites.push(sprite);\r\n                    }\r\n                    else {\r\n                        if (!_this.checkIfValidate2(sprite)) {\r\n                            // void\r\n                            skippedSprites.push(sprite);\r\n                        }\r\n                        else {\r\n                            try {\r\n                                sprite._systemUpdate(skippedSprites);\r\n                            }\r\n                            catch (e) {\r\n                                sprite.invalid = false;\r\n                                $array.remove(invalidSprites, sprite);\r\n                                sprite.raiseCriticalError(e);\r\n                            }\r\n                        }\r\n                    }\r\n                    // this might seem too much, but it's ok\r\n                    sprite.invalid = false;\r\n                }\r\n                $array.remove(invalidSprites, sprite);\r\n            }\r\n            registry.invalidSprites[key] = registry.invalidSprites[key].concat(skippedSprites);\r\n        });\r\n        $object.each(registry.invalidSprites, function (key, value) {\r\n            if (value.length > 0) {\r\n                hasSkipped = true;\r\n            }\r\n        });\r\n        $object.each(registry.invalidDatas, function (key, value) {\r\n            if (value.length > 0) {\r\n                hasSkipped = true;\r\n            }\r\n        });\r\n        // TODO make this more efficient\r\n        // TODO don't copy the array\r\n        $array.each($array.copy(this.animations), function (x) {\r\n            x.update();\r\n        });\r\n        //if(!hasSkipped){\r\n        $object.each(registry.invalidLayouts, function (key) {\r\n            _this.validateLayouts(key);\r\n        });\r\n        $object.each(registry.invalidPositions, function (key) {\r\n            _this.validatePositions(key);\r\n        });\r\n        //}\r\n        triggerIdle();\r\n        $object.each(registry.invalidLayouts, function (key) {\r\n            _this.validateLayouts(key);\r\n        });\r\n        $object.each(registry.invalidPositions, function (key) {\r\n            _this.validatePositions(key);\r\n        });\r\n        registry.dispatchImmediately(\"exitframe\");\r\n        if (hasSkipped || this.animations.length > 0 || skippedComponents.length > 0) {\r\n            this.requestFrame();\r\n        }\r\n        if (this.updateStepDuration < 200) {\r\n            var all0_1 = true;\r\n            $object.each(registry.invalidDatas, function (key, value) {\r\n                if (value.length > 0) {\r\n                    all0_1 = false;\r\n                }\r\n            });\r\n            $object.each(registry.invalidSprites, function (key, value) {\r\n                if (value.length > 0) {\r\n                    all0_1 = false;\r\n                }\r\n            });\r\n            if (all0_1) {\r\n                this.updateStepDuration = 200;\r\n            }\r\n        }\r\n    };\r\n    System.prototype.checkIfValidate2 = function (sprite) {\r\n        if (sprite.dataItem && sprite.dataItem.component && sprite.dataItem.component.dataInvalid && !sprite.dataItem.component.isTemplate) {\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    };\r\n    /**\r\n     * Requests new animation frame\r\n     */\r\n    System.prototype.requestFrame = function () {\r\n        var _this = this;\r\n        if (!this._frameRequested) {\r\n            raf(function () {\r\n                _this.update();\r\n            });\r\n            this._frameRequested = true;\r\n        }\r\n    };\r\n    /**\r\n     * Call this method if you update data or config of a chart that is in\r\n     * hidden container, after revealing the container, so that labels and\r\n     * possibly other elements can correctly arrange themselves.\r\n     *\r\n     * @since 4.7.10\r\n     * @param  container  Target container\r\n     */\r\n    System.prototype.softInvalidate = function (container) {\r\n        var _this = this;\r\n        container.children.each(function (child) {\r\n            if (child instanceof Container) {\r\n                _this.softInvalidate(child);\r\n            }\r\n            if (child.measureFailed) {\r\n                if (is(child, \"Label\")) {\r\n                    child.hardInvalidate();\r\n                }\r\n                else {\r\n                    child.invalidate();\r\n                }\r\n                child.measureFailed = false;\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Triggers position re-validation on all [[Sprite]] elements that have\r\n     * invalid(ated) positions.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Maybe should be private?\r\n     */\r\n    System.prototype.validatePositions = function (id) {\r\n        // invalid positions\r\n        // TODO use iterator instead\r\n        var invalidPositions = registry.invalidPositions[id];\r\n        while (invalidPositions.length > 0) {\r\n            var sprite = invalidPositions[invalidPositions.length - 1];\r\n            if (!sprite.isDisposed()) {\r\n                try {\r\n                    sprite._systemValidatePositions();\r\n                }\r\n                catch (e) {\r\n                    sprite.positionInvalid = false;\r\n                    $array.remove(invalidPositions, sprite);\r\n                    sprite.raiseCriticalError(e);\r\n                }\r\n            }\r\n            else {\r\n                $array.remove(invalidPositions, sprite);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Triggers position re-validation on all [[Container]] elements that have\r\n     * invalid(ated) layouts.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Maybe should be private?\r\n     */\r\n    System.prototype.validateLayouts = function (id) {\r\n        // invalid positions\r\n        // TODO use iterator instead\r\n        var invalidLayouts = registry.invalidLayouts[id];\r\n        while (invalidLayouts.length > 0) {\r\n            var container = invalidLayouts[invalidLayouts.length - 1];\r\n            if (!container.isDisposed()) {\r\n                try {\r\n                    container.children.each(function (sprite) {\r\n                        sprite._systemValidateLayouts();\r\n                    });\r\n                    container.validateLayout();\r\n                }\r\n                catch (e) {\r\n                    container.layoutInvalid = false;\r\n                    $array.remove(invalidLayouts, container);\r\n                    container.raiseCriticalError(e);\r\n                }\r\n            }\r\n            else {\r\n                $array.remove(invalidLayouts, container);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Outputs string to console if `verbose` is `true`.\r\n     *\r\n     * @param value Message to output to console\r\n     */\r\n    System.prototype.log = function (value) {\r\n        $log.log(value);\r\n    };\r\n    Object.defineProperty(System.prototype, \"isPaused\", {\r\n        /**\r\n         * @return Is system on pause?\r\n         */\r\n        get: function () {\r\n            return this._isPaused;\r\n        },\r\n        /**\r\n         * Pauses all the processes of all the amCharts objects on the page\r\n         *\r\n         * @return is paused?\r\n         */\r\n        set: function (value) {\r\n            this._isPaused = value;\r\n            if (!value) {\r\n                this._frameRequested = false;\r\n                this.requestFrame();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * amCharts Version.\r\n     *\r\n     * This follows npm's semver specification.\r\n     *\r\n     * @see {@link https://docs.npmjs.com/misc/semver}\r\n     */\r\n    System.VERSION = \"4.10.36\";\r\n    return System;\r\n}());\r\nexport { System };\r\n/**\r\n * A singleton global instance of [[System]].\r\n *\r\n * All code should use this, rather than instantiating their\r\n * own System objects.\r\n */\r\nexport var system = new System();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}