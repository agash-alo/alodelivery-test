{"ast":null,"code":"/**\r\n * Module that defines everything related to building Curved Columns.\r\n * It is a container which has CurvedColumn element which is a Sprite.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Column } from \"./Column\";\nimport { Sprite } from \"../../core/Sprite\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport { registry } from \"../../core/Registry\";\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\nimport { percent } from \"../../core/utils/Percent\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Class used to creates CurvedColumns.\r\n *\r\n * @see {@link ICurvedColumnEvents} for a list of available events\r\n * @see {@link ICurvedColumnAdapters} for a list of available Adapters\r\n * @important\r\n */\nvar CurvedColumn = /** @class */function (_super) {\n  __extends(CurvedColumn, _super);\n  /**\r\n   * Constructor\r\n   */\n  function CurvedColumn() {\n    var _this = _super.call(this) || this;\n    _this.className = \"CurvedColumn\";\n    return _this;\n  }\n  /**\r\n   * [createAssets description]\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   */\n  CurvedColumn.prototype.createAssets = function () {\n    this.curvedColumn = this.createChild(Sprite);\n    this.curvedColumn.shouldClone = false;\n    this.setPropertyValue(\"tension\", 0.7);\n    this.width = percent(120);\n    this.height = percent(120);\n    // some dirty hack so that if user access column, it won't get error\n    this.column = this.curvedColumn;\n  };\n  /**\r\n   * Draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  CurvedColumn.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n    var w = this.realWidth;\n    var h = this.realHeight;\n    var x = this.realX - this.pixelX;\n    var y = this.realY - this.pixelY;\n    var points;\n    // TODO can this be removed ?\n    $utils.used(this.width);\n    var tensionX = 1;\n    var tensionY = 1;\n    if (this.orientation == \"vertical\") {\n      tensionX = this.tension;\n      points = [{\n        x: 0,\n        y: h + y\n      }, {\n        x: w / 2,\n        y: y\n      }, {\n        x: w,\n        y: h + y\n      }];\n    } else {\n      tensionY = this.tension;\n      h = Math.abs(h);\n      points = [{\n        x: x,\n        y: h\n      }, {\n        x: x + w,\n        y: h / 2\n      }, {\n        x: x,\n        y: 0\n      }];\n    }\n    var path = $path.moveTo(points[0]) + new $smoothing.Tension(tensionX, tensionY).smooth(points);\n    this.column.path = path;\n  };\n  /**\r\n   * Copies all parameters from another [[CurvedColumn]].\r\n   *\r\n   * @param source  Source CurvedColumn\r\n   */\n  CurvedColumn.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    if (this.curvedColumn) {\n      this.curvedColumn.copyFrom(source.curvedColumn);\n    }\n  };\n  Object.defineProperty(CurvedColumn.prototype, \"tension\", {\n    /**\r\n     * @return Tension (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tension\");\n    },\n    /**\r\n     * Horizontal tension of the curve.\r\n     *\r\n     * Tension defines how \"lose\" the line will be.\r\n     *\r\n     * 1 is the maximum tension which would result in pointy columns with\r\n     * straight edges.\r\n     *\r\n     * The smaller the tension th wider the column will be.\r\n     *\r\n     * @default 0.7\r\n     * @param value tension (0-1)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"tension\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CurvedColumn.prototype, \"orientation\", {\n    /**\r\n     * Orientation\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"orientation\");\n    },\n    /**\r\n     * Orientation of the column.\r\n     *\r\n     * Available options: \"vertical\" (default) and \"horizontal\".\r\n     *\r\n     * @default \"vertical\"\r\n     * @param value  Orientation\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"orientation\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return CurvedColumn;\n}(Column);\nexport { CurvedColumn };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"CurvedColumn\"] = CurvedColumn;","map":{"version":3,"names":["__extends","Column","Sprite","$path","$utils","registry","$smoothing","percent","CurvedColumn","_super","_this","call","className","prototype","createAssets","curvedColumn","createChild","shouldClone","setPropertyValue","width","height","column","draw","w","realWidth","h","realHeight","x","realX","pixelX","y","realY","pixelY","points","used","tensionX","tensionY","orientation","tension","Math","abs","path","moveTo","Tension","smooth","copyFrom","source","Object","defineProperty","get","getPropertyValue","set","value","enumerable","configurable","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/charts/elements/CurvedColumn.js"],"sourcesContent":["/**\r\n * Module that defines everything related to building Curved Columns.\r\n * It is a container which has CurvedColumn element which is a Sprite.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column } from \"./Column\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Class used to creates CurvedColumns.\r\n *\r\n * @see {@link ICurvedColumnEvents} for a list of available events\r\n * @see {@link ICurvedColumnAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar CurvedColumn = /** @class */ (function (_super) {\r\n    __extends(CurvedColumn, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function CurvedColumn() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"CurvedColumn\";\r\n        return _this;\r\n    }\r\n    /**\r\n     * [createAssets description]\r\n     *\r\n     * @todo Description\r\n     * @ignore Exclude from docs\r\n     */\r\n    CurvedColumn.prototype.createAssets = function () {\r\n        this.curvedColumn = this.createChild(Sprite);\r\n        this.curvedColumn.shouldClone = false;\r\n        this.setPropertyValue(\"tension\", 0.7);\r\n        this.width = percent(120);\r\n        this.height = percent(120);\r\n        // some dirty hack so that if user access column, it won't get error\r\n        this.column = this.curvedColumn;\r\n    };\r\n    /**\r\n     * Draws the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    CurvedColumn.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        var w = this.realWidth;\r\n        var h = this.realHeight;\r\n        var x = this.realX - this.pixelX;\r\n        var y = this.realY - this.pixelY;\r\n        var points;\r\n        // TODO can this be removed ?\r\n        $utils.used(this.width);\r\n        var tensionX = 1;\r\n        var tensionY = 1;\r\n        if (this.orientation == \"vertical\") {\r\n            tensionX = this.tension;\r\n            points = [{ x: 0, y: h + y }, { x: w / 2, y: y }, { x: w, y: h + y }];\r\n        }\r\n        else {\r\n            tensionY = this.tension;\r\n            h = Math.abs(h);\r\n            points = [{ x: x, y: h }, { x: x + w, y: h / 2 }, { x: x, y: 0 }];\r\n        }\r\n        var path = $path.moveTo(points[0]) + new $smoothing.Tension(tensionX, tensionY).smooth(points);\r\n        this.column.path = path;\r\n    };\r\n    /**\r\n     * Copies all parameters from another [[CurvedColumn]].\r\n     *\r\n     * @param source  Source CurvedColumn\r\n     */\r\n    CurvedColumn.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        if (this.curvedColumn) {\r\n            this.curvedColumn.copyFrom(source.curvedColumn);\r\n        }\r\n    };\r\n    Object.defineProperty(CurvedColumn.prototype, \"tension\", {\r\n        /**\r\n         * @return Tension (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tension\");\r\n        },\r\n        /**\r\n         * Horizontal tension of the curve.\r\n         *\r\n         * Tension defines how \"lose\" the line will be.\r\n         *\r\n         * 1 is the maximum tension which would result in pointy columns with\r\n         * straight edges.\r\n         *\r\n         * The smaller the tension th wider the column will be.\r\n         *\r\n         * @default 0.7\r\n         * @param value tension (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"tension\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CurvedColumn.prototype, \"orientation\", {\r\n        /**\r\n         * Orientation\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"orientation\");\r\n        },\r\n        /**\r\n         * Orientation of the column.\r\n         *\r\n         * Available options: \"vertical\" (default) and \"horizontal\".\r\n         *\r\n         * @default \"vertical\"\r\n         * @param value  Orientation\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"orientation\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return CurvedColumn;\r\n}(Column));\r\nexport { CurvedColumn };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumn\"] = CurvedColumn;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}