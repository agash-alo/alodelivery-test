{"ast":null,"code":"import { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Output, Input, ContentChildren, ElementRef, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Attribute, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_RADIO_DEFAULT_OPTIONS = new InjectionToken('mat-radio-default-options', {\n  providedIn: 'root',\n  factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\nfunction MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    color: 'accent'\n  };\n}\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nconst MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nclass MatRadioChange {\n  constructor( /** The MatRadioButton that emits the change event. */\n  source, /** The value of the MatRadioButton. */\n  value) {\n    this.source = source;\n    this.value = value;\n  }\n}\n/**\n * Injection token that can be used to inject instances of `MatRadioGroup`. It serves as\n * alternative token to the actual `MatRadioGroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nconst MAT_RADIO_GROUP = new InjectionToken('MatRadioGroup');\n/**\n * Base class with all of the `MatRadioGroup` functionality.\n * @docs-private\n */\nclass _MatRadioGroupBase {\n  constructor(_changeDetector) {\n    this._changeDetector = _changeDetector;\n    /** Selected value for the radio group. */\n    this._value = null;\n    /** The HTML name attribute applied to radio buttons in this group. */\n    this._name = `mat-radio-group-${nextUniqueId++}`;\n    /** The currently selected radio button. Should match value. */\n    this._selected = null;\n    /** Whether the `value` has been set to its initial value. */\n    this._isInitialized = false;\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    this._labelPosition = 'after';\n    /** Whether the radio group is disabled. */\n    this._disabled = false;\n    /** Whether the radio group is required. */\n    this._required = false;\n    /** The method to be called in order to update ngModel */\n    this._controlValueAccessorChangeFn = () => {};\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    this.onTouched = () => {};\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    this.change = new EventEmitter();\n  }\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  get name() {\n    return this._name;\n  }\n  set name(value) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  get labelPosition() {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  get value() {\n    return this._value;\n  }\n  set value(newValue) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  get selected() {\n    return this._selected;\n  }\n  set selected(selected) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n  /** Whether the radio group is disabled */\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n  /** Whether the radio group is required */\n  get required() {\n    return this._required;\n  }\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n  _updateRadioButtonNames() {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n  /** Updates the `selected` radio button from the internal _value state. */\n  _updateSelectedRadioFromValue() {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent() {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected, this._value));\n    }\n  }\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n_MatRadioGroupBase.decorators = [{\n  type: Directive\n}];\n_MatRadioGroupBase.ctorParameters = () => [{\n  type: ChangeDetectorRef\n}];\n_MatRadioGroupBase.propDecorators = {\n  change: [{\n    type: Output\n  }],\n  color: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  labelPosition: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  selected: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }]\n};\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\nclass MatRadioGroup extends _MatRadioGroupBase {}\nMatRadioGroup.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-radio-group',\n    exportAs: 'matRadioGroup',\n    providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, {\n      provide: MAT_RADIO_GROUP,\n      useExisting: MatRadioGroup\n    }],\n    host: {\n      'role': 'radiogroup',\n      'class': 'mat-radio-group'\n    }\n  }]\n}];\nMatRadioGroup.propDecorators = {\n  _radios: [{\n    type: ContentChildren,\n    args: [forwardRef(() => MatRadioButton), {\n      descendants: true\n    }]\n  }]\n};\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nclass MatRadioButtonBase {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nconst _MatRadioButtonMixinBase = mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n/**\n * Base class with all of the `MatRadioButton` functionality.\n * @docs-private\n */\nclass _MatRadioButtonBase extends _MatRadioButtonMixinBase {\n  constructor(radioGroup, elementRef, _changeDetector, _focusMonitor, _radioDispatcher, _animationMode, _providerOverride, tabIndex) {\n    super(elementRef);\n    this._changeDetector = _changeDetector;\n    this._focusMonitor = _focusMonitor;\n    this._radioDispatcher = _radioDispatcher;\n    this._animationMode = _animationMode;\n    this._providerOverride = _providerOverride;\n    this._uniqueId = `mat-radio-${++nextUniqueId}`;\n    /** The unique ID for the radio button. */\n    this.id = this._uniqueId;\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    this.change = new EventEmitter();\n    /** Whether this radio is checked. */\n    this._checked = false;\n    /** Value assigned to this radio. */\n    this._value = null;\n    /** Unregister function for _radioDispatcher */\n    this._removeUniqueSelectionListener = () => {};\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n    if (tabIndex) {\n      this.tabIndex = coerceNumberProperty(tabIndex, 0);\n    }\n    this._removeUniqueSelectionListener = _radioDispatcher.listen((id, name) => {\n      if (id !== this.id && name === this.name) {\n        this.checked = false;\n      }\n    });\n  }\n  /** Whether this radio button is checked. */\n  get checked() {\n    return this._checked;\n  }\n  set checked(value) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n  /** The value of this radio button. */\n  get value() {\n    return this._value;\n  }\n  set value(value) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  get labelPosition() {\n    return this._labelPosition || this.radioGroup && this.radioGroup.labelPosition || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  /** Whether the radio button is disabled. */\n  get disabled() {\n    return this._disabled || this.radioGroup !== null && this.radioGroup.disabled;\n  }\n  set disabled(value) {\n    this._setDisabled(coerceBooleanProperty(value));\n  }\n  /** Whether the radio button is required. */\n  get required() {\n    return this._required || this.radioGroup && this.radioGroup.required;\n  }\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n  }\n  /** Theme color of the radio button. */\n  get color() {\n    return this._color || this.radioGroup && this.radioGroup.color || this._providerOverride && this._providerOverride.color || 'accent';\n  }\n  set color(newValue) {\n    this._color = newValue;\n  }\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId() {\n    return `${this.id || this._uniqueId}-input`;\n  }\n  /** Focuses the radio button. */\n  focus(options, origin) {\n    if (origin) {\n      this._focusMonitor.focusVia(this._inputElement, origin, options);\n    } else {\n      this._inputElement.nativeElement.focus(options);\n    }\n  }\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      if (this.checked) {\n        this.radioGroup.selected = this;\n      }\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin && this.radioGroup) {\n        this.radioGroup._touch();\n      }\n    });\n  }\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n  /** Dispatch change event with current value. */\n  _emitChangeEvent() {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n  _onInputClick(event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n  /** Sets the disabled state and marks for check if a change occurred. */\n  _setDisabled(value) {\n    if (this._disabled !== value) {\n      this._disabled = value;\n      this._changeDetector.markForCheck();\n    }\n  }\n}\n_MatRadioButtonBase.decorators = [{\n  type: Directive\n}];\n_MatRadioButtonBase.ctorParameters = () => [{\n  type: _MatRadioGroupBase\n}, {\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: FocusMonitor\n}, {\n  type: UniqueSelectionDispatcher\n}, {\n  type: String\n}, {\n  type: undefined\n}, {\n  type: String\n}];\n_MatRadioButtonBase.propDecorators = {\n  id: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  ariaDescribedby: [{\n    type: Input,\n    args: ['aria-describedby']\n  }],\n  checked: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  labelPosition: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  color: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }],\n  _inputElement: [{\n    type: ViewChild,\n    args: ['input']\n  }]\n};\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\nclass MatRadioButton extends _MatRadioButtonBase {\n  constructor(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride, tabIndex) {\n    super(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride, tabIndex);\n  }\n}\nMatRadioButton.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-radio-button',\n    template: \"<!-- TODO(jelbourn): render the radio on either side of the content -->\\n<!-- TODO(mtlin): Evaluate trade-offs of using native radio vs. cost of additional bindings. -->\\n<label [attr.for]=\\\"inputId\\\" class=\\\"mat-radio-label\\\" #label>\\n  <!-- The actual 'radio' part of the control. -->\\n  <span class=\\\"mat-radio-container\\\">\\n    <span class=\\\"mat-radio-outer-circle\\\"></span>\\n    <span class=\\\"mat-radio-inner-circle\\\"></span>\\n    <input #input class=\\\"mat-radio-input cdk-visually-hidden\\\" type=\\\"radio\\\"\\n        [id]=\\\"inputId\\\"\\n        [checked]=\\\"checked\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [tabIndex]=\\\"tabIndex\\\"\\n        [attr.name]=\\\"name\\\"\\n        [attr.value]=\\\"value\\\"\\n        [required]=\\\"required\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n        (change)=\\\"_onInputChange($event)\\\"\\n        (click)=\\\"_onInputClick($event)\\\">\\n\\n    <!-- The ripple comes after the input so that we can target it with a CSS\\n         sibling selector when the input is focused. -->\\n    <span mat-ripple class=\\\"mat-radio-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n      <span class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></span>\\n    </span>\\n  </span>\\n\\n  <!-- The label content for radio control. -->\\n  <span class=\\\"mat-radio-label-content\\\" [class.mat-radio-label-before]=\\\"labelPosition == 'before'\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n    inputs: ['disableRipple', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'matRadioButton',\n    host: {\n      'class': 'mat-radio-button',\n      '[class.mat-radio-checked]': 'checked',\n      '[class.mat-radio-disabled]': 'disabled',\n      '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n      '[class.mat-primary]': 'color === \"primary\"',\n      '[class.mat-accent]': 'color === \"accent\"',\n      '[class.mat-warn]': 'color === \"warn\"',\n      // Needs to be removed since it causes some a11y issues (see #21266).\n      '[attr.tabindex]': 'null',\n      '[attr.id]': 'id',\n      '[attr.aria-label]': 'null',\n      '[attr.aria-labelledby]': 'null',\n      '[attr.aria-describedby]': 'null',\n      // Note: under normal conditions focus shouldn't land on this element, however it may be\n      // programmatically set, for example inside of a focus trap, in this case we want to forward\n      // the focus to the native element.\n      '(focus)': '_inputElement.nativeElement.focus()'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(0.001);-webkit-print-color-adjust:exact;color-adjust:exact}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5)}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none;top:0;left:0}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-ripple,.cdk-high-contrast-active .mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-ripple{outline:solid 3px}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"]\n  }]\n}];\nMatRadioButton.ctorParameters = () => [{\n  type: MatRadioGroup,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_RADIO_GROUP]\n  }]\n}, {\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: FocusMonitor\n}, {\n  type: UniqueSelectionDispatcher\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_RADIO_DEFAULT_OPTIONS]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatRadioModule {}\nMatRadioModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [MatRippleModule, MatCommonModule],\n    exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n    declarations: [MatRadioGroup, MatRadioButton]\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_RADIO_DEFAULT_OPTIONS, MAT_RADIO_DEFAULT_OPTIONS_FACTORY, MAT_RADIO_GROUP, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioButton, MatRadioChange, MatRadioGroup, MatRadioModule, _MatRadioButtonBase, _MatRadioGroupBase };","map":{"version":3,"names":["InjectionToken","forwardRef","EventEmitter","Directive","ChangeDetectorRef","Output","Input","ContentChildren","ElementRef","ViewChild","Component","ViewEncapsulation","ChangeDetectionStrategy","Optional","Inject","Attribute","NgModule","mixinDisableRipple","mixinTabIndex","MatRippleModule","MatCommonModule","FocusMonitor","coerceBooleanProperty","coerceNumberProperty","UniqueSelectionDispatcher","NG_VALUE_ACCESSOR","ANIMATION_MODULE_TYPE","MAT_RADIO_DEFAULT_OPTIONS","providedIn","factory","MAT_RADIO_DEFAULT_OPTIONS_FACTORY","color","nextUniqueId","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","provide","useExisting","MatRadioGroup","multi","MatRadioChange","constructor","source","value","MAT_RADIO_GROUP","_MatRadioGroupBase","_changeDetector","_value","_name","_selected","_isInitialized","_labelPosition","_disabled","_required","_controlValueAccessorChangeFn","onTouched","change","name","_updateRadioButtonNames","labelPosition","v","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","checked","selected","disabled","required","ngAfterContentInit","_touch","_radios","forEach","radio","_markForCheck","isAlreadySelected","_emitChangeEvent","emit","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","decorators","type","ctorParameters","propDecorators","args","selector","exportAs","providers","host","MatRadioButton","descendants","MatRadioButtonBase","_elementRef","_MatRadioButtonMixinBase","_MatRadioButtonBase","radioGroup","elementRef","_focusMonitor","_radioDispatcher","_animationMode","_providerOverride","tabIndex","_uniqueId","id","_checked","_removeUniqueSelectionListener","listen","newCheckedState","notify","_setDisabled","_color","inputId","focus","options","origin","focusVia","_inputElement","nativeElement","ngOnInit","ngAfterViewInit","monitor","subscribe","focusOrigin","ngOnDestroy","stopMonitoring","_isRippleDisabled","disableRipple","_onInputClick","event","stopPropagation","_onInputChange","groupValueChanged","String","undefined","ariaLabel","ariaLabelledby","ariaDescribedby","changeDetector","focusMonitor","radioDispatcher","animationMode","providerOverride","template","inputs","encapsulation","None","changeDetection","OnPush","styles","MatRadioModule","imports","exports","declarations"],"sources":["D:/alodelivery test/node_modules/@angular/material/fesm2015/radio.js"],"sourcesContent":["import { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Output, Input, ContentChildren, ElementRef, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Attribute, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_RADIO_DEFAULT_OPTIONS = new InjectionToken('mat-radio-default-options', {\n    providedIn: 'root',\n    factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\nfunction MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent'\n    };\n}\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nconst MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatRadioGroup),\n    multi: true\n};\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nclass MatRadioChange {\n    constructor(\n    /** The MatRadioButton that emits the change event. */\n    source, \n    /** The value of the MatRadioButton. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * Injection token that can be used to inject instances of `MatRadioGroup`. It serves as\n * alternative token to the actual `MatRadioGroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nconst MAT_RADIO_GROUP = new InjectionToken('MatRadioGroup');\n/**\n * Base class with all of the `MatRadioGroup` functionality.\n * @docs-private\n */\nclass _MatRadioGroupBase {\n    constructor(_changeDetector) {\n        this._changeDetector = _changeDetector;\n        /** Selected value for the radio group. */\n        this._value = null;\n        /** The HTML name attribute applied to radio buttons in this group. */\n        this._name = `mat-radio-group-${nextUniqueId++}`;\n        /** The currently selected radio button. Should match value. */\n        this._selected = null;\n        /** Whether the `value` has been set to its initial value. */\n        this._isInitialized = false;\n        /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n        this._labelPosition = 'after';\n        /** Whether the radio group is disabled. */\n        this._disabled = false;\n        /** Whether the radio group is required. */\n        this._required = false;\n        /** The method to be called in order to update ngModel */\n        this._controlValueAccessorChangeFn = () => { };\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         * @docs-private\n         */\n        this.onTouched = () => { };\n        /**\n         * Event emitted when the group value changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * a radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n    }\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    get name() { return this._name; }\n    set name(value) {\n        this._name = value;\n        this._updateRadioButtonNames();\n    }\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    get labelPosition() {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this._markRadiosForCheck();\n    }\n    /**\n     * Value for the radio-group. Should equal the value of the selected radio button if there is\n     * a corresponding radio button with a matching value. If there is not such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    get value() { return this._value; }\n    set value(newValue) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n            this._updateSelectedRadioFromValue();\n            this._checkSelectedRadioButton();\n        }\n    }\n    _checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n    /**\n     * The currently selected radio button. If set to a new radio button, the radio group value\n     * will be updated to match the new selected button.\n     */\n    get selected() { return this._selected; }\n    set selected(selected) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this._checkSelectedRadioButton();\n    }\n    /** Whether the radio group is disabled */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._markRadiosForCheck();\n    }\n    /** Whether the radio group is required */\n    get required() { return this._required; }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this._markRadiosForCheck();\n    }\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the MatRadioGroup.\n        this._isInitialized = true;\n    }\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    _touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n    _updateRadioButtonNames() {\n        if (this._radios) {\n            this._radios.forEach(radio => {\n                radio.name = this.name;\n                radio._markForCheck();\n            });\n        }\n    }\n    /** Updates the `selected` radio button from the internal _value state. */\n    _updateSelectedRadioFromValue() {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n        if (this._radios && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach(radio => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent() {\n        if (this._isInitialized) {\n            this.change.emit(new MatRadioChange(this._selected, this._value));\n        }\n    }\n    _markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach(radio => radio._markForCheck());\n        }\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n}\n_MatRadioGroupBase.decorators = [\n    { type: Directive }\n];\n_MatRadioGroupBase.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\n_MatRadioGroupBase.propDecorators = {\n    change: [{ type: Output }],\n    color: [{ type: Input }],\n    name: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    value: [{ type: Input }],\n    selected: [{ type: Input }],\n    disabled: [{ type: Input }],\n    required: [{ type: Input }]\n};\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\nclass MatRadioGroup extends _MatRadioGroupBase {\n}\nMatRadioGroup.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-radio-group',\n                exportAs: 'matRadioGroup',\n                providers: [\n                    MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,\n                    { provide: MAT_RADIO_GROUP, useExisting: MatRadioGroup },\n                ],\n                host: {\n                    'role': 'radiogroup',\n                    'class': 'mat-radio-group',\n                },\n            },] }\n];\nMatRadioGroup.propDecorators = {\n    _radios: [{ type: ContentChildren, args: [forwardRef(() => MatRadioButton), { descendants: true },] }]\n};\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nclass MatRadioButtonBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nconst _MatRadioButtonMixinBase = mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n/**\n * Base class with all of the `MatRadioButton` functionality.\n * @docs-private\n */\nclass _MatRadioButtonBase extends _MatRadioButtonMixinBase {\n    constructor(radioGroup, elementRef, _changeDetector, _focusMonitor, _radioDispatcher, _animationMode, _providerOverride, tabIndex) {\n        super(elementRef);\n        this._changeDetector = _changeDetector;\n        this._focusMonitor = _focusMonitor;\n        this._radioDispatcher = _radioDispatcher;\n        this._animationMode = _animationMode;\n        this._providerOverride = _providerOverride;\n        this._uniqueId = `mat-radio-${++nextUniqueId}`;\n        /** The unique ID for the radio button. */\n        this.id = this._uniqueId;\n        /**\n         * Event emitted when the checked state of this radio button changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * the radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n        /** Whether this radio is checked. */\n        this._checked = false;\n        /** Value assigned to this radio. */\n        this._value = null;\n        /** Unregister function for _radioDispatcher */\n        this._removeUniqueSelectionListener = () => { };\n        // Assertions. Ideally these should be stripped out by the compiler.\n        // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n        this.radioGroup = radioGroup;\n        if (tabIndex) {\n            this.tabIndex = coerceNumberProperty(tabIndex, 0);\n        }\n        this._removeUniqueSelectionListener =\n            _radioDispatcher.listen((id, name) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n    /** Whether this radio button is checked. */\n    get checked() { return this._checked; }\n    set checked(value) {\n        const newCheckedState = coerceBooleanProperty(value);\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            }\n            else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n    /** The value of this radio button. */\n    get value() { return this._value; }\n    set value(value) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup !== null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    get labelPosition() {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    /** Whether the radio button is disabled. */\n    get disabled() {\n        return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n    }\n    set disabled(value) {\n        this._setDisabled(coerceBooleanProperty(value));\n    }\n    /** Whether the radio button is required. */\n    get required() {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    /** Theme color of the radio button. */\n    get color() {\n        return this._color ||\n            (this.radioGroup && this.radioGroup.color) ||\n            this._providerOverride && this._providerOverride.color || 'accent';\n    }\n    set color(newValue) { this._color = newValue; }\n    /** ID of the native input element inside `<mat-radio-button>` */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /** Focuses the radio button. */\n    focus(options, origin) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        }\n        else {\n            this._inputElement.nativeElement.focus(options);\n        }\n    }\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            if (this.checked) {\n                this.radioGroup.selected = this;\n            }\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe(focusOrigin => {\n            if (!focusOrigin && this.radioGroup) {\n                this.radioGroup._touch();\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._removeUniqueSelectionListener();\n    }\n    /** Dispatch change event with current value. */\n    _emitChangeEvent() {\n        this.change.emit(new MatRadioChange(this, this._value));\n    }\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /**\n     * Triggered when the radio button received a click or the input recognized any change.\n     * Clicking on a label element, will trigger a change event on the associated input.\n     */\n    _onInputChange(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this._emitChangeEvent();\n        if (this.radioGroup) {\n            this.radioGroup._controlValueAccessorChangeFn(this.value);\n            if (groupValueChanged) {\n                this.radioGroup._emitChangeEvent();\n            }\n        }\n    }\n    /** Sets the disabled state and marks for check if a change occurred. */\n    _setDisabled(value) {\n        if (this._disabled !== value) {\n            this._disabled = value;\n            this._changeDetector.markForCheck();\n        }\n    }\n}\n_MatRadioButtonBase.decorators = [\n    { type: Directive }\n];\n_MatRadioButtonBase.ctorParameters = () => [\n    { type: _MatRadioGroupBase },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: FocusMonitor },\n    { type: UniqueSelectionDispatcher },\n    { type: String },\n    { type: undefined },\n    { type: String }\n];\n_MatRadioButtonBase.propDecorators = {\n    id: [{ type: Input }],\n    name: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    ariaDescribedby: [{ type: Input, args: ['aria-describedby',] }],\n    checked: [{ type: Input }],\n    value: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    disabled: [{ type: Input }],\n    required: [{ type: Input }],\n    color: [{ type: Input }],\n    change: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }]\n};\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\nclass MatRadioButton extends _MatRadioButtonBase {\n    constructor(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride, tabIndex) {\n        super(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride, tabIndex);\n    }\n}\nMatRadioButton.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-radio-button',\n                template: \"<!-- TODO(jelbourn): render the radio on either side of the content -->\\n<!-- TODO(mtlin): Evaluate trade-offs of using native radio vs. cost of additional bindings. -->\\n<label [attr.for]=\\\"inputId\\\" class=\\\"mat-radio-label\\\" #label>\\n  <!-- The actual 'radio' part of the control. -->\\n  <span class=\\\"mat-radio-container\\\">\\n    <span class=\\\"mat-radio-outer-circle\\\"></span>\\n    <span class=\\\"mat-radio-inner-circle\\\"></span>\\n    <input #input class=\\\"mat-radio-input cdk-visually-hidden\\\" type=\\\"radio\\\"\\n        [id]=\\\"inputId\\\"\\n        [checked]=\\\"checked\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [tabIndex]=\\\"tabIndex\\\"\\n        [attr.name]=\\\"name\\\"\\n        [attr.value]=\\\"value\\\"\\n        [required]=\\\"required\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n        (change)=\\\"_onInputChange($event)\\\"\\n        (click)=\\\"_onInputClick($event)\\\">\\n\\n    <!-- The ripple comes after the input so that we can target it with a CSS\\n         sibling selector when the input is focused. -->\\n    <span mat-ripple class=\\\"mat-radio-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n      <span class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></span>\\n    </span>\\n  </span>\\n\\n  <!-- The label content for radio control. -->\\n  <span class=\\\"mat-radio-label-content\\\" [class.mat-radio-label-before]=\\\"labelPosition == 'before'\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                inputs: ['disableRipple', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matRadioButton',\n                host: {\n                    'class': 'mat-radio-button',\n                    '[class.mat-radio-checked]': 'checked',\n                    '[class.mat-radio-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    '[class.mat-primary]': 'color === \"primary\"',\n                    '[class.mat-accent]': 'color === \"accent\"',\n                    '[class.mat-warn]': 'color === \"warn\"',\n                    // Needs to be removed since it causes some a11y issues (see #21266).\n                    '[attr.tabindex]': 'null',\n                    '[attr.id]': 'id',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[attr.aria-describedby]': 'null',\n                    // Note: under normal conditions focus shouldn't land on this element, however it may be\n                    // programmatically set, for example inside of a focus trap, in this case we want to forward\n                    // the focus to the native element.\n                    '(focus)': '_inputElement.nativeElement.focus()',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(0.001);-webkit-print-color-adjust:exact;color-adjust:exact}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5)}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none;top:0;left:0}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-ripple,.cdk-high-contrast-active .mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-ripple{outline:solid 3px}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"]\n            },] }\n];\nMatRadioButton.ctorParameters = () => [\n    { type: MatRadioGroup, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RADIO_GROUP,] }] },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: FocusMonitor },\n    { type: UniqueSelectionDispatcher },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RADIO_DEFAULT_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatRadioModule {\n}\nMatRadioModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatRippleModule, MatCommonModule],\n                exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n                declarations: [MatRadioGroup, MatRadioButton],\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_RADIO_DEFAULT_OPTIONS, MAT_RADIO_DEFAULT_OPTIONS_FACTORY, MAT_RADIO_GROUP, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioButton, MatRadioChange, MatRadioGroup, MatRadioModule, _MatRadioButtonBase, _MatRadioGroupBase };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}