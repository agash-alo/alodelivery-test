{"ast":null,"code":"/**\r\n * Handles formatting of pseudo-markup in text.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { BaseObject } from \"../Base\";\nimport { AMElement } from \"../rendering/AMElement\";\nimport { Adapter } from \"../utils/Adapter\";\nimport { registry } from \"../Registry\";\nimport * as $strings from \"../utils/Strings\";\nimport * as $type from \"../utils/Type\";\n/**\r\n * Handles formatting of pseudo-markdown in text.\r\n *\r\n * @todo Encode < > in output\r\n * @todo Add more adapters\r\n * @important\r\n */\nvar TextFormatter = /** @class */function (_super) {\n  __extends(TextFormatter, _super);\n  /**\r\n   * Constructor\r\n   */\n  function TextFormatter() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Adapter.\r\n     */\n    _this.adapter = new Adapter(_this);\n    _this.className = \"TextFormatter\";\n    _this.applyTheme();\n    return _this;\n  }\n  TextFormatter.prototype.debug = function () {};\n  /**\r\n   * Formats the text according to specifications passed in.\r\n   *\r\n   * @param text    Text to format\r\n   * @param output  Output format (svg, html)\r\n   * @return Formatted text\r\n   */\n  TextFormatter.prototype.format = function (text, output) {\n    // Apply default\n    if (!$type.hasValue(output)) {\n      output = \"svg\";\n    }\n    // Init return value\n    var formatted = \"\";\n    // Replace double (escaped) square spaces with remporary codes\n    text = this.escape(text);\n    // Divvy up the string by style tags\n    var styles = text.match(/\\[([^\\]]*?)\\]/gm);\n    if (!styles) {\n      // Nothing to do here - no formatting elements\n      return this.wrap(text, \"\", output);\n    }\n    // Get pure text - no style tags\n    var texts = text.split(/\\[[^\\[\\]]*\\]/);\n    // Go through each of the texts and wrap it in style tags\n    for (var i = 0, len = texts.length; i < len; i++) {\n      // Get text bit\n      var t = texts[i];\n      // Check if string is empty\n      if (t === \"\") {\n        continue;\n      }\n      // Run through an adapter\n      t = this.adapter.apply(\"chunk\", t);\n      // Get related style\n      var s = \"\";\n      if (i > 0) {\n        s = styles[i - 1].replace('[', '').replace(']', '');\n      }\n      // Wrap text in tag\n      formatted += this.wrap(t, s, output);\n    }\n    // Replace placeholders back\n    formatted = this.unescape(formatted);\n    // Return result\n    return this.cleanUp(formatted);\n  };\n  /**\r\n   * Replaces brackets with temporary placeholders.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text  Input text\r\n   * @return Escaped text\r\n   */\n  TextFormatter.prototype.escape = function (text) {\n    return text.replace(/\\[\\[/g, registry.getPlaceholder(\"1\")).replace(/([^\\/\\]]{1})\\]\\]/g, \"$1\" + registry.getPlaceholder(\"2\")).replace(/\\]\\]/g, registry.getPlaceholder(\"2\")).replace(/\\{\\{/g, registry.getPlaceholder(\"3\")).replace(/\\}\\}/g, registry.getPlaceholder(\"4\")).replace(/\\'\\'/g, registry.getPlaceholder(\"5\"));\n  };\n  /**\r\n   * Replaces placeholders back to brackets.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text  Escaped text\r\n   * @return Unescaped text\r\n   */\n  TextFormatter.prototype.unescape = function (text) {\n    return text.replace(new RegExp(registry.getPlaceholder(\"1\"), \"g\"), \"[[\").replace(new RegExp(registry.getPlaceholder(\"2\"), \"g\"), \"]]\").replace(new RegExp(registry.getPlaceholder(\"3\"), \"g\"), \"{{\").replace(new RegExp(registry.getPlaceholder(\"4\"), \"g\"), \"}}\").replace(new RegExp(registry.getPlaceholder(\"5\"), \"g\"), \"''\");\n  };\n  /**\r\n   * Cleans up the text text for leftover double square brackets.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text  Input text\r\n   * @return Cleaned up text\r\n   */\n  TextFormatter.prototype.cleanUp = function (text) {\n    return text.replace(/\\[\\[/g, \"[\").replace(/\\]\\]/g, \"]\").replace(/\\{\\{/g, \"{\").replace(/\\}\\}/g, \"}\").replace(/\\'\\'/g, \"'\");\n  };\n  /**\r\n   * Wraps text into corresponding tags.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text   Text to wrap\r\n   * @param style  Styles\r\n   * @param output  Format to output in (svg, html)\r\n   * @return Formatted string\r\n   */\n  TextFormatter.prototype.wrap = function (text, style, output) {\n    if (style === \"\" || style === \"/\") {\n      //return text;\n      style = \"\";\n    }\n    switch (output) {\n      case \"html\":\n        return this.wrapHtml(text, this.translateStyleShortcuts(style));\n      default:\n        return this.wrapSvg(text, this.translateStyleShortcuts(style));\n    }\n  };\n  /**\r\n   * Wraps text in styled SVG tag.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text   Text to wrap\r\n   * @param style  Style property\r\n   * @return Formatted tag\r\n   */\n  TextFormatter.prototype.wrapSvg = function (text, style) {\n    if (style === \"\") {\n      return \"<tspan>\" + text + \"</tspan>\";\n    } else {\n      return \"<tspan style='\" + style + \"'>\" + text + \"</tspan>\";\n    }\n  };\n  /**\r\n   * Returns an SVG `<tspan>` element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text   Text\r\n   * @param style  Style\r\n   * @return Element\r\n   */\n  TextFormatter.prototype.getSvgElement = function (text, style) {\n    var element = new AMElement(\"tspan\");\n    element.textContent = text;\n    if (style) {\n      element.node.setAttribute(\"style\", style);\n    }\n    return element;\n  };\n  /**\r\n   * Wraps text in HTML <span> tag.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text   Text to wrap\r\n   * @param style  Style property\r\n   * @return Formatted tag\r\n   * @todo Translate SVG styles into HTML ones\r\n   */\n  TextFormatter.prototype.wrapHtml = function (text, style) {\n    if (style === \"\") {\n      return \"<span>\" + text + \"</span>\";\n    } else {\n      return \"<span style='\" + this.styleSvgToHtml(style) + \"'>\" + text + \"</span>\";\n    }\n  };\n  /**\r\n   * Returns an HTML `<span>` element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text   Text/HTML\r\n   * @param style  Style definition\r\n   * @return HTML element\r\n   */\n  TextFormatter.prototype.getHtmlElement = function (text, style) {\n    var element = document.createElement(\"span\");\n    element.innerHTML = text;\n    if (style) {\n      element.setAttribute(\"style\", style);\n    }\n    return element;\n  };\n  /**\r\n   * Trabslates SVG CSS into HTML CSS.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param style  SVG CSS\r\n   * @return HTML CSS\r\n   * @todo Implement actual translation\r\n   */\n  TextFormatter.prototype.styleSvgToHtml = function (style) {\n    style = style.replace(/fill:/, \"color:\");\n    return style;\n  };\n  /**\r\n   * Translates style shortcuts into full styles, i.e.:\r\n   * \"bold\" => \"font-weight: bold\"\r\n   * \"#f00\" => \"fill: #f00\"\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param style  Untranslated style\r\n   * @return Translated style\r\n   * @todo Implement actual translation\r\n   */\n  TextFormatter.prototype.translateStyleShortcuts = function (style) {\n    if (style == \"\" || style == \"[ ]\") {\n      return \"\";\n    }\n    var cached = registry.getCache(\"translateStyleShortcuts_\" + style);\n    if (cached) {\n      return cached;\n    }\n    // Pre-process quoted text\n    var q = style.match(/('[^']*')|(\"[^\"]*\")/gi);\n    if (q) {\n      for (var i = 0; i < q.length; i++) {\n        style = style.replace(q[i], q[i].replace(/['\"]*/g, \"\").replace(/[ ]+/g, \"+\"));\n      }\n    }\n    // Get style parts\n    var b = style.match(/([\\w\\-]*:[\\s]?[^;\\s\\]]*)|(\\#[\\w]{1,6})|([\\w]+)|(\\/)/gi);\n    // Empty?\n    if (!b) {\n      return style;\n    }\n    // Check each part\n    for (var i = 0; i < b.length; i++) {\n      if (b[i].match(/^bold$/i)) {\n        // Bold\n        b[i] = \"font-weight:\" + b[i];\n      } else if (b[i] == \"/\") {\n        // Just closing tag\n        // Do nothing\n        b[i] = \"\";\n      } else if (!b[i].match(/:/)) {\n        // Color\n        b[i] = \"fill:\" + b[i];\n      } else {\n        b[i] = b[i].replace(/\\+/g, \" \");\n      }\n    }\n    var res = b.join(';');\n    registry.setCache(\"translateStyleShortcuts_\" + style, res);\n    return res;\n  };\n  /**\r\n   * Splits string into chunks. (style blocks, quoted blocks, regular blocks)\r\n   *\r\n   * If the second parameter `quotedBlocks` is set to `true` this method will\r\n   * also single out text blocks enclosed within single quotes that no\r\n   * formatting should be applied to, and they should be displayed as is.\r\n   *\r\n   * Default for the above is `false`, so that you can use single quote in text\r\n   * without escaping it.\r\n   *\r\n   * If enabled, single quotes can be escaped by doubling it - adding two\r\n   * single quotes, which will be replaced by a one single quote in the final\r\n   * output.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text          Text to chunk\r\n   * @param quotedBlocks  Use quoted blocks\r\n   * @param noFormatting  Formatting blocks will be treated as regular text\r\n   * @return Array of string chunks\r\n   */\n  TextFormatter.prototype.chunk = function (text, quotedBlocks, noFormatting) {\n    if (quotedBlocks === void 0) {\n      quotedBlocks = false;\n    }\n    if (noFormatting === void 0) {\n      noFormatting = false;\n    }\n    // Init result\n    var res = [];\n    // Replace double (escaped) square spaces and quotes with temporary codes\n    text = this.escape(text);\n    // Deal with style blocks\n    var chunks = quotedBlocks ? text.split(\"'\") : [text];\n    for (var i = 0; i < chunks.length; i++) {\n      var chunk = chunks[i];\n      // Empty?\n      if (chunk === \"\") {\n        continue;\n      }\n      if (i % 2 === 0) {\n        // Text outside quotes\n        // Parse for style blocks which are \"text\" chunks, the rest chunks are\n        // \"value\"\n        chunk = chunk.replace(/\\]\\[/g, \"]\" + $strings.PLACEHOLDER + \"[\");\n        chunk = chunk.replace(/\\[\\]/g, \"[ ]\");\n        var chunks2 = chunk.split(/[\\[\\]]+/);\n        for (var i2 = 0; i2 < chunks2.length; i2++) {\n          var chunk2 = this.cleanUp(this.unescape(chunks2[i2]));\n          // Placeholder?\n          if (chunk2 === $strings.PLACEHOLDER) {\n            continue;\n          }\n          // Empty?\n          if (chunk2 === \"\") {\n            continue;\n          }\n          // Block or value\n          if (i2 % 2 === 0) {\n            res.push({\n              \"type\": \"value\",\n              \"text\": this.adapter.apply(\"chunk\", chunk2)\n            });\n          } else {\n            res.push({\n              \"type\": noFormatting ? \"value\" : \"format\",\n              \"text\": \"[\" + chunk2 + \"]\"\n            });\n          }\n        }\n      } else {\n        // A text within doublequotes\n        // All chunks are \"text\"\n        var chunks2 = chunk.split(/[\\[\\]]+/);\n        for (var i2 = 0; i2 < chunks2.length; i2++) {\n          var chunk2 = this.cleanUp(this.unescape(chunks2[i2]));\n          // Empty?\n          if (chunk2 === \"\") {\n            continue;\n          }\n          // Block or text\n          if (i2 % 2 === 0) {\n            res.push({\n              \"type\": \"text\",\n              \"text\": chunk2\n            });\n          } else if (this.isImage(chunk2)) {\n            res.push({\n              \"type\": \"image\",\n              \"text\": \"[\" + chunk2 + \"]\"\n            });\n          } else {\n            res.push({\n              \"type\": \"format\",\n              \"text\": \"[\" + chunk2 + \"]\"\n            });\n          }\n        }\n      }\n    }\n    return res;\n  };\n  /**\r\n   * Checks if supplied format contains image information and should be\r\n   * formatted as such.\r\n   * I.e.: `[img: myImage.png]`\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text  Format\r\n   * @return `true` if it is an image\r\n   */\n  TextFormatter.prototype.isImage = function (text) {\n    return text.match(/img[ ]?:/) ? true : false;\n  };\n  return TextFormatter;\n}(BaseObject);\nexport { TextFormatter };\nvar formatter;\n/**\r\n * Returns the global instance of [[TextFormatter]].\r\n *\r\n * All classes and instances should reuse this universal text formatter,\r\n * rather than create their own instance of it.\r\n */\nexport function getTextFormatter() {\n  if (formatter == null) {\n    formatter = new TextFormatter();\n  }\n  return formatter;\n}\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"TextFormatter\"] = TextFormatter;","map":{"version":3,"names":["__extends","BaseObject","AMElement","Adapter","registry","$strings","$type","TextFormatter","_super","_this","call","adapter","className","applyTheme","prototype","debug","format","text","output","hasValue","formatted","escape","styles","match","wrap","texts","split","i","len","length","t","apply","s","replace","unescape","cleanUp","getPlaceholder","RegExp","style","wrapHtml","translateStyleShortcuts","wrapSvg","getSvgElement","element","textContent","node","setAttribute","styleSvgToHtml","getHtmlElement","document","createElement","innerHTML","cached","getCache","q","b","res","join","setCache","chunk","quotedBlocks","noFormatting","chunks","PLACEHOLDER","chunks2","i2","chunk2","push","isImage","formatter","getTextFormatter","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/formatters/TextFormatter.js"],"sourcesContent":["/**\r\n * Handles formatting of pseudo-markup in text.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../Base\";\r\nimport { AMElement } from \"../rendering/AMElement\";\r\nimport { Adapter } from \"../utils/Adapter\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $strings from \"../utils/Strings\";\r\nimport * as $type from \"../utils/Type\";\r\n/**\r\n * Handles formatting of pseudo-markdown in text.\r\n *\r\n * @todo Encode < > in output\r\n * @todo Add more adapters\r\n * @important\r\n */\r\nvar TextFormatter = /** @class */ (function (_super) {\r\n    __extends(TextFormatter, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function TextFormatter() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Adapter.\r\n         */\r\n        _this.adapter = new Adapter(_this);\r\n        _this.className = \"TextFormatter\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    TextFormatter.prototype.debug = function () { };\r\n    /**\r\n     * Formats the text according to specifications passed in.\r\n     *\r\n     * @param text    Text to format\r\n     * @param output  Output format (svg, html)\r\n     * @return Formatted text\r\n     */\r\n    TextFormatter.prototype.format = function (text, output) {\r\n        // Apply default\r\n        if (!$type.hasValue(output)) {\r\n            output = \"svg\";\r\n        }\r\n        // Init return value\r\n        var formatted = \"\";\r\n        // Replace double (escaped) square spaces with remporary codes\r\n        text = this.escape(text);\r\n        // Divvy up the string by style tags\r\n        var styles = text.match(/\\[([^\\]]*?)\\]/gm);\r\n        if (!styles) {\r\n            // Nothing to do here - no formatting elements\r\n            return this.wrap(text, \"\", output);\r\n        }\r\n        // Get pure text - no style tags\r\n        var texts = text.split(/\\[[^\\[\\]]*\\]/);\r\n        // Go through each of the texts and wrap it in style tags\r\n        for (var i = 0, len = texts.length; i < len; i++) {\r\n            // Get text bit\r\n            var t = texts[i];\r\n            // Check if string is empty\r\n            if (t === \"\") {\r\n                continue;\r\n            }\r\n            // Run through an adapter\r\n            t = this.adapter.apply(\"chunk\", t);\r\n            // Get related style\r\n            var s = \"\";\r\n            if (i > 0) {\r\n                s = styles[i - 1].replace('[', '').replace(']', '');\r\n            }\r\n            // Wrap text in tag\r\n            formatted += this.wrap(t, s, output);\r\n        }\r\n        // Replace placeholders back\r\n        formatted = this.unescape(formatted);\r\n        // Return result\r\n        return this.cleanUp(formatted);\r\n    };\r\n    /**\r\n     * Replaces brackets with temporary placeholders.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param text  Input text\r\n     * @return Escaped text\r\n     */\r\n    TextFormatter.prototype.escape = function (text) {\r\n        return text.\r\n            replace(/\\[\\[/g, registry.getPlaceholder(\"1\")).\r\n            replace(/([^\\/\\]]{1})\\]\\]/g, \"$1\" + registry.getPlaceholder(\"2\")).\r\n            replace(/\\]\\]/g, registry.getPlaceholder(\"2\")).\r\n            replace(/\\{\\{/g, registry.getPlaceholder(\"3\")).\r\n            replace(/\\}\\}/g, registry.getPlaceholder(\"4\")).\r\n            replace(/\\'\\'/g, registry.getPlaceholder(\"5\"));\r\n    };\r\n    /**\r\n     * Replaces placeholders back to brackets.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param text  Escaped text\r\n     * @return Unescaped text\r\n     */\r\n    TextFormatter.prototype.unescape = function (text) {\r\n        return text.\r\n            replace(new RegExp(registry.getPlaceholder(\"1\"), \"g\"), \"[[\").\r\n            replace(new RegExp(registry.getPlaceholder(\"2\"), \"g\"), \"]]\").\r\n            replace(new RegExp(registry.getPlaceholder(\"3\"), \"g\"), \"{{\").\r\n            replace(new RegExp(registry.getPlaceholder(\"4\"), \"g\"), \"}}\").\r\n            replace(new RegExp(registry.getPlaceholder(\"5\"), \"g\"), \"''\");\r\n    };\r\n    /**\r\n     * Cleans up the text text for leftover double square brackets.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param text  Input text\r\n     * @return Cleaned up text\r\n     */\r\n    TextFormatter.prototype.cleanUp = function (text) {\r\n        return text.\r\n            replace(/\\[\\[/g, \"[\").\r\n            replace(/\\]\\]/g, \"]\").\r\n            replace(/\\{\\{/g, \"{\").\r\n            replace(/\\}\\}/g, \"}\").\r\n            replace(/\\'\\'/g, \"'\");\r\n    };\r\n    /**\r\n     * Wraps text into corresponding tags.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param text   Text to wrap\r\n     * @param style  Styles\r\n     * @param output  Format to output in (svg, html)\r\n     * @return Formatted string\r\n     */\r\n    TextFormatter.prototype.wrap = function (text, style, output) {\r\n        if (style === \"\" || style === \"/\") {\r\n            //return text;\r\n            style = \"\";\r\n        }\r\n        switch (output) {\r\n            case \"html\":\r\n                return this.wrapHtml(text, this.translateStyleShortcuts(style));\r\n            default:\r\n                return this.wrapSvg(text, this.translateStyleShortcuts(style));\r\n        }\r\n    };\r\n    /**\r\n     * Wraps text in styled SVG tag.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param text   Text to wrap\r\n     * @param style  Style property\r\n     * @return Formatted tag\r\n     */\r\n    TextFormatter.prototype.wrapSvg = function (text, style) {\r\n        if (style === \"\") {\r\n            return \"<tspan>\" + text + \"</tspan>\";\r\n        }\r\n        else {\r\n            return \"<tspan style='\" + style + \"'>\" + text + \"</tspan>\";\r\n        }\r\n    };\r\n    /**\r\n     * Returns an SVG `<tspan>` element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param text   Text\r\n     * @param style  Style\r\n     * @return Element\r\n     */\r\n    TextFormatter.prototype.getSvgElement = function (text, style) {\r\n        var element = new AMElement(\"tspan\");\r\n        element.textContent = text;\r\n        if (style) {\r\n            element.node.setAttribute(\"style\", style);\r\n        }\r\n        return element;\r\n    };\r\n    /**\r\n     * Wraps text in HTML <span> tag.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param text   Text to wrap\r\n     * @param style  Style property\r\n     * @return Formatted tag\r\n     * @todo Translate SVG styles into HTML ones\r\n     */\r\n    TextFormatter.prototype.wrapHtml = function (text, style) {\r\n        if (style === \"\") {\r\n            return \"<span>\" + text + \"</span>\";\r\n        }\r\n        else {\r\n            return \"<span style='\" + this.styleSvgToHtml(style) + \"'>\" + text + \"</span>\";\r\n        }\r\n    };\r\n    /**\r\n     * Returns an HTML `<span>` element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param text   Text/HTML\r\n     * @param style  Style definition\r\n     * @return HTML element\r\n     */\r\n    TextFormatter.prototype.getHtmlElement = function (text, style) {\r\n        var element = document.createElement(\"span\");\r\n        element.innerHTML = text;\r\n        if (style) {\r\n            element.setAttribute(\"style\", style);\r\n        }\r\n        return element;\r\n    };\r\n    /**\r\n     * Trabslates SVG CSS into HTML CSS.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param style  SVG CSS\r\n     * @return HTML CSS\r\n     * @todo Implement actual translation\r\n     */\r\n    TextFormatter.prototype.styleSvgToHtml = function (style) {\r\n        style = style.replace(/fill:/, \"color:\");\r\n        return style;\r\n    };\r\n    /**\r\n     * Translates style shortcuts into full styles, i.e.:\r\n     * \"bold\" => \"font-weight: bold\"\r\n     * \"#f00\" => \"fill: #f00\"\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param style  Untranslated style\r\n     * @return Translated style\r\n     * @todo Implement actual translation\r\n     */\r\n    TextFormatter.prototype.translateStyleShortcuts = function (style) {\r\n        if (style == \"\" || style == \"[ ]\") {\r\n            return \"\";\r\n        }\r\n        var cached = registry.getCache(\"translateStyleShortcuts_\" + style);\r\n        if (cached) {\r\n            return cached;\r\n        }\r\n        // Pre-process quoted text\r\n        var q = style.match(/('[^']*')|(\"[^\"]*\")/gi);\r\n        if (q) {\r\n            for (var i = 0; i < q.length; i++) {\r\n                style = style.replace(q[i], q[i].replace(/['\"]*/g, \"\").replace(/[ ]+/g, \"+\"));\r\n            }\r\n        }\r\n        // Get style parts\r\n        var b = style.match(/([\\w\\-]*:[\\s]?[^;\\s\\]]*)|(\\#[\\w]{1,6})|([\\w]+)|(\\/)/gi);\r\n        // Empty?\r\n        if (!b) {\r\n            return style;\r\n        }\r\n        // Check each part\r\n        for (var i = 0; i < b.length; i++) {\r\n            if (b[i].match(/^bold$/i)) {\r\n                // Bold\r\n                b[i] = \"font-weight:\" + b[i];\r\n            }\r\n            else if (b[i] == \"/\") {\r\n                // Just closing tag\r\n                // Do nothing\r\n                b[i] = \"\";\r\n            }\r\n            else if (!b[i].match(/:/)) {\r\n                // Color\r\n                b[i] = \"fill:\" + b[i];\r\n            }\r\n            else {\r\n                b[i] = b[i].replace(/\\+/g, \" \");\r\n            }\r\n        }\r\n        var res = b.join(';');\r\n        registry.setCache(\"translateStyleShortcuts_\" + style, res);\r\n        return res;\r\n    };\r\n    /**\r\n     * Splits string into chunks. (style blocks, quoted blocks, regular blocks)\r\n     *\r\n     * If the second parameter `quotedBlocks` is set to `true` this method will\r\n     * also single out text blocks enclosed within single quotes that no\r\n     * formatting should be applied to, and they should be displayed as is.\r\n     *\r\n     * Default for the above is `false`, so that you can use single quote in text\r\n     * without escaping it.\r\n     *\r\n     * If enabled, single quotes can be escaped by doubling it - adding two\r\n     * single quotes, which will be replaced by a one single quote in the final\r\n     * output.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param text          Text to chunk\r\n     * @param quotedBlocks  Use quoted blocks\r\n     * @param noFormatting  Formatting blocks will be treated as regular text\r\n     * @return Array of string chunks\r\n     */\r\n    TextFormatter.prototype.chunk = function (text, quotedBlocks, noFormatting) {\r\n        if (quotedBlocks === void 0) { quotedBlocks = false; }\r\n        if (noFormatting === void 0) { noFormatting = false; }\r\n        // Init result\r\n        var res = [];\r\n        // Replace double (escaped) square spaces and quotes with temporary codes\r\n        text = this.escape(text);\r\n        // Deal with style blocks\r\n        var chunks = quotedBlocks ? text.split(\"'\") : [text];\r\n        for (var i = 0; i < chunks.length; i++) {\r\n            var chunk = chunks[i];\r\n            // Empty?\r\n            if (chunk === \"\") {\r\n                continue;\r\n            }\r\n            if ((i % 2) === 0) {\r\n                // Text outside quotes\r\n                // Parse for style blocks which are \"text\" chunks, the rest chunks are\r\n                // \"value\"\r\n                chunk = chunk.replace(/\\]\\[/g, \"]\" + $strings.PLACEHOLDER + \"[\");\r\n                chunk = chunk.replace(/\\[\\]/g, \"[ ]\");\r\n                var chunks2 = chunk.split(/[\\[\\]]+/);\r\n                for (var i2 = 0; i2 < chunks2.length; i2++) {\r\n                    var chunk2 = this.cleanUp(this.unescape(chunks2[i2]));\r\n                    // Placeholder?\r\n                    if (chunk2 === $strings.PLACEHOLDER) {\r\n                        continue;\r\n                    }\r\n                    // Empty?\r\n                    if (chunk2 === \"\") {\r\n                        continue;\r\n                    }\r\n                    // Block or value\r\n                    if ((i2 % 2) === 0) {\r\n                        res.push({\r\n                            \"type\": \"value\",\r\n                            \"text\": this.adapter.apply(\"chunk\", chunk2)\r\n                        });\r\n                    }\r\n                    else {\r\n                        res.push({\r\n                            \"type\": noFormatting ? \"value\" : \"format\",\r\n                            \"text\": \"[\" + chunk2 + \"]\"\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // A text within doublequotes\r\n                // All chunks are \"text\"\r\n                var chunks2 = chunk.split(/[\\[\\]]+/);\r\n                for (var i2 = 0; i2 < chunks2.length; i2++) {\r\n                    var chunk2 = this.cleanUp(this.unescape(chunks2[i2]));\r\n                    // Empty?\r\n                    if (chunk2 === \"\") {\r\n                        continue;\r\n                    }\r\n                    // Block or text\r\n                    if ((i2 % 2) === 0) {\r\n                        res.push({\r\n                            \"type\": \"text\",\r\n                            \"text\": chunk2\r\n                        });\r\n                    }\r\n                    else if (this.isImage(chunk2)) {\r\n                        res.push({\r\n                            \"type\": \"image\",\r\n                            \"text\": \"[\" + chunk2 + \"]\"\r\n                        });\r\n                    }\r\n                    else {\r\n                        res.push({\r\n                            \"type\": \"format\",\r\n                            \"text\": \"[\" + chunk2 + \"]\"\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return res;\r\n    };\r\n    /**\r\n     * Checks if supplied format contains image information and should be\r\n     * formatted as such.\r\n     * I.e.: `[img: myImage.png]`\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param text  Format\r\n     * @return `true` if it is an image\r\n     */\r\n    TextFormatter.prototype.isImage = function (text) {\r\n        return text.match(/img[ ]?:/) ? true : false;\r\n    };\r\n    return TextFormatter;\r\n}(BaseObject));\r\nexport { TextFormatter };\r\nvar formatter;\r\n/**\r\n * Returns the global instance of [[TextFormatter]].\r\n *\r\n * All classes and instances should reuse this universal text formatter,\r\n * rather than create their own instance of it.\r\n */\r\nexport function getTextFormatter() {\r\n    if (formatter == null) {\r\n        formatter = new TextFormatter();\r\n    }\r\n    return formatter;\r\n}\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TextFormatter\"] = TextFormatter;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}