{"ast":null,"code":"import { Platform, PlatformModule } from '@angular/cdk/platform';\nimport { CdkScrollable, ScrollDispatcher, ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, Inject, forwardRef, ElementRef, NgZone, EventEmitter, Optional, Input, HostBinding, Output, HostListener, QueryList, ContentChildren, ContentChild, ViewChild, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { FocusTrapFactory, FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Subject, fromEvent, merge } from 'rxjs';\nimport { filter, map, mapTo, takeUntil, distinctUntilChanged, take, startWith, debounceTime } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nconst matDrawerAnimations = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n  // We remove the `transform` here completely, rather than setting it to zero, because:\n  // 1. Having a transform can cause elements with ripples or an animated\n  //    transform to shift around in Chrome with an RTL layout (see #10023).\n  // 2. 3d transforms causes text to appear blurry on IE and Edge.\n  state('open, open-instant', style({\n    'transform': 'none',\n    'visibility': 'visible'\n  })), state('void', style({\n    // Avoids the shadow showing up when closed in SSR.\n    'box-shadow': 'none',\n    'visibility': 'hidden'\n  })), transition('void => open-instant', animate('0ms')), transition('void <=> open, open-instant => void', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))])\n};\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nfunction throwMatDuplicatedDrawerError(position) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n/** Configures whether drawers should use auto sizing by default. */\nconst MAT_DRAWER_DEFAULT_AUTOSIZE = new InjectionToken('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n  providedIn: 'root',\n  factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY\n});\n/**\n * Used to provide a drawer container to a drawer while avoiding circular references.\n * @docs-private\n */\nconst MAT_DRAWER_CONTAINER = new InjectionToken('MAT_DRAWER_CONTAINER');\n/** @docs-private */\nfunction MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY() {\n  return false;\n}\nclass MatDrawerContent extends CdkScrollable {\n  constructor(_changeDetectorRef, _container, elementRef, scrollDispatcher, ngZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n    this._changeDetectorRef = _changeDetectorRef;\n    this._container = _container;\n  }\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\nMatDrawerContent.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-drawer-content',\n    template: '<ng-content></ng-content>',\n    host: {\n      'class': 'mat-drawer-content',\n      '[style.margin-left.px]': '_container._contentMargins.left',\n      '[style.margin-right.px]': '_container._contentMargins.right'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n  }]\n}];\nMatDrawerContent.ctorParameters = () => [{\n  type: ChangeDetectorRef\n}, {\n  type: MatDrawerContainer,\n  decorators: [{\n    type: Inject,\n    args: [forwardRef(() => MatDrawerContainer)]\n  }]\n}, {\n  type: ElementRef\n}, {\n  type: ScrollDispatcher\n}, {\n  type: NgZone\n}];\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\nclass MatDrawer {\n  constructor(_elementRef, _focusTrapFactory, _focusMonitor, _platform, _ngZone, _doc, _container) {\n    this._elementRef = _elementRef;\n    this._focusTrapFactory = _focusTrapFactory;\n    this._focusMonitor = _focusMonitor;\n    this._platform = _platform;\n    this._ngZone = _ngZone;\n    this._doc = _doc;\n    this._container = _container;\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    /** Whether the drawer is initialized. Used for disabling the initial animation. */\n    this._enableAnimations = false;\n    this._position = 'start';\n    this._mode = 'over';\n    this._disableClose = false;\n    this._opened = false;\n    /** Emits whenever the drawer has started animating. */\n    this._animationStarted = new Subject();\n    /** Emits whenever the drawer is done animating. */\n    this._animationEnd = new Subject();\n    /** Current state of the sidenav animation. */\n    // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n    // metadata is not inherited by child classes, instead the host binding data is defined in a way\n    // that can be inherited.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    this._animationState = 'void';\n    /** Event emitted when the drawer open state is changed. */\n    this.openedChange =\n    // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n    new EventEmitter( /* isAsync */true);\n    /** Event emitted when the drawer has been opened. */\n    this._openedStream = this.openedChange.pipe(filter(o => o), map(() => {}));\n    /** Event emitted when the drawer has started opening. */\n    this.openedStart = this._animationStarted.pipe(filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0), mapTo(undefined));\n    /** Event emitted when the drawer has been closed. */\n    this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => {}));\n    /** Event emitted when the drawer has started closing. */\n    this.closedStart = this._animationStarted.pipe(filter(e => e.fromState !== e.toState && e.toState === 'void'), mapTo(undefined));\n    /** Emits when the component is destroyed. */\n    this._destroyed = new Subject();\n    /** Event emitted when the drawer's position changes. */\n    // tslint:disable-next-line:no-output-on-prefix\n    this.onPositionChanged = new EventEmitter();\n    /**\n     * An observable that emits when the drawer mode changes. This is used by the drawer container to\n     * to know when to when the mode changes so it can adapt the margins on the content.\n     */\n    this._modeChanged = new Subject();\n    this.openedChange.subscribe(opened => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement;\n        }\n        this._takeFocus();\n      } else if (this._isFocusWithinDrawer()) {\n        this._restoreFocus();\n      }\n    });\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n      fromEvent(this._elementRef.nativeElement, 'keydown').pipe(filter(event => {\n        return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n      }), takeUntil(this._destroyed)).subscribe(event => this._ngZone.run(() => {\n        this.close();\n        event.stopPropagation();\n        event.preventDefault();\n      }));\n    });\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      const {\n        fromState,\n        toState\n      } = event;\n      if (toState.indexOf('open') === 0 && fromState === 'void' || toState === 'void' && fromState.indexOf('open') === 0) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n  /** The side that the drawer is attached to. */\n  get position() {\n    return this._position;\n  }\n  set position(value) {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  get mode() {\n    return this._mode;\n  }\n  set mode(value) {\n    this._mode = value;\n    this._updateFocusTrapState();\n    this._modeChanged.next();\n  }\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  get disableClose() {\n    return this._disableClose;\n  }\n  set disableClose(value) {\n    this._disableClose = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the drawer should focus the first focusable element automatically when opened.\n   * Defaults to false in when `mode` is set to `side`, otherwise defaults to `true`. If explicitly\n   * enabled, focus will be moved into the sidenav in `side` mode as well.\n   */\n  get autoFocus() {\n    const value = this._autoFocus;\n    // Note that usually we disable auto focusing in `side` mode, because we don't know how the\n    // sidenav is being used, but in some cases it still makes sense to do it. If the consumer\n    // explicitly enabled `autoFocus`, we take it as them always wanting to enable it.\n    return value == null ? this.mode !== 'side' : value;\n  }\n  set autoFocus(value) {\n    this._autoFocus = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  get opened() {\n    return this._opened;\n  }\n  set opened(value) {\n    this.toggle(coerceBooleanProperty(value));\n  }\n  /**\n   * Moves focus into the drawer. Note that this works even if\n   * the focus trap is disabled in `side` mode.\n   */\n  _takeFocus() {\n    if (!this.autoFocus || !this._focusTrap) {\n      return;\n    }\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n  /**\n   * Restores focus to the element that was originally focused when the drawer opened.\n   * If no element was focused at that time, the focus will be restored to the drawer.\n   */\n  _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n    // Note that we don't check via `instanceof HTMLElement` so that we can cover SVGs as well.\n    if (this._elementFocusedBeforeDrawerWasOpened) {\n      this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n    } else {\n      this._elementRef.nativeElement.blur();\n    }\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n  /** Whether focus is currently within the drawer. */\n  _isFocusWithinDrawer() {\n    var _a;\n    const activeEl = (_a = this._doc) === null || _a === void 0 ? void 0 : _a.activeElement;\n    return !!activeEl && this._elementRef.nativeElement.contains(activeEl);\n  }\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._updateFocusTrapState();\n  }\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n    this._modeChanged.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia) {\n    return this.toggle(true, openedVia);\n  }\n  /** Close the drawer. */\n  close() {\n    return this.toggle(false);\n  }\n  /** Closes the drawer with context that the backdrop was clicked. */\n  _closeViaBackdropClick() {\n    // If the drawer is closed upon a backdrop click, we always want to restore focus. We\n    // don't need to check whether focus is currently in the drawer, as clicking on the\n    // backdrop causes blurring of the active element.\n    return this._setOpen( /* isOpen */false, /* restoreFocus */true);\n  }\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen = !this.opened, openedVia) {\n    // If the focus is currently inside the drawer content and we are closing the drawer,\n    // restore the focus to the initially focused element (when the drawer opened).\n    return this._setOpen(isOpen, /* restoreFocus */!isOpen && this._isFocusWithinDrawer(), openedVia);\n  }\n  /**\n   * Toggles the opened state of the drawer.\n   * @param isOpen Whether the drawer should open or close.\n   * @param restoreFocus Whether focus should be restored on close.\n   * @param openedVia Focus origin that can be optionally set when opening a drawer. The\n   *   origin will be used later when focus is restored on drawer close.\n   */\n  _setOpen(isOpen, restoreFocus, openedVia = 'program') {\n    this._opened = isOpen;\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      if (restoreFocus) {\n        this._restoreFocus();\n      }\n    }\n    this._updateFocusTrapState();\n    return new Promise(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n  _getWidth() {\n    return this._elementRef.nativeElement ? this._elementRef.nativeElement.offsetWidth || 0 : 0;\n  }\n  /** Updates the enabled state of the focus trap. */\n  _updateFocusTrapState() {\n    if (this._focusTrap) {\n      // The focus trap is only enabled when the drawer is open in any mode other than side.\n      this._focusTrap.enabled = this.opened && this.mode !== 'side';\n    }\n  }\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  _animationStartListener(event) {\n    this._animationStarted.next(event);\n  }\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  _animationDoneListener(event) {\n    this._animationEnd.next(event);\n  }\n}\nMatDrawer.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-drawer',\n    exportAs: 'matDrawer',\n    template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\",\n    animations: [matDrawerAnimations.transformDrawer],\n    host: {\n      'class': 'mat-drawer',\n      // must prevent the browser from aligning text based on value\n      '[attr.align]': 'null',\n      '[class.mat-drawer-end]': 'position === \"end\"',\n      '[class.mat-drawer-over]': 'mode === \"over\"',\n      '[class.mat-drawer-push]': 'mode === \"push\"',\n      '[class.mat-drawer-side]': 'mode === \"side\"',\n      '[class.mat-drawer-opened]': 'opened',\n      'tabIndex': '-1'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n  }]\n}];\nMatDrawer.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: FocusTrapFactory\n}, {\n  type: FocusMonitor\n}, {\n  type: Platform\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: MatDrawerContainer,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_DRAWER_CONTAINER]\n  }]\n}];\nMatDrawer.propDecorators = {\n  position: [{\n    type: Input\n  }],\n  mode: [{\n    type: Input\n  }],\n  disableClose: [{\n    type: Input\n  }],\n  autoFocus: [{\n    type: Input\n  }],\n  opened: [{\n    type: Input\n  }],\n  _animationState: [{\n    type: HostBinding,\n    args: ['@transform']\n  }],\n  openedChange: [{\n    type: Output\n  }],\n  _openedStream: [{\n    type: Output,\n    args: ['opened']\n  }],\n  openedStart: [{\n    type: Output\n  }],\n  _closedStream: [{\n    type: Output,\n    args: ['closed']\n  }],\n  closedStart: [{\n    type: Output\n  }],\n  onPositionChanged: [{\n    type: Output,\n    args: ['positionChanged']\n  }],\n  _animationStartListener: [{\n    type: HostListener,\n    args: ['@transform.start', ['$event']]\n  }],\n  _animationDoneListener: [{\n    type: HostListener,\n    args: ['@transform.done', ['$event']]\n  }]\n};\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nclass MatDrawerContainer {\n  constructor(_dir, _element, _ngZone, _changeDetectorRef, viewportRuler, defaultAutosize = false, _animationMode) {\n    this._dir = _dir;\n    this._element = _element;\n    this._ngZone = _ngZone;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._animationMode = _animationMode;\n    /** Drawers that belong to this container. */\n    this._drawers = new QueryList();\n    /** Event emitted when the drawer backdrop is clicked. */\n    this.backdropClick = new EventEmitter();\n    /** Emits when the component is destroyed. */\n    this._destroyed = new Subject();\n    /** Emits on every ngDoCheck. Used for debouncing reflows. */\n    this._doCheckSubject = new Subject();\n    /**\n     * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n     * drawer is open. We use margin rather than transform even for push mode because transform breaks\n     * fixed position elements inside of the transformed element.\n     */\n    this._contentMargins = {\n      left: null,\n      right: null\n    };\n    this._contentMarginChanges = new Subject();\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this.updateContentMargins();\n      });\n    }\n    // Since the minimum width of the sidenav depends on the viewport width,\n    // we need to recompute the margins if the viewport changes.\n    viewportRuler.change().pipe(takeUntil(this._destroyed)).subscribe(() => this.updateContentMargins());\n    this._autosize = defaultAutosize;\n  }\n  /** The drawer child with the `start` position. */\n  get start() {\n    return this._start;\n  }\n  /** The drawer child with the `end` position. */\n  get end() {\n    return this._end;\n  }\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  get autosize() {\n    return this._autosize;\n  }\n  set autosize(value) {\n    this._autosize = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable() {\n    return this._userContent || this._content;\n  }\n  ngAfterContentInit() {\n    this._allDrawers.changes.pipe(startWith(this._allDrawers), takeUntil(this._destroyed)).subscribe(drawer => {\n      this._drawers.reset(drawer.filter(item => !item._container || item._container === this));\n      this._drawers.notifyOnChanges();\n    });\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n      this._drawers.forEach(drawer => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n      if (!this._drawers.length || this._isDrawerOpen(this._start) || this._isDrawerOpen(this._end)) {\n        this.updateContentMargins();\n      }\n      this._changeDetectorRef.markForCheck();\n    });\n    // Avoid hitting the NgZone through the debounce timeout.\n    this._ngZone.runOutsideAngular(() => {\n      this._doCheckSubject.pipe(debounceTime(10),\n      // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)).subscribe(() => this.updateContentMargins());\n    });\n  }\n  ngOnDestroy() {\n    this._contentMarginChanges.complete();\n    this._doCheckSubject.complete();\n    this._drawers.destroy();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n  /** Calls `open` of both start and end drawers */\n  open() {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n  /** Calls `close` of both start and end drawers */\n  close() {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n    let left = 0;\n    let right = 0;\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._getWidth();\n      } else if (this._left.mode == 'push') {\n        const width = this._left._getWidth();\n        left += width;\n        right -= width;\n      }\n    }\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._getWidth();\n      } else if (this._right.mode == 'push') {\n        const width = this._right._getWidth();\n        right += width;\n        left -= width;\n      }\n    }\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null;\n    right = right || null;\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {\n        left,\n        right\n      };\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n  }\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  _watchDrawerToggle(drawer) {\n    drawer._animationStarted.pipe(filter(event => event.fromState !== event.toState), takeUntil(this._drawers.changes)).subscribe(event => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n      this.updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() => this._setContainerClass(drawer.opened));\n    }\n  }\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  _watchDrawerPosition(drawer) {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  _watchDrawerMode(drawer) {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed))).subscribe(() => {\n        this.updateContentMargins();\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  _setContainerClass(isAdd) {\n    const classList = this._element.nativeElement.classList;\n    const className = 'mat-drawer-container-has-open';\n    if (isAdd) {\n      classList.add(className);\n    } else {\n      classList.remove(className);\n    }\n  }\n  /** Validate the state of the drawer children components. */\n  _validateDrawers() {\n    this._start = this._end = null;\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n    this._right = this._left = null;\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  _isPushed() {\n    return this._isDrawerOpen(this._start) && this._start.mode != 'over' || this._isDrawerOpen(this._end) && this._end.mode != 'over';\n  }\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawersViaBackdrop();\n  }\n  _closeModalDrawersViaBackdrop() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end].filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer)).forEach(drawer => drawer._closeViaBackdropClick());\n  }\n  _isShowingBackdrop() {\n    return this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start) || this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end);\n  }\n  _canHaveBackdrop(drawer) {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n  _isDrawerOpen(drawer) {\n    return drawer != null && drawer.opened;\n  }\n}\nMatDrawerContainer.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-drawer-container',\n    exportAs: 'matDrawerContainer',\n    template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-drawer\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-drawer-content\\\">\\n</ng-content>\\n<mat-drawer-content *ngIf=\\\"!_content\\\">\\n  <ng-content></ng-content>\\n</mat-drawer-content>\\n\",\n    host: {\n      'class': 'mat-drawer-container',\n      '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    providers: [{\n      provide: MAT_DRAWER_CONTAINER,\n      useExisting: MatDrawerContainer\n    }],\n    styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\"]\n  }]\n}];\nMatDrawerContainer.ctorParameters = () => [{\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: ElementRef\n}, {\n  type: NgZone\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: ViewportRuler\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_DRAWER_DEFAULT_AUTOSIZE]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}];\nMatDrawerContainer.propDecorators = {\n  _allDrawers: [{\n    type: ContentChildren,\n    args: [MatDrawer, {\n      // We need to use `descendants: true`, because Ivy will no longer match\n      // indirect descendants if it's left as false.\n      descendants: true\n    }]\n  }],\n  _content: [{\n    type: ContentChild,\n    args: [MatDrawerContent]\n  }],\n  _userContent: [{\n    type: ViewChild,\n    args: [MatDrawerContent]\n  }],\n  autosize: [{\n    type: Input\n  }],\n  hasBackdrop: [{\n    type: Input\n  }],\n  backdropClick: [{\n    type: Output\n  }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSidenavContent extends MatDrawerContent {\n  constructor(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\nMatSidenavContent.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-sidenav-content',\n    template: '<ng-content></ng-content>',\n    host: {\n      'class': 'mat-drawer-content mat-sidenav-content',\n      '[style.margin-left.px]': '_container._contentMargins.left',\n      '[style.margin-right.px]': '_container._contentMargins.right'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n  }]\n}];\nMatSidenavContent.ctorParameters = () => [{\n  type: ChangeDetectorRef\n}, {\n  type: MatSidenavContainer,\n  decorators: [{\n    type: Inject,\n    args: [forwardRef(() => MatSidenavContainer)]\n  }]\n}, {\n  type: ElementRef\n}, {\n  type: ScrollDispatcher\n}, {\n  type: NgZone\n}];\nclass MatSidenav extends MatDrawer {\n  constructor() {\n    super(...arguments);\n    this._fixedInViewport = false;\n    this._fixedTopGap = 0;\n    this._fixedBottomGap = 0;\n  }\n  /** Whether the sidenav is fixed in the viewport. */\n  get fixedInViewport() {\n    return this._fixedInViewport;\n  }\n  set fixedInViewport(value) {\n    this._fixedInViewport = coerceBooleanProperty(value);\n  }\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  get fixedTopGap() {\n    return this._fixedTopGap;\n  }\n  set fixedTopGap(value) {\n    this._fixedTopGap = coerceNumberProperty(value);\n  }\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  get fixedBottomGap() {\n    return this._fixedBottomGap;\n  }\n  set fixedBottomGap(value) {\n    this._fixedBottomGap = coerceNumberProperty(value);\n  }\n}\nMatSidenav.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-sidenav',\n    exportAs: 'matSidenav',\n    template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\",\n    animations: [matDrawerAnimations.transformDrawer],\n    host: {\n      'class': 'mat-drawer mat-sidenav',\n      'tabIndex': '-1',\n      // must prevent the browser from aligning text based on value\n      '[attr.align]': 'null',\n      '[class.mat-drawer-end]': 'position === \"end\"',\n      '[class.mat-drawer-over]': 'mode === \"over\"',\n      '[class.mat-drawer-push]': 'mode === \"push\"',\n      '[class.mat-drawer-side]': 'mode === \"side\"',\n      '[class.mat-drawer-opened]': 'opened',\n      '[class.mat-sidenav-fixed]': 'fixedInViewport',\n      '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n      '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n  }]\n}];\nMatSidenav.propDecorators = {\n  fixedInViewport: [{\n    type: Input\n  }],\n  fixedTopGap: [{\n    type: Input\n  }],\n  fixedBottomGap: [{\n    type: Input\n  }]\n};\nclass MatSidenavContainer extends MatDrawerContainer {}\nMatSidenavContainer.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-sidenav-container',\n    exportAs: 'matSidenavContainer',\n    template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-sidenav\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-sidenav-content\\\">\\n</ng-content>\\n<mat-sidenav-content *ngIf=\\\"!_content\\\" cdkScrollable>\\n  <ng-content></ng-content>\\n</mat-sidenav-content>\\n\",\n    host: {\n      'class': 'mat-drawer-container mat-sidenav-container',\n      '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    providers: [{\n      provide: MAT_DRAWER_CONTAINER,\n      useExisting: MatSidenavContainer\n    }],\n    styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\"]\n  }]\n}];\nMatSidenavContainer.propDecorators = {\n  _allDrawers: [{\n    type: ContentChildren,\n    args: [MatSidenav, {\n      // We need to use `descendants: true`, because Ivy will no longer match\n      // indirect descendants if it's left as false.\n      descendants: true\n    }]\n  }],\n  _content: [{\n    type: ContentChild,\n    args: [MatSidenavContent]\n  }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSidenavModule {}\nMatSidenavModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule, MatCommonModule, PlatformModule, CdkScrollableModule],\n    exports: [CdkScrollableModule, MatCommonModule, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent],\n    declarations: [MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent]\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DRAWER_DEFAULT_AUTOSIZE, MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent, MatSidenavModule, matDrawerAnimations, throwMatDuplicatedDrawerError, MAT_DRAWER_CONTAINER as ɵangular_material_src_material_sidenav_sidenav_a };","map":{"version":3,"names":["Platform","PlatformModule","CdkScrollable","ScrollDispatcher","ViewportRuler","CdkScrollableModule","DOCUMENT","CommonModule","InjectionToken","Component","ChangeDetectionStrategy","ViewEncapsulation","ChangeDetectorRef","Inject","forwardRef","ElementRef","NgZone","EventEmitter","Optional","Input","HostBinding","Output","HostListener","QueryList","ContentChildren","ContentChild","ViewChild","NgModule","MatCommonModule","FocusTrapFactory","FocusMonitor","Directionality","coerceBooleanProperty","coerceNumberProperty","ESCAPE","hasModifierKey","Subject","fromEvent","merge","filter","map","mapTo","takeUntil","distinctUntilChanged","take","startWith","debounceTime","trigger","state","style","transition","animate","ANIMATION_MODULE_TYPE","matDrawerAnimations","transformDrawer","throwMatDuplicatedDrawerError","position","Error","MAT_DRAWER_DEFAULT_AUTOSIZE","providedIn","factory","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","MAT_DRAWER_CONTAINER","MatDrawerContent","constructor","_changeDetectorRef","_container","elementRef","scrollDispatcher","ngZone","ngAfterContentInit","_contentMarginChanges","subscribe","markForCheck","decorators","type","args","selector","template","host","changeDetection","OnPush","encapsulation","None","ctorParameters","MatDrawerContainer","MatDrawer","_elementRef","_focusTrapFactory","_focusMonitor","_platform","_ngZone","_doc","_elementFocusedBeforeDrawerWasOpened","_enableAnimations","_position","_mode","_disableClose","_opened","_animationStarted","_animationEnd","_animationState","openedChange","_openedStream","pipe","o","openedStart","e","fromState","toState","indexOf","undefined","_closedStream","closedStart","_destroyed","onPositionChanged","_modeChanged","opened","activeElement","_takeFocus","_isFocusWithinDrawer","_restoreFocus","runOutsideAngular","nativeElement","event","keyCode","disableClose","run","close","stopPropagation","preventDefault","x","y","emit","value","mode","_updateFocusTrapState","next","autoFocus","_autoFocus","toggle","_focusTrap","focusInitialElementWhenReady","then","hasMovedFocus","focus","focusVia","_openedVia","blur","_a","activeEl","contains","create","ngAfterContentChecked","isBrowser","ngOnDestroy","destroy","complete","open","openedVia","_closeViaBackdropClick","_setOpen","isOpen","restoreFocus","Promise","resolve","_getWidth","offsetWidth","enabled","_animationStartListener","_animationDoneListener","exportAs","animations","propDecorators","_dir","_element","viewportRuler","defaultAutosize","_animationMode","_drawers","backdropClick","_doCheckSubject","_contentMargins","left","right","change","_validateDrawers","updateContentMargins","_autosize","start","_start","end","_end","autosize","hasBackdrop","_backdropOverride","scrollable","_userContent","_content","_allDrawers","changes","drawer","reset","item","notifyOnChanges","forEach","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","length","_isDrawerOpen","_left","width","_right","ngDoCheck","_isPushed","classList","add","_setContainerClass","onMicrotaskEmpty","isAdd","className","remove","ngDevMode","_onBackdropClicked","_closeModalDrawersViaBackdrop","_canHaveBackdrop","_isShowingBackdrop","providers","provide","useExisting","styles","String","descendants","MatSidenavContent","changeDetectorRef","container","MatSidenavContainer","MatSidenav","arguments","_fixedInViewport","_fixedTopGap","_fixedBottomGap","fixedInViewport","fixedTopGap","fixedBottomGap","MatSidenavModule","imports","exports","declarations","ɵangular_material_src_material_sidenav_sidenav_a"],"sources":["D:/alodelivery test/node_modules/@angular/material/fesm2015/sidenav.js"],"sourcesContent":["import { Platform, PlatformModule } from '@angular/cdk/platform';\nimport { CdkScrollable, ScrollDispatcher, ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, Inject, forwardRef, ElementRef, NgZone, EventEmitter, Optional, Input, HostBinding, Output, HostListener, QueryList, ContentChildren, ContentChild, ViewChild, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { FocusTrapFactory, FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Subject, fromEvent, merge } from 'rxjs';\nimport { filter, map, mapTo, takeUntil, distinctUntilChanged, take, startWith, debounceTime } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nconst matDrawerAnimations = {\n    /** Animation that slides a drawer in and out. */\n    transformDrawer: trigger('transform', [\n        // We remove the `transform` here completely, rather than setting it to zero, because:\n        // 1. Having a transform can cause elements with ripples or an animated\n        //    transform to shift around in Chrome with an RTL layout (see #10023).\n        // 2. 3d transforms causes text to appear blurry on IE and Edge.\n        state('open, open-instant', style({\n            'transform': 'none',\n            'visibility': 'visible',\n        })),\n        state('void', style({\n            // Avoids the shadow showing up when closed in SSR.\n            'box-shadow': 'none',\n            'visibility': 'hidden',\n        })),\n        transition('void => open-instant', animate('0ms')),\n        transition('void <=> open, open-instant => void', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n    ])\n};\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nfunction throwMatDuplicatedDrawerError(position) {\n    throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n/** Configures whether drawers should use auto sizing by default. */\nconst MAT_DRAWER_DEFAULT_AUTOSIZE = new InjectionToken('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n    providedIn: 'root',\n    factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n});\n/**\n * Used to provide a drawer container to a drawer while avoiding circular references.\n * @docs-private\n */\nconst MAT_DRAWER_CONTAINER = new InjectionToken('MAT_DRAWER_CONTAINER');\n/** @docs-private */\nfunction MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY() {\n    return false;\n}\nclass MatDrawerContent extends CdkScrollable {\n    constructor(_changeDetectorRef, _container, elementRef, scrollDispatcher, ngZone) {\n        super(elementRef, scrollDispatcher, ngZone);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._container = _container;\n    }\n    ngAfterContentInit() {\n        this._container._contentMarginChanges.subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n}\nMatDrawerContent.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-drawer-content',\n                template: '<ng-content></ng-content>',\n                host: {\n                    'class': 'mat-drawer-content',\n                    '[style.margin-left.px]': '_container._contentMargins.left',\n                    '[style.margin-right.px]': '_container._contentMargins.right',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            },] }\n];\nMatDrawerContent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: MatDrawerContainer, decorators: [{ type: Inject, args: [forwardRef(() => MatDrawerContainer),] }] },\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: NgZone }\n];\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\nclass MatDrawer {\n    constructor(_elementRef, _focusTrapFactory, _focusMonitor, _platform, _ngZone, _doc, _container) {\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._focusMonitor = _focusMonitor;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._doc = _doc;\n        this._container = _container;\n        this._elementFocusedBeforeDrawerWasOpened = null;\n        /** Whether the drawer is initialized. Used for disabling the initial animation. */\n        this._enableAnimations = false;\n        this._position = 'start';\n        this._mode = 'over';\n        this._disableClose = false;\n        this._opened = false;\n        /** Emits whenever the drawer has started animating. */\n        this._animationStarted = new Subject();\n        /** Emits whenever the drawer is done animating. */\n        this._animationEnd = new Subject();\n        /** Current state of the sidenav animation. */\n        // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n        // metadata is not inherited by child classes, instead the host binding data is defined in a way\n        // that can be inherited.\n        // tslint:disable-next-line:no-host-decorator-in-concrete\n        this._animationState = 'void';\n        /** Event emitted when the drawer open state is changed. */\n        this.openedChange = \n        // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n        new EventEmitter(/* isAsync */ true);\n        /** Event emitted when the drawer has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the drawer has started opening. */\n        this.openedStart = this._animationStarted.pipe(filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0), mapTo(undefined));\n        /** Event emitted when the drawer has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the drawer has started closing. */\n        this.closedStart = this._animationStarted.pipe(filter(e => e.fromState !== e.toState && e.toState === 'void'), mapTo(undefined));\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /** Event emitted when the drawer's position changes. */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onPositionChanged = new EventEmitter();\n        /**\n         * An observable that emits when the drawer mode changes. This is used by the drawer container to\n         * to know when to when the mode changes so it can adapt the margins on the content.\n         */\n        this._modeChanged = new Subject();\n        this.openedChange.subscribe((opened) => {\n            if (opened) {\n                if (this._doc) {\n                    this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement;\n                }\n                this._takeFocus();\n            }\n            else if (this._isFocusWithinDrawer()) {\n                this._restoreFocus();\n            }\n        });\n        /**\n         * Listen to `keydown` events outside the zone so that change detection is not run every\n         * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n         * and we don't have close disabled.\n         */\n        this._ngZone.runOutsideAngular(() => {\n            fromEvent(this._elementRef.nativeElement, 'keydown').pipe(filter(event => {\n                return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n            }), takeUntil(this._destroyed)).subscribe(event => this._ngZone.run(() => {\n                this.close();\n                event.stopPropagation();\n                event.preventDefault();\n            }));\n        });\n        // We need a Subject with distinctUntilChanged, because the `done` event\n        // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n        this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n            return x.fromState === y.fromState && x.toState === y.toState;\n        })).subscribe((event) => {\n            const { fromState, toState } = event;\n            if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n                (toState === 'void' && fromState.indexOf('open') === 0)) {\n                this.openedChange.emit(this._opened);\n            }\n        });\n    }\n    /** The side that the drawer is attached to. */\n    get position() { return this._position; }\n    set position(value) {\n        // Make sure we have a valid value.\n        value = value === 'end' ? 'end' : 'start';\n        if (value != this._position) {\n            this._position = value;\n            this.onPositionChanged.emit();\n        }\n    }\n    /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n    get mode() { return this._mode; }\n    set mode(value) {\n        this._mode = value;\n        this._updateFocusTrapState();\n        this._modeChanged.next();\n    }\n    /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n    get disableClose() { return this._disableClose; }\n    set disableClose(value) { this._disableClose = coerceBooleanProperty(value); }\n    /**\n     * Whether the drawer should focus the first focusable element automatically when opened.\n     * Defaults to false in when `mode` is set to `side`, otherwise defaults to `true`. If explicitly\n     * enabled, focus will be moved into the sidenav in `side` mode as well.\n     */\n    get autoFocus() {\n        const value = this._autoFocus;\n        // Note that usually we disable auto focusing in `side` mode, because we don't know how the\n        // sidenav is being used, but in some cases it still makes sense to do it. If the consumer\n        // explicitly enabled `autoFocus`, we take it as them always wanting to enable it.\n        return value == null ? this.mode !== 'side' : value;\n    }\n    set autoFocus(value) { this._autoFocus = coerceBooleanProperty(value); }\n    /**\n     * Whether the drawer is opened. We overload this because we trigger an event when it\n     * starts or end.\n     */\n    get opened() { return this._opened; }\n    set opened(value) { this.toggle(coerceBooleanProperty(value)); }\n    /**\n     * Moves focus into the drawer. Note that this works even if\n     * the focus trap is disabled in `side` mode.\n     */\n    _takeFocus() {\n        if (!this.autoFocus || !this._focusTrap) {\n            return;\n        }\n        this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n            // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n            // still works. We need to check that `focus` is a function due to Universal.\n            if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n                this._elementRef.nativeElement.focus();\n            }\n        });\n    }\n    /**\n     * Restores focus to the element that was originally focused when the drawer opened.\n     * If no element was focused at that time, the focus will be restored to the drawer.\n     */\n    _restoreFocus() {\n        if (!this.autoFocus) {\n            return;\n        }\n        // Note that we don't check via `instanceof HTMLElement` so that we can cover SVGs as well.\n        if (this._elementFocusedBeforeDrawerWasOpened) {\n            this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n        }\n        else {\n            this._elementRef.nativeElement.blur();\n        }\n        this._elementFocusedBeforeDrawerWasOpened = null;\n        this._openedVia = null;\n    }\n    /** Whether focus is currently within the drawer. */\n    _isFocusWithinDrawer() {\n        var _a;\n        const activeEl = (_a = this._doc) === null || _a === void 0 ? void 0 : _a.activeElement;\n        return !!activeEl && this._elementRef.nativeElement.contains(activeEl);\n    }\n    ngAfterContentInit() {\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        this._updateFocusTrapState();\n    }\n    ngAfterContentChecked() {\n        // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n        // drawers that are open by default. When we're on the server, we shouldn't enable the\n        // animations, because we don't want the drawer to animate the first time the user sees\n        // the page.\n        if (this._platform.isBrowser) {\n            this._enableAnimations = true;\n        }\n    }\n    ngOnDestroy() {\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n        this._animationStarted.complete();\n        this._animationEnd.complete();\n        this._modeChanged.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Open the drawer.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    open(openedVia) {\n        return this.toggle(true, openedVia);\n    }\n    /** Close the drawer. */\n    close() {\n        return this.toggle(false);\n    }\n    /** Closes the drawer with context that the backdrop was clicked. */\n    _closeViaBackdropClick() {\n        // If the drawer is closed upon a backdrop click, we always want to restore focus. We\n        // don't need to check whether focus is currently in the drawer, as clicking on the\n        // backdrop causes blurring of the active element.\n        return this._setOpen(/* isOpen */ false, /* restoreFocus */ true);\n    }\n    /**\n     * Toggle this drawer.\n     * @param isOpen Whether the drawer should be open.\n     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     */\n    toggle(isOpen = !this.opened, openedVia) {\n        // If the focus is currently inside the drawer content and we are closing the drawer,\n        // restore the focus to the initially focused element (when the drawer opened).\n        return this._setOpen(isOpen, /* restoreFocus */ !isOpen && this._isFocusWithinDrawer(), openedVia);\n    }\n    /**\n     * Toggles the opened state of the drawer.\n     * @param isOpen Whether the drawer should open or close.\n     * @param restoreFocus Whether focus should be restored on close.\n     * @param openedVia Focus origin that can be optionally set when opening a drawer. The\n     *   origin will be used later when focus is restored on drawer close.\n     */\n    _setOpen(isOpen, restoreFocus, openedVia = 'program') {\n        this._opened = isOpen;\n        if (isOpen) {\n            this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n            this._openedVia = openedVia;\n        }\n        else {\n            this._animationState = 'void';\n            if (restoreFocus) {\n                this._restoreFocus();\n            }\n        }\n        this._updateFocusTrapState();\n        return new Promise(resolve => {\n            this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n        });\n    }\n    _getWidth() {\n        return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n    }\n    /** Updates the enabled state of the focus trap. */\n    _updateFocusTrapState() {\n        if (this._focusTrap) {\n            // The focus trap is only enabled when the drawer is open in any mode other than side.\n            this._focusTrap.enabled = this.opened && this.mode !== 'side';\n        }\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _animationStartListener(event) {\n        this._animationStarted.next(event);\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _animationDoneListener(event) {\n        this._animationEnd.next(event);\n    }\n}\nMatDrawer.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-drawer',\n                exportAs: 'matDrawer',\n                template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\",\n                animations: [matDrawerAnimations.transformDrawer],\n                host: {\n                    'class': 'mat-drawer',\n                    // must prevent the browser from aligning text based on value\n                    '[attr.align]': 'null',\n                    '[class.mat-drawer-end]': 'position === \"end\"',\n                    '[class.mat-drawer-over]': 'mode === \"over\"',\n                    '[class.mat-drawer-push]': 'mode === \"push\"',\n                    '[class.mat-drawer-side]': 'mode === \"side\"',\n                    '[class.mat-drawer-opened]': 'opened',\n                    'tabIndex': '-1',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            },] }\n];\nMatDrawer.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusTrapFactory },\n    { type: FocusMonitor },\n    { type: Platform },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: MatDrawerContainer, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DRAWER_CONTAINER,] }] }\n];\nMatDrawer.propDecorators = {\n    position: [{ type: Input }],\n    mode: [{ type: Input }],\n    disableClose: [{ type: Input }],\n    autoFocus: [{ type: Input }],\n    opened: [{ type: Input }],\n    _animationState: [{ type: HostBinding, args: ['@transform',] }],\n    openedChange: [{ type: Output }],\n    _openedStream: [{ type: Output, args: ['opened',] }],\n    openedStart: [{ type: Output }],\n    _closedStream: [{ type: Output, args: ['closed',] }],\n    closedStart: [{ type: Output }],\n    onPositionChanged: [{ type: Output, args: ['positionChanged',] }],\n    _animationStartListener: [{ type: HostListener, args: ['@transform.start', ['$event'],] }],\n    _animationDoneListener: [{ type: HostListener, args: ['@transform.done', ['$event'],] }]\n};\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nclass MatDrawerContainer {\n    constructor(_dir, _element, _ngZone, _changeDetectorRef, viewportRuler, defaultAutosize = false, _animationMode) {\n        this._dir = _dir;\n        this._element = _element;\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._animationMode = _animationMode;\n        /** Drawers that belong to this container. */\n        this._drawers = new QueryList();\n        /** Event emitted when the drawer backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /** Emits on every ngDoCheck. Used for debouncing reflows. */\n        this._doCheckSubject = new Subject();\n        /**\n         * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n         * drawer is open. We use margin rather than transform even for push mode because transform breaks\n         * fixed position elements inside of the transformed element.\n         */\n        this._contentMargins = { left: null, right: null };\n        this._contentMarginChanges = new Subject();\n        // If a `Dir` directive exists up the tree, listen direction changes\n        // and update the left/right properties to point to the proper start/end.\n        if (_dir) {\n            _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                this._validateDrawers();\n                this.updateContentMargins();\n            });\n        }\n        // Since the minimum width of the sidenav depends on the viewport width,\n        // we need to recompute the margins if the viewport changes.\n        viewportRuler.change()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this.updateContentMargins());\n        this._autosize = defaultAutosize;\n    }\n    /** The drawer child with the `start` position. */\n    get start() { return this._start; }\n    /** The drawer child with the `end` position. */\n    get end() { return this._end; }\n    /**\n     * Whether to automatically resize the container whenever\n     * the size of any of its drawers changes.\n     *\n     * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n     * the drawers on every change detection cycle. Can be configured globally via the\n     * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n     */\n    get autosize() { return this._autosize; }\n    set autosize(value) { this._autosize = coerceBooleanProperty(value); }\n    /**\n     * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n     * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n     * mode as well.\n     */\n    get hasBackdrop() {\n        if (this._backdropOverride == null) {\n            return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n        }\n        return this._backdropOverride;\n    }\n    set hasBackdrop(value) {\n        this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n    }\n    /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n    get scrollable() {\n        return this._userContent || this._content;\n    }\n    ngAfterContentInit() {\n        this._allDrawers.changes\n            .pipe(startWith(this._allDrawers), takeUntil(this._destroyed))\n            .subscribe((drawer) => {\n            this._drawers.reset(drawer.filter(item => !item._container || item._container === this));\n            this._drawers.notifyOnChanges();\n        });\n        this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n            this._validateDrawers();\n            this._drawers.forEach((drawer) => {\n                this._watchDrawerToggle(drawer);\n                this._watchDrawerPosition(drawer);\n                this._watchDrawerMode(drawer);\n            });\n            if (!this._drawers.length ||\n                this._isDrawerOpen(this._start) ||\n                this._isDrawerOpen(this._end)) {\n                this.updateContentMargins();\n            }\n            this._changeDetectorRef.markForCheck();\n        });\n        // Avoid hitting the NgZone through the debounce timeout.\n        this._ngZone.runOutsideAngular(() => {\n            this._doCheckSubject.pipe(debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n            takeUntil(this._destroyed)).subscribe(() => this.updateContentMargins());\n        });\n    }\n    ngOnDestroy() {\n        this._contentMarginChanges.complete();\n        this._doCheckSubject.complete();\n        this._drawers.destroy();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Calls `open` of both start and end drawers */\n    open() {\n        this._drawers.forEach(drawer => drawer.open());\n    }\n    /** Calls `close` of both start and end drawers */\n    close() {\n        this._drawers.forEach(drawer => drawer.close());\n    }\n    /**\n     * Recalculates and updates the inline styles for the content. Note that this should be used\n     * sparingly, because it causes a reflow.\n     */\n    updateContentMargins() {\n        // 1. For drawers in `over` mode, they don't affect the content.\n        // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n        //    left margin (for left drawer) or right margin (for right the drawer).\n        // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n        //    adding to the left or right margin and simultaneously subtracting the same amount of\n        //    margin from the other side.\n        let left = 0;\n        let right = 0;\n        if (this._left && this._left.opened) {\n            if (this._left.mode == 'side') {\n                left += this._left._getWidth();\n            }\n            else if (this._left.mode == 'push') {\n                const width = this._left._getWidth();\n                left += width;\n                right -= width;\n            }\n        }\n        if (this._right && this._right.opened) {\n            if (this._right.mode == 'side') {\n                right += this._right._getWidth();\n            }\n            else if (this._right.mode == 'push') {\n                const width = this._right._getWidth();\n                right += width;\n                left -= width;\n            }\n        }\n        // If either `right` or `left` is zero, don't set a style to the element. This\n        // allows users to specify a custom size via CSS class in SSR scenarios where the\n        // measured widths will always be zero. Note that we reset to `null` here, rather\n        // than below, in order to ensure that the types in the `if` below are consistent.\n        left = left || null;\n        right = right || null;\n        if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n            this._contentMargins = { left, right };\n            // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n            // to do it only when something changed, otherwise we can end up hitting the zone too often.\n            this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n        }\n    }\n    ngDoCheck() {\n        // If users opted into autosizing, do a check every change detection cycle.\n        if (this._autosize && this._isPushed()) {\n            // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n            this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n        }\n    }\n    /**\n     * Subscribes to drawer events in order to set a class on the main container element when the\n     * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n     * is properly hidden.\n     */\n    _watchDrawerToggle(drawer) {\n        drawer._animationStarted.pipe(filter((event) => event.fromState !== event.toState), takeUntil(this._drawers.changes))\n            .subscribe((event) => {\n            // Set the transition class on the container so that the animations occur. This should not\n            // be set initially because animations should only be triggered via a change in state.\n            if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n                this._element.nativeElement.classList.add('mat-drawer-transition');\n            }\n            this.updateContentMargins();\n            this._changeDetectorRef.markForCheck();\n        });\n        if (drawer.mode !== 'side') {\n            drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() => this._setContainerClass(drawer.opened));\n        }\n    }\n    /**\n     * Subscribes to drawer onPositionChanged event in order to\n     * re-validate drawers when the position changes.\n     */\n    _watchDrawerPosition(drawer) {\n        if (!drawer) {\n            return;\n        }\n        // NOTE: We need to wait for the microtask queue to be empty before validating,\n        // since both drawers may be swapping positions at the same time.\n        drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n            this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n                this._validateDrawers();\n            });\n        });\n    }\n    /** Subscribes to changes in drawer mode so we can run change detection. */\n    _watchDrawerMode(drawer) {\n        if (drawer) {\n            drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n                .subscribe(() => {\n                this.updateContentMargins();\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n    _setContainerClass(isAdd) {\n        const classList = this._element.nativeElement.classList;\n        const className = 'mat-drawer-container-has-open';\n        if (isAdd) {\n            classList.add(className);\n        }\n        else {\n            classList.remove(className);\n        }\n    }\n    /** Validate the state of the drawer children components. */\n    _validateDrawers() {\n        this._start = this._end = null;\n        // Ensure that we have at most one start and one end drawer.\n        this._drawers.forEach(drawer => {\n            if (drawer.position == 'end') {\n                if (this._end != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throwMatDuplicatedDrawerError('end');\n                }\n                this._end = drawer;\n            }\n            else {\n                if (this._start != null && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throwMatDuplicatedDrawerError('start');\n                }\n                this._start = drawer;\n            }\n        });\n        this._right = this._left = null;\n        // Detect if we're LTR or RTL.\n        if (this._dir && this._dir.value === 'rtl') {\n            this._left = this._end;\n            this._right = this._start;\n        }\n        else {\n            this._left = this._start;\n            this._right = this._end;\n        }\n    }\n    /** Whether the container is being pushed to the side by one of the drawers. */\n    _isPushed() {\n        return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n            (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n    }\n    _onBackdropClicked() {\n        this.backdropClick.emit();\n        this._closeModalDrawersViaBackdrop();\n    }\n    _closeModalDrawersViaBackdrop() {\n        // Close all open drawers where closing is not disabled and the mode is not `side`.\n        [this._start, this._end]\n            .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n            .forEach(drawer => drawer._closeViaBackdropClick());\n    }\n    _isShowingBackdrop() {\n        return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n            (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n    }\n    _canHaveBackdrop(drawer) {\n        return drawer.mode !== 'side' || !!this._backdropOverride;\n    }\n    _isDrawerOpen(drawer) {\n        return drawer != null && drawer.opened;\n    }\n}\nMatDrawerContainer.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-drawer-container',\n                exportAs: 'matDrawerContainer',\n                template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-drawer\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-drawer-content\\\">\\n</ng-content>\\n<mat-drawer-content *ngIf=\\\"!_content\\\">\\n  <ng-content></ng-content>\\n</mat-drawer-content>\\n\",\n                host: {\n                    'class': 'mat-drawer-container',\n                    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                providers: [{\n                        provide: MAT_DRAWER_CONTAINER,\n                        useExisting: MatDrawerContainer\n                    }],\n                styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\"]\n            },] }\n];\nMatDrawerContainer.ctorParameters = () => [\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_DRAWER_DEFAULT_AUTOSIZE,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatDrawerContainer.propDecorators = {\n    _allDrawers: [{ type: ContentChildren, args: [MatDrawer, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }],\n    _content: [{ type: ContentChild, args: [MatDrawerContent,] }],\n    _userContent: [{ type: ViewChild, args: [MatDrawerContent,] }],\n    autosize: [{ type: Input }],\n    hasBackdrop: [{ type: Input }],\n    backdropClick: [{ type: Output }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSidenavContent extends MatDrawerContent {\n    constructor(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone) {\n        super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n    }\n}\nMatSidenavContent.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-sidenav-content',\n                template: '<ng-content></ng-content>',\n                host: {\n                    'class': 'mat-drawer-content mat-sidenav-content',\n                    '[style.margin-left.px]': '_container._contentMargins.left',\n                    '[style.margin-right.px]': '_container._contentMargins.right',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            },] }\n];\nMatSidenavContent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: MatSidenavContainer, decorators: [{ type: Inject, args: [forwardRef(() => MatSidenavContainer),] }] },\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: NgZone }\n];\nclass MatSidenav extends MatDrawer {\n    constructor() {\n        super(...arguments);\n        this._fixedInViewport = false;\n        this._fixedTopGap = 0;\n        this._fixedBottomGap = 0;\n    }\n    /** Whether the sidenav is fixed in the viewport. */\n    get fixedInViewport() { return this._fixedInViewport; }\n    set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n    /**\n     * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n     * mode.\n     */\n    get fixedTopGap() { return this._fixedTopGap; }\n    set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n    /**\n     * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n     * fixed mode.\n     */\n    get fixedBottomGap() { return this._fixedBottomGap; }\n    set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n}\nMatSidenav.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-sidenav',\n                exportAs: 'matSidenav',\n                template: \"<div class=\\\"mat-drawer-inner-container\\\" cdkScrollable>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\",\n                animations: [matDrawerAnimations.transformDrawer],\n                host: {\n                    'class': 'mat-drawer mat-sidenav',\n                    'tabIndex': '-1',\n                    // must prevent the browser from aligning text based on value\n                    '[attr.align]': 'null',\n                    '[class.mat-drawer-end]': 'position === \"end\"',\n                    '[class.mat-drawer-over]': 'mode === \"over\"',\n                    '[class.mat-drawer-push]': 'mode === \"push\"',\n                    '[class.mat-drawer-side]': 'mode === \"side\"',\n                    '[class.mat-drawer-opened]': 'opened',\n                    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n                    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n                    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            },] }\n];\nMatSidenav.propDecorators = {\n    fixedInViewport: [{ type: Input }],\n    fixedTopGap: [{ type: Input }],\n    fixedBottomGap: [{ type: Input }]\n};\nclass MatSidenavContainer extends MatDrawerContainer {\n}\nMatSidenavContainer.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-sidenav-container',\n                exportAs: 'matSidenavContainer',\n                template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-sidenav\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-sidenav-content\\\">\\n</ng-content>\\n<mat-sidenav-content *ngIf=\\\"!_content\\\" cdkScrollable>\\n  <ng-content></ng-content>\\n</mat-sidenav-content>\\n\",\n                host: {\n                    'class': 'mat-drawer-container mat-sidenav-container',\n                    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                providers: [{\n                        provide: MAT_DRAWER_CONTAINER,\n                        useExisting: MatSidenavContainer\n                    }],\n                styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\"]\n            },] }\n];\nMatSidenavContainer.propDecorators = {\n    _allDrawers: [{ type: ContentChildren, args: [MatSidenav, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }],\n    _content: [{ type: ContentChild, args: [MatSidenavContent,] }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSidenavModule {\n}\nMatSidenavModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule,\n                    MatCommonModule,\n                    PlatformModule,\n                    CdkScrollableModule,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    MatCommonModule,\n                    MatDrawer,\n                    MatDrawerContainer,\n                    MatDrawerContent,\n                    MatSidenav,\n                    MatSidenavContainer,\n                    MatSidenavContent,\n                ],\n                declarations: [\n                    MatDrawer,\n                    MatDrawerContainer,\n                    MatDrawerContent,\n                    MatSidenav,\n                    MatSidenavContainer,\n                    MatSidenavContent,\n                ],\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DRAWER_DEFAULT_AUTOSIZE, MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent, MatSidenavModule, matDrawerAnimations, throwMatDuplicatedDrawerError, MAT_DRAWER_CONTAINER as ɵangular_material_src_material_sidenav_sidenav_a };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}