{"ast":null,"code":"/**\r\n * Functionality for drawing simple buttons.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Container } from \"../Container\";\nimport { Label } from \"./Label\";\nimport { RoundedRectangle } from \"../elements/RoundedRectangle\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport { registry } from \"../Registry\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Button class is capable of drawing a simple rectangular button with\r\n * optionally rounded corners and an icon in it.\r\n *\r\n * @see {@link IButtonEvents} for a list of available events\r\n * @see {@link IButtonAdapters} for a list of available Adapters\r\n */\nvar Button = /** @class */function (_super) {\n  __extends(Button, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Button() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    _this.className = \"Button\";\n    _this.tooltipY = 0;\n    // Set defaults\n    _this.iconPosition = \"left\";\n    _this.layout = \"horizontal\";\n    _this.contentAlign = \"center\";\n    _this.contentValign = \"middle\";\n    _this.padding(8, 16, 8, 16);\n    _this.setStateOnChildren = true;\n    var interfaceColors = new InterfaceColorSet();\n    // Create background\n    var background = _this.background;\n    background.fill = interfaceColors.getFor(\"secondaryButton\");\n    background.stroke = interfaceColors.getFor(\"secondaryButtonStroke\");\n    background.fillOpacity = 1;\n    background.strokeOpacity = 1;\n    background.cornerRadius(3, 3, 3, 3);\n    // Create the label element\n    _this.label = new Label();\n    _this.label.fill = interfaceColors.getFor(\"secondaryButtonText\");\n    ;\n    _this.label.shouldClone = false;\n    // Create default states\n    var hoverState = background.states.create(\"hover\");\n    hoverState.properties.fillOpacity = 1;\n    hoverState.properties.fill = interfaceColors.getFor(\"secondaryButtonHover\");\n    var downState = background.states.create(\"down\");\n    downState.transitionDuration = 100;\n    downState.properties.fill = interfaceColors.getFor(\"secondaryButtonDown\");\n    downState.properties.fillOpacity = 1;\n    // Set up accessibility\n    // A button should be always focusable\n    _this.role = \"button\";\n    _this.focusable = true;\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(Button.prototype, \"icon\", {\n    /**\r\n     * @return Icon Sprite\r\n     */\n    get: function () {\n      return this._icon;\n    },\n    /**\r\n     * A [[Sprite]] to be used as an icon on button.\r\n     *\r\n     * @param icon Icon Sprite\r\n     */\n    set: function (icon) {\n      var currentIcon = this._icon;\n      if (currentIcon) {\n        //this._icon.dispose();\n        //this.removeDispose(currentIcon);\n        currentIcon.parent = undefined;\n      }\n      if (icon) {\n        this._icon = icon;\n        icon.parent = this;\n        icon.interactionsEnabled = false;\n        icon.shouldClone = false;\n        this.iconPosition = this.iconPosition;\n        this._disposers.push(icon);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Button.prototype, \"iconPosition\", {\n    /**\r\n     * @return Icon position\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"iconPosition\");\n    },\n    /**\r\n     * Icon position: \"left\" or \"right\".\r\n     *\r\n     * @default \"left\"\r\n     * @param position  Icon position\r\n     */\n    set: function (position) {\n      this.setPropertyValue(\"iconPosition\", position);\n      if (this.icon) {\n        if (position == \"left\") {\n          this.icon.toBack();\n        } else {\n          this.icon.toFront();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Button.prototype, \"label\", {\n    /**\r\n     * @return Label element\r\n     */\n    get: function () {\n      return this._label;\n    },\n    /**\r\n     * [[Label]] element to be used for text.\r\n     *\r\n     * @param label element\r\n     */\n    set: function (label) {\n      if (this._label) {\n        //this._label.dispose();\n        this.removeDispose(this._label);\n      }\n      this._label = label;\n      if (label) {\n        label.parent = this;\n        label.interactionsEnabled = false;\n        this._disposers.push(this._label);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates a background element for the button.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Background element\r\n   */\n  Button.prototype.createBackground = function () {\n    return new RoundedRectangle();\n  };\n  /**\r\n   * Copies properties and other attributes.\r\n   *\r\n   * @param source  Source\r\n   */\n  Button.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    if (source.label) {\n      this.label.copyFrom(source.label);\n    }\n    if (source.icon) {\n      this.icon = source.icon.clone();\n    }\n  };\n  return Button;\n}(Container);\nexport { Button };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Button\"] = Button;","map":{"version":3,"names":["__extends","Container","Label","RoundedRectangle","InterfaceColorSet","registry","Button","_super","_this","call","className","tooltipY","iconPosition","layout","contentAlign","contentValign","padding","setStateOnChildren","interfaceColors","background","fill","getFor","stroke","fillOpacity","strokeOpacity","cornerRadius","label","shouldClone","hoverState","states","create","properties","downState","transitionDuration","role","focusable","applyTheme","Object","defineProperty","prototype","get","_icon","set","icon","currentIcon","parent","undefined","interactionsEnabled","_disposers","push","enumerable","configurable","getPropertyValue","position","setPropertyValue","toBack","toFront","_label","removeDispose","createBackground","copyFrom","source","clone","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/elements/Button.js"],"sourcesContent":["/**\r\n * Functionality for drawing simple buttons.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../Container\";\r\nimport { Label } from \"./Label\";\r\nimport { RoundedRectangle } from \"../elements/RoundedRectangle\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { registry } from \"../Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Button class is capable of drawing a simple rectangular button with\r\n * optionally rounded corners and an icon in it.\r\n *\r\n * @see {@link IButtonEvents} for a list of available events\r\n * @see {@link IButtonAdapters} for a list of available Adapters\r\n */\r\nvar Button = /** @class */ (function (_super) {\r\n    __extends(Button, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Button() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"Button\";\r\n        _this.tooltipY = 0;\r\n        // Set defaults\r\n        _this.iconPosition = \"left\";\r\n        _this.layout = \"horizontal\";\r\n        _this.contentAlign = \"center\";\r\n        _this.contentValign = \"middle\";\r\n        _this.padding(8, 16, 8, 16);\r\n        _this.setStateOnChildren = true;\r\n        var interfaceColors = new InterfaceColorSet();\r\n        // Create background\r\n        var background = _this.background;\r\n        background.fill = interfaceColors.getFor(\"secondaryButton\");\r\n        background.stroke = interfaceColors.getFor(\"secondaryButtonStroke\");\r\n        background.fillOpacity = 1;\r\n        background.strokeOpacity = 1;\r\n        background.cornerRadius(3, 3, 3, 3);\r\n        // Create the label element\r\n        _this.label = new Label();\r\n        _this.label.fill = interfaceColors.getFor(\"secondaryButtonText\");\r\n        ;\r\n        _this.label.shouldClone = false;\r\n        // Create default states\r\n        var hoverState = background.states.create(\"hover\");\r\n        hoverState.properties.fillOpacity = 1;\r\n        hoverState.properties.fill = interfaceColors.getFor(\"secondaryButtonHover\");\r\n        var downState = background.states.create(\"down\");\r\n        downState.transitionDuration = 100;\r\n        downState.properties.fill = interfaceColors.getFor(\"secondaryButtonDown\");\r\n        downState.properties.fillOpacity = 1;\r\n        // Set up accessibility\r\n        // A button should be always focusable\r\n        _this.role = \"button\";\r\n        _this.focusable = true;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(Button.prototype, \"icon\", {\r\n        /**\r\n         * @return Icon Sprite\r\n         */\r\n        get: function () {\r\n            return this._icon;\r\n        },\r\n        /**\r\n         * A [[Sprite]] to be used as an icon on button.\r\n         *\r\n         * @param icon Icon Sprite\r\n         */\r\n        set: function (icon) {\r\n            var currentIcon = this._icon;\r\n            if (currentIcon) {\r\n                //this._icon.dispose();\r\n                //this.removeDispose(currentIcon);\r\n                currentIcon.parent = undefined;\r\n            }\r\n            if (icon) {\r\n                this._icon = icon;\r\n                icon.parent = this;\r\n                icon.interactionsEnabled = false;\r\n                icon.shouldClone = false;\r\n                this.iconPosition = this.iconPosition;\r\n                this._disposers.push(icon);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Button.prototype, \"iconPosition\", {\r\n        /**\r\n         * @return Icon position\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"iconPosition\");\r\n        },\r\n        /**\r\n         * Icon position: \"left\" or \"right\".\r\n         *\r\n         * @default \"left\"\r\n         * @param position  Icon position\r\n         */\r\n        set: function (position) {\r\n            this.setPropertyValue(\"iconPosition\", position);\r\n            if (this.icon) {\r\n                if (position == \"left\") {\r\n                    this.icon.toBack();\r\n                }\r\n                else {\r\n                    this.icon.toFront();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Button.prototype, \"label\", {\r\n        /**\r\n         * @return Label element\r\n         */\r\n        get: function () {\r\n            return this._label;\r\n        },\r\n        /**\r\n         * [[Label]] element to be used for text.\r\n         *\r\n         * @param label element\r\n         */\r\n        set: function (label) {\r\n            if (this._label) {\r\n                //this._label.dispose();\r\n                this.removeDispose(this._label);\r\n            }\r\n            this._label = label;\r\n            if (label) {\r\n                label.parent = this;\r\n                label.interactionsEnabled = false;\r\n                this._disposers.push(this._label);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates a background element for the button.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Background element\r\n     */\r\n    Button.prototype.createBackground = function () {\r\n        return new RoundedRectangle();\r\n    };\r\n    /**\r\n     * Copies properties and other attributes.\r\n     *\r\n     * @param source  Source\r\n     */\r\n    Button.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        if (source.label) {\r\n            this.label.copyFrom(source.label);\r\n        }\r\n        if (source.icon) {\r\n            this.icon = source.icon.clone();\r\n        }\r\n    };\r\n    return Button;\r\n}(Container));\r\nexport { Button };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Button\"] = Button;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}