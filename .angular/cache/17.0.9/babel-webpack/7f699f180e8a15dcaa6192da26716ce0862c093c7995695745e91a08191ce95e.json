{"ast":null,"code":"/**\r\n * Morpher module contains functionality that allows morphing one polygon to\r\n * another.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { BaseObject } from \"../Base\";\nimport { Animation, AnimationDisposer } from \"../utils/Animation\";\nimport * as $math from \"../utils/Math\";\nimport * as $ease from \"../utils/Ease\";\nimport * as $type from \"../utils/Type\";\n/**\r\n * Morpher can be used to morph one polygon to some other polygon.\r\n */\nvar Morpher = /** @class */function (_super) {\n  __extends(Morpher, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param morphable An object to morph\r\n   */\n  function Morpher(morphable) {\n    var _this = _super.call(this) || this;\n    /**\r\n     * A storage for measurements.\r\n     */\n    _this._bboxes = [];\n    /**\r\n     * Duration of the morphing animation in milliseconds.\r\n     */\n    _this.morphDuration = 800;\n    /**\r\n     * An easing function to use for morphing animation.\r\n     *\r\n     * @see {@link Ease}\r\n     */\n    _this.morphEasing = $ease.cubicOut;\n    /**\r\n     * If set to `true`, all separate parts of the multi-part polygon will\r\n     * morph into a single circle or polygon when using built-in methods\r\n     * `morphToCircle()` or `morphToPolygon()`.\r\n     *\r\n     * Otherwise each separate part of polygon will morph to individual target\r\n     * circle or polgyon.\r\n     */\n    _this.morphToSingle = true;\n    /**\r\n     * A ratio to scale morphed object in relation to the source object.\r\n     */\n    _this.scaleRatio = 1;\n    _this.className = \"Morpher\";\n    _this.morphable = morphable;\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Morphs a polygon to another polygon.\r\n   *\r\n   * @param toPoints  Corner points of the target shape\r\n   * @param duration  Duration in milliseconds\r\n   * @param easing    Easing function\r\n   * @return Animation\r\n   */\n  Morpher.prototype.morphToPolygon = function (toPoints, duration, easing) {\n    var points = this.morphable.currentPoints;\n    if (points && toPoints) {\n      this.sortPoints(points);\n      this.sortPoints(toPoints);\n      this._morphFromPointsReal = [];\n      this._morphToPointsReal = [];\n      if (!$type.hasValue(duration)) {\n        duration = this.morphDuration;\n      }\n      if (!$type.hasValue(easing)) {\n        easing = this.morphEasing;\n      }\n      this._morphFromPointsReal = this.normalizePoints(toPoints, points);\n      this._morphToPointsReal = this.normalizePoints(points, toPoints);\n      this.morphable.currentPoints = this._morphFromPointsReal;\n      var animation = new Animation(this, {\n        property: \"morphProgress\",\n        from: 0,\n        to: 1\n      }, duration, easing);\n      this._disposers.push(animation);\n      animation.start();\n      return animation;\n    }\n  };\n  /**\r\n   * [normalizePoints description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param pointsA  Point A\r\n   * @param pointsB  Point B\r\n   * @return Normalized points\r\n   */\n  Morpher.prototype.normalizePoints = function (pointsA, pointsB) {\n    for (var i = 0, len = pointsA.length; i < len; i++) {\n      var surfaceA = pointsA[i][0];\n      var holeA = pointsA[i][1];\n      var bboxA = $type.getValue($math.getBBox(surfaceA));\n      var middleX = bboxA.x + bboxA.width;\n      var middleY = bboxA.y + bboxA.height;\n      // check if we have the same in PointsB\n      if (!pointsB[i]) {\n        pointsB[i] = [];\n      }\n      // check if we have surface in pointsB\n      if (surfaceA && !pointsB[i][0]) {\n        pointsB[i][0] = [{\n          x: middleX,\n          y: middleY\n        }, {\n          x: middleX,\n          y: middleY\n        }];\n      }\n      if (pointsB[i][0]) {\n        pointsB[i][0] = this.addPoints(pointsB[i][0], surfaceA.length);\n        var distance = Infinity;\n        var splitAt = 0;\n        for (var a = 0; a < pointsB[i][0].length; a++) {\n          var newDistance = $math.getDistance(pointsB[i][0][a], surfaceA[0]);\n          if (newDistance < distance) {\n            splitAt = a;\n            distance = newDistance;\n          }\n        }\n        var partA = pointsB[i][0].slice(0, splitAt);\n        var partB = pointsB[i][0].slice(splitAt);\n        pointsB[i][0] = partB.concat(partA);\n      }\n      if (holeA) {\n        if (!pointsB[i][1]) {\n          pointsB[i][1] = [{\n            x: middleX,\n            y: middleY\n          }, {\n            x: middleX,\n            y: middleY\n          }];\n        }\n        pointsB[i][1] = this.addPoints(pointsB[i][1], holeA.length);\n      }\n    }\n    return pointsB;\n  };\n  /**\r\n   * [sortPoints description]\r\n   *\r\n   * @ignore Exclude from doc\r\n   * @todo Description\r\n   * @param points  [description]\r\n   * @return                        common bbox of points\r\n   */\n  Morpher.prototype.sortPoints = function (points) {\n    points.sort(function (a, b) {\n      var bbox1 = $type.getValue($math.getBBox(a[0]));\n      var bbox2 = $type.getValue($math.getBBox(b[0]));\n      if (bbox1.width * bbox1.height > bbox2.width * bbox2.height) {\n        return -1;\n      } else {\n        return 1;\n      }\n    });\n    var bboxes = [];\n    for (var i = 0, len = points.length; i < len; i++) {\n      var surface = points[i][0];\n      if (surface) {\n        bboxes.push($type.getValue($math.getBBox(surface)));\n      }\n    }\n    return $math.getCommonRectangle(bboxes);\n  };\n  /**\r\n   * Morphs polygon to a circle (it is actually a polygon which makes a circle).\r\n   *\r\n   * @param radius    Target circle radius (px)\r\n   * @param duration  Duration (ms)\r\n   * @param easing    Easing function\r\n   * @return Animation\r\n   */\n  Morpher.prototype.morphToCircle = function (radius, duration, easing) {\n    var points = this.morphable.points;\n    var commonBBox = this.sortPoints(points);\n    this._morphFromPointsReal = [];\n    this._morphToPointsReal = [];\n    if (!$type.hasValue(duration)) {\n      duration = this.morphDuration;\n    }\n    if (!$type.hasValue(easing)) {\n      easing = this.morphEasing;\n    }\n    // surface\n    for (var i = 0, len = points.length; i < len; i++) {\n      var surface = points[i][0];\n      var hole = points[i][1];\n      this._morphFromPointsReal[i] = [];\n      this._morphToPointsReal[i] = [];\n      if (surface) {\n        var toPoints = surface;\n        var fromPoints = surface;\n        var bbox = $type.getValue($math.getBBox(fromPoints)); // this._bboxes[i];\n        if (this.morphToSingle) {\n          bbox = $type.getValue(commonBBox);\n        }\n        var middleX = bbox.x + bbox.width / 2;\n        var middleY = bbox.y + bbox.height / 2;\n        var realRadius = radius;\n        if (!$type.isNumber(realRadius)) {\n          realRadius = Math.min(bbox.width / 2, bbox.height / 2);\n        }\n        toPoints = [];\n        // find angle for the first point\n        var startAngle = $math.getAngle({\n          x: middleX,\n          y: middleY\n        }, surface[0]);\n        var count = 100;\n        if (surface.length > count) {\n          count = surface.length;\n        }\n        fromPoints = this.addPoints(surface, count);\n        count = fromPoints.length; // add Points might increase number a bit\n        var angle = 360 / (count - 1);\n        for (var a = 0; a < count; a++) {\n          var realAngle = angle * a + startAngle;\n          var pointOnCircle = {\n            x: middleX + realRadius * $math.cos(realAngle),\n            y: middleY + realRadius * $math.sin(realAngle)\n          };\n          toPoints[a] = pointOnCircle;\n        }\n        if (hole && hole.length > 0) {\n          for (var i_1 = 0, hlen = hole.length; i_1 < hlen; i_1++) {\n            toPoints.push({\n              x: middleX,\n              y: middleY\n            });\n          }\n        }\n        this._morphFromPointsReal[i][0] = fromPoints;\n        this._morphToPointsReal[i][0] = toPoints;\n      }\n    }\n    this.morphable.currentPoints = this._morphFromPointsReal;\n    var animation = new Animation(this, {\n      property: \"morphProgress\",\n      from: 0,\n      to: 1\n    }, duration, easing);\n    this._disposers.push(animation);\n    animation.start();\n    return animation;\n  };\n  /**\r\n   * [addPoints description]\r\n   *\r\n   * @ignore Exclude from doc\r\n   * @todo Description\r\n   * @param points         [description]\r\n   * @param mustHaveCount  [description]\r\n   * @return [description]\r\n   */\n  Morpher.prototype.addPoints = function (points, mustHaveCount) {\n    var addToSegmentCount = Math.round(mustHaveCount / points.length);\n    var newPoints = [];\n    for (var i = 0, len = points.length; i < len; i++) {\n      var point0 = points[i];\n      var point1 = void 0;\n      if (i == points.length - 1) {\n        point1 = points[0];\n      } else {\n        point1 = points[i + 1];\n      }\n      newPoints.push(point0);\n      for (var p = 1; p < addToSegmentCount; p++) {\n        var percent = p / addToSegmentCount;\n        var extraPoint = {\n          x: point0.x + (point1.x - point0.x) * percent,\n          y: point0.y + (point1.y - point0.y) * percent\n        };\n        newPoints.push(extraPoint);\n      }\n      // stop adding in case we already added more than left in original\n      if (newPoints.length + points.length - i == mustHaveCount) {\n        addToSegmentCount = 0;\n      }\n    }\n    if (newPoints.length < mustHaveCount && points.length > 0) {\n      var lastPoint = points[points.length - 1];\n      for (var p = newPoints.length; p < mustHaveCount; p++) {\n        // add same as last\n        newPoints.push({\n          x: lastPoint.x,\n          y: lastPoint.y\n        });\n      }\n    }\n    return newPoints;\n  };\n  /**\r\n   * Morphs polygon into a rectangular polygon.\r\n   *\r\n   * @param width     Width of the target rectangle (px)\r\n   * @param height    Height of the target rectangle (px)\r\n   * @param duration  Duration (ms)\r\n   * @param easing    Easing function\r\n   * @return Animation\r\n   */\n  Morpher.prototype.morphToRectangle = function (width, height, duration, easing) {\n    var points = this.morphable.points;\n    this.sortPoints(points);\n    this._morphFromPointsReal = [];\n    this._morphToPointsReal = [];\n    if (!$type.hasValue(duration)) {\n      duration = this.morphDuration;\n    }\n    if (!$type.hasValue(easing)) {\n      easing = this.morphEasing;\n    }\n    //\t\tlet biggestBBox: IRectangle = this._bboxes[this._biggestIndex];\n    // surface\n    for (var i = 0, len = points.length; i < len; i++) {\n      var surface = points[i][0];\n      var hole = points[i][1];\n      this._morphFromPointsReal[i] = [];\n      this._morphToPointsReal[i] = [];\n      if (surface) {\n        var toPoints = surface;\n        var fromPoints = surface;\n        var bbox = this._bboxes[i];\n        // we only work with first area. TODO: maybe we should find the biggest one?\n        if (this.morphToSingle) {\n          //if (i != this._biggestIndex) {\n          //\tbbox = { x: biggestBBox.x + biggestBBox.width / 2, y: biggestBBox.y + biggestBBox.height / 2, width: 0, height: 0 };\n          //}\n        }\n        var x = bbox.x;\n        var y = bbox.y;\n        var realWidth = width;\n        var realHeight = height;\n        if (!$type.isNumber(realWidth)) {\n          realWidth = bbox.width;\n        }\n        if (!$type.isNumber(realHeight)) {\n          realHeight = bbox.height;\n        }\n        toPoints = [{\n          x: x,\n          y: y\n        }, {\n          x: x + realWidth,\n          y: y\n        }, {\n          x: x + realWidth,\n          y: y + realHeight\n        }, {\n          x: x,\n          y: y + realHeight\n        }];\n        toPoints = this.addPoints(toPoints, surface.length);\n        // if polygon has less points then count, add\n        if (surface.length < 4) {\n          for (var i_2 = surface.length; i_2 < 4; i_2++) {\n            toPoints.push({\n              x: surface[i_2].x,\n              y: surface[i_2].y\n            });\n          }\n        }\n        if (hole && hole.length > 0) {\n          var middleX = bbox.x + bbox.width / 2;\n          var middleY = bbox.y + bbox.height / 2;\n          for (var i_3 = 0, hlen = hole.length; i_3 < hlen; i_3++) {\n            toPoints.push({\n              x: middleX,\n              y: middleY\n            });\n          }\n        }\n        this._morphFromPointsReal[i][0] = fromPoints;\n        this._morphToPointsReal[i][0] = toPoints;\n      }\n    }\n    this.morphable.currentPoints = this._morphFromPointsReal;\n    var animation = new Animation(this, {\n      property: \"morphProgress\",\n      from: 0,\n      to: 1\n    }, duration, easing);\n    this._disposers.push(animation);\n    animation.start();\n    return animation;\n  };\n  Object.defineProperty(Morpher.prototype, \"morphProgress\", {\n    /**\r\n     * Returns the progress of morph transition.\r\n     *\r\n     * @return Progress (0-1)\r\n     */\n    get: function () {\n      return this._morphProgress;\n    },\n    /**\r\n     * Progress of the morph transition.\r\n     *\r\n     * Setting this will also trigger actual transformation.\r\n     *\r\n     * @param value  Progress (0-1)\r\n     */\n    set: function (value) {\n      this._morphProgress = value;\n      var currentPoints = [];\n      if (value != null) {\n        var fromPoints = this._morphFromPointsReal;\n        var toPoints = this._morphToPointsReal;\n        if (fromPoints != null && toPoints != null) {\n          for (var i = 0, len = fromPoints.length; i < len; i++) {\n            var currentArea = [];\n            currentPoints.push(currentArea);\n            var surfaceFrom = fromPoints[i][0];\n            var holeFrom = fromPoints[i][1];\n            var surfaceTo = toPoints[i][0];\n            var holeTo = toPoints[i][1];\n            if (surfaceFrom && surfaceFrom.length > 0 && surfaceTo && surfaceTo.length > 0) {\n              var currentSurface = [];\n              for (var i_4 = 0, slen = surfaceFrom.length; i_4 < slen; i_4++) {\n                var point0 = surfaceFrom[i_4];\n                var point1 = surfaceTo[i_4];\n                var currentPoint = {\n                  x: point0.x + (point1.x * this.scaleRatio - point0.x) * value,\n                  y: point0.y + (point1.y * this.scaleRatio - point0.y) * value\n                };\n                currentSurface.push(currentPoint);\n              }\n              currentArea[0] = currentSurface;\n            }\n            if (holeFrom && holeFrom.length > 0 && holeTo && holeTo.length > 0) {\n              var currentHole = [];\n              for (var i_5 = 0, hlen = holeFrom.length; i_5 < hlen; i_5++) {\n                var point0 = holeFrom[i_5];\n                var point1 = holeTo[i_5];\n                var currentPoint = {\n                  x: point0.x + (point1.x * this.scaleRatio - point0.x) * value,\n                  y: point0.y + (point1.y * this.scaleRatio - point0.y) * value\n                };\n                currentHole.push(currentPoint);\n              }\n              currentArea[1] = currentHole;\n            }\n          }\n        }\n      }\n      this.morphable.currentPoints = currentPoints;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Restores the polygon to its original appearance.\r\n   *\r\n   * @param duration  Duration (ms)\r\n   * @param easing    Easing function\r\n   * @return Animation\r\n   */\n  Morpher.prototype.morphBack = function (duration, easing) {\n    this._morphToPointsReal = this._morphFromPointsReal;\n    this._morphFromPointsReal = this.morphable.currentPoints;\n    if (!$type.hasValue(duration)) {\n      duration = this.morphDuration;\n    }\n    if (!$type.hasValue(easing)) {\n      easing = this.morphEasing;\n    }\n    var animation = new Animation(this, {\n      property: \"morphProgress\",\n      from: 0,\n      to: 1\n    }, duration, easing);\n    this._disposers.push(animation);\n    animation.start();\n    return animation;\n  };\n  Object.defineProperty(Morpher.prototype, \"animations\", {\n    /**\r\n     * Returns a list of morph animations currently being played.\r\n     *\r\n     * @return List of animations\r\n     */\n    get: function () {\n      if (!this._animations) {\n        this._animations = [];\n        this._disposers.push(new AnimationDisposer(this._animations));\n      }\n      return this._animations;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Morpher;\n}(BaseObject);\nexport { Morpher };","map":{"version":3,"names":["__extends","BaseObject","Animation","AnimationDisposer","$math","$ease","$type","Morpher","_super","morphable","_this","call","_bboxes","morphDuration","morphEasing","cubicOut","morphToSingle","scaleRatio","className","applyTheme","prototype","morphToPolygon","toPoints","duration","easing","points","currentPoints","sortPoints","_morphFromPointsReal","_morphToPointsReal","hasValue","normalizePoints","animation","property","from","to","_disposers","push","start","pointsA","pointsB","i","len","length","surfaceA","holeA","bboxA","getValue","getBBox","middleX","x","width","middleY","y","height","addPoints","distance","Infinity","splitAt","a","newDistance","getDistance","partA","slice","partB","concat","sort","b","bbox1","bbox2","bboxes","surface","getCommonRectangle","morphToCircle","radius","commonBBox","hole","fromPoints","bbox","realRadius","isNumber","Math","min","startAngle","getAngle","count","angle","realAngle","pointOnCircle","cos","sin","i_1","hlen","mustHaveCount","addToSegmentCount","round","newPoints","point0","point1","p","percent","extraPoint","lastPoint","morphToRectangle","realWidth","realHeight","i_2","i_3","Object","defineProperty","get","_morphProgress","set","value","currentArea","surfaceFrom","holeFrom","surfaceTo","holeTo","currentSurface","i_4","slen","currentPoint","currentHole","i_5","enumerable","configurable","morphBack","_animations"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/utils/Morpher.js"],"sourcesContent":["/**\r\n * Morpher module contains functionality that allows morphing one polygon to\r\n * another.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../Base\";\r\nimport { Animation, AnimationDisposer } from \"../utils/Animation\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $ease from \"../utils/Ease\";\r\nimport * as $type from \"../utils/Type\";\r\n/**\r\n * Morpher can be used to morph one polygon to some other polygon.\r\n */\r\nvar Morpher = /** @class */ (function (_super) {\r\n    __extends(Morpher, _super);\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param morphable An object to morph\r\n     */\r\n    function Morpher(morphable) {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * A storage for measurements.\r\n         */\r\n        _this._bboxes = [];\r\n        /**\r\n         * Duration of the morphing animation in milliseconds.\r\n         */\r\n        _this.morphDuration = 800;\r\n        /**\r\n         * An easing function to use for morphing animation.\r\n         *\r\n         * @see {@link Ease}\r\n         */\r\n        _this.morphEasing = $ease.cubicOut;\r\n        /**\r\n         * If set to `true`, all separate parts of the multi-part polygon will\r\n         * morph into a single circle or polygon when using built-in methods\r\n         * `morphToCircle()` or `morphToPolygon()`.\r\n         *\r\n         * Otherwise each separate part of polygon will morph to individual target\r\n         * circle or polgyon.\r\n         */\r\n        _this.morphToSingle = true;\r\n        /**\r\n         * A ratio to scale morphed object in relation to the source object.\r\n         */\r\n        _this.scaleRatio = 1;\r\n        _this.className = \"Morpher\";\r\n        _this.morphable = morphable;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Morphs a polygon to another polygon.\r\n     *\r\n     * @param toPoints  Corner points of the target shape\r\n     * @param duration  Duration in milliseconds\r\n     * @param easing    Easing function\r\n     * @return Animation\r\n     */\r\n    Morpher.prototype.morphToPolygon = function (toPoints, duration, easing) {\r\n        var points = this.morphable.currentPoints;\r\n        if (points && toPoints) {\r\n            this.sortPoints(points);\r\n            this.sortPoints(toPoints);\r\n            this._morphFromPointsReal = [];\r\n            this._morphToPointsReal = [];\r\n            if (!$type.hasValue(duration)) {\r\n                duration = this.morphDuration;\r\n            }\r\n            if (!$type.hasValue(easing)) {\r\n                easing = this.morphEasing;\r\n            }\r\n            this._morphFromPointsReal = this.normalizePoints(toPoints, points);\r\n            this._morphToPointsReal = this.normalizePoints(points, toPoints);\r\n            this.morphable.currentPoints = this._morphFromPointsReal;\r\n            var animation = new Animation(this, { property: \"morphProgress\", from: 0, to: 1 }, duration, easing);\r\n            this._disposers.push(animation);\r\n            animation.start();\r\n            return animation;\r\n        }\r\n    };\r\n    /**\r\n     * [normalizePoints description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param pointsA  Point A\r\n     * @param pointsB  Point B\r\n     * @return Normalized points\r\n     */\r\n    Morpher.prototype.normalizePoints = function (pointsA, pointsB) {\r\n        for (var i = 0, len = pointsA.length; i < len; i++) {\r\n            var surfaceA = pointsA[i][0];\r\n            var holeA = pointsA[i][1];\r\n            var bboxA = $type.getValue($math.getBBox(surfaceA));\r\n            var middleX = bboxA.x + bboxA.width;\r\n            var middleY = bboxA.y + bboxA.height;\r\n            // check if we have the same in PointsB\r\n            if (!pointsB[i]) {\r\n                pointsB[i] = [];\r\n            }\r\n            // check if we have surface in pointsB\r\n            if (surfaceA && !pointsB[i][0]) {\r\n                pointsB[i][0] = [{ x: middleX, y: middleY }, { x: middleX, y: middleY }];\r\n            }\r\n            if (pointsB[i][0]) {\r\n                pointsB[i][0] = this.addPoints(pointsB[i][0], surfaceA.length);\r\n                var distance = Infinity;\r\n                var splitAt = 0;\r\n                for (var a = 0; a < pointsB[i][0].length; a++) {\r\n                    var newDistance = $math.getDistance(pointsB[i][0][a], surfaceA[0]);\r\n                    if (newDistance < distance) {\r\n                        splitAt = a;\r\n                        distance = newDistance;\r\n                    }\r\n                }\r\n                var partA = pointsB[i][0].slice(0, splitAt);\r\n                var partB = pointsB[i][0].slice(splitAt);\r\n                pointsB[i][0] = partB.concat(partA);\r\n            }\r\n            if (holeA) {\r\n                if (!pointsB[i][1]) {\r\n                    pointsB[i][1] = [{ x: middleX, y: middleY }, { x: middleX, y: middleY }];\r\n                }\r\n                pointsB[i][1] = this.addPoints(pointsB[i][1], holeA.length);\r\n            }\r\n        }\r\n        return pointsB;\r\n    };\r\n    /**\r\n     * [sortPoints description]\r\n     *\r\n     * @ignore Exclude from doc\r\n     * @todo Description\r\n     * @param points  [description]\r\n     * @return                        common bbox of points\r\n     */\r\n    Morpher.prototype.sortPoints = function (points) {\r\n        points.sort(function (a, b) {\r\n            var bbox1 = $type.getValue($math.getBBox(a[0]));\r\n            var bbox2 = $type.getValue($math.getBBox(b[0]));\r\n            if (bbox1.width * bbox1.height > bbox2.width * bbox2.height) {\r\n                return -1;\r\n            }\r\n            else {\r\n                return 1;\r\n            }\r\n        });\r\n        var bboxes = [];\r\n        for (var i = 0, len = points.length; i < len; i++) {\r\n            var surface = points[i][0];\r\n            if (surface) {\r\n                bboxes.push($type.getValue($math.getBBox(surface)));\r\n            }\r\n        }\r\n        return $math.getCommonRectangle(bboxes);\r\n    };\r\n    /**\r\n     * Morphs polygon to a circle (it is actually a polygon which makes a circle).\r\n     *\r\n     * @param radius    Target circle radius (px)\r\n     * @param duration  Duration (ms)\r\n     * @param easing    Easing function\r\n     * @return Animation\r\n     */\r\n    Morpher.prototype.morphToCircle = function (radius, duration, easing) {\r\n        var points = this.morphable.points;\r\n        var commonBBox = this.sortPoints(points);\r\n        this._morphFromPointsReal = [];\r\n        this._morphToPointsReal = [];\r\n        if (!$type.hasValue(duration)) {\r\n            duration = this.morphDuration;\r\n        }\r\n        if (!$type.hasValue(easing)) {\r\n            easing = this.morphEasing;\r\n        }\r\n        // surface\r\n        for (var i = 0, len = points.length; i < len; i++) {\r\n            var surface = points[i][0];\r\n            var hole = points[i][1];\r\n            this._morphFromPointsReal[i] = [];\r\n            this._morphToPointsReal[i] = [];\r\n            if (surface) {\r\n                var toPoints = surface;\r\n                var fromPoints = surface;\r\n                var bbox = $type.getValue($math.getBBox(fromPoints)); // this._bboxes[i];\r\n                if (this.morphToSingle) {\r\n                    bbox = $type.getValue(commonBBox);\r\n                }\r\n                var middleX = bbox.x + bbox.width / 2;\r\n                var middleY = bbox.y + bbox.height / 2;\r\n                var realRadius = radius;\r\n                if (!$type.isNumber(realRadius)) {\r\n                    realRadius = Math.min(bbox.width / 2, bbox.height / 2);\r\n                }\r\n                toPoints = [];\r\n                // find angle for the first point\r\n                var startAngle = $math.getAngle({ x: middleX, y: middleY }, surface[0]);\r\n                var count = 100;\r\n                if (surface.length > count) {\r\n                    count = surface.length;\r\n                }\r\n                fromPoints = this.addPoints(surface, count);\r\n                count = fromPoints.length; // add Points might increase number a bit\r\n                var angle = 360 / (count - 1);\r\n                for (var a = 0; a < count; a++) {\r\n                    var realAngle = angle * a + startAngle;\r\n                    var pointOnCircle = { x: middleX + realRadius * $math.cos(realAngle), y: middleY + realRadius * $math.sin(realAngle) };\r\n                    toPoints[a] = pointOnCircle;\r\n                }\r\n                if (hole && hole.length > 0) {\r\n                    for (var i_1 = 0, hlen = hole.length; i_1 < hlen; i_1++) {\r\n                        toPoints.push({ x: middleX, y: middleY });\r\n                    }\r\n                }\r\n                this._morphFromPointsReal[i][0] = fromPoints;\r\n                this._morphToPointsReal[i][0] = toPoints;\r\n            }\r\n        }\r\n        this.morphable.currentPoints = this._morphFromPointsReal;\r\n        var animation = new Animation(this, { property: \"morphProgress\", from: 0, to: 1 }, duration, easing);\r\n        this._disposers.push(animation);\r\n        animation.start();\r\n        return animation;\r\n    };\r\n    /**\r\n     * [addPoints description]\r\n     *\r\n     * @ignore Exclude from doc\r\n     * @todo Description\r\n     * @param points         [description]\r\n     * @param mustHaveCount  [description]\r\n     * @return [description]\r\n     */\r\n    Morpher.prototype.addPoints = function (points, mustHaveCount) {\r\n        var addToSegmentCount = Math.round(mustHaveCount / points.length);\r\n        var newPoints = [];\r\n        for (var i = 0, len = points.length; i < len; i++) {\r\n            var point0 = points[i];\r\n            var point1 = void 0;\r\n            if (i == points.length - 1) {\r\n                point1 = points[0];\r\n            }\r\n            else {\r\n                point1 = points[i + 1];\r\n            }\r\n            newPoints.push(point0);\r\n            for (var p = 1; p < addToSegmentCount; p++) {\r\n                var percent = p / addToSegmentCount;\r\n                var extraPoint = { x: point0.x + (point1.x - point0.x) * percent, y: point0.y + (point1.y - point0.y) * percent };\r\n                newPoints.push(extraPoint);\r\n            }\r\n            // stop adding in case we already added more than left in original\r\n            if (newPoints.length + points.length - i == mustHaveCount) {\r\n                addToSegmentCount = 0;\r\n            }\r\n        }\r\n        if (newPoints.length < mustHaveCount && points.length > 0) {\r\n            var lastPoint = points[points.length - 1];\r\n            for (var p = newPoints.length; p < mustHaveCount; p++) {\r\n                // add same as last\r\n                newPoints.push({ x: lastPoint.x, y: lastPoint.y });\r\n            }\r\n        }\r\n        return newPoints;\r\n    };\r\n    /**\r\n     * Morphs polygon into a rectangular polygon.\r\n     *\r\n     * @param width     Width of the target rectangle (px)\r\n     * @param height    Height of the target rectangle (px)\r\n     * @param duration  Duration (ms)\r\n     * @param easing    Easing function\r\n     * @return Animation\r\n     */\r\n    Morpher.prototype.morphToRectangle = function (width, height, duration, easing) {\r\n        var points = this.morphable.points;\r\n        this.sortPoints(points);\r\n        this._morphFromPointsReal = [];\r\n        this._morphToPointsReal = [];\r\n        if (!$type.hasValue(duration)) {\r\n            duration = this.morphDuration;\r\n        }\r\n        if (!$type.hasValue(easing)) {\r\n            easing = this.morphEasing;\r\n        }\r\n        //\t\tlet biggestBBox: IRectangle = this._bboxes[this._biggestIndex];\r\n        // surface\r\n        for (var i = 0, len = points.length; i < len; i++) {\r\n            var surface = points[i][0];\r\n            var hole = points[i][1];\r\n            this._morphFromPointsReal[i] = [];\r\n            this._morphToPointsReal[i] = [];\r\n            if (surface) {\r\n                var toPoints = surface;\r\n                var fromPoints = surface;\r\n                var bbox = this._bboxes[i];\r\n                // we only work with first area. TODO: maybe we should find the biggest one?\r\n                if (this.morphToSingle) {\r\n                    //if (i != this._biggestIndex) {\r\n                    //\tbbox = { x: biggestBBox.x + biggestBBox.width / 2, y: biggestBBox.y + biggestBBox.height / 2, width: 0, height: 0 };\r\n                    //}\r\n                }\r\n                var x = bbox.x;\r\n                var y = bbox.y;\r\n                var realWidth = width;\r\n                var realHeight = height;\r\n                if (!$type.isNumber(realWidth)) {\r\n                    realWidth = bbox.width;\r\n                }\r\n                if (!$type.isNumber(realHeight)) {\r\n                    realHeight = bbox.height;\r\n                }\r\n                toPoints = [{ x: x, y: y }, { x: x + realWidth, y: y }, { x: x + realWidth, y: y + realHeight }, { x: x, y: y + realHeight }];\r\n                toPoints = this.addPoints(toPoints, surface.length);\r\n                // if polygon has less points then count, add\r\n                if (surface.length < 4) {\r\n                    for (var i_2 = surface.length; i_2 < 4; i_2++) {\r\n                        toPoints.push({ x: surface[i_2].x, y: surface[i_2].y });\r\n                    }\r\n                }\r\n                if (hole && hole.length > 0) {\r\n                    var middleX = bbox.x + bbox.width / 2;\r\n                    var middleY = bbox.y + bbox.height / 2;\r\n                    for (var i_3 = 0, hlen = hole.length; i_3 < hlen; i_3++) {\r\n                        toPoints.push({ x: middleX, y: middleY });\r\n                    }\r\n                }\r\n                this._morphFromPointsReal[i][0] = fromPoints;\r\n                this._morphToPointsReal[i][0] = toPoints;\r\n            }\r\n        }\r\n        this.morphable.currentPoints = this._morphFromPointsReal;\r\n        var animation = new Animation(this, { property: \"morphProgress\", from: 0, to: 1 }, duration, easing);\r\n        this._disposers.push(animation);\r\n        animation.start();\r\n        return animation;\r\n    };\r\n    Object.defineProperty(Morpher.prototype, \"morphProgress\", {\r\n        /**\r\n         * Returns the progress of morph transition.\r\n         *\r\n         * @return Progress (0-1)\r\n         */\r\n        get: function () {\r\n            return this._morphProgress;\r\n        },\r\n        /**\r\n         * Progress of the morph transition.\r\n         *\r\n         * Setting this will also trigger actual transformation.\r\n         *\r\n         * @param value  Progress (0-1)\r\n         */\r\n        set: function (value) {\r\n            this._morphProgress = value;\r\n            var currentPoints = [];\r\n            if (value != null) {\r\n                var fromPoints = this._morphFromPointsReal;\r\n                var toPoints = this._morphToPointsReal;\r\n                if (fromPoints != null && toPoints != null) {\r\n                    for (var i = 0, len = fromPoints.length; i < len; i++) {\r\n                        var currentArea = [];\r\n                        currentPoints.push(currentArea);\r\n                        var surfaceFrom = fromPoints[i][0];\r\n                        var holeFrom = fromPoints[i][1];\r\n                        var surfaceTo = toPoints[i][0];\r\n                        var holeTo = toPoints[i][1];\r\n                        if (surfaceFrom && surfaceFrom.length > 0 && surfaceTo && surfaceTo.length > 0) {\r\n                            var currentSurface = [];\r\n                            for (var i_4 = 0, slen = surfaceFrom.length; i_4 < slen; i_4++) {\r\n                                var point0 = surfaceFrom[i_4];\r\n                                var point1 = surfaceTo[i_4];\r\n                                var currentPoint = { x: point0.x + (point1.x * this.scaleRatio - point0.x) * value, y: point0.y + (point1.y * this.scaleRatio - point0.y) * value };\r\n                                currentSurface.push(currentPoint);\r\n                            }\r\n                            currentArea[0] = currentSurface;\r\n                        }\r\n                        if (holeFrom && holeFrom.length > 0 && holeTo && holeTo.length > 0) {\r\n                            var currentHole = [];\r\n                            for (var i_5 = 0, hlen = holeFrom.length; i_5 < hlen; i_5++) {\r\n                                var point0 = holeFrom[i_5];\r\n                                var point1 = holeTo[i_5];\r\n                                var currentPoint = { x: point0.x + (point1.x * this.scaleRatio - point0.x) * value, y: point0.y + (point1.y * this.scaleRatio - point0.y) * value };\r\n                                currentHole.push(currentPoint);\r\n                            }\r\n                            currentArea[1] = currentHole;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.morphable.currentPoints = currentPoints;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Restores the polygon to its original appearance.\r\n     *\r\n     * @param duration  Duration (ms)\r\n     * @param easing    Easing function\r\n     * @return Animation\r\n     */\r\n    Morpher.prototype.morphBack = function (duration, easing) {\r\n        this._morphToPointsReal = this._morphFromPointsReal;\r\n        this._morphFromPointsReal = this.morphable.currentPoints;\r\n        if (!$type.hasValue(duration)) {\r\n            duration = this.morphDuration;\r\n        }\r\n        if (!$type.hasValue(easing)) {\r\n            easing = this.morphEasing;\r\n        }\r\n        var animation = new Animation(this, { property: \"morphProgress\", from: 0, to: 1 }, duration, easing);\r\n        this._disposers.push(animation);\r\n        animation.start();\r\n        return animation;\r\n    };\r\n    Object.defineProperty(Morpher.prototype, \"animations\", {\r\n        /**\r\n         * Returns a list of morph animations currently being played.\r\n         *\r\n         * @return List of animations\r\n         */\r\n        get: function () {\r\n            if (!this._animations) {\r\n                this._animations = [];\r\n                this._disposers.push(new AnimationDisposer(this._animations));\r\n            }\r\n            return this._animations;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Morpher;\r\n}(BaseObject));\r\nexport { Morpher };\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,SAAS,QAAQ,OAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,UAAU,QAAQ,SAAS;AACpC,SAASC,SAAS,EAAEC,iBAAiB,QAAQ,oBAAoB;AACjE,OAAO,KAAKC,KAAK,MAAM,eAAe;AACtC,OAAO,KAAKC,KAAK,MAAM,eAAe;AACtC,OAAO,KAAKC,KAAK,MAAM,eAAe;AACtC;AACA;AACA;AACA,IAAIC,OAAO,GAAG,aAAe,UAAUC,MAAM,EAAE;EAC3CR,SAAS,CAACO,OAAO,EAAEC,MAAM,CAAC;EAC1B;AACJ;AACA;AACA;AACA;EACI,SAASD,OAAOA,CAACE,SAAS,EAAE;IACxB,IAAIC,KAAK,GAAGF,MAAM,CAACG,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI;IACrC;AACR;AACA;IACQD,KAAK,CAACE,OAAO,GAAG,EAAE;IAClB;AACR;AACA;IACQF,KAAK,CAACG,aAAa,GAAG,GAAG;IACzB;AACR;AACA;AACA;AACA;IACQH,KAAK,CAACI,WAAW,GAAGT,KAAK,CAACU,QAAQ;IAClC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQL,KAAK,CAACM,aAAa,GAAG,IAAI;IAC1B;AACR;AACA;IACQN,KAAK,CAACO,UAAU,GAAG,CAAC;IACpBP,KAAK,CAACQ,SAAS,GAAG,SAAS;IAC3BR,KAAK,CAACD,SAAS,GAAGA,SAAS;IAC3BC,KAAK,CAACS,UAAU,CAAC,CAAC;IAClB,OAAOT,KAAK;EAChB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIH,OAAO,CAACa,SAAS,CAACC,cAAc,GAAG,UAAUC,QAAQ,EAAEC,QAAQ,EAAEC,MAAM,EAAE;IACrE,IAAIC,MAAM,GAAG,IAAI,CAAChB,SAAS,CAACiB,aAAa;IACzC,IAAID,MAAM,IAAIH,QAAQ,EAAE;MACpB,IAAI,CAACK,UAAU,CAACF,MAAM,CAAC;MACvB,IAAI,CAACE,UAAU,CAACL,QAAQ,CAAC;MACzB,IAAI,CAACM,oBAAoB,GAAG,EAAE;MAC9B,IAAI,CAACC,kBAAkB,GAAG,EAAE;MAC5B,IAAI,CAACvB,KAAK,CAACwB,QAAQ,CAACP,QAAQ,CAAC,EAAE;QAC3BA,QAAQ,GAAG,IAAI,CAACV,aAAa;MACjC;MACA,IAAI,CAACP,KAAK,CAACwB,QAAQ,CAACN,MAAM,CAAC,EAAE;QACzBA,MAAM,GAAG,IAAI,CAACV,WAAW;MAC7B;MACA,IAAI,CAACc,oBAAoB,GAAG,IAAI,CAACG,eAAe,CAACT,QAAQ,EAAEG,MAAM,CAAC;MAClE,IAAI,CAACI,kBAAkB,GAAG,IAAI,CAACE,eAAe,CAACN,MAAM,EAAEH,QAAQ,CAAC;MAChE,IAAI,CAACb,SAAS,CAACiB,aAAa,GAAG,IAAI,CAACE,oBAAoB;MACxD,IAAII,SAAS,GAAG,IAAI9B,SAAS,CAAC,IAAI,EAAE;QAAE+B,QAAQ,EAAE,eAAe;QAAEC,IAAI,EAAE,CAAC;QAAEC,EAAE,EAAE;MAAE,CAAC,EAAEZ,QAAQ,EAAEC,MAAM,CAAC;MACpG,IAAI,CAACY,UAAU,CAACC,IAAI,CAACL,SAAS,CAAC;MAC/BA,SAAS,CAACM,KAAK,CAAC,CAAC;MACjB,OAAON,SAAS;IACpB;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIzB,OAAO,CAACa,SAAS,CAACW,eAAe,GAAG,UAAUQ,OAAO,EAAEC,OAAO,EAAE;IAC5D,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGH,OAAO,CAACI,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MAChD,IAAIG,QAAQ,GAAGL,OAAO,CAACE,CAAC,CAAC,CAAC,CAAC,CAAC;MAC5B,IAAII,KAAK,GAAGN,OAAO,CAACE,CAAC,CAAC,CAAC,CAAC,CAAC;MACzB,IAAIK,KAAK,GAAGxC,KAAK,CAACyC,QAAQ,CAAC3C,KAAK,CAAC4C,OAAO,CAACJ,QAAQ,CAAC,CAAC;MACnD,IAAIK,OAAO,GAAGH,KAAK,CAACI,CAAC,GAAGJ,KAAK,CAACK,KAAK;MACnC,IAAIC,OAAO,GAAGN,KAAK,CAACO,CAAC,GAAGP,KAAK,CAACQ,MAAM;MACpC;MACA,IAAI,CAACd,OAAO,CAACC,CAAC,CAAC,EAAE;QACbD,OAAO,CAACC,CAAC,CAAC,GAAG,EAAE;MACnB;MACA;MACA,IAAIG,QAAQ,IAAI,CAACJ,OAAO,CAACC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;QAC5BD,OAAO,CAACC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;UAAES,CAAC,EAAED,OAAO;UAAEI,CAAC,EAAED;QAAQ,CAAC,EAAE;UAAEF,CAAC,EAAED,OAAO;UAAEI,CAAC,EAAED;QAAQ,CAAC,CAAC;MAC5E;MACA,IAAIZ,OAAO,CAACC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;QACfD,OAAO,CAACC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAACc,SAAS,CAACf,OAAO,CAACC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEG,QAAQ,CAACD,MAAM,CAAC;QAC9D,IAAIa,QAAQ,GAAGC,QAAQ;QACvB,IAAIC,OAAO,GAAG,CAAC;QACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnB,OAAO,CAACC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACE,MAAM,EAAEgB,CAAC,EAAE,EAAE;UAC3C,IAAIC,WAAW,GAAGxD,KAAK,CAACyD,WAAW,CAACrB,OAAO,CAACC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACkB,CAAC,CAAC,EAAEf,QAAQ,CAAC,CAAC,CAAC,CAAC;UAClE,IAAIgB,WAAW,GAAGJ,QAAQ,EAAE;YACxBE,OAAO,GAAGC,CAAC;YACXH,QAAQ,GAAGI,WAAW;UAC1B;QACJ;QACA,IAAIE,KAAK,GAAGtB,OAAO,CAACC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACsB,KAAK,CAAC,CAAC,EAAEL,OAAO,CAAC;QAC3C,IAAIM,KAAK,GAAGxB,OAAO,CAACC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACsB,KAAK,CAACL,OAAO,CAAC;QACxClB,OAAO,CAACC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGuB,KAAK,CAACC,MAAM,CAACH,KAAK,CAAC;MACvC;MACA,IAAIjB,KAAK,EAAE;QACP,IAAI,CAACL,OAAO,CAACC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;UAChBD,OAAO,CAACC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;YAAES,CAAC,EAAED,OAAO;YAAEI,CAAC,EAAED;UAAQ,CAAC,EAAE;YAAEF,CAAC,EAAED,OAAO;YAAEI,CAAC,EAAED;UAAQ,CAAC,CAAC;QAC5E;QACAZ,OAAO,CAACC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAACc,SAAS,CAACf,OAAO,CAACC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEI,KAAK,CAACF,MAAM,CAAC;MAC/D;IACJ;IACA,OAAOH,OAAO;EAClB,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIjC,OAAO,CAACa,SAAS,CAACO,UAAU,GAAG,UAAUF,MAAM,EAAE;IAC7CA,MAAM,CAACyC,IAAI,CAAC,UAAUP,CAAC,EAAEQ,CAAC,EAAE;MACxB,IAAIC,KAAK,GAAG9D,KAAK,CAACyC,QAAQ,CAAC3C,KAAK,CAAC4C,OAAO,CAACW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC/C,IAAIU,KAAK,GAAG/D,KAAK,CAACyC,QAAQ,CAAC3C,KAAK,CAAC4C,OAAO,CAACmB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC/C,IAAIC,KAAK,CAACjB,KAAK,GAAGiB,KAAK,CAACd,MAAM,GAAGe,KAAK,CAAClB,KAAK,GAAGkB,KAAK,CAACf,MAAM,EAAE;QACzD,OAAO,CAAC,CAAC;MACb,CAAC,MACI;QACD,OAAO,CAAC;MACZ;IACJ,CAAC,CAAC;IACF,IAAIgB,MAAM,GAAG,EAAE;IACf,KAAK,IAAI7B,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGjB,MAAM,CAACkB,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MAC/C,IAAI8B,OAAO,GAAG9C,MAAM,CAACgB,CAAC,CAAC,CAAC,CAAC,CAAC;MAC1B,IAAI8B,OAAO,EAAE;QACTD,MAAM,CAACjC,IAAI,CAAC/B,KAAK,CAACyC,QAAQ,CAAC3C,KAAK,CAAC4C,OAAO,CAACuB,OAAO,CAAC,CAAC,CAAC;MACvD;IACJ;IACA,OAAOnE,KAAK,CAACoE,kBAAkB,CAACF,MAAM,CAAC;EAC3C,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI/D,OAAO,CAACa,SAAS,CAACqD,aAAa,GAAG,UAAUC,MAAM,EAAEnD,QAAQ,EAAEC,MAAM,EAAE;IAClE,IAAIC,MAAM,GAAG,IAAI,CAAChB,SAAS,CAACgB,MAAM;IAClC,IAAIkD,UAAU,GAAG,IAAI,CAAChD,UAAU,CAACF,MAAM,CAAC;IACxC,IAAI,CAACG,oBAAoB,GAAG,EAAE;IAC9B,IAAI,CAACC,kBAAkB,GAAG,EAAE;IAC5B,IAAI,CAACvB,KAAK,CAACwB,QAAQ,CAACP,QAAQ,CAAC,EAAE;MAC3BA,QAAQ,GAAG,IAAI,CAACV,aAAa;IACjC;IACA,IAAI,CAACP,KAAK,CAACwB,QAAQ,CAACN,MAAM,CAAC,EAAE;MACzBA,MAAM,GAAG,IAAI,CAACV,WAAW;IAC7B;IACA;IACA,KAAK,IAAI2B,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGjB,MAAM,CAACkB,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MAC/C,IAAI8B,OAAO,GAAG9C,MAAM,CAACgB,CAAC,CAAC,CAAC,CAAC,CAAC;MAC1B,IAAImC,IAAI,GAAGnD,MAAM,CAACgB,CAAC,CAAC,CAAC,CAAC,CAAC;MACvB,IAAI,CAACb,oBAAoB,CAACa,CAAC,CAAC,GAAG,EAAE;MACjC,IAAI,CAACZ,kBAAkB,CAACY,CAAC,CAAC,GAAG,EAAE;MAC/B,IAAI8B,OAAO,EAAE;QACT,IAAIjD,QAAQ,GAAGiD,OAAO;QACtB,IAAIM,UAAU,GAAGN,OAAO;QACxB,IAAIO,IAAI,GAAGxE,KAAK,CAACyC,QAAQ,CAAC3C,KAAK,CAAC4C,OAAO,CAAC6B,UAAU,CAAC,CAAC,CAAC,CAAC;QACtD,IAAI,IAAI,CAAC7D,aAAa,EAAE;UACpB8D,IAAI,GAAGxE,KAAK,CAACyC,QAAQ,CAAC4B,UAAU,CAAC;QACrC;QACA,IAAI1B,OAAO,GAAG6B,IAAI,CAAC5B,CAAC,GAAG4B,IAAI,CAAC3B,KAAK,GAAG,CAAC;QACrC,IAAIC,OAAO,GAAG0B,IAAI,CAACzB,CAAC,GAAGyB,IAAI,CAACxB,MAAM,GAAG,CAAC;QACtC,IAAIyB,UAAU,GAAGL,MAAM;QACvB,IAAI,CAACpE,KAAK,CAAC0E,QAAQ,CAACD,UAAU,CAAC,EAAE;UAC7BA,UAAU,GAAGE,IAAI,CAACC,GAAG,CAACJ,IAAI,CAAC3B,KAAK,GAAG,CAAC,EAAE2B,IAAI,CAACxB,MAAM,GAAG,CAAC,CAAC;QAC1D;QACAhC,QAAQ,GAAG,EAAE;QACb;QACA,IAAI6D,UAAU,GAAG/E,KAAK,CAACgF,QAAQ,CAAC;UAAElC,CAAC,EAAED,OAAO;UAAEI,CAAC,EAAED;QAAQ,CAAC,EAAEmB,OAAO,CAAC,CAAC,CAAC,CAAC;QACvE,IAAIc,KAAK,GAAG,GAAG;QACf,IAAId,OAAO,CAAC5B,MAAM,GAAG0C,KAAK,EAAE;UACxBA,KAAK,GAAGd,OAAO,CAAC5B,MAAM;QAC1B;QACAkC,UAAU,GAAG,IAAI,CAACtB,SAAS,CAACgB,OAAO,EAAEc,KAAK,CAAC;QAC3CA,KAAK,GAAGR,UAAU,CAAClC,MAAM,CAAC,CAAC;QAC3B,IAAI2C,KAAK,GAAG,GAAG,IAAID,KAAK,GAAG,CAAC,CAAC;QAC7B,KAAK,IAAI1B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0B,KAAK,EAAE1B,CAAC,EAAE,EAAE;UAC5B,IAAI4B,SAAS,GAAGD,KAAK,GAAG3B,CAAC,GAAGwB,UAAU;UACtC,IAAIK,aAAa,GAAG;YAAEtC,CAAC,EAAED,OAAO,GAAG8B,UAAU,GAAG3E,KAAK,CAACqF,GAAG,CAACF,SAAS,CAAC;YAAElC,CAAC,EAAED,OAAO,GAAG2B,UAAU,GAAG3E,KAAK,CAACsF,GAAG,CAACH,SAAS;UAAE,CAAC;UACtHjE,QAAQ,CAACqC,CAAC,CAAC,GAAG6B,aAAa;QAC/B;QACA,IAAIZ,IAAI,IAAIA,IAAI,CAACjC,MAAM,GAAG,CAAC,EAAE;UACzB,KAAK,IAAIgD,GAAG,GAAG,CAAC,EAAEC,IAAI,GAAGhB,IAAI,CAACjC,MAAM,EAAEgD,GAAG,GAAGC,IAAI,EAAED,GAAG,EAAE,EAAE;YACrDrE,QAAQ,CAACe,IAAI,CAAC;cAAEa,CAAC,EAAED,OAAO;cAAEI,CAAC,EAAED;YAAQ,CAAC,CAAC;UAC7C;QACJ;QACA,IAAI,CAACxB,oBAAoB,CAACa,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGoC,UAAU;QAC5C,IAAI,CAAChD,kBAAkB,CAACY,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGnB,QAAQ;MAC5C;IACJ;IACA,IAAI,CAACb,SAAS,CAACiB,aAAa,GAAG,IAAI,CAACE,oBAAoB;IACxD,IAAII,SAAS,GAAG,IAAI9B,SAAS,CAAC,IAAI,EAAE;MAAE+B,QAAQ,EAAE,eAAe;MAAEC,IAAI,EAAE,CAAC;MAAEC,EAAE,EAAE;IAAE,CAAC,EAAEZ,QAAQ,EAAEC,MAAM,CAAC;IACpG,IAAI,CAACY,UAAU,CAACC,IAAI,CAACL,SAAS,CAAC;IAC/BA,SAAS,CAACM,KAAK,CAAC,CAAC;IACjB,OAAON,SAAS;EACpB,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIzB,OAAO,CAACa,SAAS,CAACmC,SAAS,GAAG,UAAU9B,MAAM,EAAEoE,aAAa,EAAE;IAC3D,IAAIC,iBAAiB,GAAGb,IAAI,CAACc,KAAK,CAACF,aAAa,GAAGpE,MAAM,CAACkB,MAAM,CAAC;IACjE,IAAIqD,SAAS,GAAG,EAAE;IAClB,KAAK,IAAIvD,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGjB,MAAM,CAACkB,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MAC/C,IAAIwD,MAAM,GAAGxE,MAAM,CAACgB,CAAC,CAAC;MACtB,IAAIyD,MAAM,GAAG,KAAK,CAAC;MACnB,IAAIzD,CAAC,IAAIhB,MAAM,CAACkB,MAAM,GAAG,CAAC,EAAE;QACxBuD,MAAM,GAAGzE,MAAM,CAAC,CAAC,CAAC;MACtB,CAAC,MACI;QACDyE,MAAM,GAAGzE,MAAM,CAACgB,CAAC,GAAG,CAAC,CAAC;MAC1B;MACAuD,SAAS,CAAC3D,IAAI,CAAC4D,MAAM,CAAC;MACtB,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,iBAAiB,EAAEK,CAAC,EAAE,EAAE;QACxC,IAAIC,OAAO,GAAGD,CAAC,GAAGL,iBAAiB;QACnC,IAAIO,UAAU,GAAG;UAAEnD,CAAC,EAAE+C,MAAM,CAAC/C,CAAC,GAAG,CAACgD,MAAM,CAAChD,CAAC,GAAG+C,MAAM,CAAC/C,CAAC,IAAIkD,OAAO;UAAE/C,CAAC,EAAE4C,MAAM,CAAC5C,CAAC,GAAG,CAAC6C,MAAM,CAAC7C,CAAC,GAAG4C,MAAM,CAAC5C,CAAC,IAAI+C;QAAQ,CAAC;QACjHJ,SAAS,CAAC3D,IAAI,CAACgE,UAAU,CAAC;MAC9B;MACA;MACA,IAAIL,SAAS,CAACrD,MAAM,GAAGlB,MAAM,CAACkB,MAAM,GAAGF,CAAC,IAAIoD,aAAa,EAAE;QACvDC,iBAAiB,GAAG,CAAC;MACzB;IACJ;IACA,IAAIE,SAAS,CAACrD,MAAM,GAAGkD,aAAa,IAAIpE,MAAM,CAACkB,MAAM,GAAG,CAAC,EAAE;MACvD,IAAI2D,SAAS,GAAG7E,MAAM,CAACA,MAAM,CAACkB,MAAM,GAAG,CAAC,CAAC;MACzC,KAAK,IAAIwD,CAAC,GAAGH,SAAS,CAACrD,MAAM,EAAEwD,CAAC,GAAGN,aAAa,EAAEM,CAAC,EAAE,EAAE;QACnD;QACAH,SAAS,CAAC3D,IAAI,CAAC;UAAEa,CAAC,EAAEoD,SAAS,CAACpD,CAAC;UAAEG,CAAC,EAAEiD,SAAS,CAACjD;QAAE,CAAC,CAAC;MACtD;IACJ;IACA,OAAO2C,SAAS;EACpB,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIzF,OAAO,CAACa,SAAS,CAACmF,gBAAgB,GAAG,UAAUpD,KAAK,EAAEG,MAAM,EAAE/B,QAAQ,EAAEC,MAAM,EAAE;IAC5E,IAAIC,MAAM,GAAG,IAAI,CAAChB,SAAS,CAACgB,MAAM;IAClC,IAAI,CAACE,UAAU,CAACF,MAAM,CAAC;IACvB,IAAI,CAACG,oBAAoB,GAAG,EAAE;IAC9B,IAAI,CAACC,kBAAkB,GAAG,EAAE;IAC5B,IAAI,CAACvB,KAAK,CAACwB,QAAQ,CAACP,QAAQ,CAAC,EAAE;MAC3BA,QAAQ,GAAG,IAAI,CAACV,aAAa;IACjC;IACA,IAAI,CAACP,KAAK,CAACwB,QAAQ,CAACN,MAAM,CAAC,EAAE;MACzBA,MAAM,GAAG,IAAI,CAACV,WAAW;IAC7B;IACA;IACA;IACA,KAAK,IAAI2B,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGjB,MAAM,CAACkB,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MAC/C,IAAI8B,OAAO,GAAG9C,MAAM,CAACgB,CAAC,CAAC,CAAC,CAAC,CAAC;MAC1B,IAAImC,IAAI,GAAGnD,MAAM,CAACgB,CAAC,CAAC,CAAC,CAAC,CAAC;MACvB,IAAI,CAACb,oBAAoB,CAACa,CAAC,CAAC,GAAG,EAAE;MACjC,IAAI,CAACZ,kBAAkB,CAACY,CAAC,CAAC,GAAG,EAAE;MAC/B,IAAI8B,OAAO,EAAE;QACT,IAAIjD,QAAQ,GAAGiD,OAAO;QACtB,IAAIM,UAAU,GAAGN,OAAO;QACxB,IAAIO,IAAI,GAAG,IAAI,CAAClE,OAAO,CAAC6B,CAAC,CAAC;QAC1B;QACA,IAAI,IAAI,CAACzB,aAAa,EAAE;UACpB;UACA;UACA;QAAA;QAEJ,IAAIkC,CAAC,GAAG4B,IAAI,CAAC5B,CAAC;QACd,IAAIG,CAAC,GAAGyB,IAAI,CAACzB,CAAC;QACd,IAAImD,SAAS,GAAGrD,KAAK;QACrB,IAAIsD,UAAU,GAAGnD,MAAM;QACvB,IAAI,CAAChD,KAAK,CAAC0E,QAAQ,CAACwB,SAAS,CAAC,EAAE;UAC5BA,SAAS,GAAG1B,IAAI,CAAC3B,KAAK;QAC1B;QACA,IAAI,CAAC7C,KAAK,CAAC0E,QAAQ,CAACyB,UAAU,CAAC,EAAE;UAC7BA,UAAU,GAAG3B,IAAI,CAACxB,MAAM;QAC5B;QACAhC,QAAQ,GAAG,CAAC;UAAE4B,CAAC,EAAEA,CAAC;UAAEG,CAAC,EAAEA;QAAE,CAAC,EAAE;UAAEH,CAAC,EAAEA,CAAC,GAAGsD,SAAS;UAAEnD,CAAC,EAAEA;QAAE,CAAC,EAAE;UAAEH,CAAC,EAAEA,CAAC,GAAGsD,SAAS;UAAEnD,CAAC,EAAEA,CAAC,GAAGoD;QAAW,CAAC,EAAE;UAAEvD,CAAC,EAAEA,CAAC;UAAEG,CAAC,EAAEA,CAAC,GAAGoD;QAAW,CAAC,CAAC;QAC7HnF,QAAQ,GAAG,IAAI,CAACiC,SAAS,CAACjC,QAAQ,EAAEiD,OAAO,CAAC5B,MAAM,CAAC;QACnD;QACA,IAAI4B,OAAO,CAAC5B,MAAM,GAAG,CAAC,EAAE;UACpB,KAAK,IAAI+D,GAAG,GAAGnC,OAAO,CAAC5B,MAAM,EAAE+D,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;YAC3CpF,QAAQ,CAACe,IAAI,CAAC;cAAEa,CAAC,EAAEqB,OAAO,CAACmC,GAAG,CAAC,CAACxD,CAAC;cAAEG,CAAC,EAAEkB,OAAO,CAACmC,GAAG,CAAC,CAACrD;YAAE,CAAC,CAAC;UAC3D;QACJ;QACA,IAAIuB,IAAI,IAAIA,IAAI,CAACjC,MAAM,GAAG,CAAC,EAAE;UACzB,IAAIM,OAAO,GAAG6B,IAAI,CAAC5B,CAAC,GAAG4B,IAAI,CAAC3B,KAAK,GAAG,CAAC;UACrC,IAAIC,OAAO,GAAG0B,IAAI,CAACzB,CAAC,GAAGyB,IAAI,CAACxB,MAAM,GAAG,CAAC;UACtC,KAAK,IAAIqD,GAAG,GAAG,CAAC,EAAEf,IAAI,GAAGhB,IAAI,CAACjC,MAAM,EAAEgE,GAAG,GAAGf,IAAI,EAAEe,GAAG,EAAE,EAAE;YACrDrF,QAAQ,CAACe,IAAI,CAAC;cAAEa,CAAC,EAAED,OAAO;cAAEI,CAAC,EAAED;YAAQ,CAAC,CAAC;UAC7C;QACJ;QACA,IAAI,CAACxB,oBAAoB,CAACa,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGoC,UAAU;QAC5C,IAAI,CAAChD,kBAAkB,CAACY,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGnB,QAAQ;MAC5C;IACJ;IACA,IAAI,CAACb,SAAS,CAACiB,aAAa,GAAG,IAAI,CAACE,oBAAoB;IACxD,IAAII,SAAS,GAAG,IAAI9B,SAAS,CAAC,IAAI,EAAE;MAAE+B,QAAQ,EAAE,eAAe;MAAEC,IAAI,EAAE,CAAC;MAAEC,EAAE,EAAE;IAAE,CAAC,EAAEZ,QAAQ,EAAEC,MAAM,CAAC;IACpG,IAAI,CAACY,UAAU,CAACC,IAAI,CAACL,SAAS,CAAC;IAC/BA,SAAS,CAACM,KAAK,CAAC,CAAC;IACjB,OAAON,SAAS;EACpB,CAAC;EACD4E,MAAM,CAACC,cAAc,CAACtG,OAAO,CAACa,SAAS,EAAE,eAAe,EAAE;IACtD;AACR;AACA;AACA;AACA;IACQ0F,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACC,cAAc;IAC9B,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAACF,cAAc,GAAGE,KAAK;MAC3B,IAAIvF,aAAa,GAAG,EAAE;MACtB,IAAIuF,KAAK,IAAI,IAAI,EAAE;QACf,IAAIpC,UAAU,GAAG,IAAI,CAACjD,oBAAoB;QAC1C,IAAIN,QAAQ,GAAG,IAAI,CAACO,kBAAkB;QACtC,IAAIgD,UAAU,IAAI,IAAI,IAAIvD,QAAQ,IAAI,IAAI,EAAE;UACxC,KAAK,IAAImB,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGmC,UAAU,CAAClC,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;YACnD,IAAIyE,WAAW,GAAG,EAAE;YACpBxF,aAAa,CAACW,IAAI,CAAC6E,WAAW,CAAC;YAC/B,IAAIC,WAAW,GAAGtC,UAAU,CAACpC,CAAC,CAAC,CAAC,CAAC,CAAC;YAClC,IAAI2E,QAAQ,GAAGvC,UAAU,CAACpC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/B,IAAI4E,SAAS,GAAG/F,QAAQ,CAACmB,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9B,IAAI6E,MAAM,GAAGhG,QAAQ,CAACmB,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3B,IAAI0E,WAAW,IAAIA,WAAW,CAACxE,MAAM,GAAG,CAAC,IAAI0E,SAAS,IAAIA,SAAS,CAAC1E,MAAM,GAAG,CAAC,EAAE;cAC5E,IAAI4E,cAAc,GAAG,EAAE;cACvB,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEC,IAAI,GAAGN,WAAW,CAACxE,MAAM,EAAE6E,GAAG,GAAGC,IAAI,EAAED,GAAG,EAAE,EAAE;gBAC5D,IAAIvB,MAAM,GAAGkB,WAAW,CAACK,GAAG,CAAC;gBAC7B,IAAItB,MAAM,GAAGmB,SAAS,CAACG,GAAG,CAAC;gBAC3B,IAAIE,YAAY,GAAG;kBAAExE,CAAC,EAAE+C,MAAM,CAAC/C,CAAC,GAAG,CAACgD,MAAM,CAAChD,CAAC,GAAG,IAAI,CAACjC,UAAU,GAAGgF,MAAM,CAAC/C,CAAC,IAAI+D,KAAK;kBAAE5D,CAAC,EAAE4C,MAAM,CAAC5C,CAAC,GAAG,CAAC6C,MAAM,CAAC7C,CAAC,GAAG,IAAI,CAACpC,UAAU,GAAGgF,MAAM,CAAC5C,CAAC,IAAI4D;gBAAM,CAAC;gBACnJM,cAAc,CAAClF,IAAI,CAACqF,YAAY,CAAC;cACrC;cACAR,WAAW,CAAC,CAAC,CAAC,GAAGK,cAAc;YACnC;YACA,IAAIH,QAAQ,IAAIA,QAAQ,CAACzE,MAAM,GAAG,CAAC,IAAI2E,MAAM,IAAIA,MAAM,CAAC3E,MAAM,GAAG,CAAC,EAAE;cAChE,IAAIgF,WAAW,GAAG,EAAE;cACpB,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEhC,IAAI,GAAGwB,QAAQ,CAACzE,MAAM,EAAEiF,GAAG,GAAGhC,IAAI,EAAEgC,GAAG,EAAE,EAAE;gBACzD,IAAI3B,MAAM,GAAGmB,QAAQ,CAACQ,GAAG,CAAC;gBAC1B,IAAI1B,MAAM,GAAGoB,MAAM,CAACM,GAAG,CAAC;gBACxB,IAAIF,YAAY,GAAG;kBAAExE,CAAC,EAAE+C,MAAM,CAAC/C,CAAC,GAAG,CAACgD,MAAM,CAAChD,CAAC,GAAG,IAAI,CAACjC,UAAU,GAAGgF,MAAM,CAAC/C,CAAC,IAAI+D,KAAK;kBAAE5D,CAAC,EAAE4C,MAAM,CAAC5C,CAAC,GAAG,CAAC6C,MAAM,CAAC7C,CAAC,GAAG,IAAI,CAACpC,UAAU,GAAGgF,MAAM,CAAC5C,CAAC,IAAI4D;gBAAM,CAAC;gBACnJU,WAAW,CAACtF,IAAI,CAACqF,YAAY,CAAC;cAClC;cACAR,WAAW,CAAC,CAAC,CAAC,GAAGS,WAAW;YAChC;UACJ;QACJ;MACJ;MACA,IAAI,CAAClH,SAAS,CAACiB,aAAa,GAAGA,aAAa;IAChD,CAAC;IACDmG,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF;AACJ;AACA;AACA;AACA;AACA;AACA;EACIvH,OAAO,CAACa,SAAS,CAAC2G,SAAS,GAAG,UAAUxG,QAAQ,EAAEC,MAAM,EAAE;IACtD,IAAI,CAACK,kBAAkB,GAAG,IAAI,CAACD,oBAAoB;IACnD,IAAI,CAACA,oBAAoB,GAAG,IAAI,CAACnB,SAAS,CAACiB,aAAa;IACxD,IAAI,CAACpB,KAAK,CAACwB,QAAQ,CAACP,QAAQ,CAAC,EAAE;MAC3BA,QAAQ,GAAG,IAAI,CAACV,aAAa;IACjC;IACA,IAAI,CAACP,KAAK,CAACwB,QAAQ,CAACN,MAAM,CAAC,EAAE;MACzBA,MAAM,GAAG,IAAI,CAACV,WAAW;IAC7B;IACA,IAAIkB,SAAS,GAAG,IAAI9B,SAAS,CAAC,IAAI,EAAE;MAAE+B,QAAQ,EAAE,eAAe;MAAEC,IAAI,EAAE,CAAC;MAAEC,EAAE,EAAE;IAAE,CAAC,EAAEZ,QAAQ,EAAEC,MAAM,CAAC;IACpG,IAAI,CAACY,UAAU,CAACC,IAAI,CAACL,SAAS,CAAC;IAC/BA,SAAS,CAACM,KAAK,CAAC,CAAC;IACjB,OAAON,SAAS;EACpB,CAAC;EACD4E,MAAM,CAACC,cAAc,CAACtG,OAAO,CAACa,SAAS,EAAE,YAAY,EAAE;IACnD;AACR;AACA;AACA;AACA;IACQ0F,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,IAAI,CAAC,IAAI,CAACkB,WAAW,EAAE;QACnB,IAAI,CAACA,WAAW,GAAG,EAAE;QACrB,IAAI,CAAC5F,UAAU,CAACC,IAAI,CAAC,IAAIlC,iBAAiB,CAAC,IAAI,CAAC6H,WAAW,CAAC,CAAC;MACjE;MACA,OAAO,IAAI,CAACA,WAAW;IAC3B,CAAC;IACDH,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF,OAAOvH,OAAO;AAClB,CAAC,CAACN,UAAU,CAAE;AACd,SAASM,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}