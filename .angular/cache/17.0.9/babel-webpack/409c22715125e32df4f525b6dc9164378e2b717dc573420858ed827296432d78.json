{"ast":null,"code":"/**\r\n * Line drawing functionality.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Sprite } from \"../Sprite\";\nimport { color } from \"../utils/Color\";\nimport { LinearGradient } from \"../rendering/fills/LinearGradient\";\nimport { registry } from \"../Registry\";\nimport * as $type from \"../utils/Type\";\nimport * as $math from \"../utils/Math\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Draws a line.\r\n *\r\n * @see {@link ILineEvents} for a list of available events\r\n * @see {@link ILineAdapters} for a list of available Adapters\r\n */\nvar Line = /** @class */function (_super) {\n  __extends(Line, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Line() {\n    var _this = _super.call(this) || this;\n    _this.className = \"Line\";\n    _this.element = _this.paper.add(\"line\");\n    _this.fill = color(); //\"none\";\n    _this.x1 = 0;\n    _this.y1 = 0;\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Draws the line.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Line.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n    if (this.x1 == this.x2 || this.y1 == this.y2) {\n      this.pixelPerfect = true;\n    } else {\n      this.pixelPerfect = false;\n    }\n    this.x1 = this.x1;\n    this.x2 = this.x2;\n    this.y1 = this.y1;\n    this.y2 = this.y2;\n  };\n  Object.defineProperty(Line.prototype, \"x1\", {\n    /**\r\n     * @return X\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"x1\");\n    },\n    /**\r\n     * X coordinate of first end.\r\n     *\r\n     * @param value X\r\n     */\n    set: function (value) {\n      if (!$type.isNumber(value)) {\n        value = 0;\n      }\n      var delta = 0;\n      if (this.pixelPerfect && this.stroke instanceof LinearGradient) {\n        delta = 0.00001;\n      }\n      this.setPropertyValue(\"x1\", value, true);\n      this.element.attr({\n        \"x1\": value + delta\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Line.prototype, \"x2\", {\n    /**\r\n     * @return X\r\n     */\n    get: function () {\n      var value = this.getPropertyValue(\"x2\");\n      if (!$type.isNumber(value)) {\n        value = this.pixelWidth;\n      }\n      return value;\n    },\n    /**\r\n     * X coordinate of second end.\r\n     *\r\n     * @param value X\r\n     */\n    set: function (value) {\n      if (!$type.isNumber(value)) {\n        value = 0;\n      }\n      this.setPropertyValue(\"x2\", value, true);\n      this.element.attr({\n        \"x2\": value\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Line.prototype, \"y1\", {\n    /**\r\n     * @return Y\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"y1\");\n    },\n    /**\r\n     * Y coordinate of first end.\r\n     *\r\n     * @param value Y\r\n     */\n    set: function (value) {\n      if (!$type.isNumber(value)) {\n        value = 0;\n      }\n      var delta = 0;\n      if (this.pixelPerfect && this.stroke instanceof LinearGradient) {\n        delta = 0.00001;\n      }\n      this.setPropertyValue(\"y1\", value, true);\n      this.element.attr({\n        \"y1\": value + delta\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Line.prototype, \"y2\", {\n    /**\r\n     * @return Y\r\n     */\n    get: function () {\n      var value = this.getPropertyValue(\"y2\");\n      if (!$type.isNumber(value)) {\n        value = this.pixelHeight;\n      }\n      return value;\n    },\n    /**\r\n     * Y coordinate of second end.\r\n     *\r\n     * @param value Y\r\n     */\n    set: function (value) {\n      if (!$type.isNumber(value)) {\n        value = 0;\n      }\n      this.setPropertyValue(\"y2\", value, true);\n      this.element.attr({\n        \"y2\": value\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts relative position along the line (0-1) into pixel coordinates.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @return Coordinates\r\n   */\n  Line.prototype.positionToPoint = function (position) {\n    var point1 = {\n      x: this.x1,\n      y: this.y1\n    };\n    var point2 = {\n      x: this.x2,\n      y: this.y2\n    };\n    var point = $math.getMidPoint(point1, point2, position);\n    var angle = $math.getAngle(point1, point2);\n    return {\n      x: point.x,\n      y: point.y,\n      angle: angle\n    };\n  };\n  return Line;\n}(Sprite);\nexport { Line };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Line\"] = Line;","map":{"version":3,"names":["__extends","Sprite","color","LinearGradient","registry","$type","$math","Line","_super","_this","call","className","element","paper","add","fill","x1","y1","applyTheme","prototype","draw","x2","y2","pixelPerfect","Object","defineProperty","get","getPropertyValue","set","value","isNumber","delta","stroke","setPropertyValue","attr","enumerable","configurable","pixelWidth","pixelHeight","positionToPoint","position","point1","x","y","point2","point","getMidPoint","angle","getAngle","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/elements/Line.js"],"sourcesContent":["/**\r\n * Line drawing functionality.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../Sprite\";\r\nimport { color } from \"../utils/Color\";\r\nimport { LinearGradient } from \"../rendering/fills/LinearGradient\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $math from \"../utils/Math\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws a line.\r\n *\r\n * @see {@link ILineEvents} for a list of available events\r\n * @see {@link ILineAdapters} for a list of available Adapters\r\n */\r\nvar Line = /** @class */ (function (_super) {\r\n    __extends(Line, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Line() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Line\";\r\n        _this.element = _this.paper.add(\"line\");\r\n        _this.fill = color(); //\"none\";\r\n        _this.x1 = 0;\r\n        _this.y1 = 0;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the line.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Line.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        if (this.x1 == this.x2 || this.y1 == this.y2) {\r\n            this.pixelPerfect = true;\r\n        }\r\n        else {\r\n            this.pixelPerfect = false;\r\n        }\r\n        this.x1 = this.x1;\r\n        this.x2 = this.x2;\r\n        this.y1 = this.y1;\r\n        this.y2 = this.y2;\r\n    };\r\n    Object.defineProperty(Line.prototype, \"x1\", {\r\n        /**\r\n         * @return X\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"x1\");\r\n        },\r\n        /**\r\n         * X coordinate of first end.\r\n         *\r\n         * @param value X\r\n         */\r\n        set: function (value) {\r\n            if (!$type.isNumber(value)) {\r\n                value = 0;\r\n            }\r\n            var delta = 0;\r\n            if (this.pixelPerfect && this.stroke instanceof LinearGradient) {\r\n                delta = 0.00001;\r\n            }\r\n            this.setPropertyValue(\"x1\", value, true);\r\n            this.element.attr({ \"x1\": value + delta });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Line.prototype, \"x2\", {\r\n        /**\r\n         * @return X\r\n         */\r\n        get: function () {\r\n            var value = this.getPropertyValue(\"x2\");\r\n            if (!$type.isNumber(value)) {\r\n                value = this.pixelWidth;\r\n            }\r\n            return value;\r\n        },\r\n        /**\r\n         * X coordinate of second end.\r\n         *\r\n         * @param value X\r\n         */\r\n        set: function (value) {\r\n            if (!$type.isNumber(value)) {\r\n                value = 0;\r\n            }\r\n            this.setPropertyValue(\"x2\", value, true);\r\n            this.element.attr({ \"x2\": value });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Line.prototype, \"y1\", {\r\n        /**\r\n         * @return Y\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"y1\");\r\n        },\r\n        /**\r\n         * Y coordinate of first end.\r\n         *\r\n         * @param value Y\r\n         */\r\n        set: function (value) {\r\n            if (!$type.isNumber(value)) {\r\n                value = 0;\r\n            }\r\n            var delta = 0;\r\n            if (this.pixelPerfect && this.stroke instanceof LinearGradient) {\r\n                delta = 0.00001;\r\n            }\r\n            this.setPropertyValue(\"y1\", value, true);\r\n            this.element.attr({ \"y1\": value + delta });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Line.prototype, \"y2\", {\r\n        /**\r\n         * @return Y\r\n         */\r\n        get: function () {\r\n            var value = this.getPropertyValue(\"y2\");\r\n            if (!$type.isNumber(value)) {\r\n                value = this.pixelHeight;\r\n            }\r\n            return value;\r\n        },\r\n        /**\r\n         * Y coordinate of second end.\r\n         *\r\n         * @param value Y\r\n         */\r\n        set: function (value) {\r\n            if (!$type.isNumber(value)) {\r\n                value = 0;\r\n            }\r\n            this.setPropertyValue(\"y2\", value, true);\r\n            this.element.attr({ \"y2\": value });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts relative position along the line (0-1) into pixel coordinates.\r\n     *\r\n     * @param position  Position (0-1)\r\n     * @return Coordinates\r\n     */\r\n    Line.prototype.positionToPoint = function (position) {\r\n        var point1 = { x: this.x1, y: this.y1 };\r\n        var point2 = { x: this.x2, y: this.y2 };\r\n        var point = $math.getMidPoint(point1, point2, position);\r\n        var angle = $math.getAngle(point1, point2);\r\n        return { x: point.x, y: point.y, angle: angle };\r\n    };\r\n    return Line;\r\n}(Sprite));\r\nexport { Line };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Line\"] = Line;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}