{"ast":null,"code":"/**\r\n * Duration formatting functionality.\r\n */\nimport { __extends } from \"tslib\";\nimport { Language } from \"../utils/Language\";\nimport { BaseObject } from \"../Base\";\nimport { getTextFormatter } from \"../formatters/TextFormatter\";\nimport { registry } from \"../Registry\";\nimport * as $strings from \"../utils/Strings\";\nimport * as $object from \"../utils/Object\";\nimport * as $utils from \"../utils/Utils\";\nimport * as $type from \"../utils/Type\";\nimport * as $math from \"../utils/Math\";\n/**\r\n * DurationFormatter class. Formats numbers as durations.\r\n *\r\n * `1000` as `16:40`\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Tutorial on duration formatting\r\n */\nvar DurationFormatter = /** @class */function (_super) {\n  __extends(DurationFormatter, _super);\n  /**\r\n   * Constructor\r\n   */\n  function DurationFormatter() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * A base value for negative numbers. Will treat all numbers below this value\r\n     * as negative numbers.\r\n     */\n    _this._negativeBase = 0;\n    /**\r\n     * A base unit to consider values are in.\r\n     *\r\n     * @default \"s\"\r\n     */\n    _this._baseUnit = \"second\";\n    /**\r\n     * Output format to produce. If the format calls for applying color to the\r\n     * formatted value, this setting will determine what markup to use: SVG or\r\n     * HTML.\r\n     *\r\n     * Available options: svg, html.\r\n     *\r\n     * @default \"svg\"\r\n     */\n    _this._outputFormat = \"svg\";\n    /**\r\n     * How many milliseconds each unit represents.\r\n     */\n    _this._unitValues = {\n      \"millisecond\": 1,\n      \"second\": 1000,\n      \"minute\": 60000,\n      \"hour\": 3600000,\n      \"day\": 86400000,\n      \"week\": 604800000,\n      \"month\": 2592000000,\n      \"year\": 31536000000\n    };\n    /**\r\n     * Collection of aliases for units.\r\n     */\n    _this._unitAliases = {\n      \"Y\": \"y\",\n      \"D\": \"d\",\n      \"H\": \"h\",\n      \"K\": \"h\",\n      \"k\": \"h\",\n      \"n\": \"S\"\n    };\n    _this.className = \"DurationFormatter\";\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Formats the number according as duration.\r\n   *\r\n   * For example `1000` (base unit seconds) would be converted to `16:40` as in\r\n   * 16 minutes and 40 seconds.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Tutorial on duration formatting\r\n   * @param value   Value to format\r\n   * @param format  Format to apply\r\n   * @param base    Override base unit\r\n   * @return Formatted number\r\n   */\n  DurationFormatter.prototype.format = function (value, format, base) {\n    // no language?\n    if (!this.language) {\n      if (this.sprite) {\n        this.language = this.sprite.language;\n      } else {\n        this.language = new Language();\n      }\n    }\n    // no base unit?\n    var baseUnit = base || this._baseUnit;\n    // no format passed in or empty\n    if (typeof format === \"undefined\" || format === \"\") {\n      if ($type.hasValue(this.durationFormat)) {\n        format = this.durationFormat;\n      } else {\n        format = this.getFormat($type.toNumber(value), null, baseUnit);\n      }\n    }\n    // Clean format\n    format = $utils.cleanFormat(format);\n    // get format info (it will also deal with parser caching)\n    var info = this.parseFormat(format, baseUnit);\n    // cast to number just in case\n    // TODO: maybe use better casting\n    var source = Number(value);\n    // format and replace the number\n    var details;\n    if (source > this._negativeBase) {\n      details = info.positive;\n    } else if (source < this._negativeBase) {\n      details = info.negative;\n    } else {\n      details = info.zero;\n    }\n    // Format\n    var formatted = this.applyFormat(source, details);\n    // Apply color?\n    if (details.color !== \"\") {\n      if (this._outputFormat === \"svg\") {\n        formatted = \"<tspan fill='\" + details.color + \"'>\" + formatted + \"</tspan>\";\n      } else if (this._outputFormat === \"html\") {\n        formatted = \"<span style='color: \" + details.color + \";'>\" + formatted + \"</span>\";\n      }\n    }\n    return formatted;\n  };\n  /**\r\n   * Parses supplied format into structured object which can be used to format\r\n   * the number.\r\n   *\r\n   * @param format  Format string, i.e. \"#,###.00\"\r\n   * @param base    Override base unit\r\n   * @return Parsed information\r\n   */\n  DurationFormatter.prototype.parseFormat = function (format, base) {\n    var _this = this;\n    // Check cache\n    var cached = this.getCache(format);\n    if ($type.hasValue(cached)) {\n      return cached;\n    }\n    // no base unit?\n    var baseUnit = base || this._baseUnit;\n    // Initialize duration parsing info\n    var info = {\n      \"positive\": {\n        \"color\": \"\",\n        \"template\": \"\",\n        \"parts\": [],\n        \"source\": \"\",\n        \"baseUnit\": baseUnit,\n        \"parsed\": false,\n        \"absolute\": false\n      },\n      \"negative\": {\n        \"color\": \"\",\n        \"template\": \"\",\n        \"parts\": [],\n        \"source\": \"\",\n        \"baseUnit\": baseUnit,\n        \"parsed\": false,\n        \"absolute\": false\n      },\n      \"zero\": {\n        \"color\": \"\",\n        \"template\": \"\",\n        \"parts\": [],\n        \"source\": \"\",\n        \"baseUnit\": baseUnit,\n        \"parsed\": false,\n        \"absolute\": false\n      }\n    };\n    // Escape double vertical bars (that mean display one vertical bar)\n    format = format.replace(\"||\", $strings.PLACEHOLDER2);\n    // Split it up and deal with different formats\n    var parts = format.split(\"|\");\n    info.positive.source = parts[0];\n    if (typeof parts[2] === \"undefined\") {\n      info.zero = info.positive;\n    } else {\n      info.zero.source = parts[2];\n    }\n    if (typeof parts[1] === \"undefined\") {\n      info.negative = info.positive;\n    } else {\n      info.negative.source = parts[1];\n    }\n    // Parse each\n    $object.each(info, function (part, item) {\n      // Already parsed\n      if (item.parsed) {\n        return;\n      }\n      // Check cached\n      if (typeof _this.getCache(item.source) !== \"undefined\") {\n        info[part] = _this.getCache(item.source);\n        return;\n      }\n      // Begin parsing\n      var partFormat = item.source;\n      // Check for [] directives\n      var dirs = [];\n      dirs = item.source.match(/^\\[([^\\]]*)\\]/);\n      if (dirs && dirs.length && dirs[0] !== \"\") {\n        partFormat = item.source.substr(dirs[0].length);\n        item.color = dirs[1];\n      }\n      // Let TextFormatter split into chunks\n      var chunks = getTextFormatter().chunk(partFormat, true);\n      for (var i = 0; i < chunks.length; i++) {\n        var chunk = chunks[i];\n        // replace back double vertical bar\n        chunk.text = chunk.text.replace($strings.PLACEHOLDER2, \"|\");\n        if (chunk.type === \"value\") {\n          // Just \"Duration\"?\n          // if (chunk.text.toLowerCase() === \"duration\") {\n          // \tchunk.text = durationFormat;\n          // }\n          // Check for \"a\" (absolute) modifier\n          if (chunk.text.match(/[yYMdDwhHKkmsSn]+a/)) {\n            item.absolute = true;\n            chunk.text = chunk.text.replace(/([yYMdDwhHKkmsSn]+)a/, \"$1\");\n          }\n          // Find all possible parts\n          var matches = chunk.text.match(/y+|Y+|M+|d+|D+|w+|h+|H+|K+|k+|m+|s+|S+|n+/g);\n          if (matches) {\n            // Populate template\n            for (var x = 0; x < matches.length; x++) {\n              // Is it an alias?\n              if (!$type.hasValue(matches[x])) {\n                matches[x] = _this._unitAliases[matches[x]];\n              }\n              item.parts.push(matches[x]);\n              chunk.text = chunk.text.replace(matches[x], $strings.PLACEHOLDER);\n            }\n          }\n        }\n        // Apply to template\n        item.template += chunk.text;\n      }\n      // Apply style formatting\n      //item.template = getTextFormatter().format(item.template, this.outputFormat);\n      // Save cache\n      _this.setCache(item.source, item);\n      // Mark this as parsed\n      item.parsed = true;\n    });\n    // Save cache (the whole thing)\n    this.setCache(format, info);\n    return info;\n  };\n  /**\r\n   * Applies parsed format to a numeric value.\r\n   *\r\n   * @param value    Value\r\n   * @param details  Parsed format as returned by {parseFormat}\r\n   * @return Formatted duration\r\n   */\n  DurationFormatter.prototype.applyFormat = function (value, details) {\n    // Use absolute values\n    var negative = !details.absolute && value < this._negativeBase;\n    value = Math.abs(value);\n    // Recalculate to milliseconds\n    var tstamp = this.toTimeStamp(value, details.baseUnit);\n    // Init return value\n    var res = details.template;\n    // Iterate through duration parts\n    for (var i = 0, len = details.parts.length; i < len; i++) {\n      // Gather the part\n      var part = details.parts[i];\n      var unit = this.toTimeUnit(part.substr(0, 1));\n      var digits = part.length;\n      // Calculate current unit value\n      var ints = Math.floor(tstamp / this._unitValues[unit]);\n      res = res.replace($strings.PLACEHOLDER, $utils.padString(ints, digits, \"0\"));\n      // Reduce timestamp\n      tstamp -= ints * this._unitValues[unit];\n    }\n    // Reapply negative sign\n    if (negative) {\n      res = \"-\" + res;\n    }\n    return res;\n  };\n  /**\r\n   * Converts numeric value to timestamp in milliseconds.\r\n   *\r\n   * @param value     A source value\r\n   * @param baseUnit  Base unit the source value is in: \"q\", \"s\", \"i\", \"h\", \"d\", \"w\", \"m\", \"y\"\r\n   * @return Value representation as a timestamp in milliseconds\r\n   */\n  DurationFormatter.prototype.toTimeStamp = function (value, baseUnit) {\n    return value * this._unitValues[baseUnit];\n  };\n  DurationFormatter.prototype.toTimeUnit = function (code) {\n    switch (code) {\n      case \"S\":\n        return \"millisecond\";\n      case \"s\":\n        return \"second\";\n      case \"m\":\n        return \"minute\";\n      case \"h\":\n        return \"hour\";\n      case \"d\":\n        return \"day\";\n      case \"w\":\n        return \"week\";\n      case \"M\":\n        return \"month\";\n      case \"y\":\n        return \"year\";\n    }\n    ;\n  };\n  /**\r\n   * Invalidates the parent [[Sprite]] object.\r\n   */\n  DurationFormatter.prototype.invalidateSprite = function () {\n    if (this.sprite) {\n      this.sprite.invalidate();\n    }\n  };\n  Object.defineProperty(DurationFormatter.prototype, \"baseUnit\", {\n    /**\r\n     * @return Base unit\r\n     */\n    get: function () {\n      return this._baseUnit;\n    },\n    /**\r\n     * Base unit the values are in.\r\n     *\r\n     * A base unit will be used to recalculate the numeric value to millisecond\r\n     * timestamps.\r\n     *\r\n     * Available options:\r\n     *\r\n     * * \"millisecond\"\r\n     * * \"second\"\r\n     * * \"minute\"\r\n     * * \"hour\"\r\n     * * \"day\"\r\n     * * \"week\"\r\n     * * \"month\"\r\n     * * \"year\"\r\n     *\r\n     * @default \"s\"\r\n     * @param baseUnit  A base unit\r\n     */\n    set: function (baseUnit) {\n      this._baseUnit = baseUnit;\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DurationFormatter.prototype, \"outputFormat\", {\n    /**\r\n     * Getter for output format.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Output format\r\n     */\n    get: function () {\n      return this._outputFormat;\n    },\n    /**\r\n     * Setter for output format: \"svg\" or \"html.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Output format\r\n     */\n    set: function (outputFormat) {\n      this._outputFormat = outputFormat.toLowerCase();\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns appropriate default format for the value.\r\n   *\r\n   * If `maxValue` is sepcified, it will use that value to determine the time\r\n   * unit for the format.\r\n   *\r\n   * For example if your `baseUnit` is `\"second\"` and you pass in `10`, you\r\n   * will get `\"10\"`.\r\n   *\r\n   * However, you might want it to be formatted in the context of bigger scale,\r\n   * say 10 minutes (600 seconds). If you pass in `600` as `maxValue`, all\r\n   * values, including small ones will use format with minutes, e.g.:\r\n   * `00:10`, `00:50`, `12: 30`, etc.\r\n   *\r\n   * @param value     Value to format\r\n   * @param maxValue  Maximum value to be used to determine format\r\n   * @param baseUnit  Base unit of the value\r\n   * @return Format\r\n   */\n  DurationFormatter.prototype.getFormat = function (value, maxValue, baseUnit) {\n    // Is format override set?\n    if ($type.hasValue(this.durationFormat)) {\n      return this.durationFormat;\n    }\n    // Get base unit\n    if (!baseUnit) {\n      baseUnit = this.baseUnit;\n    }\n    if ($type.hasValue(maxValue) && value != maxValue) {\n      value = Math.abs(value);\n      maxValue = Math.abs(maxValue);\n      var maxUnit = this.getValueUnit($math.max(value, maxValue), baseUnit);\n      //let diffUnit = this.getValueUnit(Math.abs(maxValue - value), baseUnit);\n      //console.log(maxUnit, diffUnit);\n      return this.durationFormats[baseUnit][maxUnit];\n    } else {\n      var unit = this.getValueUnit(value, baseUnit);\n      return this.durationFormats[baseUnit][unit];\n    }\n  };\n  /**\r\n   * Returns value's closest denominator time unit, e.g 100 seconds is\r\n   * `\"minute\"`, while 59 seconds would still be `second`.\r\n   *\r\n   * @param value     Source duration value\r\n   * @param baseUnit  Base unit\r\n   * @return Denominator\r\n   */\n  DurationFormatter.prototype.getValueUnit = function (value, baseUnit) {\n    // Get base unit\n    if (!baseUnit) {\n      baseUnit = this.baseUnit;\n    }\n    // Convert to milliseconds\n    var currentUnit;\n    var ms = this.getMilliseconds(value, baseUnit);\n    $object.eachContinue(this._unitValues, function (key, val) {\n      if (key == baseUnit || currentUnit) {\n        var num = ms / val;\n        if (num <= 1) {\n          if (!currentUnit) {\n            currentUnit = key;\n          }\n          return false;\n        }\n        currentUnit = key;\n      }\n      return true;\n    });\n    return currentUnit;\n  };\n  /**\r\n   * Converts value to milliseconds according to `baseUnit`.\r\n   *\r\n   * @param value     Source duration value\r\n   * @param baseUnit  Base unit\r\n   * @return Value in milliseconds\r\n   */\n  DurationFormatter.prototype.getMilliseconds = function (value, baseUnit) {\n    // Get base unit\n    if (!baseUnit) {\n      baseUnit = this.baseUnit;\n    }\n    return value * this._unitValues[baseUnit];\n  };\n  Object.defineProperty(DurationFormatter.prototype, \"durationFormat\", {\n    /**\r\n     * @return Format\r\n     */\n    get: function () {\n      return this._durationFormat;\n    },\n    /**\r\n     * If set, this format will be used instead of the one determined dynamically\r\n     * based on the basedUnit and range of values.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Available fomatting codes\r\n     * @param value  Format\r\n     */\n    set: function (value) {\n      if (this._durationFormat != value) {\n        this._durationFormat = value;\n        this.invalidateSprite();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DurationFormatter.prototype, \"durationFormats\", {\n    /**\r\n     * @return Formats\r\n     */\n    get: function () {\n      if (!this._durationFormats) {\n        this._durationFormats = {\n          \"millisecond\": {\n            \"millisecond\": this.language.translate(\"_duration_millisecond\"),\n            \"second\": this.language.translate(\"_duration_millisecond_second\"),\n            \"minute\": this.language.translate(\"_duration_millisecond_minute\"),\n            \"hour\": this.language.translate(\"_duration_millisecond_hour\"),\n            \"day\": this.language.translate(\"_duration_millisecond_day\"),\n            \"week\": this.language.translate(\"_duration_millisecond_week\"),\n            \"month\": this.language.translate(\"_duration_millisecond_month\"),\n            \"year\": this.language.translate(\"_duration_millisecond_year\")\n          },\n          \"second\": {\n            \"second\": this.language.translate(\"_duration_second\"),\n            \"minute\": this.language.translate(\"_duration_second_minute\"),\n            \"hour\": this.language.translate(\"_duration_second_hour\"),\n            \"day\": this.language.translate(\"_duration_second_day\"),\n            \"week\": this.language.translate(\"_duration_second_week\"),\n            \"month\": this.language.translate(\"_duration_second_month\"),\n            \"year\": this.language.translate(\"_duration_second_year\")\n          },\n          \"minute\": {\n            \"minute\": this.language.translate(\"_duration_minute\"),\n            \"hour\": this.language.translate(\"_duration_minute_hour\"),\n            \"day\": this.language.translate(\"_duration_minute_day\"),\n            \"week\": this.language.translate(\"_duration_minute_week\"),\n            \"month\": this.language.translate(\"_duration_minute_month\"),\n            \"year\": this.language.translate(\"_duration_minute_year\")\n          },\n          \"hour\": {\n            \"hour\": this.language.translate(\"_duration_hour\"),\n            \"day\": this.language.translate(\"_duration_hour_day\"),\n            \"week\": this.language.translate(\"_duration_hour_week\"),\n            \"month\": this.language.translate(\"_duration_hour_month\"),\n            \"year\": this.language.translate(\"_duration_hour_year\")\n          },\n          \"day\": {\n            \"day\": this.language.translate(\"_duration_day\"),\n            \"week\": this.language.translate(\"_duration_day_week\"),\n            \"month\": this.language.translate(\"_duration_day_month\"),\n            \"year\": this.language.translate(\"_duration_day_year\")\n          },\n          \"week\": {\n            \"week\": this.language.translate(\"_duration_week\"),\n            \"month\": this.language.translate(\"_duration_week_month\"),\n            \"year\": this.language.translate(\"_duration_week_year\")\n          },\n          \"month\": {\n            \"month\": this.language.translate(\"_duration_month\"),\n            \"year\": this.language.translate(\"_duration_month_year\")\n          },\n          \"year\": {\n            \"year\": this.language.translate(\"_duration_year\")\n          }\n        };\n      }\n      return this._durationFormats;\n    },\n    /**\r\n     * Duration formats for various combination of base units.\r\n     *\r\n     * @param value  Formats\r\n     */\n    set: function (value) {\n      this._durationFormats = value;\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return DurationFormatter;\n}(BaseObject);\nexport { DurationFormatter };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"DurationFormatter\"] = DurationFormatter;","map":{"version":3,"names":["__extends","Language","BaseObject","getTextFormatter","registry","$strings","$object","$utils","$type","$math","DurationFormatter","_super","_this","call","_negativeBase","_baseUnit","_outputFormat","_unitValues","_unitAliases","className","applyTheme","prototype","format","value","base","language","sprite","baseUnit","hasValue","durationFormat","getFormat","toNumber","cleanFormat","info","parseFormat","source","Number","details","positive","negative","zero","formatted","applyFormat","color","cached","getCache","replace","PLACEHOLDER2","parts","split","each","part","item","parsed","partFormat","dirs","match","length","substr","chunks","chunk","i","text","type","absolute","matches","x","push","PLACEHOLDER","template","setCache","Math","abs","tstamp","toTimeStamp","res","len","unit","toTimeUnit","digits","ints","floor","padString","code","invalidateSprite","invalidate","Object","defineProperty","get","set","enumerable","configurable","outputFormat","toLowerCase","maxValue","maxUnit","getValueUnit","max","durationFormats","currentUnit","ms","getMilliseconds","eachContinue","key","val","num","_durationFormat","_durationFormats","translate","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/formatters/DurationFormatter.js"],"sourcesContent":["/**\r\n * Duration formatting functionality.\r\n */\r\nimport { __extends } from \"tslib\";\r\nimport { Language } from \"../utils/Language\";\r\nimport { BaseObject } from \"../Base\";\r\nimport { getTextFormatter } from \"../formatters/TextFormatter\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $strings from \"../utils/Strings\";\r\nimport * as $object from \"../utils/Object\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $math from \"../utils/Math\";\r\n/**\r\n * DurationFormatter class. Formats numbers as durations.\r\n *\r\n * `1000` as `16:40`\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Tutorial on duration formatting\r\n */\r\nvar DurationFormatter = /** @class */ (function (_super) {\r\n    __extends(DurationFormatter, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function DurationFormatter() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * A base value for negative numbers. Will treat all numbers below this value\r\n         * as negative numbers.\r\n         */\r\n        _this._negativeBase = 0;\r\n        /**\r\n         * A base unit to consider values are in.\r\n         *\r\n         * @default \"s\"\r\n         */\r\n        _this._baseUnit = \"second\";\r\n        /**\r\n         * Output format to produce. If the format calls for applying color to the\r\n         * formatted value, this setting will determine what markup to use: SVG or\r\n         * HTML.\r\n         *\r\n         * Available options: svg, html.\r\n         *\r\n         * @default \"svg\"\r\n         */\r\n        _this._outputFormat = \"svg\";\r\n        /**\r\n         * How many milliseconds each unit represents.\r\n         */\r\n        _this._unitValues = {\r\n            \"millisecond\": 1,\r\n            \"second\": 1000,\r\n            \"minute\": 60000,\r\n            \"hour\": 3600000,\r\n            \"day\": 86400000,\r\n            \"week\": 604800000,\r\n            \"month\": 2592000000,\r\n            \"year\": 31536000000,\r\n        };\r\n        /**\r\n         * Collection of aliases for units.\r\n         */\r\n        _this._unitAliases = {\r\n            \"Y\": \"y\",\r\n            \"D\": \"d\",\r\n            \"H\": \"h\",\r\n            \"K\": \"h\",\r\n            \"k\": \"h\",\r\n            \"n\": \"S\"\r\n        };\r\n        _this.className = \"DurationFormatter\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Formats the number according as duration.\r\n     *\r\n     * For example `1000` (base unit seconds) would be converted to `16:40` as in\r\n     * 16 minutes and 40 seconds.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Tutorial on duration formatting\r\n     * @param value   Value to format\r\n     * @param format  Format to apply\r\n     * @param base    Override base unit\r\n     * @return Formatted number\r\n     */\r\n    DurationFormatter.prototype.format = function (value, format, base) {\r\n        // no language?\r\n        if (!this.language) {\r\n            if (this.sprite) {\r\n                this.language = this.sprite.language;\r\n            }\r\n            else {\r\n                this.language = new Language;\r\n            }\r\n        }\r\n        // no base unit?\r\n        var baseUnit = base || this._baseUnit;\r\n        // no format passed in or empty\r\n        if (typeof format === \"undefined\" || format === \"\") {\r\n            if ($type.hasValue(this.durationFormat)) {\r\n                format = this.durationFormat;\r\n            }\r\n            else {\r\n                format = this.getFormat($type.toNumber(value), null, baseUnit);\r\n            }\r\n        }\r\n        // Clean format\r\n        format = $utils.cleanFormat(format);\r\n        // get format info (it will also deal with parser caching)\r\n        var info = this.parseFormat(format, baseUnit);\r\n        // cast to number just in case\r\n        // TODO: maybe use better casting\r\n        var source = Number(value);\r\n        // format and replace the number\r\n        var details;\r\n        if (source > this._negativeBase) {\r\n            details = info.positive;\r\n        }\r\n        else if (source < this._negativeBase) {\r\n            details = info.negative;\r\n        }\r\n        else {\r\n            details = info.zero;\r\n        }\r\n        // Format\r\n        var formatted = this.applyFormat(source, details);\r\n        // Apply color?\r\n        if (details.color !== \"\") {\r\n            if (this._outputFormat === \"svg\") {\r\n                formatted = \"<tspan fill='\" + details.color + \"'>\" + formatted + \"</tspan>\";\r\n            }\r\n            else if (this._outputFormat === \"html\") {\r\n                formatted = \"<span style='color: \" + details.color + \";'>\" + formatted + \"</span>\";\r\n            }\r\n        }\r\n        return formatted;\r\n    };\r\n    /**\r\n     * Parses supplied format into structured object which can be used to format\r\n     * the number.\r\n     *\r\n     * @param format  Format string, i.e. \"#,###.00\"\r\n     * @param base    Override base unit\r\n     * @return Parsed information\r\n     */\r\n    DurationFormatter.prototype.parseFormat = function (format, base) {\r\n        var _this = this;\r\n        // Check cache\r\n        var cached = this.getCache(format);\r\n        if ($type.hasValue(cached)) {\r\n            return cached;\r\n        }\r\n        // no base unit?\r\n        var baseUnit = base || this._baseUnit;\r\n        // Initialize duration parsing info\r\n        var info = {\r\n            \"positive\": {\r\n                \"color\": \"\",\r\n                \"template\": \"\",\r\n                \"parts\": [],\r\n                \"source\": \"\",\r\n                \"baseUnit\": baseUnit,\r\n                \"parsed\": false,\r\n                \"absolute\": false\r\n            },\r\n            \"negative\": {\r\n                \"color\": \"\",\r\n                \"template\": \"\",\r\n                \"parts\": [],\r\n                \"source\": \"\",\r\n                \"baseUnit\": baseUnit,\r\n                \"parsed\": false,\r\n                \"absolute\": false\r\n            },\r\n            \"zero\": {\r\n                \"color\": \"\",\r\n                \"template\": \"\",\r\n                \"parts\": [],\r\n                \"source\": \"\",\r\n                \"baseUnit\": baseUnit,\r\n                \"parsed\": false,\r\n                \"absolute\": false\r\n            }\r\n        };\r\n        // Escape double vertical bars (that mean display one vertical bar)\r\n        format = format.replace(\"||\", $strings.PLACEHOLDER2);\r\n        // Split it up and deal with different formats\r\n        var parts = format.split(\"|\");\r\n        info.positive.source = parts[0];\r\n        if (typeof parts[2] === \"undefined\") {\r\n            info.zero = info.positive;\r\n        }\r\n        else {\r\n            info.zero.source = parts[2];\r\n        }\r\n        if (typeof parts[1] === \"undefined\") {\r\n            info.negative = info.positive;\r\n        }\r\n        else {\r\n            info.negative.source = parts[1];\r\n        }\r\n        // Parse each\r\n        $object.each(info, function (part, item) {\r\n            // Already parsed\r\n            if (item.parsed) {\r\n                return;\r\n            }\r\n            // Check cached\r\n            if (typeof _this.getCache(item.source) !== \"undefined\") {\r\n                info[part] = _this.getCache(item.source);\r\n                return;\r\n            }\r\n            // Begin parsing\r\n            var partFormat = item.source;\r\n            // Check for [] directives\r\n            var dirs = [];\r\n            dirs = item.source.match(/^\\[([^\\]]*)\\]/);\r\n            if (dirs && dirs.length && dirs[0] !== \"\") {\r\n                partFormat = item.source.substr(dirs[0].length);\r\n                item.color = dirs[1];\r\n            }\r\n            // Let TextFormatter split into chunks\r\n            var chunks = getTextFormatter().chunk(partFormat, true);\r\n            for (var i = 0; i < chunks.length; i++) {\r\n                var chunk = chunks[i];\r\n                // replace back double vertical bar\r\n                chunk.text = chunk.text.replace($strings.PLACEHOLDER2, \"|\");\r\n                if (chunk.type === \"value\") {\r\n                    // Just \"Duration\"?\r\n                    // if (chunk.text.toLowerCase() === \"duration\") {\r\n                    // \tchunk.text = durationFormat;\r\n                    // }\r\n                    // Check for \"a\" (absolute) modifier\r\n                    if (chunk.text.match(/[yYMdDwhHKkmsSn]+a/)) {\r\n                        item.absolute = true;\r\n                        chunk.text = chunk.text.replace(/([yYMdDwhHKkmsSn]+)a/, \"$1\");\r\n                    }\r\n                    // Find all possible parts\r\n                    var matches = chunk.text.match(/y+|Y+|M+|d+|D+|w+|h+|H+|K+|k+|m+|s+|S+|n+/g);\r\n                    if (matches) {\r\n                        // Populate template\r\n                        for (var x = 0; x < matches.length; x++) {\r\n                            // Is it an alias?\r\n                            if (!$type.hasValue(matches[x])) {\r\n                                matches[x] = _this._unitAliases[matches[x]];\r\n                            }\r\n                            item.parts.push(matches[x]);\r\n                            chunk.text = chunk.text.replace(matches[x], $strings.PLACEHOLDER);\r\n                        }\r\n                    }\r\n                }\r\n                // Apply to template\r\n                item.template += chunk.text;\r\n            }\r\n            // Apply style formatting\r\n            //item.template = getTextFormatter().format(item.template, this.outputFormat);\r\n            // Save cache\r\n            _this.setCache(item.source, item);\r\n            // Mark this as parsed\r\n            item.parsed = true;\r\n        });\r\n        // Save cache (the whole thing)\r\n        this.setCache(format, info);\r\n        return info;\r\n    };\r\n    /**\r\n     * Applies parsed format to a numeric value.\r\n     *\r\n     * @param value    Value\r\n     * @param details  Parsed format as returned by {parseFormat}\r\n     * @return Formatted duration\r\n     */\r\n    DurationFormatter.prototype.applyFormat = function (value, details) {\r\n        // Use absolute values\r\n        var negative = !details.absolute && (value < this._negativeBase);\r\n        value = Math.abs(value);\r\n        // Recalculate to milliseconds\r\n        var tstamp = this.toTimeStamp(value, details.baseUnit);\r\n        // Init return value\r\n        var res = details.template;\r\n        // Iterate through duration parts\r\n        for (var i = 0, len = details.parts.length; i < len; i++) {\r\n            // Gather the part\r\n            var part = details.parts[i];\r\n            var unit = this.toTimeUnit(part.substr(0, 1));\r\n            var digits = part.length;\r\n            // Calculate current unit value\r\n            var ints = Math.floor(tstamp / this._unitValues[unit]);\r\n            res = res.replace($strings.PLACEHOLDER, $utils.padString(ints, digits, \"0\"));\r\n            // Reduce timestamp\r\n            tstamp -= ints * this._unitValues[unit];\r\n        }\r\n        // Reapply negative sign\r\n        if (negative) {\r\n            res = \"-\" + res;\r\n        }\r\n        return res;\r\n    };\r\n    /**\r\n     * Converts numeric value to timestamp in milliseconds.\r\n     *\r\n     * @param value     A source value\r\n     * @param baseUnit  Base unit the source value is in: \"q\", \"s\", \"i\", \"h\", \"d\", \"w\", \"m\", \"y\"\r\n     * @return Value representation as a timestamp in milliseconds\r\n     */\r\n    DurationFormatter.prototype.toTimeStamp = function (value, baseUnit) {\r\n        return value * this._unitValues[baseUnit];\r\n    };\r\n    DurationFormatter.prototype.toTimeUnit = function (code) {\r\n        switch (code) {\r\n            case \"S\":\r\n                return \"millisecond\";\r\n            case \"s\":\r\n                return \"second\";\r\n            case \"m\":\r\n                return \"minute\";\r\n            case \"h\":\r\n                return \"hour\";\r\n            case \"d\":\r\n                return \"day\";\r\n            case \"w\":\r\n                return \"week\";\r\n            case \"M\":\r\n                return \"month\";\r\n            case \"y\":\r\n                return \"year\";\r\n        }\r\n        ;\r\n    };\r\n    /**\r\n     * Invalidates the parent [[Sprite]] object.\r\n     */\r\n    DurationFormatter.prototype.invalidateSprite = function () {\r\n        if (this.sprite) {\r\n            this.sprite.invalidate();\r\n        }\r\n    };\r\n    Object.defineProperty(DurationFormatter.prototype, \"baseUnit\", {\r\n        /**\r\n         * @return Base unit\r\n         */\r\n        get: function () {\r\n            return this._baseUnit;\r\n        },\r\n        /**\r\n         * Base unit the values are in.\r\n         *\r\n         * A base unit will be used to recalculate the numeric value to millisecond\r\n         * timestamps.\r\n         *\r\n         * Available options:\r\n         *\r\n         * * \"millisecond\"\r\n         * * \"second\"\r\n         * * \"minute\"\r\n         * * \"hour\"\r\n         * * \"day\"\r\n         * * \"week\"\r\n         * * \"month\"\r\n         * * \"year\"\r\n         *\r\n         * @default \"s\"\r\n         * @param baseUnit  A base unit\r\n         */\r\n        set: function (baseUnit) {\r\n            this._baseUnit = baseUnit;\r\n            this.invalidateSprite();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DurationFormatter.prototype, \"outputFormat\", {\r\n        /**\r\n         * Getter for output format.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return Output format\r\n         */\r\n        get: function () {\r\n            return this._outputFormat;\r\n        },\r\n        /**\r\n         * Setter for output format: \"svg\" or \"html.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value  Output format\r\n         */\r\n        set: function (outputFormat) {\r\n            this._outputFormat = outputFormat.toLowerCase();\r\n            this.invalidateSprite();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns appropriate default format for the value.\r\n     *\r\n     * If `maxValue` is sepcified, it will use that value to determine the time\r\n     * unit for the format.\r\n     *\r\n     * For example if your `baseUnit` is `\"second\"` and you pass in `10`, you\r\n     * will get `\"10\"`.\r\n     *\r\n     * However, you might want it to be formatted in the context of bigger scale,\r\n     * say 10 minutes (600 seconds). If you pass in `600` as `maxValue`, all\r\n     * values, including small ones will use format with minutes, e.g.:\r\n     * `00:10`, `00:50`, `12: 30`, etc.\r\n     *\r\n     * @param value     Value to format\r\n     * @param maxValue  Maximum value to be used to determine format\r\n     * @param baseUnit  Base unit of the value\r\n     * @return Format\r\n     */\r\n    DurationFormatter.prototype.getFormat = function (value, maxValue, baseUnit) {\r\n        // Is format override set?\r\n        if ($type.hasValue(this.durationFormat)) {\r\n            return this.durationFormat;\r\n        }\r\n        // Get base unit\r\n        if (!baseUnit) {\r\n            baseUnit = this.baseUnit;\r\n        }\r\n        if ($type.hasValue(maxValue) && value != maxValue) {\r\n            value = Math.abs(value);\r\n            maxValue = Math.abs(maxValue);\r\n            var maxUnit = this.getValueUnit($math.max(value, maxValue), baseUnit);\r\n            //let diffUnit = this.getValueUnit(Math.abs(maxValue - value), baseUnit);\r\n            //console.log(maxUnit, diffUnit);\r\n            return this.durationFormats[baseUnit][maxUnit];\r\n        }\r\n        else {\r\n            var unit = this.getValueUnit(value, baseUnit);\r\n            return this.durationFormats[baseUnit][unit];\r\n        }\r\n    };\r\n    /**\r\n     * Returns value's closest denominator time unit, e.g 100 seconds is\r\n     * `\"minute\"`, while 59 seconds would still be `second`.\r\n     *\r\n     * @param value     Source duration value\r\n     * @param baseUnit  Base unit\r\n     * @return Denominator\r\n     */\r\n    DurationFormatter.prototype.getValueUnit = function (value, baseUnit) {\r\n        // Get base unit\r\n        if (!baseUnit) {\r\n            baseUnit = this.baseUnit;\r\n        }\r\n        // Convert to milliseconds\r\n        var currentUnit;\r\n        var ms = this.getMilliseconds(value, baseUnit);\r\n        $object.eachContinue(this._unitValues, function (key, val) {\r\n            if (key == baseUnit || currentUnit) {\r\n                var num = ms / val;\r\n                if (num <= 1) {\r\n                    if (!currentUnit) {\r\n                        currentUnit = key;\r\n                    }\r\n                    return false;\r\n                }\r\n                currentUnit = key;\r\n            }\r\n            return true;\r\n        });\r\n        return currentUnit;\r\n    };\r\n    /**\r\n     * Converts value to milliseconds according to `baseUnit`.\r\n     *\r\n     * @param value     Source duration value\r\n     * @param baseUnit  Base unit\r\n     * @return Value in milliseconds\r\n     */\r\n    DurationFormatter.prototype.getMilliseconds = function (value, baseUnit) {\r\n        // Get base unit\r\n        if (!baseUnit) {\r\n            baseUnit = this.baseUnit;\r\n        }\r\n        return value * this._unitValues[baseUnit];\r\n    };\r\n    Object.defineProperty(DurationFormatter.prototype, \"durationFormat\", {\r\n        /**\r\n         * @return Format\r\n         */\r\n        get: function () {\r\n            return this._durationFormat;\r\n        },\r\n        /**\r\n         * If set, this format will be used instead of the one determined dynamically\r\n         * based on the basedUnit and range of values.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} Available fomatting codes\r\n         * @param value  Format\r\n         */\r\n        set: function (value) {\r\n            if (this._durationFormat != value) {\r\n                this._durationFormat = value;\r\n                this.invalidateSprite();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DurationFormatter.prototype, \"durationFormats\", {\r\n        /**\r\n         * @return Formats\r\n         */\r\n        get: function () {\r\n            if (!this._durationFormats) {\r\n                this._durationFormats = {\r\n                    \"millisecond\": {\r\n                        \"millisecond\": this.language.translate(\"_duration_millisecond\"),\r\n                        \"second\": this.language.translate(\"_duration_millisecond_second\"),\r\n                        \"minute\": this.language.translate(\"_duration_millisecond_minute\"),\r\n                        \"hour\": this.language.translate(\"_duration_millisecond_hour\"),\r\n                        \"day\": this.language.translate(\"_duration_millisecond_day\"),\r\n                        \"week\": this.language.translate(\"_duration_millisecond_week\"),\r\n                        \"month\": this.language.translate(\"_duration_millisecond_month\"),\r\n                        \"year\": this.language.translate(\"_duration_millisecond_year\")\r\n                    },\r\n                    \"second\": {\r\n                        \"second\": this.language.translate(\"_duration_second\"),\r\n                        \"minute\": this.language.translate(\"_duration_second_minute\"),\r\n                        \"hour\": this.language.translate(\"_duration_second_hour\"),\r\n                        \"day\": this.language.translate(\"_duration_second_day\"),\r\n                        \"week\": this.language.translate(\"_duration_second_week\"),\r\n                        \"month\": this.language.translate(\"_duration_second_month\"),\r\n                        \"year\": this.language.translate(\"_duration_second_year\")\r\n                    },\r\n                    \"minute\": {\r\n                        \"minute\": this.language.translate(\"_duration_minute\"),\r\n                        \"hour\": this.language.translate(\"_duration_minute_hour\"),\r\n                        \"day\": this.language.translate(\"_duration_minute_day\"),\r\n                        \"week\": this.language.translate(\"_duration_minute_week\"),\r\n                        \"month\": this.language.translate(\"_duration_minute_month\"),\r\n                        \"year\": this.language.translate(\"_duration_minute_year\")\r\n                    },\r\n                    \"hour\": {\r\n                        \"hour\": this.language.translate(\"_duration_hour\"),\r\n                        \"day\": this.language.translate(\"_duration_hour_day\"),\r\n                        \"week\": this.language.translate(\"_duration_hour_week\"),\r\n                        \"month\": this.language.translate(\"_duration_hour_month\"),\r\n                        \"year\": this.language.translate(\"_duration_hour_year\")\r\n                    },\r\n                    \"day\": {\r\n                        \"day\": this.language.translate(\"_duration_day\"),\r\n                        \"week\": this.language.translate(\"_duration_day_week\"),\r\n                        \"month\": this.language.translate(\"_duration_day_month\"),\r\n                        \"year\": this.language.translate(\"_duration_day_year\")\r\n                    },\r\n                    \"week\": {\r\n                        \"week\": this.language.translate(\"_duration_week\"),\r\n                        \"month\": this.language.translate(\"_duration_week_month\"),\r\n                        \"year\": this.language.translate(\"_duration_week_year\")\r\n                    },\r\n                    \"month\": {\r\n                        \"month\": this.language.translate(\"_duration_month\"),\r\n                        \"year\": this.language.translate(\"_duration_month_year\")\r\n                    },\r\n                    \"year\": {\r\n                        \"year\": this.language.translate(\"_duration_year\")\r\n                    }\r\n                };\r\n            }\r\n            return this._durationFormats;\r\n        },\r\n        /**\r\n         * Duration formats for various combination of base units.\r\n         *\r\n         * @param value  Formats\r\n         */\r\n        set: function (value) {\r\n            this._durationFormats = value;\r\n            this.invalidateSprite();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return DurationFormatter;\r\n}(BaseObject));\r\nexport { DurationFormatter };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DurationFormatter\"] = DurationFormatter;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}