{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { XYCursor } from \"./XYCursor\";\nimport { Percent, percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../../core/Registry\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Cursor for [[RadarChart]].\r\n *\r\n * @see {@link IRadarCursorEvents} for a list of available events\r\n * @see {@link IRadarCursorAdapters} for a list of available Adapters\r\n */\nvar RadarCursor = /** @class */function (_super) {\n  __extends(RadarCursor, _super);\n  /**\r\n   * Constructor\r\n   */\n  function RadarCursor() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    _this.className = \"RadarCursor\";\n    _this.radius = percent(100);\n    _this.innerRadius = percent(0);\n    // Apply theme\n    _this.applyTheme();\n    _this.mask = undefined;\n    return _this;\n  }\n  /**\r\n   * Checks if point is within bounds of a container.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param point  Point to check\r\n   * @return Fits within container?\r\n   */\n  RadarCursor.prototype.fitsToBounds = function (point) {\n    var radius = $math.getDistance(point);\n    //if(!$math.isAngleInRange(angle, this.startAngle, this.endAngle)){\n    //return false;\n    //}\n    if (radius < this.truePixelRadius + 1 && radius > this.pixelInnerRadius - 1) {\n      // ok to add/remove some\n      return true;\n    }\n    return false;\n  };\n  Object.defineProperty(RadarCursor.prototype, \"startAngle\", {\n    /**\r\n     * @return Start angle\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startAngle\");\n    },\n    /**\r\n     * Starting angle of the cursor's radial line.\r\n     *\r\n     * @param value Start angle\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"startAngle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RadarCursor.prototype, \"endAngle\", {\n    /**\r\n     * @return End angle\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endAngle\");\n    },\n    /**\r\n     * End angle of the cursor's radial line.\r\n     *\r\n     * @param value End angle\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"endAngle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  RadarCursor.prototype.triggerMoveReal = function (point, force) {\n    if (!this.xAxis || this.xAxis && (!this.xAxis.cursorTooltipEnabled || this.xAxis.tooltip.disabled)) {\n      this.updateLineX(this.point);\n    }\n    if (!this.yAxis || this.yAxis && (!this.yAxis.cursorTooltipEnabled || this.yAxis.tooltip.disabled)) {\n      this.updateLineY(this.point);\n    }\n    this.updateSelection();\n    _super.prototype.triggerMoveReal.call(this, point, force);\n  };\n  /**\r\n   * (Re)draws the horizontal (circular) cursor's line.\r\n   *\r\n   * @param point New target point\r\n   */\n  RadarCursor.prototype.updateLineX = function (point) {\n    var radius = this.pixelRadius;\n    var startAngle = this.startAngle;\n    var endAngle = this.endAngle;\n    var innerRadius = this.pixelInnerRadius;\n    if (radius > 0 && $type.isNumber(startAngle) && $type.isNumber(endAngle) && $type.isNumber(innerRadius)) {\n      var angle = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\n      var path = void 0;\n      if (this.lineX && this.lineX.visible) {\n        this.lineX.moveTo({\n          x: 0,\n          y: 0\n        });\n        // fill\n        if (this.xAxis && this.fullWidthLineX) {\n          var startPoint = this.xAxis.currentItemStartPoint;\n          var endPoint = this.xAxis.currentItemEndPoint;\n          if (startPoint && endPoint) {\n            var fillStartAngle = $math.fitAngleToRange($math.getAngle(startPoint), startAngle, endAngle);\n            var fillEndAngle = $math.fitAngleToRange($math.getAngle(endPoint), startAngle, endAngle);\n            var arc = fillEndAngle - fillStartAngle;\n            // clockwise\n            // this is needed, normalizeAngle doesn't solve it\n            if (startAngle < endAngle) {\n              if (arc < 0) {\n                arc += 360;\n              }\n            }\n            // ccw\n            else {\n              if (arc > 0) {\n                arc -= 360;\n              }\n            }\n            angle -= arc / 2;\n            path = $path.moveTo({\n              x: innerRadius * $math.cos(angle),\n              y: innerRadius * $math.sin(angle)\n            }) + $path.lineTo({\n              x: radius * $math.cos(angle),\n              y: radius * $math.sin(angle)\n            }) + $path.arcTo(angle, arc, radius) + $path.lineTo({\n              x: innerRadius * $math.cos(angle + arc),\n              y: innerRadius * $math.sin(angle + arc)\n            }) + $path.arcTo(angle + arc, -arc, innerRadius);\n          }\n        }\n        // line\n        if (!path) {\n          path = $path.moveTo({\n            x: innerRadius * $math.cos(angle),\n            y: innerRadius * $math.sin(angle)\n          }) + $path.lineTo({\n            x: radius * $math.cos(angle),\n            y: radius * $math.sin(angle)\n          });\n        }\n        this.lineX.path = path;\n      }\n    }\n  };\n  /**\r\n   * (Re)draws the vertical (radial) cursor's line.\r\n   *\r\n   * @param point New target point\r\n   */\n  RadarCursor.prototype.updateLineY = function (point) {\n    if (this.lineY && this.lineY.visible) {\n      var startAngle = this.startAngle;\n      var endAngle = this.endAngle;\n      var truePixelRadius = this.truePixelRadius;\n      var radius = $math.fitToRange($math.getDistance(point), 0, this.truePixelRadius);\n      if ($type.isNumber(radius) && $type.isNumber(startAngle)) {\n        this.lineY.moveTo({\n          x: 0,\n          y: 0\n        });\n        var path = void 0;\n        var arc = endAngle - startAngle;\n        if (this.yAxis && this.fullWidthLineY) {\n          // fill\n          var startPoint = this.yAxis.currentItemStartPoint;\n          var endPoint = this.yAxis.currentItemEndPoint;\n          if (startPoint && endPoint) {\n            var innerRadius = $math.fitToRange($math.getDistance(startPoint), 0, truePixelRadius);\n            radius = $math.fitToRange($math.getDistance(endPoint), 0, truePixelRadius);\n            path = $path.moveTo({\n              x: radius * $math.cos(startAngle),\n              y: radius * $math.sin(startAngle)\n            }) + $path.arcTo(startAngle, arc, radius);\n            path += $path.moveTo({\n              x: innerRadius * $math.cos(endAngle),\n              y: innerRadius * $math.sin(endAngle)\n            }) + $path.arcTo(endAngle, -arc, innerRadius);\n          }\n        }\n        if (!path) {\n          path = $path.moveTo({\n            x: radius * $math.cos(startAngle),\n            y: radius * $math.sin(startAngle)\n          }) + $path.arcTo(startAngle, endAngle - startAngle, radius);\n        }\n        this.lineY.path = path;\n      }\n    }\n  };\n  /**\r\n   * Updates selection dimensions on size change.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  RadarCursor.prototype.updateSelection = function () {\n    if (this._usesSelection) {\n      var downPoint = this.downPoint;\n      if (downPoint) {\n        var point = this.point;\n        var radius = this.pixelRadius;\n        var truePixelRadius = this.truePixelRadius;\n        var innerRadius = this.pixelInnerRadius;\n        var startAngle = Math.min(this.startAngle, this.endAngle);\n        var endAngle = Math.max(this.startAngle, this.endAngle);\n        var downAngle = $math.fitAngleToRange($math.getAngle(downPoint), startAngle, endAngle);\n        var angle = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\n        var downRadius = $math.getDistance(downPoint);\n        if (downRadius < truePixelRadius) {\n          var currentRadius = $math.fitToRange($math.getDistance(point), 0, truePixelRadius);\n          this._prevAngle = angle;\n          var path = $path.moveTo({\n            x: 0,\n            y: 0\n          });\n          var downSin = $math.sin(downAngle);\n          var downCos = $math.cos(downAngle);\n          var sin = $math.sin(angle);\n          var cos = $math.cos(angle);\n          var behavior = this.behavior;\n          if (behavior == \"zoomX\" || behavior == \"selectX\") {\n            path += $path.lineTo({\n              x: radius * downCos,\n              y: radius * downSin\n            }) + $path.arcTo(downAngle, angle - downAngle, radius) + $path.lineTo({\n              x: innerRadius * cos,\n              y: innerRadius * sin\n            }) + $path.arcTo(angle, downAngle - angle, innerRadius);\n          } else if (behavior == \"zoomY\" || behavior == \"selectY\") {\n            path = $path.moveTo({\n              x: currentRadius * $math.cos(startAngle),\n              y: currentRadius * $math.sin(startAngle)\n            }) + $path.arcTo(startAngle, endAngle - startAngle, currentRadius) + $path.lineTo({\n              x: downRadius * $math.cos(endAngle),\n              y: downRadius * $math.sin(endAngle)\n            }) + $path.arcTo(endAngle, startAngle - endAngle, downRadius) + $path.closePath();\n          } else if (behavior == \"zoomXY\") {\n            path = $path.moveTo({\n              x: currentRadius * $math.cos(downAngle),\n              y: currentRadius * $math.sin(downAngle)\n            }) + $path.arcTo(downAngle, angle - downAngle, currentRadius) + $path.lineTo({\n              x: downRadius * $math.cos(angle),\n              y: downRadius * $math.sin(angle)\n            }) + $path.arcTo(angle, downAngle - angle, downRadius) + $path.closePath();\n          }\n          this.selection.path = path;\n        }\n        this.selection.moveTo({\n          x: 0,\n          y: 0\n        });\n      }\n    }\n  };\n  /**\r\n   * Updates cursors current positions.\r\n   */\n  RadarCursor.prototype.getPositions = function () {\n    // positions are used by axes or series\n    var chart = this.chart;\n    if (chart) {\n      var innerRadius = this.pixelInnerRadius;\n      var radius = this.truePixelRadius - innerRadius;\n      var startAngle = this.startAngle;\n      var endAngle = this.endAngle;\n      var angle = $math.fitAngleToRange($math.getAngle(this.point), startAngle, endAngle);\n      var xPosition = (angle - startAngle) / (endAngle - startAngle);\n      this.xPosition = xPosition;\n      this.yPosition = $math.fitToRange(($math.getDistance(this.point) - innerRadius) / radius, 0, 1);\n    }\n  };\n  /**\r\n   * Overriding inherited method, so that nothing happens when it's triggered.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  RadarCursor.prototype.updatePoint = function (point) {};\n  /**\r\n   * Updates Cursor's position when axis tooltip changes horizontal position.\r\n   *\r\n   * @param event Axis event\r\n   */\n  RadarCursor.prototype.handleXTooltipPosition = function (event) {\n    if (this.xAxis.cursorTooltipEnabled) {\n      var tooltip = this.xAxis.tooltip;\n      this.updateLineX($utils.svgPointToSprite({\n        x: tooltip.pixelX,\n        y: tooltip.pixelY\n      }, this));\n    }\n  };\n  /**\r\n   * Updates Cursor's position when axis tooltip changes vertical position.\r\n   *\r\n   * @todo Description\r\n   * @param event Axis event\r\n   */\n  RadarCursor.prototype.handleYTooltipPosition = function (event) {\n    if (this.yAxis.cursorTooltipEnabled) {\n      var tooltip = this.yAxis.tooltip;\n      this.updateLineY($utils.svgPointToSprite({\n        x: tooltip.pixelX,\n        y: tooltip.pixelY\n      }, this));\n    }\n  };\n  /**\r\n   * needs to be overriden\r\n   * @ignore\r\n   */\n  RadarCursor.prototype.updateLinePositions = function (point) {};\n  /**\r\n   * [getRanges description]\r\n   *\r\n   * @todo Description\r\n   */\n  RadarCursor.prototype.getRanges = function () {\n    var downPoint = this.downPoint;\n    if (downPoint) {\n      var upPoint = this.upPoint;\n      var chart = this.chart;\n      if (chart) {\n        var radius = this.pixelRadius;\n        var startAngle = this.startAngle;\n        var endAngle = this.endAngle;\n        var downAngle = $math.fitAngleToRange($math.getAngle(downPoint), this.startAngle, this.endAngle);\n        var upAngle = $math.fitAngleToRange($math.getAngle(upPoint), this.startAngle, this.endAngle);\n        var downRadius = $math.fitToRange($math.getDistance(downPoint), 0, radius);\n        var upRadius = $math.fitToRange($math.getDistance(upPoint), 0, radius);\n        var startX = 0;\n        var endX = 1;\n        var startY = 0;\n        var endY = 1;\n        var behavior = this.behavior;\n        if (behavior == \"zoomX\" || behavior == \"selectX\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\n          var arc = endAngle - startAngle;\n          startX = $math.round((downAngle - startAngle) / arc, 5);\n          endX = $math.round((upAngle - startAngle) / arc, 5);\n        }\n        if (behavior == \"zoomY\" || behavior == \"selectY\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\n          startY = $math.round(downRadius / radius, 5);\n          endY = $math.round(upRadius / radius, 5);\n        }\n        this.xRange = {\n          start: Math.min(startX, endX),\n          end: Math.max(startX, endX)\n        };\n        this.yRange = {\n          start: Math.min(startY, endY),\n          end: Math.max(startY, endY)\n        };\n        if (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\n          // void\n        } else {\n          this.selection.hide();\n        }\n      }\n    }\n  };\n  /**\r\n   * Overriding inherited method, so that nothing happens when `updateSize`\r\n   * is triggered.\r\n   *\r\n   * RadarCursor is quite complicated and needs own sizing logic.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  RadarCursor.prototype.updateSize = function () {};\n  Object.defineProperty(RadarCursor.prototype, \"radius\", {\n    /**\r\n     * @return Outer radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n    /**\r\n     * Outer radius of the cursor's circular line.\r\n     * Absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Outer radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"radius\", value, false, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RadarCursor.prototype, \"pixelRadius\", {\n    /**\r\n     * Outer radius of the circular line in pixels.\r\n     *\r\n     * @return Outer radius (px)\r\n     * @readonly\r\n     */\n    get: function () {\n      return $utils.relativeRadiusToValue(this.radius, this.truePixelRadius);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RadarCursor.prototype, \"truePixelRadius\", {\n    /**\r\n     * [truePixelRadius description]\r\n     *\r\n     * @todo Description\r\n     * @return Outer radius (px)\r\n     * @readonly\r\n     */\n    get: function () {\n      return $utils.relativeToValue(percent(100), $math.min(this.innerWidth / 2, this.innerHeight / 2));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RadarCursor.prototype, \"innerRadius\", {\n    /**\r\n     * @return Inner radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n    /**\r\n     * Inner radius of the cursor's circular line.\r\n     * Absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Inner radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"innerRadius\", value, false, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RadarCursor.prototype, \"pixelInnerRadius\", {\n    /**\r\n     * Inner radius of the circular line in pixels.\r\n     *\r\n     * @return Inner radius (px)\r\n     * @readonly\r\n     */\n    get: function () {\n      var innerRadius = this.innerRadius;\n      if (innerRadius instanceof Percent) {\n        innerRadius = percent(100 * innerRadius.value * this.chart.innerRadiusModifyer);\n      }\n      return $utils.relativeRadiusToValue(innerRadius, this.truePixelRadius) || 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  RadarCursor.prototype.fixPoint = function (point) {\n    // overriding xy method\n    return point;\n  };\n  return RadarCursor;\n}(XYCursor);\nexport { RadarCursor };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"RadarCursor\"] = RadarCursor;","map":{"version":3,"names":["__extends","XYCursor","Percent","percent","registry","$path","$math","$utils","$type","RadarCursor","_super","_this","call","className","radius","innerRadius","applyTheme","mask","undefined","prototype","fitsToBounds","point","getDistance","truePixelRadius","pixelInnerRadius","Object","defineProperty","get","getPropertyValue","set","value","setPropertyValue","enumerable","configurable","triggerMoveReal","force","xAxis","cursorTooltipEnabled","tooltip","disabled","updateLineX","yAxis","updateLineY","updateSelection","pixelRadius","startAngle","endAngle","isNumber","angle","fitAngleToRange","getAngle","path","lineX","visible","moveTo","x","y","fullWidthLineX","startPoint","currentItemStartPoint","endPoint","currentItemEndPoint","fillStartAngle","fillEndAngle","arc","cos","sin","lineTo","arcTo","lineY","fitToRange","fullWidthLineY","_usesSelection","downPoint","Math","min","max","downAngle","downRadius","currentRadius","_prevAngle","downSin","downCos","behavior","closePath","selection","getPositions","chart","xPosition","yPosition","updatePoint","handleXTooltipPosition","event","svgPointToSprite","pixelX","pixelY","handleYTooltipPosition","updateLinePositions","getRanges","upPoint","upAngle","upRadius","startX","endX","startY","endY","round","xRange","start","end","yRange","hide","updateSize","setPercentProperty","relativeRadiusToValue","relativeToValue","innerWidth","innerHeight","innerRadiusModifyer","fixPoint","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/charts/cursors/RadarCursor.js"],"sourcesContent":["import { __extends } from \"tslib\";\r\nimport { XYCursor } from \"./XYCursor\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Cursor for [[RadarChart]].\r\n *\r\n * @see {@link IRadarCursorEvents} for a list of available events\r\n * @see {@link IRadarCursorAdapters} for a list of available Adapters\r\n */\r\nvar RadarCursor = /** @class */ (function (_super) {\r\n    __extends(RadarCursor, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function RadarCursor() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"RadarCursor\";\r\n        _this.radius = percent(100);\r\n        _this.innerRadius = percent(0);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        _this.mask = undefined;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Checks if point is within bounds of a container.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param point  Point to check\r\n     * @return Fits within container?\r\n     */\r\n    RadarCursor.prototype.fitsToBounds = function (point) {\r\n        var radius = $math.getDistance(point);\r\n        //if(!$math.isAngleInRange(angle, this.startAngle, this.endAngle)){\r\n        //return false;\r\n        //}\r\n        if (radius < this.truePixelRadius + 1 && radius > this.pixelInnerRadius - 1) { // ok to add/remove some\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    Object.defineProperty(RadarCursor.prototype, \"startAngle\", {\r\n        /**\r\n         * @return Start angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startAngle\");\r\n        },\r\n        /**\r\n         * Starting angle of the cursor's radial line.\r\n         *\r\n         * @param value Start angle\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"startAngle\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RadarCursor.prototype, \"endAngle\", {\r\n        /**\r\n         * @return End angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endAngle\");\r\n        },\r\n        /**\r\n         * End angle of the cursor's radial line.\r\n         *\r\n         * @param value End angle\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"endAngle\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    RadarCursor.prototype.triggerMoveReal = function (point, force) {\r\n        if (!this.xAxis || (this.xAxis && (!this.xAxis.cursorTooltipEnabled || this.xAxis.tooltip.disabled))) {\r\n            this.updateLineX(this.point);\r\n        }\r\n        if (!this.yAxis || (this.yAxis && (!this.yAxis.cursorTooltipEnabled || this.yAxis.tooltip.disabled))) {\r\n            this.updateLineY(this.point);\r\n        }\r\n        this.updateSelection();\r\n        _super.prototype.triggerMoveReal.call(this, point, force);\r\n    };\r\n    /**\r\n     * (Re)draws the horizontal (circular) cursor's line.\r\n     *\r\n     * @param point New target point\r\n     */\r\n    RadarCursor.prototype.updateLineX = function (point) {\r\n        var radius = this.pixelRadius;\r\n        var startAngle = this.startAngle;\r\n        var endAngle = this.endAngle;\r\n        var innerRadius = this.pixelInnerRadius;\r\n        if (radius > 0 && $type.isNumber(startAngle) && $type.isNumber(endAngle) && $type.isNumber(innerRadius)) {\r\n            var angle = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n            var path = void 0;\r\n            if (this.lineX && this.lineX.visible) {\r\n                this.lineX.moveTo({ x: 0, y: 0 });\r\n                // fill\r\n                if (this.xAxis && this.fullWidthLineX) {\r\n                    var startPoint = this.xAxis.currentItemStartPoint;\r\n                    var endPoint = this.xAxis.currentItemEndPoint;\r\n                    if (startPoint && endPoint) {\r\n                        var fillStartAngle = $math.fitAngleToRange($math.getAngle(startPoint), startAngle, endAngle);\r\n                        var fillEndAngle = $math.fitAngleToRange($math.getAngle(endPoint), startAngle, endAngle);\r\n                        var arc = fillEndAngle - fillStartAngle;\r\n                        // clockwise\r\n                        // this is needed, normalizeAngle doesn't solve it\r\n                        if (startAngle < endAngle) {\r\n                            if (arc < 0) {\r\n                                arc += 360;\r\n                            }\r\n                        }\r\n                        // ccw\r\n                        else {\r\n                            if (arc > 0) {\r\n                                arc -= 360;\r\n                            }\r\n                        }\r\n                        angle -= arc / 2;\r\n                        path = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n                            + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) })\r\n                            + $path.arcTo(angle, arc, radius)\r\n                            + $path.lineTo({ x: innerRadius * $math.cos(angle + arc), y: innerRadius * $math.sin(angle + arc) })\r\n                            + $path.arcTo(angle + arc, -arc, innerRadius);\r\n                    }\r\n                }\r\n                // line\r\n                if (!path) {\r\n                    path = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n                }\r\n                this.lineX.path = path;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * (Re)draws the vertical (radial) cursor's line.\r\n     *\r\n     * @param point New target point\r\n     */\r\n    RadarCursor.prototype.updateLineY = function (point) {\r\n        if (this.lineY && this.lineY.visible) {\r\n            var startAngle = this.startAngle;\r\n            var endAngle = this.endAngle;\r\n            var truePixelRadius = this.truePixelRadius;\r\n            var radius = $math.fitToRange($math.getDistance(point), 0, this.truePixelRadius);\r\n            if ($type.isNumber(radius) && $type.isNumber(startAngle)) {\r\n                this.lineY.moveTo({ x: 0, y: 0 });\r\n                var path = void 0;\r\n                var arc = endAngle - startAngle;\r\n                if (this.yAxis && this.fullWidthLineY) {\r\n                    // fill\r\n                    var startPoint = this.yAxis.currentItemStartPoint;\r\n                    var endPoint = this.yAxis.currentItemEndPoint;\r\n                    if (startPoint && endPoint) {\r\n                        var innerRadius = $math.fitToRange($math.getDistance(startPoint), 0, truePixelRadius);\r\n                        radius = $math.fitToRange($math.getDistance(endPoint), 0, truePixelRadius);\r\n                        path = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius);\r\n                        path += $path.moveTo({ x: innerRadius * $math.cos(endAngle), y: innerRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, -arc, innerRadius);\r\n                    }\r\n                }\r\n                if (!path) {\r\n                    path = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius);\r\n                }\r\n                this.lineY.path = path;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Updates selection dimensions on size change.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    RadarCursor.prototype.updateSelection = function () {\r\n        if (this._usesSelection) {\r\n            var downPoint = this.downPoint;\r\n            if (downPoint) {\r\n                var point = this.point;\r\n                var radius = this.pixelRadius;\r\n                var truePixelRadius = this.truePixelRadius;\r\n                var innerRadius = this.pixelInnerRadius;\r\n                var startAngle = Math.min(this.startAngle, this.endAngle);\r\n                var endAngle = Math.max(this.startAngle, this.endAngle);\r\n                var downAngle = $math.fitAngleToRange($math.getAngle(downPoint), startAngle, endAngle);\r\n                var angle = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n                var downRadius = $math.getDistance(downPoint);\r\n                if (downRadius < truePixelRadius) {\r\n                    var currentRadius = $math.fitToRange($math.getDistance(point), 0, truePixelRadius);\r\n                    this._prevAngle = angle;\r\n                    var path = $path.moveTo({ x: 0, y: 0 });\r\n                    var downSin = $math.sin(downAngle);\r\n                    var downCos = $math.cos(downAngle);\r\n                    var sin = $math.sin(angle);\r\n                    var cos = $math.cos(angle);\r\n                    var behavior = this.behavior;\r\n                    if (behavior == \"zoomX\" || behavior == \"selectX\") {\r\n                        path += $path.lineTo({ x: radius * downCos, y: radius * downSin }) + $path.arcTo(downAngle, angle - downAngle, radius) + $path.lineTo({ x: innerRadius * cos, y: innerRadius * sin }) + $path.arcTo(angle, downAngle - angle, innerRadius);\r\n                    }\r\n                    else if (behavior == \"zoomY\" || behavior == \"selectY\") {\r\n                        path = $path.moveTo({ x: currentRadius * $math.cos(startAngle), y: currentRadius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(endAngle), y: downRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, startAngle - endAngle, downRadius) + $path.closePath();\r\n                    }\r\n                    else if (behavior == \"zoomXY\") {\r\n                        path = $path.moveTo({ x: currentRadius * $math.cos(downAngle), y: currentRadius * $math.sin(downAngle) }) + $path.arcTo(downAngle, angle - downAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(angle), y: downRadius * $math.sin(angle) }) + $path.arcTo(angle, downAngle - angle, downRadius) + $path.closePath();\r\n                    }\r\n                    this.selection.path = path;\r\n                }\r\n                this.selection.moveTo({ x: 0, y: 0 });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Updates cursors current positions.\r\n     */\r\n    RadarCursor.prototype.getPositions = function () {\r\n        // positions are used by axes or series\r\n        var chart = this.chart;\r\n        if (chart) {\r\n            var innerRadius = this.pixelInnerRadius;\r\n            var radius = this.truePixelRadius - innerRadius;\r\n            var startAngle = this.startAngle;\r\n            var endAngle = this.endAngle;\r\n            var angle = $math.fitAngleToRange($math.getAngle(this.point), startAngle, endAngle);\r\n            var xPosition = ((angle - startAngle) / (endAngle - startAngle));\r\n            this.xPosition = xPosition;\r\n            this.yPosition = $math.fitToRange(($math.getDistance(this.point) - innerRadius) / radius, 0, 1);\r\n        }\r\n    };\r\n    /**\r\n     * Overriding inherited method, so that nothing happens when it's triggered.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    RadarCursor.prototype.updatePoint = function (point) {\r\n    };\r\n    /**\r\n     * Updates Cursor's position when axis tooltip changes horizontal position.\r\n     *\r\n     * @param event Axis event\r\n     */\r\n    RadarCursor.prototype.handleXTooltipPosition = function (event) {\r\n        if (this.xAxis.cursorTooltipEnabled) {\r\n            var tooltip = this.xAxis.tooltip;\r\n            this.updateLineX($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n        }\r\n    };\r\n    /**\r\n     * Updates Cursor's position when axis tooltip changes vertical position.\r\n     *\r\n     * @todo Description\r\n     * @param event Axis event\r\n     */\r\n    RadarCursor.prototype.handleYTooltipPosition = function (event) {\r\n        if (this.yAxis.cursorTooltipEnabled) {\r\n            var tooltip = this.yAxis.tooltip;\r\n            this.updateLineY($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n        }\r\n    };\r\n    /**\r\n     * needs to be overriden\r\n     * @ignore\r\n     */\r\n    RadarCursor.prototype.updateLinePositions = function (point) {\r\n    };\r\n    /**\r\n     * [getRanges description]\r\n     *\r\n     * @todo Description\r\n     */\r\n    RadarCursor.prototype.getRanges = function () {\r\n        var downPoint = this.downPoint;\r\n        if (downPoint) {\r\n            var upPoint = this.upPoint;\r\n            var chart = this.chart;\r\n            if (chart) {\r\n                var radius = this.pixelRadius;\r\n                var startAngle = this.startAngle;\r\n                var endAngle = this.endAngle;\r\n                var downAngle = $math.fitAngleToRange($math.getAngle(downPoint), this.startAngle, this.endAngle);\r\n                var upAngle = $math.fitAngleToRange($math.getAngle(upPoint), this.startAngle, this.endAngle);\r\n                var downRadius = $math.fitToRange($math.getDistance(downPoint), 0, radius);\r\n                var upRadius = $math.fitToRange($math.getDistance(upPoint), 0, radius);\r\n                var startX = 0;\r\n                var endX = 1;\r\n                var startY = 0;\r\n                var endY = 1;\r\n                var behavior = this.behavior;\r\n                if (behavior == \"zoomX\" || behavior == \"selectX\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n                    var arc = endAngle - startAngle;\r\n                    startX = $math.round((downAngle - startAngle) / arc, 5);\r\n                    endX = $math.round((upAngle - startAngle) / arc, 5);\r\n                }\r\n                if (behavior == \"zoomY\" || behavior == \"selectY\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n                    startY = $math.round(downRadius / radius, 5);\r\n                    endY = $math.round(upRadius / radius, 5);\r\n                }\r\n                this.xRange = { start: Math.min(startX, endX), end: Math.max(startX, endX) };\r\n                this.yRange = { start: Math.min(startY, endY), end: Math.max(startY, endY) };\r\n                if (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n                    // void\r\n                }\r\n                else {\r\n                    this.selection.hide();\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Overriding inherited method, so that nothing happens when `updateSize`\r\n     * is triggered.\r\n     *\r\n     * RadarCursor is quite complicated and needs own sizing logic.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    RadarCursor.prototype.updateSize = function () { };\r\n    Object.defineProperty(RadarCursor.prototype, \"radius\", {\r\n        /**\r\n         * @return Outer radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Outer radius of the cursor's circular line.\r\n         * Absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param value  Outer radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RadarCursor.prototype, \"pixelRadius\", {\r\n        /**\r\n         * Outer radius of the circular line in pixels.\r\n         *\r\n         * @return Outer radius (px)\r\n         * @readonly\r\n         */\r\n        get: function () {\r\n            return $utils.relativeRadiusToValue(this.radius, this.truePixelRadius);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RadarCursor.prototype, \"truePixelRadius\", {\r\n        /**\r\n         * [truePixelRadius description]\r\n         *\r\n         * @todo Description\r\n         * @return Outer radius (px)\r\n         * @readonly\r\n         */\r\n        get: function () {\r\n            return $utils.relativeToValue(percent(100), $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RadarCursor.prototype, \"innerRadius\", {\r\n        /**\r\n         * @return Inner radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"innerRadius\");\r\n        },\r\n        /**\r\n         * Inner radius of the cursor's circular line.\r\n         * Absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param value  Inner radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"innerRadius\", value, false, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(RadarCursor.prototype, \"pixelInnerRadius\", {\r\n        /**\r\n         * Inner radius of the circular line in pixels.\r\n         *\r\n         * @return Inner radius (px)\r\n         * @readonly\r\n         */\r\n        get: function () {\r\n            var innerRadius = this.innerRadius;\r\n            if (innerRadius instanceof Percent) {\r\n                innerRadius = percent(100 * innerRadius.value * this.chart.innerRadiusModifyer);\r\n            }\r\n            return $utils.relativeRadiusToValue(innerRadius, this.truePixelRadius) || 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    RadarCursor.prototype.fixPoint = function (point) {\r\n        // overriding xy method\r\n        return point;\r\n    };\r\n    return RadarCursor;\r\n}(XYCursor));\r\nexport { RadarCursor };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarCursor\"] = RadarCursor;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}