{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Directive, Optional, Inject, Input, Output, Injectable, SkipSelf, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { mixinInitialized, mixinDisabled, AnimationDurations, AnimationCurves, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { SPACE, ENTER } from '@angular/cdk/keycodes';\nimport { Subject, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate, keyframes, query, animateChild } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction getSortDuplicateSortableIdError(id) {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n/** @docs-private */\nfunction getSortHeaderNotContainedWithinSortError() {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n/** @docs-private */\nfunction getSortHeaderMissingIdError() {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n/** @docs-private */\nfunction getSortInvalidDirectionError(direction) {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-sort`. */\nconst MAT_SORT_DEFAULT_OPTIONS = new InjectionToken('MAT_SORT_DEFAULT_OPTIONS');\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nclass MatSortBase {}\nconst _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\nclass MatSort extends _MatSortMixinBase {\n  constructor(_defaultOptions) {\n    super();\n    this._defaultOptions = _defaultOptions;\n    /** Collection of all registered sortables that this directive manages. */\n    this.sortables = new Map();\n    /** Used to notify any child components listening to state changes. */\n    this._stateChanges = new Subject();\n    /**\n     * The direction to set when an MatSortable is initially sorted.\n     * May be overriden by the MatSortable's sort start.\n     */\n    this.start = 'asc';\n    this._direction = '';\n    /** Event emitted when the user changes either the active sort or sort direction. */\n    this.sortChange = new EventEmitter();\n  }\n  /** The sort direction of the currently active MatSortable. */\n  get direction() {\n    return this._direction;\n  }\n  set direction(direction) {\n    if (direction && direction !== 'asc' && direction !== 'desc' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  get disableClear() {\n    return this._disableClear;\n  }\n  set disableClear(v) {\n    this._disableClear = coerceBooleanProperty(v);\n  }\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!sortable.id) {\n        throw getSortHeaderMissingIdError();\n      }\n      if (this.sortables.has(sortable.id)) {\n        throw getSortDuplicateSortableIdError(sortable.id);\n      }\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable) {\n    this.sortables.delete(sortable.id);\n  }\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable) {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n    this.sortChange.emit({\n      active: this.active,\n      direction: this.direction\n    });\n  }\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable) {\n    var _a, _b, _c;\n    if (!sortable) {\n      return '';\n    }\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = (_b = (_a = sortable === null || sortable === void 0 ? void 0 : sortable.disableClear) !== null && _a !== void 0 ? _a : this.disableClear) !== null && _b !== void 0 ? _b : !!((_c = this._defaultOptions) === null || _c === void 0 ? void 0 : _c.disableClear);\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) {\n      nextDirectionIndex = 0;\n    }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n  ngOnInit() {\n    this._markInitialized();\n  }\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\nMatSort.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matSort]',\n    exportAs: 'matSort',\n    host: {\n      'class': 'mat-sort'\n    },\n    inputs: ['disabled: matSortDisabled']\n  }]\n}];\nMatSort.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_SORT_DEFAULT_OPTIONS]\n  }]\n}];\nMatSort.propDecorators = {\n  active: [{\n    type: Input,\n    args: ['matSortActive']\n  }],\n  start: [{\n    type: Input,\n    args: ['matSortStart']\n  }],\n  direction: [{\n    type: Input,\n    args: ['matSortDirection']\n  }],\n  disableClear: [{\n    type: Input,\n    args: ['matSortDisableClear']\n  }],\n  sortChange: [{\n    type: Output,\n    args: ['matSortChange']\n  }]\n};\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start, disableClear) {\n  let sortOrder = ['asc', 'desc'];\n  if (start == 'desc') {\n    sortOrder.reverse();\n  }\n  if (!disableClear) {\n    sortOrder.push('');\n  }\n  return sortOrder;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' + AnimationCurves.STANDARD_CURVE;\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nconst matSortAnimations = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [state('active-asc, asc', style({\n    transform: 'translateY(0px)'\n  })),\n  // 10px is the height of the sort indicator, minus the width of the pointers\n  state('active-desc, desc', style({\n    transform: 'translateY(10px)'\n  })), transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))]),\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [state('active-asc, asc', style({\n    transform: 'rotate(-45deg)'\n  })), state('active-desc, desc', style({\n    transform: 'rotate(45deg)'\n  })), transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))]),\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [state('active-asc, asc', style({\n    transform: 'rotate(45deg)'\n  })), state('active-desc, desc', style({\n    transform: 'rotate(-45deg)'\n  })), transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))]),\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [state('desc-to-active, asc-to-active, active', style({\n    opacity: 1\n  })), state('desc-to-hint, asc-to-hint, hint', style({\n    opacity: .54\n  })), state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void', style({\n    opacity: 0\n  })),\n  // Transition between all states except for immediate transitions\n  transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')), transition('* <=> *', animate(SORT_ANIMATION_TRANSITION))]),\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n  // Hidden Above => Hint Center\n  transition('* => desc-to-hint, * => desc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([style({\n    transform: 'translateY(-25%)'\n  }), style({\n    transform: 'translateY(0)'\n  })]))),\n  // Hint Center => Hidden Below\n  transition('* => hint-to-desc, * => active-to-desc', animate(SORT_ANIMATION_TRANSITION, keyframes([style({\n    transform: 'translateY(0)'\n  }), style({\n    transform: 'translateY(25%)'\n  })]))),\n  // Hidden Below => Hint Center\n  transition('* => asc-to-hint, * => asc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([style({\n    transform: 'translateY(25%)'\n  }), style({\n    transform: 'translateY(0)'\n  })]))),\n  // Hint Center => Hidden Above\n  transition('* => hint-to-asc, * => active-to-asc', animate(SORT_ANIMATION_TRANSITION, keyframes([style({\n    transform: 'translateY(0)'\n  }), style({\n    transform: 'translateY(-25%)'\n  })]))), state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', style({\n    transform: 'translateY(0)'\n  })), state('hint-to-desc, active-to-desc, desc', style({\n    transform: 'translateY(-25%)'\n  })), state('hint-to-asc, active-to-asc, asc', style({\n    transform: 'translateY(25%)'\n  }))]),\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [transition('* <=> *', [query('@*', animateChild(), {\n    optional: true\n  })])])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 13.0.0\n */\nclass MatSortHeaderIntl {\n  constructor() {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    this.changes = new Subject();\n  }\n}\nMatSortHeaderIntl.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function MatSortHeaderIntl_Factory() {\n    return new MatSortHeaderIntl();\n  },\n  token: MatSortHeaderIntl,\n  providedIn: \"root\"\n});\nMatSortHeaderIntl.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: 'root'\n  }]\n}];\n/** @docs-private */\nfunction MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n/** @docs-private */\nconst MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nclass MatSortHeaderBase {}\nconst _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nclass MatSortHeader extends _MatSortHeaderMixinBase {\n  constructor(\n  /**\n   * @deprecated `_intl` parameter isn't being used anymore and it'll be removed.\n   * @breaking-change 13.0.0\n   */\n  _intl, _changeDetectorRef,\n  // `MatSort` is not optionally injected, but just asserted manually w/ better error.\n  // tslint:disable-next-line: lightweight-tokens\n  _sort, _columnDef, _focusMonitor, _elementRef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n    this._intl = _intl;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._sort = _sort;\n    this._columnDef = _columnDef;\n    this._focusMonitor = _focusMonitor;\n    this._elementRef = _elementRef;\n    /**\n     * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n     * provide an affordance that the header is sortable by showing on focus and hover.\n     */\n    this._showIndicatorHint = false;\n    /**\n     * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n     * position through the animation. If animations are currently disabled, the fromState is removed\n     * so that there is no animation displayed.\n     */\n    this._viewState = {};\n    /** The direction the arrow should be facing according to the current state. */\n    this._arrowDirection = '';\n    /**\n     * Whether the view state animation should show the transition between the `from` and `to` states.\n     */\n    this._disableViewStateAnimation = false;\n    /** Sets the position of the arrow that displays when sorted. */\n    this.arrowPosition = 'after';\n    if (!_sort && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n    this._handleStateChanges();\n  }\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  get disableClear() {\n    return this._disableClear;\n  }\n  set disableClear(v) {\n    this._disableClear = coerceBooleanProperty(v);\n  }\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState({\n      toState: this._isSorted() ? 'active' : this._arrowDirection\n    });\n    this._sort.register(this);\n  }\n  ngAfterViewInit() {\n    // We use the focus monitor because we also want to style\n    // things differently based on the focus origin.\n    this._focusMonitor.monitor(this._elementRef, true).subscribe(origin => {\n      const newState = !!origin;\n      if (newState !== this._showIndicatorHint) {\n        this._setIndicatorHintVisible(newState);\n        this._changeDetectorRef.markForCheck();\n      }\n    });\n  }\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) {\n      return;\n    }\n    this._showIndicatorHint = visible;\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({\n          fromState: this._arrowDirection,\n          toState: 'hint'\n        });\n      } else {\n        this._setAnimationTransitionState({\n          fromState: 'hint',\n          toState: this._arrowDirection\n        });\n      }\n    }\n  }\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState) {\n    this._viewState = viewState || {};\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {\n        toState: viewState.toState\n      };\n    }\n  }\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _toggleOnInteraction() {\n    this._sort.sort(this);\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n  }\n  _handleClick() {\n    if (!this._isDisabled()) {\n      this._sort.sort(this);\n    }\n  }\n  _handleKeydown(event) {\n    if (!this._isDisabled() && (event.keyCode === SPACE || event.keyCode === ENTER)) {\n      event.preventDefault();\n      this._toggleOnInteraction();\n    }\n  }\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id && (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ? this._sort.direction : this.start || this._sort.start;\n  }\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) {\n      return 'none';\n    }\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n  /** Whether the arrow inside the sort header should be rendered. */\n  _renderArrow() {\n    return !this._isDisabled() || this._isSorted();\n  }\n  /** Handles changes in the sorting state. */\n  _handleStateChanges() {\n    this._rerenderSubscription = merge(this._sort.sortChange, this._sort._stateChanges, this._intl.changes).subscribe(() => {\n      if (this._isSorted()) {\n        this._updateArrowDirection();\n        // Do not show the animation if the header was already shown in the right position.\n        if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n          this._disableViewStateAnimation = true;\n        }\n        this._setAnimationTransitionState({\n          fromState: this._arrowDirection,\n          toState: 'active'\n        });\n        this._showIndicatorHint = false;\n      }\n      // If this header was recently active and now no longer sorted, animate away the arrow.\n      if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n        this._disableViewStateAnimation = false;\n        this._setAnimationTransitionState({\n          fromState: 'active',\n          toState: this._arrowDirection\n        });\n      }\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\nMatSortHeader.decorators = [{\n  type: Component,\n  args: [{\n    selector: '[mat-sort-header]',\n    exportAs: 'matSortHeader',\n    template: \"<!--\\n  We set the `tabindex` on an element inside the table header, rather than the header itself,\\n  because of a bug in NVDA where having a `tabindex` on a `th` breaks keyboard navigation in the\\n  table (see https://github.com/nvaccess/nvda/issues/7718). This allows for the header to both\\n  be focusable, and have screen readers read out its `aria-sort` state. We prefer this approach\\n  over having a button with an `aria-label` inside the header, because the button's `aria-label`\\n  will be read out as the user is navigating the table's cell (see #13012).\\n\\n  The approach is based off of: https://dequeuniversity.com/library/aria/tables/sf-sortable-grid\\n-->\\n<div class=\\\"mat-sort-header-container mat-focus-indicator\\\"\\n     [class.mat-sort-header-sorted]=\\\"_isSorted()\\\"\\n     [class.mat-sort-header-position-before]=\\\"arrowPosition == 'before'\\\"\\n     [attr.tabindex]=\\\"_isDisabled() ? null : 0\\\"\\n     role=\\\"button\\\">\\n\\n  <!--\\n    TODO(crisbeto): this div isn't strictly necessary, but we have to keep it due to a large\\n    number of screenshot diff failures. It should be removed eventually. Note that the difference\\n    isn't visible with a shorter header, but once it breaks up into multiple lines, this element\\n    causes it to be center-aligned, whereas removing it will keep the text to the left.\\n  -->\\n  <div class=\\\"mat-sort-header-content\\\">\\n    <ng-content></ng-content>\\n  </div>\\n\\n  <!-- Disable animations while a current animation is running -->\\n  <div class=\\\"mat-sort-header-arrow\\\"\\n       *ngIf=\\\"_renderArrow()\\\"\\n       [@arrowOpacity]=\\\"_getArrowViewState()\\\"\\n       [@arrowPosition]=\\\"_getArrowViewState()\\\"\\n       [@allowChildren]=\\\"_getArrowDirectionState()\\\"\\n       (@arrowPosition.start)=\\\"_disableViewStateAnimation = true\\\"\\n       (@arrowPosition.done)=\\\"_disableViewStateAnimation = false\\\">\\n    <div class=\\\"mat-sort-header-stem\\\"></div>\\n    <div class=\\\"mat-sort-header-indicator\\\" [@indicator]=\\\"_getArrowDirectionState()\\\">\\n      <div class=\\\"mat-sort-header-pointer-left\\\" [@leftPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-right\\\" [@rightPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-middle\\\"></div>\\n    </div>\\n  </div>\\n</div>\\n\",\n    host: {\n      'class': 'mat-sort-header',\n      '(click)': '_handleClick()',\n      '(keydown)': '_handleKeydown($event)',\n      '(mouseenter)': '_setIndicatorHintVisible(true)',\n      '(mouseleave)': '_setIndicatorHintVisible(false)',\n      '[attr.aria-sort]': '_getAriaSortAttribute()',\n      '[class.mat-sort-header-disabled]': '_isDisabled()'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    animations: [matSortAnimations.indicator, matSortAnimations.leftPointer, matSortAnimations.rightPointer, matSortAnimations.arrowOpacity, matSortAnimations.arrowPosition, matSortAnimations.allowChildren],\n    styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center;letter-spacing:normal;outline:0}[mat-sort-header].cdk-keyboard-focused .mat-sort-header-container,[mat-sort-header].cdk-program-focused .mat-sort-header-container{border-bottom:solid 1px currentColor}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-content{text-align:center;display:flex;align-items:center}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.cdk-high-contrast-active .mat-sort-header-stem{width:0;border-left:solid 2px}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.cdk-high-contrast-active .mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.cdk-high-contrast-active .mat-sort-header-pointer-left,.cdk-high-contrast-active .mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\\n\"]\n  }]\n}];\nMatSortHeader.ctorParameters = () => [{\n  type: MatSortHeaderIntl\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: MatSort,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: ['MAT_SORT_HEADER_COLUMN_DEF']\n  }, {\n    type: Optional\n  }]\n}, {\n  type: FocusMonitor\n}, {\n  type: ElementRef\n}];\nMatSortHeader.propDecorators = {\n  id: [{\n    type: Input,\n    args: ['mat-sort-header']\n  }],\n  arrowPosition: [{\n    type: Input\n  }],\n  start: [{\n    type: Input\n  }],\n  disableClear: [{\n    type: Input\n  }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSortModule {}\nMatSortModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule, MatCommonModule],\n    exports: [MatSort, MatSortHeader],\n    declarations: [MatSort, MatSortHeader],\n    providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SORT_DEFAULT_OPTIONS, MAT_SORT_HEADER_INTL_PROVIDER, MAT_SORT_HEADER_INTL_PROVIDER_FACTORY, MatSort, MatSortHeader, MatSortHeaderIntl, MatSortModule, matSortAnimations };","map":{"version":3,"names":["i0","InjectionToken","EventEmitter","Directive","Optional","Inject","Input","Output","Injectable","SkipSelf","Component","ViewEncapsulation","ChangeDetectionStrategy","ChangeDetectorRef","ElementRef","NgModule","coerceBooleanProperty","mixinInitialized","mixinDisabled","AnimationDurations","AnimationCurves","MatCommonModule","FocusMonitor","SPACE","ENTER","Subject","merge","trigger","state","style","transition","animate","keyframes","query","animateChild","CommonModule","getSortDuplicateSortableIdError","id","Error","getSortHeaderNotContainedWithinSortError","getSortHeaderMissingIdError","getSortInvalidDirectionError","direction","MAT_SORT_DEFAULT_OPTIONS","MatSortBase","_MatSortMixinBase","MatSort","constructor","_defaultOptions","sortables","Map","_stateChanges","start","_direction","sortChange","ngDevMode","disableClear","_disableClear","v","register","sortable","has","set","deregister","delete","sort","active","getNextSortDirection","emit","_a","_b","_c","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","indexOf","length","ngOnInit","_markInitialized","ngOnChanges","next","ngOnDestroy","complete","decorators","type","args","selector","exportAs","host","inputs","ctorParameters","undefined","propDecorators","sortOrder","reverse","push","SORT_ANIMATION_TRANSITION","ENTERING","STANDARD_CURVE","matSortAnimations","indicator","transform","leftPointer","rightPointer","arrowOpacity","opacity","arrowPosition","allowChildren","optional","MatSortHeaderIntl","changes","ɵprov","ɵɵdefineInjectable","factory","MatSortHeaderIntl_Factory","token","providedIn","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","parentIntl","MAT_SORT_HEADER_INTL_PROVIDER","provide","deps","useFactory","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_changeDetectorRef","_sort","_columnDef","_focusMonitor","_elementRef","_showIndicatorHint","_viewState","_arrowDirection","_disableViewStateAnimation","_handleStateChanges","name","_updateArrowDirection","_setAnimationTransitionState","toState","_isSorted","ngAfterViewInit","monitor","subscribe","origin","newState","_setIndicatorHintVisible","markForCheck","stopMonitoring","_rerenderSubscription","unsubscribe","visible","_isDisabled","fromState","viewState","_toggleOnInteraction","_handleClick","_handleKeydown","event","keyCode","preventDefault","_getArrowDirectionState","_getArrowViewState","disabled","_getAriaSortAttribute","_renderArrow","template","encapsulation","None","changeDetection","OnPush","animations","styles","MatSortModule","imports","exports","declarations","providers"],"sources":["D:/alodelivery test/node_modules/@angular/material/fesm2015/sort.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Directive, Optional, Inject, Input, Output, Injectable, SkipSelf, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { mixinInitialized, mixinDisabled, AnimationDurations, AnimationCurves, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { SPACE, ENTER } from '@angular/cdk/keycodes';\nimport { Subject, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate, keyframes, query, animateChild } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction getSortDuplicateSortableIdError(id) {\n    return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n/** @docs-private */\nfunction getSortHeaderNotContainedWithinSortError() {\n    return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n/** @docs-private */\nfunction getSortHeaderMissingIdError() {\n    return Error(`MatSortHeader must be provided with a unique id.`);\n}\n/** @docs-private */\nfunction getSortInvalidDirectionError(direction) {\n    return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-sort`. */\nconst MAT_SORT_DEFAULT_OPTIONS = new InjectionToken('MAT_SORT_DEFAULT_OPTIONS');\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nclass MatSortBase {\n}\nconst _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\nclass MatSort extends _MatSortMixinBase {\n    constructor(_defaultOptions) {\n        super();\n        this._defaultOptions = _defaultOptions;\n        /** Collection of all registered sortables that this directive manages. */\n        this.sortables = new Map();\n        /** Used to notify any child components listening to state changes. */\n        this._stateChanges = new Subject();\n        /**\n         * The direction to set when an MatSortable is initially sorted.\n         * May be overriden by the MatSortable's sort start.\n         */\n        this.start = 'asc';\n        this._direction = '';\n        /** Event emitted when the user changes either the active sort or sort direction. */\n        this.sortChange = new EventEmitter();\n    }\n    /** The sort direction of the currently active MatSortable. */\n    get direction() { return this._direction; }\n    set direction(direction) {\n        if (direction && direction !== 'asc' && direction !== 'desc' &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getSortInvalidDirectionError(direction);\n        }\n        this._direction = direction;\n    }\n    /**\n     * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n     * May be overriden by the MatSortable's disable clear input.\n     */\n    get disableClear() { return this._disableClear; }\n    set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n    /**\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n     * collection of MatSortables.\n     */\n    register(sortable) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!sortable.id) {\n                throw getSortHeaderMissingIdError();\n            }\n            if (this.sortables.has(sortable.id)) {\n                throw getSortDuplicateSortableIdError(sortable.id);\n            }\n        }\n        this.sortables.set(sortable.id, sortable);\n    }\n    /**\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n     * collection of contained MatSortables.\n     */\n    deregister(sortable) {\n        this.sortables.delete(sortable.id);\n    }\n    /** Sets the active sort id and determines the new sort direction. */\n    sort(sortable) {\n        if (this.active != sortable.id) {\n            this.active = sortable.id;\n            this.direction = sortable.start ? sortable.start : this.start;\n        }\n        else {\n            this.direction = this.getNextSortDirection(sortable);\n        }\n        this.sortChange.emit({ active: this.active, direction: this.direction });\n    }\n    /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n    getNextSortDirection(sortable) {\n        var _a, _b, _c;\n        if (!sortable) {\n            return '';\n        }\n        // Get the sort direction cycle with the potential sortable overrides.\n        const disableClear = (_b = (_a = sortable === null || sortable === void 0 ? void 0 : sortable.disableClear) !== null && _a !== void 0 ? _a : this.disableClear) !== null && _b !== void 0 ? _b : !!((_c = this._defaultOptions) === null || _c === void 0 ? void 0 : _c.disableClear);\n        let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n        // Get and return the next direction in the cycle\n        let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n        if (nextDirectionIndex >= sortDirectionCycle.length) {\n            nextDirectionIndex = 0;\n        }\n        return sortDirectionCycle[nextDirectionIndex];\n    }\n    ngOnInit() {\n        this._markInitialized();\n    }\n    ngOnChanges() {\n        this._stateChanges.next();\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nMatSort.decorators = [\n    { type: Directive, args: [{\n                selector: '[matSort]',\n                exportAs: 'matSort',\n                host: { 'class': 'mat-sort' },\n                inputs: ['disabled: matSortDisabled']\n            },] }\n];\nMatSort.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_SORT_DEFAULT_OPTIONS,] }] }\n];\nMatSort.propDecorators = {\n    active: [{ type: Input, args: ['matSortActive',] }],\n    start: [{ type: Input, args: ['matSortStart',] }],\n    direction: [{ type: Input, args: ['matSortDirection',] }],\n    disableClear: [{ type: Input, args: ['matSortDisableClear',] }],\n    sortChange: [{ type: Output, args: ['matSortChange',] }]\n};\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start, disableClear) {\n    let sortOrder = ['asc', 'desc'];\n    if (start == 'desc') {\n        sortOrder.reverse();\n    }\n    if (!disableClear) {\n        sortOrder.push('');\n    }\n    return sortOrder;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n    AnimationCurves.STANDARD_CURVE;\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nconst matSortAnimations = {\n    /** Animation that moves the sort indicator. */\n    indicator: trigger('indicator', [\n        state('active-asc, asc', style({ transform: 'translateY(0px)' })),\n        // 10px is the height of the sort indicator, minus the width of the pointers\n        state('active-desc, desc', style({ transform: 'translateY(10px)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n    leftPointer: trigger('leftPointer', [\n        state('active-asc, asc', style({ transform: 'rotate(-45deg)' })),\n        state('active-desc, desc', style({ transform: 'rotate(45deg)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n    rightPointer: trigger('rightPointer', [\n        state('active-asc, asc', style({ transform: 'rotate(45deg)' })),\n        state('active-desc, desc', style({ transform: 'rotate(-45deg)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    /** Animation that controls the arrow opacity. */\n    arrowOpacity: trigger('arrowOpacity', [\n        state('desc-to-active, asc-to-active, active', style({ opacity: 1 })),\n        state('desc-to-hint, asc-to-hint, hint', style({ opacity: .54 })),\n        state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void', style({ opacity: 0 })),\n        // Transition between all states except for immediate transitions\n        transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n        transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /**\n     * Animation for the translation of the arrow as a whole. States are separated into two\n     * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n     * peek, and active. The other states define a specific animation (source-to-destination)\n     * and are determined as a function of their prev user-perceived state and what the next state\n     * should be.\n     */\n    arrowPosition: trigger('arrowPosition', [\n        // Hidden Above => Hint Center\n        transition('* => desc-to-hint, * => desc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(-25%)' }),\n            style({ transform: 'translateY(0)' })\n        ]))),\n        // Hint Center => Hidden Below\n        transition('* => hint-to-desc, * => active-to-desc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(0)' }),\n            style({ transform: 'translateY(25%)' })\n        ]))),\n        // Hidden Below => Hint Center\n        transition('* => asc-to-hint, * => asc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(25%)' }),\n            style({ transform: 'translateY(0)' })\n        ]))),\n        // Hint Center => Hidden Above\n        transition('* => hint-to-asc, * => active-to-asc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(0)' }),\n            style({ transform: 'translateY(-25%)' })\n        ]))),\n        state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', style({ transform: 'translateY(0)' })),\n        state('hint-to-desc, active-to-desc, desc', style({ transform: 'translateY(-25%)' })),\n        state('hint-to-asc, active-to-asc, asc', style({ transform: 'translateY(25%)' })),\n    ]),\n    /** Necessary trigger that calls animate on children animations. */\n    allowChildren: trigger('allowChildren', [\n        transition('* <=> *', [\n            query('@*', animateChild(), { optional: true })\n        ])\n    ]),\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 13.0.0\n */\nclass MatSortHeaderIntl {\n    constructor() {\n        /**\n         * Stream that emits whenever the labels here are changed. Use this to notify\n         * components if the labels have changed after initialization.\n         */\n        this.changes = new Subject();\n    }\n}\nMatSortHeaderIntl.ɵprov = i0.ɵɵdefineInjectable({ factory: function MatSortHeaderIntl_Factory() { return new MatSortHeaderIntl(); }, token: MatSortHeaderIntl, providedIn: \"root\" });\nMatSortHeaderIntl.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n/** @docs-private */\nfunction MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatSortHeaderIntl();\n}\n/** @docs-private */\nconst MAT_SORT_HEADER_INTL_PROVIDER = {\n    // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n    provide: MatSortHeaderIntl,\n    deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n    useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nclass MatSortHeaderBase {\n}\nconst _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nclass MatSortHeader extends _MatSortHeaderMixinBase {\n    constructor(\n    /**\n     * @deprecated `_intl` parameter isn't being used anymore and it'll be removed.\n     * @breaking-change 13.0.0\n     */\n    _intl, _changeDetectorRef, \n    // `MatSort` is not optionally injected, but just asserted manually w/ better error.\n    // tslint:disable-next-line: lightweight-tokens\n    _sort, _columnDef, _focusMonitor, _elementRef) {\n        // Note that we use a string token for the `_columnDef`, because the value is provided both by\n        // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n        // and we want to avoid having the sort header depending on the CDK table because\n        // of this single reference.\n        super();\n        this._intl = _intl;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._sort = _sort;\n        this._columnDef = _columnDef;\n        this._focusMonitor = _focusMonitor;\n        this._elementRef = _elementRef;\n        /**\n         * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n         * provide an affordance that the header is sortable by showing on focus and hover.\n         */\n        this._showIndicatorHint = false;\n        /**\n         * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n         * position through the animation. If animations are currently disabled, the fromState is removed\n         * so that there is no animation displayed.\n         */\n        this._viewState = {};\n        /** The direction the arrow should be facing according to the current state. */\n        this._arrowDirection = '';\n        /**\n         * Whether the view state animation should show the transition between the `from` and `to` states.\n         */\n        this._disableViewStateAnimation = false;\n        /** Sets the position of the arrow that displays when sorted. */\n        this.arrowPosition = 'after';\n        if (!_sort && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getSortHeaderNotContainedWithinSortError();\n        }\n        this._handleStateChanges();\n    }\n    /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n    get disableClear() { return this._disableClear; }\n    set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n    ngOnInit() {\n        if (!this.id && this._columnDef) {\n            this.id = this._columnDef.name;\n        }\n        // Initialize the direction of the arrow and set the view state to be immediately that state.\n        this._updateArrowDirection();\n        this._setAnimationTransitionState({ toState: this._isSorted() ? 'active' : this._arrowDirection });\n        this._sort.register(this);\n    }\n    ngAfterViewInit() {\n        // We use the focus monitor because we also want to style\n        // things differently based on the focus origin.\n        this._focusMonitor.monitor(this._elementRef, true).subscribe(origin => {\n            const newState = !!origin;\n            if (newState !== this._showIndicatorHint) {\n                this._setIndicatorHintVisible(newState);\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._sort.deregister(this);\n        this._rerenderSubscription.unsubscribe();\n    }\n    /**\n     * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n     * user showing what the active sort will become. If set to false, the arrow will fade away.\n     */\n    _setIndicatorHintVisible(visible) {\n        // No-op if the sort header is disabled - should not make the hint visible.\n        if (this._isDisabled() && visible) {\n            return;\n        }\n        this._showIndicatorHint = visible;\n        if (!this._isSorted()) {\n            this._updateArrowDirection();\n            if (this._showIndicatorHint) {\n                this._setAnimationTransitionState({ fromState: this._arrowDirection, toState: 'hint' });\n            }\n            else {\n                this._setAnimationTransitionState({ fromState: 'hint', toState: this._arrowDirection });\n            }\n        }\n    }\n    /**\n     * Sets the animation transition view state for the arrow's position and opacity. If the\n     * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n     * no animation appears.\n     */\n    _setAnimationTransitionState(viewState) {\n        this._viewState = viewState || {};\n        // If the animation for arrow position state (opacity/translation) should be disabled,\n        // remove the fromState so that it jumps right to the toState.\n        if (this._disableViewStateAnimation) {\n            this._viewState = { toState: viewState.toState };\n        }\n    }\n    /** Triggers the sort on this sort header and removes the indicator hint. */\n    _toggleOnInteraction() {\n        this._sort.sort(this);\n        // Do not show the animation if the header was already shown in the right position.\n        if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = true;\n        }\n    }\n    _handleClick() {\n        if (!this._isDisabled()) {\n            this._sort.sort(this);\n        }\n    }\n    _handleKeydown(event) {\n        if (!this._isDisabled() && (event.keyCode === SPACE || event.keyCode === ENTER)) {\n            event.preventDefault();\n            this._toggleOnInteraction();\n        }\n    }\n    /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n    _isSorted() {\n        return this._sort.active == this.id &&\n            (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n    }\n    /** Returns the animation state for the arrow direction (indicator and pointers). */\n    _getArrowDirectionState() {\n        return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n    }\n    /** Returns the arrow position state (opacity, translation). */\n    _getArrowViewState() {\n        const fromState = this._viewState.fromState;\n        return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n    }\n    /**\n     * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n     * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n     * active sorted direction. The reason this is updated through a function is because the direction\n     * should only be changed at specific times - when deactivated but the hint is displayed and when\n     * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n     * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n     * preserving its direction, even though the next sort direction is actually different and should\n     * only be changed once the arrow displays again (hint or activation).\n     */\n    _updateArrowDirection() {\n        this._arrowDirection = this._isSorted() ?\n            this._sort.direction :\n            (this.start || this._sort.start);\n    }\n    _isDisabled() {\n        return this._sort.disabled || this.disabled;\n    }\n    /**\n     * Gets the aria-sort attribute that should be applied to this sort header. If this header\n     * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n     * says that the aria-sort property should only be present on one header at a time, so removing\n     * ensures this is true.\n     */\n    _getAriaSortAttribute() {\n        if (!this._isSorted()) {\n            return 'none';\n        }\n        return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n    }\n    /** Whether the arrow inside the sort header should be rendered. */\n    _renderArrow() {\n        return !this._isDisabled() || this._isSorted();\n    }\n    /** Handles changes in the sorting state. */\n    _handleStateChanges() {\n        this._rerenderSubscription =\n            merge(this._sort.sortChange, this._sort._stateChanges, this._intl.changes).subscribe(() => {\n                if (this._isSorted()) {\n                    this._updateArrowDirection();\n                    // Do not show the animation if the header was already shown in the right position.\n                    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n                        this._disableViewStateAnimation = true;\n                    }\n                    this._setAnimationTransitionState({ fromState: this._arrowDirection, toState: 'active' });\n                    this._showIndicatorHint = false;\n                }\n                // If this header was recently active and now no longer sorted, animate away the arrow.\n                if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n                    this._disableViewStateAnimation = false;\n                    this._setAnimationTransitionState({ fromState: 'active', toState: this._arrowDirection });\n                }\n                this._changeDetectorRef.markForCheck();\n            });\n    }\n}\nMatSortHeader.decorators = [\n    { type: Component, args: [{\n                selector: '[mat-sort-header]',\n                exportAs: 'matSortHeader',\n                template: \"<!--\\n  We set the `tabindex` on an element inside the table header, rather than the header itself,\\n  because of a bug in NVDA where having a `tabindex` on a `th` breaks keyboard navigation in the\\n  table (see https://github.com/nvaccess/nvda/issues/7718). This allows for the header to both\\n  be focusable, and have screen readers read out its `aria-sort` state. We prefer this approach\\n  over having a button with an `aria-label` inside the header, because the button's `aria-label`\\n  will be read out as the user is navigating the table's cell (see #13012).\\n\\n  The approach is based off of: https://dequeuniversity.com/library/aria/tables/sf-sortable-grid\\n-->\\n<div class=\\\"mat-sort-header-container mat-focus-indicator\\\"\\n     [class.mat-sort-header-sorted]=\\\"_isSorted()\\\"\\n     [class.mat-sort-header-position-before]=\\\"arrowPosition == 'before'\\\"\\n     [attr.tabindex]=\\\"_isDisabled() ? null : 0\\\"\\n     role=\\\"button\\\">\\n\\n  <!--\\n    TODO(crisbeto): this div isn't strictly necessary, but we have to keep it due to a large\\n    number of screenshot diff failures. It should be removed eventually. Note that the difference\\n    isn't visible with a shorter header, but once it breaks up into multiple lines, this element\\n    causes it to be center-aligned, whereas removing it will keep the text to the left.\\n  -->\\n  <div class=\\\"mat-sort-header-content\\\">\\n    <ng-content></ng-content>\\n  </div>\\n\\n  <!-- Disable animations while a current animation is running -->\\n  <div class=\\\"mat-sort-header-arrow\\\"\\n       *ngIf=\\\"_renderArrow()\\\"\\n       [@arrowOpacity]=\\\"_getArrowViewState()\\\"\\n       [@arrowPosition]=\\\"_getArrowViewState()\\\"\\n       [@allowChildren]=\\\"_getArrowDirectionState()\\\"\\n       (@arrowPosition.start)=\\\"_disableViewStateAnimation = true\\\"\\n       (@arrowPosition.done)=\\\"_disableViewStateAnimation = false\\\">\\n    <div class=\\\"mat-sort-header-stem\\\"></div>\\n    <div class=\\\"mat-sort-header-indicator\\\" [@indicator]=\\\"_getArrowDirectionState()\\\">\\n      <div class=\\\"mat-sort-header-pointer-left\\\" [@leftPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-right\\\" [@rightPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-middle\\\"></div>\\n    </div>\\n  </div>\\n</div>\\n\",\n                host: {\n                    'class': 'mat-sort-header',\n                    '(click)': '_handleClick()',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(mouseenter)': '_setIndicatorHintVisible(true)',\n                    '(mouseleave)': '_setIndicatorHintVisible(false)',\n                    '[attr.aria-sort]': '_getAriaSortAttribute()',\n                    '[class.mat-sort-header-disabled]': '_isDisabled()',\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disabled'],\n                animations: [\n                    matSortAnimations.indicator,\n                    matSortAnimations.leftPointer,\n                    matSortAnimations.rightPointer,\n                    matSortAnimations.arrowOpacity,\n                    matSortAnimations.arrowPosition,\n                    matSortAnimations.allowChildren,\n                ],\n                styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center;letter-spacing:normal;outline:0}[mat-sort-header].cdk-keyboard-focused .mat-sort-header-container,[mat-sort-header].cdk-program-focused .mat-sort-header-container{border-bottom:solid 1px currentColor}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-content{text-align:center;display:flex;align-items:center}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.cdk-high-contrast-active .mat-sort-header-stem{width:0;border-left:solid 2px}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.cdk-high-contrast-active .mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.cdk-high-contrast-active .mat-sort-header-pointer-left,.cdk-high-contrast-active .mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\\n\"]\n            },] }\n];\nMatSortHeader.ctorParameters = () => [\n    { type: MatSortHeaderIntl },\n    { type: ChangeDetectorRef },\n    { type: MatSort, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Inject, args: ['MAT_SORT_HEADER_COLUMN_DEF',] }, { type: Optional }] },\n    { type: FocusMonitor },\n    { type: ElementRef }\n];\nMatSortHeader.propDecorators = {\n    id: [{ type: Input, args: ['mat-sort-header',] }],\n    arrowPosition: [{ type: Input }],\n    start: [{ type: Input }],\n    disableClear: [{ type: Input }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSortModule {\n}\nMatSortModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, MatCommonModule],\n                exports: [MatSort, MatSortHeader],\n                declarations: [MatSort, MatSortHeader],\n                providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SORT_DEFAULT_OPTIONS, MAT_SORT_HEADER_INTL_PROVIDER, MAT_SORT_HEADER_INTL_PROVIDER_FACTORY, MatSort, MatSortHeader, MatSortHeaderIntl, MatSortModule, matSortAnimations };\n"],"mappings":"AAAA,OAAO,KAAKA,EAAE,MAAM,eAAe;AACnC,SAASC,cAAc,EAAEC,YAAY,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,iBAAiB,EAAEC,uBAAuB,EAAEC,iBAAiB,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,eAAe;AAC9N,SAASC,qBAAqB,QAAQ,uBAAuB;AAC7D,SAASC,gBAAgB,EAAEC,aAAa,EAAEC,kBAAkB,EAAEC,eAAe,EAAEC,eAAe,QAAQ,wBAAwB;AAC9H,SAASC,YAAY,QAAQ,mBAAmB;AAChD,SAASC,KAAK,EAAEC,KAAK,QAAQ,uBAAuB;AACpD,SAASC,OAAO,EAAEC,KAAK,QAAQ,MAAM;AACrC,SAASC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,UAAU,EAAEC,OAAO,EAAEC,SAAS,EAAEC,KAAK,EAAEC,YAAY,QAAQ,qBAAqB;AAChH,SAASC,YAAY,QAAQ,iBAAiB;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,+BAA+BA,CAACC,EAAE,EAAE;EACzC,OAAOC,KAAK,CAAE,kDAAiDD,EAAG,IAAG,CAAC;AAC1E;AACA;AACA,SAASE,wCAAwCA,CAAA,EAAG;EAChD,OAAOD,KAAK,CAAE,kFAAiF,CAAC;AACpG;AACA;AACA,SAASE,2BAA2BA,CAAA,EAAG;EACnC,OAAOF,KAAK,CAAE,kDAAiD,CAAC;AACpE;AACA;AACA,SAASG,4BAA4BA,CAACC,SAAS,EAAE;EAC7C,OAAOJ,KAAK,CAAE,GAAEI,SAAU,mDAAkD,CAAC;AACjF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,wBAAwB,GAAG,IAAI1C,cAAc,CAAC,0BAA0B,CAAC;AAC/E;AACA;AACA,MAAM2C,WAAW,CAAC;AAElB,MAAMC,iBAAiB,GAAG5B,gBAAgB,CAACC,aAAa,CAAC0B,WAAW,CAAC,CAAC;AACtE;AACA,MAAME,OAAO,SAASD,iBAAiB,CAAC;EACpCE,WAAWA,CAACC,eAAe,EAAE;IACzB,KAAK,CAAC,CAAC;IACP,IAAI,CAACA,eAAe,GAAGA,eAAe;IACtC;IACA,IAAI,CAACC,SAAS,GAAG,IAAIC,GAAG,CAAC,CAAC;IAC1B;IACA,IAAI,CAACC,aAAa,GAAG,IAAI1B,OAAO,CAAC,CAAC;IAClC;AACR;AACA;AACA;IACQ,IAAI,CAAC2B,KAAK,GAAG,KAAK;IAClB,IAAI,CAACC,UAAU,GAAG,EAAE;IACpB;IACA,IAAI,CAACC,UAAU,GAAG,IAAIpD,YAAY,CAAC,CAAC;EACxC;EACA;EACA,IAAIwC,SAASA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACW,UAAU;EAAE;EAC1C,IAAIX,SAASA,CAACA,SAAS,EAAE;IACrB,IAAIA,SAAS,IAAIA,SAAS,KAAK,KAAK,IAAIA,SAAS,KAAK,MAAM,KACvD,OAAOa,SAAS,KAAK,WAAW,IAAIA,SAAS,CAAC,EAAE;MACjD,MAAMd,4BAA4B,CAACC,SAAS,CAAC;IACjD;IACA,IAAI,CAACW,UAAU,GAAGX,SAAS;EAC/B;EACA;AACJ;AACA;AACA;EACI,IAAIc,YAAYA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACC,aAAa;EAAE;EAChD,IAAID,YAAYA,CAACE,CAAC,EAAE;IAAE,IAAI,CAACD,aAAa,GAAGzC,qBAAqB,CAAC0C,CAAC,CAAC;EAAE;EACrE;AACJ;AACA;AACA;EACIC,QAAQA,CAACC,QAAQ,EAAE;IACf,IAAI,OAAOL,SAAS,KAAK,WAAW,IAAIA,SAAS,EAAE;MAC/C,IAAI,CAACK,QAAQ,CAACvB,EAAE,EAAE;QACd,MAAMG,2BAA2B,CAAC,CAAC;MACvC;MACA,IAAI,IAAI,CAACS,SAAS,CAACY,GAAG,CAACD,QAAQ,CAACvB,EAAE,CAAC,EAAE;QACjC,MAAMD,+BAA+B,CAACwB,QAAQ,CAACvB,EAAE,CAAC;MACtD;IACJ;IACA,IAAI,CAACY,SAAS,CAACa,GAAG,CAACF,QAAQ,CAACvB,EAAE,EAAEuB,QAAQ,CAAC;EAC7C;EACA;AACJ;AACA;AACA;EACIG,UAAUA,CAACH,QAAQ,EAAE;IACjB,IAAI,CAACX,SAAS,CAACe,MAAM,CAACJ,QAAQ,CAACvB,EAAE,CAAC;EACtC;EACA;EACA4B,IAAIA,CAACL,QAAQ,EAAE;IACX,IAAI,IAAI,CAACM,MAAM,IAAIN,QAAQ,CAACvB,EAAE,EAAE;MAC5B,IAAI,CAAC6B,MAAM,GAAGN,QAAQ,CAACvB,EAAE;MACzB,IAAI,CAACK,SAAS,GAAGkB,QAAQ,CAACR,KAAK,GAAGQ,QAAQ,CAACR,KAAK,GAAG,IAAI,CAACA,KAAK;IACjE,CAAC,MACI;MACD,IAAI,CAACV,SAAS,GAAG,IAAI,CAACyB,oBAAoB,CAACP,QAAQ,CAAC;IACxD;IACA,IAAI,CAACN,UAAU,CAACc,IAAI,CAAC;MAAEF,MAAM,EAAE,IAAI,CAACA,MAAM;MAAExB,SAAS,EAAE,IAAI,CAACA;IAAU,CAAC,CAAC;EAC5E;EACA;EACAyB,oBAAoBA,CAACP,QAAQ,EAAE;IAC3B,IAAIS,EAAE,EAAEC,EAAE,EAAEC,EAAE;IACd,IAAI,CAACX,QAAQ,EAAE;MACX,OAAO,EAAE;IACb;IACA;IACA,MAAMJ,YAAY,GAAG,CAACc,EAAE,GAAG,CAACD,EAAE,GAAGT,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACJ,YAAY,MAAM,IAAI,IAAIa,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,IAAI,CAACb,YAAY,MAAM,IAAI,IAAIc,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC,EAAE,CAACC,EAAE,GAAG,IAAI,CAACvB,eAAe,MAAM,IAAI,IAAIuB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACf,YAAY,CAAC;IACrR,IAAIgB,kBAAkB,GAAGC,qBAAqB,CAACb,QAAQ,CAACR,KAAK,IAAI,IAAI,CAACA,KAAK,EAAEI,YAAY,CAAC;IAC1F;IACA,IAAIkB,kBAAkB,GAAGF,kBAAkB,CAACG,OAAO,CAAC,IAAI,CAACjC,SAAS,CAAC,GAAG,CAAC;IACvE,IAAIgC,kBAAkB,IAAIF,kBAAkB,CAACI,MAAM,EAAE;MACjDF,kBAAkB,GAAG,CAAC;IAC1B;IACA,OAAOF,kBAAkB,CAACE,kBAAkB,CAAC;EACjD;EACAG,QAAQA,CAAA,EAAG;IACP,IAAI,CAACC,gBAAgB,CAAC,CAAC;EAC3B;EACAC,WAAWA,CAAA,EAAG;IACV,IAAI,CAAC5B,aAAa,CAAC6B,IAAI,CAAC,CAAC;EAC7B;EACAC,WAAWA,CAAA,EAAG;IACV,IAAI,CAAC9B,aAAa,CAAC+B,QAAQ,CAAC,CAAC;EACjC;AACJ;AACApC,OAAO,CAACqC,UAAU,GAAG,CACjB;EAAEC,IAAI,EAAEjF,SAAS;EAAEkF,IAAI,EAAE,CAAC;IACdC,QAAQ,EAAE,WAAW;IACrBC,QAAQ,EAAE,SAAS;IACnBC,IAAI,EAAE;MAAE,OAAO,EAAE;IAAW,CAAC;IAC7BC,MAAM,EAAE,CAAC,2BAA2B;EACxC,CAAC;AAAG,CAAC,CAChB;AACD3C,OAAO,CAAC4C,cAAc,GAAG,MAAM,CAC3B;EAAEN,IAAI,EAAEO,SAAS;EAAER,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAEhF;EAAS,CAAC,EAAE;IAAEgF,IAAI,EAAE/E,MAAM;IAAEgF,IAAI,EAAE,CAAC1C,wBAAwB;EAAG,CAAC;AAAE,CAAC,CAC7G;AACDG,OAAO,CAAC8C,cAAc,GAAG;EACrB1B,MAAM,EAAE,CAAC;IAAEkB,IAAI,EAAE9E,KAAK;IAAE+E,IAAI,EAAE,CAAC,eAAe;EAAG,CAAC,CAAC;EACnDjC,KAAK,EAAE,CAAC;IAAEgC,IAAI,EAAE9E,KAAK;IAAE+E,IAAI,EAAE,CAAC,cAAc;EAAG,CAAC,CAAC;EACjD3C,SAAS,EAAE,CAAC;IAAE0C,IAAI,EAAE9E,KAAK;IAAE+E,IAAI,EAAE,CAAC,kBAAkB;EAAG,CAAC,CAAC;EACzD7B,YAAY,EAAE,CAAC;IAAE4B,IAAI,EAAE9E,KAAK;IAAE+E,IAAI,EAAE,CAAC,qBAAqB;EAAG,CAAC,CAAC;EAC/D/B,UAAU,EAAE,CAAC;IAAE8B,IAAI,EAAE7E,MAAM;IAAE8E,IAAI,EAAE,CAAC,eAAe;EAAG,CAAC;AAC3D,CAAC;AACD;AACA,SAASZ,qBAAqBA,CAACrB,KAAK,EAAEI,YAAY,EAAE;EAChD,IAAIqC,SAAS,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC;EAC/B,IAAIzC,KAAK,IAAI,MAAM,EAAE;IACjByC,SAAS,CAACC,OAAO,CAAC,CAAC;EACvB;EACA,IAAI,CAACtC,YAAY,EAAE;IACfqC,SAAS,CAACE,IAAI,CAAC,EAAE,CAAC;EACtB;EACA,OAAOF,SAAS;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,yBAAyB,GAAG7E,kBAAkB,CAAC8E,QAAQ,GAAG,GAAG,GAC/D7E,eAAe,CAAC8E,cAAc;AAClC;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,GAAG;EACtB;EACAC,SAAS,EAAEzE,OAAO,CAAC,WAAW,EAAE,CAC5BC,KAAK,CAAC,iBAAiB,EAAEC,KAAK,CAAC;IAAEwE,SAAS,EAAE;EAAkB,CAAC,CAAC,CAAC;EACjE;EACAzE,KAAK,CAAC,mBAAmB,EAAEC,KAAK,CAAC;IAAEwE,SAAS,EAAE;EAAmB,CAAC,CAAC,CAAC,EACpEvE,UAAU,CAAC,4BAA4B,EAAEC,OAAO,CAACiE,yBAAyB,CAAC,CAAC,CAC/E,CAAC;EACF;EACAM,WAAW,EAAE3E,OAAO,CAAC,aAAa,EAAE,CAChCC,KAAK,CAAC,iBAAiB,EAAEC,KAAK,CAAC;IAAEwE,SAAS,EAAE;EAAiB,CAAC,CAAC,CAAC,EAChEzE,KAAK,CAAC,mBAAmB,EAAEC,KAAK,CAAC;IAAEwE,SAAS,EAAE;EAAgB,CAAC,CAAC,CAAC,EACjEvE,UAAU,CAAC,4BAA4B,EAAEC,OAAO,CAACiE,yBAAyB,CAAC,CAAC,CAC/E,CAAC;EACF;EACAO,YAAY,EAAE5E,OAAO,CAAC,cAAc,EAAE,CAClCC,KAAK,CAAC,iBAAiB,EAAEC,KAAK,CAAC;IAAEwE,SAAS,EAAE;EAAgB,CAAC,CAAC,CAAC,EAC/DzE,KAAK,CAAC,mBAAmB,EAAEC,KAAK,CAAC;IAAEwE,SAAS,EAAE;EAAiB,CAAC,CAAC,CAAC,EAClEvE,UAAU,CAAC,4BAA4B,EAAEC,OAAO,CAACiE,yBAAyB,CAAC,CAAC,CAC/E,CAAC;EACF;EACAQ,YAAY,EAAE7E,OAAO,CAAC,cAAc,EAAE,CAClCC,KAAK,CAAC,uCAAuC,EAAEC,KAAK,CAAC;IAAE4E,OAAO,EAAE;EAAE,CAAC,CAAC,CAAC,EACrE7E,KAAK,CAAC,iCAAiC,EAAEC,KAAK,CAAC;IAAE4E,OAAO,EAAE;EAAI,CAAC,CAAC,CAAC,EACjE7E,KAAK,CAAC,2EAA2E,EAAEC,KAAK,CAAC;IAAE4E,OAAO,EAAE;EAAE,CAAC,CAAC,CAAC;EACzG;EACA3E,UAAU,CAAC,wDAAwD,EAAEC,OAAO,CAAC,KAAK,CAAC,CAAC,EACpFD,UAAU,CAAC,SAAS,EAAEC,OAAO,CAACiE,yBAAyB,CAAC,CAAC,CAC5D,CAAC;EACF;AACJ;AACA;AACA;AACA;AACA;AACA;EACIU,aAAa,EAAE/E,OAAO,CAAC,eAAe,EAAE;EACpC;EACAG,UAAU,CAAC,wCAAwC,EAAEC,OAAO,CAACiE,yBAAyB,EAAEhE,SAAS,CAAC,CAC9FH,KAAK,CAAC;IAAEwE,SAAS,EAAE;EAAmB,CAAC,CAAC,EACxCxE,KAAK,CAAC;IAAEwE,SAAS,EAAE;EAAgB,CAAC,CAAC,CACxC,CAAC,CAAC,CAAC;EACJ;EACAvE,UAAU,CAAC,wCAAwC,EAAEC,OAAO,CAACiE,yBAAyB,EAAEhE,SAAS,CAAC,CAC9FH,KAAK,CAAC;IAAEwE,SAAS,EAAE;EAAgB,CAAC,CAAC,EACrCxE,KAAK,CAAC;IAAEwE,SAAS,EAAE;EAAkB,CAAC,CAAC,CAC1C,CAAC,CAAC,CAAC;EACJ;EACAvE,UAAU,CAAC,sCAAsC,EAAEC,OAAO,CAACiE,yBAAyB,EAAEhE,SAAS,CAAC,CAC5FH,KAAK,CAAC;IAAEwE,SAAS,EAAE;EAAkB,CAAC,CAAC,EACvCxE,KAAK,CAAC;IAAEwE,SAAS,EAAE;EAAgB,CAAC,CAAC,CACxC,CAAC,CAAC,CAAC;EACJ;EACAvE,UAAU,CAAC,sCAAsC,EAAEC,OAAO,CAACiE,yBAAyB,EAAEhE,SAAS,CAAC,CAC5FH,KAAK,CAAC;IAAEwE,SAAS,EAAE;EAAgB,CAAC,CAAC,EACrCxE,KAAK,CAAC;IAAEwE,SAAS,EAAE;EAAmB,CAAC,CAAC,CAC3C,CAAC,CAAC,CAAC,EACJzE,KAAK,CAAC,wEAAwE,EAAEC,KAAK,CAAC;IAAEwE,SAAS,EAAE;EAAgB,CAAC,CAAC,CAAC,EACtHzE,KAAK,CAAC,oCAAoC,EAAEC,KAAK,CAAC;IAAEwE,SAAS,EAAE;EAAmB,CAAC,CAAC,CAAC,EACrFzE,KAAK,CAAC,iCAAiC,EAAEC,KAAK,CAAC;IAAEwE,SAAS,EAAE;EAAkB,CAAC,CAAC,CAAC,CACpF,CAAC;EACF;EACAM,aAAa,EAAEhF,OAAO,CAAC,eAAe,EAAE,CACpCG,UAAU,CAAC,SAAS,EAAE,CAClBG,KAAK,CAAC,IAAI,EAAEC,YAAY,CAAC,CAAC,EAAE;IAAE0E,QAAQ,EAAE;EAAK,CAAC,CAAC,CAClD,CAAC,CACL;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,CAAC;EACpB9D,WAAWA,CAAA,EAAG;IACV;AACR;AACA;AACA;IACQ,IAAI,CAAC+D,OAAO,GAAG,IAAIrF,OAAO,CAAC,CAAC;EAChC;AACJ;AACAoF,iBAAiB,CAACE,KAAK,GAAG/G,EAAE,CAACgH,kBAAkB,CAAC;EAAEC,OAAO,EAAE,SAASC,yBAAyBA,CAAA,EAAG;IAAE,OAAO,IAAIL,iBAAiB,CAAC,CAAC;EAAE,CAAC;EAAEM,KAAK,EAAEN,iBAAiB;EAAEO,UAAU,EAAE;AAAO,CAAC,CAAC;AACpLP,iBAAiB,CAAC1B,UAAU,GAAG,CAC3B;EAAEC,IAAI,EAAE5E,UAAU;EAAE6E,IAAI,EAAE,CAAC;IAAE+B,UAAU,EAAE;EAAO,CAAC;AAAG,CAAC,CACxD;AACD;AACA,SAASC,qCAAqCA,CAACC,UAAU,EAAE;EACvD,OAAOA,UAAU,IAAI,IAAIT,iBAAiB,CAAC,CAAC;AAChD;AACA;AACA,MAAMU,6BAA6B,GAAG;EAClC;EACAC,OAAO,EAAEX,iBAAiB;EAC1BY,IAAI,EAAE,CAAC,CAAC,IAAIrH,QAAQ,CAAC,CAAC,EAAE,IAAIK,QAAQ,CAAC,CAAC,EAAEoG,iBAAiB,CAAC,CAAC;EAC3Da,UAAU,EAAEL;AAChB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMM,iBAAiB,CAAC;AAExB,MAAMC,uBAAuB,GAAG1G,aAAa,CAACyG,iBAAiB,CAAC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,aAAa,SAASD,uBAAuB,CAAC;EAChD7E,WAAWA;EACX;AACJ;AACA;AACA;EACI+E,KAAK,EAAEC,kBAAkB;EACzB;EACA;EACAC,KAAK,EAAEC,UAAU,EAAEC,aAAa,EAAEC,WAAW,EAAE;IAC3C;IACA;IACA;IACA;IACA,KAAK,CAAC,CAAC;IACP,IAAI,CAACL,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,kBAAkB,GAAGA,kBAAkB;IAC5C,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,WAAW,GAAGA,WAAW;IAC9B;AACR;AACA;AACA;IACQ,IAAI,CAACC,kBAAkB,GAAG,KAAK;IAC/B;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,UAAU,GAAG,CAAC,CAAC;IACpB;IACA,IAAI,CAACC,eAAe,GAAG,EAAE;IACzB;AACR;AACA;IACQ,IAAI,CAACC,0BAA0B,GAAG,KAAK;IACvC;IACA,IAAI,CAAC7B,aAAa,GAAG,OAAO;IAC5B,IAAI,CAACsB,KAAK,KAAK,OAAOzE,SAAS,KAAK,WAAW,IAAIA,SAAS,CAAC,EAAE;MAC3D,MAAMhB,wCAAwC,CAAC,CAAC;IACpD;IACA,IAAI,CAACiG,mBAAmB,CAAC,CAAC;EAC9B;EACA;EACA,IAAIhF,YAAYA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACC,aAAa;EAAE;EAChD,IAAID,YAAYA,CAACE,CAAC,EAAE;IAAE,IAAI,CAACD,aAAa,GAAGzC,qBAAqB,CAAC0C,CAAC,CAAC;EAAE;EACrEmB,QAAQA,CAAA,EAAG;IACP,IAAI,CAAC,IAAI,CAACxC,EAAE,IAAI,IAAI,CAAC4F,UAAU,EAAE;MAC7B,IAAI,CAAC5F,EAAE,GAAG,IAAI,CAAC4F,UAAU,CAACQ,IAAI;IAClC;IACA;IACA,IAAI,CAACC,qBAAqB,CAAC,CAAC;IAC5B,IAAI,CAACC,4BAA4B,CAAC;MAAEC,OAAO,EAAE,IAAI,CAACC,SAAS,CAAC,CAAC,GAAG,QAAQ,GAAG,IAAI,CAACP;IAAgB,CAAC,CAAC;IAClG,IAAI,CAACN,KAAK,CAACrE,QAAQ,CAAC,IAAI,CAAC;EAC7B;EACAmF,eAAeA,CAAA,EAAG;IACd;IACA;IACA,IAAI,CAACZ,aAAa,CAACa,OAAO,CAAC,IAAI,CAACZ,WAAW,EAAE,IAAI,CAAC,CAACa,SAAS,CAACC,MAAM,IAAI;MACnE,MAAMC,QAAQ,GAAG,CAAC,CAACD,MAAM;MACzB,IAAIC,QAAQ,KAAK,IAAI,CAACd,kBAAkB,EAAE;QACtC,IAAI,CAACe,wBAAwB,CAACD,QAAQ,CAAC;QACvC,IAAI,CAACnB,kBAAkB,CAACqB,YAAY,CAAC,CAAC;MAC1C;IACJ,CAAC,CAAC;EACN;EACAnE,WAAWA,CAAA,EAAG;IACV,IAAI,CAACiD,aAAa,CAACmB,cAAc,CAAC,IAAI,CAAClB,WAAW,CAAC;IACnD,IAAI,CAACH,KAAK,CAACjE,UAAU,CAAC,IAAI,CAAC;IAC3B,IAAI,CAACuF,qBAAqB,CAACC,WAAW,CAAC,CAAC;EAC5C;EACA;AACJ;AACA;AACA;EACIJ,wBAAwBA,CAACK,OAAO,EAAE;IAC9B;IACA,IAAI,IAAI,CAACC,WAAW,CAAC,CAAC,IAAID,OAAO,EAAE;MAC/B;IACJ;IACA,IAAI,CAACpB,kBAAkB,GAAGoB,OAAO;IACjC,IAAI,CAAC,IAAI,CAACX,SAAS,CAAC,CAAC,EAAE;MACnB,IAAI,CAACH,qBAAqB,CAAC,CAAC;MAC5B,IAAI,IAAI,CAACN,kBAAkB,EAAE;QACzB,IAAI,CAACO,4BAA4B,CAAC;UAAEe,SAAS,EAAE,IAAI,CAACpB,eAAe;UAAEM,OAAO,EAAE;QAAO,CAAC,CAAC;MAC3F,CAAC,MACI;QACD,IAAI,CAACD,4BAA4B,CAAC;UAAEe,SAAS,EAAE,MAAM;UAAEd,OAAO,EAAE,IAAI,CAACN;QAAgB,CAAC,CAAC;MAC3F;IACJ;EACJ;EACA;AACJ;AACA;AACA;AACA;EACIK,4BAA4BA,CAACgB,SAAS,EAAE;IACpC,IAAI,CAACtB,UAAU,GAAGsB,SAAS,IAAI,CAAC,CAAC;IACjC;IACA;IACA,IAAI,IAAI,CAACpB,0BAA0B,EAAE;MACjC,IAAI,CAACF,UAAU,GAAG;QAAEO,OAAO,EAAEe,SAAS,CAACf;MAAQ,CAAC;IACpD;EACJ;EACA;EACAgB,oBAAoBA,CAAA,EAAG;IACnB,IAAI,CAAC5B,KAAK,CAAC/D,IAAI,CAAC,IAAI,CAAC;IACrB;IACA,IAAI,IAAI,CAACoE,UAAU,CAACO,OAAO,KAAK,MAAM,IAAI,IAAI,CAACP,UAAU,CAACO,OAAO,KAAK,QAAQ,EAAE;MAC5E,IAAI,CAACL,0BAA0B,GAAG,IAAI;IAC1C;EACJ;EACAsB,YAAYA,CAAA,EAAG;IACX,IAAI,CAAC,IAAI,CAACJ,WAAW,CAAC,CAAC,EAAE;MACrB,IAAI,CAACzB,KAAK,CAAC/D,IAAI,CAAC,IAAI,CAAC;IACzB;EACJ;EACA6F,cAAcA,CAACC,KAAK,EAAE;IAClB,IAAI,CAAC,IAAI,CAACN,WAAW,CAAC,CAAC,KAAKM,KAAK,CAACC,OAAO,KAAKzI,KAAK,IAAIwI,KAAK,CAACC,OAAO,KAAKxI,KAAK,CAAC,EAAE;MAC7EuI,KAAK,CAACE,cAAc,CAAC,CAAC;MACtB,IAAI,CAACL,oBAAoB,CAAC,CAAC;IAC/B;EACJ;EACA;EACAf,SAASA,CAAA,EAAG;IACR,OAAO,IAAI,CAACb,KAAK,CAAC9D,MAAM,IAAI,IAAI,CAAC7B,EAAE,KAC9B,IAAI,CAAC2F,KAAK,CAACtF,SAAS,KAAK,KAAK,IAAI,IAAI,CAACsF,KAAK,CAACtF,SAAS,KAAK,MAAM,CAAC;EAC3E;EACA;EACAwH,uBAAuBA,CAAA,EAAG;IACtB,OAAQ,GAAE,IAAI,CAACrB,SAAS,CAAC,CAAC,GAAG,SAAS,GAAG,EAAG,GAAE,IAAI,CAACP,eAAgB,EAAC;EACxE;EACA;EACA6B,kBAAkBA,CAAA,EAAG;IACjB,MAAMT,SAAS,GAAG,IAAI,CAACrB,UAAU,CAACqB,SAAS;IAC3C,OAAO,CAACA,SAAS,GAAI,GAAEA,SAAU,MAAK,GAAG,EAAE,IAAI,IAAI,CAACrB,UAAU,CAACO,OAAO;EAC1E;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIF,qBAAqBA,CAAA,EAAG;IACpB,IAAI,CAACJ,eAAe,GAAG,IAAI,CAACO,SAAS,CAAC,CAAC,GACnC,IAAI,CAACb,KAAK,CAACtF,SAAS,GACnB,IAAI,CAACU,KAAK,IAAI,IAAI,CAAC4E,KAAK,CAAC5E,KAAM;EACxC;EACAqG,WAAWA,CAAA,EAAG;IACV,OAAO,IAAI,CAACzB,KAAK,CAACoC,QAAQ,IAAI,IAAI,CAACA,QAAQ;EAC/C;EACA;AACJ;AACA;AACA;AACA;AACA;EACIC,qBAAqBA,CAAA,EAAG;IACpB,IAAI,CAAC,IAAI,CAACxB,SAAS,CAAC,CAAC,EAAE;MACnB,OAAO,MAAM;IACjB;IACA,OAAO,IAAI,CAACb,KAAK,CAACtF,SAAS,IAAI,KAAK,GAAG,WAAW,GAAG,YAAY;EACrE;EACA;EACA4H,YAAYA,CAAA,EAAG;IACX,OAAO,CAAC,IAAI,CAACb,WAAW,CAAC,CAAC,IAAI,IAAI,CAACZ,SAAS,CAAC,CAAC;EAClD;EACA;EACAL,mBAAmBA,CAAA,EAAG;IAClB,IAAI,CAACc,qBAAqB,GACtB5H,KAAK,CAAC,IAAI,CAACsG,KAAK,CAAC1E,UAAU,EAAE,IAAI,CAAC0E,KAAK,CAAC7E,aAAa,EAAE,IAAI,CAAC2E,KAAK,CAAChB,OAAO,CAAC,CAACkC,SAAS,CAAC,MAAM;MACvF,IAAI,IAAI,CAACH,SAAS,CAAC,CAAC,EAAE;QAClB,IAAI,CAACH,qBAAqB,CAAC,CAAC;QAC5B;QACA,IAAI,IAAI,CAACL,UAAU,CAACO,OAAO,KAAK,MAAM,IAAI,IAAI,CAACP,UAAU,CAACO,OAAO,KAAK,QAAQ,EAAE;UAC5E,IAAI,CAACL,0BAA0B,GAAG,IAAI;QAC1C;QACA,IAAI,CAACI,4BAA4B,CAAC;UAAEe,SAAS,EAAE,IAAI,CAACpB,eAAe;UAAEM,OAAO,EAAE;QAAS,CAAC,CAAC;QACzF,IAAI,CAACR,kBAAkB,GAAG,KAAK;MACnC;MACA;MACA,IAAI,CAAC,IAAI,CAACS,SAAS,CAAC,CAAC,IAAI,IAAI,CAACR,UAAU,IAAI,IAAI,CAACA,UAAU,CAACO,OAAO,KAAK,QAAQ,EAAE;QAC9E,IAAI,CAACL,0BAA0B,GAAG,KAAK;QACvC,IAAI,CAACI,4BAA4B,CAAC;UAAEe,SAAS,EAAE,QAAQ;UAAEd,OAAO,EAAE,IAAI,CAACN;QAAgB,CAAC,CAAC;MAC7F;MACA,IAAI,CAACP,kBAAkB,CAACqB,YAAY,CAAC,CAAC;IAC1C,CAAC,CAAC;EACV;AACJ;AACAvB,aAAa,CAAC1C,UAAU,GAAG,CACvB;EAAEC,IAAI,EAAE1E,SAAS;EAAE2E,IAAI,EAAE,CAAC;IACdC,QAAQ,EAAE,mBAAmB;IAC7BC,QAAQ,EAAE,eAAe;IACzBgF,QAAQ,EAAE,ovEAAovE;IAC9vE/E,IAAI,EAAE;MACF,OAAO,EAAE,iBAAiB;MAC1B,SAAS,EAAE,gBAAgB;MAC3B,WAAW,EAAE,wBAAwB;MACrC,cAAc,EAAE,gCAAgC;MAChD,cAAc,EAAE,iCAAiC;MACjD,kBAAkB,EAAE,yBAAyB;MAC7C,kCAAkC,EAAE;IACxC,CAAC;IACDgF,aAAa,EAAE7J,iBAAiB,CAAC8J,IAAI;IACrCC,eAAe,EAAE9J,uBAAuB,CAAC+J,MAAM;IAC/ClF,MAAM,EAAE,CAAC,UAAU,CAAC;IACpBmF,UAAU,EAAE,CACRzE,iBAAiB,CAACC,SAAS,EAC3BD,iBAAiB,CAACG,WAAW,EAC7BH,iBAAiB,CAACI,YAAY,EAC9BJ,iBAAiB,CAACK,YAAY,EAC9BL,iBAAiB,CAACO,aAAa,EAC/BP,iBAAiB,CAACQ,aAAa,CAClC;IACDkE,MAAM,EAAE,CAAC,wtDAAwtD;EACruD,CAAC;AAAG,CAAC,CAChB;AACDhD,aAAa,CAACnC,cAAc,GAAG,MAAM,CACjC;EAAEN,IAAI,EAAEyB;AAAkB,CAAC,EAC3B;EAAEzB,IAAI,EAAEvE;AAAkB,CAAC,EAC3B;EAAEuE,IAAI,EAAEtC,OAAO;EAAEqC,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAEhF;EAAS,CAAC;AAAE,CAAC,EACnD;EAAEgF,IAAI,EAAEO,SAAS;EAAER,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAE/E,MAAM;IAAEgF,IAAI,EAAE,CAAC,4BAA4B;EAAG,CAAC,EAAE;IAAED,IAAI,EAAEhF;EAAS,CAAC;AAAE,CAAC,EAC9G;EAAEgF,IAAI,EAAE9D;AAAa,CAAC,EACtB;EAAE8D,IAAI,EAAEtE;AAAW,CAAC,CACvB;AACD+G,aAAa,CAACjC,cAAc,GAAG;EAC3BvD,EAAE,EAAE,CAAC;IAAE+C,IAAI,EAAE9E,KAAK;IAAE+E,IAAI,EAAE,CAAC,iBAAiB;EAAG,CAAC,CAAC;EACjDqB,aAAa,EAAE,CAAC;IAAEtB,IAAI,EAAE9E;EAAM,CAAC,CAAC;EAChC8C,KAAK,EAAE,CAAC;IAAEgC,IAAI,EAAE9E;EAAM,CAAC,CAAC;EACxBkD,YAAY,EAAE,CAAC;IAAE4B,IAAI,EAAE9E;EAAM,CAAC;AAClC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMwK,aAAa,CAAC;AAEpBA,aAAa,CAAC3F,UAAU,GAAG,CACvB;EAAEC,IAAI,EAAErE,QAAQ;EAAEsE,IAAI,EAAE,CAAC;IACb0F,OAAO,EAAE,CAAC5I,YAAY,EAAEd,eAAe,CAAC;IACxC2J,OAAO,EAAE,CAAClI,OAAO,EAAE+E,aAAa,CAAC;IACjCoD,YAAY,EAAE,CAACnI,OAAO,EAAE+E,aAAa,CAAC;IACtCqD,SAAS,EAAE,CAAC3D,6BAA6B;EAC7C,CAAC;AAAG,CAAC,CAChB;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SAAS5E,wBAAwB,EAAE4E,6BAA6B,EAAEF,qCAAqC,EAAEvE,OAAO,EAAE+E,aAAa,EAAEhB,iBAAiB,EAAEiE,aAAa,EAAE3E,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}