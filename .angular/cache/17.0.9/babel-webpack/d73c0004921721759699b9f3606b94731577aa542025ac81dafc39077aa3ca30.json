{"ast":null,"code":"/**\r\n * ChordLink module\r\n */\nimport { __extends } from \"tslib\";\nimport { FlowDiagramLink } from \"./FlowDiagramLink\";\nimport { registry } from \"../../core/Registry\";\nimport { QuadraticCurve } from \"../../core/elements/QuadraticCurve\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Chord Diagram.\r\n *\r\n * @see {@link IChordLinkEvents} for a list of available events\r\n * @see {@link IChordLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\nvar ChordLink = /** @class */function (_super) {\n  __extends(ChordLink, _super);\n  /**\r\n   * Constructor\r\n   */\n  function ChordLink() {\n    var _this = _super.call(this) || this;\n    _this.className = \"ChordLink\";\n    _this.middleLine = _this.createChild(QuadraticCurve);\n    _this.middleLine.shouldClone = false;\n    _this.middleLine.strokeOpacity = 0;\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * (Re)validates (redraws) the link.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  ChordLink.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n    if (!this.isTemplate) {\n      var startAngle = this.startAngle;\n      var endAngle = this.endAngle;\n      var arc = this.arc;\n      var radius = this.radius;\n      var fromNode = this.dataItem.fromNode;\n      var toNode = this.dataItem.toNode;\n      var fromX = 0;\n      var fromY = 0;\n      if (fromNode) {\n        fromX = fromNode.pixelX + fromNode.dx;\n        fromY = fromNode.pixelY + fromNode.dy;\n      }\n      var toX = 0;\n      var toY = 0;\n      if (toNode) {\n        toX = toNode.pixelX + toNode.dx;\n        toY = toNode.pixelY + toNode.dy;\n      }\n      if (radius > 0) {\n        var x1 = radius * $math.cos(startAngle) + fromX;\n        var y1 = radius * $math.sin(startAngle) + fromY;\n        var x2 = radius * $math.cos(endAngle) + toX;\n        var y2 = radius * $math.sin(endAngle) + toY;\n        //let cpAngle = startAngle + arc + (endAngle - startAngle - arc) / 2;\n        //let arcWidth = $math.getDistance({x:x1, y:y1}, {x:x4, y:y4});\n        //let cpx = (arcWidth) * $math.cos(cpAngle);\n        //let cpy = (arcWidth) * $math.sin(cpAngle);\n        var cp = {\n          x: 0,\n          y: 0\n        };\n        var path = $path.moveTo({\n          x: x1,\n          y: y1\n        });\n        path += $path.arcTo(startAngle, arc, radius);\n        path += $path.quadraticCurveTo({\n          x: x2,\n          y: y2\n        }, cp);\n        path += $path.arcTo(endAngle, arc, radius);\n        path += $path.quadraticCurveTo({\n          x: x1,\n          y: y1\n        }, cp);\n        if (arc > 0) {\n          this.link.path = path;\n        } else {\n          this.link.path = \"\";\n        }\n        if (this.maskBullets) {\n          this.bulletsMask.path = path;\n          this.bulletsContainer.mask = this.bulletsMask;\n        }\n        var mAngle1 = startAngle + arc / 2;\n        var mAngle2 = endAngle + arc / 2;\n        var middleLine = this.middleLine;\n        middleLine.x1 = radius * $math.cos(mAngle1) + fromX;\n        middleLine.y1 = radius * $math.sin(mAngle1) + fromY;\n        middleLine.x2 = radius * $math.cos(mAngle2) + toX;\n        middleLine.y2 = radius * $math.sin(mAngle2) + toY;\n        middleLine.cpx = 0;\n        middleLine.cpy = 0;\n        middleLine.stroke = this.fill;\n        this.positionBullets();\n      }\n    }\n  };\n  Object.defineProperty(ChordLink.prototype, \"radius\", {\n    /**\r\n     * @return End Y\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n    /**\r\n     * [radius description]\r\n     *\r\n     * @todo Description\r\n     * @param value End Y\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"radius\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ChordLink.prototype, \"arc\", {\n    /**\r\n     * @return [description]\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"arc\");\n    },\n    /**\r\n     * [arc description]\r\n     *\r\n     * @todo Description\r\n     * @param value [description]\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"arc\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ChordLink;\n}(FlowDiagramLink);\nexport { ChordLink };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"ChordLink\"] = ChordLink;","map":{"version":3,"names":["__extends","FlowDiagramLink","registry","QuadraticCurve","$math","$path","ChordLink","_super","_this","call","className","middleLine","createChild","shouldClone","strokeOpacity","applyTheme","prototype","validate","isTemplate","startAngle","endAngle","arc","radius","fromNode","dataItem","toNode","fromX","fromY","pixelX","dx","pixelY","dy","toX","toY","x1","cos","y1","sin","x2","y2","cp","x","y","path","moveTo","arcTo","quadraticCurveTo","link","maskBullets","bulletsMask","bulletsContainer","mask","mAngle1","mAngle2","cpx","cpy","stroke","fill","positionBullets","Object","defineProperty","get","getPropertyValue","set","value","setPropertyValue","enumerable","configurable","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/charts/elements/ChordLink.js"],"sourcesContent":["/**\r\n * ChordLink module\r\n */\r\nimport { __extends } from \"tslib\";\r\nimport { FlowDiagramLink } from \"./FlowDiagramLink\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { QuadraticCurve } from \"../../core/elements/QuadraticCurve\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Chord Diagram.\r\n *\r\n * @see {@link IChordLinkEvents} for a list of available events\r\n * @see {@link IChordLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar ChordLink = /** @class */ (function (_super) {\r\n    __extends(ChordLink, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ChordLink() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ChordLink\";\r\n        _this.middleLine = _this.createChild(QuadraticCurve);\r\n        _this.middleLine.shouldClone = false;\r\n        _this.middleLine.strokeOpacity = 0;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * (Re)validates (redraws) the link.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ChordLink.prototype.validate = function () {\r\n        _super.prototype.validate.call(this);\r\n        if (!this.isTemplate) {\r\n            var startAngle = this.startAngle;\r\n            var endAngle = this.endAngle;\r\n            var arc = this.arc;\r\n            var radius = this.radius;\r\n            var fromNode = this.dataItem.fromNode;\r\n            var toNode = this.dataItem.toNode;\r\n            var fromX = 0;\r\n            var fromY = 0;\r\n            if (fromNode) {\r\n                fromX = fromNode.pixelX + fromNode.dx;\r\n                fromY = fromNode.pixelY + fromNode.dy;\r\n            }\r\n            var toX = 0;\r\n            var toY = 0;\r\n            if (toNode) {\r\n                toX = toNode.pixelX + toNode.dx;\r\n                toY = toNode.pixelY + toNode.dy;\r\n            }\r\n            if (radius > 0) {\r\n                var x1 = radius * $math.cos(startAngle) + fromX;\r\n                var y1 = radius * $math.sin(startAngle) + fromY;\r\n                var x2 = radius * $math.cos(endAngle) + toX;\r\n                var y2 = radius * $math.sin(endAngle) + toY;\r\n                //let cpAngle = startAngle + arc + (endAngle - startAngle - arc) / 2;\r\n                //let arcWidth = $math.getDistance({x:x1, y:y1}, {x:x4, y:y4});\r\n                //let cpx = (arcWidth) * $math.cos(cpAngle);\r\n                //let cpy = (arcWidth) * $math.sin(cpAngle);\r\n                var cp = { x: 0, y: 0 };\r\n                var path = $path.moveTo({ x: x1, y: y1 });\r\n                path += $path.arcTo(startAngle, arc, radius);\r\n                path += $path.quadraticCurveTo({ x: x2, y: y2 }, cp);\r\n                path += $path.arcTo(endAngle, arc, radius);\r\n                path += $path.quadraticCurveTo({ x: x1, y: y1 }, cp);\r\n                if (arc > 0) {\r\n                    this.link.path = path;\r\n                }\r\n                else {\r\n                    this.link.path = \"\";\r\n                }\r\n                if (this.maskBullets) {\r\n                    this.bulletsMask.path = path;\r\n                    this.bulletsContainer.mask = this.bulletsMask;\r\n                }\r\n                var mAngle1 = startAngle + arc / 2;\r\n                var mAngle2 = endAngle + arc / 2;\r\n                var middleLine = this.middleLine;\r\n                middleLine.x1 = radius * $math.cos(mAngle1) + fromX;\r\n                middleLine.y1 = radius * $math.sin(mAngle1) + fromY;\r\n                middleLine.x2 = radius * $math.cos(mAngle2) + toX;\r\n                middleLine.y2 = radius * $math.sin(mAngle2) + toY;\r\n                middleLine.cpx = 0;\r\n                middleLine.cpy = 0;\r\n                middleLine.stroke = this.fill;\r\n                this.positionBullets();\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(ChordLink.prototype, \"radius\", {\r\n        /**\r\n         * @return End Y\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * [radius description]\r\n         *\r\n         * @todo Description\r\n         * @param value End Y\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"radius\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ChordLink.prototype, \"arc\", {\r\n        /**\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"arc\");\r\n        },\r\n        /**\r\n         * [arc description]\r\n         *\r\n         * @todo Description\r\n         * @param value [description]\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"arc\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return ChordLink;\r\n}(FlowDiagramLink));\r\nexport { ChordLink };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordLink\"] = ChordLink;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}