{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Optional, SkipSelf, InjectionToken, EventEmitter, Directive, ChangeDetectorRef, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, NgModule } from '@angular/core';\nimport { mixinDisabled, mixinInitialized, MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\nclass MatPaginatorIntl {\n  constructor() {\n    /**\n     * Stream to emit from when labels are changed. Use this to notify components when the labels have\n     * changed after initialization.\n     */\n    this.changes = new Subject();\n    /** A label for the page size selector. */\n    this.itemsPerPageLabel = 'Items per page:';\n    /** A label for the button that increments the current page. */\n    this.nextPageLabel = 'Next page';\n    /** A label for the button that decrements the current page. */\n    this.previousPageLabel = 'Previous page';\n    /** A label for the button that moves to the first page. */\n    this.firstPageLabel = 'First page';\n    /** A label for the button that moves to the last page. */\n    this.lastPageLabel = 'Last page';\n    /** A label for the range of items within the current page and the length of the whole list. */\n    this.getRangeLabel = (page, pageSize, length) => {\n      if (length == 0 || pageSize == 0) {\n        return `0 of ${length}`;\n      }\n      length = Math.max(length, 0);\n      const startIndex = page * pageSize;\n      // If the start index exceeds the list length, do not try and fix the end index to the end.\n      const endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;\n      return `${startIndex + 1} – ${endIndex} of ${length}`;\n    };\n  }\n}\nMatPaginatorIntl.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function MatPaginatorIntl_Factory() {\n    return new MatPaginatorIntl();\n  },\n  token: MatPaginatorIntl,\n  providedIn: \"root\"\n});\nMatPaginatorIntl.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: 'root'\n  }]\n}];\n/** @docs-private */\nfunction MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n/** @docs-private */\nconst MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nclass PageEvent {}\n/** Injection token that can be used to provide the default options for the paginator module. */\nconst MAT_PAGINATOR_DEFAULT_OPTIONS = new InjectionToken('MAT_PAGINATOR_DEFAULT_OPTIONS');\n// Boilerplate for applying mixins to _MatPaginatorBase.\n/** @docs-private */\nclass MatPaginatorMixinBase {}\nconst _MatPaginatorMixinBase = mixinDisabled(mixinInitialized(MatPaginatorMixinBase));\n/**\n * Base class with all of the `MatPaginator` functionality.\n * @docs-private\n */\nclass _MatPaginatorBase extends _MatPaginatorMixinBase {\n  constructor(_intl, _changeDetectorRef, defaults) {\n    super();\n    this._intl = _intl;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._pageIndex = 0;\n    this._length = 0;\n    this._pageSizeOptions = [];\n    this._hidePageSize = false;\n    this._showFirstLastButtons = false;\n    /** Event emitted when the paginator changes the page size or page index. */\n    this.page = new EventEmitter();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n    if (defaults) {\n      const {\n        pageSize,\n        pageSizeOptions,\n        hidePageSize,\n        showFirstLastButtons\n      } = defaults;\n      if (pageSize != null) {\n        this._pageSize = pageSize;\n      }\n      if (pageSizeOptions != null) {\n        this._pageSizeOptions = pageSizeOptions;\n      }\n      if (hidePageSize != null) {\n        this._hidePageSize = hidePageSize;\n      }\n      if (showFirstLastButtons != null) {\n        this._showFirstLastButtons = showFirstLastButtons;\n      }\n    }\n  }\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  get pageIndex() {\n    return this._pageIndex;\n  }\n  set pageIndex(value) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  get length() {\n    return this._length;\n  }\n  set length(value) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** Number of items to display on a page. By default set to 50. */\n  get pageSize() {\n    return this._pageSize;\n  }\n  set pageSize(value) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  /** The set of provided page size options to display to the user. */\n  get pageSizeOptions() {\n    return this._pageSizeOptions;\n  }\n  set pageSizeOptions(value) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  /** Whether to hide the page size selection UI from the user. */\n  get hidePageSize() {\n    return this._hidePageSize;\n  }\n  set hidePageSize(value) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  /** Whether to show the first/last buttons UI to the user. */\n  get showFirstLastButtons() {\n    return this._showFirstLastButtons;\n  }\n  set showFirstLastButtons(value) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n  /** Advances to the next page if it exists. */\n  nextPage() {\n    if (!this.hasNextPage()) {\n      return;\n    }\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n  /** Move back to the previous page if it exists. */\n  previousPage() {\n    if (!this.hasPreviousPage()) {\n      return;\n    }\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n  /** Move to the first page if not already there. */\n  firstPage() {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) {\n      return;\n    }\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n  /** Move to the last page if not already there. */\n  lastPage() {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) {\n      return;\n    }\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n  /** Whether there is a previous page. */\n  hasPreviousPage() {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n  /** Whether there is a next page. */\n  hasNextPage() {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n  /** Calculate the number of pages */\n  getNumberOfPages() {\n    if (!this.pageSize) {\n      return 0;\n    }\n    return Math.ceil(this.length / this.pageSize);\n  }\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) {\n      return;\n    }\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ? this.pageSizeOptions[0] : DEFAULT_PAGE_SIZE;\n    }\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  _emitPageEvent(previousPageIndex) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n_MatPaginatorBase.decorators = [{\n  type: Directive\n}];\n_MatPaginatorBase.ctorParameters = () => [{\n  type: MatPaginatorIntl\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: undefined\n}];\n_MatPaginatorBase.propDecorators = {\n  color: [{\n    type: Input\n  }],\n  pageIndex: [{\n    type: Input\n  }],\n  length: [{\n    type: Input\n  }],\n  pageSize: [{\n    type: Input\n  }],\n  pageSizeOptions: [{\n    type: Input\n  }],\n  hidePageSize: [{\n    type: Input\n  }],\n  showFirstLastButtons: [{\n    type: Input\n  }],\n  page: [{\n    type: Output\n  }]\n};\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\nclass MatPaginator extends _MatPaginatorBase {\n  constructor(intl, changeDetectorRef, defaults) {\n    super(intl, changeDetectorRef, defaults);\n    if (defaults && defaults.formFieldAppearance != null) {\n      this._formFieldAppearance = defaults.formFieldAppearance;\n    }\n  }\n}\nMatPaginator.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-paginator',\n    exportAs: 'matPaginator',\n    template: \"<div class=\\\"mat-paginator-outer-container\\\">\\n  <div class=\\\"mat-paginator-container\\\">\\n    <div class=\\\"mat-paginator-page-size\\\" *ngIf=\\\"!hidePageSize\\\">\\n      <div class=\\\"mat-paginator-page-size-label\\\">\\n        {{_intl.itemsPerPageLabel}}\\n      </div>\\n\\n      <mat-form-field\\n        *ngIf=\\\"_displayedPageSizeOptions.length > 1\\\"\\n        [appearance]=\\\"_formFieldAppearance!\\\"\\n        [color]=\\\"color\\\"\\n        class=\\\"mat-paginator-page-size-select\\\">\\n        <mat-select\\n          [value]=\\\"pageSize\\\"\\n          [disabled]=\\\"disabled\\\"\\n          [aria-label]=\\\"_intl.itemsPerPageLabel\\\"\\n          (selectionChange)=\\\"_changePageSize($event.value)\\\">\\n          <mat-option *ngFor=\\\"let pageSizeOption of _displayedPageSizeOptions\\\" [value]=\\\"pageSizeOption\\\">\\n            {{pageSizeOption}}\\n          </mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n\\n      <div\\n        class=\\\"mat-paginator-page-size-value\\\"\\n        *ngIf=\\\"_displayedPageSizeOptions.length <= 1\\\">{{pageSize}}</div>\\n    </div>\\n\\n    <div class=\\\"mat-paginator-range-actions\\\">\\n      <div class=\\\"mat-paginator-range-label\\\">\\n        {{_intl.getRangeLabel(pageIndex, pageSize, length)}}\\n      </div>\\n\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-first\\\"\\n              (click)=\\\"firstPage()\\\"\\n              [attr.aria-label]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltip]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-previous\\\"\\n              (click)=\\\"previousPage()\\\"\\n              [attr.aria-label]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltip]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-next\\\"\\n              (click)=\\\"nextPage()\\\"\\n              [attr.aria-label]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltip]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-last\\\"\\n              (click)=\\\"lastPage()\\\"\\n              [attr.aria-label]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltip]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"/>\\n        </svg>\\n      </button>\\n    </div>\\n  </div>\\n</div>\\n\",\n    inputs: ['disabled'],\n    host: {\n      'class': 'mat-paginator',\n      'role': 'group'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styles: [\".mat-paginator{display:block}.mat-paginator-outer-container{display:flex}.mat-paginator-container{display:flex;align-items:center;justify-content:flex-end;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-paginator-page-size{margin-right:0;margin-left:8px}.mat-paginator-page-size-label{margin:0 4px}.mat-paginator-page-size-select{margin:6px 4px 0 4px;width:56px}.mat-paginator-page-size-select.mat-form-field-appearance-outline{width:64px}.mat-paginator-page-size-select.mat-form-field-appearance-fill{width:64px}.mat-paginator-range-label{margin:0 32px 0 24px}.mat-paginator-range-actions{display:flex;align-items:center}.mat-paginator-icon{width:28px;fill:currentColor}[dir=rtl] .mat-paginator-icon{transform:rotate(180deg)}\\n\"]\n  }]\n}];\nMatPaginator.ctorParameters = () => [{\n  type: MatPaginatorIntl\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_PAGINATOR_DEFAULT_OPTIONS]\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatPaginatorModule {}\nMatPaginatorModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule, MatButtonModule, MatSelectModule, MatTooltipModule, MatCommonModule],\n    exports: [MatPaginator],\n    declarations: [MatPaginator],\n    providers: [MAT_PAGINATOR_INTL_PROVIDER]\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PAGINATOR_DEFAULT_OPTIONS, MAT_PAGINATOR_INTL_PROVIDER, MAT_PAGINATOR_INTL_PROVIDER_FACTORY, MatPaginator, MatPaginatorIntl, MatPaginatorModule, PageEvent, _MatPaginatorBase };","map":{"version":3,"names":["CommonModule","i0","Injectable","Optional","SkipSelf","InjectionToken","EventEmitter","Directive","ChangeDetectorRef","Input","Output","Component","ChangeDetectionStrategy","ViewEncapsulation","Inject","NgModule","mixinDisabled","mixinInitialized","MatCommonModule","MatButtonModule","MatSelectModule","MatTooltipModule","coerceNumberProperty","coerceBooleanProperty","Subject","MatPaginatorIntl","constructor","changes","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","page","pageSize","length","Math","max","startIndex","endIndex","min","ɵprov","ɵɵdefineInjectable","factory","MatPaginatorIntl_Factory","token","providedIn","decorators","type","args","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","parentIntl","MAT_PAGINATOR_INTL_PROVIDER","provide","deps","useFactory","DEFAULT_PAGE_SIZE","PageEvent","MAT_PAGINATOR_DEFAULT_OPTIONS","MatPaginatorMixinBase","_MatPaginatorMixinBase","_MatPaginatorBase","_intl","_changeDetectorRef","defaults","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","subscribe","markForCheck","pageSizeOptions","hidePageSize","showFirstLastButtons","_pageSize","pageIndex","value","_updateDisplayedPageSizeOptions","map","p","ngOnInit","_initialized","_markInitialized","ngOnDestroy","unsubscribe","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","ceil","_changePageSize","floor","_nextButtonsDisabled","disabled","_previousButtonsDisabled","_displayedPageSizeOptions","slice","indexOf","push","sort","a","b","emit","ctorParameters","undefined","propDecorators","color","MatPaginator","intl","changeDetectorRef","formFieldAppearance","_formFieldAppearance","selector","exportAs","template","inputs","host","changeDetection","OnPush","encapsulation","None","styles","MatPaginatorModule","imports","exports","declarations","providers"],"sources":["D:/alodelivery test/node_modules/@angular/material/fesm2015/paginator.js"],"sourcesContent":["import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Optional, SkipSelf, InjectionToken, EventEmitter, Directive, ChangeDetectorRef, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, NgModule } from '@angular/core';\nimport { mixinDisabled, mixinInitialized, MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\nclass MatPaginatorIntl {\n    constructor() {\n        /**\n         * Stream to emit from when labels are changed. Use this to notify components when the labels have\n         * changed after initialization.\n         */\n        this.changes = new Subject();\n        /** A label for the page size selector. */\n        this.itemsPerPageLabel = 'Items per page:';\n        /** A label for the button that increments the current page. */\n        this.nextPageLabel = 'Next page';\n        /** A label for the button that decrements the current page. */\n        this.previousPageLabel = 'Previous page';\n        /** A label for the button that moves to the first page. */\n        this.firstPageLabel = 'First page';\n        /** A label for the button that moves to the last page. */\n        this.lastPageLabel = 'Last page';\n        /** A label for the range of items within the current page and the length of the whole list. */\n        this.getRangeLabel = (page, pageSize, length) => {\n            if (length == 0 || pageSize == 0) {\n                return `0 of ${length}`;\n            }\n            length = Math.max(length, 0);\n            const startIndex = page * pageSize;\n            // If the start index exceeds the list length, do not try and fix the end index to the end.\n            const endIndex = startIndex < length ?\n                Math.min(startIndex + pageSize, length) :\n                startIndex + pageSize;\n            return `${startIndex + 1} – ${endIndex} of ${length}`;\n        };\n    }\n}\nMatPaginatorIntl.ɵprov = i0.ɵɵdefineInjectable({ factory: function MatPaginatorIntl_Factory() { return new MatPaginatorIntl(); }, token: MatPaginatorIntl, providedIn: \"root\" });\nMatPaginatorIntl.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n/** @docs-private */\nfunction MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatPaginatorIntl();\n}\n/** @docs-private */\nconst MAT_PAGINATOR_INTL_PROVIDER = {\n    // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n    provide: MatPaginatorIntl,\n    deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n    useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nclass PageEvent {\n}\n/** Injection token that can be used to provide the default options for the paginator module. */\nconst MAT_PAGINATOR_DEFAULT_OPTIONS = new InjectionToken('MAT_PAGINATOR_DEFAULT_OPTIONS');\n// Boilerplate for applying mixins to _MatPaginatorBase.\n/** @docs-private */\nclass MatPaginatorMixinBase {\n}\nconst _MatPaginatorMixinBase = mixinDisabled(mixinInitialized(MatPaginatorMixinBase));\n/**\n * Base class with all of the `MatPaginator` functionality.\n * @docs-private\n */\nclass _MatPaginatorBase extends _MatPaginatorMixinBase {\n    constructor(_intl, _changeDetectorRef, defaults) {\n        super();\n        this._intl = _intl;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._pageIndex = 0;\n        this._length = 0;\n        this._pageSizeOptions = [];\n        this._hidePageSize = false;\n        this._showFirstLastButtons = false;\n        /** Event emitted when the paginator changes the page size or page index. */\n        this.page = new EventEmitter();\n        this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n        if (defaults) {\n            const { pageSize, pageSizeOptions, hidePageSize, showFirstLastButtons, } = defaults;\n            if (pageSize != null) {\n                this._pageSize = pageSize;\n            }\n            if (pageSizeOptions != null) {\n                this._pageSizeOptions = pageSizeOptions;\n            }\n            if (hidePageSize != null) {\n                this._hidePageSize = hidePageSize;\n            }\n            if (showFirstLastButtons != null) {\n                this._showFirstLastButtons = showFirstLastButtons;\n            }\n        }\n    }\n    /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n    get pageIndex() { return this._pageIndex; }\n    set pageIndex(value) {\n        this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** The length of the total number of items that are being paginated. Defaulted to 0. */\n    get length() { return this._length; }\n    set length(value) {\n        this._length = coerceNumberProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Number of items to display on a page. By default set to 50. */\n    get pageSize() { return this._pageSize; }\n    set pageSize(value) {\n        this._pageSize = Math.max(coerceNumberProperty(value), 0);\n        this._updateDisplayedPageSizeOptions();\n    }\n    /** The set of provided page size options to display to the user. */\n    get pageSizeOptions() { return this._pageSizeOptions; }\n    set pageSizeOptions(value) {\n        this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n        this._updateDisplayedPageSizeOptions();\n    }\n    /** Whether to hide the page size selection UI from the user. */\n    get hidePageSize() { return this._hidePageSize; }\n    set hidePageSize(value) {\n        this._hidePageSize = coerceBooleanProperty(value);\n    }\n    /** Whether to show the first/last buttons UI to the user. */\n    get showFirstLastButtons() { return this._showFirstLastButtons; }\n    set showFirstLastButtons(value) {\n        this._showFirstLastButtons = coerceBooleanProperty(value);\n    }\n    ngOnInit() {\n        this._initialized = true;\n        this._updateDisplayedPageSizeOptions();\n        this._markInitialized();\n    }\n    ngOnDestroy() {\n        this._intlChanges.unsubscribe();\n    }\n    /** Advances to the next page if it exists. */\n    nextPage() {\n        if (!this.hasNextPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex++;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Move back to the previous page if it exists. */\n    previousPage() {\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex--;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Move to the first page if not already there. */\n    firstPage() {\n        // hasPreviousPage being false implies at the start\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = 0;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Move to the last page if not already there. */\n    lastPage() {\n        // hasNextPage being false implies at the end\n        if (!this.hasNextPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = this.getNumberOfPages() - 1;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Whether there is a previous page. */\n    hasPreviousPage() {\n        return this.pageIndex >= 1 && this.pageSize != 0;\n    }\n    /** Whether there is a next page. */\n    hasNextPage() {\n        const maxPageIndex = this.getNumberOfPages() - 1;\n        return this.pageIndex < maxPageIndex && this.pageSize != 0;\n    }\n    /** Calculate the number of pages */\n    getNumberOfPages() {\n        if (!this.pageSize) {\n            return 0;\n        }\n        return Math.ceil(this.length / this.pageSize);\n    }\n    /**\n     * Changes the page size so that the first item displayed on the page will still be\n     * displayed using the new page size.\n     *\n     * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n     * switching so that the page size is 5 will set the third page as the current page so\n     * that the 10th item will still be displayed.\n     */\n    _changePageSize(pageSize) {\n        // Current page needs to be updated to reflect the new page size. Navigate to the page\n        // containing the previous page's first item.\n        const startIndex = this.pageIndex * this.pageSize;\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n        this.pageSize = pageSize;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Checks whether the buttons for going forwards should be disabled. */\n    _nextButtonsDisabled() {\n        return this.disabled || !this.hasNextPage();\n    }\n    /** Checks whether the buttons for going backwards should be disabled. */\n    _previousButtonsDisabled() {\n        return this.disabled || !this.hasPreviousPage();\n    }\n    /**\n     * Updates the list of page size options to display to the user. Includes making sure that\n     * the page size is an option and that the list is sorted.\n     */\n    _updateDisplayedPageSizeOptions() {\n        if (!this._initialized) {\n            return;\n        }\n        // If no page size is provided, use the first page size option or the default page size.\n        if (!this.pageSize) {\n            this._pageSize = this.pageSizeOptions.length != 0 ?\n                this.pageSizeOptions[0] :\n                DEFAULT_PAGE_SIZE;\n        }\n        this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n        if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n            this._displayedPageSizeOptions.push(this.pageSize);\n        }\n        // Sort the numbers using a number-specific sort function.\n        this._displayedPageSizeOptions.sort((a, b) => a - b);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n    _emitPageEvent(previousPageIndex) {\n        this.page.emit({\n            previousPageIndex,\n            pageIndex: this.pageIndex,\n            pageSize: this.pageSize,\n            length: this.length\n        });\n    }\n}\n_MatPaginatorBase.decorators = [\n    { type: Directive }\n];\n_MatPaginatorBase.ctorParameters = () => [\n    { type: MatPaginatorIntl },\n    { type: ChangeDetectorRef },\n    { type: undefined }\n];\n_MatPaginatorBase.propDecorators = {\n    color: [{ type: Input }],\n    pageIndex: [{ type: Input }],\n    length: [{ type: Input }],\n    pageSize: [{ type: Input }],\n    pageSizeOptions: [{ type: Input }],\n    hidePageSize: [{ type: Input }],\n    showFirstLastButtons: [{ type: Input }],\n    page: [{ type: Output }]\n};\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\nclass MatPaginator extends _MatPaginatorBase {\n    constructor(intl, changeDetectorRef, defaults) {\n        super(intl, changeDetectorRef, defaults);\n        if (defaults && defaults.formFieldAppearance != null) {\n            this._formFieldAppearance = defaults.formFieldAppearance;\n        }\n    }\n}\nMatPaginator.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-paginator',\n                exportAs: 'matPaginator',\n                template: \"<div class=\\\"mat-paginator-outer-container\\\">\\n  <div class=\\\"mat-paginator-container\\\">\\n    <div class=\\\"mat-paginator-page-size\\\" *ngIf=\\\"!hidePageSize\\\">\\n      <div class=\\\"mat-paginator-page-size-label\\\">\\n        {{_intl.itemsPerPageLabel}}\\n      </div>\\n\\n      <mat-form-field\\n        *ngIf=\\\"_displayedPageSizeOptions.length > 1\\\"\\n        [appearance]=\\\"_formFieldAppearance!\\\"\\n        [color]=\\\"color\\\"\\n        class=\\\"mat-paginator-page-size-select\\\">\\n        <mat-select\\n          [value]=\\\"pageSize\\\"\\n          [disabled]=\\\"disabled\\\"\\n          [aria-label]=\\\"_intl.itemsPerPageLabel\\\"\\n          (selectionChange)=\\\"_changePageSize($event.value)\\\">\\n          <mat-option *ngFor=\\\"let pageSizeOption of _displayedPageSizeOptions\\\" [value]=\\\"pageSizeOption\\\">\\n            {{pageSizeOption}}\\n          </mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n\\n      <div\\n        class=\\\"mat-paginator-page-size-value\\\"\\n        *ngIf=\\\"_displayedPageSizeOptions.length <= 1\\\">{{pageSize}}</div>\\n    </div>\\n\\n    <div class=\\\"mat-paginator-range-actions\\\">\\n      <div class=\\\"mat-paginator-range-label\\\">\\n        {{_intl.getRangeLabel(pageIndex, pageSize, length)}}\\n      </div>\\n\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-first\\\"\\n              (click)=\\\"firstPage()\\\"\\n              [attr.aria-label]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltip]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-previous\\\"\\n              (click)=\\\"previousPage()\\\"\\n              [attr.aria-label]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltip]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-next\\\"\\n              (click)=\\\"nextPage()\\\"\\n              [attr.aria-label]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltip]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-last\\\"\\n              (click)=\\\"lastPage()\\\"\\n              [attr.aria-label]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltip]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"/>\\n        </svg>\\n      </button>\\n    </div>\\n  </div>\\n</div>\\n\",\n                inputs: ['disabled'],\n                host: {\n                    'class': 'mat-paginator',\n                    'role': 'group',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-paginator{display:block}.mat-paginator-outer-container{display:flex}.mat-paginator-container{display:flex;align-items:center;justify-content:flex-end;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-paginator-page-size{margin-right:0;margin-left:8px}.mat-paginator-page-size-label{margin:0 4px}.mat-paginator-page-size-select{margin:6px 4px 0 4px;width:56px}.mat-paginator-page-size-select.mat-form-field-appearance-outline{width:64px}.mat-paginator-page-size-select.mat-form-field-appearance-fill{width:64px}.mat-paginator-range-label{margin:0 32px 0 24px}.mat-paginator-range-actions{display:flex;align-items:center}.mat-paginator-icon{width:28px;fill:currentColor}[dir=rtl] .mat-paginator-icon{transform:rotate(180deg)}\\n\"]\n            },] }\n];\nMatPaginator.ctorParameters = () => [\n    { type: MatPaginatorIntl },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_PAGINATOR_DEFAULT_OPTIONS,] }] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatPaginatorModule {\n}\nMatPaginatorModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule,\n                    MatButtonModule,\n                    MatSelectModule,\n                    MatTooltipModule,\n                    MatCommonModule,\n                ],\n                exports: [MatPaginator],\n                declarations: [MatPaginator],\n                providers: [MAT_PAGINATOR_INTL_PROVIDER],\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PAGINATOR_DEFAULT_OPTIONS, MAT_PAGINATOR_INTL_PROVIDER, MAT_PAGINATOR_INTL_PROVIDER_FACTORY, MatPaginator, MatPaginatorIntl, MatPaginatorModule, PageEvent, _MatPaginatorBase };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}