{"ast":null,"code":"/**\r\n * Provides functionality used to creating and showing tooltips (balloons).\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Container } from \"../Container\";\nimport { registry } from \"../../core/Registry\";\nimport { PointedRectangle } from \"./PointedRectangle\";\nimport { Label } from \"../elements/Label\";\nimport { Animation } from \"../utils/Animation\";\nimport { color } from \"../utils/Color\";\nimport { DropShadowFilter } from \"../rendering/filters/DropShadowFilter\";\nimport * as $math from \"../utils/Math\";\nimport * as $ease from \"../utils/Ease\";\nimport * as $utils from \"../utils/Utils\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Tooltip displays text and/or multimedia information in a balloon over chart\r\n * area.\r\n * @see {@link ITooltipEvents} for a list of available events\r\n * @see {@link ITooltipAdapters} for a list of available Adapters\r\n */\nvar Tooltip = /** @class */function (_super) {\n  __extends(Tooltip, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Tooltip() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * Holds numeric boundary values. Calculated from the `boundingContainer`.\r\n     * @ignore\r\n     */\n    _this._boundingRect = {\n      x: -40000,\n      y: -40000,\n      width: 80000,\n      height: 80000\n    };\n    /**\r\n     * Coordinates tooltip's pointer (stem) should point to.\r\n     */\n    _this._pointTo = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * If set to `true` the pointer/stem of the Tooltip will not go outside\r\n     * Tooltip's width or height depending on pointer's orientation.\r\n     *\r\n     * @default false\r\n     */\n    _this.fitPointerToBounds = false;\n    /**\r\n     * If `tooltipOrientation` is vertical, it can be drawn below or above point\r\n     * We need to know this when solving overlapping.\r\n     */\n    _this._verticalOrientation = \"up\";\n    /**\r\n     * @ignore\r\n     */\n    _this.fixDoc = true;\n    _this.className = \"Tooltip\";\n    _this.isMeasured = false;\n    _this.getFillFromObject = true;\n    _this.margin(5, 5, 5, 5);\n    _this.defaultState.transitionDuration = 1;\n    _this.hiddenState.transitionDuration = 1;\n    // Create chrome/background\n    var background = _this.background;\n    background.interactionsEnabled = false;\n    background.fillOpacity = 0.9;\n    background.strokeWidth = 1;\n    background.strokeOpacity = 1;\n    background.stroke = color(\"#ffffff\");\n    background.cornerRadius = 3;\n    background.pointerLength = 6;\n    background.pointerBaseWidth = 10;\n    var dropShadow = new DropShadowFilter();\n    dropShadow.dy = 1;\n    dropShadow.dx = 1;\n    dropShadow.opacity = 0.5;\n    background.filters.push(dropShadow);\n    _this.autoTextColor = true;\n    // Create text element\n    var label = _this.createChild(Label);\n    label.shouldClone = false;\n    _this.label = label;\n    label.padding(7, 12, 4, 12);\n    label.interactionsEnabled = false;\n    label.horizontalCenter = \"middle\";\n    label.fill = color(\"#ffffff\");\n    _this._disposers.push(label);\n    _this.label.events.on(\"sizechanged\", _this.drawBackground, _this);\n    _this.label.zIndex = 1; // @todo remove this line when bg sorting is solved\n    // Set defaults\n    _this.pointerOrientation = \"vertical\";\n    _this.animationDuration = 0;\n    _this.animationEasing = $ease.cubicOut;\n    _this.setPropertyValue(\"showInViewport\", false);\n    // Set accessibility options\n    _this.role = \"tooltip\";\n    _this.visible = false;\n    _this.opacity = 0;\n    _this.x = 0;\n    _this.y = 0;\n    _this.events.on(\"visibilitychanged\", _this.handleVisibility, _this);\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  Tooltip.prototype.handleVisibility = function () {\n    if (this.visible) {\n      this.label.invalidate();\n    }\n  };\n  Object.defineProperty(Tooltip.prototype, \"getStrokeFromObject\", {\n    /**\r\n     * Specifies if tooltip background should get stroke color from the sprite it is pointing to.\r\n     *\r\n     * @return {boolean}\r\n     * @default false\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"getStrokeFromObject\");\n    },\n    /**\r\n     * Specifies if tooltip background should get stroke color from the sprite it is pointing to.\r\n     *\r\n     * @param value boolean\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"getStrokeFromObject\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Tooltip.prototype, \"autoTextColor\", {\n    /**\r\n     * @return {boolean}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"autoTextColor\");\n    },\n    /**\r\n     * Specifies if text color should be chosen automatically for a better\r\n     * readability.\r\n     *\r\n     * IMPORTANT: this feature is generally ignored, if `getFillFromObject = false`.\r\n     *\r\n     * If inheriting of `fill` color from object tooltip is displayed for is\r\n     * disabled, this feature will not work. If you are explicitly setting a\r\n     * color for tooltip background, you may set a color for its label as well\r\n     * using `tooltip.label.fill` property.\r\n     *\r\n     *\r\n     * @param value boolean\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"autoTextColor\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Tooltip.prototype, \"keepTargetHover\", {\n    /**\r\n     * @return Keep target hovered?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"keepTargetHover\");\n    },\n    /**\r\n     * If this tooltip is displayed on hover on some other object, keep that\r\n     * element hovered if hovering on the tooltip.\r\n     *\r\n     * @default false\r\n     * @since 4.1.13\r\n     * @param  value  Keep target hovered?\r\n     */\n    set: function (value) {\n      var _this = this;\n      if (this.setPropertyValue(\"keepTargetHover\", value, true)) {\n        if (value) {\n          this.hoverable = true;\n          this.background.interactionsEnabled = true;\n          this._disposers.push(this.events.on(\"over\", function (ev) {\n            if (_this.targetSprite && _this.targetSprite.hoverable) {\n              _this.targetSprite.isHover = true;\n            }\n          }));\n          this._disposers.push(this.events.on(\"out\", function (ev) {\n            if (_this.targetSprite && _this.targetSprite.hoverable) {\n              //this.hideTooltip();\n              //this.targetSprite.handleOut();\n              _this.targetSprite.isHover = false;\n            }\n          }));\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Tooltip.prototype, \"showInViewport\", {\n    /**\r\n     * @return Force showing tooltip?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"showInViewport\");\n    },\n    /**\r\n     * Normally, a tooltip will hide itself if it is pointing to a coordinate\r\n     * that is outside viewport.\r\n     *\r\n     * Setting this setting to `true` will override that and make tooltip\r\n     * appear next to the viewport edge closest to the target point.\r\n     *\r\n     * @default false\r\n     * @since 4.5.7\r\n     * @param  value  Force showing tooltip?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"showInViewport\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Tooltip.prototype, \"getFillFromObject\", {\n    /**\r\n     * Specifies if tooltip background should get fill color from the sprite it is pointing to.\r\n     *\r\n     * @return {boolean}\r\n     * @default true\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"getFillFromObject\");\n    },\n    /**\r\n     * @param value boolean\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"getFillFromObject\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates and returns a background element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Background\r\n   */\n  Tooltip.prototype.createBackground = function () {\n    return new PointedRectangle();\n  };\n  Object.defineProperty(Tooltip.prototype, \"pointerOrientation\", {\n    /**\r\n     * @return Orientation\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"pointerOrientation\");\n    },\n    /**\r\n     * Pointer orientation: `\"horizontal\"`, `\"vertical\"`, `\"up\"`, `\"down\"`,\r\n     * `\"right\"`, or `\"left\"`.\r\n     *\r\n     * Options`\"horizontal\"` or `\"vertical\"` are location-aware, meaning they\r\n     * will change position of the Tooltip based on the target point's position\r\n     * in relation to chart center.\r\n     *\r\n     * Options `\"up\"`, `\"down\"`, `\"right\"`, `\"left\"` are static and will point\r\n     * in the specified direction regardless of the position, even if that means\r\n     * going out of chart/screen bounds.\r\n     *\r\n     * IMPORTANT: in some situations, like having multiple tooltips stacked for\r\n     * multiple series, the `\"up\"` and `\"down\"` values might be ignored in order\r\n     * to make tooltip overlap algorithm work.\r\n     *\r\n     * @default \"vertical\"\r\n     * @param  value  Orientation\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"pointerOrientation\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Tooltip.prototype, \"animationDuration\", {\n    /**\r\n     * @return Orientation\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"animationDuration\");\n    },\n    /**\r\n     * Duration in milliseconds for the animation to take place when the tooltip\r\n     * is moving from one place to another.\r\n     *\r\n     * @default 0\r\n     * @param value  number\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"animationDuration\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Tooltip.prototype, \"animationEasing\", {\n    /**\r\n     * @return {Function}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"animationEasing\");\n    },\n    /**\r\n     * Tooltip animation (moving from one place to another) easing function.\r\n     *\r\n     * @default $ease.cubicOut\r\n     * @param value (value: number) => number\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"animationEasing\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Tooltip.prototype, \"html\", {\n    /**\r\n     * @return HTML content\r\n     */\n    get: function () {\n      return this.label.html;\n    },\n    /**\r\n     * HTML content for the Tooltip.\r\n     *\r\n     * Provided value will be used as is, without applying any further\r\n     * formatting to it.\r\n     *\r\n     * @param value  HTML content\r\n     */\n    set: function (value) {\n      if (this.label.html != value) {\n        this.label.html = value;\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Tooltip.prototype, \"text\", {\n    /**\r\n     * @return SVG text\r\n     */\n    get: function () {\n      return this.label.text;\n    },\n    /**\r\n     * SVG text content for the Tooltip.\r\n     *\r\n     * Text can have a number of formatting options supported by\r\n     * [[TextFormatter]].\r\n     *\r\n     * @param value  SVG text\r\n     */\n    set: function (value) {\n      if (this.label.text != value) {\n        this.label.text = value;\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates the Tooltip.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Tooltip.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n    var label = this.label;\n    if (label.invalid) {\n      label.validate();\n    }\n    var x = this._pointTo.x;\n    var y = this._pointTo.y;\n    var boundingRect = this._boundingRect;\n    var textW = label.measuredWidth;\n    var textH = label.measuredHeight;\n    var pointerLength = this.background.pointerLength;\n    var textX;\n    var textY;\n    if (this.ignoreBounds) {\n      boundingRect = undefined;\n    }\n    // try to handle if text is wider than br\n    if (boundingRect && this.fixDoc && textW > boundingRect.width) {\n      // TODO maybe this isn't needed ?\n      $utils.spritePointToDocument({\n        x: boundingRect.x,\n        y: boundingRect.y\n      }, this.parent);\n      var p1 = $utils.spritePointToDocument({\n        x: boundingRect.x + boundingRect.width,\n        y: boundingRect.y + boundingRect.height\n      }, this.parent);\n      var documentWidth = document.body.offsetWidth;\n      // TODO maybe this isn't needed ?\n      $utils.used(document.body.offsetHeight);\n      if (p1.x > documentWidth / 2) {\n        boundingRect.x = boundingRect.width - textW;\n      } else {\n        boundingRect.width = boundingRect.x + textW;\n      }\n    }\n    var pointerOrientation = this.pointerOrientation;\n    // horizontal\n    if (pointerOrientation == \"horizontal\" || pointerOrientation == \"left\" || pointerOrientation == \"right\") {\n      textY = -textH / 2;\n      if (pointerOrientation == \"horizontal\") {\n        if (boundingRect && x > boundingRect.x + boundingRect.width / 2) {\n          textX = -textW / 2 - pointerLength;\n        } else {\n          textX = textW / 2 + pointerLength;\n        }\n      } else if (pointerOrientation == \"left\") {\n        textX = textW / 2 + pointerLength;\n      } else {\n        textX = -textW / 2 - pointerLength;\n      }\n    }\n    // vertical pointer\n    else {\n      if (boundingRect) {\n        textX = $math.fitToRange(0, boundingRect.x - x + textW / 2, boundingRect.x - x + boundingRect.width - textW / 2);\n      }\n      if (pointerOrientation == \"vertical\") {\n        if (boundingRect && y > boundingRect.y + textH + pointerLength) {\n          textY = -textH - pointerLength;\n          this._verticalOrientation = \"up\";\n        } else {\n          textY = pointerLength;\n          this._verticalOrientation = \"down\";\n        }\n      } else if (pointerOrientation == \"down\") {\n        textY = -textH - pointerLength;\n        this._verticalOrientation = \"up\";\n      } else {\n        textY = pointerLength;\n        this._verticalOrientation = \"down\";\n      }\n    }\n    if (boundingRect) {\n      textY = $math.fitToRange(textY, boundingRect.y - y, boundingRect.y + boundingRect.height - textH - y);\n    }\n    label.x = textX;\n    label.y = textY;\n    this.drawBackground();\n  };\n  /**\r\n   * Overrides functionality from the superclass.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Tooltip.prototype.updateBackground = function () {\n    this.group.addToBack(this.background.group);\n  };\n  /**\r\n   * Draws Tooltip background (chrome, background and pointer/stem).\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Tooltip.prototype.drawBackground = function () {\n    var label = this.label;\n    var background = this.background;\n    var textWidth = label.measuredWidth;\n    var textHeight = label.measuredHeight;\n    var boundingRect = this._boundingRect;\n    var bgWidth = textWidth;\n    var bgX = label.pixelX - textWidth / 2;\n    var bgHeight = textHeight;\n    var bgY = label.pixelY;\n    var x = this._pointTo.x;\n    var y = this._pointTo.y;\n    var boundX1 = boundingRect.x - x;\n    var boundX2 = boundX1 + boundingRect.width;\n    var boundY1 = boundingRect.y - y;\n    var boundY2 = boundY1 + boundingRect.height;\n    background.x = bgX;\n    background.y = bgY;\n    background.width = bgWidth;\n    background.height = bgHeight;\n    if (this.fitPointerToBounds) {\n      background.pointerX = $math.fitToRange(-background.x, boundX1 - background.x, boundX2 - background.x);\n      background.pointerY = $math.fitToRange(-background.y, boundY1 - background.y, boundY2 - background.y);\n    } else {\n      background.pointerX = -background.x;\n      background.pointerY = -background.y;\n    }\n    background.validate();\n  };\n  /**\r\n   *\r\n   */\n  Tooltip.prototype.delayedPointTo = function (point, instantly) {\n    var _this = this;\n    if (this._pointToDisposer) {\n      this._pointToDisposer.dispose();\n    }\n    this._pointToDisposer = registry.events.once(\"exitframe\", function () {\n      _this.pointTo(point, instantly);\n    });\n    this.addDisposer(this._pointToDisposer);\n  };\n  /**\r\n   * Set nes tooltip's anchor point and moves whole tooltip.\r\n   *\r\n   * @param x  X coordinate\r\n   * @param y  Y coordinate\r\n   */\n  Tooltip.prototype.pointTo = function (point, instantly) {\n    if (this._pointTo.x != point.x || this._pointTo.y != point.y) {\n      this._pointTo = point;\n      this.invalidate();\n      // this helps to avoid strange animation from nowhere on initial show or when balloon was hidden already\n      if (!this.visible || instantly) {\n        this.moveTo(this._pointTo);\n        if (this._animation) {\n          this._animation.kill();\n        }\n      } else {\n        // helps to avoid flicker on top/left corner\n        if (this.pixelX == 0 && this.pixelY == 0) {\n          this.moveTo(this._pointTo);\n        } else {\n          if (this._animation) {\n            this._animation.kill();\n          }\n          this._animation = new Animation(this, [{\n            property: \"x\",\n            to: point.x,\n            from: this.pixelX\n          }, {\n            property: \"y\",\n            to: point.y,\n            from: this.pixelY\n          }], this.animationDuration, this.animationEasing).start();\n        }\n      }\n    }\n  };\n  /**\r\n   * Sets numeric boundaries Tooltip needs to obey (so it does not go outside\r\n   * specific area).\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param rectangle Boundary rectangle\r\n   */\n  Tooltip.prototype.setBounds = function (rectangle) {\n    var oldRect = this._boundingRect;\n    if (oldRect.x != rectangle.x || oldRect.y != rectangle.y || oldRect.width != rectangle.width || oldRect.height != rectangle.height) {\n      this._boundingRect = rectangle;\n      this.invalidate();\n    }\n  };\n  Object.defineProperty(Tooltip.prototype, \"boundingContainer\", {\n    /**\r\n     * Sets a [[Container]] instance to be used when calculating numeric\r\n     * boundaries for the Tooltip.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param container  Boundary container\r\n     */\n    set: function (container) {\n      this._boundingContainer = container;\n      // TODO remove closures ?\n      container.events.on(\"sizechanged\", this.updateBounds, this);\n      container.events.on(\"positionchanged\", this.updateBounds, this);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates numeric boundaries for the Tooltip, based on the\r\n   * `boundingCountrainer`.\r\n   */\n  Tooltip.prototype.updateBounds = function () {\n    var boundingContainer = this._boundingContainer;\n    // to global\n    var rect = $utils.spriteRectToSvg({\n      x: boundingContainer.pixelX,\n      y: boundingContainer.pixelY,\n      width: boundingContainer.maxWidth,\n      height: boundingContainer.maxHeight\n    }, boundingContainer);\n    this.setBounds(rect);\n  };\n  Object.defineProperty(Tooltip.prototype, \"ignoreBounds\", {\n    /**\r\n     * @return Ignore chart bounds?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"ignoreBounds\");\n    },\n    /**\r\n     * Normally, a tooltip's position will be adjusted so it always fits into\r\n     * chart's coundaries.\r\n     *\r\n     * Setting this to `false` will disable such checks and will allow tooltip\r\n     * to \"bleed over\" the edge of the chart.\r\n     *\r\n     * @default false\r\n     * @since 4.10.8\r\n     * @param  value  Ignore chart bounds?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"ignoreBounds\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Tooltip.prototype, \"verticalOrientation\", {\n    /**\r\n     * If tooltipOrientation is vertical, it can be drawn below or above point.\r\n     * We need to know this when solving overlapping.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return \"up\" | \"down\"\r\n     */\n    get: function () {\n      return this._verticalOrientation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Tooltip.prototype, \"tooltip\", {\n    /**\r\n     * To avoid stackoverflow\r\n     * @ignore\r\n     */\n    get: function () {\n      return undefined;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies properties and other attributes.\r\n   *\r\n   * @param source  Source\r\n   */\n  Tooltip.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    this.label.copyFrom(source.label);\n    if (source._boundingRect) {\n      this._boundingRect = source._boundingRect;\n    }\n  };\n  /**\r\n   * Adds easing functions to \"function\" fields.\r\n   *\r\n   * @param field  Field name\r\n   * @return Assign as function?\r\n   */\n  Tooltip.prototype.asFunction = function (field) {\n    return field == \"animationEasing\" || _super.prototype.asIs.call(this, field);\n  };\n  return Tooltip;\n}(Container);\nexport { Tooltip };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Tooltip\"] = Tooltip;","map":{"version":3,"names":["__extends","Container","registry","PointedRectangle","Label","Animation","color","DropShadowFilter","$math","$ease","$utils","Tooltip","_super","_this","call","_boundingRect","x","y","width","height","_pointTo","fitPointerToBounds","_verticalOrientation","fixDoc","className","isMeasured","getFillFromObject","margin","defaultState","transitionDuration","hiddenState","background","interactionsEnabled","fillOpacity","strokeWidth","strokeOpacity","stroke","cornerRadius","pointerLength","pointerBaseWidth","dropShadow","dy","dx","opacity","filters","push","autoTextColor","label","createChild","shouldClone","padding","horizontalCenter","fill","_disposers","events","on","drawBackground","zIndex","pointerOrientation","animationDuration","animationEasing","cubicOut","setPropertyValue","role","visible","handleVisibility","applyTheme","prototype","invalidate","Object","defineProperty","get","getPropertyValue","set","value","enumerable","configurable","hoverable","ev","targetSprite","isHover","createBackground","html","text","draw","invalid","validate","boundingRect","textW","measuredWidth","textH","measuredHeight","textX","textY","ignoreBounds","undefined","spritePointToDocument","parent","p1","documentWidth","document","body","offsetWidth","used","offsetHeight","fitToRange","updateBackground","group","addToBack","textWidth","textHeight","bgWidth","bgX","pixelX","bgHeight","bgY","pixelY","boundX1","boundX2","boundY1","boundY2","pointerX","pointerY","delayedPointTo","point","instantly","_pointToDisposer","dispose","once","pointTo","addDisposer","moveTo","_animation","kill","property","to","from","start","setBounds","rectangle","oldRect","container","_boundingContainer","updateBounds","boundingContainer","rect","spriteRectToSvg","maxWidth","maxHeight","copyFrom","source","asFunction","field","asIs","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/elements/Tooltip.js"],"sourcesContent":["/**\r\n * Provides functionality used to creating and showing tooltips (balloons).\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { PointedRectangle } from \"./PointedRectangle\";\r\nimport { Label } from \"../elements/Label\";\r\nimport { Animation } from \"../utils/Animation\";\r\nimport { color } from \"../utils/Color\";\r\nimport { DropShadowFilter } from \"../rendering/filters/DropShadowFilter\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $ease from \"../utils/Ease\";\r\nimport * as $utils from \"../utils/Utils\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Tooltip displays text and/or multimedia information in a balloon over chart\r\n * area.\r\n * @see {@link ITooltipEvents} for a list of available events\r\n * @see {@link ITooltipAdapters} for a list of available Adapters\r\n */\r\nvar Tooltip = /** @class */ (function (_super) {\r\n    __extends(Tooltip, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Tooltip() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Holds numeric boundary values. Calculated from the `boundingContainer`.\r\n         * @ignore\r\n         */\r\n        _this._boundingRect = { x: -40000, y: -40000, width: 80000, height: 80000 };\r\n        /**\r\n         * Coordinates tooltip's pointer (stem) should point to.\r\n         */\r\n        _this._pointTo = { x: 0, y: 0 };\r\n        /**\r\n         * If set to `true` the pointer/stem of the Tooltip will not go outside\r\n         * Tooltip's width or height depending on pointer's orientation.\r\n         *\r\n         * @default false\r\n         */\r\n        _this.fitPointerToBounds = false;\r\n        /**\r\n         * If `tooltipOrientation` is vertical, it can be drawn below or above point\r\n         * We need to know this when solving overlapping.\r\n         */\r\n        _this._verticalOrientation = \"up\";\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this.fixDoc = true;\r\n        _this.className = \"Tooltip\";\r\n        _this.isMeasured = false;\r\n        _this.getFillFromObject = true;\r\n        _this.margin(5, 5, 5, 5);\r\n        _this.defaultState.transitionDuration = 1;\r\n        _this.hiddenState.transitionDuration = 1;\r\n        // Create chrome/background\r\n        var background = _this.background;\r\n        background.interactionsEnabled = false;\r\n        background.fillOpacity = 0.9;\r\n        background.strokeWidth = 1;\r\n        background.strokeOpacity = 1;\r\n        background.stroke = color(\"#ffffff\");\r\n        background.cornerRadius = 3;\r\n        background.pointerLength = 6;\r\n        background.pointerBaseWidth = 10;\r\n        var dropShadow = new DropShadowFilter();\r\n        dropShadow.dy = 1;\r\n        dropShadow.dx = 1;\r\n        dropShadow.opacity = 0.5;\r\n        background.filters.push(dropShadow);\r\n        _this.autoTextColor = true;\r\n        // Create text element\r\n        var label = _this.createChild(Label);\r\n        label.shouldClone = false;\r\n        _this.label = label;\r\n        label.padding(7, 12, 4, 12);\r\n        label.interactionsEnabled = false;\r\n        label.horizontalCenter = \"middle\";\r\n        label.fill = color(\"#ffffff\");\r\n        _this._disposers.push(label);\r\n        _this.label.events.on(\"sizechanged\", _this.drawBackground, _this);\r\n        _this.label.zIndex = 1; // @todo remove this line when bg sorting is solved\r\n        // Set defaults\r\n        _this.pointerOrientation = \"vertical\";\r\n        _this.animationDuration = 0;\r\n        _this.animationEasing = $ease.cubicOut;\r\n        _this.setPropertyValue(\"showInViewport\", false);\r\n        // Set accessibility options\r\n        _this.role = \"tooltip\";\r\n        _this.visible = false;\r\n        _this.opacity = 0;\r\n        _this.x = 0;\r\n        _this.y = 0;\r\n        _this.events.on(\"visibilitychanged\", _this.handleVisibility, _this);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Tooltip.prototype.handleVisibility = function () {\r\n        if (this.visible) {\r\n            this.label.invalidate();\r\n        }\r\n    };\r\n    Object.defineProperty(Tooltip.prototype, \"getStrokeFromObject\", {\r\n        /**\r\n         * Specifies if tooltip background should get stroke color from the sprite it is pointing to.\r\n         *\r\n         * @return {boolean}\r\n         * @default false\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"getStrokeFromObject\");\r\n        },\r\n        /**\r\n         * Specifies if tooltip background should get stroke color from the sprite it is pointing to.\r\n         *\r\n         * @param value boolean\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"getStrokeFromObject\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Tooltip.prototype, \"autoTextColor\", {\r\n        /**\r\n         * @return {boolean}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"autoTextColor\");\r\n        },\r\n        /**\r\n         * Specifies if text color should be chosen automatically for a better\r\n         * readability.\r\n         *\r\n         * IMPORTANT: this feature is generally ignored, if `getFillFromObject = false`.\r\n         *\r\n         * If inheriting of `fill` color from object tooltip is displayed for is\r\n         * disabled, this feature will not work. If you are explicitly setting a\r\n         * color for tooltip background, you may set a color for its label as well\r\n         * using `tooltip.label.fill` property.\r\n         *\r\n         *\r\n         * @param value boolean\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"autoTextColor\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Tooltip.prototype, \"keepTargetHover\", {\r\n        /**\r\n         * @return Keep target hovered?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"keepTargetHover\");\r\n        },\r\n        /**\r\n         * If this tooltip is displayed on hover on some other object, keep that\r\n         * element hovered if hovering on the tooltip.\r\n         *\r\n         * @default false\r\n         * @since 4.1.13\r\n         * @param  value  Keep target hovered?\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            if (this.setPropertyValue(\"keepTargetHover\", value, true)) {\r\n                if (value) {\r\n                    this.hoverable = true;\r\n                    this.background.interactionsEnabled = true;\r\n                    this._disposers.push(this.events.on(\"over\", function (ev) {\r\n                        if (_this.targetSprite && _this.targetSprite.hoverable) {\r\n                            _this.targetSprite.isHover = true;\r\n                        }\r\n                    }));\r\n                    this._disposers.push(this.events.on(\"out\", function (ev) {\r\n                        if (_this.targetSprite && _this.targetSprite.hoverable) {\r\n                            //this.hideTooltip();\r\n                            //this.targetSprite.handleOut();\r\n                            _this.targetSprite.isHover = false;\r\n                        }\r\n                    }));\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Tooltip.prototype, \"showInViewport\", {\r\n        /**\r\n         * @return Force showing tooltip?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"showInViewport\");\r\n        },\r\n        /**\r\n         * Normally, a tooltip will hide itself if it is pointing to a coordinate\r\n         * that is outside viewport.\r\n         *\r\n         * Setting this setting to `true` will override that and make tooltip\r\n         * appear next to the viewport edge closest to the target point.\r\n         *\r\n         * @default false\r\n         * @since 4.5.7\r\n         * @param  value  Force showing tooltip?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"showInViewport\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Tooltip.prototype, \"getFillFromObject\", {\r\n        /**\r\n         * Specifies if tooltip background should get fill color from the sprite it is pointing to.\r\n         *\r\n         * @return {boolean}\r\n         * @default true\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"getFillFromObject\");\r\n        },\r\n        /**\r\n         * @param value boolean\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"getFillFromObject\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates and returns a background element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Background\r\n     */\r\n    Tooltip.prototype.createBackground = function () {\r\n        return new PointedRectangle();\r\n    };\r\n    Object.defineProperty(Tooltip.prototype, \"pointerOrientation\", {\r\n        /**\r\n         * @return Orientation\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"pointerOrientation\");\r\n        },\r\n        /**\r\n         * Pointer orientation: `\"horizontal\"`, `\"vertical\"`, `\"up\"`, `\"down\"`,\r\n         * `\"right\"`, or `\"left\"`.\r\n         *\r\n         * Options`\"horizontal\"` or `\"vertical\"` are location-aware, meaning they\r\n         * will change position of the Tooltip based on the target point's position\r\n         * in relation to chart center.\r\n         *\r\n         * Options `\"up\"`, `\"down\"`, `\"right\"`, `\"left\"` are static and will point\r\n         * in the specified direction regardless of the position, even if that means\r\n         * going out of chart/screen bounds.\r\n         *\r\n         * IMPORTANT: in some situations, like having multiple tooltips stacked for\r\n         * multiple series, the `\"up\"` and `\"down\"` values might be ignored in order\r\n         * to make tooltip overlap algorithm work.\r\n         *\r\n         * @default \"vertical\"\r\n         * @param  value  Orientation\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"pointerOrientation\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Tooltip.prototype, \"animationDuration\", {\r\n        /**\r\n         * @return Orientation\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"animationDuration\");\r\n        },\r\n        /**\r\n         * Duration in milliseconds for the animation to take place when the tooltip\r\n         * is moving from one place to another.\r\n         *\r\n         * @default 0\r\n         * @param value  number\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"animationDuration\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Tooltip.prototype, \"animationEasing\", {\r\n        /**\r\n         * @return {Function}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"animationEasing\");\r\n        },\r\n        /**\r\n         * Tooltip animation (moving from one place to another) easing function.\r\n         *\r\n         * @default $ease.cubicOut\r\n         * @param value (value: number) => number\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"animationEasing\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Tooltip.prototype, \"html\", {\r\n        /**\r\n         * @return HTML content\r\n         */\r\n        get: function () {\r\n            return this.label.html;\r\n        },\r\n        /**\r\n         * HTML content for the Tooltip.\r\n         *\r\n         * Provided value will be used as is, without applying any further\r\n         * formatting to it.\r\n         *\r\n         * @param value  HTML content\r\n         */\r\n        set: function (value) {\r\n            if (this.label.html != value) {\r\n                this.label.html = value;\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Tooltip.prototype, \"text\", {\r\n        /**\r\n         * @return SVG text\r\n         */\r\n        get: function () {\r\n            return this.label.text;\r\n        },\r\n        /**\r\n         * SVG text content for the Tooltip.\r\n         *\r\n         * Text can have a number of formatting options supported by\r\n         * [[TextFormatter]].\r\n         *\r\n         * @param value  SVG text\r\n         */\r\n        set: function (value) {\r\n            if (this.label.text != value) {\r\n                this.label.text = value;\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates the Tooltip.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Tooltip.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        var label = this.label;\r\n        if (label.invalid) {\r\n            label.validate();\r\n        }\r\n        var x = this._pointTo.x;\r\n        var y = this._pointTo.y;\r\n        var boundingRect = this._boundingRect;\r\n        var textW = label.measuredWidth;\r\n        var textH = label.measuredHeight;\r\n        var pointerLength = this.background.pointerLength;\r\n        var textX;\r\n        var textY;\r\n        if (this.ignoreBounds) {\r\n            boundingRect = undefined;\r\n        }\r\n        // try to handle if text is wider than br\r\n        if (boundingRect && this.fixDoc && textW > boundingRect.width) {\r\n            // TODO maybe this isn't needed ?\r\n            $utils.spritePointToDocument({ x: boundingRect.x, y: boundingRect.y }, this.parent);\r\n            var p1 = $utils.spritePointToDocument({ x: boundingRect.x + boundingRect.width, y: boundingRect.y + boundingRect.height }, this.parent);\r\n            var documentWidth = document.body.offsetWidth;\r\n            // TODO maybe this isn't needed ?\r\n            $utils.used(document.body.offsetHeight);\r\n            if (p1.x > documentWidth / 2) {\r\n                boundingRect.x = boundingRect.width - textW;\r\n            }\r\n            else {\r\n                boundingRect.width = boundingRect.x + textW;\r\n            }\r\n        }\r\n        var pointerOrientation = this.pointerOrientation;\r\n        // horizontal\r\n        if (pointerOrientation == \"horizontal\" || pointerOrientation == \"left\" || pointerOrientation == \"right\") {\r\n            textY = -textH / 2;\r\n            if (pointerOrientation == \"horizontal\") {\r\n                if (boundingRect && x > boundingRect.x + boundingRect.width / 2) {\r\n                    textX = -textW / 2 - pointerLength;\r\n                }\r\n                else {\r\n                    textX = textW / 2 + pointerLength;\r\n                }\r\n            }\r\n            else if (pointerOrientation == \"left\") {\r\n                textX = textW / 2 + pointerLength;\r\n            }\r\n            else {\r\n                textX = -textW / 2 - pointerLength;\r\n            }\r\n        }\r\n        // vertical pointer\r\n        else {\r\n            if (boundingRect) {\r\n                textX = $math.fitToRange(0, boundingRect.x - x + textW / 2, boundingRect.x - x + boundingRect.width - textW / 2);\r\n            }\r\n            if (pointerOrientation == \"vertical\") {\r\n                if (boundingRect && y > boundingRect.y + textH + pointerLength) {\r\n                    textY = -textH - pointerLength;\r\n                    this._verticalOrientation = \"up\";\r\n                }\r\n                else {\r\n                    textY = pointerLength;\r\n                    this._verticalOrientation = \"down\";\r\n                }\r\n            }\r\n            else if (pointerOrientation == \"down\") {\r\n                textY = -textH - pointerLength;\r\n                this._verticalOrientation = \"up\";\r\n            }\r\n            else {\r\n                textY = pointerLength;\r\n                this._verticalOrientation = \"down\";\r\n            }\r\n        }\r\n        if (boundingRect) {\r\n            textY = $math.fitToRange(textY, boundingRect.y - y, boundingRect.y + boundingRect.height - textH - y);\r\n        }\r\n        label.x = textX;\r\n        label.y = textY;\r\n        this.drawBackground();\r\n    };\r\n    /**\r\n     * Overrides functionality from the superclass.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Tooltip.prototype.updateBackground = function () {\r\n        this.group.addToBack(this.background.group);\r\n    };\r\n    /**\r\n     * Draws Tooltip background (chrome, background and pointer/stem).\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Tooltip.prototype.drawBackground = function () {\r\n        var label = this.label;\r\n        var background = this.background;\r\n        var textWidth = label.measuredWidth;\r\n        var textHeight = label.measuredHeight;\r\n        var boundingRect = this._boundingRect;\r\n        var bgWidth = textWidth;\r\n        var bgX = label.pixelX - textWidth / 2;\r\n        var bgHeight = textHeight;\r\n        var bgY = label.pixelY;\r\n        var x = this._pointTo.x;\r\n        var y = this._pointTo.y;\r\n        var boundX1 = boundingRect.x - x;\r\n        var boundX2 = boundX1 + boundingRect.width;\r\n        var boundY1 = boundingRect.y - y;\r\n        var boundY2 = boundY1 + boundingRect.height;\r\n        background.x = bgX;\r\n        background.y = bgY;\r\n        background.width = bgWidth;\r\n        background.height = bgHeight;\r\n        if (this.fitPointerToBounds) {\r\n            background.pointerX = $math.fitToRange(-background.x, boundX1 - background.x, boundX2 - background.x);\r\n            background.pointerY = $math.fitToRange(-background.y, boundY1 - background.y, boundY2 - background.y);\r\n        }\r\n        else {\r\n            background.pointerX = -background.x;\r\n            background.pointerY = -background.y;\r\n        }\r\n        background.validate();\r\n    };\r\n    /**\r\n     *\r\n     */\r\n    Tooltip.prototype.delayedPointTo = function (point, instantly) {\r\n        var _this = this;\r\n        if (this._pointToDisposer) {\r\n            this._pointToDisposer.dispose();\r\n        }\r\n        this._pointToDisposer = registry.events.once(\"exitframe\", function () {\r\n            _this.pointTo(point, instantly);\r\n        });\r\n        this.addDisposer(this._pointToDisposer);\r\n    };\r\n    /**\r\n     * Set nes tooltip's anchor point and moves whole tooltip.\r\n     *\r\n     * @param x  X coordinate\r\n     * @param y  Y coordinate\r\n     */\r\n    Tooltip.prototype.pointTo = function (point, instantly) {\r\n        if (this._pointTo.x != point.x || this._pointTo.y != point.y) {\r\n            this._pointTo = point;\r\n            this.invalidate();\r\n            // this helps to avoid strange animation from nowhere on initial show or when balloon was hidden already\r\n            if (!this.visible || instantly) {\r\n                this.moveTo(this._pointTo);\r\n                if (this._animation) {\r\n                    this._animation.kill();\r\n                }\r\n            }\r\n            else {\r\n                // helps to avoid flicker on top/left corner\r\n                if (this.pixelX == 0 && this.pixelY == 0) {\r\n                    this.moveTo(this._pointTo);\r\n                }\r\n                else {\r\n                    if (this._animation) {\r\n                        this._animation.kill();\r\n                    }\r\n                    this._animation = new Animation(this, [{ property: \"x\", to: point.x, from: this.pixelX }, { property: \"y\", to: point.y, from: this.pixelY }], this.animationDuration, this.animationEasing).start();\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets numeric boundaries Tooltip needs to obey (so it does not go outside\r\n     * specific area).\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param rectangle Boundary rectangle\r\n     */\r\n    Tooltip.prototype.setBounds = function (rectangle) {\r\n        var oldRect = this._boundingRect;\r\n        if (oldRect.x != rectangle.x || oldRect.y != rectangle.y || oldRect.width != rectangle.width || oldRect.height != rectangle.height) {\r\n            this._boundingRect = rectangle;\r\n            this.invalidate();\r\n        }\r\n    };\r\n    Object.defineProperty(Tooltip.prototype, \"boundingContainer\", {\r\n        /**\r\n         * Sets a [[Container]] instance to be used when calculating numeric\r\n         * boundaries for the Tooltip.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param container  Boundary container\r\n         */\r\n        set: function (container) {\r\n            this._boundingContainer = container;\r\n            // TODO remove closures ?\r\n            container.events.on(\"sizechanged\", this.updateBounds, this);\r\n            container.events.on(\"positionchanged\", this.updateBounds, this);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Updates numeric boundaries for the Tooltip, based on the\r\n     * `boundingCountrainer`.\r\n     */\r\n    Tooltip.prototype.updateBounds = function () {\r\n        var boundingContainer = this._boundingContainer;\r\n        // to global\r\n        var rect = $utils.spriteRectToSvg({\r\n            x: boundingContainer.pixelX,\r\n            y: boundingContainer.pixelY,\r\n            width: boundingContainer.maxWidth,\r\n            height: boundingContainer.maxHeight\r\n        }, boundingContainer);\r\n        this.setBounds(rect);\r\n    };\r\n    Object.defineProperty(Tooltip.prototype, \"ignoreBounds\", {\r\n        /**\r\n         * @return Ignore chart bounds?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"ignoreBounds\");\r\n        },\r\n        /**\r\n         * Normally, a tooltip's position will be adjusted so it always fits into\r\n         * chart's coundaries.\r\n         *\r\n         * Setting this to `false` will disable such checks and will allow tooltip\r\n         * to \"bleed over\" the edge of the chart.\r\n         *\r\n         * @default false\r\n         * @since 4.10.8\r\n         * @param  value  Ignore chart bounds?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"ignoreBounds\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Tooltip.prototype, \"verticalOrientation\", {\r\n        /**\r\n         * If tooltipOrientation is vertical, it can be drawn below or above point.\r\n         * We need to know this when solving overlapping.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return \"up\" | \"down\"\r\n         */\r\n        get: function () {\r\n            return this._verticalOrientation;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Tooltip.prototype, \"tooltip\", {\r\n        /**\r\n         * To avoid stackoverflow\r\n         * @ignore\r\n         */\r\n        get: function () {\r\n            return undefined;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies properties and other attributes.\r\n     *\r\n     * @param source  Source\r\n     */\r\n    Tooltip.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.label.copyFrom(source.label);\r\n        if (source._boundingRect) {\r\n            this._boundingRect = source._boundingRect;\r\n        }\r\n    };\r\n    /**\r\n     * Adds easing functions to \"function\" fields.\r\n     *\r\n     * @param field  Field name\r\n     * @return Assign as function?\r\n     */\r\n    Tooltip.prototype.asFunction = function (field) {\r\n        return field == \"animationEasing\" || _super.prototype.asIs.call(this, field);\r\n    };\r\n    return Tooltip;\r\n}(Container));\r\nexport { Tooltip };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Tooltip\"] = Tooltip;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}