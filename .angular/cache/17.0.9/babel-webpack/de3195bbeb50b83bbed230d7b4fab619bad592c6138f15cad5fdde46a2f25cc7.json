{"ast":null,"code":"/**\r\n * This is the main class that encapsulates every object on the chart.\r\n *\r\n * If it's an element that is to be displayed on the screen at some point, its\r\n * class must extend [[Sprite]] class.\r\n */\nimport { __extends, __values } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { SpriteState } from \"./SpriteState\";\nimport { SpriteEventDispatcher } from \"./SpriteEvents\";\nexport { SpriteEventDispatcher };\nimport { BaseObjectEvents } from \"./Base\";\nimport { Adapter, globalAdapter } from \"./utils/Adapter\";\nimport { Dictionary, DictionaryTemplate, DictionaryDisposer } from \"./utils/Dictionary\";\nimport { ListDisposer, List } from \"./utils/List\";\nimport { MultiDisposer, Disposer, MutableValueDisposer } from \"./utils/Disposer\";\nimport { Animation, AnimationDisposer } from \"./utils/Animation\";\nimport { getGhostPaper } from \"./rendering/Paper\";\nimport { Container } from \"./Container\";\nimport { Pattern } from \"./rendering/fills/Pattern\";\nimport { LinearGradient } from \"./rendering/fills/LinearGradient\";\nimport { RadialGradient } from \"./rendering/fills/RadialGradient\";\nimport { Color, color, toColor } from \"./utils/Color\";\nimport { getInteraction } from \"./interaction/Interaction\";\nimport { MouseCursorStyle } from \"./interaction/Mouse\";\nimport { options } from \"./Options\";\nimport { registry } from \"./Registry\";\nimport { NumberFormatter } from \"./formatters/NumberFormatter\";\nimport { DateFormatter } from \"./formatters/DateFormatter\";\nimport { DurationFormatter } from \"./formatters/DurationFormatter\";\nimport { getTextFormatter } from \"./formatters/TextFormatter\";\nimport { Language } from \"./utils/Language\";\nimport { Export } from \"./export/Export\";\nimport * as $utils from \"./utils/Utils\";\nimport * as $math from \"./utils/Math\";\nimport * as $strings from \"./utils/Strings\";\nimport * as $array from \"./utils/Array\";\nimport * as $object from \"./utils/Object\";\nimport * as $type from \"./utils/Type\";\nimport * as $iter from \"./utils/Iterator\";\nimport { system } from \"./System\";\nimport { Percent, percent } from \"./utils/Percent\";\n/**\r\n * Defines list ofvisual properties\r\n */\nexport var visualProperties = [\"fill\", \"fillOpacity\", \"stroke\", \"strokeOpacity\", \"strokeWidth\", \"strokeDasharray\", \"strokeDashoffset\", \"strokeLinecap\", \"strokeLinejoin\"]; // do not add opacity here, as it is used for showing/hiding\n;\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Sprite represents any displayable element.\r\n *\r\n * This is the main class that encapsulates every object on the chart.\r\n *\r\n * If it's an element that is to be displayed on the screen at some point, its\r\n * class must extend [[Sprite]] class.\r\n *\r\n * [[Sprite]] class represents the a hierarchical structure. Every object that\r\n * extends [[Sprite]] can have children, that would inherit their properties,\r\n * such as language, formatters, etc.\r\n *\r\n * @see {@link SpriteState}\r\n * @see {@link ISpriteEvents} for a list of available events\r\n * @see {@link ISpriteAdapters} for a list of available Adapters\r\n *\r\n * @todo Review child elements that need to go into `_disposers`\r\n * @important\r\n */\nvar Sprite = /** @class */function (_super) {\n  __extends(Sprite, _super);\n  /**\r\n   * Constructor:\r\n   * * Creates initial node\r\n   * * Sets default properties\r\n   * * Creates required default states\r\n   * * Inits accessibility\r\n   */\n  function Sprite() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * Holds values for Sprite's properties.\r\n     */\n    _this.properties = {};\n    /**\r\n     * @ignore\r\n     */\n    _this._eventDispatcher = new SpriteEventDispatcher(_this);\n    /**\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n    _this._bindings = {};\n    /**\r\n     * Holds indicator if this Sprite is a \"template\" to be used for creating\r\n     * other Sprites from and should not be treated as full-fledged element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._isTemplate = false;\n    _this._isPath = false;\n    /**\r\n     * Holds indicator whether this sprite was already initialized.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._inited = false;\n    /**\r\n     * Holds indicator whether this sprite was already initialized and ready.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._ready = false;\n    /**\r\n     * If `sprite.hide()` is called and we have \"hidden\" state and\r\n     * `transitionDuration > 0`, we set `isHiding` flag to `true` in order to\r\n     * avoid restarting animations in case `hide()` method is called multiple\r\n     * times.\r\n     */\n    _this.isHiding = false;\n    /**\r\n     * If `sprite.hide()` is called, we set isHidden to true when sprite is hidden.\r\n     * This was added becaus hidden state might have visibility set to true and so\r\n     * there would not be possible to find out if a sprite is technically hidden or not.\r\n     */\n    _this._isHidden = false;\n    /**\r\n     * This property indicates if Sprite is currently being revealed from hidden\r\n     * state. This is used to prevent multiple calls to `sprite.show()` to\r\n     * restart reveal animation. (if enabled)\r\n     */\n    _this.isShowing = false;\n    /**\r\n     * Indicates if this element is a standalone instance. A \"standalone\r\n     * instance\" means this is a autonomous object which maintains its own\r\n     * set of controls like Preloader, Export, etc.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this.isStandaloneInstance = false;\n    /**\r\n     * Indicates if togglable Sprite is currently active (toggled on).\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._isActive = false;\n    /**\r\n     * A Sprite element to use as a mask for this Sprite.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._mask = new MutableValueDisposer();\n    /**\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n    _this._positionPrecision = 3;\n    /**\r\n     * An instance of [[Language]].\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._language = new MutableValueDisposer();\n    /**\r\n     * Holds [[Export]] object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._exporting = new MutableValueDisposer();\n    /**\r\n     * Should this Sprite be included when exporting?\r\n     */\n    _this._exportable = true;\n    /**\r\n     * Defines bounding box (square) for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._bbox = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n    /**\r\n     * Indicates if this element is invalid and should be re-validated (redrawn).\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this.invalid = false;\n    /**\r\n     * Indicates if this elements position is invalid and should be repositioned\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this.positionInvalid = false;\n    /**\r\n     * A collection of key/value pairs that can be used to bind specific Sprite\r\n     * properties to [[DataItem]].\r\n     *\r\n     * For example: `fill` property can be bound to `myCustomColor` field in\r\n     * DataItem. The Sprite will automatically get the value for `fill` from its\r\n     * DataItem.\r\n     *\r\n     * Can be set for each [[SpriteState]] individually to override default\r\n     * bindings.\r\n     *\r\n     * @see {@link SpriteState}\r\n     */\n    _this.propertyFields = {};\n    /**\r\n     * Specifies if property changes on this object should be propagated to the\r\n     * objects cloned from this object.\r\n     *\r\n     * This setting affects property changes *after* cloning, since at the moment\r\n     * of cloning all of properties from source object are copied to the clone\r\n     * anyway.\r\n     *\r\n     * @default false\r\n     */\n    _this.applyOnClones = false;\n    // unrotated unscaled\n    _this._measuredWidthSelf = 0;\n    _this._measuredHeightSelf = 0;\n    // read only, sprite extreme coordinates\n    /**\r\n     * @ignore\r\n     */\n    _this.maxLeft = 0;\n    /**\r\n     * @ignore\r\n     */\n    _this.maxRight = 0;\n    /**\r\n     * @ignore\r\n     */\n    _this.maxTop = 0;\n    /**\r\n     * @ignore\r\n     */\n    _this.maxBottom = 0;\n    // not rotated and not scaled\n    /**\r\n     * @ignore\r\n     */\n    _this.maxLeftSelf = 0;\n    /**\r\n     * @ignore\r\n     */\n    _this.maxRightSelf = 0;\n    /**\r\n     * @ignore\r\n     */\n    _this.maxTopSelf = 0;\n    /**\r\n     * @ignore\r\n     */\n    _this.maxBottomSelf = 0;\n    _this._isDragged = false;\n    _this._isResized = false;\n    /**\r\n     * @deprecated Moved to [[SpriteProperties]]\r\n     */\n    _this._disabled = false;\n    _this._internalDisabled = false;\n    _this._updateDisabled = false;\n    _this._internalDefaultsApplied = false;\n    /**\r\n     * Time in milliseconds after which rollout event happens when user rolls-out of the sprite. This helps to avoid flickering in some cases.\r\n     */\n    _this.rollOutDelay = 0;\n    /**\r\n     * This flag is set to `true` for the initial sprite you create and place\r\n     * to the div so that we could clear all additional\r\n     * sprites/containers when this sprite is disposed.\r\n     *\r\n     * @ignore\r\n     */\n    _this.isBaseSprite = false;\n    /**\r\n     * Indicates whether this sprite should be cloned when cloning its parent\r\n     * container. We set this to `false` in those cases when a sprite is created\r\n     * by the class, so that when cloning a duplicate sprite would not appear.\r\n     */\n    _this.shouldClone = true;\n    /**\r\n     * A read-only flag which indicates if a sprite has completed its initial\r\n     * animation (if `showOnInit = true`).\r\n     *\r\n     * In case `showOnInit = false`, `appeared` is set to `true` on init.\r\n     *\r\n     * @readonly\r\n     */\n    _this.appeared = false;\n    /**\r\n     * [ex description]\r\n     *\r\n     * @todo Description\r\n     * @ignore\r\n     */\n    _this.ex = 0;\n    /**\r\n     * [ey description]\r\n     *\r\n     * @todo Description\r\n     * @ignore\r\n     */\n    _this.ey = 0;\n    /**\r\n     * Indicates if the sprite can be moved around when resizing it with two fingers (will only work if draggable = false)\r\n     * @ignore\r\n     */\n    _this.dragWhileResize = false;\n    /**\r\n     *  @ignore\r\n     */\n    _this.measureFailed = false;\n    /**\r\n     * If this flag is set to true, calling show() will not reveal the sprite.\r\n     *\r\n     * @ignore\r\n     */\n    _this.preventShow = false;\n    /**\r\n     * When cloning a sprite, if the template has it's own tooltip assigned, this tooltip is also cloned by default.\r\n     * This is not good for cpu and sometimes you might only need one single tooltip for all clones. Set this to false in order not to clone tooltip.\r\n     */\n    _this.cloneTooltip = true;\n    _this.className = \"Sprite\";\n    _this._disposers.push(_this._eventDispatcher);\n    // Generate a unique ID\n    $utils.used(_this.uid);\n    // Create SVG group to hold everything in\n    _this.group = _this.paper.addGroup(\"g\");\n    // Set defaults\n    // it is better to set defauls like this in order to save invaliation calls and events\n    _this.setPropertyValue(\"scale\", 1);\n    _this.setPropertyValue(\"rotation\", 0);\n    _this.setPropertyValue(\"align\", \"none\");\n    _this.setPropertyValue(\"valign\", \"none\");\n    _this.setPropertyValue(\"pixelPerfect\", false);\n    _this.setPropertyValue(\"visible\", true);\n    _this.setPropertyValue(\"tooltipPosition\", \"fixed\");\n    _this.setPropertyValue(\"verticalCenter\", \"none\");\n    _this.setPropertyValue(\"horizontalCenter\", \"none\");\n    _this.setPropertyValue(\"tooltipX\", percent(50));\n    _this.setPropertyValue(\"tooltipX\", percent(50));\n    _this.setPropertyValue(\"marginTop\", 0);\n    _this.setPropertyValue(\"marginBottom\", 0);\n    _this.setPropertyValue(\"marginLeft\", 0);\n    _this.setPropertyValue(\"marginRight\", 0);\n    _this.setPropertyValue(\"dx\", 0);\n    _this.setPropertyValue(\"dy\", 0);\n    _this.setPropertyValue(\"paddingTop\", 0);\n    _this.setPropertyValue(\"paddingBottom\", 0);\n    _this.setPropertyValue(\"paddingRight\", 0);\n    _this.setPropertyValue(\"paddingLeft\", 0);\n    _this.setPropertyValue(\"togglable\", false);\n    _this.setPropertyValue(\"hidden\", false);\n    _this.setPropertyValue(\"urlTarget\", \"_self\");\n    _this.setPropertyValue(\"alwaysShowTooltip\", false);\n    _this.setPropertyValue(\"showTooltipOn\", \"hover\");\n    _this._prevMeasuredWidth = 0;\n    _this._prevMeasuredHeight = 0;\n    _this._measuredWidth = 0;\n    _this._measuredHeight = 0;\n    _this._isMeasured = true;\n    // Invalidate the Sprite so that renderer knows it needs to be drawn\n    _this.invalidate();\n    //this.states.create(\"default\").properties.opacity = 1;\n    // Apply the theme\n    _this.applyTheme();\n    //this._disposers.push(this._clickable);\n    // Decorate adapter with events so that we can apply its settings whenever\n    // it is modified\n    // @todo Think what to do here. We can't just apply the adapter value to\n    // property since not all of those are for properties. Commented out for\n    // now.\n    /*this.adapter.events.on(\"inserted\", (ev: any) => {\r\n        (<any>this)[ev.newValue.key] = (<any>this)[ev.newValue.key];\r\n    });\r\n    this.adapter.events.on(\"removed\", (ev: any) => {\r\n        (<any>this)[ev.newValue.key] = (<any>this)[ev.newValue.key];\r\n    });*/\n    // Add disposable dependencies to `_disposers` so they are automatically\n    // disposed of when this object is disposed\n    _this._disposers.push(_this.events);\n    _this._disposers.push(_this.group);\n    _this._disposers.push(_this._mask);\n    _this._disposers.push(_this._language);\n    _this._disposers.push(_this._exporting);\n    //this._disposers.push(this._parent);\n    //this._disposers.push(this._modal);\n    _this._disposers.push(new Disposer(function () {\n      $object.each(_this._bindings, function (key, value) {\n        value.dispose();\n      });\n    }));\n    _this.setPropertyValue(\"interactionsEnabled\", true);\n    return _this;\n  }\n  Object.defineProperty(Sprite.prototype, \"events\", {\n    /**\r\n     * Event dispatcher.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/event-listeners/} for more info about Events\r\n     */\n    get: function () {\n      return this._eventDispatcher;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"adapter\", {\n    /**\r\n     * Holds Adapter.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/adapters/} for more info about Adapters\r\n     */\n    get: function () {\n      if (!this._adapterO) {\n        this._adapterO = new Adapter(this);\n      }\n      return this._adapterO;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * ==========================================================================\r\n   * ELEMENT VALIDATION, INIT, AND DRAWING STUFF\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n  /**\r\n   * Applies properties from all assigned themes.\r\n   *\r\n   * We do this here so that we can apply class names as well.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.applyTheme = function () {\n    _super.prototype.applyTheme.call(this);\n    if (options.autoSetClassName) {\n      this.setClassName();\n    }\n  };\n  /**\r\n   * Returns theme(s) used by this object either set explicitly on this\r\n   * element, inherited from parent, or inherited from [[System]].\r\n   *\r\n   * @return An array of theme references\r\n   */\n  Sprite.prototype.getCurrentThemes = function () {\n    var themes = this._themes;\n    if (themes) {\n      return themes;\n    } else {\n      var parent_1 = this._parent;\n      if (parent_1) {\n        return parent_1.getCurrentThemes();\n      } else {\n        return registry.themes;\n      }\n    }\n  };\n  /**\r\n   * Called just before element's validation, this function allows setting\r\n   * defaults.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.applyInternalDefaults = function () {\n    // Nothing here, but extending classes might override this function\n    // so that they can set their defaults\n    this._internalDefaultsApplied = true;\n  };\n  /**\r\n   * Invalidates element.\r\n   *\r\n   * Object will be redrawn during the next update cycle.\r\n   *\r\n   * Please note that in most cases elements will auto-invalidate when needed. If\r\n   * everything works, DO NOT use this method. Use it only if some changes do\r\n   * not take otherwise.\r\n   */\n  Sprite.prototype.invalidate = function () {\n    if (this.disabled || this._isTemplate || this.__disabled) {\n      return;\n    }\n    // We no longer reset this on each invalidate, so that they are applied\n    // only once, and do not overwrite user-defined settings\n    //this._internalDefaultsApplied = false;\n    if (!this.invalid) {\n      this.invalid = true;\n      registry.addToInvalidSprites(this);\n      system.requestFrame();\n    }\n  };\n  /**\r\n   * Validates element:\r\n   * * Triggers events\r\n   * * Redraws the element\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.validate = function () {\n    this.dispatchImmediately(\"beforevalidated\");\n    // prevents from drawing if topparent is 0x0\n    /*\r\n    let topParent = this.topParent;\r\n      if (topParent) {\r\n        if (!topParent.maxWidth || !topParent.maxHeight) {\r\n            this._disposers.push(topParent.events.once(\"maxsizechanged\", this.invalidate, this));\r\n        }\r\n    }*/\n    // Set internal defaults\n    if (!this._internalDefaultsApplied) {\n      this.applyInternalDefaults();\n    }\n    this.beforeDraw();\n    this.draw();\n    this.invalid = false;\n    registry.removeFromInvalidSprites(this);\n    this.afterDraw();\n  };\n  /**\r\n   * Invalidates element's position.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.invalidatePosition = function () {\n    if (this.disabled || this._isTemplate) {\n      return;\n    }\n    if (!this.positionInvalid) {\n      this.positionInvalid = true;\n      registry.addToInvalidPositions(this);\n      system.requestFrame();\n    }\n  };\n  /**\r\n   * Transforms the element.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.validatePosition = function () {\n    var pixelX = this.pixelX;\n    var pixelY = this.pixelY;\n    var dx = this.dx;\n    var dy = this.dy;\n    var x = pixelX + dx;\n    var y = pixelY + dy;\n    if (this._updateDisabled) {\n      if (this._internalDisabled) {\n        this.group.attr({\n          \"display\": \"none\"\n        });\n      } else {\n        if (!this.disabled) {\n          this.removeSVGAttribute(\"display\");\n        }\n      }\n      this._updateDisabled = false;\n    }\n    var sizeChanged = this.measure();\n    //if (!this.invalid) {\n    var prevGroupTransform = this.group.transformString;\n    this.group.moveTo({\n      x: x,\n      y: y\n    });\n    this.group.rotation = this.rotation;\n    if (this.nonScaling) {\n      this.group.scale = this.scale / this.globalScale;\n    } else {\n      this.group.scale = this.scale;\n    }\n    if (prevGroupTransform != this.group.transformString || sizeChanged) {\n      // not yet sure, this is to avoid many transforms=>container layout invalidation on initial buid\n      if (prevGroupTransform == null) {\n        this.dispatch(\"transformed\");\n      } else {\n        this.dispatchImmediately(\"transformed\");\n      }\n      // TODO clear existing positionchanged dispatches ?\n      this.dispatch(\"positionchanged\");\n      if (this.showTooltipOn == \"hit\" || this.showTooltipOn == \"always\") {\n        this.updateTooltipPosition();\n      }\n    }\n    //}\n    // it might happen that x and y changed again, so we only remove if they didn't\n    if (pixelX + dx == x && pixelY + dy == y) {\n      registry.removeFromInvalidPositions(this);\n      this.positionInvalid = false;\n    }\n    var maskRectangle = this._maskRectangle;\n    // todo: verify this\n    if (maskRectangle) {\n      this._clipElement.moveTo({\n        x: maskRectangle.x - pixelX,\n        y: maskRectangle.y - pixelY\n      });\n    }\n  };\n  /**\r\n   * A placeholder method that is called **before** element begins to be drawn.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.beforeDraw = function () {};\n  /**\r\n   * A placeholder method that draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.draw = function () {};\n  /**\r\n   * A placeholder method that is called **after** element finishes drawing\r\n   * itself.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.afterDraw = function () {\n    var e_1, _a;\n    if (this.isMeasured || this.horizontalCenter !== \"none\" || this.verticalCenter !== \"none\") {\n      this.measureElement();\n    }\n    //this.applyMask();\n    if (!this._inited) {\n      if (this._adapterO) {\n        try {\n          // used to be applySVGAttrbutes here, this is more efficient\n          for (var _b = __values(this._adapterO.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var key = _c.value;\n            switch (key) {\n              case \"mask\":\n              case \"fill\":\n              case \"opacity\":\n              case \"fillOpacity\":\n              case \"stroke\":\n              case \"strokeOpacity\":\n              case \"strokeWidth\":\n              case \"shapeRendering\":\n              case \"strokeDasharray\":\n              case \"strokeDashoffset\":\n              case \"strokeLinecap\":\n              case \"strokeLinejoin\":\n              case \"textDecoration\":\n              case \"fontSize\":\n              case \"fontFamily\":\n              case \"fontWeight\":\n                //case \"focusable\":\n                //case \"tabindex\":\n                //case \"role\":\n                this[key] = this[key];\n                break;\n            }\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n      }\n      this.applyFilters();\n      this.visible = this.visible;\n      this.interactionsEnabled = this.getPropertyValue(\"interactionsEnabled\"); // can't use .interactionsEnabled as it get's parent's\n      this._inited = true;\n      if (!this.showOnInit) {\n        this.appeared = true;\n      }\n      if (this.hidden) {\n        this.hide(0);\n      }\n      this.applyMask();\n      this.dispatch(\"validated\");\n      this.dispatch(\"inited\");\n      this.dispatchReady();\n    } else {\n      this.dispatch(\"validated\");\n    }\n    if (this.showTooltipOn == \"always\") {\n      if (this.visible && !this.disabled && !this.__disabled) {\n        this.showTooltip();\n      } else {\n        this.hideTooltip(0);\n      }\n    }\n  };\n  /**\r\n   * Dispatches `\"ready\"` event. Sprite dispatches it right after `\"inited\"` event.\r\n   *\r\n   * @ignore\r\n   */\n  Sprite.prototype.dispatchReady = function () {\n    if (!this.isReady()) {\n      this._ready = true;\n      this.dispatch(\"ready\");\n    }\n  };\n  /**\r\n   * Triggers a re-initialization of this element.\r\n   *\r\n   * Will result in complete redrawing of the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.reinit = function () {\n    this._inited = false;\n    this.setState(this.defaultState);\n    this.invalidate();\n  };\n  /**\r\n   * Handles the situation where parent element is resized.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.handleGlobalScale = function () {\n    this.dispatch(\"globalscalechanged\");\n    if (this.nonScalingStroke) {\n      this.strokeWidth = this.strokeWidth;\n    }\n    if (this.nonScaling) {\n      this.validatePosition();\n    }\n    this.updateFilterScale();\n  };\n  /**\r\n   * Updates filter properties which might depend on scale\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.updateFilterScale = function () {\n    var _this = this;\n    $iter.each(this.filters.iterator(), function (filter) {\n      filter.scale = _this.globalScale;\n    });\n  };\n  /**\r\n   * Removes itself from system's invalid lists.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.removeFromInvalids = function () {\n    registry.removeFromInvalidSprites(this);\n    registry.removeFromInvalidPositions(this);\n  };\n  /**\r\n   * Copies all parameters from another [[Sprite]].\r\n   *\r\n   * @param source Source Sprite\r\n   */\n  Sprite.prototype.copyFrom = function (source) {\n    var _this = this;\n    _super.prototype.copyFrom.call(this, source);\n    this.isMeasured = source.isMeasured;\n    this.states.copyFrom(source.states);\n    if (source.filters.length > 0) {\n      source.filters.each(function (filter) {\n        _this.filters.push(filter.clone());\n      });\n    }\n    if (source._adapterO) {\n      this.adapter.copyFrom(source._adapterO);\n    }\n    //helps to avoid calling getter which creates instance\n    if (source[\"_interaction\"]) {\n      this.interactions.copyFrom(source.interactions);\n    }\n    if (source[\"_plugins\"]) {\n      this.plugins.copyFrom(source.plugins);\n    }\n    this.configField = source.configField;\n    this.applyOnClones = source.applyOnClones;\n    // this.numberFormatter = source.numberFormatter; // todo: this creates loose number formatter and copies it to all clones. somehow we need to know if source had numberFormatter explicitly created and not just because a getter was called.\n    //this.mask = source.mask; need to think about this, generally this causes a lot of problems\n    this.disabled = source.disabled;\n    this.virtualParent = source.virtualParent;\n    this.exportable = source.exportable;\n    //@todo: create tooltip if it's on source but not on this?\n    //const tooltip = this._tooltip;\n    //if (tooltip) {\n    //\ttooltip.copyFrom(source.tooltip);\n    //}\n    if (source._tooltip) {\n      if (this._tooltip) {\n        this._tooltip.copyFrom(source.tooltip);\n      } else {\n        if (source.cloneTooltip) {\n          this.tooltip = source.tooltip.clone();\n        } else {\n          this._tooltip = source.tooltip;\n        }\n      }\n    }\n    //if ((<any>source)[\"_tooltip\"] && !this._tooltip) {\n    //\tthis._tooltip = (<any>source)[\"_tooltip\"];\n    //}\n    this._showSystemTooltip = source.showSystemTooltip;\n    $utils.copyProperties(source.propertyFields, this.propertyFields);\n    $utils.copyProperties(source.properties, this);\n    if (source.fillModifier) {\n      this.fillModifier = source.fillModifier.clone();\n    }\n    if (source.strokeModifier) {\n      this.strokeModifier = source.strokeModifier.clone();\n    }\n    if (source.focusFilter) {\n      this.focusFilter = source.focusFilter.clone();\n    }\n  };\n  /**\r\n   * Destroys this object and all related data.\r\n   */\n  Sprite.prototype.dispose = function () {\n    if (!this.isDisposed()) {\n      if (this.showTooltipOn == \"always\" && this.tooltip) {\n        this.tooltip.hide();\n      }\n      this.dispatchImmediately(\"beforedisposed\");\n      if (this.isBaseSprite) {\n        if (this.htmlContainer) {\n          while (this.htmlContainer.childNodes.length > 0) {\n            this.htmlContainer.removeChild(this.htmlContainer.firstChild);\n          }\n        }\n        this.isBaseSprite = false;\n      }\n      _super.prototype.dispose.call(this);\n      // Clear adapters\n      if (this._adapterO) {\n        this._adapterO.clear();\n      }\n      if (this.applyOnClones) {\n        if (this._clones) {\n          for (var i = this._clones.length - 1; i >= 0; i--) {\n            var clone = this._clones.getIndex(i);\n            clone.dispose();\n          }\n        }\n      }\n      if (this._svgContainer) {\n        this._svgContainer.dispose();\n      }\n      if (this._interactionDisposer) {\n        this._interactionDisposer.dispose();\n        this._interactionDisposer = undefined;\n      }\n      if (this._urlDisposer) {\n        this._urlDisposer.dispose();\n      }\n      this.removeFromInvalids();\n      if (this.element) {\n        this.element.dispose();\n      }\n      if (this.group) {\n        this.group.dispose();\n      }\n      if (this._numberFormatter) {\n        this._numberFormatter.dispose();\n      }\n      if (this._focusFilter) {\n        this._focusFilter.dispose();\n      }\n      var stroke = this.stroke;\n      if (stroke && !(stroke instanceof Color) && stroke.dispose) {\n        if (this.clonedFrom && this.clonedFrom.stroke == stroke) {\n          // do nothing\n        } else {\n          stroke.dispose();\n        }\n      }\n      // TODO a bit hacky\n      var fill = this.fill;\n      if (fill && !(fill instanceof Color) && fill.dispose) {\n        if (this.clonedFrom && this.clonedFrom.fill == fill) {\n          // do nothing\n        } else {\n          fill.dispose();\n        }\n      }\n      // remove from map\n      if ($type.hasValue(this.id)) {\n        this.map.removeKey(this.id);\n      }\n      this.parent = undefined;\n      if (this._filters) {\n        while (this._filters.length > 0) {\n          var filter = this._filters.getIndex(0);\n          filter.dispose();\n          this._filters.removeValue(filter);\n        }\n      }\n      this._alwaysShowDisposers = undefined;\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"isTemplate\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Is template?\r\n     */\n    get: function () {\n      return this._isTemplate;\n    },\n    /**\r\n     * Indicates if this element is a \"template\".\r\n     *\r\n     * Template Sprites act only as a holders for config for other \"real\"\r\n     * elements to be cloned from.\r\n     *\r\n     * Templates are treated differently, as they are not validated, redrawn, or\r\n     * otherwise are processed.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Is template?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      if (this._isTemplate != value) {\n        this._isTemplate = value;\n        if (this instanceof Container) {\n          $iter.each(this.children.iterator(), function (child) {\n            child.isTemplate = value;\n          });\n        }\n        if (value) {\n          this.parent = this._parent;\n          this.removeFromInvalids();\n        } else {\n          this.invalidate();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"showSystemTooltip\", {\n    /**\r\n     * @return Show system tooltip?\r\n     */\n    get: function () {\n      if (!$type.hasValue(this._showSystemTooltip)) {\n        if (this.virtualParent) {\n          return this.virtualParent.showSystemTooltip;\n        } else if (this._parent) {\n          return this._parent.showSystemTooltip;\n        } else {\n          return false;\n        }\n      }\n      return this._showSystemTooltip;\n    },\n    /**\r\n     * Indicates whether the element should attempt to construct itself in a way\r\n     * so that system tooltip is shown if its `readerTitle` is set.\r\n     *\r\n     * @param value Show system tooltip?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      if (this._showSystemTooltip != value) {\n        this._showSystemTooltip = value;\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"topParent\", {\n    /**\r\n     * ==========================================================================\r\n     * HIERARCHY AND STRUCTURE RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Sprites's top-level [[Container]].\r\n     *\r\n     * Please note that in most cases it won't be the chart element.\r\n     *\r\n     * To access base chart element, use `baseSprite` instead.\r\n     *\r\n     * @return Top-level ascendant\r\n     */\n    get: function () {\n      if (this._topParent) {\n        return this._topParent;\n      } else {\n        if (this._parent) {\n          return this._parent.topParent;\n        }\n      }\n    },\n    /**\r\n     * @ignore\r\n     * @param value {Container} top parent of a sprite\r\n     */\n    set: function (value) {\n      this._topParent = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"parent\", {\n    /**\r\n     * @return Parent container\r\n     */\n    get: function () {\n      return this._parent;\n    },\n    /**\r\n     * Elements' parent [[Container]].\r\n     *\r\n     * @param parent  Parent container\r\n     */\n    set: function (parent) {\n      if (this._isTemplate) {\n        return;\n      }\n      // TODO is this needed ?\n      $utils.used(this.paper);\n      var oldParent = this._parent;\n      if (oldParent != parent) {\n        if (oldParent) {\n          oldParent.children.removeValue(this);\n        }\n        this._parent = parent;\n        if (parent) {\n          this.topParent = parent.topParent;\n          if (parent.isTemplate) {\n            this.isTemplate = true;\n          }\n          this.baseId = parent.baseId;\n          parent.children.push(this);\n          // insert handler at Container invalidates +  invalidatesLayout + adds to group\n          if (this._tooltip && !this._tooltipContainer) {\n            this._tooltip.parent = parent.tooltipContainer;\n          }\n          if (!this._dataItem) {\n            this.dataItem = parent.dataItem;\n          }\n          this.handleAlwaysShowTooltip();\n          if (this.dataItem) {\n            // No need to apply accessibility if there's no data item\n            // The whole reason of applying it here is to populate data\n            // placesholders, and if tehre's no data item, it won't work anyway\n            this.applyAccessibility();\n          }\n          this.dispatchImmediately(\"parentset\");\n        } else {\n          this.topParent = undefined;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n  Sprite.prototype.handleAlwaysShow = function () {\n    this.showTooltip();\n  };\n  /**\r\n   * @ignore\r\n   */\n  Sprite.prototype.handleAlwaysShowTooltip = function () {\n    var sprite = this;\n    var oldDisposers = this._alwaysShowDisposers;\n    if (oldDisposers) {\n      $array.each(oldDisposers, function (oldDisposer) {\n        oldDisposer.dispose();\n      });\n    }\n    this._alwaysShowDisposers = [];\n    if (this.showTooltipOn == \"always\") {\n      while (sprite != undefined) {\n        var disposer = sprite.events.on(\"visibilitychanged\", this.handleAlwaysShow, this, false);\n        this.addDisposer(disposer);\n        this._alwaysShowDisposers.push(disposer);\n        sprite = sprite.parent;\n      }\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"virtualParent\", {\n    /**\r\n     * @return Virtual parent\r\n     */\n    get: function () {\n      return this._virtualParent;\n    },\n    /**\r\n     * Element's \"virtual\" parent.\r\n     *\r\n     * This is required in ordere to maintain proper inheritance (like\r\n     * formatters).\r\n     *\r\n     * Sometimes an element is a \"logical\" parent, even though it's not a direct\r\n     * ascendant.\r\n     *\r\n     * Example: a bullet is not a child of the axis, but it would make sense\r\n     * for it to inherit series' formatters.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Virtual parent\r\n     */\n    set: function (value) {\n      this._virtualParent = value;\n      if (this.dataItem) {\n        // No need to apply accessibility if there's no data item\n        // The whole reason of applying it here is to populate data\n        // placesholders, and if tehre's no data item, it won't work anyway\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Moves `<defs>` to correct place in DOM.\r\n   *\r\n   * Some elements are initially created in \"ghost\" container. When moving\r\n   * those into proper place in DOM, their respective `<defs>` need to be moved\r\n   * as well.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.appendDefs = function () {\n    if (this.filterElement) {\n      this.paper.appendDef(this.filterElement);\n    }\n    var fill = this.fill;\n    if (fill && fill.element) {\n      this.paper.appendDef(fill.element);\n    }\n    var stroke = this.stroke;\n    if (stroke && stroke.element) {\n      this.paper.appendDef(stroke.element);\n    }\n    if (this.fillModifier && this.fill instanceof Color) {\n      var fill_1 = this.fillModifier.modify(this.fill);\n      if (fill_1 && fill_1.element) {\n        this.paper.appendDef(fill_1.element);\n      }\n    }\n    if (this.strokeModifier && this.stroke instanceof Color) {\n      var stroke_1 = this.strokeModifier.modify(this.stroke);\n      if (stroke_1 && stroke_1.element) {\n        this.paper.appendDef(stroke_1.element);\n      }\n    }\n    if (this._clipPath) {\n      this.paper.appendDef(this._clipPath);\n    }\n    if (this._exportable === false) {\n      this.exportable = false;\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"map\", {\n    /**\r\n     * Returns a [[Dictionary]] which maps object ids with their respective\r\n     * objects.\r\n     *\r\n     * Can be used to retrieve any object by id, e.g.:\r\n     *\r\n     * ```TypeScript\r\n     * console.log(mySprite.map.getKey(\"myid\"));\r\n     * ```\r\n     * ```JavaScript\r\n     * console.log(mySprite.map.getKey(\"myid\"));\r\n     * ```\r\n     *\r\n     * @return Map collection\r\n     */\n    get: function () {\n      var top = this.topParent;\n      if (top) {\n        return top.map;\n      } else if (!this._map) {\n        this._map = new Dictionary();\n      }\n      return this._map;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"delayedMap\", {\n    /**\r\n     * @ignore\r\n     * @return Map collection\r\n     */\n    get: function () {\n      var top = this.topParent;\n      if (top) {\n        return top.delayedMap;\n      } else if (!this._delayedMap) {\n        this._delayedMap = new Dictionary();\n      }\n      return this._delayedMap;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"id\", {\n    /**\r\n     * @return ID\r\n     */\n    get: function () {\n      return this._id;\n    },\n    /**\r\n     * Element's user-defined ID.\r\n     *\r\n     * Will throw an Error if there already is an object with the same ID.\r\n     *\r\n     * Please note that above check will be performed withing the scope of the\r\n     * current chart instance. It will not do checks across other chart instances\r\n     * or in globally in DOM.\r\n     *\r\n     * Make sure the IDs are unique.\r\n     *\r\n     * @param value ID\r\n     */\n    set: function (value) {\n      if (this._id != value) {\n        this._id = value;\n        if (this.map.hasKey(value)) {\n          throw Error(\"Duplicate id (\" + value + \") used on multiple objects.\");\n        } else {\n          this.map.setKey(value, this);\n        }\n        if (options.autoSetClassName) {\n          this.setClassName();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"dom\", {\n    /**\r\n     * ==========================================================================\r\n     * ELEMENT AND DOM TREE MANIPULATION AND MEASURING\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Returns DOM element reference associated with this element.\r\n     *\r\n     * @readonly\r\n     * @return DOM element\r\n     */\n    get: function () {\n      return this.group.node;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"paper\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Paper\r\n     */\n    get: function () {\n      if (this._paper) {\n        return this._paper;\n      } else {\n        var parent_2 = this._parent;\n        if (parent_2) {\n          return parent_2.paper;\n        }\n      }\n      return getGhostPaper();\n    },\n    /**\r\n     * A [[Paper]] instance to place elements on.\r\n     *\r\n     * If there's no Paper set for this element, it goes up the ascendant tree\r\n     * until it finds one.\r\n     *\r\n     * This method is used by important `addChild()` method, so it's essential\r\n     * to have a [[Paper]] instance.\r\n     *\r\n     * If this element has a separate `htmlContainer` set, it will have a\r\n     * [[Paper]] instance itself.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param paper  Paper\r\n     */\n    set: function (paper) {\n      this.setPaper(paper);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets [[Paper]] instance to use to draw elements.\r\n   * @ignore\r\n   * @param paper Paper\r\n   * @return true if paper was changed, false, if it's the same\r\n   */\n  Sprite.prototype.setPaper = function (paper) {\n    var oldPaper = this._paper;\n    if (oldPaper != paper) {\n      this._paper = paper;\n      this.appendDefs();\n      return true;\n    }\n    return false;\n  };\n  Object.defineProperty(Sprite.prototype, \"htmlContainer\", {\n    /**\r\n     * @return HTML element\r\n     */\n    get: function () {\n      if (this._htmlContainer) {\n        return this._htmlContainer;\n      } else {\n        var parent_3 = this._parent;\n        if (parent_3) {\n          return parent_3.htmlContainer;\n        }\n      }\n    },\n    /**\r\n     * An HTML element to be used when placing wrapper element (`<div>`)\r\n     * for the whole chart.\r\n     *\r\n     * This is the same for **all** elements within the same chart.\r\n     *\r\n     * @param htmlContainer HTML element\r\n     */\n    set: function (htmlContainer) {\n      this._htmlContainer = htmlContainer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"titleElement\", {\n    /**\r\n     * Creates (if not yet created) and returns element's `<title>` element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Title element\r\n     */\n    get: function () {\n      if (!this._titleElement) {\n        this._titleElement = this.paper.add(\"title\");\n        this.group.add(this._titleElement);\n      }\n      return this._titleElement;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"descriptionElement\", {\n    /**\r\n     * Creates (if not yet created) and returns element's `<desc>` element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Desc element\r\n     */\n    get: function () {\n      if (!this._descriptionElement) {\n        this._descriptionElement = this.paper.add(\"desc\");\n        this.group.add(this._descriptionElement);\n      }\n      return this._descriptionElement;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"filters\", {\n    /**\r\n     * Returns list of SVG filters (effects) applied to element. If the filter\r\n     * list is not yet initilized, creates and returns an empty one.\r\n     * Note, not all filters combine well with one another. We recommend using one filter per sprite.\r\n     *\r\n     * @return List of filters\r\n     */\n    get: function () {\n      if (!this._filters) {\n        this._filters = new List();\n        // TODO only add certain events ?\n        this._disposers.push(this._filters.events.onAll(this.applyFilters, this));\n        this._disposers.push(new ListDisposer(this._filters));\n      }\n      return this._filters;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets required SVG attributes. Must be called every time an element is\r\n   * redrawn so that attributes are (re)applied.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.setSVGAttributes = function () {\n    this.fill = this.fill;\n    this.opacity = this.opacity;\n    this.fillOpacity = this.fillOpacity;\n    this.stroke = this.stroke;\n    this.strokeOpacity = this.strokeOpacity;\n    this.shapeRendering = this.shapeRendering;\n    this.strokeDasharray = this.strokeDasharray;\n    this.strokeDashoffset = this.strokeDashoffset;\n    this.strokeLinecap = this.strokeLinecap;\n    this.strokeLinejoin = this.strokeLinejoin;\n    this.focusable = this.focusable;\n    this.tabindex = this.tabindex;\n    this.role = this.role;\n  };\n  /**\r\n   * Sets an attribute directly on an SVG element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param attribute Attribute object\r\n   */\n  Sprite.prototype.setSVGAttribute = function (attribute) {\n    this.group.attr(attribute);\n  };\n  /**\r\n   * Removes an attribute directly from SVG element.\r\n   *\r\n   * @param attribute Attribute key to remove\r\n   */\n  Sprite.prototype.removeSVGAttribute = function (attribute) {\n    this.group.removeAttr(attribute);\n  };\n  /**\r\n   * Sets `class` attribute of the elements SVG node.\r\n   *\r\n   * Uses `am4core.options.classNamePrefix`.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.setClassName = function () {\n    var className = this.className;\n    var classNamePrefix = options.classNamePrefix;\n    if (this.element) {\n      this.element.addClass(classNamePrefix + className);\n    }\n    this.group.addClass(classNamePrefix + className + \"-group\");\n    if ($type.hasValue(this.id)) {\n      this.group.addClass(classNamePrefix + this.id);\n    }\n    if (this.userClassName) {\n      this.group.addClass(this.userClassName);\n    }\n  };\n  /**\r\n   * Adds an `id` attribute the the element and returns the id.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Element's ID\r\n   */\n  Sprite.prototype.uidAttr = function () {\n    this.setSVGAttribute({\n      \"id\": this.uid\n    });\n    return this.uid;\n  };\n  /**\r\n   * [updateClipPath description]\r\n   *\r\n   * @todo Description\r\n   */\n  Sprite.prototype.updateClipPath = function () {\n    var element = this._clipElement;\n    if (element) {\n      element.moveTo({\n        x: this.mask.pixelX,\n        y: this.mask.pixelY\n      });\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n  Sprite.prototype.createClipPath = function () {\n    if (!this._clipPath) {\n      this._clipPath = this.paper.addGroup(\"clipPath\");\n      this.paper.appendDef(this._clipPath);\n      this._disposers.push(this._clipPath);\n      var id = registry.getUniqueId();\n      this._clipPath.attr({\n        \"id\": id\n      });\n      this.group.attr({\n        \"clip-path\": \"url(\\\"\" + $utils.getBaseURI() + id + \"\\\")\"\n      });\n    }\n  };\n  /**\r\n   * Applies the mask Sprite.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.applyMask = function () {\n    var mask = this.mask;\n    if (this._clipPath && mask) {\n      // Container\n      if (mask instanceof Container) {\n        this._clipElement.attr({\n          \"width\": $math.max(0, mask.pixelWidth),\n          \"height\": $math.max(0, mask.pixelHeight)\n        });\n        var point = $utils.spritePointToSprite({\n          x: mask.pixelX,\n          y: mask.pixelY\n        }, mask.parent, this);\n        this._clipPath.x = point.x;\n        this._clipPath.y = point.y;\n      }\n      // Sprite\n      else {\n        if (mask.element && mask.element != this._clipElement) {\n          this._clipElement = mask.element;\n          this._clipPath.add(this._clipElement);\n        }\n        this._clipPath.scale = mask.scale;\n        this._clipPath.x = mask.pixelX;\n        this._clipPath.y = mask.pixelY;\n        this._clipPath.rotation = mask.rotation;\n      }\n    }\n  };\n  /**\r\n   * Applies filters to the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.applyFilters = function () {\n    var _this = this;\n    // we create a separate filter for each sprite as otherwise it would be impossible to animate filter.\n    // svg doesn't support multiple filters applied to one element, so we put all the primitives to one filterElement of a sprite.\n    if (this._filters && this._filters.length > 0) {\n      var width_1 = 100;\n      var height_1 = 100;\n      if (!this.filterElement) {\n        this.filterElement = this.paper.addGroup(\"filter\");\n        this._disposers.push(this.filterElement);\n      } else {\n        this.filterElement.removeChildNodes();\n      }\n      this.paper.appendDef(this.filterElement);\n      var id = \"filter-\" + this.uid;\n      this.filterElement.attr({\n        \"id\": id\n      });\n      $iter.each(this.filters.iterator(), function (filter) {\n        filter.sprite = _this;\n        filter.paper = _this.paper;\n        _this.filterElement.attr({\n          filterUnits: filter.filterUnits\n        });\n        filter.appendPrimitives(_this.filterElement);\n        if (filter.width > width_1) {\n          width_1 = filter.width;\n        }\n        if (filter.height > height_1) {\n          height_1 = filter.height;\n        }\n        filter.scale = _this.globalScale;\n      });\n      var w = width_1 + \"%\";\n      var h = height_1 + \"%\";\n      /* temporarily removed as it is breaking tooltips on Safari @todo come back to this\r\n      if (this._measuredHeight <= 1) {\r\n          h = height + \"\";\r\n      }\r\n        if (this._measuredWidth <= 1) {\r\n          h = width + \"\";\r\n      }*/\n      this.filterElement.attr({\n        \"width\": w,\n        \"height\": h,\n        \"x\": -(width_1 - 100) / 2 + \"%\",\n        \"y\": -(height_1 - 100) / 2 + \"%\"\n      });\n      this.group.attr({\n        \"filter\": \"url(\\\"\" + $utils.getBaseURI() + id + \"\\\")\"\n      });\n    } else if (this.filterElement) {\n      this.group.removeAttr(\"filter\");\n      this.filterElement.removeChildNodes();\n    }\n  };\n  /**\r\n   * [removeClipPath description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n  Sprite.prototype.removeClipPath = function () {\n    if (this._clipPath) {\n      //this._clipPath.dispose();\n      this.removeDispose(this._clipPath);\n      this._clipPath = undefined;\n    }\n  };\n  /**\r\n   * [setElement description]\r\n   *\r\n   * @ignore\r\n   * @todo Description\r\n   * @param element [description]\r\n   */\n  Sprite.prototype.setElement = function (element) {\n    this.element = element;\n    this.setSVGAttributes();\n    this.applyAccessibility();\n  };\n  Object.defineProperty(Sprite.prototype, \"element\", {\n    /**\r\n     * @return Element\r\n     */\n    get: function () {\n      return this._element;\n    },\n    /**\r\n     * The main element for this Sprite, usually an SVG `<g>`.\r\n     *\r\n     * All other sub-elements are created in it.\r\n     *\r\n     * @param element  Element\r\n     */\n    set: function (element) {\n      // Destroy previous element if there was one before\n      this.removeElement();\n      // Set new element\n      this._element = element;\n      // Add element to group\n      // Since we are adding Element to group, which is already in the\n      // `.disposers` it will be removed automatically when Sprite is disposed\n      // of\n      this.group.add(element);\n      if (element.node instanceof SVGPathElement) {\n        this._isPath = true;\n      }\n      // This is needed if someone is setting element not in draw method but\n      // from outside\n      if (!this.invalid) {\n        this.validate();\n      }\n      if (options.autoSetClassName) {\n        this.setClassName();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"svgContainer\", {\n    /**\r\n     * HTML container (`<div>`) which is used to place chart's `<svg>` element\r\n     * in.\r\n     *\r\n     * @return Container for chart elements\r\n     */\n    get: function () {\n      if (this._svgContainer) {\n        return this._svgContainer;\n      } else if (this._parent) {\n        return this._parent.svgContainer;\n      }\n    },\n    /**\r\n     * Sets HTML container to add SVG and other chart elements to.\r\n     *\r\n     * @param svgContainer Container for chart elements\r\n     */\n    set: function (svgContainer) {\n      this._svgContainer = svgContainer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Measures main element.\r\n   *\r\n   * Saves measurements into private `_bbox` property.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.measureElement = function () {\n    if (this.element) {\n      if (this.definedBBox) {\n        this._bbox = this.definedBBox;\n      } else {\n        var svgBBox = this.element.getBBox();\n        this._bbox = {\n          x: svgBBox.x,\n          y: svgBBox.y,\n          width: svgBBox.width,\n          height: svgBBox.height\n        };\n      }\n    }\n  };\n  /**\r\n   * Positions element according its center settings.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.updateCenter = function () {\n    if (this.element) {\n      var prevElementTransform = this.element.transformString;\n      var bbox = this.bbox;\n      var ex = 0;\n      var ey = 0;\n      var elementX = bbox.x;\n      var elementY = bbox.y;\n      var elementWidth = bbox.width;\n      var elementHeigth = bbox.height;\n      var pixelPaddingLeft = this.pixelPaddingLeft;\n      var pixelPaddingRight = this.pixelPaddingRight;\n      var pixelPaddingTop = this.pixelPaddingTop;\n      var pixelPaddingBottom = this.pixelPaddingBottom;\n      // add padding to the measured size\n      var measuredWidth = $math.max(elementWidth + pixelPaddingLeft + pixelPaddingRight, this.pixelWidth);\n      var measuredHeight = $math.max(elementHeigth + pixelPaddingTop + pixelPaddingBottom, this.pixelHeight);\n      // extremes\n      var left = bbox.x;\n      var right = bbox.x + measuredWidth;\n      var top_1 = bbox.y;\n      var bottom = bbox.y + measuredHeight;\n      var horizontalCenter = this.horizontalCenter;\n      var verticalCenter = this.verticalCenter;\n      switch (horizontalCenter) {\n        case \"none\":\n          ex = elementX + pixelPaddingLeft;\n          break;\n        case \"left\":\n          ex = pixelPaddingLeft;\n          break;\n        case \"middle\":\n          ex = pixelPaddingLeft - (elementWidth + pixelPaddingRight + pixelPaddingLeft) / 2;\n          break;\n        case \"right\":\n          ex = -pixelPaddingRight - elementWidth;\n          break;\n      }\n      switch (verticalCenter) {\n        case \"none\":\n          ey = elementY + pixelPaddingTop;\n          break;\n        case \"top\":\n          ey = pixelPaddingTop;\n          break;\n        case \"middle\":\n          ey = pixelPaddingTop - (elementHeigth + pixelPaddingBottom + pixelPaddingTop) / 2;\n          break;\n        case \"bottom\":\n          ey = -pixelPaddingBottom - elementHeigth;\n          break;\n      }\n      this._measuredHeight = measuredHeight;\n      this._measuredWidth = measuredWidth;\n      var x = $math.round(ex - elementX, this._positionPrecision, true);\n      var y = $math.round(ey - elementY, this._positionPrecision, true);\n      this.ex = x - pixelPaddingLeft;\n      this.ey = y - pixelPaddingTop;\n      this.maxLeft = left + x - pixelPaddingLeft;\n      this.maxRight = right + x - pixelPaddingLeft;\n      this.maxTop = top_1 + y - pixelPaddingTop;\n      this.maxBottom = bottom + y - pixelPaddingTop;\n      if (this.pixelPerfect && options.pixelPerfectPrecision == 0) {\n        x -= 0.5;\n        y -= 0.5;\n      }\n      this.element.moveTo({\n        x: x,\n        y: y\n      });\n      if (prevElementTransform != this.element.transformString) {\n        this.dispatchImmediately(\"transformed\");\n      }\n    }\n  };\n  /**\r\n   * Measures the whole element.\r\n   *\r\n   * Returns `true` if the size has changed from the last measurement.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Did the size changed from the last measurement?\r\n   */\n  Sprite.prototype.measure = function () {\n    this.updateCenter();\n    var measuredWidth = this._measuredWidth;\n    var measuredHeight = this._measuredHeight;\n    // extremes\n    var left = this.maxLeft;\n    var right = this.maxRight;\n    var top = this.maxTop;\n    var bottom = this.maxBottom;\n    // non-parent wise size\n    this._measuredWidthSelf = measuredWidth;\n    this._measuredHeightSelf = measuredHeight;\n    var positionPrecision = this._positionPrecision;\n    this.maxLeftSelf = this.maxLeft;\n    this.maxRightSelf = this.maxRight;\n    this.maxTopSelf = this.maxTop;\n    this.maxBottomSelf = this.maxBottom;\n    // if a sprite is rotated or scaled, calculate measured size after transformations\n    if (this.rotation !== 0 || this.scale !== 1 || this.nonScaling) {\n      // not good to handleGlobalScale here.\n      if (this.nonScalingStroke) {\n        this.strokeWidth = this.strokeWidth;\n      }\n      var svg = this.paper.svg;\n      var matrix = svg.createSVGMatrix();\n      var rotation = this.rotation;\n      var scale = this.scale;\n      if (this.nonScaling) {\n        scale = this.scale / this.globalScale;\n      }\n      matrix.a = $math.cos(rotation) * scale;\n      matrix.c = -$math.sin(rotation) * scale;\n      matrix.e = 0;\n      matrix.b = $math.sin(rotation) * scale;\n      matrix.d = $math.cos(rotation) * scale;\n      matrix.f = 0;\n      var p1 = svg.createSVGPoint();\n      p1.x = left;\n      p1.y = top;\n      var p2 = svg.createSVGPoint();\n      p2.x = right;\n      p2.y = top;\n      var p3 = svg.createSVGPoint();\n      p3.x = right;\n      p3.y = bottom;\n      var p4 = svg.createSVGPoint();\n      p4.x = left;\n      p4.y = bottom;\n      var pt1 = p1.matrixTransform(matrix);\n      var pt2 = p2.matrixTransform(matrix);\n      var pt3 = p3.matrixTransform(matrix);\n      var pt4 = p4.matrixTransform(matrix);\n      left = Math.min(pt1.x, pt2.x, pt3.x, pt4.x);\n      right = Math.max(pt1.x, pt2.x, pt3.x, pt4.x);\n      top = Math.min(pt1.y, pt2.y, pt3.y, pt4.y);\n      bottom = Math.max(pt1.y, pt2.y, pt3.y, pt4.y);\n      measuredWidth = right - left;\n      measuredHeight = bottom - top;\n      this.maxLeft = $math.round(left, positionPrecision, true);\n      this.maxRight = $math.round(right, positionPrecision, true);\n      this.maxTop = $math.round(top, positionPrecision, true);\n      this.maxBottom = $math.round(bottom, positionPrecision, true);\n    }\n    this._measuredWidth = $math.round(measuredWidth, positionPrecision, true);\n    this._measuredHeight = $math.round(measuredHeight, positionPrecision, true);\n    // dispatch event\n    if (this._measuredWidth != this._prevMeasuredWidth || this._measuredHeight != this._prevMeasuredHeight) {\n      this._prevMeasuredHeight = this._measuredHeight;\n      this._prevMeasuredWidth = this._measuredWidth;\n      // TODO clear existing sizechanged dispatches ?\n      this.dispatch(\"sizechanged\");\n      if ((this.isHover || this.showTooltipOn == \"hit\" || this.showTooltipOn == \"always\") && this.tooltip && this.tooltip.visible && ($type.hasValue(this.tooltipText) || $type.hasValue(this.tooltipHTML))) {\n        this.updateTooltipPosition();\n      }\n      return true;\n    }\n    return false;\n  };\n  /**\r\n   * Insert this element before sibling element.\r\n   *\r\n   * @param sprite  Target element\r\n   * @return This element\r\n   */\n  Sprite.prototype.insertBefore = function (sprite) {\n    var parent = this._parent;\n    if (parent) {\n      var index = parent.children.indexOf(sprite);\n      if (index !== -1) {\n        parent.children.moveValue(this, index);\n        parent.sortChildren();\n      }\n    }\n    return this;\n  };\n  /**\r\n   * Insert this element after sibling element.\r\n   *\r\n   * @param sprite  Target element\r\n   * @return This element\r\n   */\n  Sprite.prototype.insertAfter = function (sprite) {\n    var parent = this._parent;\n    if (parent) {\n      var index = parent.children.indexOf(sprite);\n      if (index !== -1) {\n        parent.children.moveValue(this, index + 1);\n        parent.sortChildren();\n      }\n    }\n    return this;\n  };\n  /**\r\n   * Removes the main SVG element.\r\n   *\r\n   * This does not destroy the whole Sprite element. To do that use\r\n   * `dispose()` instead.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.removeElement = function () {\n    // remove visual element\n    if (this._element) {\n      this.removeDispose(this._element);\n      this._element = undefined;\n    }\n  };\n  /**\r\n   * Returns relative (percent) value of the X coordindate within this element.\r\n   *\r\n   * A relative value is a hundredth of a percent. So 100% would result in a 1\r\n   * as relative value.\r\n   *\r\n   * @param value  Absolute or relative X coordinate\r\n   * @return Relative value\r\n   */\n  Sprite.prototype.getRelativeX = function (value) {\n    if (value instanceof Percent) {\n      return value.value;\n    } else if (this._parent) {\n      return value / this._parent.innerWidth;\n    }\n    return 0;\n  };\n  /**\r\n   * Returns relative (percent) value of the Y coordindate within this element.\r\n   *\r\n   * A relative value is a hundredth of a percent. So 100% would result in a 1\r\n   * as relative value.\r\n   *\r\n   * @param value  Absolute or relative Y coordinate\r\n   * @return Relative value\r\n   */\n  Sprite.prototype.getRelativeY = function (value) {\n    if (value instanceof Percent) {\n      return value.value;\n    } else if (this._parent) {\n      return value / this._parent.innerHeight;\n    }\n    return 0;\n  };\n  /**\r\n   * Returns an X coordinate in pixel within the element.\r\n   *\r\n   * If number is passed in as parameter, the same number will be returned\r\n   * back.\r\n   *\r\n   * If [[Percent]] is passed in, it will be recalculated to pixels.\r\n   *\r\n   * @param value  Absolute or relative X coordinate\r\n   * @return X coordinate in pixels\r\n   */\n  Sprite.prototype.getPixelX = function (value) {\n    // we don't use $utils.valueToRelative as this would mean that we should access parent.innerWidth\n    // all the time and this would result chain of the same actions and will slow down the system a lot\n    var pixel = 0;\n    if ($type.isNumber(value)) {\n      pixel = value;\n    } else if (value instanceof Percent) {\n      var relative = value.value;\n      if (this._parent) {\n        pixel = $math.round(this._parent.innerWidth * relative, this._positionPrecision, true);\n      }\n    }\n    return pixel;\n  };\n  /**\r\n   * Returns an Y coordinate in pixel within the element.\r\n   *\r\n   * If number is passed in as parameter, the same number will be returned\r\n   * back.\r\n   *\r\n   * If [[Percent]] is passed in, it will be recalculated to pixels.\r\n   *\r\n   * @param value  Absolute or relative Y coordinate\r\n   * @return Y coordinate in pixels\r\n   */\n  Sprite.prototype.getPixelY = function (value) {\n    // we don't use $utils.valueToRelative as this would mean that we should access parent.innerWidth\n    // all the time and this would result chain of the same actions and will slow down the system a lot\n    var pixel = 0;\n    if ($type.isNumber(value)) {\n      pixel = value;\n    } else if (value instanceof Percent) {\n      var relative = value.value;\n      if (this._parent) {\n        pixel = $math.round(this._parent.innerHeight * relative, this._positionPrecision, true);\n      }\n    }\n    return pixel;\n  };\n  /**\r\n   * Moves the element to a specified coordinates.\r\n   *\r\n   * Using this method is preferred method of moving element, as it saves some\r\n   * CPU processing power over setting `x` and `y` properties separately.\r\n   *\r\n   * The method respects element's center settings. The element will be\r\n   * positioned so that `point` coordinates come in whatever \"center\" of the\r\n   * element is, as set in `horizontalCenter` and `verticalCenter`.\r\n   *\r\n   * Besides moving the element, you can also at the same time scale and\r\n   * rotate the element.\r\n   *\r\n   * @param point     New coordinates\r\n   * @param rotation  New rotation\r\n   * @param scale     New Scale\r\n   */\n  Sprite.prototype.moveTo = function (point, rotation, scale, isDragged) {\n    if (this.isDragged && !isDragged) {\n      return;\n    }\n    if (point) {\n      if ($type.isNumber(point.x)) {\n        this.setPropertyValue(\"x\", $math.round(point.x, this._positionPrecision, true));\n      }\n      if ($type.isNumber(point.y)) {\n        this.setPropertyValue(\"y\", $math.round(point.y, this._positionPrecision, true));\n      }\n    }\n    if ($type.isNumber(rotation)) {\n      this.rotation = rotation;\n    }\n    if ($type.isNumber(scale)) {\n      this.scale = scale;\n    }\n    // must leave this\n    this.invalidatePosition();\n  };\n  Object.defineProperty(Sprite.prototype, \"mask\", {\n    /**\r\n     * Returns [[Sprite]] element currently used as mask for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return A [[Sprite]] to use as mask\r\n     */\n    get: function () {\n      if (!this._adapterO) {\n        return this._mask.get();\n      } else {\n        return this._adapterO.apply(\"mask\", this._mask.get());\n      }\n    },\n    /**\r\n     * Sets another [[Sprite]] element as this elements mask.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param mask A [[Sprite]] to use as mask\r\n     */\n    set: function (mask) {\n      var _this = this;\n      if (this._mask.get() !== mask) {\n        // this is good\n        if (mask) {\n          this.createClipPath();\n          if (!(mask instanceof Container)) {\n            mask.isMeasured = false;\n            if (mask.element) {\n              this._clipElement = mask.element;\n            }\n          } else {\n            this._clipElement = this.paper.add(\"rect\");\n          }\n          if (this._clipElement) {\n            this._clipPath.add(this._clipElement);\n          }\n          this._mask.set(mask, new MultiDisposer([\n          //mask.addEventListener(SpriteEvent.TRANSFORMED, this.applyMask, false, this);\n          mask.events.on(\"maxsizechanged\", function () {\n            if (_this.inited) {\n              _this.applyMask();\n            }\n          }, undefined, false), mask.events.on(\"validated\", this.applyMask, this, false), mask.events.on(\"positionchanged\", this.applyMask, this, false)]));\n          this.applyMask();\n        } else {\n          this._mask.reset();\n          this.group.removeAttr(\"clip-path\");\n          this.removeClipPath();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"maskRectangle\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Mask Rectangle\r\n     */\n    get: function () {\n      return this._maskRectangle;\n    },\n    // you can set IRectangle as a mask instead o a sprite. Note, the changes of the object won't be monitored\n    /**\r\n     * Instead of creating a [[Sprite]] for mask, you can just use a\r\n     * [[Rectangle]] by setting this accessor.\r\n     *\r\n     * Please note that the element will not monitor any changes to the mask\r\n     * rectangle.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param rect Mask Rectangle\r\n     */\n    set: function (rect) {\n      if (rect) {\n        this.createClipPath();\n        if (!this._clipElement) {\n          this._clipElement = this.paper.add(\"rect\");\n          this._clipPath.add(this._clipElement);\n        }\n        this._clipElement.attr({\n          \"width\": rect.width,\n          \"height\": rect.height\n        });\n      } else {\n        this.removeClipPath();\n        this._clipElement = undefined;\n      }\n      this._maskRectangle = rect;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"isMeasured\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Was element already measured?\r\n     */\n    get: function () {\n      return this._isMeasured;\n    },\n    /**\r\n     * Indicates if this element was already measured.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Was element already measured?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      if (!value) {\n        this._measuredWidth = 0;\n        this._measuredHeight = 0;\n        //this._pixelHeight = 0;\n        //this._pixelWidth = 0;\n      }\n\n      if (this._isMeasured != value) {\n        this._isMeasured = value;\n        this.invalidatePosition();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Checks if the this element has any of its parts overlapping with another\r\n   * element.\r\n   *\r\n   * @todo Description (review)\r\n   * @param sprite  Second element to test again\r\n   * @return Overlapping?\r\n   */\n  Sprite.prototype.hitTest = function (sprite) {\n    // validate, otherwise we will not know measuredWidth and measuredHeight\n    if (this.invalid) {\n      this.validate();\n    }\n    if (sprite.invalid) {\n      sprite.validate();\n    }\n    var ax1 = this.pixelX + this.maxLeft;\n    var ay1 = this.pixelY + this.maxTop;\n    var ax2 = ax1 + this.maxRight;\n    var ay2 = ay1 + this.maxBottom;\n    var bx1 = sprite.pixelX + sprite.maxLeft;\n    var by1 = sprite.pixelY + sprite.maxTop;\n    var bx2 = bx1 + sprite.maxRight;\n    var by2 = by1 + sprite.maxBottom;\n    return !(bx1 > ax2 || bx2 < ax1 || by1 > ay2 || by2 < ay1);\n  };\n  Object.defineProperty(Sprite.prototype, \"inited\", {\n    /**\r\n     * ==========================================================================\r\n     * STATE-RELATED\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Returns `true` if Sprite has already finished initializing.\r\n     *\r\n     * @return Initialized?\r\n     */\n    get: function () {\n      return this._inited;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns `true` if Sprite has already finished initializing and is ready.\r\n   *\r\n   * If this object is a [[Container]] it will wait for all of its children\r\n   * are ready before becoming ready itself and firing a `\"ready\"` event.\r\n   *\r\n   * @return is ready?\r\n   */\n  Sprite.prototype.isReady = function () {\n    return this._ready;\n  };\n  Object.defineProperty(Sprite.prototype, \"states\", {\n    /**\r\n     * Returns a collection of element's available [[SpriteState]] entries.\r\n     *\r\n     * @see {@link SpriteState}\r\n     * @return States\r\n     */\n    get: function () {\n      if (!this._states) {\n        var state = new SpriteState();\n        // works\n        this._states = new DictionaryTemplate(state);\n        // TODO what about removeKey ?\n        this._disposers.push(this._states.events.on(\"insertKey\", this.processState, this, false));\n        this._disposers.push(this._states.events.on(\"setKey\", this.processState, this, false));\n        this._disposers.push(new DictionaryDisposer(this._states));\n        this._disposers.push(state);\n      }\n      return this._states;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"hiddenState\", {\n    /**\r\n     * Returns a [[SpriteState]] object for \"hidden\" state.\r\n     *\r\n     * This is a shortcut to `this.states.getKey(\"hidden\")`.\r\n     *\r\n     * @return Hidden state\r\n     */\n    get: function () {\n      if (!this.states.getKey(\"hidden\")) {\n        var hiddenState = this.states.create(\"hidden\");\n        hiddenState.properties.opacity = 0;\n        hiddenState.properties.visible = false;\n      }\n      return this.states.getKey(\"hidden\");\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"defaultState\", {\n    /**\r\n     * Returns a [[SpriteState]] object for \"default\" state.\r\n     *\r\n     * This is a shortcut to `this.states.getKey(\"default\")`.\r\n     *\r\n     * @return Hidden state\r\n     */\n    get: function () {\n      if (!this.states.getKey(\"default\")) {\n        var defaultState = this.states.create(\"default\");\n        defaultState.properties.opacity = 1;\n      }\n      return this.states.getKey(\"default\");\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Checks if some key states are defined and updates Sprite properties\r\n   * accordingly.\r\n   *\r\n   * For example if there's a state \"down\" defined for Sprite, we automatically\r\n   * make it \"clickable\".\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event An event which caused state list update\r\n   */\n  Sprite.prototype.processState = function (event) {\n    var state = event.newValue;\n    state.sprite = this;\n    state.name = event.key;\n    if (this.states.hasKey(\"hover\") || this.showTooltipOn == \"hover\" && ($type.hasValue(this.tooltipHTML) || $type.hasValue(this.tooltipText))) {\n      this.hoverable = true;\n    }\n    if (this.states.hasKey(\"down\") || this.showTooltipOn == \"hover\" && ($type.hasValue(this.tooltipHTML) || $type.hasValue(this.tooltipText))) {\n      this.clickable = true;\n    }\n    if (this.states.hasKey(\"focus\")) {\n      this.focusable = true;\n    }\n    // Propagate the new state to clones\n    if (this.applyOnClones) {\n      var clones = this.clones.values;\n      var length_1 = clones.length;\n      for (var i = 0; i < length_1; ++i) {\n        var clone = clones[i];\n        if (!clone.isDisposed()) {\n          clone.states.setKey(state.name, state);\n        }\n      }\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"animations\", {\n    /**\r\n     * Returns a list elements's animations currently being played.\r\n     *\r\n     * If the list has not been initialized it is created.\r\n     *\r\n     * @return List of animations\r\n     */\n    get: function () {\n      if (!this._animations) {\n        this._animations = [];\n        this._disposers.push(new AnimationDisposer(this._animations));\n      }\n      return this._animations;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts element's local coordinates to the coordinates within the main\r\n   * chart container.\r\n   *\r\n   * @param point  Local point\r\n   * @return Global point\r\n   */\n  Sprite.prototype.getSvgPoint = function (point) {\n    try {\n      // Calculate SVG point\n      var bbox = this.htmlContainer.getBoundingClientRect();\n      return {\n        \"x\": point.x - bbox.left,\n        \"y\": point.y - bbox.top\n      };\n    } catch (e) {\n      return point;\n    }\n  };\n  /**\r\n   * Creates and starts an [[Animation]] with given `animationOptions`.\r\n   *\r\n   * @see {@link Animation} for additional information about available options\r\n   * @param animationOptions  Animation options\r\n   * @param duration          Duration in milliseconds\r\n   * @param easing            Easing function\r\n   * @return Animation instance\r\n   */\n  Sprite.prototype.animate = function (animationOptions, duration, easing) {\n    return new Animation(this, animationOptions, duration, easing).start();\n  };\n  /**\r\n   * Applies a [[SpriteState]] on this element.\r\n   *\r\n   * The first parameter can either be a name state or a [[SpriteState]]\r\n   * instance.\r\n   *\r\n   * When run, this method will apply SVG properties defined in a\r\n   * [[SpriteState]], but only those that are relevant to this particular\r\n   * element, i.e. are in the `properties` array.\r\n   *\r\n   * @see {@link SpriteState}\r\n   * @param value               A state - name key or instance\r\n   * @param transitionDuration  Duration of the transition between current and new state\r\n   * @param easing              An easing function\r\n   */\n  Sprite.prototype.setState = function (value, transitionDuration, easing) {\n    var state;\n    if (value instanceof SpriteState) {\n      this.states.setKey(value.name, value);\n      state = value;\n    } else {\n      state = this.states.getKey(value);\n      if (!state) {\n        return;\n      }\n    }\n    // stop previous transition\n    // not good - foe expample, we are animating to some \"active\" state and in them middle \"hover\" state happens. then \"active\" stat won't be applied\n    //if (this._transition) {\n    //this._transition.stop();\n    //}\n    if (state.name == \"hover\") {\n      if (this.isHidden) {\n        return;\n      }\n      this.isHover = true;\n    }\n    if (state.name == \"hidden\") {\n      this.isHiding = true;\n    } else {\n      if (!this.visible) {\n        this.setVisibility(state.properties.visible || this.defaultState.properties.visible);\n      }\n    }\n    if (state.name == \"active\") {\n      this.isActive = true;\n    }\n    // we do not set isActive = false here if it's not active, but container does that if setStateOnChildren = true\n    if (!$type.isNumber(transitionDuration)) {\n      transitionDuration = state.transitionDuration;\n    }\n    if (!$type.hasValue(easing)) {\n      easing = state.transitionEasing;\n    }\n    return this.transitTo(state, transitionDuration, easing);\n  };\n  /**\r\n   * Applies proper state based on the condition of the element. A condition is\r\n   * deducted in this order:\r\n   * * \"hover\" if Sprite has currently any pointers over it\r\n   * * \"down\" if Sprite has any pointers (touch or mouse) currently pressed over it\r\n   * * \"focus\" if Sprite has currently got focus (accessibility)\r\n   * * \"hidden\" if Sprite is currently hidden\r\n   *\r\n   * Returns an [[Animation]] object, which is handling gradual transition from\r\n   * current values of properties, to the new target state(s).\r\n   *\r\n   * @param duration  Duration for the animation (ms)\r\n   * @return [[Animation]] object which is handling the transition\r\n   */\n  Sprite.prototype.applyCurrentState = function (duration) {\n    //if (!this.isHidden) { // this was done for hover state not to take effect if \"hidden\" is actually visible, need to think about it.\n    var animation = this.setState(this.defaultState, duration);\n    if (this.isHover) {\n      animation = this.setState(\"hover\", duration);\n    }\n    if (this.isDown && this.interactions.downPointers.length) {\n      animation = this.setState(\"down\", duration);\n    }\n    this.isFocused = this.isFocused;\n    if (this.isActive) {\n      animation = this.setState(\"active\", duration);\n      if (this.isHover && this.states.hasKey(\"hoverActive\")) {\n        animation = this.setState(\"hoverActive\", duration);\n      }\n    }\n    return animation;\n    //}\n  };\n  /**\r\n   * Starts an [[Animation]] of the properties to specific values as they are\r\n   * set in `state`.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param state     Target State\r\n   * @param duration  Duration in milliseconds\r\n   * @param easing    Easing function\r\n   * @return Transition Animation\r\n   */\n  Sprite.prototype.transitTo = function (state, duration, easing) {\n    var _this = this;\n    // Init\n    var options = [],\n      propValues = state.allValues,\n      transition;\n    // todo: do this for numeric/color properties only?\n    // @todo use state.getPropertyValue instead\n    $object.each(propValues, function (propertyName, finalValue) {\n      var currentValue = _this[propertyName];\n      // save current value to default state. this solves a big problem where values must be set both on sprite and default state\n      if (finalValue != currentValue && _this.defaultState.properties[propertyName] == undefined) {\n        _this.defaultState.properties[propertyName] = currentValue;\n      }\n      //if (finalValue != currentValue && $type.hasValue(finalValue)) {\n      if (finalValue != \"__unset\") {\n        var option = {\n          from: currentValue,\n          to: finalValue,\n          property: propertyName\n        };\n        options.push(option);\n      }\n    });\n    if (options.length > 0) {\n      transition = this.animate(options, duration, easing);\n      if (transition && !transition.isFinished()) {\n        // TODO should this use events.once ?\n        // TODO push onto _disposers array ?\n        this._disposers.push(transition.events.on(\"animationended\", function () {\n          _this.dispatchImmediately(\"transitionended\");\n        }));\n      } else {\n        this.dispatchImmediately(\"transitionended\");\n      }\n    }\n    // apply filters if set\n    if (state.filters.length > 0) {\n      var newFilters_1 = [];\n      // check for the same filters\n      $iter.each(state.filters.iterator(), function (stateFilter) {\n        var newFilter = stateFilter.clone();\n        newFilters_1.push(newFilter);\n        var animationOptions = [];\n        $iter.each(_this.filters.iterator(), function (currentFilter) {\n          // if we have the same filters\n          if (currentFilter.className == newFilter.className) {\n            if (!$iter.contains(_this.defaultState.filters.iterator(), function (x) {\n              return x.className === newFilter.className;\n            })) {\n              _this.defaultState.filters.push(currentFilter);\n            }\n            $object.each(newFilter.properties, function (propertyName, newValue) {\n              var currentValue = currentFilter.properties[propertyName];\n              // if values are not the same, push to animation options array\n              if (currentValue != newValue) {\n                animationOptions.push({\n                  property: propertyName,\n                  from: currentValue,\n                  to: newValue\n                });\n              }\n            });\n          }\n        });\n        // animate to new value\n        newFilter.animate(animationOptions, duration, easing);\n      });\n      this.filters.clear();\n      this.filters.pushAll(newFilters_1);\n    }\n    return transition;\n  };\n  /**\r\n   * Returns `true` if Sprite is currently transiting from one state/value to\r\n   * another.\r\n   *\r\n   * @return Is in transition?\r\n   */\n  Sprite.prototype.isInTransition = function () {\n    return this.animations.length > 0;\n  };\n  Object.defineProperty(Sprite.prototype, \"isHover\", {\n    /**\r\n     * @return Is hovered?\r\n     */\n    get: function () {\n      if (this.isInteractive()) {\n        return this.interactions.isHover;\n      }\n      return false;\n    },\n    /**\r\n     * Indicates if this element has a mouse pointer currently hovering\r\n     * over it, or if it has any touch pointers pressed on it.\r\n     *\r\n     * You can force element to be \"hovered\" manually, by setting this property\r\n     * to `true`.\r\n     *\r\n     * @param value Is hovered?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      if (value !== this.isHover) {\n        if (this.isInteractive()) {\n          this.interactions.isHover = value;\n          if (value) {\n            this.handleOver();\n          } else {\n            this.interactions.isRealHover = false;\n            this.handleOut();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"isDragged\", {\n    /**\r\n     * Returns indicator if this element is being dragged at the moment.\r\n     *\r\n     * @return Is dragged?\r\n     */\n    get: function () {\n      return this._isDragged;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"isResized\", {\n    /**\r\n     * Returns indicator if this element is being resized at the moment.\r\n     *\r\n     * @return Is resized?\r\n     */\n    get: function () {\n      return this._isResized;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"isDown\", {\n    /**\r\n     * @return Is down?\r\n     */\n    get: function () {\n      if (this.isInteractive()) {\n        return this.interactions.isDown;\n      }\n      return false;\n    },\n    /**\r\n     * Indicates if this element has any pointers (mouse or touch) pressing down\r\n     * on it.\r\n     *\r\n     * @param value Is down?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      if (this.isInteractive() && this.isDown != value) {\n        this.interactions.isDown = value;\n        if (value) {\n          this.handleDown();\n        } else {\n          this.handleUp();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"isFocused\", {\n    /**\r\n     * @return Is focused?\r\n     */\n    get: function () {\n      if (this.isInteractive()) {\n        return this.interactions.isFocused;\n      }\n      return false;\n    },\n    /**\r\n     * Indicates if this element is focused (possibly by tab navigation).\r\n     *\r\n     * @param value Is focused?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      if (this.focusable && this.isFocused != value) {\n        if (this.isInteractive()) {\n          this.interactions.isFocused = value;\n          if (value === true) {\n            this.handleFocus();\n          } else {\n            this.handleBlur();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"isActive\", {\n    /**\r\n     * @return Is active?\r\n     */\n    get: function () {\n      return this._isActive;\n    },\n    /**\r\n     * Indicates if this element is currently active (toggled on) or not\r\n     * (toggled off).\r\n     *\r\n     * @param value Is active?\r\n     */\n    set: function (value) {\n      this.setActive(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Sprite.prototype.setActive = function (value) {\n    value = $type.toBoolean(value);\n    if (this._isActive !== value) {\n      this._isActive = value;\n      if (value && this.states.hasKey(\"active\")) {\n        this.setState(\"active\");\n        if (this.isHover && this.states.hasKey(\"hoverActive\")) {\n          this.setState(\"hoverActive\");\n        }\n      } else {\n        this.applyCurrentState();\n      }\n      this.dispatchImmediately(\"toggled\");\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"disabled\", {\n    /**\r\n     * @return Disabled?\r\n     */\n    get: function () {\n      //if(this._internalDisabled){\n      //\treturn true;\n      //}\n      var current = this.getPropertyValue(\"disabled\");\n      if ($type.hasValue(current)) {\n        return current;\n      } else {\n        if (this.virtualParent) {\n          return this.virtualParent.disabled;\n        }\n        if (this._parent) {\n          return this._parent.disabled;\n        }\n      }\n      return false;\n    },\n    /**\r\n     * Controls if element is disabled.\r\n     *\r\n     * A disabled element is hidden, and is removed from any processing, layout\r\n     * calculations, and generally treated as if it does not exist.\r\n     *\r\n     * The element itself is not destroyed, though. Setting this back to `false`,\r\n     * will \"resurrect\" the element.\r\n     *\r\n     * @param value  Disabled?\r\n     */\n    set: function (value) {\n      this.setDisabled(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Sprite.prototype.setDisabled = function (value) {\n    value = $type.toBoolean(value);\n    var current = this.getPropertyValue(\"disabled\");\n    if (current != value) {\n      this.setPropertyValue(\"disabled\", value, true);\n      if (value) {\n        this.parent = this._parent;\n        this.removeFromInvalids();\n        this.group.attr({\n          \"display\": \"none\"\n        });\n        this.dispatch(\"disabled\");\n      } else {\n        if (this._parent) {\n          var group = this._parent.element;\n          if (!group.hasChild(this.group)) {\n            group.add(this.group);\n          }\n        }\n        if (this instanceof Container) {\n          this.deepInvalidate();\n          if (this._background) {\n            this._background.invalidate();\n          }\n        } else {\n          this.invalidate();\n        }\n        if (!this.__disabled) {\n          this.removeSVGAttribute(\"display\");\n        }\n        this.dispatch(\"enabled\");\n      }\n      this.dispatch(\"transformed\");\n      system.requestFrame();\n      return true;\n    }\n    return false;\n  };\n  Object.defineProperty(Sprite.prototype, \"__disabled\", {\n    /**\r\n     * @ignore\r\n     * @return Disabled?\r\n     */\n    get: function () {\n      return this._internalDisabled;\n    },\n    /**\r\n     * Internal disable method.\r\n     *\r\n     * Do not use it for disabling elements. Use `disabled` accessor instead.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Disabled?\r\n     */\n    set: function (value) {\n      if (this._internalDisabled != value) {\n        this._internalDisabled = value;\n        this._updateDisabled = true;\n        this.invalidatePosition(); // better use this instead of invalidate()\n        if (!value) {\n          this.invalidate();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"numberFormatter\", {\n    /**\r\n     * @return A [[NumberFormatter]] instance to be used\r\n     */\n    get: function () {\n      if (this._numberFormatter) {\n        return this._numberFormatter;\n      } else if (this.virtualParent) {\n        return this.virtualParent.numberFormatter;\n      } else if (this._parent) {\n        return this._parent.numberFormatter;\n      }\n      this._numberFormatter = new NumberFormatter();\n      this._numberFormatter.language = this.language;\n      return this.numberFormatter;\n    },\n    /**\r\n     * ==========================================================================\r\n     * FORMATTERS AND OTHER EXTERNAL HELPERS\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * A [[NumberFormatter]] instance.\r\n     *\r\n     * This is used to format numbers.\r\n     *\r\n     * ```TypeScript\r\n     * chart.numberFormatter.numberFormat = \"#,###.#####\";\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.numberFormatter.numberFormat = \"#,###.#####\";\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"numberFormatter\": {\r\n     *     \"numberFormat\": \"#,###.#####\"\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * You can set a separate instance of formatter for each\r\n     * individual element. However that would be unnecessary overhead as\r\n     * all elements would automatically inherit formatter from their parents,\r\n     * all the way up to the chart itself.\r\n     *\r\n     *\r\n     * @see {@link NumberFormatter} for more info on formatting numbers\r\n     * @param value  An instance of NumberFormatter\r\n     */\n    set: function (value) {\n      this._numberFormatter = value;\n      this._numberFormatter.language = this.language;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"dateFormatter\", {\n    /**\r\n     * @return An instance of DateFormatter\r\n     */\n    get: function () {\n      if (this._dateFormatter) {\n        return this._dateFormatter;\n      } else if (this.virtualParent) {\n        return this.virtualParent.dateFormatter;\n      } else if (this._parent) {\n        return this._parent.dateFormatter;\n      }\n      this._dateFormatter = new DateFormatter();\n      this._dateFormatter.language = this.language;\n      return this.dateFormatter;\n    },\n    /**\r\n     * A [[DateFormatter]] instance.\r\n     *\r\n     * This is used to format dates, e.g. on a date axes, balloons, etc.\r\n     *\r\n     * ```TypeScript\r\n     * chart.dateFormatter.dateFormat = \"yyyy-MM-dd\";\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.dateFormatter.dateFormat = \"yyyy-MM-dd\";\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"dateFormatter\": {\r\n     *     \"dateFormat\": \"yyyy-MM-dd\"\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * You can set a separate instance of formatter for each\r\n     * individual element. However that would be unnecessary overhead as\r\n     * all elements would automatically inherit formatter from their parents,\r\n     * all the way up to the chart itself.\r\n     *\r\n     * @see {@link DateFormatter} for more info on dates formatting\r\n     * @param value  An instance of DateFormatter\r\n     */\n    set: function (value) {\n      this._dateFormatter = value;\n      this._dateFormatter.language = this.language;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"durationFormatter\", {\n    /**\r\n     * @return An instance of DurationFormatter\r\n     */\n    get: function () {\n      if (this._durationFormatter) {\n        return this._durationFormatter;\n      } else if (this.virtualParent) {\n        return this.virtualParent.durationFormatter;\n      } else if (this._parent) {\n        return this._parent.durationFormatter;\n      }\n      this._durationFormatter = new DurationFormatter();\n      this._durationFormatter.language = this.language;\n      return this.durationFormatter;\n    },\n    /**\r\n     * A [[DurationFormatter]] instance.\r\n     *\r\n     * This is used to format numbers as durations, e.g. on a value axes.\r\n     *\r\n     * You can set a separate instance of formatter for each\r\n     * individual element. However that would be unnecessary overhead as\r\n     * all elements would automatically inherit formatter from their parents,\r\n     * all the way up to the chart itself.\r\n     *\r\n     * @see {@link DurationFormatter} for more info on durations\r\n     * @param value  An instance of DurationFormatter\r\n     */\n    set: function (value) {\n      this._durationFormatter = value;\n      this._durationFormatter.language = this.language;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"language\", {\n    /**\r\n     * @return An instance of Language\r\n     */\n    get: function () {\n      var language = this._language.get();\n      if (language) {\n        return language;\n      } else if (this.virtualParent) {\n        return this.virtualParent.language;\n      } else if (this._parent) {\n        return this._parent.language;\n      }\n      language = new Language();\n      this.language = language;\n      return language;\n    },\n    /**\r\n     * A [[Language]] instance to use for translations.\r\n     *\r\n     * Normally it is enough to set language for the top-most element - chart.\r\n     *\r\n     * All other element child elements will automatically re-use that language\r\n     * object.\r\n     *\r\n     * @param value  An instance of Language\r\n     */\n    set: function (value) {\n      var _this = this;\n      if (this._language.get() !== value) {\n        this._language.set(value, value.events.on(\"localechanged\", function (ev) {\n          if (_this._numberFormatter) {\n            _this._numberFormatter.language = _this.language;\n          }\n          if (_this._dateFormatter) {\n            _this._dateFormatter.language = _this.language;\n          }\n          if (_this._durationFormatter) {\n            _this._durationFormatter.language = _this.language;\n          }\n          if (_this._exporting.get()) {\n            var exporting = _this._exporting.get();\n            exporting.numberFormatter.language = _this.language;\n            exporting.dateFormatter.language = _this.language;\n            exporting.durationFormatter.language = _this.language;\n            exporting.language = _this.language;\n          }\n          if (_this instanceof Container) {\n            _this.deepInvalidate();\n          }\n        }));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * ==========================================================================\r\n   * DATA-RELATED STUFF\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n  /**\r\n   * Parses the string for meta tags `{tag}` and replaces them with a real\r\n   * value. Supports straight up tags referring to the field in data, i.e.\r\n   * `{value}` or tags with additional formatting info. E.g.:\r\n   *\r\n   * ```Text\r\n   * {myfield.formatDate(\"yyyy-MM-dd\")}\r\n   * {myfield.formatDate()}\r\n   * {myfield.formatNumber(\"#,####.00\")}\r\n   * {myfield.formatNumber()}\r\n   * {myField.formatDuration(\"mm:ss\")}\r\n   * ```\r\n   *\r\n   * Etc.\r\n   *\r\n   * This method Will automatically detect and use proper formatter for the\r\n   * value.\r\n   *\r\n   * The source value will be looked up in various places: (in order)\r\n   * * Sprite's own `dataItem`\r\n   * * Sprite's properties\r\n   * * Parent's `dataItem`\r\n   * * Parent's properties\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param string            A string to format\r\n   * @param dataItem          DataItem\r\n   * @return Formatted string\r\n   */\n  Sprite.prototype.populateString = function (string, dataItem) {\n    if ($type.hasValue(string)) {\n      string = $type.castString(string);\n      string = getTextFormatter().escape(string);\n      var tags = string.match(/\\{([^}]+)\\}/g);\n      var i = void 0;\n      if (tags) {\n        for (i = 0; i < tags.length; i++) {\n          var tag = tags[i].replace(/\\{([^}]+)\\}/, \"$1\");\n          var value = this.getTagValue(tag, \"\", dataItem);\n          if (!$type.hasValue(value)) {\n            value = \"\";\n          }\n          string = string.split(tags[i]).join(value);\n        }\n      }\n      string = getTextFormatter().unescape(string);\n    } else {\n      string = \"\";\n    }\n    if (!this._adapterO) {\n      return string;\n    } else {\n      return this._adapterO.apply(\"populateString\", string);\n    }\n  };\n  /**\r\n   * Gets the value from data item and formats it according to specified format.\r\n   *\r\n   * If `format` is specified, it will use its contents to choose formatter for\r\n   * the value. Otherwise it will select formatter accordingly to actual value\r\n   * type.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Ability to force certain formatter on known numeric and date values\r\n   * @see {@link NumberFormatter}\r\n   * @see {@link DateFormatter}\r\n   * @see {@link DurationFormatter}\r\n   * @param tagName           Tag name to replace\r\n   * @param format            Format to use\r\n   * @param dataItem          DataItem\r\n   * @return Formatted value\r\n   */\n  Sprite.prototype.getTagValue = function (tagName, format, dataItem) {\n    var value;\n    if (!$type.hasValue(dataItem)) {\n      dataItem = this.dataItem;\n    }\n    // Parse parts\n    var parts = [];\n    var reg = /([^.]+)\\(([^)]*)\\)|([^.]+)/g;\n    ;\n    var matches;\n    while (true) {\n      matches = reg.exec(tagName);\n      if (matches === null) {\n        break;\n      }\n      if (matches[3]) {\n        // Simple property\n        parts.push({\n          prop: matches[3]\n        });\n      } else {\n        // Method\n        // Parse parameters\n        var params = [];\n        if ($utils.trim(matches[2]) != \"\") {\n          var reg2 = /'([^']*)'|\"([^\"]*)\"|([0-9\\-]+)/g;\n          var matches2 = void 0;\n          while (true) {\n            matches2 = reg2.exec(matches[2]);\n            if (matches2 === null) {\n              break;\n            }\n            params.push(matches2[1] || matches2[2] || matches2[3]);\n          }\n        }\n        parts.push({\n          method: matches[1],\n          params: params\n        });\n      }\n    }\n    // Check if we can retrieve the value from data item\n    if (dataItem) {\n      // Check values\n      value = this.getTagValueFromObject(parts, dataItem.values);\n      // Check properties\n      if (!$type.hasValue(value) || $type.isObject(value)) {\n        // isObject helps to solve problem with date axis, as for example dateX will get dateX from values object and won't get to the dateX date.\n        value = this.getTagValueFromObject(parts, dataItem);\n      }\n      // Check data context\n      var dataContext = dataItem.dataContext;\n      if (!$type.hasValue(value) && dataContext) {\n        value = this.getTagValueFromObject(parts, dataItem.dataContext);\n        // Maybe it's a literal dot-separated name of the key in dataContext?\n        if (!$type.hasValue(value)) {\n          value = this.getTagValueFromObject([{\n            prop: tagName\n          }], dataContext);\n        }\n        // scond data context level sometimes exist (tree map)\n        if (!$type.hasValue(value) && dataContext.dataContext) {\n          value = this.getTagValueFromObject(parts, dataContext.dataContext);\n        }\n      }\n      // Check component's data item\n      if (!$type.hasValue(value) && dataItem.component && dataItem.component.dataItem !== dataItem) {\n        value = dataItem.component.getTagValue(tagName, format);\n      }\n    }\n    // Check sprite's properties\n    if (!$type.hasValue(value)) {\n      value = this.getTagValueFromObject(parts, this.populateStringFrom || this);\n    }\n    // Finally, check the parent\n    if (!$type.hasValue(value) && this._parent) {\n      value = this._parent.getTagValue(tagName, format);\n    }\n    return value;\n  };\n  /**\r\n   * Tries to retrieve values from properties of any object, then applies\r\n   * proper formatting to it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (improve)\r\n   * @param parts   Properties ant methods to access\r\n   * @param object  Source object\r\n   * @param format  A specific format to apply\r\n   * @return Formatted value\r\n   */\n  Sprite.prototype.getTagValueFromObject = function (parts, object, format) {\n    var current = object;\n    var formatApplied = false;\n    for (var i = 0, len = parts.length; i < len; i++) {\n      var part = parts[i];\n      if (part.prop) {\n        // Regular property\n        current = current[part.prop];\n        if (!$type.hasValue(current)) {\n          // Not set, return undefined\n          return;\n        }\n      } else {\n        // Method\n        switch (part.method) {\n          case \"formatNumber\":\n            var numberValue = $utils.anyToNumber(current);\n            if ($type.hasValue(numberValue)) {\n              current = this.numberFormatter.format(numberValue, format || part.params[0] || undefined);\n              formatApplied = true;\n            }\n            break;\n          case \"formatDate\":\n            var dateValue = void 0;\n            if ($type.isString(current)) {\n              dateValue = this.dateFormatter.parse(current);\n            } else {\n              dateValue = $utils.anyToDate(current);\n            }\n            if (!$type.isDate(dateValue) || $type.isNaN(dateValue.getTime())) {\n              // Was not able to get date out of value, quitting and letting\n              // calling method try another value\n              return;\n            }\n            if ($type.hasValue(dateValue)) {\n              current = this.dateFormatter.format(dateValue, format || part.params[0] || undefined);\n              formatApplied = true;\n            }\n            break;\n          case \"formatDuration\":\n            var durationValue = $utils.anyToNumber(current);\n            if ($type.hasValue(durationValue)) {\n              current = this.durationFormatter.format(durationValue, format || part.params[0] || undefined, part.params[1] || undefined);\n              formatApplied = true;\n            }\n            break;\n          case \"urlEncode\":\n          case \"encodeURIComponent\":\n            current = encodeURIComponent(current);\n            break;\n          default:\n            if (current[part.method]) {\n              current[part.method].apply(this, part.params);\n            }\n            break;\n        }\n      }\n    }\n    // Apply default format if it wasn't applied explicitly\n    if (!formatApplied) {\n      var formatParts = [{\n        method: \"\",\n        params: format\n      }];\n      if (!$type.hasValue(format)) {\n        // Format is not set\n        // Determine from the type of the value\n        if ($type.isNumber(current)) {\n          formatParts[0].method = \"formatNumber\";\n          formatParts[0].params = \"\";\n        } else if ($type.isDate(current)) {\n          formatParts[0].method = \"formatDate\";\n          formatParts[0].params = \"\";\n        }\n      } else {\n        // Format set\n        // Try to determine formatter based on the format\n        var formatterType = $utils.getFormat(format);\n        // format\n        if (formatterType === $strings.NUMBER) {\n          formatParts[0].method = \"formatNumber\";\n        } else if (formatterType === $strings.DATE) {\n          formatParts[0].method = \"formatDate\";\n        } else if (formatterType === $strings.DURATION) {\n          formatParts[0].method = \"formatDuration\";\n        }\n      }\n      // Apply format\n      if (formatParts[0].method) {\n        current = this.getTagValueFromObject(formatParts, current);\n      }\n    }\n    return current;\n  };\n  Object.defineProperty(Sprite.prototype, \"dataItem\", {\n    /**\r\n     * @return [[DataItem]]\r\n     */\n    get: function () {\n      if (!this._dataItem) {\n        if (this.virtualParent) {\n          return this.virtualParent.dataItem;\n        }\n        if (this._parent) {\n          return this._parent.dataItem;\n        }\n      }\n      return this._dataItem;\n    },\n    /**\r\n     * A [[DataItem]] to use as element's data source.\r\n     *\r\n     * @todo Review type\r\n     * @param dataItem  DataItem\r\n     */\n    set: function (dataItem) {\n      //an not use this[\"_dataItem\"] here, as we return parent data item if this sprite doesn't have one.\n      // @todo:think about it\n      this.setDataItem(dataItem);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets currently used [[DataItem]].\r\n   *\r\n   * If the element has also `configField` set, it will also look for any\r\n   * config in DataItem's data context to apply to this element.\r\n   *\r\n   * @param dataItem DataItem\r\n   */\n  Sprite.prototype.setDataItem = function (dataItem) {\n    var _this = this;\n    if (this._dataItem != dataItem) {\n      this._dataItem = dataItem;\n      if (dataItem) {\n        if (this.configField) {\n          var dataContext_1 = dataItem.dataContext;\n          if (dataContext_1) {\n            this.config = dataContext_1[this.configField];\n            if (!this.config && dataContext_1.dataContext) {\n              this.config = dataContext_1.dataContext[this.configField];\n            }\n          }\n        }\n        var dataContext_2 = dataItem.dataContext;\n        if (dataContext_2) {\n          var dataContext2_1 = dataContext_2.dataContext;\n          $object.each(this.propertyFields, function (propertyName, fieldValue) {\n            if ($type.hasValue(dataContext_2[fieldValue])) {\n              var anyThis = _this;\n              anyThis[propertyName] = dataContext_2[fieldValue];\n            } else {\n              if (dataContext2_1) {\n                var value = dataContext2_1[fieldValue];\n                if ($type.hasValue(value)) {\n                  var anyThis = _this;\n                  anyThis[propertyName] = value;\n                }\n              }\n            }\n          });\n        }\n      }\n      this.invalidate();\n    }\n  };\n  /**\r\n   * ==========================================================================\r\n   * PROPERTY UTILITIES\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n  /**\r\n   * Returns element's property value.\r\n   *\r\n   * Will check if there are any bindings with [[DataItem]].\r\n   *\r\n   * Will also apply any adapters bound to `propertyName`.\r\n   *\r\n   * @param propertyName  Property name\r\n   * @return Property value\r\n   */\n  Sprite.prototype.getPropertyValue = function (propertyName) {\n    var propValue = this.properties[propertyName];\n    // Apply adapter\n    if (!this._isTemplate) {\n      if (this._adapterO) {\n        propValue = this._adapterO.apply(propertyName, propValue);\n      }\n      propValue = globalAdapter.applyAll(this, propertyName, propValue);\n    }\n    return propValue;\n  };\n  Sprite.prototype.setColorProperty = function (property, value, invalidate) {\n    var currentValue = this.properties[property];\n    if (value instanceof Color && currentValue instanceof Color && value.toString() == currentValue.toString()) {\n      return false;\n    } else {\n      return this.setPropertyValue(property, value, invalidate);\n    }\n  };\n  Sprite.prototype.setPercentProperty = function (property, value, invalidate, transform, precision, floor) {\n    value = $type.toNumberOrPercent(value);\n    if ($type.isNumber(value)) {\n      if ($type.isNumber(precision)) {\n        value = $math.round(value, precision, floor);\n      }\n      return this.setPropertyValue(property, value, invalidate, transform);\n    } else {\n      var currentValue = this.properties[property];\n      if (value instanceof Percent && currentValue instanceof Percent && value.value == currentValue.value) {\n        return false;\n      } else {\n        return this.setPropertyValue(property, value, invalidate, transform);\n      }\n    }\n  };\n  /**\r\n   * Sets elements's property value. Will also propagate the same property value\r\n   * on all element's clones.\r\n   *\r\n   * @param property    Property\r\n   * @param value       Value\r\n   * @param invalidate  Should the sprite be invalidated, cause it's re-rendering\r\n   * @param transform   Re-apply positioning of the element\r\n   * @return Did the value change? It will return `true` if the new value and the old value of the property are not the same\r\n   * @todo Review propagation to clones. Right now we simply check if clone is disposed before setting the same property on it. It's better to remove from clone list altogether.\r\n   */\n  Sprite.prototype.setPropertyValue = function (property, value, invalidate, transform) {\n    if (this.properties[property] !== value && !this.isDisposed()) {\n      this.properties[property] = value;\n      if (this.events.isEnabled(\"propertychanged\")) {\n        var event_1 = {\n          type: \"propertychanged\",\n          target: this,\n          property: property\n        };\n        this.events.dispatchImmediately(\"propertychanged\", event_1);\n      }\n      if (invalidate) {\n        this.invalidate();\n      }\n      if (transform) {\n        this.invalidatePosition();\n      }\n      if (this.applyOnClones) {\n        var clones = this.clones.values;\n        var length_2 = clones.length;\n        for (var i = 0; i < length_2; ++i) {\n          var clone = clones[i];\n          if (!clone.isDisposed()) {\n            //(<Sprite>clone).setPropertyValue(<any>property, value, invalidate, transform);\n            clone[property] = value;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  };\n  Sprite.prototype.bind = function (property, source, bindToProperty, modifier) {\n    var _this = this;\n    if (bindToProperty === void 0) {\n      bindToProperty = property;\n    }\n    if ($type.hasValue(this._bindings[property])) {\n      this._bindings[property].dispose();\n    }\n    // set current value\n    this[property] = source[bindToProperty];\n    //source.addEventListener(AMEvent.PROPERTY_CHANGED, this.handleBindings, false, this);\n    this._bindings[property] = source.events.on(\"propertychanged\", function (event) {\n      if (event.property === bindToProperty) {\n        var value = source[bindToProperty];\n        if (modifier) {\n          value = modifier(value);\n        }\n        // TODO clonesById\n        _this[property] = value;\n      }\n    });\n  };\n  /**\r\n   * Sets up and obeserver function to monitor changes in particular property\r\n   * or properties.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param property  Element's property name\r\n   * @param listener  Handler function\r\n   * @param context   Context for handler function\r\n   * @returns Event Disposer\r\n   */\n  Sprite.prototype.observe = function (property, listener, context, shouldClone) {\n    var _this = this;\n    return new MultiDisposer($array.map($array.toArray(property), function (prop) {\n      return _this.events.on(\"propertychanged\", function (e) {\n        if (e.property === prop) {\n          listener.call(context, e);\n        }\n      }, context, shouldClone);\n    }));\n  };\n  /**\r\n   * ==========================================================================\r\n   * ACCESSIBILITY-RELATED PROPERTIES\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n  /**\r\n   * Applies accessibility to the SVG element.\r\n   *\r\n   * Adds `<title>` and `<description>` elements as well as `aria-labelledby`\r\n   * and `role` properties.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.applyAccessibility = function () {\n    // Check if we need to add label and description\n    var title = this.readerTitle,\n      description = this.readerDescription,\n      role = this.role,\n      hidden = this.readerHidden,\n      checked = this.readerChecked,\n      controls = this.readerControls,\n      live = this.readerLive,\n      orientation = this.readerOrientation,\n      valueNow = this.readerValueNow,\n      valueText = this.readerValueText;\n    // Init label/describe ids\n    var labelledByIds = [];\n    var describedByIds = [];\n    var labelledBy = this.readerLabelledBy;\n    if (labelledBy) {\n      labelledByIds.push(labelledBy);\n    }\n    var describedBy = this.readerDescribedBy;\n    if (describedBy) {\n      describedByIds.push(describedBy);\n    }\n    // Add arial-label attribute if present\n    // If not readerTitle and labelledBy is set we will use <title> element\n    // instead of aria-label\n    // TODO: should we check agains this.showSystemTooltip?\n    if (title) {\n      if (labelledByIds.length || this.showSystemTooltip) {\n        var titleElement = this.titleElement;\n        var titleId = this.uid + \"-title\";\n        if (titleElement.node.textContent != title) {\n          titleElement.node.textContent = title;\n          titleElement.attr({\n            id: titleId\n          });\n        }\n        labelledByIds.push(titleId);\n      } else {\n        if (this._titleElement) {\n          this.group.removeElement(this._titleElement);\n          this._titleElement = undefined;\n        }\n        this.setSVGAttribute({\n          \"aria-label\": title\n        });\n      }\n    } else {\n      this.removeSVGAttribute(\"aria-label\");\n      if (this._titleElement) {\n        this.group.removeElement(this._titleElement);\n        this._titleElement = undefined;\n      }\n    }\n    // Add description\n    if (description) {\n      var descriptionElement = this.descriptionElement;\n      var descriptionId = this.uid + \"-description\";\n      if (descriptionElement.node.textContent != description) {\n        descriptionElement.node.textContent = description;\n        descriptionElement.attr({\n          id: descriptionId\n        });\n      }\n      describedByIds.push(descriptionId);\n    } else if (this._descriptionElement) {\n      this.group.removeElement(this._descriptionElement);\n      this._descriptionElement = undefined;\n    }\n    // Add label and described properties\n    if (labelledByIds.length) {\n      this.setSVGAttribute({\n        \"aria-labelledby\": labelledByIds.join(\" \")\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-labelledby\");\n    }\n    if (describedByIds.length) {\n      this.setSVGAttribute({\n        \"aria-describedby\": describedByIds.join(\" \")\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-describedby\");\n    }\n    // Apply role\n    if (role) {\n      this.setSVGAttribute({\n        \"role\": role\n      });\n    } else {\n      this.removeSVGAttribute(\"role\");\n    }\n    // Apply aria-hidden\n    if (hidden) {\n      this.setSVGAttribute({\n        \"aria-hidden\": \"true\"\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-hidden\");\n    }\n    // Apply aria-checked\n    if (checked) {\n      this.setSVGAttribute({\n        \"aria-checked\": \"true\"\n      });\n    } else if (checked === false) {\n      this.setSVGAttribute({\n        \"aria-checked\": \"false\"\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-checked\");\n    }\n    // Apply aria-controls\n    if (controls) {\n      this.setSVGAttribute({\n        \"aria-controls\": controls\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-controls\");\n    }\n    // Apply aria-live\n    if (live) {\n      this.setSVGAttribute({\n        \"aria-live\": live\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-live\");\n    }\n    // Apply aria-orientation\n    if (orientation) {\n      this.setSVGAttribute({\n        \"aria-orientation\": orientation\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-orientation\");\n    }\n    // Apply aria-valuenow\n    if (valueNow) {\n      this.setSVGAttribute({\n        \"aria-valuenow\": valueNow\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-valuenow\");\n    }\n    // Apply aria-valuetext\n    if (valueText) {\n      this.setSVGAttribute({\n        \"aria-valuetext\": valueText\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-valuetext\");\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"readerTitle\", {\n    /**\r\n     * @return Title\r\n     */\n    get: function () {\n      var title = this.getPropertyValue(\"readerTitle\");\n      if ($type.hasValue(title) && this.dataItem) {\n        return this.populateString(title);\n      }\n      return title;\n    },\n    /**\r\n     * Screen reader title of the element.\r\n     *\r\n     * @param value Title\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      if (this.setPropertyValue(\"readerTitle\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerDescription\", {\n    /**\r\n     * @return Description\r\n     */\n    get: function () {\n      var description = this.getPropertyValue(\"readerDescription\");\n      if ($type.hasValue(description) && this.dataItem) {\n        return this.populateString(description);\n      }\n      return this.getPropertyValue(\"readerDescription\");\n    },\n    /**\r\n     * Screen reader description of the element.\r\n     *\r\n     * @param value Description\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      if (this.setPropertyValue(\"readerDescription\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"role\", {\n    /**\r\n     * @return Role\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"role\");\n    },\n    /**\r\n     * A WAI-ARIA role for the element.\r\n     *\r\n     * @see {@link https://www.w3.org/TR/wai-aria-1.1/#role_definitions} for more information on WAI-ARIA roles\r\n     * @param value  Role\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      if (this.setPropertyValue(\"role\", value)) {\n        this.applyAccessibility();\n        if (value == \"slider\") {\n          this.setSVGAttribute({\n            \"aria-valuemin\": \"0\"\n          });\n          this.setSVGAttribute({\n            \"aria-valuemax\": \"100\"\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerHidden\", {\n    /**\r\n     * @return Hidden?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"readerHidden\");\n    },\n    /**\r\n     * Controls if element should be hidden from screen readers.\r\n     *\r\n     * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-hidden} for more information\r\n     * @param value  Hidden?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      if (this.setPropertyValue(\"readerHidden\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerChecked\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Checked?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"readerChecked\");\n    },\n    /**\r\n     * Controls if element is currently marked as \"checked\".\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-checked} for more information\r\n     * @param value Checked?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      if (this.setPropertyValue(\"readerChecked\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerControls\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Setting value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"readerControls\");\n    },\n    /**\r\n     * A `uid` of an element this element controls.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-controls} for more information\r\n     * @param value Setting value\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      if (this.setPropertyValue(\"readerControls\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerLive\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Setting value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"readerLive\");\n    },\n    /**\r\n     * Controls accessibility setting \"aria-live\" for the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions} for more information\r\n     * @param value Setting value\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      if (this.setPropertyValue(\"readerLive\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerLabelledBy\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Target element\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"readerLabelledBy\");\n    },\n    /**\r\n     * A `uid` of an element that describes this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-labelledby} for more information\r\n     * @param value Target element\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      if (this.setPropertyValue(\"readerLabelledBy\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerDescribedBy\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Target element\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"readerDescribedBy\");\n    },\n    /**\r\n     * A `uid` of an element that describes this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-describedby} for more information\r\n     * @param value Target element\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      if (this.setPropertyValue(\"readerDescribedBy\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerOrientation\", {\n    /**\r\n     * @return Orientation\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"readerOrientation\");\n    },\n    /**\r\n     * Orientation of the element.\r\n     *\r\n     * @since 4.7.16\r\n     * @param value Orientation\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      if (this.setPropertyValue(\"readerOrientation\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerValueNow\", {\n    /**\r\n     * @return Current value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"readerValueNow\");\n    },\n    /**\r\n     * Current value of the element.\r\n     *\r\n     * @since 4.7.16\r\n     * @param value Current value\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      if (this.setPropertyValue(\"readerValueNow\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerValueText\", {\n    /**\r\n     * @return Current value (text)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"readerValueText\");\n    },\n    /**\r\n     * Text representation of the current value of the element.\r\n     *\r\n     * @since 4.7.16\r\n     * @param value Current value (text)\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      if (this.setPropertyValue(\"readerValueText\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"keyboardOptions\", {\n    /**\r\n     * ==========================================================================\r\n     * USER INTERACTIONS\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Returns elements keyboard options.\r\n     *\r\n     * @return Keyboard options\r\n     */\n    get: function () {\n      if (!this.interactions.keyboardOptions) {\n        if (this.virtualParent) {\n          return this.virtualParent.keyboardOptions;\n        }\n        if (this._parent) {\n          return this._parent.keyboardOptions;\n        }\n      }\n      return this.interactions.keyboardOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"mouseOptions\", {\n    /**\r\n     * Mouse options.\r\n     *\r\n     * Enables controlling options related to the mouse, for example sensitivity\r\n     * of its mouse wheel.\r\n     *\r\n     * E.g. the below will reduce chart's wheel-zoom speed to half its default\r\n     * speed:\r\n     *\r\n     * ```TypeScript\r\n     * chart.plotContainer.mouseOptions.sensitivity = 0.5;\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.plotContainer.mouseOptions.sensitivity = 0.5;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"plotContainer\": {\r\n     *     \"mouseOptions\": {\r\n     *       \"sensitivity\": 0.5\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * @return Mouse options\r\n     */\n    get: function () {\n      if (!this.interactions.mouseOptions) {\n        if (this.virtualParent) {\n          return this.virtualParent.mouseOptions;\n        }\n        if (this._parent) {\n          return this._parent.mouseOptions;\n        }\n      }\n      return this.interactions.mouseOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"interactions\", {\n    /**\r\n     * Returns (creates if necessary) an [[InteractionObject]] associated with\r\n     * this element.\r\n     *\r\n     * [[InteractionObject]] is used to attach all kinds of user-interactions to\r\n     * the element, e.g. click/touch, dragging, hovering, and similar events.\r\n     *\r\n     * @return Interaction object\r\n     */\n    get: function () {\n      if (!this._interaction) {\n        var interaction = getInteraction().getInteraction(this.dom);\n        this._interaction = interaction;\n        interaction.clickable = this.clickable;\n        interaction.hoverable = this.hoverable;\n        interaction.trackable = this.trackable;\n        interaction.draggable = this.draggable;\n        interaction.swipeable = this.swipeable;\n        interaction.resizable = this.resizable;\n        interaction.wheelable = this.wheelable;\n        interaction.contextMenuDisabled = this.contextMenuDisabled;\n        interaction.inert = this.inert;\n        interaction.sprite = this;\n        this._disposers.push(interaction);\n      }\n      return this._interaction;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns true if interactions object was created. Mostly used just to avoid creating interactions object if not needed.\r\n   * @return Is Sprite interactive?\r\n   */\n  Sprite.prototype.isInteractive = function () {\n    if (this._interaction) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"focusable\", {\n    /**\r\n     * @return Can element be focused?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"focusable\");\n    },\n    /**\r\n     * ==========================================================================\r\n     * ELEMENT FOCUS-RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Controls if the element can gain focus.\r\n     *\r\n     * Focusable element will be selectable via TAB key.\r\n     *\r\n     * Please note, clicking it with a mouse or touching will not add focus to\r\n     * it.\r\n     *\r\n     * Focused element will show a system-specific highlight, which might ruin\r\n     * the overal look. This is why we don't focus element on click/touch.\r\n     *\r\n     * A default setting varies for different elements. By default all elements\r\n     * are not focusable, except certain items like buttons, legend items, etc.\r\n     *\r\n     * @default undefined (auto)\r\n     * @param value  Can element be focused?\r\n     */\n    set: function (value) {\n      var _this = this;\n      value = $type.toBoolean(value);\n      if (this.setPropertyValue(\"focusable\", value)) {\n        if (!value && !this.isInteractive()) {} else {\n          this.interactions.focusable = value;\n          if (value) {\n            this.setSVGAttribute({\n              \"focusable\": value\n            });\n            if (!$type.hasValue(this._tabindex)) {\n              this.tabindex = 0;\n            }\n          } else {\n            this.removeSVGAttribute(\"focusable\");\n            this.tabindex = undefined;\n          }\n          // Set focus events that would apply \"focus\" state\n          // setEventDisposer will also remove listeners if value == false\n          this.interactions.setEventDisposer(\"sprite-focusable\", value, function () {\n            return new MultiDisposer([_this.events.on(\"blur\", _this.handleBlur, _this, false), _this.events.on(\"focus\", _this.handleFocus, _this, false)]);\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Applies filters (if set) when element gains focus.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Original event\r\n   */\n  Sprite.prototype.handleFocus = function (ev) {\n    if (this.focusable) {\n      if (this.topParent) {\n        this.topParent.hasFocused = true;\n        this.topParent.focusedElement = this;\n      }\n      if (this.focusFilter) {\n        // Any `filters` manipulation will trigger `applyFilters()` so we don't\n        // need to call it here\n        this.filters.push(this.focusFilter);\n      }\n      if (this.hoverOnFocus) {\n        // Trigger a hover event as well\n        this.isHover = true;\n        this.handleOver();\n      }\n    }\n  };\n  /**\r\n   * Removes focus filter (if set) when elementloses focus.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Original event\r\n   */\n  Sprite.prototype.handleBlur = function (ev) {\n    if (this.focusable) {\n      if (this.topParent) {\n        this.topParent.hasFocused = false;\n        this.topParent.focusedElement = undefined;\n      }\n      if (this.focusFilter) {\n        // Any `filters` manipulation will trigger `applyFilters()` so we don't\n        // need to call it here\n        this.filters.removeValue(this.focusFilter);\n      }\n      if (this.hoverOnFocus) {\n        // Trigger a out event as well\n        this.isHover = false;\n        this.handleOut();\n      }\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"focusFilter\", {\n    /**\r\n     * A reference to a [[Filter]] to apply to element when it gains focus.\r\n     *\r\n     * Normally, browsers will draw a default ugly square around focused element,\r\n     * which totally makes sense because its purpose is to help identify active\r\n     * element for visually impaired people.\r\n     *\r\n     * However, if you would rather apply a filter, so you can modify how focused\r\n     * element looks like, use `focusFilter`.\r\n     *\r\n     * Simply set it to an anstance of [[FocusFilter]], or any other filter\r\n     * object.\r\n     *\r\n     * ```TypeScript\r\n     * chart.focusFilter = new am4core.FocusFilter();\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.focusFilter = new am4core.FocusFilter();\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"focusFilter\": {\r\n     *     \"type\": \"FocusFilter\"\r\n     *   },\r\n     *   // ...\r\n     * }\r\n     * ```\r\n     *\r\n     * @see {@link Filter}\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/accessibility/} more about accessibility\r\n     * @see {@link https://www.amcharts.com/docs/v4/tutorials/changing-appearance-of-focused-items/} cusomizing focus appearance\r\n     * @ignore Exclude from docs\r\n     * @return Focused element filter\r\n     */\n    get: function () {\n      /*if (!this._focusFilter) {\r\n          this._focusFilter = new FocusFilter();\r\n          this._disposers.push(this._focusFilter);\r\n      }*/\n      //return this._focusFilter;\n      var focusFilter = this._focusFilter;\n      if (focusFilter) {\n        return focusFilter;\n      }\n      if (this.virtualParent) {\n        return this.virtualParent.focusFilter;\n      } else if (this._parent) {\n        return this._parent.focusFilter;\n      }\n      //this._focusFilter = new FocusFilter();\n      //this._disposers.push(this._focusFilter);\n    },\n\n    /**\r\n     * @see {@link Filter}\r\n     * @ignore Exclude from docs\r\n     * @todo This is still experimental, don't use it\r\n     */\n    set: function (value) {\n      this._focusFilter = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"hoverOnFocus\", {\n    /**\r\n     * @return Trigger hover on focus?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"hoverOnFocus\");\n    },\n    /**\r\n     * If set to `true`, this element will also trigger `\"over\"` event with all\r\n     * the related consequences, like \"hover\" state being applied and tooltip\r\n     * being shown.\r\n     *\r\n     * Useful as an accessibility feature to display rollover tooltips on items\r\n     * selected via keyboard.\r\n     *\r\n     * @param value  Trigger hover on focus?\r\n     * @default false\r\n     */\n    set: function (value) {\n      if (value !== this.hoverOnFocus) {\n        this.setPropertyValue(\"hoverOnFocus\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tabindex\", {\n    /**\r\n     * @return TAB index\r\n     */\n    get: function () {\n      var index = this._tabindex;\n      if (index != null) {\n        return index;\n      } else if (this.virtualParent) {\n        return this.virtualParent.tabindex;\n      } else if (this._parent) {\n        return this._parent.tabindex;\n      }\n    },\n    /**\r\n     * Sets or returns TAB index.\r\n     *\r\n     * Tab index maintains the order in which focusable elements gain focus when\r\n     * TAB key is pressed.\r\n     *\r\n     * Please note, tab index is not local to the chart. It affects the whole\r\n     * of the page, including non-SVG elements. Maintain extreme causion when\r\n     * setting tab indexes, as it affects the user experience for the whole\r\n     * web page.\r\n     *\r\n     * @param value TAB index\r\n     */\n    set: function (value) {\n      value = $type.toNumber(value);\n      if (this.setPropertyValue(\"tabindex\", value) && $type.isNumber(value)) {\n        this.interactions.tabindex = value;\n        this.setSVGAttribute({\n          \"tabindex\": value\n        });\n        this._tabindex = value;\n        this.focusable = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"inertiaOptions\", {\n    /**\r\n     * ==========================================================================\r\n     * DRAGGING AND RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Returns element's options to be used for inertia. This setting is\r\n     * inheritable, meaning that if not set directly, it will search in all its\r\n     * ascendants until very top.\r\n     *\r\n     * Inertia is used only if element's `inert` is set to `true`.\r\n     *\r\n     * \"Inert\" element, when dragged and released, will carry the momentum of the\r\n     * movement, and will continue moving in the same drag direction, gradually\r\n     * reducing in speed until finally stops.\r\n     *\r\n     * Check [[IInertiaOptions]] for how you tweak inertia animations.\r\n     *\r\n     * @return Inertia options\r\n     */\n    get: function () {\n      if (!this.interactions.inertiaOptions) {\n        if (this._parent) {\n          return this._parent.inertiaOptions;\n        }\n      }\n      return this.interactions.inertiaOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"draggable\", {\n    /**\r\n     * @return `true` if element can be dragged\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"draggable\");\n    },\n    /**\r\n     * Controls if the element is draggable.\r\n     *\r\n     * @param value  `true` if element can be dragged\r\n     */\n    set: function (value) {\n      var _this = this;\n      value = $type.toBoolean(value);\n      if (this.setPropertyValue(\"draggable\", value)) {\n        if (!value && !this.isInteractive()) {} else {\n          this.applyCursorStyle();\n          this.interactions.draggable = value;\n          //interaction.processDraggable(this);\n          // Add events\n          // @todo Maybe attach to InteractionObject's multidisposer so that\n          // sprites events get disposed together with them?\n          // this.interactions.disposers.getItem(\"movable\")\n          // setEventDisposer will also remove listeners if value == false\n          this.interactions.setEventDisposer(\"sprite-draggable\", value, function () {\n            return new MultiDisposer([_this.events.on(\"down\", _this.handleDown, _this, false), _this.events.on(\"dragstart\", _this.handleDragStart, _this, false), _this.events.on(\"drag\", _this.handleDragMove, _this, false), _this.events.on(\"dragstop\", _this.handleDragStop, _this, false)]);\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Executes when dragged element is being started to drag.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.handleDragStart = function (ev) {\n    if (!this.interactions.isTouchProtected || !ev.touch) {\n      this.interactions.originalPosition = {\n        x: this.pixelX,\n        y: this.pixelY\n      };\n      this._isDragged = true;\n      this.hideTooltip(0);\n    }\n  };\n  /**\r\n   * Tell this element to start being dragged. This is useful if you want to\r\n   * drag items by interactions performed not directly on the target element.\r\n   *\r\n   * Parameter `pointer` is highly recommended. By passing in the Pointer you\r\n   * will ensure that movement is tracked for the pointer that you want. If not\r\n   * supplied, the system will try to determine the most logical pointer.\r\n   *\r\n   * However this may fail if you have more than one pointer active, which\r\n   * might happen if you have several objects being dragged on a touch device.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param pointer Pointer to use for movement\r\n   */\n  Sprite.prototype.dragStart = function (pointer) {\n    //this.dragStop(pointer);\n    //this.draggable = true;\n    this._isDragged = true;\n    getInteraction().dragStart(this.interactions, pointer);\n  };\n  /**\r\n   * Executes when dragged element is being dropped.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype.handleDragStop = function (ev) {\n    if (!this.interactions.isTouchProtected || !ev.touch) {\n      this._isDragged = false;\n      this.showTooltip();\n      this.interactions.originalPosition = undefined;\n    }\n  };\n  /**\r\n   * Stops manually initiated dragging of the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param pointer Pointer to use as a reference\r\n   */\n  Sprite.prototype.dragStop = function (pointer, cancelled) {\n    //this.draggable = false;\n    this._isDragged = false;\n    getInteraction().dragStop(this.interactions, pointer, cancelled);\n    //this.handleDragStop();\n  };\n  /**\r\n   * Executes when {Sprite} is being dragged.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event object\r\n   * @todo Implement parent position offset calculation\r\n   */\n  Sprite.prototype.handleDragMove = function (ev) {\n    if (!this.interactions.isTouchProtected || !ev.touch) {\n      var point = this.interactions.originalPosition;\n      if (point && this._isDragged) {\n        var globalScale = this._parent.globalScale * this.svgContainer.cssScale;\n        this.moveTo({\n          x: point.x + ev.shift.x / globalScale,\n          y: point.y + ev.shift.y / globalScale\n        }, undefined, undefined, true);\n      }\n      this.dispatchImmediately(\"dragged\", ev);\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"inert\", {\n    /**\r\n     * @return `true` if element should use inertia when animated\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"inert\");\n    },\n    /**\r\n     * Controls if the element should use inertia when interacted with.\r\n     *\r\n     * \"Inert\" element, when dragged and released, will carry the momentum of the\r\n     * movement, and will continue moving in the same drag direction, gradually\r\n     * reducing in speed until finally stops.\r\n     *\r\n     * @default false\r\n     * @param value `true` if element should use inertia when animated\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      if (this.setPropertyValue(\"inert\", value)) {\n        if (!value && !this.isInteractive()) {\n          // void\n        } else {\n          this.interactions.inert = value;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"hoverOptions\", {\n    /**\r\n     * ==========================================================================\r\n     * HOVERING\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Returns Sprite's hover options.\r\n     *\r\n     * @see {@link IHoverOptions} for available options.\r\n     * @return Options\r\n     */\n    get: function () {\n      if (!this.interactions.hoverOptions) {\n        if (this.virtualParent) {\n          return this.virtualParent.hoverOptions;\n        }\n        if (this._parent) {\n          return this._parent.hoverOptions;\n        }\n      }\n      return this.interactions.hoverOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"hoverable\", {\n    /**\r\n     * @return `true` if element is hoverable\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"hoverable\");\n    },\n    /**\r\n     * Controls if the element is hoverable (hover events are registered).\r\n     *\r\n     * Use `over` and `out` events, to watch for those respective actions.\r\n     *\r\n     * @default false\r\n     * @param value `true` if element can be hovered\r\n     */\n    set: function (value) {\n      var _this = this;\n      value = $type.toBoolean(value);\n      if (this.setPropertyValue(\"hoverable\", value)) {\n        if (!value && !this.isInteractive()) {\n          // void\n        } else {\n          this.applyCursorStyle();\n          this.interactions.hoverable = value;\n          // setEventDisposer will also remove listeners if value == false\n          this.interactions.setEventDisposer(\"sprite-hoverable\", value, function () {\n            return new MultiDisposer([_this.events.on(\"over\", _this.handleOver, _this, false), _this.events.on(\"out\", _this.handleOut, _this, false)]);\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Handles tasks when element becomes hovered:\r\n   * * Shows [[Tooltip]] if applicable\r\n   * * Applies \"hover\" state\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event object\r\n   */\n  Sprite.prototype.handleOver = function (ev) {\n    if (this._outTimeout) {\n      this._outTimeout.dispose();\n    }\n    if (this.isHover) {\n      if (this.states.hasKey(\"hover\")) {\n        //this.setState(\"hover\");\n        // This will check `isHover` and will set \"hover\" state\n        if (!this.isHidden) {\n          this.applyCurrentState();\n        }\n      }\n      var point = void 0;\n      if (ev && ev.pointer) {\n        point = $utils.documentPointToSvg(ev.pointer.point, this.svgContainer.SVGContainer, this.svgContainer.cssScale);\n      }\n      if (this.showTooltipOn == \"hover\") {\n        this.showTooltip(point);\n      }\n    } else {\n      if (this.showTooltipOn == \"hover\") {\n        this.hideTooltip();\n      }\n      if (!this.isHidden && this.states.hasKey(\"hover\")) {\n        this.applyCurrentState();\n      }\n    }\n  };\n  /**\r\n   * Handles tasks when element loses hover:\r\n   *\r\n   * * Hides [[Tooltip]]\r\n   * * Applies default state\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev [description]\r\n   */\n  Sprite.prototype.handleOut = function (ev) {\n    var _this = this;\n    if (this.tooltip && this.tooltip.targetSprite == this && this.tooltip.keepTargetHover) {\n      this._outTimeout = this.setTimeout(function () {\n        if (!_this.tooltip.isHover) {\n          if (_this.tooltip.targetSprite == _this) {\n            _this.hideTooltip();\n          }\n          _this._outTimeout = _this.setTimeout(_this.handleOutReal.bind(_this), _this.rollOutDelay);\n        }\n      }, 10);\n      return;\n    }\n    if (this.showTooltipOn == \"hover\") {\n      this.hideTooltip();\n    }\n    this._outTimeout = this.setTimeout(this.handleOutReal.bind(this), this.rollOutDelay);\n  };\n  /**\r\n   * [handleOutReal description]\r\n   *\r\n   * @ignore\r\n   * @todo description\r\n   */\n  Sprite.prototype.handleOutReal = function () {\n    if (!this.isHidden && !this.isHiding && this.states.hasKey(\"hover\")) {\n      this.applyCurrentState();\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"hitOptions\", {\n    /**\r\n     * ==========================================================================\r\n     * CLICKING/TAPPING AND TOGGLING STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Returns Sprite's click (hit) options.\r\n     *\r\n     * Click (hit) options control things like double-click, timeouts, etc.\r\n     *\r\n     * @see {@link IHitOptions} for available options.\r\n     * @return Options\r\n     */\n    get: function () {\n      if (!this.interactions.hitOptions) {\n        if (this.virtualParent) {\n          return this.virtualParent.hitOptions;\n        }\n        if (this._parent) {\n          return this._parent.hitOptions;\n        }\n      }\n      return this.interactions.hitOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Prepares element's after `down` event.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event\r\n   */\n  Sprite.prototype.handleDown = function (ev) {\n    if (this.interactions.downPointers.length === 1) {\n      this.interactions.originalPosition = {\n        x: this.pixelX,\n        y: this.pixelY\n      };\n      this.interactions.originalAngle = this.rotation;\n      this.interactions.originalScale = this.scale;\n      if (this.states.hasKey(\"down\")) {\n        this.setState(\"down\");\n      }\n    }\n  };\n  /**\r\n   * Prepares element's after `up` event.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event\r\n   */\n  Sprite.prototype.handleUp = function (ev) {\n    var _this = this;\n    /*if (!this.isDown) {\r\n        this.interactions.originalPosition = null;\r\n        this.interactions.originalAngle = null;\r\n        this.interactions.originalScale = null;\r\n    }*/\n    this._isResized = false;\n    if (this.states.hasKey(\"down\")) {\n      this.applyCurrentState();\n    }\n    if (this.showTooltipOn == \"hit\") {\n      this.updateTooltipPosition(ev.pointer ? ev.pointer.point : undefined);\n      this._disposers.push(registry.events.once(\"exitframe\", function () {\n        _this.showTooltip();\n      }));\n      this._disposers.push(getInteraction().body.events.once(\"down\", function (ev) {\n        _this.hideTooltip();\n      }));\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"clickable\", {\n    /**\r\n     * @return {boolean}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"clickable\");\n    },\n    /**\r\n     * Indicates if the element is clickable.\r\n     *\r\n     * Some type of the elements, like buttons are clickable by default.\r\n     *\r\n     * Most of the elements are not clickable by default.\r\n     *\r\n     * Use `hit`, `doublehit`, `up`, `down`, `toggled` events to watch for\r\n     * respective click/touch actions.\r\n     *\r\n     * @param value `true` if element can be clicked\r\n     */\n    set: function (value) {\n      var _this = this;\n      value = $type.toBoolean(value);\n      if (this.setPropertyValue(\"clickable\", value)) {\n        if (!value && !this.isInteractive()) {\n          // void\n        } else {\n          this.applyCursorStyle();\n          this.interactions.clickable = value;\n          // setEventDisposer will also remove listeners if value == false\n          this.interactions.setEventDisposer(\"sprite-clickable\", value, function () {\n            return new MultiDisposer([_this.events.on(\"down\", _this.handleDown, _this, false), _this.events.on(\"up\", _this.handleUp, _this, false)]);\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"togglable\", {\n    /**\r\n     * @return Is togglable?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"togglable\");\n    },\n    /**\r\n     * Indicates if element can be toggled on and off by subsequent clicks/taps.\r\n     *\r\n     * Togglable element will alternate its `isActive` property between `true`\r\n     * and `false` with each click.\r\n     *\r\n     * @param value Is togglable?\r\n     */\n    set: function (value) {\n      var _this = this;\n      value = $type.toBoolean(value);\n      if (this.setPropertyValue(\"togglable\", value)) {\n        if (!value && !this.isInteractive()) {\n          // void\n        } else {\n          // setEventDisposer will also remove listeners if value == false\n          this.interactions.setEventDisposer(\"sprite-togglable\", value, function () {\n            return _this.events.on(\"hit\", _this.handleToggle, _this, false);\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Handles toggling of the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event\r\n   */\n  Sprite.prototype.handleToggle = function (ev) {\n    this.isActive = !this.isActive;\n  };\n  Object.defineProperty(Sprite.prototype, \"contextMenuDisabled\", {\n    /**\r\n     * @return Context menu disabled?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"contextMenuDisabled\");\n    },\n    /**\r\n     * Should element prevent context menu to be displayed, e.g. when\r\n     * right-clicked?\r\n     *\r\n     * @default false\r\n     * @param value Context menu disabled?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      if (this.setPropertyValue(\"contextMenuDisabled\", value)) {\n        this.interactions.contextMenuDisabled = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"url\", {\n    /**\r\n     * @return URL\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"url\");\n    },\n    /**\r\n     * Click-through URL for this element.\r\n     *\r\n     * If set, clicking/tapping this element will open the new URL in a target\r\n     * window/tab as set by `urlTarget`.\r\n     *\r\n     * Please note that URL will be parsed by data placeholders in curly\r\n     * brackets, to be populated from data. E.g.:\r\n     *\r\n     * ```TypeScript\r\n     * series.columns.template.url = \"https://www.google.com/search?q={category.urlEncode()}\";\r\n     * ```\r\n     * ```JavaScript\r\n     * series.columns.template.url = \"https://www.google.com/search?q={category.urlEncode()}\";\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     // ...\r\n     *     \"columns\": {\r\n     *       \"url\": \"https://www.google.com/search?q={category.urlEncode()}\"\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * @param value URL\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"url\", value)) {\n        if (this._urlDisposer) {\n          this._urlDisposer.dispose();\n        }\n        // If URL is not empty, set up events\n        if ($utils.isNotEmpty(value)) {\n          this._urlDisposer = this.events.on(\"hit\", this.urlHandler, this, false);\n          // Set other required parameters\n          this.clickable = true;\n          this.cursorOverStyle = MouseCursorStyle.pointer;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"baseId\", {\n    /**\r\n     * [baseId description]\r\n     *\r\n     * @ignore\r\n     * @return [description]\r\n     */\n    get: function () {\n      if (!this._baseId && this._parent) {\n        this.baseId = this._parent.baseId;\n      }\n      return this._baseId;\n    },\n    /**\r\n     * [baseId description]\r\n     *\r\n     * @ignore\r\n     * @param  value  [description]\r\n     */\n    set: function (value) {\n      this.setBaseId(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Sprite.prototype.setBaseId = function (value) {\n    if (value != this._baseId) {\n      if (this.invalid) {\n        this.invalid = false;\n        registry.removeFromInvalidSprites(this);\n        this.invalidate();\n      }\n      this._baseId = value;\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"baseSprite\", {\n    /**\r\n     * Returns the mail chart object that this element belongs to.\r\n     *\r\n     * In most cases it will mean the chart object.\r\n     *\r\n     * Can be used to retrieve chart object in various events and adapters.\r\n     *\r\n     * ```TypeScript\r\n     * chart.seriesContainer.events.on(\"hit\", function(ev) {\r\n     *   console.log(ev.target.baseSprite);\r\n     * });\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.seriesContainer.events.on(\"hit\", function(ev) {\r\n     *   console.log(ev.target.baseSprite);\r\n     * });\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"seriesContainer\": {\r\n     *     \"events\": {\r\n     *       \"hit\": function(ev) {\r\n     *         console.log(ev.target.baseSprite);\r\n     *       }\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * @readonly\r\n     * @return  Base chart object\r\n     */\n    get: function () {\n      if (this.isBaseSprite) {\n        return this;\n      } else if (this._parent) {\n        return this._parent.baseSprite;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"urlTarget\", {\n    /**\r\n     * @return URL target\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"urlTarget\");\n    },\n    /**\r\n     * Target to use for URL clicks:\r\n     *\r\n     * * _blank\r\n     * * _self (default)\r\n     * * _parent\r\n     * * _top\r\n     * * Name of the window/frame\r\n     *\r\n     * Ignored if `url` is not set.\r\n     *\r\n     * @param value URL target\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"urlTarget\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Handles URL transition on element click.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev An event object\r\n   */\n  Sprite.prototype.urlHandler = function (ev) {\n    // Is URL set?\n    if ($utils.isNotEmpty(this.url)) {\n      // Proceed to the URL\n      var url = this.populateString(this.url);\n      if (this.urlTarget === \"_self\") {\n        window.location.href = url;\n      } else {\n        window.open(url, this.urlTarget);\n      }\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"swipeOptions\", {\n    /**\r\n     * ==========================================================================\r\n     * SWIPING GESTURE TRACKING\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Returns element's swipe gesture options.\r\n     *\r\n     * @return Swipe gesture options\r\n     */\n    get: function () {\n      if (!this.interactions.swipeOptions) {\n        if (this.virtualParent) {\n          return this.virtualParent.swipeOptions;\n        }\n        if (this._parent) {\n          return this._parent.swipeOptions;\n        }\n      }\n      return this.interactions.swipeOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"swipeable\", {\n    /**\r\n     * @return Element swipable?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"swipeable\");\n    },\n    /**\r\n     * Controls if element is swipeable.\r\n     *\r\n     * Swipable element will invoke `swipe`, `swipeleft` and `swiperight` events,\r\n     * when quick horizontal drag action is performed with either mouse or touch.\r\n     *\r\n     * Please note that combining swipe and drag is possible, however will incur\r\n     * a slight but noticeable delay in drag start.\r\n     *\r\n     * @param value  Element swipable?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      if (this.setPropertyValue(\"swipeable\", value)) {\n        this.applyCursorStyle();\n        if (!value && !this.isInteractive()) {\n          // void\n        } else {\n          this.interactions.swipeable = value;\n        }\n        //interaction.processSwipeable(this);\n      }\n    },\n\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"trackable\", {\n    /**\r\n     * @return Track cursor movement over element?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"trackable\");\n    },\n    /**\r\n     * ==========================================================================\r\n     * POINTER TRACKING\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Indicates if the element is trackable (mouse position over it is reported to\r\n     * event listeners).\r\n     *\r\n     * Will invoke `track` events whenever pointer (cursor) changes position\r\n     * while over element.\r\n     *\r\n     * Please note, touch devices will also invoke `track` events when touch\r\n     * point is moved while holding down on a trackable element.\r\n     *\r\n     * @param value Track cursor movement over element?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      if (this.setPropertyValue(\"trackable\", value)) {\n        if (!value && !this.isInteractive()) {\n          // void\n        } else {\n          this.applyCursorStyle();\n          this.interactions.trackable = value;\n        }\n        //interaction.processTrackable(this);\n      }\n    },\n\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"wheelable\", {\n    /**\r\n     * @return Mouse wheel events enabled?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"wheelable\");\n    },\n    /**\r\n     * ==========================================================================\r\n     * MOUSE-WHEEL RELATED\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Indicates if the element can be interacted with mouse wheel.\r\n     *\r\n     * Will invoke `wheel`, `wheelup`, `wheeldown`, `wheelleft`, and `wheelright`\r\n     * events when using mouse wheel over the element.\r\n     *\r\n     * @param value Mouse wheel events enabled?\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"wheelable\", value)) {\n        if (!value && !this.isInteractive()) {\n          // void\n        } else {\n          this.applyCursorStyle();\n          this.interactions.wheelable = value;\n        }\n        //interaction.processWheelable(this);\n      }\n    },\n\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"resizable\", {\n    /**\r\n     * @return Element resizable?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"resizable\");\n    },\n    /**\r\n     * ==========================================================================\r\n     * RESIZE\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Indicates if this element is resizable.\r\n     *\r\n     * Enabling resize will turn on various interactions on the element. Their\r\n     * actual functionality will depend on other properties.\r\n     *\r\n     * If the element also `draggable`, resize will only happen with two points\r\n     * of contact on a touch device.\r\n     *\r\n     * If the element is not draggable, resize can be performed with just one\r\n     * point of contact, touch or mouse.\r\n     *\r\n     * Will invoke `resize` event every time the size of the element changes.\r\n     *\r\n     * @param value  Element resizable?\r\n     */\n    set: function (value) {\n      var _this = this;\n      value = $type.toBoolean(value);\n      if (this.setPropertyValue(\"resizable\", value)) {\n        if (!value && !this.isInteractive()) {\n          // void\n        } else {\n          this.applyCursorStyle();\n          this.interactions.resizable = value;\n          // setEventDisposer will also remove listeners if value == false\n          this.interactions.setEventDisposer(\"sprite-resizable\", value, function () {\n            return new MultiDisposer([_this.events.on(\"down\", _this.handleDown, _this, false), _this.events.on(\"resize\", _this.handleResize, _this, false)]);\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Handles resize intermediate step.\r\n   *\r\n   * By default this method resizes actual element. Each element, can override\r\n   * this method to implement their own resize logic.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event object\r\n   */\n  Sprite.prototype.handleResize = function (ev) {\n    if (!this.interactions.isTouchProtected || !ev.touch) {\n      this._isResized = true;\n      this.scale = this.interactions.originalScale * ev.scale;\n      this.validatePosition();\n      /*center: (io.draggable\r\n      ? $math.getMidPoint(point1, point2)\r\n      : {\r\n          \"x\": io.originalPosition.x,\r\n          \"y\": io.originalPosition.y\r\n      })*/\n      //this.moveTo(this.originalPosition.x + ev.shift.x, this.originalPosition.y + ev.shift.y);\n      if (this.draggable || this.dragWhileResize) {\n        this._isDragged = false;\n        var svgPoint1 = $utils.documentPointToSvg(ev.point1, this.htmlContainer, this.svgContainer.cssScale);\n        var svgPoint2 = $utils.documentPointToSvg(ev.point2, this.htmlContainer, this.svgContainer.cssScale);\n        var svgMidPoint = $math.getMidPoint(svgPoint1, svgPoint2);\n        var parentPoint1 = $utils.documentPointToSprite(ev.startPoint1, this._parent);\n        var parentPoint2 = $utils.documentPointToSprite(ev.startPoint2, this._parent);\n        var originalPosition = this.interactions.originalPosition;\n        var originalScale = this.interactions.originalScale;\n        if (originalPosition) {\n          var spritePoint1 = {\n            x: (parentPoint1.x - originalPosition.x) / originalScale,\n            y: (parentPoint1.y - originalPosition.y) / originalScale\n          };\n          var spritePoint2 = {\n            x: (parentPoint2.x - originalPosition.x) / originalScale,\n            y: (parentPoint2.y - originalPosition.y) / originalScale\n          };\n          var spriteMidPoint = $math.getMidPoint(spritePoint1, spritePoint2);\n          var parentPoint = $utils.svgPointToSprite(svgMidPoint, this._parent);\n          this.moveTo({\n            x: parentPoint.x - spriteMidPoint.x * this.scale,\n            y: parentPoint.y - spriteMidPoint.y * this.scale\n          }, undefined, undefined, true);\n        }\n      }\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"cursorOptions\", {\n    /**\r\n     * ==========================================================================\r\n     * MOUSE-RELATED\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Returns element's cursor options.\r\n     *\r\n     * Cursor options usually define cursor style for various states of the\r\n     * hovered element.\r\n     *\r\n     * Elements inherit `cursorOptions` from their parents if they don't have\r\n     * them set explicitly.\r\n     *\r\n     * @see {@link ICursorOptions} for a list of available options\r\n     * @return Cursor options\r\n     */\n    get: function () {\n      if (!this.interactions.cursorOptions) {\n        if (this.virtualParent) {\n          return this.virtualParent.cursorOptions;\n        }\n        if (this._parent) {\n          return this._parent.cursorOptions;\n        }\n      }\n      return this.interactions.cursorOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"cursorOverStyle\", {\n    /**\r\n     * A shortcut to setting mouse cursor on hover.\r\n     *\r\n     * Example:\r\n     *\r\n     * ```TypeScript\r\n     * series.slices.template.cursorOverStyle = am4core.MouseCursorStyle.pointer;\r\n     * ```\r\n     * ```JavaScript\r\n     * series.slices.template.cursorOverStyle = am4core.MouseCursorStyle.pointer;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": {\r\n     *     // ...\r\n     *     \"slices\": {\r\n     *       \"cursorOverStyle\": \"pointer\"\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * @param style An array of styles to apply onhover\r\n     */\n    set: function (style) {\n      if (!this.cursorOptions.overStyle) {\n        this.interactions.cursorOptions = {\n          defaultStyle: this.cursorOptions.defaultStyle\n        };\n      }\n      this.cursorOptions.overStyle = style;\n      getInteraction().applyCursorOverStyle(this.interactions);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"cursorDownStyle\", {\n    /**\r\n     * A shortcut to setting mouse cursor when button is pressed down.\r\n     *\r\n     * Example:\r\n     *\r\n     * ```TypeScript\r\n     * series.slices.template.cursorDownStyle = am4core.MouseCursorStyle.grabbing;\r\n     * ```\r\n     * ```JavaScript\r\n     * series.slices.template.cursorDownStyle = am4core.MouseCursorStyle.grabbing;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": {\r\n     *     // ...\r\n     *     \"slices\": {\r\n     *       \"cursorDownStyle\": \"grabbing\"\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * @param style An array of styles to apply onhover\r\n     */\n    set: function (style) {\n      this.cursorOptions.downStyle = style;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Applies default cursor styles for interactable elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Determine if this is necessary. Maybe let's not apply any cursor styles by default\r\n   */\n  Sprite.prototype.applyCursorStyle = function () {\n    // Draggable styles\n    /*if (this.draggable) {\r\n          if (!$type.hasValue(this.cursorOptions.overStyle)) {\r\n            this.cursorOptions.overStyle = MouseCursorStyle.grab;\r\n        }\r\n          if (!$type.hasValue(this.cursorOptions.downStyle)) {\r\n            this.cursorOptions.downStyle = MouseCursorStyle.grabbing;\r\n        }\r\n    }*/\n  };\n  Object.defineProperty(Sprite.prototype, \"interactionsEnabled\", {\n    /**\r\n     * @return Is interaction enabled for this element?\r\n     */\n    get: function () {\n      var value = this.getPropertyValue(\"interactionsEnabled\");\n      if (value === false) {\n        return false;\n      }\n      if (this.virtualParent) {\n        return this.virtualParent.interactionsEnabled;\n      }\n      if (this._parent) {\n        return this._parent.interactionsEnabled;\n      }\n      return true;\n    },\n    /**\r\n     * Setting this to `false` will effectively disable all interactivity on the\r\n     * element.\r\n     *\r\n     * @param value  Is interaction enabled for this element?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      if (this.setPropertyValue(\"interactionsEnabled\", value)) {\n        var pointerEvents = null; // must be null, not \"null\"!\n        if (!value) {\n          pointerEvents = \"none\";\n        } else {\n          // this is for IE\n          this.group.node.style.pointerEvents = \"\";\n        }\n        this.group.node.style.pointerEvents = pointerEvents;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"exporting\", {\n    /**\r\n     * @return Export instance\r\n     */\n    get: function () {\n      return this.getExporting();\n    },\n    /**\r\n     * ==========================================================================\r\n     * EXPORT-RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * An [[Export]] instance.\r\n     *\r\n     * Used to access API of the chart export functionality.\r\n     *\r\n     * If `exporting` is not set, the element inherits [[Export]] instance from\r\n     * its parents.\r\n     *\r\n     * Upon request, if no parent has such instance, a new one is created, using\r\n     * default settings, what in most cases is just enough.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/exporting/} for more info about exporting\r\n     * @param exp  Export\r\n     */\n    set: function (exp) {\n      this._exporting.set(exp, exp);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * This is here as a method so that inheriting classes could override it.\r\n   *\r\n   * @return Export instance\r\n   */\n  Sprite.prototype.getExporting = function () {\n    var _export = this._exporting.get();\n    if (_export) {\n      return _export;\n    } else {\n      if (this.isStandaloneInstance || !this._parent) {\n        _export = new Export(this.svgContainer.SVGContainer);\n        _export.sprite = this;\n        _export.language = this.language;\n        _export.numberFormatter = this.numberFormatter;\n        _export.dateFormatter = this.dateFormatter;\n        _export.durationFormatter = this.durationFormatter;\n        this._exporting.set(_export, _export);\n      } else {\n        return this._parent.exporting;\n      }\n    }\n    return _export;\n  };\n  Object.defineProperty(Sprite.prototype, \"exportable\", {\n    /**\r\n     * @return Export?\r\n     */\n    get: function () {\n      return this._exportable;\n      /*const svgContainer = this.svgContainer;\r\n      return !svgContainer || $array.indexOf(svgContainer.nonExportableSprites, this) == -1;*/\n    },\n\n    /**\r\n     * If set to `false` this element will be omitted when exporting the chart\r\n     * to an image.\r\n     *\r\n     * @default true\r\n     * @param value  Export?\r\n     */\n    set: function (value) {\n      var svgContainer = this.svgContainer;\n      this._exportable = value;\n      if (svgContainer) {\n        if (value) {\n          $array.remove(svgContainer.nonExportableSprites, this);\n        } else if ($array.indexOf(svgContainer.nonExportableSprites, this) == -1) {\n          svgContainer.nonExportableSprites.push(this);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * ==========================================================================\r\n   * MODAL/POPUP RELATED STUFF\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n  /**\r\n   * Private method to be used for \"classPrefix\" adapter for modals/popups.\r\n   *\r\n   * @param value  Prefix\r\n   */\n  Sprite.prototype.modalPrefix = function (value) {\n    value = options.classNamePrefix + value;\n    return value;\n  };\n  Object.defineProperty(Sprite.prototype, \"modal\", {\n    /**\r\n     * Returns a [[Modal]] instance, associated with this chart.\r\n     * (elements top parent)\r\n     *\r\n     * Accessing modal does not make it appear. To make a modal appear, use\r\n     * `showModal()` method.\r\n     *\r\n     * @see {@link Modal} for more information about using Modal windows\r\n     * @return Modal instance\r\n     */\n    get: function () {\n      var svgContainer = this.svgContainer;\n      if (svgContainer) {\n        var modal = svgContainer.modal;\n        if (!modal.adapter.has(\"classPrefix\", this.modalPrefix)) {\n          modal.adapter.add(\"classPrefix\", this.modalPrefix);\n        }\n        return modal;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Opens a modal window with specific content (`text` parameter) and,\r\n   * optionally, `title`.\r\n   *\r\n   * The `text` parameter can contain HTML content.\r\n   *\r\n   * @see {@link Modal} for more information about using Modal windows\r\n   * @param text   Modal contents\r\n   * @param title  Title for the modal window\r\n   */\n  Sprite.prototype.openModal = function (text, title) {\n    var svgContainer = this.svgContainer;\n    if (svgContainer) {\n      return svgContainer.openModal(text, title);\n    }\n  };\n  /**\r\n   * Hides modal window if there is one currently open.\r\n   */\n  Sprite.prototype.closeModal = function () {\n    var svgContainer = this.svgContainer;\n    if (svgContainer) {\n      svgContainer.closeModal();\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"popups\", {\n    /**\r\n     * A list of popups for this chart.\r\n     *\r\n     * @return Popups\r\n     */\n    get: function () {\n      var svgContainer = this.svgContainer;\n      if (svgContainer) {\n        var popups = svgContainer.popups;\n        popups.template.sprite = this;\n        if (!popups.template.adapter.has(\"classPrefix\", this.modalPrefix)) {\n          popups.template.adapter.add(\"classPrefix\", this.modalPrefix);\n        }\n        return popups;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates, opens, and returns a new [[Popup]] window.\r\n   *\r\n   * `text` can be any valid HTML.\r\n   *\r\n   * `title` is currently not supported.\r\n   *\r\n   * @param text   Popup contents\r\n   * @param title  Popup title\r\n   * @return Popup instance\r\n   */\n  Sprite.prototype.openPopup = function (text, title) {\n    var svgContainer = this.svgContainer;\n    if (svgContainer) {\n      return svgContainer.openPopup(text, title);\n    }\n  };\n  /**\r\n   * Closes all currently open popup windows\r\n   */\n  Sprite.prototype.closeAllPopups = function () {\n    var svgContainer = this.svgContainer;\n    if (svgContainer) {\n      svgContainer.closeAllPopups();\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"x\", {\n    /**\r\n     * @return X coordinate\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"x\");\n    },\n    /**\r\n     * ==========================================================================\r\n     * POSITIONAL PROPERTIES AND RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Element's absolute or relative X coordinate.\r\n     *\r\n     * If setting both X and Y, please consider using `moveTo()` method instead,\r\n     * as it will be faster to set both coordinates at once.\r\n     *\r\n     * @param value X coordinate\r\n     */\n    set: function (value) {\n      if (!this.isDragged) {\n        this.setPercentProperty(\"x\", value, false, true, this._positionPrecision, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelX\", {\n    /**\r\n     * Returns element's current absolute X coordinate in pixels.\r\n     *\r\n     * @readonly\r\n     * @return X coordinate (px)\r\n     */\n    get: function () {\n      var value = $math.fitToRange(this.getPixelX(this.x), this.minX, this.maxX);\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelX\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeX\", {\n    /**\r\n     * Returns element's current relative X coordinate in [[Percent]].\r\n     *\r\n     * @return X coordinate ([[Percent]])\r\n     */\n    get: function () {\n      if (!this._adapterO) {\n        return this.getRelativeX(this.x);\n      } else {\n        return this._adapterO.apply(\"relativeX\", this.getRelativeX(this.x));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"minX\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Min X (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minX\");\n    },\n    /**\r\n     * The smallest allowable absolute X coordinate for this element.\r\n     *\r\n     * This is used to contain element movement within certain boundaries.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Min X (px)\r\n     */\n    set: function (value) {\n      if ($type.isNumber(value)) {\n        value = $math.round(value, this._positionPrecision, true);\n        this.setPropertyValue(\"minX\", value, false, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"maxX\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Max X (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxX\");\n    },\n    /**\r\n     * The biggest allowable absolute X coordinate for this element.\r\n     *\r\n     * This is used to contain element movement within certain boundaries.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Max X (px)\r\n     */\n    set: function (value) {\n      if ($type.isNumber(value)) {\n        value = $math.round(value, this._positionPrecision, true);\n        this.setPropertyValue(\"maxX\", value, false, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"y\", {\n    /**\r\n     * @return Y coordinate\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"y\");\n    },\n    /**\r\n     * Element's absolute or relative Y coordinate.\r\n     *\r\n     * If setting both X and Y, please consider using `moveTo()` method instead,\r\n     * as it will be faster to set both coordinates at once.\r\n     *\r\n     * @param value  Y coordinate\r\n     */\n    set: function (value) {\n      if (!this.isDragged) {\n        this.setPercentProperty(\"y\", value, false, true, this._positionPrecision, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelY\", {\n    /**\r\n     * Returns element's current absolute Y coordinate in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Y coordinate (px)\r\n     */\n    get: function () {\n      var value = $math.fitToRange(this.getPixelY(this.y), this.minY, this.maxY);\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelY\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeY\", {\n    /**\r\n     * Returns element's current relative Y coordinate in [[Percent]].\r\n     *\r\n     * @readonly\r\n     * @return Y coordinate ([[Percent]])\r\n     */\n    get: function () {\n      if (!this._adapterO) {\n        return this.getRelativeX(this.y);\n      } else {\n        return this._adapterO.apply(\"relativeY\", this.getRelativeX(this.y));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"minY\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Min Y (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minY\");\n    },\n    /**\r\n     * The smallest allowable absolute Y coordinate for this element.\r\n     *\r\n     * This is used to contain element movement within certain boundaries.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Min Y (px)\r\n     */\n    set: function (value) {\n      if ($type.isNumber(value)) {\n        value = $math.round(value, this._positionPrecision, true);\n        this.setPropertyValue(\"minY\", value, false, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"maxY\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Max Y (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxY\");\n    },\n    /**\r\n     * The biggest allowable absolute Y coordinate for this element.\r\n     *\r\n     * This is used to contain element movement within certain boundaries.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Max Y (px)\r\n     */\n    set: function (value) {\n      if ($type.isNumber(value)) {\n        value = $math.round(value, this._positionPrecision, true);\n        this.setPropertyValue(\"maxY\", value, false, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"dx\", {\n    /**\r\n     * @return Horizontal offset (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"dx\");\n    },\n    /**\r\n     * A horizontal offset for the element in pixels.\r\n     *\r\n     * Can be negative value for offset to the left.\r\n     *\r\n     * @param value  Horizontal offset (px)\r\n     */\n    set: function (value) {\n      if ($type.isNumber(value)) {\n        value = $math.round(value, this._positionPrecision, true);\n        this.setPropertyValue(\"dx\", value, false, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"dy\", {\n    /**\r\n     * @return Vertical offset (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"dy\");\n    },\n    /**\r\n     * A vertical offset for the element in pixels.\r\n     *\r\n     * Can be negative value for offset upwards.\r\n     *\r\n     * @param value  Vertical offset (px)\r\n     */\n    set: function (value) {\n      if ($type.isNumber(value)) {\n        value = $math.round(value, this._positionPrecision, true);\n        this.setPropertyValue(\"dy\", value, false, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"rotation\", {\n    /**\r\n     * @return Rotation (0-360)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"rotation\");\n    },\n    /**\r\n     * Rotation of the element in degrees. (0-360)\r\n     *\r\n     * Note: For convenience purposes, negative values (for counter-clockwise\r\n     * rotation) and values exceeding 360 can also be used.\r\n     *\r\n     * @param value  Rotation (0-360)\r\n     */\n    set: function (value) {\n      value = $type.toNumber(value);\n      if (!$type.isNumber(value)) {\n        value = 0;\n      }\n      this.setPropertyValue(\"rotation\", value, false, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"align\", {\n    /**\r\n     * @return Horizontal align\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"align\");\n    },\n    /**\r\n     * Controls horizontal alignment of the element.\r\n     *\r\n     * This is used by parent [[Container]] when layouting its children.\r\n     *\r\n     * @param value  Horizontal align\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      if (this.setPropertyValue(\"align\", value)) {\n        if (this._parent) {\n          this._parent.invalidateLayout();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"valign\", {\n    /**\r\n     * @return Vertical align\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"valign\");\n    },\n    /**\r\n     * Controls vertical alignment of the element.\r\n     *\r\n     * This is used by parent [[Container]] when layouting its children.\r\n     *\r\n     * @param value  Vertical align\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      if (this.setPropertyValue(\"valign\", value)) {\n        if (this._parent) {\n          this._parent.invalidateLayout();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"horizontalCenter\", {\n    /**\r\n     * @return Horizontal center\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"horizontalCenter\");\n    },\n    /**\r\n     * Controls which part of the element to treat as a horizontal center.\r\n     *\r\n     * The setting will be used when positioning, resizing and rotating the\r\n     * element.\r\n     *\r\n     * @param value  Horizontal center\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      if (this.setPropertyValue(\"horizontalCenter\", value)) {\n        this.updateCenter();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"verticalCenter\", {\n    /**\r\n     * @return Vertical center\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"verticalCenter\");\n    },\n    /**\r\n     * Controls which part of the element to treat as a vertical center.\r\n     *\r\n     * The setting will be used when positioning, resizing and rotating the\r\n     * element.\r\n     *\r\n     * @param value  Vertical center\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      if (this.setPropertyValue(\"verticalCenter\", value)) {\n        this.updateCenter();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"maxWidth\", {\n    /**\r\n     * @return Maximum width (px)\r\n     */\n    get: function () {\n      var maxWidth = this.getPropertyValue(\"maxWidth\");\n      if (!$type.isNumber(maxWidth)) {\n        if (this._parent) {\n          var parentWidth = this._parent.maxWidth;\n          if (this._parent.layout != \"absolute\" && this.align != \"none\" && this.align != undefined) {\n            parentWidth = parentWidth - this.pixelMarginLeft - this.pixelMarginRight;\n          }\n          return parentWidth;\n        }\n      }\n      return maxWidth;\n    },\n    /**\r\n     * ==========================================================================\r\n     * DIMENSIONAL PROPERTIES AND RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Maximum allowed width for the element in pixels.\r\n     *\r\n     * @param value  Maximum width (px)\r\n     */\n    set: function (value) {\n      this.setMaxWidth(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Sprite.prototype.setMaxWidth = function (value) {\n    var prevWidth = this.maxWidth;\n    var prevHeight = this.maxHeight;\n    if (this.setPropertyValue(\"maxWidth\", value)) {\n      if ($type.isNumber(this.relativeWidth)) {\n        this.invalidate();\n      }\n      var event_2 = {\n        type: \"maxsizechanged\",\n        target: this,\n        previousWidth: prevWidth,\n        previousHeight: prevHeight\n      };\n      this.dispatchImmediately(\"maxsizechanged\", event_2);\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"maxHeight\", {\n    /**\r\n     * @return Maximum height (px)\r\n     */\n    get: function () {\n      var maxHeight = this.getPropertyValue(\"maxHeight\");\n      if (!$type.isNumber(maxHeight)) {\n        if (this._parent) {\n          var parentHeight = this._parent.maxHeight;\n          if (this._parent.layout != \"absolute\" && this.valign != \"none\" && this.valign != undefined) {\n            parentHeight = parentHeight - this.pixelMarginTop - this.pixelMarginBottom;\n          }\n          return parentHeight;\n        }\n      }\n      return maxHeight;\n    },\n    /**\r\n     * Maximum allowed height for the element in pixels.\r\n     *\r\n     * @param value  Maximum height (px)\r\n     */\n    set: function (value) {\n      this.setMaxHeight(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Sprite.prototype.setMaxHeight = function (value) {\n    var prevWidth = this.maxWidth;\n    var prevHeight = this.maxHeight;\n    if (this.setPropertyValue(\"maxHeight\", value)) {\n      if ($type.isNumber(this.relativeHeight)) {\n        this.invalidate();\n      }\n      var event_3 = {\n        type: \"maxsizechanged\",\n        target: this,\n        previousWidth: prevWidth,\n        previousHeight: prevHeight\n      };\n      this.dispatchImmediately(\"maxsizechanged\", event_3);\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"minWidth\", {\n    /**\r\n     * @return Minimum width (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minWidth\");\n    },\n    /**\r\n     * Minimum width of the element in pixels.\r\n     *\r\n     * Set to `undefined` to remove the limit.\r\n     *\r\n     * @param value  Minimum width (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"minWidth\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"minHeight\", {\n    /**\r\n     * @return Minimum height (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minHeight\");\n    },\n    /**\r\n     * Minimum height for the element in pixels.\r\n     *\r\n     * Set to `undefined` to remove the limit.\r\n     *\r\n     * @param value  Minimum height (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"minHeight\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"width\", {\n    /**\r\n     * @return Width (absolute or relative)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"width\");\n    },\n    /**\r\n     * Element's absolute or relative width.\r\n     *\r\n     * The width can either be absolute, set in numeric pixels, or relative, set\r\n     * in [[Percent]].\r\n     *\r\n     * Relative width will be calculated using closest measured ancestor\r\n     * [[Container]].\r\n     *\r\n     * NOTE: `width` is an accessor, which allows setting width in pixels or\r\n     * percent. It is a sort of a \"shortcut\" for the users. Actual renderer does\r\n     * not ever use it. It uses either `pixelWidth` or `percentWidth`, so if\r\n     * you need to add an adapter for width add it for either of the two\r\n     * properties - whichever suits your requirements.\r\n     *\r\n     * @param value  Width (numeric in pixels or relative)\r\n     */\n    set: function (value) {\n      var changed = this.setPercentProperty(\"width\", value, true, false, this._positionPrecision, true);\n      if (changed) {\n        this.percentWidth = undefined;\n        this.relativeWidth = undefined;\n        if (value instanceof Percent) {\n          this.percentWidth = value.percent;\n          if ($type.isNumber(this._pixelWidth)) {\n            this.maxWidth = undefined;\n          }\n          this._pixelWidth = undefined;\n        } else {\n          this._pixelWidth = Number(value);\n          //this._measuredWidth = this._pixelWidth;\n          this.maxWidth = this._pixelWidth;\n        }\n        this.invalidatePosition();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"height\", {\n    /**\r\n     * @return height (absolute or relative)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"height\");\n    },\n    /**\r\n     * Element's absolute or relative height.\r\n     *\r\n     * The height can either be absolute, set in numeric pixels, or relative, set\r\n     * in [[Percent]].\r\n     *\r\n     * Relative height will be calculated using closest measured ancestor\r\n     * [[Container]].\r\n     *\r\n     * NOTE: `height` is an accessor, which allows setting height in pixels or\r\n     * percent. It is a sort of a \"shortcut\" for the users. Actual renderer does\r\n     * not ever use it. It uses either `pixelHeight` or `percentHeight`, so if\r\n     * you need to add an adapter for height add it for either of the two\r\n     * properties - whichever suits your requirements.\r\n     *\r\n     * @param value  Height (numeric in pixels or relative)\r\n     */\n    set: function (value) {\n      var changed = this.setPercentProperty(\"height\", value, true, false, this._positionPrecision, true);\n      if (changed) {\n        this.percentHeight = undefined;\n        this._relativeHeight = undefined;\n        if (value instanceof Percent) {\n          this.percentHeight = value.percent;\n          if ($type.isNumber(this._pixelHeight)) {\n            this.maxHeight = undefined;\n          }\n          this._pixelHeight = undefined;\n        } else {\n          this._pixelHeight = Number(value);\n          //this._measuredHeight = this._pixelHeight;\n          this.maxHeight = this._pixelHeight; // yes, we reset maxWidth\n        }\n\n        this.invalidatePosition();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelWidth\", {\n    /**\r\n     * Returns element's width in pixels, if width was set. For actual width use measuredWidth property.\r\n     *\r\n     * @readonly\r\n     * @return Width (px)\r\n     */\n    get: function () {\n      var width;\n      if ($type.isNumber(this.percentWidth)) {\n        width = this.maxWidth;\n      } else if ($type.isNumber(this._pixelWidth)) {\n        width = this._pixelWidth;\n      } else {\n        width = 0;\n      }\n      var minWidth = this.minWidth;\n      if (minWidth != null && width < minWidth) {\n        width = minWidth;\n      }\n      var value = $math.round(width, this._positionPrecision, true);\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelWidth\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelHeight\", {\n    /**\r\n     * Returns element's height in pixels. For actual height use measuredHeight property.\r\n     *\r\n     * @readonly\r\n     * @return Height (px)\r\n     */\n    get: function () {\n      var height;\n      if ($type.isNumber(this.percentHeight)) {\n        height = this.maxHeight;\n      } else if ($type.isNumber(this._pixelHeight)) {\n        height = this._pixelHeight;\n      } else {\n        height = 0; //this._measuredHeightSelf;\n      }\n\n      var minHeight = this.minHeight;\n      if (minHeight != null && height < minHeight) {\n        height = minHeight;\n      }\n      var value = $math.round(height, this._positionPrecision, true);\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelHeight\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeWidth\", {\n    /**\r\n     * @return Relative width\r\n     * @ignore\r\n     */\n    get: function () {\n      var relativeWidth = this._relativeWidth;\n      if ($type.isNumber(relativeWidth)) {\n        if (!this._adapterO) {\n          return relativeWidth;\n        } else {\n          return this._adapterO.apply(\"relativeWidth\", relativeWidth);\n        }\n      }\n    },\n    /**\r\n     * Element's relative width in [[Percent]].\r\n     * @ignore\r\n     *\r\n     * @param value  Relative width\r\n     */\n    set: function (value) {\n      if (this._relativeWidth != value) {\n        this._relativeWidth = value;\n        //\t\t\tthis.invalidate();\n      }\n    },\n\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeHeight\", {\n    /**\r\n     * @return Relative height\r\n     * @ignore\r\n     */\n    get: function () {\n      var relativeHeight = this._relativeHeight;\n      if ($type.isNumber(relativeHeight)) {\n        if (!this._adapterO) {\n          return relativeHeight;\n        } else {\n          return this._adapterO.apply(\"relativeHeight\", relativeHeight);\n        }\n      }\n    },\n    /**\r\n     * Element's relative height in [[Percent]].\r\n     *\r\n     * @param value  Relative height\r\n     * @ignore\r\n     */\n    set: function (value) {\n      if (this._relativeHeight != value) {\n        this._relativeHeight = value;\n        //\t\t\tthis.invalidate();\n      }\n    },\n\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"measuredWidth\", {\n    /**\r\n     * Returns element's measured width in pixels.\r\n     *\r\n     * A measured width is actual width of contents plus `paddingRight` and* `paddingLeft`, relative to sprite parent, meaning that\r\n     * rotation and scale is taken into account.\r\n     *\r\n     * @readonly\r\n     * @return Width (px)\r\n     */\n    get: function () {\n      if (this.disabled || this.__disabled) {\n        return 0;\n      }\n      if (!this._adapterO) {\n        return this._measuredWidth;\n      } else {\n        return this._adapterO.apply(\"measuredWidth\", this._measuredWidth);\n      }\n      // it's not good to fit to min/max range as then rotations and scale won't be taken into account\n      //return this.adapter.apply(\"measuredWidth\", $math.fitToRange(this._measuredWidth, this.minWidth, this.maxWidth));\n    },\n\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"measuredHeight\", {\n    /**\r\n     * Returns elements's measured height in pixels.\r\n     *\r\n     * A measured height is actual height of contents plus `paddingTop` and `paddingBottom`, relative to sprite parent, meaning that\r\n     * rotation and scale taken into account.\r\n     *\r\n     * @readonly\r\n     * @return Height (px)\r\n     */\n    get: function () {\n      if (this.disabled || this.__disabled) {\n        return 0;\n      }\n      // it's not good to fit to min/max range as then rotations and scale won't be taken into account\n      //return this.adapter.apply(\"measuredHeight\", $math.fitToRange(this._measuredHeight, this.minHeight, this.maxHeight));\n      if (!this._adapterO) {\n        return this._measuredHeight;\n      } else {\n        return this._adapterO.apply(\"measuredHeight\", this._measuredHeight);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"outerWidth\", {\n    /**\r\n     * Returns element's measured width plus its left and right margins in\r\n     * pixels.\r\n     *\r\n     * @readonly\r\n     * @return Outer width (px)\r\n     */\n    get: function () {\n      var value = this.pixelWidth + this.pixelMarginRight + this.pixelMarginLeft;\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"outerWidth\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"outerHeight\", {\n    /**\r\n     * Returns element's measured height plus its top and bottom margins in\r\n     * pixels.\r\n     *\r\n     * @readonly\r\n     * @return Outer height (px)\r\n     */\n    get: function () {\n      var value = this.pixelHeight + this.pixelMarginTop + this.pixelMarginBottom;\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"outerHeight\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"innerWidth\", {\n    /**\r\n     * Returns element's measured inner width in pixels.\r\n     *\r\n     * Inner width is actual available space for content, e.g. element's width\r\n     * minus horizontal padding.\r\n     *\r\n     * @readonly\r\n     * @return Inner width (px)\r\n     */\n    get: function () {\n      var value = Math.max(0, this.pixelWidth - this.pixelPaddingRight - this.pixelPaddingLeft);\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"innerWidth\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"innerHeight\", {\n    /**\r\n     * Returns element's measured inner height in pixels.\r\n     *\r\n     * Inner height is actual available space for content, e.g. element's height\r\n     * minus vertical padding.\r\n     *\r\n     * @readonly\r\n     * @return Inner height (px)\r\n     */\n    get: function () {\n      var value = Math.max(0, this.pixelHeight - this.pixelPaddingTop - this.pixelPaddingBottom);\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"innerHeight\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"globalScale\", {\n    /**\r\n     * Returns element's current \"global\" scale.\r\n     *\r\n     * Scale values accumulate over hierarchy of elements.\r\n     *\r\n     * E.g. if a [[Container]] has `scale = 2` and it's child has a `scale = 2`,\r\n     * the child's `globalScale` will be 4. (a multitude of `2 x 2`)\r\n     *\r\n     * @readonly\r\n     * @return Global scale\r\n     */\n    get: function () {\n      var scale = this.scale;\n      if (this._parent) {\n        scale = scale * this._parent.globalScale;\n      }\n      if (!this._adapterO) {\n        return scale;\n      } else {\n        return this._adapterO.apply(\"globalScale\", scale);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"scale\", {\n    /**\r\n     * @return Scale (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"scale\");\n    },\n    /**\r\n     * Scale of the element.\r\n     *\r\n     * The scale is set from 0 (element reduced to nothing) to 1 (default size).\r\n     * * 2 will mean element is increased twice.\r\n     * * 0.5 - reduced by 50%.\r\n     *\r\n     * Etc.\r\n     *\r\n     * @param value  Scale (0-1)\r\n     */\n    set: function (value) {\n      value = $type.toNumber(value);\n      if (value < 0) {\n        value = 0;\n      }\n      if (value != this.getPropertyValue(\"scale\")) {\n        this.setPropertyValue(\"scale\", value, false, true);\n        this.handleGlobalScale();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets all four margins for the element at once.\r\n   *\r\n   * Margins are set in pixels.\r\n   *\r\n   * @param top     Top margin\r\n   * @param right   Right margin\r\n   * @param bottom  Bottom margin\r\n   * @param left    Left margin\r\n   * @return Current element\r\n   */\n  Sprite.prototype.margin = function (top, right, bottom, left) {\n    this.marginTop = top;\n    this.marginRight = right;\n    this.marginBottom = bottom;\n    this.marginLeft = left;\n    return this;\n  };\n  Object.defineProperty(Sprite.prototype, \"marginLeft\", {\n    /**\r\n     * @return Margin value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"marginLeft\");\n    },\n    /**\r\n     * Left margin - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Margin value\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"marginLeft\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"marginRight\", {\n    /**\r\n     * @return Margin value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"marginRight\");\n    },\n    /**\r\n     * Right margin - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Margin value\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"marginRight\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"marginTop\", {\n    /**\r\n     * @return Margin value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"marginTop\");\n    },\n    /**\r\n     * Top margin - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Margin value\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"marginTop\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"marginBottom\", {\n    /**\r\n     * @return Margin value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"marginBottom\");\n    },\n    /**\r\n     * Bottom margin - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Margin value\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"marginBottom\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelMarginRight\", {\n    /**\r\n     * Returns current right margin in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Right margin (px)\r\n     */\n    get: function () {\n      var value = this.getPixelX(this.marginRight);\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelMarginRight\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeMarginRight\", {\n    /**\r\n     * Returns current relative right margin.\r\n     *\r\n     * @readonly\r\n     * @return Relative right margin\r\n     */\n    get: function () {\n      // @todo Maybe use [[Percent]]?\n      var value = this.getRelativeX(this.marginRight);\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"relativeMarginRight\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelMarginLeft\", {\n    /**\r\n     * Returns current left margin in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Left margin (px)\r\n     */\n    get: function () {\n      var value = this.getPixelX(this.marginLeft);\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelMarginLeft\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeMarginLeft\", {\n    /**\r\n     * Returns current relative left margin.\r\n     *\r\n     * @readonly\r\n     * @return Relative left margin\r\n     */\n    get: function () {\n      //@todo Maybe use [[Percent]]?\n      var value = this.getRelativeX(this.marginLeft);\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"relativeMarginLeft\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelMarginTop\", {\n    /**\r\n     * Returns current top margin in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Top margin (px)\r\n     */\n    get: function () {\n      var value = this.getPixelY(this.marginTop);\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelMarginTop\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeMarginTop\", {\n    /**\r\n     * Returns current relative top margin.\r\n     *\r\n     * @readonly\r\n     * @return Relative top margin\r\n     */\n    get: function () {\n      // @todo Maybe use [[Percent]]?\n      var value = this.getRelativeY(this.marginTop);\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"relativeMarginTop\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelMarginBottom\", {\n    /**\r\n     * Returns current bottom margin in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Bottom margin (px)\r\n     */\n    get: function () {\n      var value = this.getPixelY(this.marginBottom);\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelMarginBottom\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeMarginBottom\", {\n    /**\r\n     * Returns current relative bottom margin.\r\n     *\r\n     * @readonly\r\n     * @return Relative bottom margin\r\n     */\n    get: function () {\n      // @todo Maybe use [[Percent]]?\n      var value = this.getRelativeY(this.marginBottom);\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"relativeMarginBottom\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets padding for the element in pixels.\r\n   *\r\n   * @param top     Top padding (px)\r\n   * @param right   Right padding (px)\r\n   * @param bottom  Bottom padding (px)\r\n   * @param left    Left padding (px)\r\n   * @return Element\r\n   */\n  Sprite.prototype.padding = function (top, right, bottom, left) {\n    this.paddingTop = top;\n    this.paddingRight = right;\n    this.paddingBottom = bottom;\n    this.paddingLeft = left;\n    return this;\n  };\n  Object.defineProperty(Sprite.prototype, \"paddingLeft\", {\n    /**\r\n     * @return Padding value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"paddingLeft\");\n    },\n    /**\r\n     * Left padding - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Padding value\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"paddingLeft\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"paddingRight\", {\n    /**\r\n     * @return Padding value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"paddingRight\");\n    },\n    /**\r\n     * Right padding - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Padding value\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"paddingRight\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"paddingTop\", {\n    /**\r\n     * @return Padding value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"paddingTop\");\n    },\n    /**\r\n     * Top padding - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Padding value\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"paddingTop\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"paddingBottom\", {\n    /**\r\n     * @return Padding value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"paddingBottom\");\n    },\n    /**\r\n     * Bottom padding - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Padding value\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"paddingBottom\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelPaddingRight\", {\n    /**\r\n     * Returns current right padding in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Right padding (px)\r\n     */\n    get: function () {\n      return this.getPixelX(this.paddingRight);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativePaddingRight\", {\n    /**\r\n     * Returns current relative right padding.\r\n     *\r\n     * @readonly\r\n     * @return Relative right padding\r\n     */\n    get: function () {\n      // @todo Maybe use [[Percent]]?\n      return this.getRelativeX(this.paddingRight);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelPaddingLeft\", {\n    /**\r\n     * Returns current left padding in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Left padding (px)\r\n     */\n    get: function () {\n      return this.getPixelX(this.paddingLeft);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativePaddingLeft\", {\n    /**\r\n     * Returns current relative left padding.\r\n     *\r\n     * @readonly\r\n     * @return Relative left padding\r\n     */\n    get: function () {\n      // @todo Maybe use [[Percent]]?\n      return this.getRelativeX(this.paddingLeft);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelPaddingTop\", {\n    /**\r\n     * Returns current top padding in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Top padding (px)\r\n     */\n    get: function () {\n      return this.getPixelY(this.paddingTop);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativePaddingTop\", {\n    /**\r\n     * Returns current relative top padding.\r\n     *\r\n     * @readonly\r\n     * @return Relative top padding\r\n     */\n    get: function () {\n      // @todo Maybe use [[Percent]]?\n      return this.getRelativeY(this.paddingTop);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelPaddingBottom\", {\n    /**\r\n     * Returns current bottom padding in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Bottom padding (px)\r\n     */\n    get: function () {\n      return this.getPixelY(this.paddingBottom);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativePaddingBottom\", {\n    /**\r\n     * Returns current relative bottom padding.\r\n     *\r\n     * @readonly\r\n     * @return Relative bottom padding\r\n     */\n    get: function () {\n      // @todo Maybe use [[Percent]]?\n      return this.getRelativeY(this.paddingBottom);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"path\", {\n    /**\r\n     * @return Path of a Sprite element\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"path\");\n    },\n    /**\r\n     * ==========================================================================\r\n     * APPEARANCE-RELATED PROPERTIES AND RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Path of Sprite element\r\n     */\n    set: function (value) {\n      this.setPath(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n  Sprite.prototype.setPath = function (value) {\n    if (this.setPropertyValue(\"path\", value)) {\n      if (this._adapterO) {\n        value = this._adapterO.apply(\"path\", value);\n      }\n      if (!this._isPath) {\n        if (!this.element || this.element.node && !(this.element.node instanceof SVGPathElement)) {\n          this.element = this.paper.add(\"path\");\n        }\n        this._isPath = true;\n      }\n      if ($type.hasValue(value)) {\n        this.element.attr({\n          \"d\": value\n        });\n      } else {\n        this.element.removeAttr(\"d\");\n      }\n      this.invalidatePosition();\n      // otherwise is 0x0\n      if (!this.inited) {\n        this.events.once(\"inited\", this.validatePosition, this, false);\n      }\n      return true;\n    }\n    return false;\n  };\n  Object.defineProperty(Sprite.prototype, \"fillModifier\", {\n    /**\r\n     * @return Fill color modifier\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"fillModifier\");\n    },\n    /**\r\n     * [[ColorModifier]] that can be used to modify color and pattern of the\r\n     * element's fill, e.g. create gradients.\r\n     *\r\n     * @param value  Fill color modifiier\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"fillModifier\", value)) {\n        this.setFill(this.fill);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"strokeModifier\", {\n    /**\r\n     * @return Stroke color modifier\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"strokeModifier\");\n    },\n    /**\r\n     * [[ColorModifier]] that can be used to modify color and pattern of the\r\n     * element's stroke (outline), e.g. create gradients.\r\n     *\r\n     * @param value  Stroke color modifier\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"strokeModifier\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"fillOpacity\", {\n    /**\r\n     * @return Opacity (0-9)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"fillOpacity\");\n    },\n    /**\r\n     * Element's fill opacity.\r\n     *\r\n     * Opacity ranges from 0 (fully transparent) to 1 (fully opaque).\r\n     *\r\n     * @param value  Opacity (0-1)\r\n     */\n    set: function (value) {\n      value = $math.toNumberRange(value, 0, 1);\n      if (this.setPropertyValue(\"fillOpacity\", value)) {\n        this.setSVGAttribute({\n          \"fill-opacity\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"fill\", {\n    /**\r\n     * @return Fill\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"fill\");\n    },\n    /**\r\n     * Element's fill color or pattern.\r\n     *\r\n     * @param value  Fill\r\n     */\n    set: function (value) {\n      this.setFill(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets actual `fill` property on the SVG element, including applicable color\r\n   * modifiers.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param value  Fill\r\n   */\n  Sprite.prototype.setFill = function (value) {\n    if (!$type.isObject(value) || \"r\" in value) {\n      value = toColor(value);\n    }\n    if (this.setColorProperty(\"fill\", value) || this.fillModifier) {\n      // this can not go into next if, as value is turned to Gradient\n      if (value instanceof Color) {\n        if (this.fillModifier) {\n          value = this.fillModifier.modify(value);\n        }\n      }\n      this.realFill = value;\n      // todo: review this place when some Color type will be added\n      if (value instanceof Color) {\n        this.setSVGAttribute({\n          \"fill\": value.toString()\n        });\n      } else if (!$type.hasValue(value)) {\n        this.removeSVGAttribute(\"fill\");\n      } else if (value instanceof Pattern || value instanceof LinearGradient || value instanceof RadialGradient) {\n        var fill = value;\n        fill.paper = this.paper;\n        this.setSVGAttribute({\n          \"fill\": \"url(\\\"\" + $utils.getBaseURI() + fill.id + \"\\\")\"\n        });\n      }\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"opacity\", {\n    /**\r\n     * @return Opacity (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"opacity\");\n    },\n    /**\r\n     * Element's opacity.\r\n     *\r\n     * Opacity setting can range from 0 (fully transparent) to 1 (fully opaque).\r\n     *\r\n     * ATTENTION: It is highly not recommended to use `opacity` directly on the\r\n     * element. The charts use `opacity` to hide/show elements, so your setting\r\n     * might be lost if element is hidden and then later shown.\r\n     *\r\n     * Instead use methods `hide()` and `show()` to completely toggle off and on\r\n     * the element.\r\n     *\r\n     * Or, use properties `fillOpacity` and `strokeOpacity`, if you need to make\r\n     * the element semi-transparent.\r\n     *\r\n     * @param value Opacity (0-1)\r\n     */\n    set: function (value) {\n      value = $math.toNumberRange(value, 0, 1);\n      if (this.setPropertyValue(\"opacity\", value)) {\n        this.setSVGAttribute({\n          \"opacity\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"stroke\", {\n    /**\r\n     * @return Stroke setting\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"stroke\");\n    },\n    /**\r\n     * Element's stroke (outline) color or pattern.\r\n     *\r\n     * @param value  Stroke setting\r\n     */\n    set: function (value) {\n      this.setStroke(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets actual `stroke` property on the SVG element, including applicable\r\n   * color modifiers.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param value Stroke setting\r\n   */\n  Sprite.prototype.setStroke = function (value) {\n    if (!$type.isObject(value) || \"r\" in value) {\n      value = toColor(value);\n    }\n    if (this.setColorProperty(\"stroke\", value) || this.strokeModifier) {\n      // this can not go into next if, as value is turned to Gradient\n      if (value instanceof Color) {\n        if (this.strokeModifier) {\n          value = this.strokeModifier.modify(value);\n        }\n      }\n      this.realStroke = value;\n      if (value instanceof Color) {\n        if (value.hex == \"none\") {\n          this.removeSVGAttribute(\"stroke\");\n        } else {\n          this.setSVGAttribute({\n            \"stroke\": value.toString()\n          });\n        }\n      } else if (!$type.hasValue(value)) {\n        this.removeSVGAttribute(\"stroke\");\n      } else if (value instanceof Pattern || value instanceof LinearGradient || value instanceof RadialGradient) {\n        var stroke = value;\n        stroke.paper = this.paper;\n        this.setSVGAttribute({\n          \"stroke\": \"url(\\\"\" + $utils.getBaseURI() + stroke.id + \"\\\")\"\n        });\n      }\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"strokeOpacity\", {\n    /**\r\n     * @return Opacity (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"strokeOpacity\");\n    },\n    /**\r\n     * Stroke (outline) opacity.\r\n     *\r\n     * The values may range from 0 (fully transparent) to 1 (fully opaque).\r\n     *\r\n     * @param value  Opacity (0-1)\r\n     */\n    set: function (value) {\n      value = $math.toNumberRange(value, 0, 1);\n      if (this.setPropertyValue(\"strokeOpacity\", value)) {\n        this.setSVGAttribute({\n          \"stroke-opacity\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"nonScalingStroke\", {\n    /**\r\n     * @return Do not scale stroke (outline)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"nonScalingStroke\");\n    },\n    /**\r\n     * Controls if the element's stroke (outline) should remain keep constant\r\n     * thicnkess and do not scale when the whole element is resized.\r\n     *\r\n     * @param value  Do not scale stroke (outline)\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      if (this.setPropertyValue(\"nonScalingStroke\", value)) {\n        this.strokeWidth = this.strokeWidth;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"nonScaling\", {\n    /**\r\n     * @return Is element scaleable?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"nonScaling\");\n    },\n    /**\r\n     * Controls if element should keep constant size and not scale even if there is\r\n     * space available, or it does not fit.\r\n     *\r\n     * @param value  Is element scaleable?\r\n     */\n    set: function (value) {\n      // @todo Description (review)\n      value = $type.toBoolean(value);\n      this.setPropertyValue(\"nonScaling\", value, false, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"strokeWidth\", {\n    /**\r\n     * @return Thickness (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"strokeWidth\");\n    },\n    /**\r\n     * Stroke (outline) thickness in pixels.\r\n     *\r\n     * @param value  Thickness (px)\r\n     */\n    set: function (value) {\n      value = $type.toNumber(value);\n      this.setPropertyValue(\"strokeWidth\", value, true);\n      if (this.nonScalingStroke) {\n        if (!$type.isNumber(value)) {\n          value = 1;\n        }\n        value = value / this.globalScale;\n      }\n      this.setSVGAttribute({\n        \"stroke-width\": value\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"strokeDasharray\", {\n    /**\r\n     * @return `stroke-dasharray`\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"strokeDasharray\");\n    },\n    /**\r\n     * A `stroke-dasharray` for the stroke (outline).\r\n     *\r\n     * \"Dasharray\" allows setting rules to make lines dashed, dotted, etc.\r\n     *\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray} for more info on `stroke-dasharray`\r\n     * @param value  `stroke-dasharray`\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      if (this.setPropertyValue(\"strokeDasharray\", value)) {\n        this.setSVGAttribute({\n          \"stroke-dasharray\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"strokeDashoffset\", {\n    /**\r\n     * @return `stroke-dashoffset`\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"strokeDashoffset\");\n    },\n    /**\r\n     * A `stroke-dashoffset` for the stroke (outline).\r\n     *\r\n     * \"Dashoffset\" allows setting the start position of the dashes if\r\n     * `strokeDasharray` is used.\r\n     *\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dashoffset} for more info on `stroke-dashoffset`\r\n     * @param value  `stroke-dashoffset`\r\n     */\n    set: function (value) {\n      value = $type.toNumber(value);\n      if (this.setPropertyValue(\"strokeDashoffset\", value)) {\n        this.setSVGAttribute({\n          \"stroke-dashoffset\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"strokeLinecap\", {\n    /**\r\n     * @return `stroke-linecap`\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"strokeLinecap\");\n    },\n    /**\r\n     * A `stroke-linecap` to indicate how line ends are drawn.\r\n     *\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Fills_and_Strokes#Stroke} for more info on `stroke-linecap`\r\n     * @param value  `stroke-linecap`\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"strokeLinecap\", value)) {\n        this.setSVGAttribute({\n          \"stroke-linecap\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"strokeLinejoin\", {\n    /**\r\n     * @return `stroke-linejoin`\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"strokeLinejoin\");\n    },\n    /**\r\n     * A `stroke-linejoin` to indicate how line ends are drawn.\r\n     *\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Fills_and_Strokes#Stroke} for more info on `stroke-linejoin`\r\n     * @param value  `stroke-linejoin`\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"strokeLinejoin\", value)) {\n        this.setSVGAttribute({\n          \"stroke-linejoin\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"shapeRendering\", {\n    /**\r\n     * @return 'shape-rendering' value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"shapeRendering\");\n    },\n    /**\r\n     * An SVG-specific `shape-rendering` value.\r\n     *\r\n     * `shape-rendering` controls how vector graphics are drawn and rendered.\r\n     *\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering} for more information about `shape-rendering`\r\n     * @default \"auto\"\r\n     * @param value  'shape-rendering' value\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      if (this.setPropertyValue(\"shapeRendering\", value)) {\n        this.setSVGAttribute({\n          \"shape-rendering\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelPerfect\", {\n    /**\r\n     * @return Use pixel perfect?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"pixelPerfect\");\n    },\n    /**\r\n     * Controls if SVG vectors should be drawn with \"pixel\" precision, producing\r\n     * perfectly crisp lines on retina displays.\r\n     *\r\n     * Setting this to `true` might improve visual quality, but may have a\r\n     * negative effect on performance.\r\n     *\r\n     * Different elements use different default setting for `pixelPerfect`.\r\n     *\r\n     * We recommend leaving this at their default settings, unless there's a\r\n     * specific need.\r\n     *\r\n     * @param value  Use pixel perfect?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      if (value) {\n        this._positionPrecision = options.pixelPerfectPrecision;\n      } else {\n        this._positionPrecision = 3;\n      }\n      this.setPropertyValue(\"pixelPerfect\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"rtl\", {\n    /**\r\n     * @return RTL?\r\n     */\n    get: function () {\n      if ($type.hasValue(this._rtl)) {\n        return this._rtl;\n      } else if (this._topParent) {\n        return this._topParent.rtl;\n      }\n      //this.rtl = false;\n      return false;\n    },\n    /**\r\n     * An RTL (right-to-left) setting.\r\n     *\r\n     * RTL may affect alignment, text, and other visual properties.\r\n     *\r\n     * If you set this on a top-level chart object, it will be used for all\r\n     * child elements, e.g. labels, unless they have their own `rtl` setting\r\n     * set directly on them.\r\n     *\r\n     * @param value  `true` for to use RTL\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      if (this.isBaseSprite) {\n        this.topParent.rtl = value;\n      }\n      this._rtl = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * ==========================================================================\r\n   * VISIBILITY AND ORDER PROPERTIES AND RELATED STUFF\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n  /**\r\n   * Reveals hidden element.\r\n   *\r\n   * Has no effect if element is already visible.\r\n   *\r\n   * If `duration` is not specified, it will use default.\r\n   *\r\n   * @param duration  Fade in duration (ms)\r\n   * @return Animation object if such object was created\r\n   */\n  Sprite.prototype.show = function (duration) {\n    return this.showReal(duration);\n  };\n  /**\r\n   * Performs actual operations to reveal this element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param duration Fade in duration (ms)\r\n   * @return Fade in duration (ms)\r\n   */\n  Sprite.prototype.showReal = function (duration) {\n    var _this = this;\n    if (this.preventShow) {\n      return;\n    }\n    var transition;\n    var properties = this.defaultState.properties;\n    if (!this.disabled && (this.isHidden || !this.visible || this.isHiding || properties.opacity != null && this.opacity < properties.opacity && !this.isShowing) && !this.isDisposed()) {\n      // helps to avoid flicker, as show might change opacity or visibility but item might be at invalid state/position\n      if (this.invalid) {\n        this.validate();\n      }\n      if (this.positionInvalid) {\n        this.validatePosition();\n      }\n      if (!$type.isNumber(duration)) {\n        duration = this.defaultState.transitionDuration;\n      }\n      if (this._hideAnimation) {\n        this._hideAnimation.kill();\n        this._hideAnimation = undefined;\n      }\n      // Cancel hide handler just in case it was there\n      if (this._showHideDisposer) {\n        this.removeDispose(this._showHideDisposer);\n      }\n      this._isHidden = false;\n      this.isHiding = false;\n      this.isShowing = true;\n      // Apply current state\n      transition = this.applyCurrentState(duration);\n      if (transition && !transition.isFinished()) {\n        this._showHideDisposer = transition.events.on(\"animationended\", function () {\n          _this.isShowing = false;\n        });\n        this._disposers.push(this._showHideDisposer);\n      } else {\n        this.isShowing = false;\n      }\n      // Make it visible\n      var visible = this.defaultState.properties.visible;\n      if (!$type.hasValue(visible)) {\n        visible = true;\n      }\n      this.visible = visible;\n      // Unhide from screen readers\n      this.readerHidden = false;\n      // Dispatch \"show\" event\n      this.dispatchImmediately(\"shown\");\n    }\n    return transition;\n  };\n  /**\r\n   * Initiates hiding of Sprite.\r\n   * When called it will fade out the the Sprite to transparency, then make it\r\n   * invisible.\r\n   * @param duration Duration in millisecons\r\n   */\n  /**\r\n   * Hides the element, by applying `hidden` state.\r\n   *\r\n   * Has no effect if element is already hidden.\r\n   *\r\n   * If `duration` is not specified, it will use default.\r\n   *\r\n   * While element is fading out, its `isHiding` property will resolve to\r\n   * `true`.\r\n   *\r\n   * When element is hidden, its `visible` property will resolve to `false`.\r\n   *\r\n   * @param duration  Fade out duration (ms)\r\n   * @return hide Animation object if such object was created\r\n   */\n  Sprite.prototype.hide = function (duration) {\n    return this.hideReal(duration);\n  };\n  /**\r\n   * Hides actual SVG elements and handles hiding animations.\r\n   *\r\n   * @param duration  Fade out duration (ms)\r\n   * @return Fade out duration (ms)\r\n   * @ignore\r\n   */\n  Sprite.prototype.hideReal = function (duration) {\n    var _this = this;\n    var transition;\n    if (!this.isHiding && this.visible && !this.isDisposed()) {\n      // added to solve 51375\n      if (this.tooltip && this.tooltip.currentSprite == this) {\n        this.hideTooltip(0);\n      }\n      if (this._hideAnimation) {\n        this._hideAnimation.kill();\n        this._hideAnimation = undefined;\n      }\n      this.isShowing = false;\n      // Cancel hide handler just in case it was there\n      if (this._showHideDisposer) {\n        this.removeDispose(this._showHideDisposer);\n      }\n      // Get state\n      var hiddenState_1 = this.hiddenState;\n      // Transition to \"hidden\" state, provided Sprite has one set\n      if (hiddenState_1) {\n        // Yes, we have a \"hidden\" state\n        // `setState` will return an `Animation` object which we can set\n        // events on\n        transition = this.setState(hiddenState_1, duration, undefined);\n        if (transition && !transition.isFinished()) {\n          this._hideAnimation = transition;\n          this._showHideDisposer = transition.events.on(\"animationended\", function () {\n            _this.isHiding = false;\n            _this._isHidden = true;\n            if (hiddenState_1.properties.visible == false) {\n              _this.visible = false;\n            }\n          }, this);\n          this._disposers.push(this._showHideDisposer);\n          // Thrown everything into `_disposers` just in case Sprite gets\n          // destroyed in the meantime\n          this._disposers.push(transition);\n        } else {\n          this.isHiding = false;\n          this._isHidden = true;\n        }\n      } else {\n        // No hidden state, let's just set `visible` and call it a day\n        this.visible = false;\n        this.isHiding = false;\n        this._isHidden = true;\n      }\n      // Hide from screen readers\n      this.readerHidden = true;\n      // Dispach \"hidden\" event\n      this.dispatchImmediately(\"hidden\");\n      this.invalidate(); // hide it at once to avoid flickers // validate() causes SO\n    }\n\n    if (!$type.isNumber(duration)) {\n      duration = this.hiddenState.transitionDuration;\n    }\n    return transition;\n  };\n  Object.defineProperty(Sprite.prototype, \"visible\", {\n    /**\r\n     * @return Visible?\r\n     */\n    get: function () {\n      return this.getVisibility();\n    },\n    /**\r\n     * Indicates if element is current visible (`true`) or hidden (`false`).\r\n     *\r\n     * @param value Visible?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      this.setVisibility(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns visibility value\r\n   * @ignore\r\n   */\n  Sprite.prototype.getVisibility = function () {\n    var value = this.getPropertyValue(\"visible\");\n    if (!$type.hasValue(value)) {\n      value = true;\n    }\n    return value;\n  };\n  /**\r\n   * Sets `visibility` property:\r\n   *\r\n   * * `true` - visible\r\n   * * `false` - hidden\r\n   *\r\n   * @param value  true - visible, false - hidden\r\n   * @return Current visibility\r\n   */\n  Sprite.prototype.setVisibility = function (value) {\n    if (this.setPropertyValue(\"visible\", value)) {\n      if (value) {\n        this.group.removeAttr(\"visibility\");\n      } else {\n        this.group.attr({\n          \"visibility\": \"hidden\"\n        });\n      }\n      //this.invalidatePosition();\n      if (this.events.isEnabled(\"visibilitychanged\")) {\n        var event_4 = {\n          type: \"visibilitychanged\",\n          target: this,\n          visible: value\n        };\n        this.events.dispatchImmediately(\"visibilitychanged\", event_4);\n      }\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"zIndex\", {\n    /**\r\n     * @return zIndex\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"zIndex\");\n    },\n    /**\r\n     * A \"zIndex\" of the element.\r\n     *\r\n     * \"zIndex\" determines the order of how elements are placed over each other.\r\n     *\r\n     * Higher \"zIndex\" will mean the element will be draw on top of elements\r\n     * with lower \"zIndexes\".\r\n     *\r\n     * @param value  zIndex\r\n     */\n    set: function (value) {\n      value = $type.toNumber(value);\n      if (this.setPropertyValue(\"zIndex\", value)) {\n        this.dispatch(\"zIndexChanged\");\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Moves the element to the very top in element order, so that it appears\r\n   * in front of other elements.\r\n   */\n  Sprite.prototype.toFront = function () {\n    var parent = this._parent;\n    if (parent && parent.children.indexOf(this) != parent.children.length - 1) {\n      parent.children.moveValue(this, parent.children.length - 1);\n      this.dispatch(\"zIndexChanged\");\n    }\n  };\n  /**\r\n   * Moves the element to the very bottom in the element order, so that it\r\n   * appears behind other elements.\r\n   */\n  Sprite.prototype.toBack = function () {\n    var parent = this._parent;\n    if (parent && parent.children.indexOf(this) != 0) {\n      parent.children.moveValue(this, 0);\n      this.dispatch(\"zIndexChanged\");\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"userClassName\", {\n    /**\r\n     * @return Class name\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"userClassName\");\n    },\n    /**\r\n     * A custom class name to set on the element.\r\n     *\r\n     * If set, the value will be added to element's `class` attribute.\r\n     *\r\n     * @since 4.9.11\r\n     * @param  value  Class name\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"userClassName\", value)) {\n        if (!value && this.userClassName) {\n          this.group.removeClass(this.userClassName);\n        }\n        this.setClassName();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltip\", {\n    /**\r\n     * @return Tooltip\r\n     */\n    get: function () {\n      if (this._tooltip) {\n        return this._tooltip;\n      } else if (this.virtualParent) {\n        return this.virtualParent.tooltip;\n      } else if (this._parent) {\n        return this._parent.tooltip;\n      }\n    },\n    /**\r\n     * ==========================================================================\r\n     * TOOLTIP-RELATED PROPERTIES STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * A [[Tooltip]] object to be used when displayed rollover information for\r\n     * the element.\r\n     *\r\n     * @param tooltip  Tooltip\r\n     */\n    set: function (tooltip) {\n      if (this._tooltip) {\n        //this._tooltip.dispose();\n        this.removeDispose(this._tooltip);\n      }\n      this._tooltip = tooltip;\n      if (tooltip) {\n        tooltip.parent = this.tooltipContainer;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltipDataItem\", {\n    /**\r\n     * @return Tooltip data item\r\n     */\n    get: function () {\n      var tooltipDataItem = this._tooltipDataItem;\n      if (tooltipDataItem) {\n        return tooltipDataItem;\n      } else {\n        return this.dataItem;\n      }\n    },\n    /**\r\n     * A [[DataItem]] to use when populating content for the element's\r\n     * [[Tooltip]].\r\n     *\r\n     * @see {@link Tooltip}\r\n     * @see {@link DataItem}\r\n     * @param value  Tooltip data item\r\n     */\n    set: function (value) {\n      // important: do not dispose tooltip dataItem, as it is some actual data item from data!\n      this._tooltipDataItem = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltipColorSource\", {\n    /**\r\n     * @return Tooltip color source\r\n     */\n    get: function () {\n      return this._tooltipColorSource;\n    },\n    /**\r\n     * A [[Sprite]] or sprite template to use when getting colors for tooltip. If a template is set,\r\n     * tooltip will look for a clone in tooltipDataItem.sprites. If no clone is found, then template colors will be used.\r\n     *\r\n     * @see {@link Tooltip}\r\n     * @see {@link Sprite}\r\n     * @param sprite Sprite\r\n     */\n    set: function (sprite) {\n      this._tooltipColorSource = sprite;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Shows the element's [[Tooltip]].\r\n   *\r\n   * A tooltip will be populated using text templates in either `tooltipHTML` or\r\n   * `tooltipText` as well as data in `tooltipDataItem`.\r\n   *\r\n   * @see {@link Tooltip}\r\n   * @param optional point (sprite-related) to which tooltip must point.\r\n   * @return returns true if the tooltip was shown and false if it wasn't (no text was found)\r\n   */\n  Sprite.prototype.showTooltip = function (point) {\n    if (this.showTooltipOn == \"always\" && !this._tooltip && this.tooltip) {\n      this._tooltip = this.tooltip.clone();\n    }\n    if (!point && this.tooltipPosition == \"pointer\" && this.isHover) {\n      point = $utils.documentPointToSvg(getInteraction().lastPointer.point, this.svgContainer.SVGContainer, this.svgContainer.cssScale);\n    }\n    // do not show if hidden\n    var sprite = this;\n    while (sprite != undefined) {\n      if (!sprite.visible || sprite.disabled || sprite.__disabled) {\n        if (this._tooltip && this._tooltip.visible) {\n          this._tooltip.hide(0);\n        }\n        return;\n      }\n      sprite = sprite.parent;\n    }\n    if ($type.hasValue(this.tooltipText) || $type.hasValue(this.tooltipHTML)) {\n      var tooltip = this.tooltip;\n      var tooltipDataItem = this.tooltipDataItem;\n      if (tooltip) {\n        tooltip.targetSprite = this;\n        var colorSource_1 = this;\n        var tooltipColorSource_1 = this.tooltipColorSource;\n        if ((tooltip.getStrokeFromObject || tooltip.getFillFromObject) && tooltipColorSource_1) {\n          if (tooltipColorSource_1.isTemplate) {\n            if (tooltipDataItem) {\n              $array.eachContinue(tooltipDataItem.sprites, function (sprite) {\n                if (sprite.clonedFrom == tooltipColorSource_1) {\n                  colorSource_1 = sprite;\n                  return false;\n                }\n                return true;\n              });\n            }\n          } else {\n            colorSource_1 = tooltipColorSource_1;\n          }\n        }\n        if (tooltip.getStrokeFromObject) {\n          var stroke = this.stroke;\n          var source = colorSource_1;\n          while (source.parent != undefined) {\n            stroke = source.stroke;\n            if (stroke == undefined) {\n              source = source.parent;\n            }\n            if (stroke != undefined) {\n              break;\n            }\n          }\n          if (stroke instanceof Color) {\n            tooltip.background.animate({\n              property: \"stroke\",\n              to: stroke\n            }, tooltip.animationDuration);\n          } else {\n            tooltip.background.stroke = stroke;\n          }\n        }\n        // Set data item\n        tooltip.dataItem = tooltipDataItem;\n        tooltip.label.populateStringFrom = this;\n        if (tooltip.getFillFromObject) {\n          var fill = this.fill;\n          var source = colorSource_1;\n          while (source.parent != undefined) {\n            fill = source.fill;\n            if (fill == undefined || fill instanceof Color && fill.rgb == undefined) {\n              source = source.parent;\n            } else if (fill != undefined) {\n              break;\n            }\n          }\n          if (fill == undefined) {\n            fill = color(\"#000000\");\n          }\n          if (fill instanceof Color) {\n            if (!tooltip.visible) {\n              tooltip.background.fill = fill;\n            } else {\n              tooltip.background.animate({\n                property: \"fill\",\n                to: fill\n              }, tooltip.animationDuration);\n            }\n          } else {\n            tooltip.background.fill = fill;\n          }\n          if (tooltip.autoTextColor && fill instanceof Color) {\n            tooltip.label.fill = fill.alternative;\n          }\n        }\n        // Apply tooltip text\n        var text = \"\";\n        if (this.tooltipHTML) {\n          tooltip.html = this.tooltipHTML;\n          text = this.tooltipHTML;\n        }\n        if (this.tooltipText) {\n          tooltip.text = this.tooltipText;\n          text = this.tooltipText;\n        }\n        if (this.updateTooltipPosition(point)) {\n          // Set accessibility option\n          tooltip.readerDescribedBy = this.uidAttr();\n          // make label to render to be able to check currentText\n          if (tooltip.label.invalid) {\n            tooltip.label.validate();\n          }\n          if (text != undefined && text != \"\" && tooltip.label.currentText != \"\") {\n            //@todo: think of how to solve this better\n            if (tooltip && !tooltip.parent) {\n              tooltip.parent = this.tooltipContainer;\n            }\n            // Reveal tooltip\n            // showing it in 1 ms helps to avoid strange flickering in IE\n            var duration = tooltip.defaultState.transitionDuration;\n            if (duration <= 0) {\n              duration = 1;\n            }\n            tooltip.show(duration);\n            tooltip.currentSprite = this;\n            return true;\n          } else {\n            this.hideTooltip(0);\n          }\n        } else {\n          this.hideTooltip(0);\n        }\n      }\n    }\n    return false;\n  };\n  /**\r\n   * @ignore\r\n   */\n  Sprite.prototype.updateTooltipPosition = function (point) {\n    var _this = this;\n    if (this.tooltipPosition == \"pointer\") {\n      if (this._interactionDisposer) {\n        this._interactionDisposer.dispose();\n      }\n      this._interactionDisposer = getInteraction().body.events.on(\"track\", function (ev) {\n        return _this.pointTooltipTo($utils.documentPointToSvg(ev.point, _this.svgContainer.SVGContainer, _this.svgContainer.cssScale), true);\n      });\n      if (point) {\n        return this.pointTooltipTo(point, true);\n      }\n    } else {\n      // Point to the X/Y of this Sprite\n      var globalPoint = $utils.spritePointToSvg({\n        \"x\": this.getTooltipX(),\n        \"y\": this.getTooltipY()\n      }, this);\n      return this.pointTooltipTo(globalPoint);\n    }\n  };\n  /**\r\n   * Sets the point the [[Tooltip]] should point to.\r\n   *\r\n   * @param point      Coordinates to point to\r\n   * @param instantly  Move instantly without animation\r\n   */\n  Sprite.prototype.pointTooltipTo = function (point, instantly) {\n    var tooltip = this.tooltip;\n    if (tooltip && this.topParent) {\n      if (tooltip.showInViewport) {\n        tooltip.pointTo(point, instantly);\n        return true;\n      }\n      if ($math.isInRectangle(point, {\n        x: 0,\n        y: 0,\n        width: this.topParent.maxWidth,\n        height: this.topParent.maxHeight\n      })) {\n        tooltip.pointTo(point, instantly);\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\r\n   * Hides element's [[Tooltip]].\r\n   *\r\n   * @see {@link Tooltip}\r\n   */\n  Sprite.prototype.hideTooltip = function (duration) {\n    if (this.showTooltipOn == \"always\") {\n      return;\n    }\n    var tooltip = this.tooltip;\n    if (tooltip) {\n      if (tooltip.targetSprite == this) {\n        tooltip.targetSprite = undefined;\n      }\n      tooltip.hide(duration);\n      if (this._interactionDisposer) {\n        this._interactionDisposer.dispose();\n        this._interactionDisposer = undefined;\n      }\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"tooltipHTML\", {\n    /**\r\n     * @return Tooltip HTML content template\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tooltipHTML\");\n    },\n    /**\r\n     * An HTML template to be used to populate [[Tooltip]] contents.\r\n     *\r\n     * If element has `tooltipDataItem` or `dataItem` set, this will be parsed\r\n     * for any data values to be replaced with the values from respective data\r\n     * items.\r\n     *\r\n     * @param value Tooltip HTML content template\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      this.hoverable = true;\n      if (this.setPropertyValue(\"tooltipHTML\", value)) {\n        if (this.tooltip) {\n          if (this.tooltip.visible) {\n            this.showTooltip();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltipText\", {\n    /**\r\n     * @return Tooltip content template\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tooltipText\");\n    },\n    /**\r\n     * A text template to be used to populate Tooltip's contents.\r\n     *\r\n     * If element has `tooltipDataItem` or `dataItem` set, this will be parsed\r\n     * for any data values to be replaced with the values from respective data\r\n     * items.\r\n     *\r\n     * This template will also be parsed for any special formatting tags.\r\n     *\r\n     * @param value Tooltip content template\r\n     * @see {@link TextFormatter}\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      if (value) {\n        this.hoverable = true;\n      }\n      if (this.setPropertyValue(\"tooltipText\", value)) {\n        if (this.tooltip) {\n          if (this.tooltip.visible) {\n            this.showTooltip();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltipContainer\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Container\r\n     */\n    get: function () {\n      if (this._tooltipContainer) {\n        return this._tooltipContainer;\n      } else if (this._parent) {\n        return this._parent.tooltipContainer;\n      }\n    },\n    /**\r\n     * A container reference that should be used to place element's\r\n     * [[Tooltip]] in.\r\n     *\r\n     * Will use parent's container if does not have one set.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Container\r\n     * @todo Dispose of the old _tooltipContainer ?\r\n     */\n    set: function (value) {\n      this._tooltipContainer = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltipX\", {\n    /**\r\n     * @return Tooltip X (px)\r\n     */\n    get: function () {\n      return this.getTooltipX();\n    },\n    /**\r\n     * X coordinate the [[Tooltip]] should be shown at.\r\n     *\r\n     * @param value  Tooltip X (px)\r\n     */\n    set: function (value) {\n      if (this.setPercentProperty(\"tooltipX\", value) && this.tooltip) {\n        this.tooltip.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"alwaysShowTooltip\", {\n    /**\r\n     * @return Always show tooltip?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"showTooltipOn\") == \"always\";\n    },\n    /**\r\n     * DEPRECATION NOTICE: This setting is deprecated in favor of a more flexible\r\n     * setting: `showTooltipOn`. Please use `showTooltipOn = \"always\"` instead.\r\n     *\r\n     * Indicates if this element should display a tooltip permanently.\r\n     *\r\n     * Useful, if you want to show permanent tooltips on some items.\r\n     *\r\n     * @default false\r\n     * @since 4.5.4\r\n     * @deprecated Use `showTooltipOn = \"always\"` instead\r\n     * @param  value  Always show tooltip?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      if (value) {\n        this.showTooltipOn = \"always\";\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"showTooltipOn\", {\n    /**\r\n     * @return When to show tooltip\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"showTooltipOn\");\n    },\n    /**\r\n     * Indicates when tooltip needs to be shown on this element:\r\n     *\r\n     * * `\"hover\"` (default) - Tooltip will be shown when element is hovered on.\r\n     * * `\"hit\"` - Tooltip will be shown when element is clicked/tapped. Tooltip will be hidden when clicked/tapped anywhere else.\r\n     * * `\"always\"` - Tooltip will be shown on the element permanently.\r\n     *\r\n     * For example, if you would like to show tooltips on all of the columns of\r\n     * a [[ColumnSeries]]:\r\n     *\r\n     * ```TypeScript\r\n     * series.columns.template.showTooltipOn = \"always\";\r\n     * ```\r\n     * ```JavaScript\r\n     * series.columns.template.showTooltipOn = \"always\";\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     // ...\r\n     *     \"columns\": {\r\n     *       \"showTooltipOn\": \"always\"\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * It can even be set to display on a selected columns via `propertyFields`:\r\n     *\r\n     * ```TypeScript\r\n     * series.columns.template.propertyFields.showTooltipOn = \"tooltip\";\r\n     * ```\r\n     * ```JavaScript\r\n     * series.columns.template.propertyFields.showTooltipOn = \"tooltip\";\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     // ...\r\n     *     \"columns\": {\r\n     *       \"propertyFields\": {\r\n     *         \"showTooltipOn\": \"tooltip\"\r\n     *       }\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * @default \"hover\"\r\n     * @since 4.7.9\r\n     * @param  value  When to show tooltip\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"showTooltipOn\", value)) {\n        if (value == \"hit\") {\n          this.clickable = true;\n        }\n        if (this.tooltip) {\n          if (value == \"always\") {\n            this.showTooltip();\n          } else {\n            this.handleAlwaysShowTooltip();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltipPosition\", {\n    /**\r\n     * Position\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tooltipPosition\");\n    },\n    /**\r\n     * Specifies if [[Tooltip]] should follow the mouse or touch pointer or stay\r\n     * at the fixed position.\r\n     *\r\n     * @param value  Position\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"tooltipPosition\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltipY\", {\n    /**\r\n     * @return Tooltip Y (px)\r\n     */\n    get: function () {\n      return this.getTooltipY();\n    },\n    /**\r\n     * Y coordinate the [[Tooltip]] should be shown at.\r\n     *\r\n     * @param value  Tooltip Y (px)\r\n     */\n    set: function (value) {\n      if (this.setPercentProperty(\"tooltipY\", value) && this.tooltip) {\n        this.tooltip.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns Tooltip X coordinate if it's set, or middle of the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return X (px)\r\n   */\n  Sprite.prototype.getTooltipX = function () {\n    var x = this.getPropertyValue(\"tooltipX\");\n    if (!$type.hasValue(x)) {\n      x = percent(50);\n    }\n    var value;\n    if ($type.isNumber(x)) {\n      value = x;\n    }\n    if (x instanceof Percent) {\n      value = this.maxLeftSelf + this._measuredWidthSelf * x.value - this.pixelPaddingLeft - this.ex; // overflow is know only for measured items, so this is not always good\n    }\n\n    if (!$type.isNumber(value)) {\n      value = 0;\n    }\n    return value;\n  };\n  /**\r\n   * Returns Tooltip Y coordinate if it's set, or middle of the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Y (px)\r\n   */\n  Sprite.prototype.getTooltipY = function () {\n    var y = this.getPropertyValue(\"tooltipY\");\n    if (!$type.hasValue(y)) {\n      y = percent(50);\n    }\n    var value;\n    if ($type.isNumber(y)) {\n      value = y;\n    }\n    if (y instanceof Percent) {\n      value = this.maxTopSelf + this._measuredHeightSelf * y.value - this.pixelPaddingTop - this.ey; // overflow is know only for measured items, so this is not always good\n    }\n\n    if (!$type.isNumber(value)) {\n      value = 0;\n    }\n    return value;\n  };\n  /**\r\n   * Displays a modal or console message with error, and halts any further\r\n   * processing of this item.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param e Error\r\n   * @todo Implement from applying further actions to this item\r\n   */\n  Sprite.prototype.raiseCriticalError = function (e, closable) {\n    if (this.svgContainer) {\n      if (!this._adapterO) {\n        this.modal.content = e.message;\n      } else {\n        this.modal.content = this._adapterO.apply(\"criticalError\", e).message;\n      }\n      if (!closable) {\n        this.disabled = true;\n      } else {\n        this.modal.closable = true;\n      }\n      if (!options.suppressErrors) {\n        this.modal.open();\n      }\n    }\n    if (options.verbose) {\n      console.log(e);\n    }\n  };\n  /**\r\n  * Processes JSON-based config before it is applied to the object.\r\n  *\r\n  * @ignore Exclude from docs\r\n  * @param config  Config\r\n  */\n  Sprite.prototype.processConfig = function (config) {\n    if (config) {\n      // Tooltip color source\n      if ($type.hasValue(config.tooltipColorSource) && $type.isString(config.tooltipColorSource) && this.map.hasKey(config.tooltipColorSource)) {\n        config.tooltipColorSource = this.map.getKey(config.tooltipColorSource);\n      }\n      // Cursor styles\n      if ($type.hasValue(config.cursorOverStyle) && $type.isString(config.cursorOverStyle)) {\n        config.cursorOverStyle = this.getCursorStyle(config.cursorOverStyle);\n      }\n      if ($type.hasValue(config.cursorDowntyle) && $type.isString(config.cursorDowntyle)) {\n        config.cursorDowntyle = this.getCursorStyle(config.cursorDowntyle);\n      }\n      if ($type.hasValue(config.cursorOptions)) {\n        if ($type.hasValue(config.cursorOptions.overStyle) && $type.isString(config.cursorOptions.overStyle)) {\n          config.cursorOptions.overStyle = this.getCursorStyle(config.cursorOptions.overStyle);\n        }\n        if ($type.hasValue(config.cursorOptions.downStyle) && $type.isString(config.cursorOptions.downStyle)) {\n          config.cursorOptions.downStyle = this.getCursorStyle(config.cursorOptions.downStyle);\n        }\n      }\n    }\n    _super.prototype.processConfig.call(this, config);\n    this.processDelayedMap();\n  };\n  /**\r\n   * Converts string name of the cursor into actual [[MouseCursorStyle]].\r\n   *\r\n   * @param style  Cursor type\r\n   * @return Cursor definition\r\n   */\n  Sprite.prototype.getCursorStyle = function (style) {\n    switch (style) {\n      case \"grab\":\n        return MouseCursorStyle.grab;\n      case \"grabbing\":\n        return MouseCursorStyle.grabbing;\n      case \"pointer\":\n        return MouseCursorStyle.pointer;\n      case \"horizontalResize\":\n        return MouseCursorStyle.horizontalResize;\n      case \"verticalResize\":\n        return MouseCursorStyle.verticalResize;\n      default:\n        return MouseCursorStyle.default;\n    }\n  };\n  /**\r\n   * This function is used to sort element's JSON config properties, so that\r\n   * some properties that absolutely need to be processed last, can be put at\r\n   * the end.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param a  Element 1\r\n   * @param b  Element 2\r\n   * @return Sorting number\r\n   */\n  Sprite.prototype.configOrder = function (a, b) {\n    if (a == b) {\n      return 0;\n    }\n    // Must come last\n    else if (a == \"tooltipColorSource\") {\n      return 1;\n    } else if (b == \"tooltipColorSource\") {\n      return -1;\n    } else {\n      return _super.prototype.configOrder.call(this, a, b);\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"isHidden\", {\n    /**\r\n     * If `sprite.hide()` is called, we set isHidden to true when sprite is hidden.\r\n     * This was added becaus hidden state might have visibility set to true and so\r\n     * there would not be possible to find out if a sprite is technically hidden or not.\r\n     */\n    get: function () {\n      if (this._isHidden) {\n        return this._isHidden;\n      } else if (this._parent) {\n        return this._parent.isHidden;\n      }\n      return false;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"showOnInit\", {\n    /**\r\n     * @return Show on init?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"showOnInit\");\n    },\n    /**\r\n     * If this is set to `true`, Sprite, when inited will be instantly hidden\r\n     * (\"hidden\" state applied) and then shown (\"default\" state applied).\r\n     *\r\n     * If your \"default\" state's `transitionDuration > 0` this will result in\r\n     * initial animation from \"hidden\" state to \"default\" state.\r\n     *\r\n     * If you need a Sprite which has `showOnInit = true` not to be shown\r\n     * initially, set `sprite.hidden = true`. Setting `sprite.visible = false`\r\n     * will not prevent the animation and the sprite will be shown.\r\n     *\r\n     * @param value show on init?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      this.setShowOnInit(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n  Sprite.prototype.setShowOnInit = function (value) {\n    if (this.setPropertyValue(\"showOnInit\", value)) {\n      if (!this.isTemplate) {\n        if (value && !this.inited && !this.hidden) {\n          this._showOnInitDisposer = new MultiDisposer([registry.events.once(\"enterframe\", this.hideInitially, this), this.events.once(\"beforevalidated\", this.hideInitially, this, false), this.events.on(\"inited\", this.appear, this, false)]);\n          this._disposers.push(this._showOnInitDisposer);\n        } else {\n          if (this._showOnInitDisposer) {\n            this._showOnInitDisposer.dispose();\n          }\n        }\n      }\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n  Sprite.prototype.hideInitially = function () {\n    if (!this.isDisposed()) {\n      this.appeared = false;\n      //if (!this.hidden && !this._isHidden) { // not good for series, as on enterframe it doesn't have data items yet.\n      if (!this.inited) {\n        this.hide(0);\n      }\n    }\n  };\n  /**\r\n   * Hides the chart instantly and then shows it. If defaultState.transitionDuration > 0, this will result an animation in which properties of hidden state will animate to properties of visible state.\r\n   */\n  Sprite.prototype.appear = function () {\n    var _this = this;\n    this.appeared = false;\n    if (!this.hidden && !this.isHidden) {\n      this.hide(0);\n    }\n    if (!this.hidden) {\n      var animation = this.show();\n      if (animation && !animation.isFinished()) {\n        this.addDisposer(animation.events.on(\"animationended\", function () {\n          _this.appeared = true;\n          _this.dispatch(\"appeared\");\n        }));\n      } else {\n        this.appeared = true;\n        this.dispatch(\"appeared\");\n      }\n    } else {\n      this.appeared = true;\n      this.dispatch(\"appeared\");\n    }\n  };\n  Object.defineProperty(Sprite.prototype, \"hidden\", {\n    /**\r\n     * @return Is initially hidden?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"hidden\");\n    },\n    /**\r\n     * If a sprite has `showOnInit = true`, it will animate from \"hidden\" to\r\n     * \"default\" state when initialized. To prevent this but keep\r\n     * `showOnInit = true`, you can set `sprite.hidden = true`.\r\n     *\r\n     * @param value initially hidden?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      this.setPropertyValue(\"hidden\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"bbox\", {\n    /**\r\n     * Returns bounding box (square) for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    get: function () {\n      if (this.definedBBox) {\n        return this.definedBBox;\n      }\n      return this._bbox;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"plugins\", {\n    /**\r\n     * A list of plugins (objects that implement [[IPlugin]] interface) attached\r\n     * to this object.\r\n     *\r\n     * @since 4.2.2\r\n     * @return List of plugins\r\n     */\n    get: function () {\n      var _this = this;\n      if (!this._plugins) {\n        this._plugins = new List();\n        this._disposers.push(this._plugins.events.on(\"inserted\", function (ev) {\n          ev.newValue.target = _this;\n          ev.newValue.init();\n        }));\n        this._disposers.push(new ListDisposer(this._plugins));\n      }\n      return this._plugins;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Called during the System.update method\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype._systemUpdate = function (skippedSprites) {\n    this.validate();\n  };\n  /**\r\n   * Called during the System.update method\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype._systemCheckIfValidate = function () {\n    return true;\n  };\n  /**\r\n   * Called during the System.validatePositions method\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype._systemValidatePositions = function () {\n    this.validatePosition();\n  };\n  /**\r\n   * Called during the System.validateLayouts method\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Sprite.prototype._systemValidateLayouts = function () {};\n  return Sprite;\n}(BaseObjectEvents);\nexport { Sprite };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Sprite\"] = Sprite;","map":{"version":3,"names":["__extends","__values","SpriteState","SpriteEventDispatcher","BaseObjectEvents","Adapter","globalAdapter","Dictionary","DictionaryTemplate","DictionaryDisposer","ListDisposer","List","MultiDisposer","Disposer","MutableValueDisposer","Animation","AnimationDisposer","getGhostPaper","Container","Pattern","LinearGradient","RadialGradient","Color","color","toColor","getInteraction","MouseCursorStyle","options","registry","NumberFormatter","DateFormatter","DurationFormatter","getTextFormatter","Language","Export","$utils","$math","$strings","$array","$object","$type","$iter","system","Percent","percent","visualProperties","Sprite","_super","_this","call","properties","_eventDispatcher","_bindings","_isTemplate","_isPath","_inited","_ready","isHiding","_isHidden","isShowing","isStandaloneInstance","_isActive","_mask","_positionPrecision","_language","_exporting","_exportable","_bbox","x","y","width","height","invalid","positionInvalid","propertyFields","applyOnClones","_measuredWidthSelf","_measuredHeightSelf","maxLeft","maxRight","maxTop","maxBottom","maxLeftSelf","maxRightSelf","maxTopSelf","maxBottomSelf","_isDragged","_isResized","_disabled","_internalDisabled","_updateDisabled","_internalDefaultsApplied","rollOutDelay","isBaseSprite","shouldClone","appeared","ex","ey","dragWhileResize","measureFailed","preventShow","cloneTooltip","className","_disposers","push","used","uid","group","paper","addGroup","setPropertyValue","_prevMeasuredWidth","_prevMeasuredHeight","_measuredWidth","_measuredHeight","_isMeasured","invalidate","applyTheme","events","each","key","value","dispose","Object","defineProperty","prototype","get","enumerable","configurable","_adapterO","autoSetClassName","setClassName","getCurrentThemes","themes","_themes","parent_1","_parent","applyInternalDefaults","disabled","__disabled","addToInvalidSprites","requestFrame","validate","dispatchImmediately","beforeDraw","draw","removeFromInvalidSprites","afterDraw","invalidatePosition","addToInvalidPositions","validatePosition","pixelX","pixelY","dx","dy","attr","removeSVGAttribute","sizeChanged","measure","prevGroupTransform","transformString","moveTo","rotation","nonScaling","scale","globalScale","dispatch","showTooltipOn","updateTooltipPosition","removeFromInvalidPositions","maskRectangle","_maskRectangle","_clipElement","e_1","_a","isMeasured","horizontalCenter","verticalCenter","measureElement","_b","keys","_c","next","done","e_1_1","error","return","applyFilters","visible","interactionsEnabled","getPropertyValue","showOnInit","hidden","hide","applyMask","dispatchReady","showTooltip","hideTooltip","isReady","reinit","setState","defaultState","handleGlobalScale","nonScalingStroke","strokeWidth","updateFilterScale","filters","iterator","filter","removeFromInvalids","copyFrom","source","states","length","clone","adapter","interactions","plugins","configField","virtualParent","exportable","_tooltip","tooltip","_showSystemTooltip","showSystemTooltip","copyProperties","fillModifier","strokeModifier","focusFilter","isDisposed","htmlContainer","childNodes","removeChild","firstChild","clear","_clones","i","getIndex","_svgContainer","_interactionDisposer","undefined","_urlDisposer","element","_numberFormatter","_focusFilter","stroke","clonedFrom","fill","hasValue","id","map","removeKey","parent","_filters","removeValue","_alwaysShowDisposers","set","toBoolean","children","child","isTemplate","applyAccessibility","_topParent","topParent","oldParent","baseId","_tooltipContainer","tooltipContainer","_dataItem","dataItem","handleAlwaysShowTooltip","handleAlwaysShow","sprite","oldDisposers","oldDisposer","disposer","on","addDisposer","_virtualParent","appendDefs","filterElement","appendDef","fill_1","modify","stroke_1","_clipPath","top","_map","delayedMap","_delayedMap","_id","hasKey","Error","setKey","node","_paper","parent_2","setPaper","oldPaper","_htmlContainer","parent_3","_titleElement","add","_descriptionElement","onAll","setSVGAttributes","opacity","fillOpacity","strokeOpacity","shapeRendering","strokeDasharray","strokeDashoffset","strokeLinecap","strokeLinejoin","focusable","tabindex","role","setSVGAttribute","attribute","removeAttr","classNamePrefix","addClass","userClassName","uidAttr","updateClipPath","mask","createClipPath","getUniqueId","getBaseURI","max","pixelWidth","pixelHeight","point","spritePointToSprite","width_1","height_1","removeChildNodes","filterUnits","appendPrimitives","w","h","removeClipPath","removeDispose","setElement","_element","removeElement","SVGPathElement","svgContainer","definedBBox","svgBBox","getBBox","updateCenter","prevElementTransform","bbox","elementX","elementY","elementWidth","elementHeigth","pixelPaddingLeft","pixelPaddingRight","pixelPaddingTop","pixelPaddingBottom","measuredWidth","measuredHeight","left","right","top_1","bottom","round","pixelPerfect","pixelPerfectPrecision","positionPrecision","svg","matrix","createSVGMatrix","a","cos","c","sin","e","b","d","f","p1","createSVGPoint","p2","p3","p4","pt1","matrixTransform","pt2","pt3","pt4","Math","min","isHover","tooltipText","tooltipHTML","insertBefore","index","indexOf","moveValue","sortChildren","insertAfter","getRelativeX","innerWidth","getRelativeY","innerHeight","getPixelX","pixel","isNumber","relative","getPixelY","isDragged","apply","inited","reset","rect","hitTest","ax1","ay1","ax2","ay2","bx1","by1","bx2","by2","_states","state","processState","getKey","hiddenState","create","event","newValue","name","hoverable","clickable","clones","values","length_1","_animations","getSvgPoint","getBoundingClientRect","animate","animationOptions","duration","easing","start","transitionDuration","isHidden","setVisibility","isActive","transitionEasing","transitTo","applyCurrentState","animation","isDown","downPointers","isFocused","propValues","allValues","transition","propertyName","finalValue","currentValue","option","from","to","property","isFinished","newFilters_1","stateFilter","newFilter","currentFilter","contains","pushAll","isInTransition","animations","isInteractive","handleOver","isRealHover","handleOut","handleDown","handleUp","handleFocus","handleBlur","setActive","current","setDisabled","hasChild","deepInvalidate","_background","numberFormatter","language","_dateFormatter","dateFormatter","_durationFormatter","durationFormatter","ev","exporting","populateString","string","castString","escape","tags","match","tag","replace","getTagValue","split","join","unescape","tagName","format","parts","reg","matches","exec","prop","params","trim","reg2","matches2","method","getTagValueFromObject","isObject","dataContext","component","populateStringFrom","object","formatApplied","len","part","numberValue","anyToNumber","dateValue","isString","parse","anyToDate","isDate","isNaN","getTime","durationValue","encodeURIComponent","formatParts","formatterType","getFormat","NUMBER","DATE","DURATION","setDataItem","dataContext_1","config","dataContext_2","dataContext2_1","fieldValue","anyThis","propValue","applyAll","setColorProperty","toString","setPercentProperty","transform","precision","floor","toNumberOrPercent","isEnabled","event_1","type","target","length_2","bind","bindToProperty","modifier","observe","listener","context","toArray","title","readerTitle","description","readerDescription","readerHidden","checked","readerChecked","controls","readerControls","live","readerLive","orientation","readerOrientation","valueNow","readerValueNow","valueText","readerValueText","labelledByIds","describedByIds","labelledBy","readerLabelledBy","describedBy","readerDescribedBy","titleElement","titleId","textContent","descriptionElement","descriptionId","toText","keyboardOptions","mouseOptions","_interaction","interaction","dom","trackable","draggable","swipeable","resizable","wheelable","contextMenuDisabled","inert","_tabindex","setEventDisposer","hasFocused","focusedElement","hoverOnFocus","toNumber","inertiaOptions","applyCursorStyle","handleDragStart","handleDragMove","handleDragStop","isTouchProtected","touch","originalPosition","dragStart","pointer","dragStop","cancelled","cssScale","shift","hoverOptions","_outTimeout","documentPointToSvg","SVGContainer","targetSprite","keepTargetHover","setTimeout","handleOutReal","hitOptions","originalAngle","originalScale","once","body","handleToggle","isNotEmpty","urlHandler","cursorOverStyle","_baseId","setBaseId","baseSprite","url","urlTarget","window","location","href","open","swipeOptions","handleResize","svgPoint1","point1","svgPoint2","point2","svgMidPoint","getMidPoint","parentPoint1","documentPointToSprite","startPoint1","parentPoint2","startPoint2","spritePoint1","spritePoint2","spriteMidPoint","parentPoint","svgPointToSprite","cursorOptions","style","overStyle","defaultStyle","applyCursorOverStyle","downStyle","pointerEvents","getExporting","exp","_export","remove","nonExportableSprites","modalPrefix","modal","has","openModal","text","closeModal","popups","template","openPopup","closeAllPopups","fitToRange","minX","maxX","minY","maxY","invalidateLayout","maxWidth","parentWidth","layout","align","pixelMarginLeft","pixelMarginRight","setMaxWidth","prevWidth","prevHeight","maxHeight","relativeWidth","event_2","previousWidth","previousHeight","parentHeight","valign","pixelMarginTop","pixelMarginBottom","setMaxHeight","relativeHeight","event_3","changed","percentWidth","_pixelWidth","Number","percentHeight","_relativeHeight","_pixelHeight","minWidth","minHeight","_relativeWidth","margin","marginTop","marginRight","marginBottom","marginLeft","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","setPath","setFill","toNumberRange","realFill","setStroke","realStroke","hex","_rtl","rtl","show","showReal","_hideAnimation","kill","_showHideDisposer","hideReal","currentSprite","hiddenState_1","getVisibility","event_4","toFront","toBack","removeClass","tooltipDataItem","_tooltipDataItem","_tooltipColorSource","tooltipPosition","lastPointer","colorSource_1","tooltipColorSource_1","tooltipColorSource","getStrokeFromObject","getFillFromObject","eachContinue","sprites","background","animationDuration","label","rgb","autoTextColor","alternative","html","currentText","pointTooltipTo","globalPoint","spritePointToSvg","getTooltipX","getTooltipY","instantly","showInViewport","pointTo","isInRectangle","raiseCriticalError","closable","content","message","suppressErrors","verbose","console","log","processConfig","getCursorStyle","cursorDowntyle","processDelayedMap","grab","grabbing","horizontalResize","verticalResize","default","configOrder","setShowOnInit","_showOnInitDisposer","hideInitially","appear","_plugins","init","_systemUpdate","skippedSprites","_systemCheckIfValidate","_systemValidatePositions","_systemValidateLayouts","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/Sprite.js"],"sourcesContent":["/**\r\n * This is the main class that encapsulates every object on the chart.\r\n *\r\n * If it's an element that is to be displayed on the screen at some point, its\r\n * class must extend [[Sprite]] class.\r\n */\r\nimport { __extends, __values } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SpriteState } from \"./SpriteState\";\r\nimport { SpriteEventDispatcher } from \"./SpriteEvents\";\r\nexport { SpriteEventDispatcher };\r\nimport { BaseObjectEvents } from \"./Base\";\r\nimport { Adapter, globalAdapter } from \"./utils/Adapter\";\r\nimport { Dictionary, DictionaryTemplate, DictionaryDisposer } from \"./utils/Dictionary\";\r\nimport { ListDisposer, List } from \"./utils/List\";\r\nimport { MultiDisposer, Disposer, MutableValueDisposer } from \"./utils/Disposer\";\r\nimport { Animation, AnimationDisposer } from \"./utils/Animation\";\r\nimport { getGhostPaper } from \"./rendering/Paper\";\r\nimport { Container } from \"./Container\";\r\nimport { Pattern } from \"./rendering/fills/Pattern\";\r\nimport { LinearGradient } from \"./rendering/fills/LinearGradient\";\r\nimport { RadialGradient } from \"./rendering/fills/RadialGradient\";\r\nimport { Color, color, toColor } from \"./utils/Color\";\r\nimport { getInteraction } from \"./interaction/Interaction\";\r\nimport { MouseCursorStyle } from \"./interaction/Mouse\";\r\nimport { options } from \"./Options\";\r\nimport { registry } from \"./Registry\";\r\nimport { NumberFormatter } from \"./formatters/NumberFormatter\";\r\nimport { DateFormatter } from \"./formatters/DateFormatter\";\r\nimport { DurationFormatter } from \"./formatters/DurationFormatter\";\r\nimport { getTextFormatter } from \"./formatters/TextFormatter\";\r\nimport { Language } from \"./utils/Language\";\r\nimport { Export } from \"./export/Export\";\r\nimport * as $utils from \"./utils/Utils\";\r\nimport * as $math from \"./utils/Math\";\r\nimport * as $strings from \"./utils/Strings\";\r\nimport * as $array from \"./utils/Array\";\r\nimport * as $object from \"./utils/Object\";\r\nimport * as $type from \"./utils/Type\";\r\nimport * as $iter from \"./utils/Iterator\";\r\nimport { system } from \"./System\";\r\nimport { Percent, percent } from \"./utils/Percent\";\r\n/**\r\n * Defines list ofvisual properties\r\n */\r\nexport var visualProperties = [\"fill\", \"fillOpacity\", \"stroke\", \"strokeOpacity\", \"strokeWidth\", \"strokeDasharray\", \"strokeDashoffset\", \"strokeLinecap\", \"strokeLinejoin\"]; // do not add opacity here, as it is used for showing/hiding\r\n;\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Sprite represents any displayable element.\r\n *\r\n * This is the main class that encapsulates every object on the chart.\r\n *\r\n * If it's an element that is to be displayed on the screen at some point, its\r\n * class must extend [[Sprite]] class.\r\n *\r\n * [[Sprite]] class represents the a hierarchical structure. Every object that\r\n * extends [[Sprite]] can have children, that would inherit their properties,\r\n * such as language, formatters, etc.\r\n *\r\n * @see {@link SpriteState}\r\n * @see {@link ISpriteEvents} for a list of available events\r\n * @see {@link ISpriteAdapters} for a list of available Adapters\r\n *\r\n * @todo Review child elements that need to go into `_disposers`\r\n * @important\r\n */\r\nvar Sprite = /** @class */ (function (_super) {\r\n    __extends(Sprite, _super);\r\n    /**\r\n     * Constructor:\r\n     * * Creates initial node\r\n     * * Sets default properties\r\n     * * Creates required default states\r\n     * * Inits accessibility\r\n     */\r\n    function Sprite() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Holds values for Sprite's properties.\r\n         */\r\n        _this.properties = {};\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this._eventDispatcher = new SpriteEventDispatcher(_this);\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         */\r\n        _this._bindings = {};\r\n        /**\r\n         * Holds indicator if this Sprite is a \"template\" to be used for creating\r\n         * other Sprites from and should not be treated as full-fledged element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._isTemplate = false;\r\n        _this._isPath = false;\r\n        /**\r\n         * Holds indicator whether this sprite was already initialized.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._inited = false;\r\n        /**\r\n         * Holds indicator whether this sprite was already initialized and ready.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._ready = false;\r\n        /**\r\n         * If `sprite.hide()` is called and we have \"hidden\" state and\r\n         * `transitionDuration > 0`, we set `isHiding` flag to `true` in order to\r\n         * avoid restarting animations in case `hide()` method is called multiple\r\n         * times.\r\n         */\r\n        _this.isHiding = false;\r\n        /**\r\n         * If `sprite.hide()` is called, we set isHidden to true when sprite is hidden.\r\n         * This was added becaus hidden state might have visibility set to true and so\r\n         * there would not be possible to find out if a sprite is technically hidden or not.\r\n         */\r\n        _this._isHidden = false;\r\n        /**\r\n         * This property indicates if Sprite is currently being revealed from hidden\r\n         * state. This is used to prevent multiple calls to `sprite.show()` to\r\n         * restart reveal animation. (if enabled)\r\n         */\r\n        _this.isShowing = false;\r\n        /**\r\n         * Indicates if this element is a standalone instance. A \"standalone\r\n         * instance\" means this is a autonomous object which maintains its own\r\n         * set of controls like Preloader, Export, etc.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this.isStandaloneInstance = false;\r\n        /**\r\n         * Indicates if togglable Sprite is currently active (toggled on).\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._isActive = false;\r\n        /**\r\n         * A Sprite element to use as a mask for this Sprite.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._mask = new MutableValueDisposer();\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         */\r\n        _this._positionPrecision = 3;\r\n        /**\r\n         * An instance of [[Language]].\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._language = new MutableValueDisposer();\r\n        /**\r\n         * Holds [[Export]] object.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._exporting = new MutableValueDisposer();\r\n        /**\r\n         * Should this Sprite be included when exporting?\r\n         */\r\n        _this._exportable = true;\r\n        /**\r\n         * Defines bounding box (square) for this element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._bbox = { x: 0, y: 0, width: 0, height: 0 };\r\n        /**\r\n         * Indicates if this element is invalid and should be re-validated (redrawn).\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this.invalid = false;\r\n        /**\r\n         * Indicates if this elements position is invalid and should be repositioned\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this.positionInvalid = false;\r\n        /**\r\n         * A collection of key/value pairs that can be used to bind specific Sprite\r\n         * properties to [[DataItem]].\r\n         *\r\n         * For example: `fill` property can be bound to `myCustomColor` field in\r\n         * DataItem. The Sprite will automatically get the value for `fill` from its\r\n         * DataItem.\r\n         *\r\n         * Can be set for each [[SpriteState]] individually to override default\r\n         * bindings.\r\n         *\r\n         * @see {@link SpriteState}\r\n         */\r\n        _this.propertyFields = {};\r\n        /**\r\n         * Specifies if property changes on this object should be propagated to the\r\n         * objects cloned from this object.\r\n         *\r\n         * This setting affects property changes *after* cloning, since at the moment\r\n         * of cloning all of properties from source object are copied to the clone\r\n         * anyway.\r\n         *\r\n         * @default false\r\n         */\r\n        _this.applyOnClones = false;\r\n        // unrotated unscaled\r\n        _this._measuredWidthSelf = 0;\r\n        _this._measuredHeightSelf = 0;\r\n        // read only, sprite extreme coordinates\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this.maxLeft = 0;\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this.maxRight = 0;\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this.maxTop = 0;\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this.maxBottom = 0;\r\n        // not rotated and not scaled\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this.maxLeftSelf = 0;\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this.maxRightSelf = 0;\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this.maxTopSelf = 0;\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this.maxBottomSelf = 0;\r\n        _this._isDragged = false;\r\n        _this._isResized = false;\r\n        /**\r\n         * @deprecated Moved to [[SpriteProperties]]\r\n         */\r\n        _this._disabled = false;\r\n        _this._internalDisabled = false;\r\n        _this._updateDisabled = false;\r\n        _this._internalDefaultsApplied = false;\r\n        /**\r\n         * Time in milliseconds after which rollout event happens when user rolls-out of the sprite. This helps to avoid flickering in some cases.\r\n         */\r\n        _this.rollOutDelay = 0;\r\n        /**\r\n         * This flag is set to `true` for the initial sprite you create and place\r\n         * to the div so that we could clear all additional\r\n         * sprites/containers when this sprite is disposed.\r\n         *\r\n         * @ignore\r\n         */\r\n        _this.isBaseSprite = false;\r\n        /**\r\n         * Indicates whether this sprite should be cloned when cloning its parent\r\n         * container. We set this to `false` in those cases when a sprite is created\r\n         * by the class, so that when cloning a duplicate sprite would not appear.\r\n         */\r\n        _this.shouldClone = true;\r\n        /**\r\n         * A read-only flag which indicates if a sprite has completed its initial\r\n         * animation (if `showOnInit = true`).\r\n         *\r\n         * In case `showOnInit = false`, `appeared` is set to `true` on init.\r\n         *\r\n         * @readonly\r\n         */\r\n        _this.appeared = false;\r\n        /**\r\n         * [ex description]\r\n         *\r\n         * @todo Description\r\n         * @ignore\r\n         */\r\n        _this.ex = 0;\r\n        /**\r\n         * [ey description]\r\n         *\r\n         * @todo Description\r\n         * @ignore\r\n         */\r\n        _this.ey = 0;\r\n        /**\r\n         * Indicates if the sprite can be moved around when resizing it with two fingers (will only work if draggable = false)\r\n         * @ignore\r\n         */\r\n        _this.dragWhileResize = false;\r\n        /**\r\n         *  @ignore\r\n         */\r\n        _this.measureFailed = false;\r\n        /**\r\n         * If this flag is set to true, calling show() will not reveal the sprite.\r\n         *\r\n         * @ignore\r\n         */\r\n        _this.preventShow = false;\r\n        /**\r\n         * When cloning a sprite, if the template has it's own tooltip assigned, this tooltip is also cloned by default.\r\n         * This is not good for cpu and sometimes you might only need one single tooltip for all clones. Set this to false in order not to clone tooltip.\r\n         */\r\n        _this.cloneTooltip = true;\r\n        _this.className = \"Sprite\";\r\n        _this._disposers.push(_this._eventDispatcher);\r\n        // Generate a unique ID\r\n        $utils.used(_this.uid);\r\n        // Create SVG group to hold everything in\r\n        _this.group = _this.paper.addGroup(\"g\");\r\n        // Set defaults\r\n        // it is better to set defauls like this in order to save invaliation calls and events\r\n        _this.setPropertyValue(\"scale\", 1);\r\n        _this.setPropertyValue(\"rotation\", 0);\r\n        _this.setPropertyValue(\"align\", \"none\");\r\n        _this.setPropertyValue(\"valign\", \"none\");\r\n        _this.setPropertyValue(\"pixelPerfect\", false);\r\n        _this.setPropertyValue(\"visible\", true);\r\n        _this.setPropertyValue(\"tooltipPosition\", \"fixed\");\r\n        _this.setPropertyValue(\"verticalCenter\", \"none\");\r\n        _this.setPropertyValue(\"horizontalCenter\", \"none\");\r\n        _this.setPropertyValue(\"tooltipX\", percent(50));\r\n        _this.setPropertyValue(\"tooltipX\", percent(50));\r\n        _this.setPropertyValue(\"marginTop\", 0);\r\n        _this.setPropertyValue(\"marginBottom\", 0);\r\n        _this.setPropertyValue(\"marginLeft\", 0);\r\n        _this.setPropertyValue(\"marginRight\", 0);\r\n        _this.setPropertyValue(\"dx\", 0);\r\n        _this.setPropertyValue(\"dy\", 0);\r\n        _this.setPropertyValue(\"paddingTop\", 0);\r\n        _this.setPropertyValue(\"paddingBottom\", 0);\r\n        _this.setPropertyValue(\"paddingRight\", 0);\r\n        _this.setPropertyValue(\"paddingLeft\", 0);\r\n        _this.setPropertyValue(\"togglable\", false);\r\n        _this.setPropertyValue(\"hidden\", false);\r\n        _this.setPropertyValue(\"urlTarget\", \"_self\");\r\n        _this.setPropertyValue(\"alwaysShowTooltip\", false);\r\n        _this.setPropertyValue(\"showTooltipOn\", \"hover\");\r\n        _this._prevMeasuredWidth = 0;\r\n        _this._prevMeasuredHeight = 0;\r\n        _this._measuredWidth = 0;\r\n        _this._measuredHeight = 0;\r\n        _this._isMeasured = true;\r\n        // Invalidate the Sprite so that renderer knows it needs to be drawn\r\n        _this.invalidate();\r\n        //this.states.create(\"default\").properties.opacity = 1;\r\n        // Apply the theme\r\n        _this.applyTheme();\r\n        //this._disposers.push(this._clickable);\r\n        // Decorate adapter with events so that we can apply its settings whenever\r\n        // it is modified\r\n        // @todo Think what to do here. We can't just apply the adapter value to\r\n        // property since not all of those are for properties. Commented out for\r\n        // now.\r\n        /*this.adapter.events.on(\"inserted\", (ev: any) => {\r\n            (<any>this)[ev.newValue.key] = (<any>this)[ev.newValue.key];\r\n        });\r\n        this.adapter.events.on(\"removed\", (ev: any) => {\r\n            (<any>this)[ev.newValue.key] = (<any>this)[ev.newValue.key];\r\n        });*/\r\n        // Add disposable dependencies to `_disposers` so they are automatically\r\n        // disposed of when this object is disposed\r\n        _this._disposers.push(_this.events);\r\n        _this._disposers.push(_this.group);\r\n        _this._disposers.push(_this._mask);\r\n        _this._disposers.push(_this._language);\r\n        _this._disposers.push(_this._exporting);\r\n        //this._disposers.push(this._parent);\r\n        //this._disposers.push(this._modal);\r\n        _this._disposers.push(new Disposer(function () {\r\n            $object.each(_this._bindings, function (key, value) {\r\n                value.dispose();\r\n            });\r\n        }));\r\n        _this.setPropertyValue(\"interactionsEnabled\", true);\r\n        return _this;\r\n    }\r\n    Object.defineProperty(Sprite.prototype, \"events\", {\r\n        /**\r\n         * Event dispatcher.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/event-listeners/} for more info about Events\r\n         */\r\n        get: function () {\r\n            return this._eventDispatcher;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"adapter\", {\r\n        /**\r\n         * Holds Adapter.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/adapters/} for more info about Adapters\r\n         */\r\n        get: function () {\r\n            if (!this._adapterO) {\r\n                this._adapterO = new Adapter(this);\r\n            }\r\n            return this._adapterO;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * ==========================================================================\r\n     * ELEMENT VALIDATION, INIT, AND DRAWING STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Applies properties from all assigned themes.\r\n     *\r\n     * We do this here so that we can apply class names as well.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.applyTheme = function () {\r\n        _super.prototype.applyTheme.call(this);\r\n        if (options.autoSetClassName) {\r\n            this.setClassName();\r\n        }\r\n    };\r\n    /**\r\n     * Returns theme(s) used by this object either set explicitly on this\r\n     * element, inherited from parent, or inherited from [[System]].\r\n     *\r\n     * @return An array of theme references\r\n     */\r\n    Sprite.prototype.getCurrentThemes = function () {\r\n        var themes = this._themes;\r\n        if (themes) {\r\n            return themes;\r\n        }\r\n        else {\r\n            var parent_1 = this._parent;\r\n            if (parent_1) {\r\n                return parent_1.getCurrentThemes();\r\n            }\r\n            else {\r\n                return registry.themes;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Called just before element's validation, this function allows setting\r\n     * defaults.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.applyInternalDefaults = function () {\r\n        // Nothing here, but extending classes might override this function\r\n        // so that they can set their defaults\r\n        this._internalDefaultsApplied = true;\r\n    };\r\n    /**\r\n     * Invalidates element.\r\n     *\r\n     * Object will be redrawn during the next update cycle.\r\n     *\r\n     * Please note that in most cases elements will auto-invalidate when needed. If\r\n     * everything works, DO NOT use this method. Use it only if some changes do\r\n     * not take otherwise.\r\n     */\r\n    Sprite.prototype.invalidate = function () {\r\n        if (this.disabled || this._isTemplate || this.__disabled) {\r\n            return;\r\n        }\r\n        // We no longer reset this on each invalidate, so that they are applied\r\n        // only once, and do not overwrite user-defined settings\r\n        //this._internalDefaultsApplied = false;\r\n        if (!this.invalid) {\r\n            this.invalid = true;\r\n            registry.addToInvalidSprites(this);\r\n            system.requestFrame();\r\n        }\r\n    };\r\n    /**\r\n     * Validates element:\r\n     * * Triggers events\r\n     * * Redraws the element\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.validate = function () {\r\n        this.dispatchImmediately(\"beforevalidated\");\r\n        // prevents from drawing if topparent is 0x0\r\n        /*\r\n        let topParent = this.topParent;\r\n\r\n        if (topParent) {\r\n            if (!topParent.maxWidth || !topParent.maxHeight) {\r\n                this._disposers.push(topParent.events.once(\"maxsizechanged\", this.invalidate, this));\r\n            }\r\n        }*/\r\n        // Set internal defaults\r\n        if (!this._internalDefaultsApplied) {\r\n            this.applyInternalDefaults();\r\n        }\r\n        this.beforeDraw();\r\n        this.draw();\r\n        this.invalid = false;\r\n        registry.removeFromInvalidSprites(this);\r\n        this.afterDraw();\r\n    };\r\n    /**\r\n     * Invalidates element's position.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.invalidatePosition = function () {\r\n        if (this.disabled || this._isTemplate) {\r\n            return;\r\n        }\r\n        if (!this.positionInvalid) {\r\n            this.positionInvalid = true;\r\n            registry.addToInvalidPositions(this);\r\n            system.requestFrame();\r\n        }\r\n    };\r\n    /**\r\n     * Transforms the element.\r\n     *\r\n     * @todo Description (review)\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.validatePosition = function () {\r\n        var pixelX = this.pixelX;\r\n        var pixelY = this.pixelY;\r\n        var dx = this.dx;\r\n        var dy = this.dy;\r\n        var x = pixelX + dx;\r\n        var y = pixelY + dy;\r\n        if (this._updateDisabled) {\r\n            if (this._internalDisabled) {\r\n                this.group.attr({ \"display\": \"none\" });\r\n            }\r\n            else {\r\n                if (!this.disabled) {\r\n                    this.removeSVGAttribute(\"display\");\r\n                }\r\n            }\r\n            this._updateDisabled = false;\r\n        }\r\n        var sizeChanged = this.measure();\r\n        //if (!this.invalid) {\r\n        var prevGroupTransform = this.group.transformString;\r\n        this.group.moveTo({ x: x, y: y });\r\n        this.group.rotation = this.rotation;\r\n        if (this.nonScaling) {\r\n            this.group.scale = this.scale / this.globalScale;\r\n        }\r\n        else {\r\n            this.group.scale = this.scale;\r\n        }\r\n        if (prevGroupTransform != this.group.transformString || sizeChanged) {\r\n            // not yet sure, this is to avoid many transforms=>container layout invalidation on initial buid\r\n            if (prevGroupTransform == null) {\r\n                this.dispatch(\"transformed\");\r\n            }\r\n            else {\r\n                this.dispatchImmediately(\"transformed\");\r\n            }\r\n            // TODO clear existing positionchanged dispatches ?\r\n            this.dispatch(\"positionchanged\");\r\n            if (this.showTooltipOn == \"hit\" || this.showTooltipOn == \"always\") {\r\n                this.updateTooltipPosition();\r\n            }\r\n        }\r\n        //}\r\n        // it might happen that x and y changed again, so we only remove if they didn't\r\n        if (pixelX + dx == x && pixelY + dy == y) {\r\n            registry.removeFromInvalidPositions(this);\r\n            this.positionInvalid = false;\r\n        }\r\n        var maskRectangle = this._maskRectangle;\r\n        // todo: verify this\r\n        if (maskRectangle) {\r\n            this._clipElement.moveTo({ x: maskRectangle.x - pixelX, y: maskRectangle.y - pixelY });\r\n        }\r\n    };\r\n    /**\r\n     * A placeholder method that is called **before** element begins to be drawn.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.beforeDraw = function () {\r\n    };\r\n    /**\r\n     * A placeholder method that draws the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.draw = function () {\r\n    };\r\n    /**\r\n     * A placeholder method that is called **after** element finishes drawing\r\n     * itself.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.afterDraw = function () {\r\n        var e_1, _a;\r\n        if (this.isMeasured || this.horizontalCenter !== \"none\" || this.verticalCenter !== \"none\") {\r\n            this.measureElement();\r\n        }\r\n        //this.applyMask();\r\n        if (!this._inited) {\r\n            if (this._adapterO) {\r\n                try {\r\n                    // used to be applySVGAttrbutes here, this is more efficient\r\n                    for (var _b = __values(this._adapterO.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                        var key = _c.value;\r\n                        switch (key) {\r\n                            case \"mask\":\r\n                            case \"fill\":\r\n                            case \"opacity\":\r\n                            case \"fillOpacity\":\r\n                            case \"stroke\":\r\n                            case \"strokeOpacity\":\r\n                            case \"strokeWidth\":\r\n                            case \"shapeRendering\":\r\n                            case \"strokeDasharray\":\r\n                            case \"strokeDashoffset\":\r\n                            case \"strokeLinecap\":\r\n                            case \"strokeLinejoin\":\r\n                            case \"textDecoration\":\r\n                            case \"fontSize\":\r\n                            case \"fontFamily\":\r\n                            case \"fontWeight\":\r\n                                //case \"focusable\":\r\n                                //case \"tabindex\":\r\n                                //case \"role\":\r\n                                this[key] = this[key];\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n                finally {\r\n                    try {\r\n                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n                    }\r\n                    finally { if (e_1) throw e_1.error; }\r\n                }\r\n            }\r\n            this.applyFilters();\r\n            this.visible = this.visible;\r\n            this.interactionsEnabled = this.getPropertyValue(\"interactionsEnabled\"); // can't use .interactionsEnabled as it get's parent's\r\n            this._inited = true;\r\n            if (!this.showOnInit) {\r\n                this.appeared = true;\r\n            }\r\n            if (this.hidden) {\r\n                this.hide(0);\r\n            }\r\n            this.applyMask();\r\n            this.dispatch(\"validated\");\r\n            this.dispatch(\"inited\");\r\n            this.dispatchReady();\r\n        }\r\n        else {\r\n            this.dispatch(\"validated\");\r\n        }\r\n        if (this.showTooltipOn == \"always\") {\r\n            if (this.visible && !this.disabled && !this.__disabled) {\r\n                this.showTooltip();\r\n            }\r\n            else {\r\n                this.hideTooltip(0);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Dispatches `\"ready\"` event. Sprite dispatches it right after `\"inited\"` event.\r\n     *\r\n     * @ignore\r\n     */\r\n    Sprite.prototype.dispatchReady = function () {\r\n        if (!this.isReady()) {\r\n            this._ready = true;\r\n            this.dispatch(\"ready\");\r\n        }\r\n    };\r\n    /**\r\n     * Triggers a re-initialization of this element.\r\n     *\r\n     * Will result in complete redrawing of the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.reinit = function () {\r\n        this._inited = false;\r\n        this.setState(this.defaultState);\r\n        this.invalidate();\r\n    };\r\n    /**\r\n     * Handles the situation where parent element is resized.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.handleGlobalScale = function () {\r\n        this.dispatch(\"globalscalechanged\");\r\n        if (this.nonScalingStroke) {\r\n            this.strokeWidth = this.strokeWidth;\r\n        }\r\n        if (this.nonScaling) {\r\n            this.validatePosition();\r\n        }\r\n        this.updateFilterScale();\r\n    };\r\n    /**\r\n     * Updates filter properties which might depend on scale\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.updateFilterScale = function () {\r\n        var _this = this;\r\n        $iter.each(this.filters.iterator(), function (filter) {\r\n            filter.scale = _this.globalScale;\r\n        });\r\n    };\r\n    /**\r\n     * Removes itself from system's invalid lists.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.removeFromInvalids = function () {\r\n        registry.removeFromInvalidSprites(this);\r\n        registry.removeFromInvalidPositions(this);\r\n    };\r\n    /**\r\n     * Copies all parameters from another [[Sprite]].\r\n     *\r\n     * @param source Source Sprite\r\n     */\r\n    Sprite.prototype.copyFrom = function (source) {\r\n        var _this = this;\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.isMeasured = source.isMeasured;\r\n        this.states.copyFrom(source.states);\r\n        if (source.filters.length > 0) {\r\n            source.filters.each(function (filter) {\r\n                _this.filters.push(filter.clone());\r\n            });\r\n        }\r\n        if (source._adapterO) {\r\n            this.adapter.copyFrom(source._adapterO);\r\n        }\r\n        //helps to avoid calling getter which creates instance\r\n        if (source[\"_interaction\"]) {\r\n            this.interactions.copyFrom(source.interactions);\r\n        }\r\n        if (source[\"_plugins\"]) {\r\n            this.plugins.copyFrom(source.plugins);\r\n        }\r\n        this.configField = source.configField;\r\n        this.applyOnClones = source.applyOnClones;\r\n        // this.numberFormatter = source.numberFormatter; // todo: this creates loose number formatter and copies it to all clones. somehow we need to know if source had numberFormatter explicitly created and not just because a getter was called.\r\n        //this.mask = source.mask; need to think about this, generally this causes a lot of problems\r\n        this.disabled = source.disabled;\r\n        this.virtualParent = source.virtualParent;\r\n        this.exportable = source.exportable;\r\n        //@todo: create tooltip if it's on source but not on this?\r\n        //const tooltip = this._tooltip;\r\n        //if (tooltip) {\r\n        //\ttooltip.copyFrom(source.tooltip);\r\n        //}\r\n        if (source._tooltip) {\r\n            if (this._tooltip) {\r\n                this._tooltip.copyFrom(source.tooltip);\r\n            }\r\n            else {\r\n                if (source.cloneTooltip) {\r\n                    this.tooltip = source.tooltip.clone();\r\n                }\r\n                else {\r\n                    this._tooltip = source.tooltip;\r\n                }\r\n            }\r\n        }\r\n        //if ((<any>source)[\"_tooltip\"] && !this._tooltip) {\r\n        //\tthis._tooltip = (<any>source)[\"_tooltip\"];\r\n        //}\r\n        this._showSystemTooltip = source.showSystemTooltip;\r\n        $utils.copyProperties(source.propertyFields, this.propertyFields);\r\n        $utils.copyProperties(source.properties, this);\r\n        if (source.fillModifier) {\r\n            this.fillModifier = source.fillModifier.clone();\r\n        }\r\n        if (source.strokeModifier) {\r\n            this.strokeModifier = source.strokeModifier.clone();\r\n        }\r\n        if (source.focusFilter) {\r\n            this.focusFilter = source.focusFilter.clone();\r\n        }\r\n    };\r\n    /**\r\n     * Destroys this object and all related data.\r\n     */\r\n    Sprite.prototype.dispose = function () {\r\n        if (!this.isDisposed()) {\r\n            if (this.showTooltipOn == \"always\" && this.tooltip) {\r\n                this.tooltip.hide();\r\n            }\r\n            this.dispatchImmediately(\"beforedisposed\");\r\n            if (this.isBaseSprite) {\r\n                if (this.htmlContainer) {\r\n                    while (this.htmlContainer.childNodes.length > 0) {\r\n                        this.htmlContainer.removeChild(this.htmlContainer.firstChild);\r\n                    }\r\n                }\r\n                this.isBaseSprite = false;\r\n            }\r\n            _super.prototype.dispose.call(this);\r\n            // Clear adapters\r\n            if (this._adapterO) {\r\n                this._adapterO.clear();\r\n            }\r\n            if (this.applyOnClones) {\r\n                if (this._clones) {\r\n                    for (var i = this._clones.length - 1; i >= 0; i--) {\r\n                        var clone = this._clones.getIndex(i);\r\n                        clone.dispose();\r\n                    }\r\n                }\r\n            }\r\n            if (this._svgContainer) {\r\n                this._svgContainer.dispose();\r\n            }\r\n            if (this._interactionDisposer) {\r\n                this._interactionDisposer.dispose();\r\n                this._interactionDisposer = undefined;\r\n            }\r\n            if (this._urlDisposer) {\r\n                this._urlDisposer.dispose();\r\n            }\r\n            this.removeFromInvalids();\r\n            if (this.element) {\r\n                this.element.dispose();\r\n            }\r\n            if (this.group) {\r\n                this.group.dispose();\r\n            }\r\n            if (this._numberFormatter) {\r\n                this._numberFormatter.dispose();\r\n            }\r\n            if (this._focusFilter) {\r\n                this._focusFilter.dispose();\r\n            }\r\n            var stroke = this.stroke;\r\n            if (stroke && !(stroke instanceof Color) && stroke.dispose) {\r\n                if (this.clonedFrom && this.clonedFrom.stroke == stroke) {\r\n                    // do nothing\r\n                }\r\n                else {\r\n                    stroke.dispose();\r\n                }\r\n            }\r\n            // TODO a bit hacky\r\n            var fill = this.fill;\r\n            if (fill && !(fill instanceof Color) && fill.dispose) {\r\n                if (this.clonedFrom && this.clonedFrom.fill == fill) {\r\n                    // do nothing\r\n                }\r\n                else {\r\n                    fill.dispose();\r\n                }\r\n            }\r\n            // remove from map\r\n            if ($type.hasValue(this.id)) {\r\n                this.map.removeKey(this.id);\r\n            }\r\n            this.parent = undefined;\r\n            if (this._filters) {\r\n                while (this._filters.length > 0) {\r\n                    var filter = this._filters.getIndex(0);\r\n                    filter.dispose();\r\n                    this._filters.removeValue(filter);\r\n                }\r\n            }\r\n            this._alwaysShowDisposers = undefined;\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"isTemplate\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Is template?\r\n         */\r\n        get: function () {\r\n            return this._isTemplate;\r\n        },\r\n        /**\r\n         * Indicates if this element is a \"template\".\r\n         *\r\n         * Template Sprites act only as a holders for config for other \"real\"\r\n         * elements to be cloned from.\r\n         *\r\n         * Templates are treated differently, as they are not validated, redrawn, or\r\n         * otherwise are processed.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value Is template?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (this._isTemplate != value) {\r\n                this._isTemplate = value;\r\n                if (this instanceof Container) {\r\n                    $iter.each(this.children.iterator(), function (child) {\r\n                        child.isTemplate = value;\r\n                    });\r\n                }\r\n                if (value) {\r\n                    this.parent = this._parent;\r\n                    this.removeFromInvalids();\r\n                }\r\n                else {\r\n                    this.invalidate();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"showSystemTooltip\", {\r\n        /**\r\n         * @return Show system tooltip?\r\n         */\r\n        get: function () {\r\n            if (!$type.hasValue(this._showSystemTooltip)) {\r\n                if (this.virtualParent) {\r\n                    return this.virtualParent.showSystemTooltip;\r\n                }\r\n                else if (this._parent) {\r\n                    return this._parent.showSystemTooltip;\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n            }\r\n            return this._showSystemTooltip;\r\n        },\r\n        /**\r\n         * Indicates whether the element should attempt to construct itself in a way\r\n         * so that system tooltip is shown if its `readerTitle` is set.\r\n         *\r\n         * @param value Show system tooltip?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (this._showSystemTooltip != value) {\r\n                this._showSystemTooltip = value;\r\n                this.applyAccessibility();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"topParent\", {\r\n        /**\r\n         * ==========================================================================\r\n         * HIERARCHY AND STRUCTURE RELATED STUFF\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Sprites's top-level [[Container]].\r\n         *\r\n         * Please note that in most cases it won't be the chart element.\r\n         *\r\n         * To access base chart element, use `baseSprite` instead.\r\n         *\r\n         * @return Top-level ascendant\r\n         */\r\n        get: function () {\r\n            if (this._topParent) {\r\n                return this._topParent;\r\n            }\r\n            else {\r\n                if (this._parent) {\r\n                    return this._parent.topParent;\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * @ignore\r\n         * @param value {Container} top parent of a sprite\r\n         */\r\n        set: function (value) {\r\n            this._topParent = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"parent\", {\r\n        /**\r\n         * @return Parent container\r\n         */\r\n        get: function () {\r\n            return this._parent;\r\n        },\r\n        /**\r\n         * Elements' parent [[Container]].\r\n         *\r\n         * @param parent  Parent container\r\n         */\r\n        set: function (parent) {\r\n            if (this._isTemplate) {\r\n                return;\r\n            }\r\n            // TODO is this needed ?\r\n            $utils.used(this.paper);\r\n            var oldParent = this._parent;\r\n            if (oldParent != parent) {\r\n                if (oldParent) {\r\n                    oldParent.children.removeValue(this);\r\n                }\r\n                this._parent = parent;\r\n                if (parent) {\r\n                    this.topParent = parent.topParent;\r\n                    if (parent.isTemplate) {\r\n                        this.isTemplate = true;\r\n                    }\r\n                    this.baseId = parent.baseId;\r\n                    parent.children.push(this);\r\n                    // insert handler at Container invalidates +  invalidatesLayout + adds to group\r\n                    if (this._tooltip && !this._tooltipContainer) {\r\n                        this._tooltip.parent = parent.tooltipContainer;\r\n                    }\r\n                    if (!this._dataItem) {\r\n                        this.dataItem = parent.dataItem;\r\n                    }\r\n                    this.handleAlwaysShowTooltip();\r\n                    if (this.dataItem) {\r\n                        // No need to apply accessibility if there's no data item\r\n                        // The whole reason of applying it here is to populate data\r\n                        // placesholders, and if tehre's no data item, it won't work anyway\r\n                        this.applyAccessibility();\r\n                    }\r\n                    this.dispatchImmediately(\"parentset\");\r\n                }\r\n                else {\r\n                    this.topParent = undefined;\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    Sprite.prototype.handleAlwaysShow = function () {\r\n        this.showTooltip();\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Sprite.prototype.handleAlwaysShowTooltip = function () {\r\n        var sprite = this;\r\n        var oldDisposers = this._alwaysShowDisposers;\r\n        if (oldDisposers) {\r\n            $array.each(oldDisposers, function (oldDisposer) {\r\n                oldDisposer.dispose();\r\n            });\r\n        }\r\n        this._alwaysShowDisposers = [];\r\n        if (this.showTooltipOn == \"always\") {\r\n            while (sprite != undefined) {\r\n                var disposer = sprite.events.on(\"visibilitychanged\", this.handleAlwaysShow, this, false);\r\n                this.addDisposer(disposer);\r\n                this._alwaysShowDisposers.push(disposer);\r\n                sprite = sprite.parent;\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"virtualParent\", {\r\n        /**\r\n         * @return Virtual parent\r\n         */\r\n        get: function () {\r\n            return this._virtualParent;\r\n        },\r\n        /**\r\n         * Element's \"virtual\" parent.\r\n         *\r\n         * This is required in ordere to maintain proper inheritance (like\r\n         * formatters).\r\n         *\r\n         * Sometimes an element is a \"logical\" parent, even though it's not a direct\r\n         * ascendant.\r\n         *\r\n         * Example: a bullet is not a child of the axis, but it would make sense\r\n         * for it to inherit series' formatters.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value  Virtual parent\r\n         */\r\n        set: function (value) {\r\n            this._virtualParent = value;\r\n            if (this.dataItem) {\r\n                // No need to apply accessibility if there's no data item\r\n                // The whole reason of applying it here is to populate data\r\n                // placesholders, and if tehre's no data item, it won't work anyway\r\n                this.applyAccessibility();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Moves `<defs>` to correct place in DOM.\r\n     *\r\n     * Some elements are initially created in \"ghost\" container. When moving\r\n     * those into proper place in DOM, their respective `<defs>` need to be moved\r\n     * as well.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.appendDefs = function () {\r\n        if (this.filterElement) {\r\n            this.paper.appendDef(this.filterElement);\r\n        }\r\n        var fill = this.fill;\r\n        if (fill && fill.element) {\r\n            this.paper.appendDef(fill.element);\r\n        }\r\n        var stroke = this.stroke;\r\n        if (stroke && stroke.element) {\r\n            this.paper.appendDef(stroke.element);\r\n        }\r\n        if (this.fillModifier && this.fill instanceof Color) {\r\n            var fill_1 = this.fillModifier.modify(this.fill);\r\n            if (fill_1 && fill_1.element) {\r\n                this.paper.appendDef(fill_1.element);\r\n            }\r\n        }\r\n        if (this.strokeModifier && this.stroke instanceof Color) {\r\n            var stroke_1 = this.strokeModifier.modify(this.stroke);\r\n            if (stroke_1 && stroke_1.element) {\r\n                this.paper.appendDef(stroke_1.element);\r\n            }\r\n        }\r\n        if (this._clipPath) {\r\n            this.paper.appendDef(this._clipPath);\r\n        }\r\n        if (this._exportable === false) {\r\n            this.exportable = false;\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"map\", {\r\n        /**\r\n         * Returns a [[Dictionary]] which maps object ids with their respective\r\n         * objects.\r\n         *\r\n         * Can be used to retrieve any object by id, e.g.:\r\n         *\r\n         * ```TypeScript\r\n         * console.log(mySprite.map.getKey(\"myid\"));\r\n         * ```\r\n         * ```JavaScript\r\n         * console.log(mySprite.map.getKey(\"myid\"));\r\n         * ```\r\n         *\r\n         * @return Map collection\r\n         */\r\n        get: function () {\r\n            var top = this.topParent;\r\n            if (top) {\r\n                return top.map;\r\n            }\r\n            else if (!this._map) {\r\n                this._map = new Dictionary();\r\n            }\r\n            return this._map;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"delayedMap\", {\r\n        /**\r\n         * @ignore\r\n         * @return Map collection\r\n         */\r\n        get: function () {\r\n            var top = this.topParent;\r\n            if (top) {\r\n                return top.delayedMap;\r\n            }\r\n            else if (!this._delayedMap) {\r\n                this._delayedMap = new Dictionary();\r\n            }\r\n            return this._delayedMap;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"id\", {\r\n        /**\r\n         * @return ID\r\n         */\r\n        get: function () {\r\n            return this._id;\r\n        },\r\n        /**\r\n         * Element's user-defined ID.\r\n         *\r\n         * Will throw an Error if there already is an object with the same ID.\r\n         *\r\n         * Please note that above check will be performed withing the scope of the\r\n         * current chart instance. It will not do checks across other chart instances\r\n         * or in globally in DOM.\r\n         *\r\n         * Make sure the IDs are unique.\r\n         *\r\n         * @param value ID\r\n         */\r\n        set: function (value) {\r\n            if (this._id != value) {\r\n                this._id = value;\r\n                if (this.map.hasKey(value)) {\r\n                    throw Error(\"Duplicate id (\" + value + \") used on multiple objects.\");\r\n                }\r\n                else {\r\n                    this.map.setKey(value, this);\r\n                }\r\n                if (options.autoSetClassName) {\r\n                    this.setClassName();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"dom\", {\r\n        /**\r\n         * ==========================================================================\r\n         * ELEMENT AND DOM TREE MANIPULATION AND MEASURING\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Returns DOM element reference associated with this element.\r\n         *\r\n         * @readonly\r\n         * @return DOM element\r\n         */\r\n        get: function () {\r\n            return this.group.node;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"paper\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Paper\r\n         */\r\n        get: function () {\r\n            if (this._paper) {\r\n                return this._paper;\r\n            }\r\n            else {\r\n                var parent_2 = this._parent;\r\n                if (parent_2) {\r\n                    return parent_2.paper;\r\n                }\r\n            }\r\n            return getGhostPaper();\r\n        },\r\n        /**\r\n         * A [[Paper]] instance to place elements on.\r\n         *\r\n         * If there's no Paper set for this element, it goes up the ascendant tree\r\n         * until it finds one.\r\n         *\r\n         * This method is used by important `addChild()` method, so it's essential\r\n         * to have a [[Paper]] instance.\r\n         *\r\n         * If this element has a separate `htmlContainer` set, it will have a\r\n         * [[Paper]] instance itself.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param paper  Paper\r\n         */\r\n        set: function (paper) {\r\n            this.setPaper(paper);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets [[Paper]] instance to use to draw elements.\r\n     * @ignore\r\n     * @param paper Paper\r\n     * @return true if paper was changed, false, if it's the same\r\n     */\r\n    Sprite.prototype.setPaper = function (paper) {\r\n        var oldPaper = this._paper;\r\n        if (oldPaper != paper) {\r\n            this._paper = paper;\r\n            this.appendDefs();\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"htmlContainer\", {\r\n        /**\r\n         * @return HTML element\r\n         */\r\n        get: function () {\r\n            if (this._htmlContainer) {\r\n                return this._htmlContainer;\r\n            }\r\n            else {\r\n                var parent_3 = this._parent;\r\n                if (parent_3) {\r\n                    return parent_3.htmlContainer;\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * An HTML element to be used when placing wrapper element (`<div>`)\r\n         * for the whole chart.\r\n         *\r\n         * This is the same for **all** elements within the same chart.\r\n         *\r\n         * @param htmlContainer HTML element\r\n         */\r\n        set: function (htmlContainer) {\r\n            this._htmlContainer = htmlContainer;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"titleElement\", {\r\n        /**\r\n         * Creates (if not yet created) and returns element's `<title>` element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return Title element\r\n         */\r\n        get: function () {\r\n            if (!this._titleElement) {\r\n                this._titleElement = this.paper.add(\"title\");\r\n                this.group.add(this._titleElement);\r\n            }\r\n            return this._titleElement;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"descriptionElement\", {\r\n        /**\r\n         * Creates (if not yet created) and returns element's `<desc>` element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return Desc element\r\n         */\r\n        get: function () {\r\n            if (!this._descriptionElement) {\r\n                this._descriptionElement = this.paper.add(\"desc\");\r\n                this.group.add(this._descriptionElement);\r\n            }\r\n            return this._descriptionElement;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"filters\", {\r\n        /**\r\n         * Returns list of SVG filters (effects) applied to element. If the filter\r\n         * list is not yet initilized, creates and returns an empty one.\r\n         * Note, not all filters combine well with one another. We recommend using one filter per sprite.\r\n         *\r\n         * @return List of filters\r\n         */\r\n        get: function () {\r\n            if (!this._filters) {\r\n                this._filters = new List();\r\n                // TODO only add certain events ?\r\n                this._disposers.push(this._filters.events.onAll(this.applyFilters, this));\r\n                this._disposers.push(new ListDisposer(this._filters));\r\n            }\r\n            return this._filters;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets required SVG attributes. Must be called every time an element is\r\n     * redrawn so that attributes are (re)applied.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.setSVGAttributes = function () {\r\n        this.fill = this.fill;\r\n        this.opacity = this.opacity;\r\n        this.fillOpacity = this.fillOpacity;\r\n        this.stroke = this.stroke;\r\n        this.strokeOpacity = this.strokeOpacity;\r\n        this.shapeRendering = this.shapeRendering;\r\n        this.strokeDasharray = this.strokeDasharray;\r\n        this.strokeDashoffset = this.strokeDashoffset;\r\n        this.strokeLinecap = this.strokeLinecap;\r\n        this.strokeLinejoin = this.strokeLinejoin;\r\n        this.focusable = this.focusable;\r\n        this.tabindex = this.tabindex;\r\n        this.role = this.role;\r\n    };\r\n    /**\r\n     * Sets an attribute directly on an SVG element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param attribute Attribute object\r\n     */\r\n    Sprite.prototype.setSVGAttribute = function (attribute) {\r\n        this.group.attr(attribute);\r\n    };\r\n    /**\r\n     * Removes an attribute directly from SVG element.\r\n     *\r\n     * @param attribute Attribute key to remove\r\n     */\r\n    Sprite.prototype.removeSVGAttribute = function (attribute) {\r\n        this.group.removeAttr(attribute);\r\n    };\r\n    /**\r\n     * Sets `class` attribute of the elements SVG node.\r\n     *\r\n     * Uses `am4core.options.classNamePrefix`.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.setClassName = function () {\r\n        var className = this.className;\r\n        var classNamePrefix = options.classNamePrefix;\r\n        if (this.element) {\r\n            this.element.addClass(classNamePrefix + className);\r\n        }\r\n        this.group.addClass(classNamePrefix + className + \"-group\");\r\n        if ($type.hasValue(this.id)) {\r\n            this.group.addClass(classNamePrefix + this.id);\r\n        }\r\n        if (this.userClassName) {\r\n            this.group.addClass(this.userClassName);\r\n        }\r\n    };\r\n    /**\r\n     * Adds an `id` attribute the the element and returns the id.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Element's ID\r\n     */\r\n    Sprite.prototype.uidAttr = function () {\r\n        this.setSVGAttribute({ \"id\": this.uid });\r\n        return this.uid;\r\n    };\r\n    /**\r\n     * [updateClipPath description]\r\n     *\r\n     * @todo Description\r\n     */\r\n    Sprite.prototype.updateClipPath = function () {\r\n        var element = this._clipElement;\r\n        if (element) {\r\n            element.moveTo({ x: this.mask.pixelX, y: this.mask.pixelY });\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Sprite.prototype.createClipPath = function () {\r\n        if (!this._clipPath) {\r\n            this._clipPath = this.paper.addGroup(\"clipPath\");\r\n            this.paper.appendDef(this._clipPath);\r\n            this._disposers.push(this._clipPath);\r\n            var id = registry.getUniqueId();\r\n            this._clipPath.attr({ \"id\": id });\r\n            this.group.attr({ \"clip-path\": \"url(\\\"\" + $utils.getBaseURI() + id + \"\\\")\" });\r\n        }\r\n    };\r\n    /**\r\n     * Applies the mask Sprite.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.applyMask = function () {\r\n        var mask = this.mask;\r\n        if (this._clipPath && mask) {\r\n            // Container\r\n            if (mask instanceof Container) {\r\n                this._clipElement.attr({ \"width\": $math.max(0, mask.pixelWidth), \"height\": $math.max(0, mask.pixelHeight) });\r\n                var point = $utils.spritePointToSprite({ x: mask.pixelX, y: mask.pixelY }, mask.parent, this);\r\n                this._clipPath.x = point.x;\r\n                this._clipPath.y = point.y;\r\n            }\r\n            // Sprite\r\n            else {\r\n                if (mask.element && mask.element != this._clipElement) {\r\n                    this._clipElement = mask.element;\r\n                    this._clipPath.add(this._clipElement);\r\n                }\r\n                this._clipPath.scale = mask.scale;\r\n                this._clipPath.x = mask.pixelX;\r\n                this._clipPath.y = mask.pixelY;\r\n                this._clipPath.rotation = mask.rotation;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Applies filters to the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.applyFilters = function () {\r\n        var _this = this;\r\n        // we create a separate filter for each sprite as otherwise it would be impossible to animate filter.\r\n        // svg doesn't support multiple filters applied to one element, so we put all the primitives to one filterElement of a sprite.\r\n        if (this._filters && this._filters.length > 0) {\r\n            var width_1 = 100;\r\n            var height_1 = 100;\r\n            if (!this.filterElement) {\r\n                this.filterElement = this.paper.addGroup(\"filter\");\r\n                this._disposers.push(this.filterElement);\r\n            }\r\n            else {\r\n                this.filterElement.removeChildNodes();\r\n            }\r\n            this.paper.appendDef(this.filterElement);\r\n            var id = \"filter-\" + this.uid;\r\n            this.filterElement.attr({ \"id\": id });\r\n            $iter.each(this.filters.iterator(), function (filter) {\r\n                filter.sprite = _this;\r\n                filter.paper = _this.paper;\r\n                _this.filterElement.attr({ filterUnits: filter.filterUnits });\r\n                filter.appendPrimitives(_this.filterElement);\r\n                if (filter.width > width_1) {\r\n                    width_1 = filter.width;\r\n                }\r\n                if (filter.height > height_1) {\r\n                    height_1 = filter.height;\r\n                }\r\n                filter.scale = _this.globalScale;\r\n            });\r\n            var w = width_1 + \"%\";\r\n            var h = height_1 + \"%\";\r\n            /* temporarily removed as it is breaking tooltips on Safari @todo come back to this\r\n            if (this._measuredHeight <= 1) {\r\n                h = height + \"\";\r\n            }\r\n\r\n            if (this._measuredWidth <= 1) {\r\n                h = width + \"\";\r\n            }*/\r\n            this.filterElement.attr({ \"width\": w, \"height\": h, \"x\": -(width_1 - 100) / 2 + \"%\", \"y\": -(height_1 - 100) / 2 + \"%\" });\r\n            this.group.attr({ \"filter\": \"url(\\\"\" + $utils.getBaseURI() + id + \"\\\")\" });\r\n        }\r\n        else if (this.filterElement) {\r\n            this.group.removeAttr(\"filter\");\r\n            this.filterElement.removeChildNodes();\r\n        }\r\n    };\r\n    /**\r\n     * [removeClipPath description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    Sprite.prototype.removeClipPath = function () {\r\n        if (this._clipPath) {\r\n            //this._clipPath.dispose();\r\n            this.removeDispose(this._clipPath);\r\n            this._clipPath = undefined;\r\n        }\r\n    };\r\n    /**\r\n     * [setElement description]\r\n     *\r\n     * @ignore\r\n     * @todo Description\r\n     * @param element [description]\r\n     */\r\n    Sprite.prototype.setElement = function (element) {\r\n        this.element = element;\r\n        this.setSVGAttributes();\r\n        this.applyAccessibility();\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"element\", {\r\n        /**\r\n         * @return Element\r\n         */\r\n        get: function () {\r\n            return this._element;\r\n        },\r\n        /**\r\n         * The main element for this Sprite, usually an SVG `<g>`.\r\n         *\r\n         * All other sub-elements are created in it.\r\n         *\r\n         * @param element  Element\r\n         */\r\n        set: function (element) {\r\n            // Destroy previous element if there was one before\r\n            this.removeElement();\r\n            // Set new element\r\n            this._element = element;\r\n            // Add element to group\r\n            // Since we are adding Element to group, which is already in the\r\n            // `.disposers` it will be removed automatically when Sprite is disposed\r\n            // of\r\n            this.group.add(element);\r\n            if (element.node instanceof SVGPathElement) {\r\n                this._isPath = true;\r\n            }\r\n            // This is needed if someone is setting element not in draw method but\r\n            // from outside\r\n            if (!this.invalid) {\r\n                this.validate();\r\n            }\r\n            if (options.autoSetClassName) {\r\n                this.setClassName();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"svgContainer\", {\r\n        /**\r\n         * HTML container (`<div>`) which is used to place chart's `<svg>` element\r\n         * in.\r\n         *\r\n         * @return Container for chart elements\r\n         */\r\n        get: function () {\r\n            if (this._svgContainer) {\r\n                return this._svgContainer;\r\n            }\r\n            else if (this._parent) {\r\n                return this._parent.svgContainer;\r\n            }\r\n        },\r\n        /**\r\n         * Sets HTML container to add SVG and other chart elements to.\r\n         *\r\n         * @param svgContainer Container for chart elements\r\n         */\r\n        set: function (svgContainer) {\r\n            this._svgContainer = svgContainer;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Measures main element.\r\n     *\r\n     * Saves measurements into private `_bbox` property.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.measureElement = function () {\r\n        if (this.element) {\r\n            if (this.definedBBox) {\r\n                this._bbox = this.definedBBox;\r\n            }\r\n            else {\r\n                var svgBBox = this.element.getBBox();\r\n                this._bbox = { x: svgBBox.x, y: svgBBox.y, width: svgBBox.width, height: svgBBox.height };\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Positions element according its center settings.\r\n     *\r\n     * @todo Description (review)\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.updateCenter = function () {\r\n        if (this.element) {\r\n            var prevElementTransform = this.element.transformString;\r\n            var bbox = this.bbox;\r\n            var ex = 0;\r\n            var ey = 0;\r\n            var elementX = bbox.x;\r\n            var elementY = bbox.y;\r\n            var elementWidth = bbox.width;\r\n            var elementHeigth = bbox.height;\r\n            var pixelPaddingLeft = this.pixelPaddingLeft;\r\n            var pixelPaddingRight = this.pixelPaddingRight;\r\n            var pixelPaddingTop = this.pixelPaddingTop;\r\n            var pixelPaddingBottom = this.pixelPaddingBottom;\r\n            // add padding to the measured size\r\n            var measuredWidth = $math.max(elementWidth + pixelPaddingLeft + pixelPaddingRight, this.pixelWidth);\r\n            var measuredHeight = $math.max(elementHeigth + pixelPaddingTop + pixelPaddingBottom, this.pixelHeight);\r\n            // extremes\r\n            var left = bbox.x;\r\n            var right = bbox.x + measuredWidth;\r\n            var top_1 = bbox.y;\r\n            var bottom = bbox.y + measuredHeight;\r\n            var horizontalCenter = this.horizontalCenter;\r\n            var verticalCenter = this.verticalCenter;\r\n            switch (horizontalCenter) {\r\n                case \"none\":\r\n                    ex = elementX + pixelPaddingLeft;\r\n                    break;\r\n                case \"left\":\r\n                    ex = pixelPaddingLeft;\r\n                    break;\r\n                case \"middle\":\r\n                    ex = pixelPaddingLeft - (elementWidth + pixelPaddingRight + pixelPaddingLeft) / 2;\r\n                    break;\r\n                case \"right\":\r\n                    ex = -pixelPaddingRight - elementWidth;\r\n                    break;\r\n            }\r\n            switch (verticalCenter) {\r\n                case \"none\":\r\n                    ey = elementY + pixelPaddingTop;\r\n                    break;\r\n                case \"top\":\r\n                    ey = pixelPaddingTop;\r\n                    break;\r\n                case \"middle\":\r\n                    ey = pixelPaddingTop - (elementHeigth + pixelPaddingBottom + pixelPaddingTop) / 2;\r\n                    break;\r\n                case \"bottom\":\r\n                    ey = -pixelPaddingBottom - elementHeigth;\r\n                    break;\r\n            }\r\n            this._measuredHeight = measuredHeight;\r\n            this._measuredWidth = measuredWidth;\r\n            var x = $math.round(ex - elementX, this._positionPrecision, true);\r\n            var y = $math.round(ey - elementY, this._positionPrecision, true);\r\n            this.ex = x - pixelPaddingLeft;\r\n            this.ey = y - pixelPaddingTop;\r\n            this.maxLeft = left + x - pixelPaddingLeft;\r\n            this.maxRight = right + x - pixelPaddingLeft;\r\n            this.maxTop = top_1 + y - pixelPaddingTop;\r\n            this.maxBottom = bottom + y - pixelPaddingTop;\r\n            if (this.pixelPerfect && options.pixelPerfectPrecision == 0) {\r\n                x -= 0.5;\r\n                y -= 0.5;\r\n            }\r\n            this.element.moveTo({ x: x, y: y });\r\n            if (prevElementTransform != this.element.transformString) {\r\n                this.dispatchImmediately(\"transformed\");\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Measures the whole element.\r\n     *\r\n     * Returns `true` if the size has changed from the last measurement.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Did the size changed from the last measurement?\r\n     */\r\n    Sprite.prototype.measure = function () {\r\n        this.updateCenter();\r\n        var measuredWidth = this._measuredWidth;\r\n        var measuredHeight = this._measuredHeight;\r\n        // extremes\r\n        var left = this.maxLeft;\r\n        var right = this.maxRight;\r\n        var top = this.maxTop;\r\n        var bottom = this.maxBottom;\r\n        // non-parent wise size\r\n        this._measuredWidthSelf = measuredWidth;\r\n        this._measuredHeightSelf = measuredHeight;\r\n        var positionPrecision = this._positionPrecision;\r\n        this.maxLeftSelf = this.maxLeft;\r\n        this.maxRightSelf = this.maxRight;\r\n        this.maxTopSelf = this.maxTop;\r\n        this.maxBottomSelf = this.maxBottom;\r\n        // if a sprite is rotated or scaled, calculate measured size after transformations\r\n        if (this.rotation !== 0 || this.scale !== 1 || this.nonScaling) {\r\n            // not good to handleGlobalScale here.\r\n            if (this.nonScalingStroke) {\r\n                this.strokeWidth = this.strokeWidth;\r\n            }\r\n            var svg = this.paper.svg;\r\n            var matrix = svg.createSVGMatrix();\r\n            var rotation = this.rotation;\r\n            var scale = this.scale;\r\n            if (this.nonScaling) {\r\n                scale = this.scale / this.globalScale;\r\n            }\r\n            matrix.a = $math.cos(rotation) * scale;\r\n            matrix.c = -$math.sin(rotation) * scale;\r\n            matrix.e = 0;\r\n            matrix.b = $math.sin(rotation) * scale;\r\n            matrix.d = $math.cos(rotation) * scale;\r\n            matrix.f = 0;\r\n            var p1 = svg.createSVGPoint();\r\n            p1.x = left;\r\n            p1.y = top;\r\n            var p2 = svg.createSVGPoint();\r\n            p2.x = right;\r\n            p2.y = top;\r\n            var p3 = svg.createSVGPoint();\r\n            p3.x = right;\r\n            p3.y = bottom;\r\n            var p4 = svg.createSVGPoint();\r\n            p4.x = left;\r\n            p4.y = bottom;\r\n            var pt1 = p1.matrixTransform(matrix);\r\n            var pt2 = p2.matrixTransform(matrix);\r\n            var pt3 = p3.matrixTransform(matrix);\r\n            var pt4 = p4.matrixTransform(matrix);\r\n            left = Math.min(pt1.x, pt2.x, pt3.x, pt4.x);\r\n            right = Math.max(pt1.x, pt2.x, pt3.x, pt4.x);\r\n            top = Math.min(pt1.y, pt2.y, pt3.y, pt4.y);\r\n            bottom = Math.max(pt1.y, pt2.y, pt3.y, pt4.y);\r\n            measuredWidth = right - left;\r\n            measuredHeight = bottom - top;\r\n            this.maxLeft = $math.round(left, positionPrecision, true);\r\n            this.maxRight = $math.round(right, positionPrecision, true);\r\n            this.maxTop = $math.round(top, positionPrecision, true);\r\n            this.maxBottom = $math.round(bottom, positionPrecision, true);\r\n        }\r\n        this._measuredWidth = $math.round(measuredWidth, positionPrecision, true);\r\n        this._measuredHeight = $math.round(measuredHeight, positionPrecision, true);\r\n        // dispatch event\r\n        if (this._measuredWidth != this._prevMeasuredWidth || this._measuredHeight != this._prevMeasuredHeight) {\r\n            this._prevMeasuredHeight = this._measuredHeight;\r\n            this._prevMeasuredWidth = this._measuredWidth;\r\n            // TODO clear existing sizechanged dispatches ?\r\n            this.dispatch(\"sizechanged\");\r\n            if ((this.isHover || this.showTooltipOn == \"hit\" || this.showTooltipOn == \"always\") && this.tooltip && this.tooltip.visible && ($type.hasValue(this.tooltipText) || $type.hasValue(this.tooltipHTML))) {\r\n                this.updateTooltipPosition();\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Insert this element before sibling element.\r\n     *\r\n     * @param sprite  Target element\r\n     * @return This element\r\n     */\r\n    Sprite.prototype.insertBefore = function (sprite) {\r\n        var parent = this._parent;\r\n        if (parent) {\r\n            var index = parent.children.indexOf(sprite);\r\n            if (index !== -1) {\r\n                parent.children.moveValue(this, index);\r\n                parent.sortChildren();\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Insert this element after sibling element.\r\n     *\r\n     * @param sprite  Target element\r\n     * @return This element\r\n     */\r\n    Sprite.prototype.insertAfter = function (sprite) {\r\n        var parent = this._parent;\r\n        if (parent) {\r\n            var index = parent.children.indexOf(sprite);\r\n            if (index !== -1) {\r\n                parent.children.moveValue(this, index + 1);\r\n                parent.sortChildren();\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Removes the main SVG element.\r\n     *\r\n     * This does not destroy the whole Sprite element. To do that use\r\n     * `dispose()` instead.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.removeElement = function () {\r\n        // remove visual element\r\n        if (this._element) {\r\n            this.removeDispose(this._element);\r\n            this._element = undefined;\r\n        }\r\n    };\r\n    /**\r\n     * Returns relative (percent) value of the X coordindate within this element.\r\n     *\r\n     * A relative value is a hundredth of a percent. So 100% would result in a 1\r\n     * as relative value.\r\n     *\r\n     * @param value  Absolute or relative X coordinate\r\n     * @return Relative value\r\n     */\r\n    Sprite.prototype.getRelativeX = function (value) {\r\n        if (value instanceof Percent) {\r\n            return value.value;\r\n        }\r\n        else if (this._parent) {\r\n            return value / this._parent.innerWidth;\r\n        }\r\n        return 0;\r\n    };\r\n    /**\r\n     * Returns relative (percent) value of the Y coordindate within this element.\r\n     *\r\n     * A relative value is a hundredth of a percent. So 100% would result in a 1\r\n     * as relative value.\r\n     *\r\n     * @param value  Absolute or relative Y coordinate\r\n     * @return Relative value\r\n     */\r\n    Sprite.prototype.getRelativeY = function (value) {\r\n        if (value instanceof Percent) {\r\n            return value.value;\r\n        }\r\n        else if (this._parent) {\r\n            return value / this._parent.innerHeight;\r\n        }\r\n        return 0;\r\n    };\r\n    /**\r\n     * Returns an X coordinate in pixel within the element.\r\n     *\r\n     * If number is passed in as parameter, the same number will be returned\r\n     * back.\r\n     *\r\n     * If [[Percent]] is passed in, it will be recalculated to pixels.\r\n     *\r\n     * @param value  Absolute or relative X coordinate\r\n     * @return X coordinate in pixels\r\n     */\r\n    Sprite.prototype.getPixelX = function (value) {\r\n        // we don't use $utils.valueToRelative as this would mean that we should access parent.innerWidth\r\n        // all the time and this would result chain of the same actions and will slow down the system a lot\r\n        var pixel = 0;\r\n        if ($type.isNumber(value)) {\r\n            pixel = value;\r\n        }\r\n        else if (value instanceof Percent) {\r\n            var relative = value.value;\r\n            if (this._parent) {\r\n                pixel = $math.round(this._parent.innerWidth * relative, this._positionPrecision, true);\r\n            }\r\n        }\r\n        return pixel;\r\n    };\r\n    /**\r\n     * Returns an Y coordinate in pixel within the element.\r\n     *\r\n     * If number is passed in as parameter, the same number will be returned\r\n     * back.\r\n     *\r\n     * If [[Percent]] is passed in, it will be recalculated to pixels.\r\n     *\r\n     * @param value  Absolute or relative Y coordinate\r\n     * @return Y coordinate in pixels\r\n     */\r\n    Sprite.prototype.getPixelY = function (value) {\r\n        // we don't use $utils.valueToRelative as this would mean that we should access parent.innerWidth\r\n        // all the time and this would result chain of the same actions and will slow down the system a lot\r\n        var pixel = 0;\r\n        if ($type.isNumber(value)) {\r\n            pixel = value;\r\n        }\r\n        else if (value instanceof Percent) {\r\n            var relative = value.value;\r\n            if (this._parent) {\r\n                pixel = $math.round(this._parent.innerHeight * relative, this._positionPrecision, true);\r\n            }\r\n        }\r\n        return pixel;\r\n    };\r\n    /**\r\n     * Moves the element to a specified coordinates.\r\n     *\r\n     * Using this method is preferred method of moving element, as it saves some\r\n     * CPU processing power over setting `x` and `y` properties separately.\r\n     *\r\n     * The method respects element's center settings. The element will be\r\n     * positioned so that `point` coordinates come in whatever \"center\" of the\r\n     * element is, as set in `horizontalCenter` and `verticalCenter`.\r\n     *\r\n     * Besides moving the element, you can also at the same time scale and\r\n     * rotate the element.\r\n     *\r\n     * @param point     New coordinates\r\n     * @param rotation  New rotation\r\n     * @param scale     New Scale\r\n     */\r\n    Sprite.prototype.moveTo = function (point, rotation, scale, isDragged) {\r\n        if (this.isDragged && !isDragged) {\r\n            return;\r\n        }\r\n        if (point) {\r\n            if ($type.isNumber(point.x)) {\r\n                this.setPropertyValue(\"x\", $math.round(point.x, this._positionPrecision, true));\r\n            }\r\n            if ($type.isNumber(point.y)) {\r\n                this.setPropertyValue(\"y\", $math.round(point.y, this._positionPrecision, true));\r\n            }\r\n        }\r\n        if ($type.isNumber(rotation)) {\r\n            this.rotation = rotation;\r\n        }\r\n        if ($type.isNumber(scale)) {\r\n            this.scale = scale;\r\n        }\r\n        // must leave this\r\n        this.invalidatePosition();\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"mask\", {\r\n        /**\r\n         * Returns [[Sprite]] element currently used as mask for this element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return A [[Sprite]] to use as mask\r\n         */\r\n        get: function () {\r\n            if (!this._adapterO) {\r\n                return this._mask.get();\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"mask\", this._mask.get());\r\n            }\r\n        },\r\n        /**\r\n         * Sets another [[Sprite]] element as this elements mask.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param mask A [[Sprite]] to use as mask\r\n         */\r\n        set: function (mask) {\r\n            var _this = this;\r\n            if (this._mask.get() !== mask) {\r\n                // this is good\r\n                if (mask) {\r\n                    this.createClipPath();\r\n                    if (!(mask instanceof Container)) {\r\n                        mask.isMeasured = false;\r\n                        if (mask.element) {\r\n                            this._clipElement = mask.element;\r\n                        }\r\n                    }\r\n                    else {\r\n                        this._clipElement = this.paper.add(\"rect\");\r\n                    }\r\n                    if (this._clipElement) {\r\n                        this._clipPath.add(this._clipElement);\r\n                    }\r\n                    this._mask.set(mask, new MultiDisposer([\r\n                        //mask.addEventListener(SpriteEvent.TRANSFORMED, this.applyMask, false, this);\r\n                        mask.events.on(\"maxsizechanged\", function () { if (_this.inited) {\r\n                            _this.applyMask();\r\n                        } }, undefined, false),\r\n                        mask.events.on(\"validated\", this.applyMask, this, false),\r\n                        mask.events.on(\"positionchanged\", this.applyMask, this, false)\r\n                    ]));\r\n                    this.applyMask();\r\n                }\r\n                else {\r\n                    this._mask.reset();\r\n                    this.group.removeAttr(\"clip-path\");\r\n                    this.removeClipPath();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"maskRectangle\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Mask Rectangle\r\n         */\r\n        get: function () {\r\n            return this._maskRectangle;\r\n        },\r\n        // you can set IRectangle as a mask instead o a sprite. Note, the changes of the object won't be monitored\r\n        /**\r\n         * Instead of creating a [[Sprite]] for mask, you can just use a\r\n         * [[Rectangle]] by setting this accessor.\r\n         *\r\n         * Please note that the element will not monitor any changes to the mask\r\n         * rectangle.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param rect Mask Rectangle\r\n         */\r\n        set: function (rect) {\r\n            if (rect) {\r\n                this.createClipPath();\r\n                if (!this._clipElement) {\r\n                    this._clipElement = this.paper.add(\"rect\");\r\n                    this._clipPath.add(this._clipElement);\r\n                }\r\n                this._clipElement.attr({ \"width\": rect.width, \"height\": rect.height });\r\n            }\r\n            else {\r\n                this.removeClipPath();\r\n                this._clipElement = undefined;\r\n            }\r\n            this._maskRectangle = rect;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"isMeasured\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Was element already measured?\r\n         */\r\n        get: function () {\r\n            return this._isMeasured;\r\n        },\r\n        /**\r\n         * Indicates if this element was already measured.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value Was element already measured?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (!value) {\r\n                this._measuredWidth = 0;\r\n                this._measuredHeight = 0;\r\n                //this._pixelHeight = 0;\r\n                //this._pixelWidth = 0;\r\n            }\r\n            if (this._isMeasured != value) {\r\n                this._isMeasured = value;\r\n                this.invalidatePosition();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Checks if the this element has any of its parts overlapping with another\r\n     * element.\r\n     *\r\n     * @todo Description (review)\r\n     * @param sprite  Second element to test again\r\n     * @return Overlapping?\r\n     */\r\n    Sprite.prototype.hitTest = function (sprite) {\r\n        // validate, otherwise we will not know measuredWidth and measuredHeight\r\n        if (this.invalid) {\r\n            this.validate();\r\n        }\r\n        if (sprite.invalid) {\r\n            sprite.validate();\r\n        }\r\n        var ax1 = this.pixelX + this.maxLeft;\r\n        var ay1 = this.pixelY + this.maxTop;\r\n        var ax2 = ax1 + this.maxRight;\r\n        var ay2 = ay1 + this.maxBottom;\r\n        var bx1 = sprite.pixelX + sprite.maxLeft;\r\n        var by1 = sprite.pixelY + sprite.maxTop;\r\n        var bx2 = bx1 + sprite.maxRight;\r\n        var by2 = by1 + sprite.maxBottom;\r\n        return !(bx1 > ax2 || bx2 < ax1 || by1 > ay2 || by2 < ay1);\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"inited\", {\r\n        /**\r\n         * ==========================================================================\r\n         * STATE-RELATED\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Returns `true` if Sprite has already finished initializing.\r\n         *\r\n         * @return Initialized?\r\n         */\r\n        get: function () {\r\n            return this._inited;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns `true` if Sprite has already finished initializing and is ready.\r\n     *\r\n     * If this object is a [[Container]] it will wait for all of its children\r\n     * are ready before becoming ready itself and firing a `\"ready\"` event.\r\n     *\r\n     * @return is ready?\r\n     */\r\n    Sprite.prototype.isReady = function () {\r\n        return this._ready;\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"states\", {\r\n        /**\r\n         * Returns a collection of element's available [[SpriteState]] entries.\r\n         *\r\n         * @see {@link SpriteState}\r\n         * @return States\r\n         */\r\n        get: function () {\r\n            if (!this._states) {\r\n                var state = new SpriteState();\r\n                // works\r\n                this._states = new DictionaryTemplate(state);\r\n                // TODO what about removeKey ?\r\n                this._disposers.push(this._states.events.on(\"insertKey\", this.processState, this, false));\r\n                this._disposers.push(this._states.events.on(\"setKey\", this.processState, this, false));\r\n                this._disposers.push(new DictionaryDisposer(this._states));\r\n                this._disposers.push(state);\r\n            }\r\n            return this._states;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"hiddenState\", {\r\n        /**\r\n         * Returns a [[SpriteState]] object for \"hidden\" state.\r\n         *\r\n         * This is a shortcut to `this.states.getKey(\"hidden\")`.\r\n         *\r\n         * @return Hidden state\r\n         */\r\n        get: function () {\r\n            if (!this.states.getKey(\"hidden\")) {\r\n                var hiddenState = this.states.create(\"hidden\");\r\n                hiddenState.properties.opacity = 0;\r\n                hiddenState.properties.visible = false;\r\n            }\r\n            return this.states.getKey(\"hidden\");\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"defaultState\", {\r\n        /**\r\n         * Returns a [[SpriteState]] object for \"default\" state.\r\n         *\r\n         * This is a shortcut to `this.states.getKey(\"default\")`.\r\n         *\r\n         * @return Hidden state\r\n         */\r\n        get: function () {\r\n            if (!this.states.getKey(\"default\")) {\r\n                var defaultState = this.states.create(\"default\");\r\n                defaultState.properties.opacity = 1;\r\n            }\r\n            return this.states.getKey(\"default\");\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Checks if some key states are defined and updates Sprite properties\r\n     * accordingly.\r\n     *\r\n     * For example if there's a state \"down\" defined for Sprite, we automatically\r\n     * make it \"clickable\".\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event An event which caused state list update\r\n     */\r\n    Sprite.prototype.processState = function (event) {\r\n        var state = event.newValue;\r\n        state.sprite = this;\r\n        state.name = event.key;\r\n        if (this.states.hasKey(\"hover\") || (this.showTooltipOn == \"hover\" && ($type.hasValue(this.tooltipHTML) || $type.hasValue(this.tooltipText)))) {\r\n            this.hoverable = true;\r\n        }\r\n        if (this.states.hasKey(\"down\") || (this.showTooltipOn == \"hover\" && ($type.hasValue(this.tooltipHTML) || $type.hasValue(this.tooltipText)))) {\r\n            this.clickable = true;\r\n        }\r\n        if (this.states.hasKey(\"focus\")) {\r\n            this.focusable = true;\r\n        }\r\n        // Propagate the new state to clones\r\n        if (this.applyOnClones) {\r\n            var clones = this.clones.values;\r\n            var length_1 = clones.length;\r\n            for (var i = 0; i < length_1; ++i) {\r\n                var clone = clones[i];\r\n                if (!clone.isDisposed()) {\r\n                    clone.states.setKey(state.name, state);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"animations\", {\r\n        /**\r\n         * Returns a list elements's animations currently being played.\r\n         *\r\n         * If the list has not been initialized it is created.\r\n         *\r\n         * @return List of animations\r\n         */\r\n        get: function () {\r\n            if (!this._animations) {\r\n                this._animations = [];\r\n                this._disposers.push(new AnimationDisposer(this._animations));\r\n            }\r\n            return this._animations;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts element's local coordinates to the coordinates within the main\r\n     * chart container.\r\n     *\r\n     * @param point  Local point\r\n     * @return Global point\r\n     */\r\n    Sprite.prototype.getSvgPoint = function (point) {\r\n        try {\r\n            // Calculate SVG point\r\n            var bbox = this.htmlContainer.getBoundingClientRect();\r\n            return {\r\n                \"x\": point.x - bbox.left,\r\n                \"y\": point.y - bbox.top\r\n            };\r\n        }\r\n        catch (e) {\r\n            return point;\r\n        }\r\n    };\r\n    /**\r\n     * Creates and starts an [[Animation]] with given `animationOptions`.\r\n     *\r\n     * @see {@link Animation} for additional information about available options\r\n     * @param animationOptions  Animation options\r\n     * @param duration          Duration in milliseconds\r\n     * @param easing            Easing function\r\n     * @return Animation instance\r\n     */\r\n    Sprite.prototype.animate = function (animationOptions, duration, easing) {\r\n        return new Animation(this, animationOptions, duration, easing).start();\r\n    };\r\n    /**\r\n     * Applies a [[SpriteState]] on this element.\r\n     *\r\n     * The first parameter can either be a name state or a [[SpriteState]]\r\n     * instance.\r\n     *\r\n     * When run, this method will apply SVG properties defined in a\r\n     * [[SpriteState]], but only those that are relevant to this particular\r\n     * element, i.e. are in the `properties` array.\r\n     *\r\n     * @see {@link SpriteState}\r\n     * @param value               A state - name key or instance\r\n     * @param transitionDuration  Duration of the transition between current and new state\r\n     * @param easing              An easing function\r\n     */\r\n    Sprite.prototype.setState = function (value, transitionDuration, easing) {\r\n        var state;\r\n        if (value instanceof SpriteState) {\r\n            this.states.setKey(value.name, value);\r\n            state = value;\r\n        }\r\n        else {\r\n            state = this.states.getKey(value);\r\n            if (!state) {\r\n                return;\r\n            }\r\n        }\r\n        // stop previous transition\r\n        // not good - foe expample, we are animating to some \"active\" state and in them middle \"hover\" state happens. then \"active\" stat won't be applied\r\n        //if (this._transition) {\r\n        //this._transition.stop();\r\n        //}\r\n        if (state.name == \"hover\") {\r\n            if (this.isHidden) {\r\n                return;\r\n            }\r\n            this.isHover = true;\r\n        }\r\n        if (state.name == \"hidden\") {\r\n            this.isHiding = true;\r\n        }\r\n        else {\r\n            if (!this.visible) {\r\n                this.setVisibility(state.properties.visible || this.defaultState.properties.visible);\r\n            }\r\n        }\r\n        if (state.name == \"active\") {\r\n            this.isActive = true;\r\n        }\r\n        // we do not set isActive = false here if it's not active, but container does that if setStateOnChildren = true\r\n        if (!$type.isNumber(transitionDuration)) {\r\n            transitionDuration = state.transitionDuration;\r\n        }\r\n        if (!$type.hasValue(easing)) {\r\n            easing = state.transitionEasing;\r\n        }\r\n        return this.transitTo(state, transitionDuration, easing);\r\n    };\r\n    /**\r\n     * Applies proper state based on the condition of the element. A condition is\r\n     * deducted in this order:\r\n     * * \"hover\" if Sprite has currently any pointers over it\r\n     * * \"down\" if Sprite has any pointers (touch or mouse) currently pressed over it\r\n     * * \"focus\" if Sprite has currently got focus (accessibility)\r\n     * * \"hidden\" if Sprite is currently hidden\r\n     *\r\n     * Returns an [[Animation]] object, which is handling gradual transition from\r\n     * current values of properties, to the new target state(s).\r\n     *\r\n     * @param duration  Duration for the animation (ms)\r\n     * @return [[Animation]] object which is handling the transition\r\n     */\r\n    Sprite.prototype.applyCurrentState = function (duration) {\r\n        //if (!this.isHidden) { // this was done for hover state not to take effect if \"hidden\" is actually visible, need to think about it.\r\n        var animation = this.setState(this.defaultState, duration);\r\n        if (this.isHover) {\r\n            animation = this.setState(\"hover\", duration);\r\n        }\r\n        if (this.isDown && this.interactions.downPointers.length) {\r\n            animation = this.setState(\"down\", duration);\r\n        }\r\n        this.isFocused = this.isFocused;\r\n        if (this.isActive) {\r\n            animation = this.setState(\"active\", duration);\r\n            if (this.isHover && this.states.hasKey(\"hoverActive\")) {\r\n                animation = this.setState(\"hoverActive\", duration);\r\n            }\r\n        }\r\n        return animation;\r\n        //}\r\n    };\r\n    /**\r\n     * Starts an [[Animation]] of the properties to specific values as they are\r\n     * set in `state`.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param state     Target State\r\n     * @param duration  Duration in milliseconds\r\n     * @param easing    Easing function\r\n     * @return Transition Animation\r\n     */\r\n    Sprite.prototype.transitTo = function (state, duration, easing) {\r\n        var _this = this;\r\n        // Init\r\n        var options = [], propValues = state.allValues, transition;\r\n        // todo: do this for numeric/color properties only?\r\n        // @todo use state.getPropertyValue instead\r\n        $object.each(propValues, function (propertyName, finalValue) {\r\n            var currentValue = _this[propertyName];\r\n            // save current value to default state. this solves a big problem where values must be set both on sprite and default state\r\n            if (finalValue != currentValue && _this.defaultState.properties[propertyName] == undefined) {\r\n                _this.defaultState.properties[propertyName] = currentValue;\r\n            }\r\n            //if (finalValue != currentValue && $type.hasValue(finalValue)) {\r\n            if (finalValue != \"__unset\") {\r\n                var option = { from: currentValue, to: finalValue, property: propertyName };\r\n                options.push(option);\r\n            }\r\n        });\r\n        if (options.length > 0) {\r\n            transition = this.animate(options, duration, easing);\r\n            if (transition && !transition.isFinished()) {\r\n                // TODO should this use events.once ?\r\n                // TODO push onto _disposers array ?\r\n                this._disposers.push(transition.events.on(\"animationended\", function () {\r\n                    _this.dispatchImmediately(\"transitionended\");\r\n                }));\r\n            }\r\n            else {\r\n                this.dispatchImmediately(\"transitionended\");\r\n            }\r\n        }\r\n        // apply filters if set\r\n        if (state.filters.length > 0) {\r\n            var newFilters_1 = [];\r\n            // check for the same filters\r\n            $iter.each(state.filters.iterator(), function (stateFilter) {\r\n                var newFilter = stateFilter.clone();\r\n                newFilters_1.push(newFilter);\r\n                var animationOptions = [];\r\n                $iter.each(_this.filters.iterator(), function (currentFilter) {\r\n                    // if we have the same filters\r\n                    if (currentFilter.className == newFilter.className) {\r\n                        if (!$iter.contains(_this.defaultState.filters.iterator(), function (x) { return x.className === newFilter.className; })) {\r\n                            _this.defaultState.filters.push(currentFilter);\r\n                        }\r\n                        $object.each(newFilter.properties, function (propertyName, newValue) {\r\n                            var currentValue = currentFilter.properties[propertyName];\r\n                            // if values are not the same, push to animation options array\r\n                            if (currentValue != newValue) {\r\n                                animationOptions.push({ property: propertyName, from: currentValue, to: newValue });\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n                // animate to new value\r\n                newFilter.animate(animationOptions, duration, easing);\r\n            });\r\n            this.filters.clear();\r\n            this.filters.pushAll(newFilters_1);\r\n        }\r\n        return transition;\r\n    };\r\n    /**\r\n     * Returns `true` if Sprite is currently transiting from one state/value to\r\n     * another.\r\n     *\r\n     * @return Is in transition?\r\n     */\r\n    Sprite.prototype.isInTransition = function () {\r\n        return this.animations.length > 0;\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"isHover\", {\r\n        /**\r\n         * @return Is hovered?\r\n         */\r\n        get: function () {\r\n            if (this.isInteractive()) {\r\n                return this.interactions.isHover;\r\n            }\r\n            return false;\r\n        },\r\n        /**\r\n         * Indicates if this element has a mouse pointer currently hovering\r\n         * over it, or if it has any touch pointers pressed on it.\r\n         *\r\n         * You can force element to be \"hovered\" manually, by setting this property\r\n         * to `true`.\r\n         *\r\n         * @param value Is hovered?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (value !== this.isHover) {\r\n                if (this.isInteractive()) {\r\n                    this.interactions.isHover = value;\r\n                    if (value) {\r\n                        this.handleOver();\r\n                    }\r\n                    else {\r\n                        this.interactions.isRealHover = false;\r\n                        this.handleOut();\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"isDragged\", {\r\n        /**\r\n         * Returns indicator if this element is being dragged at the moment.\r\n         *\r\n         * @return Is dragged?\r\n         */\r\n        get: function () {\r\n            return this._isDragged;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"isResized\", {\r\n        /**\r\n         * Returns indicator if this element is being resized at the moment.\r\n         *\r\n         * @return Is resized?\r\n         */\r\n        get: function () {\r\n            return this._isResized;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"isDown\", {\r\n        /**\r\n         * @return Is down?\r\n         */\r\n        get: function () {\r\n            if (this.isInteractive()) {\r\n                return this.interactions.isDown;\r\n            }\r\n            return false;\r\n        },\r\n        /**\r\n         * Indicates if this element has any pointers (mouse or touch) pressing down\r\n         * on it.\r\n         *\r\n         * @param value Is down?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (this.isInteractive() && this.isDown != value) {\r\n                this.interactions.isDown = value;\r\n                if (value) {\r\n                    this.handleDown();\r\n                }\r\n                else {\r\n                    this.handleUp();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"isFocused\", {\r\n        /**\r\n         * @return Is focused?\r\n         */\r\n        get: function () {\r\n            if (this.isInteractive()) {\r\n                return this.interactions.isFocused;\r\n            }\r\n            return false;\r\n        },\r\n        /**\r\n         * Indicates if this element is focused (possibly by tab navigation).\r\n         *\r\n         * @param value Is focused?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (this.focusable && this.isFocused != value) {\r\n                if (this.isInteractive()) {\r\n                    this.interactions.isFocused = value;\r\n                    if (value === true) {\r\n                        this.handleFocus();\r\n                    }\r\n                    else {\r\n                        this.handleBlur();\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"isActive\", {\r\n        /**\r\n         * @return Is active?\r\n         */\r\n        get: function () {\r\n            return this._isActive;\r\n        },\r\n        /**\r\n         * Indicates if this element is currently active (toggled on) or not\r\n         * (toggled off).\r\n         *\r\n         * @param value Is active?\r\n         */\r\n        set: function (value) {\r\n            this.setActive(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Sprite.prototype.setActive = function (value) {\r\n        value = $type.toBoolean(value);\r\n        if (this._isActive !== value) {\r\n            this._isActive = value;\r\n            if (value && this.states.hasKey(\"active\")) {\r\n                this.setState(\"active\");\r\n                if (this.isHover && this.states.hasKey(\"hoverActive\")) {\r\n                    this.setState(\"hoverActive\");\r\n                }\r\n            }\r\n            else {\r\n                this.applyCurrentState();\r\n            }\r\n            this.dispatchImmediately(\"toggled\");\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"disabled\", {\r\n        /**\r\n         * @return Disabled?\r\n         */\r\n        get: function () {\r\n            //if(this._internalDisabled){\r\n            //\treturn true;\r\n            //}\r\n            var current = this.getPropertyValue(\"disabled\");\r\n            if ($type.hasValue(current)) {\r\n                return current;\r\n            }\r\n            else {\r\n                if (this.virtualParent) {\r\n                    return this.virtualParent.disabled;\r\n                }\r\n                if (this._parent) {\r\n                    return this._parent.disabled;\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        /**\r\n         * Controls if element is disabled.\r\n         *\r\n         * A disabled element is hidden, and is removed from any processing, layout\r\n         * calculations, and generally treated as if it does not exist.\r\n         *\r\n         * The element itself is not destroyed, though. Setting this back to `false`,\r\n         * will \"resurrect\" the element.\r\n         *\r\n         * @param value  Disabled?\r\n         */\r\n        set: function (value) {\r\n            this.setDisabled(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Sprite.prototype.setDisabled = function (value) {\r\n        value = $type.toBoolean(value);\r\n        var current = this.getPropertyValue(\"disabled\");\r\n        if (current != value) {\r\n            this.setPropertyValue(\"disabled\", value, true);\r\n            if (value) {\r\n                this.parent = this._parent;\r\n                this.removeFromInvalids();\r\n                this.group.attr({ \"display\": \"none\" });\r\n                this.dispatch(\"disabled\");\r\n            }\r\n            else {\r\n                if (this._parent) {\r\n                    var group = this._parent.element;\r\n                    if (!group.hasChild(this.group)) {\r\n                        group.add(this.group);\r\n                    }\r\n                }\r\n                if (this instanceof Container) {\r\n                    this.deepInvalidate();\r\n                    if (this._background) {\r\n                        this._background.invalidate();\r\n                    }\r\n                }\r\n                else {\r\n                    this.invalidate();\r\n                }\r\n                if (!this.__disabled) {\r\n                    this.removeSVGAttribute(\"display\");\r\n                }\r\n                this.dispatch(\"enabled\");\r\n            }\r\n            this.dispatch(\"transformed\");\r\n            system.requestFrame();\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"__disabled\", {\r\n        /**\r\n         * @ignore\r\n         * @return Disabled?\r\n         */\r\n        get: function () {\r\n            return this._internalDisabled;\r\n        },\r\n        /**\r\n         * Internal disable method.\r\n         *\r\n         * Do not use it for disabling elements. Use `disabled` accessor instead.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value Disabled?\r\n         */\r\n        set: function (value) {\r\n            if (this._internalDisabled != value) {\r\n                this._internalDisabled = value;\r\n                this._updateDisabled = true;\r\n                this.invalidatePosition(); // better use this instead of invalidate()\r\n                if (!value) {\r\n                    this.invalidate();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"numberFormatter\", {\r\n        /**\r\n         * @return A [[NumberFormatter]] instance to be used\r\n         */\r\n        get: function () {\r\n            if (this._numberFormatter) {\r\n                return this._numberFormatter;\r\n            }\r\n            else if (this.virtualParent) {\r\n                return this.virtualParent.numberFormatter;\r\n            }\r\n            else if (this._parent) {\r\n                return this._parent.numberFormatter;\r\n            }\r\n            this._numberFormatter = new NumberFormatter();\r\n            this._numberFormatter.language = this.language;\r\n            return this.numberFormatter;\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * FORMATTERS AND OTHER EXTERNAL HELPERS\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * A [[NumberFormatter]] instance.\r\n         *\r\n         * This is used to format numbers.\r\n         *\r\n         * ```TypeScript\r\n         * chart.numberFormatter.numberFormat = \"#,###.#####\";\r\n         * ```\r\n         * ```JavaScript\r\n         * chart.numberFormatter.numberFormat = \"#,###.#####\";\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"numberFormatter\": {\r\n         *     \"numberFormat\": \"#,###.#####\"\r\n         *   }\r\n         * }\r\n         * ```\r\n         *\r\n         * You can set a separate instance of formatter for each\r\n         * individual element. However that would be unnecessary overhead as\r\n         * all elements would automatically inherit formatter from their parents,\r\n         * all the way up to the chart itself.\r\n         *\r\n         *\r\n         * @see {@link NumberFormatter} for more info on formatting numbers\r\n         * @param value  An instance of NumberFormatter\r\n         */\r\n        set: function (value) {\r\n            this._numberFormatter = value;\r\n            this._numberFormatter.language = this.language;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"dateFormatter\", {\r\n        /**\r\n         * @return An instance of DateFormatter\r\n         */\r\n        get: function () {\r\n            if (this._dateFormatter) {\r\n                return this._dateFormatter;\r\n            }\r\n            else if (this.virtualParent) {\r\n                return this.virtualParent.dateFormatter;\r\n            }\r\n            else if (this._parent) {\r\n                return this._parent.dateFormatter;\r\n            }\r\n            this._dateFormatter = new DateFormatter();\r\n            this._dateFormatter.language = this.language;\r\n            return this.dateFormatter;\r\n        },\r\n        /**\r\n         * A [[DateFormatter]] instance.\r\n         *\r\n         * This is used to format dates, e.g. on a date axes, balloons, etc.\r\n         *\r\n         * ```TypeScript\r\n         * chart.dateFormatter.dateFormat = \"yyyy-MM-dd\";\r\n         * ```\r\n         * ```JavaScript\r\n         * chart.dateFormatter.dateFormat = \"yyyy-MM-dd\";\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"dateFormatter\": {\r\n         *     \"dateFormat\": \"yyyy-MM-dd\"\r\n         *   }\r\n         * }\r\n         * ```\r\n         *\r\n         * You can set a separate instance of formatter for each\r\n         * individual element. However that would be unnecessary overhead as\r\n         * all elements would automatically inherit formatter from their parents,\r\n         * all the way up to the chart itself.\r\n         *\r\n         * @see {@link DateFormatter} for more info on dates formatting\r\n         * @param value  An instance of DateFormatter\r\n         */\r\n        set: function (value) {\r\n            this._dateFormatter = value;\r\n            this._dateFormatter.language = this.language;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"durationFormatter\", {\r\n        /**\r\n         * @return An instance of DurationFormatter\r\n         */\r\n        get: function () {\r\n            if (this._durationFormatter) {\r\n                return this._durationFormatter;\r\n            }\r\n            else if (this.virtualParent) {\r\n                return this.virtualParent.durationFormatter;\r\n            }\r\n            else if (this._parent) {\r\n                return this._parent.durationFormatter;\r\n            }\r\n            this._durationFormatter = new DurationFormatter();\r\n            this._durationFormatter.language = this.language;\r\n            return this.durationFormatter;\r\n        },\r\n        /**\r\n         * A [[DurationFormatter]] instance.\r\n         *\r\n         * This is used to format numbers as durations, e.g. on a value axes.\r\n         *\r\n         * You can set a separate instance of formatter for each\r\n         * individual element. However that would be unnecessary overhead as\r\n         * all elements would automatically inherit formatter from their parents,\r\n         * all the way up to the chart itself.\r\n         *\r\n         * @see {@link DurationFormatter} for more info on durations\r\n         * @param value  An instance of DurationFormatter\r\n         */\r\n        set: function (value) {\r\n            this._durationFormatter = value;\r\n            this._durationFormatter.language = this.language;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"language\", {\r\n        /**\r\n         * @return An instance of Language\r\n         */\r\n        get: function () {\r\n            var language = this._language.get();\r\n            if (language) {\r\n                return language;\r\n            }\r\n            else if (this.virtualParent) {\r\n                return this.virtualParent.language;\r\n            }\r\n            else if (this._parent) {\r\n                return this._parent.language;\r\n            }\r\n            language = new Language();\r\n            this.language = language;\r\n            return language;\r\n        },\r\n        /**\r\n         * A [[Language]] instance to use for translations.\r\n         *\r\n         * Normally it is enough to set language for the top-most element - chart.\r\n         *\r\n         * All other element child elements will automatically re-use that language\r\n         * object.\r\n         *\r\n         * @param value  An instance of Language\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            if (this._language.get() !== value) {\r\n                this._language.set(value, value.events.on(\"localechanged\", function (ev) {\r\n                    if (_this._numberFormatter) {\r\n                        _this._numberFormatter.language = _this.language;\r\n                    }\r\n                    if (_this._dateFormatter) {\r\n                        _this._dateFormatter.language = _this.language;\r\n                    }\r\n                    if (_this._durationFormatter) {\r\n                        _this._durationFormatter.language = _this.language;\r\n                    }\r\n                    if (_this._exporting.get()) {\r\n                        var exporting = _this._exporting.get();\r\n                        exporting.numberFormatter.language = _this.language;\r\n                        exporting.dateFormatter.language = _this.language;\r\n                        exporting.durationFormatter.language = _this.language;\r\n                        exporting.language = _this.language;\r\n                    }\r\n                    if (_this instanceof Container) {\r\n                        _this.deepInvalidate();\r\n                    }\r\n                }));\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * ==========================================================================\r\n     * DATA-RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Parses the string for meta tags `{tag}` and replaces them with a real\r\n     * value. Supports straight up tags referring to the field in data, i.e.\r\n     * `{value}` or tags with additional formatting info. E.g.:\r\n     *\r\n     * ```Text\r\n     * {myfield.formatDate(\"yyyy-MM-dd\")}\r\n     * {myfield.formatDate()}\r\n     * {myfield.formatNumber(\"#,####.00\")}\r\n     * {myfield.formatNumber()}\r\n     * {myField.formatDuration(\"mm:ss\")}\r\n     * ```\r\n     *\r\n     * Etc.\r\n     *\r\n     * This method Will automatically detect and use proper formatter for the\r\n     * value.\r\n     *\r\n     * The source value will be looked up in various places: (in order)\r\n     * * Sprite's own `dataItem`\r\n     * * Sprite's properties\r\n     * * Parent's `dataItem`\r\n     * * Parent's properties\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param string            A string to format\r\n     * @param dataItem          DataItem\r\n     * @return Formatted string\r\n     */\r\n    Sprite.prototype.populateString = function (string, dataItem) {\r\n        if ($type.hasValue(string)) {\r\n            string = $type.castString(string);\r\n            string = getTextFormatter().escape(string);\r\n            var tags = string.match(/\\{([^}]+)\\}/g);\r\n            var i = void 0;\r\n            if (tags) {\r\n                for (i = 0; i < tags.length; i++) {\r\n                    var tag = tags[i].replace(/\\{([^}]+)\\}/, \"$1\");\r\n                    var value = this.getTagValue(tag, \"\", dataItem);\r\n                    if (!$type.hasValue(value)) {\r\n                        value = \"\";\r\n                    }\r\n                    string = string.split(tags[i]).join(value);\r\n                }\r\n            }\r\n            string = getTextFormatter().unescape(string);\r\n        }\r\n        else {\r\n            string = \"\";\r\n        }\r\n        if (!this._adapterO) {\r\n            return string;\r\n        }\r\n        else {\r\n            return this._adapterO.apply(\"populateString\", string);\r\n        }\r\n    };\r\n    /**\r\n     * Gets the value from data item and formats it according to specified format.\r\n     *\r\n     * If `format` is specified, it will use its contents to choose formatter for\r\n     * the value. Otherwise it will select formatter accordingly to actual value\r\n     * type.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Ability to force certain formatter on known numeric and date values\r\n     * @see {@link NumberFormatter}\r\n     * @see {@link DateFormatter}\r\n     * @see {@link DurationFormatter}\r\n     * @param tagName           Tag name to replace\r\n     * @param format            Format to use\r\n     * @param dataItem          DataItem\r\n     * @return Formatted value\r\n     */\r\n    Sprite.prototype.getTagValue = function (tagName, format, dataItem) {\r\n        var value;\r\n        if (!$type.hasValue(dataItem)) {\r\n            dataItem = this.dataItem;\r\n        }\r\n        // Parse parts\r\n        var parts = [];\r\n        var reg = /([^.]+)\\(([^)]*)\\)|([^.]+)/g;\r\n        ;\r\n        var matches;\r\n        while (true) {\r\n            matches = reg.exec(tagName);\r\n            if (matches === null) {\r\n                break;\r\n            }\r\n            if (matches[3]) {\r\n                // Simple property\r\n                parts.push({\r\n                    prop: matches[3]\r\n                });\r\n            }\r\n            else {\r\n                // Method\r\n                // Parse parameters\r\n                var params = [];\r\n                if ($utils.trim(matches[2]) != \"\") {\r\n                    var reg2 = /'([^']*)'|\"([^\"]*)\"|([0-9\\-]+)/g;\r\n                    var matches2 = void 0;\r\n                    while (true) {\r\n                        matches2 = reg2.exec(matches[2]);\r\n                        if (matches2 === null) {\r\n                            break;\r\n                        }\r\n                        params.push(matches2[1] || matches2[2] || matches2[3]);\r\n                    }\r\n                }\r\n                parts.push({\r\n                    method: matches[1],\r\n                    params: params\r\n                });\r\n            }\r\n        }\r\n        // Check if we can retrieve the value from data item\r\n        if (dataItem) {\r\n            // Check values\r\n            value = this.getTagValueFromObject(parts, dataItem.values);\r\n            // Check properties\r\n            if (!$type.hasValue(value) || $type.isObject(value)) { // isObject helps to solve problem with date axis, as for example dateX will get dateX from values object and won't get to the dateX date.\r\n                value = this.getTagValueFromObject(parts, dataItem);\r\n            }\r\n            // Check data context\r\n            var dataContext = dataItem.dataContext;\r\n            if (!$type.hasValue(value) && dataContext) {\r\n                value = this.getTagValueFromObject(parts, dataItem.dataContext);\r\n                // Maybe it's a literal dot-separated name of the key in dataContext?\r\n                if (!$type.hasValue(value)) {\r\n                    value = this.getTagValueFromObject([{\r\n                            prop: tagName\r\n                        }], dataContext);\r\n                }\r\n                // scond data context level sometimes exist (tree map)\r\n                if (!$type.hasValue(value) && dataContext.dataContext) {\r\n                    value = this.getTagValueFromObject(parts, dataContext.dataContext);\r\n                }\r\n            }\r\n            // Check component's data item\r\n            if (!$type.hasValue(value) && dataItem.component && dataItem.component.dataItem !== dataItem) {\r\n                value = dataItem.component.getTagValue(tagName, format);\r\n            }\r\n        }\r\n        // Check sprite's properties\r\n        if (!$type.hasValue(value)) {\r\n            value = this.getTagValueFromObject(parts, this.populateStringFrom || this);\r\n        }\r\n        // Finally, check the parent\r\n        if (!$type.hasValue(value) && this._parent) {\r\n            value = this._parent.getTagValue(tagName, format);\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * Tries to retrieve values from properties of any object, then applies\r\n     * proper formatting to it.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (improve)\r\n     * @param parts   Properties ant methods to access\r\n     * @param object  Source object\r\n     * @param format  A specific format to apply\r\n     * @return Formatted value\r\n     */\r\n    Sprite.prototype.getTagValueFromObject = function (parts, object, format) {\r\n        var current = object;\r\n        var formatApplied = false;\r\n        for (var i = 0, len = parts.length; i < len; i++) {\r\n            var part = parts[i];\r\n            if (part.prop) {\r\n                // Regular property\r\n                current = current[part.prop];\r\n                if (!$type.hasValue(current)) {\r\n                    // Not set, return undefined\r\n                    return;\r\n                }\r\n            }\r\n            else {\r\n                // Method\r\n                switch (part.method) {\r\n                    case \"formatNumber\":\r\n                        var numberValue = $utils.anyToNumber(current);\r\n                        if ($type.hasValue(numberValue)) {\r\n                            current = this.numberFormatter.format(numberValue, format || part.params[0] || undefined);\r\n                            formatApplied = true;\r\n                        }\r\n                        break;\r\n                    case \"formatDate\":\r\n                        var dateValue = void 0;\r\n                        if ($type.isString(current)) {\r\n                            dateValue = this.dateFormatter.parse(current);\r\n                        }\r\n                        else {\r\n                            dateValue = $utils.anyToDate(current);\r\n                        }\r\n                        if (!$type.isDate(dateValue) || $type.isNaN(dateValue.getTime())) {\r\n                            // Was not able to get date out of value, quitting and letting\r\n                            // calling method try another value\r\n                            return;\r\n                        }\r\n                        if ($type.hasValue(dateValue)) {\r\n                            current = this.dateFormatter.format(dateValue, format || part.params[0] || undefined);\r\n                            formatApplied = true;\r\n                        }\r\n                        break;\r\n                    case \"formatDuration\":\r\n                        var durationValue = $utils.anyToNumber(current);\r\n                        if ($type.hasValue(durationValue)) {\r\n                            current = this.durationFormatter.format(durationValue, format || part.params[0] || undefined, part.params[1] || undefined);\r\n                            formatApplied = true;\r\n                        }\r\n                        break;\r\n                    case \"urlEncode\":\r\n                    case \"encodeURIComponent\":\r\n                        current = encodeURIComponent(current);\r\n                        break;\r\n                    default:\r\n                        if (current[part.method]) {\r\n                            current[part.method].apply(this, part.params);\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        // Apply default format if it wasn't applied explicitly\r\n        if (!formatApplied) {\r\n            var formatParts = [{\r\n                    method: \"\",\r\n                    params: format\r\n                }];\r\n            if (!$type.hasValue(format)) {\r\n                // Format is not set\r\n                // Determine from the type of the value\r\n                if ($type.isNumber(current)) {\r\n                    formatParts[0].method = \"formatNumber\";\r\n                    formatParts[0].params = \"\";\r\n                }\r\n                else if ($type.isDate(current)) {\r\n                    formatParts[0].method = \"formatDate\";\r\n                    formatParts[0].params = \"\";\r\n                }\r\n            }\r\n            else {\r\n                // Format set\r\n                // Try to determine formatter based on the format\r\n                var formatterType = $utils.getFormat(format);\r\n                // format\r\n                if (formatterType === $strings.NUMBER) {\r\n                    formatParts[0].method = \"formatNumber\";\r\n                }\r\n                else if (formatterType === $strings.DATE) {\r\n                    formatParts[0].method = \"formatDate\";\r\n                }\r\n                else if (formatterType === $strings.DURATION) {\r\n                    formatParts[0].method = \"formatDuration\";\r\n                }\r\n            }\r\n            // Apply format\r\n            if (formatParts[0].method) {\r\n                current = this.getTagValueFromObject(formatParts, current);\r\n            }\r\n        }\r\n        return current;\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"dataItem\", {\r\n        /**\r\n         * @return [[DataItem]]\r\n         */\r\n        get: function () {\r\n            if (!this._dataItem) {\r\n                if (this.virtualParent) {\r\n                    return this.virtualParent.dataItem;\r\n                }\r\n                if (this._parent) {\r\n                    return this._parent.dataItem;\r\n                }\r\n            }\r\n            return this._dataItem;\r\n        },\r\n        /**\r\n         * A [[DataItem]] to use as element's data source.\r\n         *\r\n         * @todo Review type\r\n         * @param dataItem  DataItem\r\n         */\r\n        set: function (dataItem) {\r\n            //an not use this[\"_dataItem\"] here, as we return parent data item if this sprite doesn't have one.\r\n            // @todo:think about it\r\n            this.setDataItem(dataItem);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets currently used [[DataItem]].\r\n     *\r\n     * If the element has also `configField` set, it will also look for any\r\n     * config in DataItem's data context to apply to this element.\r\n     *\r\n     * @param dataItem DataItem\r\n     */\r\n    Sprite.prototype.setDataItem = function (dataItem) {\r\n        var _this = this;\r\n        if (this._dataItem != dataItem) {\r\n            this._dataItem = dataItem;\r\n            if (dataItem) {\r\n                if (this.configField) {\r\n                    var dataContext_1 = dataItem.dataContext;\r\n                    if (dataContext_1) {\r\n                        this.config = dataContext_1[this.configField];\r\n                        if (!this.config && dataContext_1.dataContext) {\r\n                            this.config = dataContext_1.dataContext[this.configField];\r\n                        }\r\n                    }\r\n                }\r\n                var dataContext_2 = dataItem.dataContext;\r\n                if (dataContext_2) {\r\n                    var dataContext2_1 = dataContext_2.dataContext;\r\n                    $object.each(this.propertyFields, function (propertyName, fieldValue) {\r\n                        if ($type.hasValue(dataContext_2[fieldValue])) {\r\n                            var anyThis = _this;\r\n                            anyThis[propertyName] = dataContext_2[fieldValue];\r\n                        }\r\n                        else {\r\n                            if (dataContext2_1) {\r\n                                var value = dataContext2_1[fieldValue];\r\n                                if ($type.hasValue(value)) {\r\n                                    var anyThis = _this;\r\n                                    anyThis[propertyName] = value;\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            this.invalidate();\r\n        }\r\n    };\r\n    /**\r\n     * ==========================================================================\r\n     * PROPERTY UTILITIES\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Returns element's property value.\r\n     *\r\n     * Will check if there are any bindings with [[DataItem]].\r\n     *\r\n     * Will also apply any adapters bound to `propertyName`.\r\n     *\r\n     * @param propertyName  Property name\r\n     * @return Property value\r\n     */\r\n    Sprite.prototype.getPropertyValue = function (propertyName) {\r\n        var propValue = this.properties[propertyName];\r\n        // Apply adapter\r\n        if (!this._isTemplate) {\r\n            if (this._adapterO) {\r\n                propValue = this._adapterO.apply(propertyName, propValue);\r\n            }\r\n            propValue = globalAdapter.applyAll(this, propertyName, propValue);\r\n        }\r\n        return propValue;\r\n    };\r\n    Sprite.prototype.setColorProperty = function (property, value, invalidate) {\r\n        var currentValue = this.properties[property];\r\n        if (value instanceof Color && currentValue instanceof Color && value.toString() == currentValue.toString()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return this.setPropertyValue(property, value, invalidate);\r\n        }\r\n    };\r\n    Sprite.prototype.setPercentProperty = function (property, value, invalidate, transform, precision, floor) {\r\n        value = $type.toNumberOrPercent(value);\r\n        if ($type.isNumber(value)) {\r\n            if ($type.isNumber(precision)) {\r\n                value = $math.round(value, precision, floor);\r\n            }\r\n            return this.setPropertyValue(property, value, invalidate, transform);\r\n        }\r\n        else {\r\n            var currentValue = this.properties[property];\r\n            if (value instanceof Percent && currentValue instanceof Percent && value.value == currentValue.value) {\r\n                return false;\r\n            }\r\n            else {\r\n                return this.setPropertyValue(property, value, invalidate, transform);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets elements's property value. Will also propagate the same property value\r\n     * on all element's clones.\r\n     *\r\n     * @param property    Property\r\n     * @param value       Value\r\n     * @param invalidate  Should the sprite be invalidated, cause it's re-rendering\r\n     * @param transform   Re-apply positioning of the element\r\n     * @return Did the value change? It will return `true` if the new value and the old value of the property are not the same\r\n     * @todo Review propagation to clones. Right now we simply check if clone is disposed before setting the same property on it. It's better to remove from clone list altogether.\r\n     */\r\n    Sprite.prototype.setPropertyValue = function (property, value, invalidate, transform) {\r\n        if (this.properties[property] !== value && !this.isDisposed()) {\r\n            this.properties[property] = value;\r\n            if (this.events.isEnabled(\"propertychanged\")) {\r\n                var event_1 = {\r\n                    type: \"propertychanged\",\r\n                    target: this,\r\n                    property: property\r\n                };\r\n                this.events.dispatchImmediately(\"propertychanged\", event_1);\r\n            }\r\n            if (invalidate) {\r\n                this.invalidate();\r\n            }\r\n            if (transform) {\r\n                this.invalidatePosition();\r\n            }\r\n            if (this.applyOnClones) {\r\n                var clones = this.clones.values;\r\n                var length_2 = clones.length;\r\n                for (var i = 0; i < length_2; ++i) {\r\n                    var clone = clones[i];\r\n                    if (!clone.isDisposed()) {\r\n                        //(<Sprite>clone).setPropertyValue(<any>property, value, invalidate, transform);\r\n                        clone[property] = value;\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    Sprite.prototype.bind = function (property, source, bindToProperty, modifier) {\r\n        var _this = this;\r\n        if (bindToProperty === void 0) { bindToProperty = property; }\r\n        if ($type.hasValue(this._bindings[property])) {\r\n            this._bindings[property].dispose();\r\n        }\r\n        // set current value\r\n        this[property] = source[bindToProperty];\r\n        //source.addEventListener(AMEvent.PROPERTY_CHANGED, this.handleBindings, false, this);\r\n        this._bindings[property] = source.events.on(\"propertychanged\", function (event) {\r\n            if (event.property === bindToProperty) {\r\n                var value = source[bindToProperty];\r\n                if (modifier) {\r\n                    value = modifier(value);\r\n                }\r\n                // TODO clonesById\r\n                _this[property] = value;\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Sets up and obeserver function to monitor changes in particular property\r\n     * or properties.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param property  Element's property name\r\n     * @param listener  Handler function\r\n     * @param context   Context for handler function\r\n     * @returns Event Disposer\r\n     */\r\n    Sprite.prototype.observe = function (property, listener, context, shouldClone) {\r\n        var _this = this;\r\n        return new MultiDisposer($array.map($array.toArray(property), function (prop) {\r\n            return _this.events.on(\"propertychanged\", function (e) {\r\n                if (e.property === prop) {\r\n                    listener.call(context, e);\r\n                }\r\n            }, context, shouldClone);\r\n        }));\r\n    };\r\n    /**\r\n     * ==========================================================================\r\n     * ACCESSIBILITY-RELATED PROPERTIES\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Applies accessibility to the SVG element.\r\n     *\r\n     * Adds `<title>` and `<description>` elements as well as `aria-labelledby`\r\n     * and `role` properties.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.applyAccessibility = function () {\r\n        // Check if we need to add label and description\r\n        var title = this.readerTitle, description = this.readerDescription, role = this.role, hidden = this.readerHidden, checked = this.readerChecked, controls = this.readerControls, live = this.readerLive, orientation = this.readerOrientation, valueNow = this.readerValueNow, valueText = this.readerValueText;\r\n        // Init label/describe ids\r\n        var labelledByIds = [];\r\n        var describedByIds = [];\r\n        var labelledBy = this.readerLabelledBy;\r\n        if (labelledBy) {\r\n            labelledByIds.push(labelledBy);\r\n        }\r\n        var describedBy = this.readerDescribedBy;\r\n        if (describedBy) {\r\n            describedByIds.push(describedBy);\r\n        }\r\n        // Add arial-label attribute if present\r\n        // If not readerTitle and labelledBy is set we will use <title> element\r\n        // instead of aria-label\r\n        // TODO: should we check agains this.showSystemTooltip?\r\n        if (title) {\r\n            if (labelledByIds.length || this.showSystemTooltip) {\r\n                var titleElement = this.titleElement;\r\n                var titleId = this.uid + \"-title\";\r\n                if (titleElement.node.textContent != title) {\r\n                    titleElement.node.textContent = title;\r\n                    titleElement.attr({ id: titleId });\r\n                }\r\n                labelledByIds.push(titleId);\r\n            }\r\n            else {\r\n                if (this._titleElement) {\r\n                    this.group.removeElement(this._titleElement);\r\n                    this._titleElement = undefined;\r\n                }\r\n                this.setSVGAttribute({\r\n                    \"aria-label\": title\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            this.removeSVGAttribute(\"aria-label\");\r\n            if (this._titleElement) {\r\n                this.group.removeElement(this._titleElement);\r\n                this._titleElement = undefined;\r\n            }\r\n        }\r\n        // Add description\r\n        if (description) {\r\n            var descriptionElement = this.descriptionElement;\r\n            var descriptionId = this.uid + \"-description\";\r\n            if (descriptionElement.node.textContent != description) {\r\n                descriptionElement.node.textContent = description;\r\n                descriptionElement.attr({ id: descriptionId });\r\n            }\r\n            describedByIds.push(descriptionId);\r\n        }\r\n        else if (this._descriptionElement) {\r\n            this.group.removeElement(this._descriptionElement);\r\n            this._descriptionElement = undefined;\r\n        }\r\n        // Add label and described properties\r\n        if (labelledByIds.length) {\r\n            this.setSVGAttribute({ \"aria-labelledby\": labelledByIds.join(\" \") });\r\n        }\r\n        else {\r\n            this.removeSVGAttribute(\"aria-labelledby\");\r\n        }\r\n        if (describedByIds.length) {\r\n            this.setSVGAttribute({ \"aria-describedby\": describedByIds.join(\" \") });\r\n        }\r\n        else {\r\n            this.removeSVGAttribute(\"aria-describedby\");\r\n        }\r\n        // Apply role\r\n        if (role) {\r\n            this.setSVGAttribute({ \"role\": role });\r\n        }\r\n        else {\r\n            this.removeSVGAttribute(\"role\");\r\n        }\r\n        // Apply aria-hidden\r\n        if (hidden) {\r\n            this.setSVGAttribute({ \"aria-hidden\": \"true\" });\r\n        }\r\n        else {\r\n            this.removeSVGAttribute(\"aria-hidden\");\r\n        }\r\n        // Apply aria-checked\r\n        if (checked) {\r\n            this.setSVGAttribute({ \"aria-checked\": \"true\" });\r\n        }\r\n        else if (checked === false) {\r\n            this.setSVGAttribute({ \"aria-checked\": \"false\" });\r\n        }\r\n        else {\r\n            this.removeSVGAttribute(\"aria-checked\");\r\n        }\r\n        // Apply aria-controls\r\n        if (controls) {\r\n            this.setSVGAttribute({ \"aria-controls\": controls });\r\n        }\r\n        else {\r\n            this.removeSVGAttribute(\"aria-controls\");\r\n        }\r\n        // Apply aria-live\r\n        if (live) {\r\n            this.setSVGAttribute({ \"aria-live\": live });\r\n        }\r\n        else {\r\n            this.removeSVGAttribute(\"aria-live\");\r\n        }\r\n        // Apply aria-orientation\r\n        if (orientation) {\r\n            this.setSVGAttribute({ \"aria-orientation\": orientation });\r\n        }\r\n        else {\r\n            this.removeSVGAttribute(\"aria-orientation\");\r\n        }\r\n        // Apply aria-valuenow\r\n        if (valueNow) {\r\n            this.setSVGAttribute({ \"aria-valuenow\": valueNow });\r\n        }\r\n        else {\r\n            this.removeSVGAttribute(\"aria-valuenow\");\r\n        }\r\n        // Apply aria-valuetext\r\n        if (valueText) {\r\n            this.setSVGAttribute({ \"aria-valuetext\": valueText });\r\n        }\r\n        else {\r\n            this.removeSVGAttribute(\"aria-valuetext\");\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"readerTitle\", {\r\n        /**\r\n         * @return Title\r\n         */\r\n        get: function () {\r\n            var title = this.getPropertyValue(\"readerTitle\");\r\n            if ($type.hasValue(title) && this.dataItem) {\r\n                return this.populateString(title);\r\n            }\r\n            return title;\r\n        },\r\n        /**\r\n         * Screen reader title of the element.\r\n         *\r\n         * @param value Title\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"readerTitle\", value)) {\r\n                this.applyAccessibility();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"readerDescription\", {\r\n        /**\r\n         * @return Description\r\n         */\r\n        get: function () {\r\n            var description = this.getPropertyValue(\"readerDescription\");\r\n            if ($type.hasValue(description) && this.dataItem) {\r\n                return this.populateString(description);\r\n            }\r\n            return this.getPropertyValue(\"readerDescription\");\r\n        },\r\n        /**\r\n         * Screen reader description of the element.\r\n         *\r\n         * @param value Description\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"readerDescription\", value)) {\r\n                this.applyAccessibility();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"role\", {\r\n        /**\r\n         * @return Role\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"role\");\r\n        },\r\n        /**\r\n         * A WAI-ARIA role for the element.\r\n         *\r\n         * @see {@link https://www.w3.org/TR/wai-aria-1.1/#role_definitions} for more information on WAI-ARIA roles\r\n         * @param value  Role\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"role\", value)) {\r\n                this.applyAccessibility();\r\n                if (value == \"slider\") {\r\n                    this.setSVGAttribute({ \"aria-valuemin\": \"0\" });\r\n                    this.setSVGAttribute({ \"aria-valuemax\": \"100\" });\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"readerHidden\", {\r\n        /**\r\n         * @return Hidden?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"readerHidden\");\r\n        },\r\n        /**\r\n         * Controls if element should be hidden from screen readers.\r\n         *\r\n         * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-hidden} for more information\r\n         * @param value  Hidden?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"readerHidden\", value)) {\r\n                this.applyAccessibility();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"readerChecked\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Checked?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"readerChecked\");\r\n        },\r\n        /**\r\n         * Controls if element is currently marked as \"checked\".\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-checked} for more information\r\n         * @param value Checked?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"readerChecked\", value)) {\r\n                this.applyAccessibility();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"readerControls\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Setting value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"readerControls\");\r\n        },\r\n        /**\r\n         * A `uid` of an element this element controls.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-controls} for more information\r\n         * @param value Setting value\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"readerControls\", value)) {\r\n                this.applyAccessibility();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"readerLive\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Setting value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"readerLive\");\r\n        },\r\n        /**\r\n         * Controls accessibility setting \"aria-live\" for the element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @see {@link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions} for more information\r\n         * @param value Setting value\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"readerLive\", value)) {\r\n                this.applyAccessibility();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"readerLabelledBy\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Target element\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"readerLabelledBy\");\r\n        },\r\n        /**\r\n         * A `uid` of an element that describes this element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-labelledby} for more information\r\n         * @param value Target element\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"readerLabelledBy\", value)) {\r\n                this.applyAccessibility();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"readerDescribedBy\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Target element\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"readerDescribedBy\");\r\n        },\r\n        /**\r\n         * A `uid` of an element that describes this element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-describedby} for more information\r\n         * @param value Target element\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"readerDescribedBy\", value)) {\r\n                this.applyAccessibility();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"readerOrientation\", {\r\n        /**\r\n         * @return Orientation\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"readerOrientation\");\r\n        },\r\n        /**\r\n         * Orientation of the element.\r\n         *\r\n         * @since 4.7.16\r\n         * @param value Orientation\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"readerOrientation\", value)) {\r\n                this.applyAccessibility();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"readerValueNow\", {\r\n        /**\r\n         * @return Current value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"readerValueNow\");\r\n        },\r\n        /**\r\n         * Current value of the element.\r\n         *\r\n         * @since 4.7.16\r\n         * @param value Current value\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"readerValueNow\", value)) {\r\n                this.applyAccessibility();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"readerValueText\", {\r\n        /**\r\n         * @return Current value (text)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"readerValueText\");\r\n        },\r\n        /**\r\n         * Text representation of the current value of the element.\r\n         *\r\n         * @since 4.7.16\r\n         * @param value Current value (text)\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"readerValueText\", value)) {\r\n                this.applyAccessibility();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"keyboardOptions\", {\r\n        /**\r\n         * ==========================================================================\r\n         * USER INTERACTIONS\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Returns elements keyboard options.\r\n         *\r\n         * @return Keyboard options\r\n         */\r\n        get: function () {\r\n            if (!this.interactions.keyboardOptions) {\r\n                if (this.virtualParent) {\r\n                    return this.virtualParent.keyboardOptions;\r\n                }\r\n                if (this._parent) {\r\n                    return this._parent.keyboardOptions;\r\n                }\r\n            }\r\n            return this.interactions.keyboardOptions;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"mouseOptions\", {\r\n        /**\r\n         * Mouse options.\r\n         *\r\n         * Enables controlling options related to the mouse, for example sensitivity\r\n         * of its mouse wheel.\r\n         *\r\n         * E.g. the below will reduce chart's wheel-zoom speed to half its default\r\n         * speed:\r\n         *\r\n         * ```TypeScript\r\n         * chart.plotContainer.mouseOptions.sensitivity = 0.5;\r\n         * ```\r\n         * ```JavaScript\r\n         * chart.plotContainer.mouseOptions.sensitivity = 0.5;\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"plotContainer\": {\r\n         *     \"mouseOptions\": {\r\n         *       \"sensitivity\": 0.5\r\n         *     }\r\n         *   }\r\n         * }\r\n         * ```\r\n         *\r\n         * @return Mouse options\r\n         */\r\n        get: function () {\r\n            if (!this.interactions.mouseOptions) {\r\n                if (this.virtualParent) {\r\n                    return this.virtualParent.mouseOptions;\r\n                }\r\n                if (this._parent) {\r\n                    return this._parent.mouseOptions;\r\n                }\r\n            }\r\n            return this.interactions.mouseOptions;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"interactions\", {\r\n        /**\r\n         * Returns (creates if necessary) an [[InteractionObject]] associated with\r\n         * this element.\r\n         *\r\n         * [[InteractionObject]] is used to attach all kinds of user-interactions to\r\n         * the element, e.g. click/touch, dragging, hovering, and similar events.\r\n         *\r\n         * @return Interaction object\r\n         */\r\n        get: function () {\r\n            if (!this._interaction) {\r\n                var interaction = getInteraction().getInteraction(this.dom);\r\n                this._interaction = interaction;\r\n                interaction.clickable = this.clickable;\r\n                interaction.hoverable = this.hoverable;\r\n                interaction.trackable = this.trackable;\r\n                interaction.draggable = this.draggable;\r\n                interaction.swipeable = this.swipeable;\r\n                interaction.resizable = this.resizable;\r\n                interaction.wheelable = this.wheelable;\r\n                interaction.contextMenuDisabled = this.contextMenuDisabled;\r\n                interaction.inert = this.inert;\r\n                interaction.sprite = this;\r\n                this._disposers.push(interaction);\r\n            }\r\n            return this._interaction;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns true if interactions object was created. Mostly used just to avoid creating interactions object if not needed.\r\n     * @return Is Sprite interactive?\r\n     */\r\n    Sprite.prototype.isInteractive = function () {\r\n        if (this._interaction) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"focusable\", {\r\n        /**\r\n         * @return Can element be focused?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"focusable\");\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * ELEMENT FOCUS-RELATED STUFF\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Controls if the element can gain focus.\r\n         *\r\n         * Focusable element will be selectable via TAB key.\r\n         *\r\n         * Please note, clicking it with a mouse or touching will not add focus to\r\n         * it.\r\n         *\r\n         * Focused element will show a system-specific highlight, which might ruin\r\n         * the overal look. This is why we don't focus element on click/touch.\r\n         *\r\n         * A default setting varies for different elements. By default all elements\r\n         * are not focusable, except certain items like buttons, legend items, etc.\r\n         *\r\n         * @default undefined (auto)\r\n         * @param value  Can element be focused?\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"focusable\", value)) {\r\n                if (!value && !this.isInteractive()) {\r\n                }\r\n                else {\r\n                    this.interactions.focusable = value;\r\n                    if (value) {\r\n                        this.setSVGAttribute({ \"focusable\": value });\r\n                        if (!$type.hasValue(this._tabindex)) {\r\n                            this.tabindex = 0;\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.removeSVGAttribute(\"focusable\");\r\n                        this.tabindex = undefined;\r\n                    }\r\n                    // Set focus events that would apply \"focus\" state\r\n                    // setEventDisposer will also remove listeners if value == false\r\n                    this.interactions.setEventDisposer(\"sprite-focusable\", value, function () { return new MultiDisposer([\r\n                        _this.events.on(\"blur\", _this.handleBlur, _this, false),\r\n                        _this.events.on(\"focus\", _this.handleFocus, _this, false)\r\n                    ]); });\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Applies filters (if set) when element gains focus.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param ev Original event\r\n     */\r\n    Sprite.prototype.handleFocus = function (ev) {\r\n        if (this.focusable) {\r\n            if (this.topParent) {\r\n                this.topParent.hasFocused = true;\r\n                this.topParent.focusedElement = this;\r\n            }\r\n            if (this.focusFilter) {\r\n                // Any `filters` manipulation will trigger `applyFilters()` so we don't\r\n                // need to call it here\r\n                this.filters.push(this.focusFilter);\r\n            }\r\n            if (this.hoverOnFocus) {\r\n                // Trigger a hover event as well\r\n                this.isHover = true;\r\n                this.handleOver();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Removes focus filter (if set) when elementloses focus.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param ev Original event\r\n     */\r\n    Sprite.prototype.handleBlur = function (ev) {\r\n        if (this.focusable) {\r\n            if (this.topParent) {\r\n                this.topParent.hasFocused = false;\r\n                this.topParent.focusedElement = undefined;\r\n            }\r\n            if (this.focusFilter) {\r\n                // Any `filters` manipulation will trigger `applyFilters()` so we don't\r\n                // need to call it here\r\n                this.filters.removeValue(this.focusFilter);\r\n            }\r\n            if (this.hoverOnFocus) {\r\n                // Trigger a out event as well\r\n                this.isHover = false;\r\n                this.handleOut();\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"focusFilter\", {\r\n        /**\r\n         * A reference to a [[Filter]] to apply to element when it gains focus.\r\n         *\r\n         * Normally, browsers will draw a default ugly square around focused element,\r\n         * which totally makes sense because its purpose is to help identify active\r\n         * element for visually impaired people.\r\n         *\r\n         * However, if you would rather apply a filter, so you can modify how focused\r\n         * element looks like, use `focusFilter`.\r\n         *\r\n         * Simply set it to an anstance of [[FocusFilter]], or any other filter\r\n         * object.\r\n         *\r\n         * ```TypeScript\r\n         * chart.focusFilter = new am4core.FocusFilter();\r\n         * ```\r\n         * ```JavaScript\r\n         * chart.focusFilter = new am4core.FocusFilter();\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"focusFilter\": {\r\n         *     \"type\": \"FocusFilter\"\r\n         *   },\r\n         *   // ...\r\n         * }\r\n         * ```\r\n         *\r\n         * @see {@link Filter}\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/accessibility/} more about accessibility\r\n         * @see {@link https://www.amcharts.com/docs/v4/tutorials/changing-appearance-of-focused-items/} cusomizing focus appearance\r\n         * @ignore Exclude from docs\r\n         * @return Focused element filter\r\n         */\r\n        get: function () {\r\n            /*if (!this._focusFilter) {\r\n                this._focusFilter = new FocusFilter();\r\n                this._disposers.push(this._focusFilter);\r\n            }*/\r\n            //return this._focusFilter;\r\n            var focusFilter = this._focusFilter;\r\n            if (focusFilter) {\r\n                return focusFilter;\r\n            }\r\n            if (this.virtualParent) {\r\n                return this.virtualParent.focusFilter;\r\n            }\r\n            else if (this._parent) {\r\n                return this._parent.focusFilter;\r\n            }\r\n            //this._focusFilter = new FocusFilter();\r\n            //this._disposers.push(this._focusFilter);\r\n        },\r\n        /**\r\n         * @see {@link Filter}\r\n         * @ignore Exclude from docs\r\n         * @todo This is still experimental, don't use it\r\n         */\r\n        set: function (value) {\r\n            this._focusFilter = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"hoverOnFocus\", {\r\n        /**\r\n         * @return Trigger hover on focus?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"hoverOnFocus\");\r\n        },\r\n        /**\r\n         * If set to `true`, this element will also trigger `\"over\"` event with all\r\n         * the related consequences, like \"hover\" state being applied and tooltip\r\n         * being shown.\r\n         *\r\n         * Useful as an accessibility feature to display rollover tooltips on items\r\n         * selected via keyboard.\r\n         *\r\n         * @param value  Trigger hover on focus?\r\n         * @default false\r\n         */\r\n        set: function (value) {\r\n            if (value !== this.hoverOnFocus) {\r\n                this.setPropertyValue(\"hoverOnFocus\", value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"tabindex\", {\r\n        /**\r\n         * @return TAB index\r\n         */\r\n        get: function () {\r\n            var index = this._tabindex;\r\n            if (index != null) {\r\n                return index;\r\n            }\r\n            else if (this.virtualParent) {\r\n                return this.virtualParent.tabindex;\r\n            }\r\n            else if (this._parent) {\r\n                return this._parent.tabindex;\r\n            }\r\n        },\r\n        /**\r\n         * Sets or returns TAB index.\r\n         *\r\n         * Tab index maintains the order in which focusable elements gain focus when\r\n         * TAB key is pressed.\r\n         *\r\n         * Please note, tab index is not local to the chart. It affects the whole\r\n         * of the page, including non-SVG elements. Maintain extreme causion when\r\n         * setting tab indexes, as it affects the user experience for the whole\r\n         * web page.\r\n         *\r\n         * @param value TAB index\r\n         */\r\n        set: function (value) {\r\n            value = $type.toNumber(value);\r\n            if (this.setPropertyValue(\"tabindex\", value) && $type.isNumber(value)) {\r\n                this.interactions.tabindex = value;\r\n                this.setSVGAttribute({ \"tabindex\": value });\r\n                this._tabindex = value;\r\n                this.focusable = true;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"inertiaOptions\", {\r\n        /**\r\n         * ==========================================================================\r\n         * DRAGGING AND RELATED STUFF\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Returns element's options to be used for inertia. This setting is\r\n         * inheritable, meaning that if not set directly, it will search in all its\r\n         * ascendants until very top.\r\n         *\r\n         * Inertia is used only if element's `inert` is set to `true`.\r\n         *\r\n         * \"Inert\" element, when dragged and released, will carry the momentum of the\r\n         * movement, and will continue moving in the same drag direction, gradually\r\n         * reducing in speed until finally stops.\r\n         *\r\n         * Check [[IInertiaOptions]] for how you tweak inertia animations.\r\n         *\r\n         * @return Inertia options\r\n         */\r\n        get: function () {\r\n            if (!this.interactions.inertiaOptions) {\r\n                if (this._parent) {\r\n                    return this._parent.inertiaOptions;\r\n                }\r\n            }\r\n            return this.interactions.inertiaOptions;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"draggable\", {\r\n        /**\r\n         * @return `true` if element can be dragged\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"draggable\");\r\n        },\r\n        /**\r\n         * Controls if the element is draggable.\r\n         *\r\n         * @param value  `true` if element can be dragged\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"draggable\", value)) {\r\n                if (!value && !this.isInteractive()) {\r\n                }\r\n                else {\r\n                    this.applyCursorStyle();\r\n                    this.interactions.draggable = value;\r\n                    //interaction.processDraggable(this);\r\n                    // Add events\r\n                    // @todo Maybe attach to InteractionObject's multidisposer so that\r\n                    // sprites events get disposed together with them?\r\n                    // this.interactions.disposers.getItem(\"movable\")\r\n                    // setEventDisposer will also remove listeners if value == false\r\n                    this.interactions.setEventDisposer(\"sprite-draggable\", value, function () { return new MultiDisposer([\r\n                        _this.events.on(\"down\", _this.handleDown, _this, false),\r\n                        _this.events.on(\"dragstart\", _this.handleDragStart, _this, false),\r\n                        _this.events.on(\"drag\", _this.handleDragMove, _this, false),\r\n                        _this.events.on(\"dragstop\", _this.handleDragStop, _this, false)\r\n                    ]); });\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Executes when dragged element is being started to drag.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.handleDragStart = function (ev) {\r\n        if (!this.interactions.isTouchProtected || !ev.touch) {\r\n            this.interactions.originalPosition = {\r\n                x: this.pixelX,\r\n                y: this.pixelY\r\n            };\r\n            this._isDragged = true;\r\n            this.hideTooltip(0);\r\n        }\r\n    };\r\n    /**\r\n     * Tell this element to start being dragged. This is useful if you want to\r\n     * drag items by interactions performed not directly on the target element.\r\n     *\r\n     * Parameter `pointer` is highly recommended. By passing in the Pointer you\r\n     * will ensure that movement is tracked for the pointer that you want. If not\r\n     * supplied, the system will try to determine the most logical pointer.\r\n     *\r\n     * However this may fail if you have more than one pointer active, which\r\n     * might happen if you have several objects being dragged on a touch device.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param pointer Pointer to use for movement\r\n     */\r\n    Sprite.prototype.dragStart = function (pointer) {\r\n        //this.dragStop(pointer);\r\n        //this.draggable = true;\r\n        this._isDragged = true;\r\n        getInteraction().dragStart(this.interactions, pointer);\r\n    };\r\n    /**\r\n     * Executes when dragged element is being dropped.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype.handleDragStop = function (ev) {\r\n        if (!this.interactions.isTouchProtected || !ev.touch) {\r\n            this._isDragged = false;\r\n            this.showTooltip();\r\n            this.interactions.originalPosition = undefined;\r\n        }\r\n    };\r\n    /**\r\n     * Stops manually initiated dragging of the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param pointer Pointer to use as a reference\r\n     */\r\n    Sprite.prototype.dragStop = function (pointer, cancelled) {\r\n        //this.draggable = false;\r\n        this._isDragged = false;\r\n        getInteraction().dragStop(this.interactions, pointer, cancelled);\r\n        //this.handleDragStop();\r\n    };\r\n    /**\r\n     * Executes when {Sprite} is being dragged.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param ev Event object\r\n     * @todo Implement parent position offset calculation\r\n     */\r\n    Sprite.prototype.handleDragMove = function (ev) {\r\n        if (!this.interactions.isTouchProtected || !ev.touch) {\r\n            var point = this.interactions.originalPosition;\r\n            if (point && this._isDragged) {\r\n                var globalScale = this._parent.globalScale * this.svgContainer.cssScale;\r\n                this.moveTo({ x: point.x + ev.shift.x / globalScale, y: point.y + ev.shift.y / globalScale }, undefined, undefined, true);\r\n            }\r\n            this.dispatchImmediately(\"dragged\", ev);\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"inert\", {\r\n        /**\r\n         * @return `true` if element should use inertia when animated\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"inert\");\r\n        },\r\n        /**\r\n         * Controls if the element should use inertia when interacted with.\r\n         *\r\n         * \"Inert\" element, when dragged and released, will carry the momentum of the\r\n         * movement, and will continue moving in the same drag direction, gradually\r\n         * reducing in speed until finally stops.\r\n         *\r\n         * @default false\r\n         * @param value `true` if element should use inertia when animated\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"inert\", value)) {\r\n                if (!value && !this.isInteractive()) {\r\n                    // void\r\n                }\r\n                else {\r\n                    this.interactions.inert = value;\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"hoverOptions\", {\r\n        /**\r\n         * ==========================================================================\r\n         * HOVERING\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Returns Sprite's hover options.\r\n         *\r\n         * @see {@link IHoverOptions} for available options.\r\n         * @return Options\r\n         */\r\n        get: function () {\r\n            if (!this.interactions.hoverOptions) {\r\n                if (this.virtualParent) {\r\n                    return this.virtualParent.hoverOptions;\r\n                }\r\n                if (this._parent) {\r\n                    return this._parent.hoverOptions;\r\n                }\r\n            }\r\n            return this.interactions.hoverOptions;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"hoverable\", {\r\n        /**\r\n         * @return `true` if element is hoverable\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"hoverable\");\r\n        },\r\n        /**\r\n         * Controls if the element is hoverable (hover events are registered).\r\n         *\r\n         * Use `over` and `out` events, to watch for those respective actions.\r\n         *\r\n         * @default false\r\n         * @param value `true` if element can be hovered\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"hoverable\", value)) {\r\n                if (!value && !this.isInteractive()) {\r\n                    // void\r\n                }\r\n                else {\r\n                    this.applyCursorStyle();\r\n                    this.interactions.hoverable = value;\r\n                    // setEventDisposer will also remove listeners if value == false\r\n                    this.interactions.setEventDisposer(\"sprite-hoverable\", value, function () { return new MultiDisposer([\r\n                        _this.events.on(\"over\", _this.handleOver, _this, false),\r\n                        _this.events.on(\"out\", _this.handleOut, _this, false),\r\n                    ]); });\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Handles tasks when element becomes hovered:\r\n     * * Shows [[Tooltip]] if applicable\r\n     * * Applies \"hover\" state\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param ev Event object\r\n     */\r\n    Sprite.prototype.handleOver = function (ev) {\r\n        if (this._outTimeout) {\r\n            this._outTimeout.dispose();\r\n        }\r\n        if (this.isHover) {\r\n            if (this.states.hasKey(\"hover\")) {\r\n                //this.setState(\"hover\");\r\n                // This will check `isHover` and will set \"hover\" state\r\n                if (!this.isHidden) {\r\n                    this.applyCurrentState();\r\n                }\r\n            }\r\n            var point = void 0;\r\n            if (ev && ev.pointer) {\r\n                point = $utils.documentPointToSvg(ev.pointer.point, this.svgContainer.SVGContainer, this.svgContainer.cssScale);\r\n            }\r\n            if (this.showTooltipOn == \"hover\") {\r\n                this.showTooltip(point);\r\n            }\r\n        }\r\n        else {\r\n            if (this.showTooltipOn == \"hover\") {\r\n                this.hideTooltip();\r\n            }\r\n            if (!this.isHidden && this.states.hasKey(\"hover\")) {\r\n                this.applyCurrentState();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Handles tasks when element loses hover:\r\n     *\r\n     * * Hides [[Tooltip]]\r\n     * * Applies default state\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param ev [description]\r\n     */\r\n    Sprite.prototype.handleOut = function (ev) {\r\n        var _this = this;\r\n        if (this.tooltip && this.tooltip.targetSprite == this && this.tooltip.keepTargetHover) {\r\n            this._outTimeout = this.setTimeout(function () {\r\n                if (!_this.tooltip.isHover) {\r\n                    if (_this.tooltip.targetSprite == _this) {\r\n                        _this.hideTooltip();\r\n                    }\r\n                    _this._outTimeout = _this.setTimeout(_this.handleOutReal.bind(_this), _this.rollOutDelay);\r\n                }\r\n            }, 10);\r\n            return;\r\n        }\r\n        if (this.showTooltipOn == \"hover\") {\r\n            this.hideTooltip();\r\n        }\r\n        this._outTimeout = this.setTimeout(this.handleOutReal.bind(this), this.rollOutDelay);\r\n    };\r\n    /**\r\n     * [handleOutReal description]\r\n     *\r\n     * @ignore\r\n     * @todo description\r\n     */\r\n    Sprite.prototype.handleOutReal = function () {\r\n        if (!this.isHidden && !this.isHiding && this.states.hasKey(\"hover\")) {\r\n            this.applyCurrentState();\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"hitOptions\", {\r\n        /**\r\n         * ==========================================================================\r\n         * CLICKING/TAPPING AND TOGGLING STUFF\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Returns Sprite's click (hit) options.\r\n         *\r\n         * Click (hit) options control things like double-click, timeouts, etc.\r\n         *\r\n         * @see {@link IHitOptions} for available options.\r\n         * @return Options\r\n         */\r\n        get: function () {\r\n            if (!this.interactions.hitOptions) {\r\n                if (this.virtualParent) {\r\n                    return this.virtualParent.hitOptions;\r\n                }\r\n                if (this._parent) {\r\n                    return this._parent.hitOptions;\r\n                }\r\n            }\r\n            return this.interactions.hitOptions;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Prepares element's after `down` event.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param ev Event\r\n     */\r\n    Sprite.prototype.handleDown = function (ev) {\r\n        if (this.interactions.downPointers.length === 1) {\r\n            this.interactions.originalPosition = {\r\n                x: this.pixelX,\r\n                y: this.pixelY\r\n            };\r\n            this.interactions.originalAngle = this.rotation;\r\n            this.interactions.originalScale = this.scale;\r\n            if (this.states.hasKey(\"down\")) {\r\n                this.setState(\"down\");\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Prepares element's after `up` event.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param ev Event\r\n     */\r\n    Sprite.prototype.handleUp = function (ev) {\r\n        var _this = this;\r\n        /*if (!this.isDown) {\r\n            this.interactions.originalPosition = null;\r\n            this.interactions.originalAngle = null;\r\n            this.interactions.originalScale = null;\r\n        }*/\r\n        this._isResized = false;\r\n        if (this.states.hasKey(\"down\")) {\r\n            this.applyCurrentState();\r\n        }\r\n        if (this.showTooltipOn == \"hit\") {\r\n            this.updateTooltipPosition(ev.pointer ? ev.pointer.point : undefined);\r\n            this._disposers.push(registry.events.once(\"exitframe\", function () {\r\n                _this.showTooltip();\r\n            }));\r\n            this._disposers.push(getInteraction().body.events.once(\"down\", function (ev) {\r\n                _this.hideTooltip();\r\n            }));\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"clickable\", {\r\n        /**\r\n         * @return {boolean}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"clickable\");\r\n        },\r\n        /**\r\n         * Indicates if the element is clickable.\r\n         *\r\n         * Some type of the elements, like buttons are clickable by default.\r\n         *\r\n         * Most of the elements are not clickable by default.\r\n         *\r\n         * Use `hit`, `doublehit`, `up`, `down`, `toggled` events to watch for\r\n         * respective click/touch actions.\r\n         *\r\n         * @param value `true` if element can be clicked\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"clickable\", value)) {\r\n                if (!value && !this.isInteractive()) {\r\n                    // void\r\n                }\r\n                else {\r\n                    this.applyCursorStyle();\r\n                    this.interactions.clickable = value;\r\n                    // setEventDisposer will also remove listeners if value == false\r\n                    this.interactions.setEventDisposer(\"sprite-clickable\", value, function () { return new MultiDisposer([\r\n                        _this.events.on(\"down\", _this.handleDown, _this, false),\r\n                        _this.events.on(\"up\", _this.handleUp, _this, false)\r\n                    ]); });\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"togglable\", {\r\n        /**\r\n         * @return Is togglable?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"togglable\");\r\n        },\r\n        /**\r\n         * Indicates if element can be toggled on and off by subsequent clicks/taps.\r\n         *\r\n         * Togglable element will alternate its `isActive` property between `true`\r\n         * and `false` with each click.\r\n         *\r\n         * @param value Is togglable?\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"togglable\", value)) {\r\n                if (!value && !this.isInteractive()) {\r\n                    // void\r\n                }\r\n                else {\r\n                    // setEventDisposer will also remove listeners if value == false\r\n                    this.interactions.setEventDisposer(\"sprite-togglable\", value, function () { return _this.events.on(\"hit\", _this.handleToggle, _this, false); });\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Handles toggling of the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param ev Event\r\n     */\r\n    Sprite.prototype.handleToggle = function (ev) {\r\n        this.isActive = !this.isActive;\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"contextMenuDisabled\", {\r\n        /**\r\n         * @return Context menu disabled?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"contextMenuDisabled\");\r\n        },\r\n        /**\r\n         * Should element prevent context menu to be displayed, e.g. when\r\n         * right-clicked?\r\n         *\r\n         * @default false\r\n         * @param value Context menu disabled?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"contextMenuDisabled\", value)) {\r\n                this.interactions.contextMenuDisabled = value;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"url\", {\r\n        /**\r\n         * @return URL\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"url\");\r\n        },\r\n        /**\r\n         * Click-through URL for this element.\r\n         *\r\n         * If set, clicking/tapping this element will open the new URL in a target\r\n         * window/tab as set by `urlTarget`.\r\n         *\r\n         * Please note that URL will be parsed by data placeholders in curly\r\n         * brackets, to be populated from data. E.g.:\r\n         *\r\n         * ```TypeScript\r\n         * series.columns.template.url = \"https://www.google.com/search?q={category.urlEncode()}\";\r\n         * ```\r\n         * ```JavaScript\r\n         * series.columns.template.url = \"https://www.google.com/search?q={category.urlEncode()}\";\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"series\": [{\r\n         *     // ...\r\n         *     \"columns\": {\r\n         *       \"url\": \"https://www.google.com/search?q={category.urlEncode()}\"\r\n         *     }\r\n         *   }]\r\n         * }\r\n         * ```\r\n         *\r\n         * @param value URL\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"url\", value)) {\r\n                if (this._urlDisposer) {\r\n                    this._urlDisposer.dispose();\r\n                }\r\n                // If URL is not empty, set up events\r\n                if ($utils.isNotEmpty(value)) {\r\n                    this._urlDisposer = this.events.on(\"hit\", this.urlHandler, this, false);\r\n                    // Set other required parameters\r\n                    this.clickable = true;\r\n                    this.cursorOverStyle = MouseCursorStyle.pointer;\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"baseId\", {\r\n        /**\r\n         * [baseId description]\r\n         *\r\n         * @ignore\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            if (!this._baseId && this._parent) {\r\n                this.baseId = this._parent.baseId;\r\n            }\r\n            return this._baseId;\r\n        },\r\n        /**\r\n         * [baseId description]\r\n         *\r\n         * @ignore\r\n         * @param  value  [description]\r\n         */\r\n        set: function (value) {\r\n            this.setBaseId(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Sprite.prototype.setBaseId = function (value) {\r\n        if (value != this._baseId) {\r\n            if (this.invalid) {\r\n                this.invalid = false;\r\n                registry.removeFromInvalidSprites(this);\r\n                this.invalidate();\r\n            }\r\n            this._baseId = value;\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"baseSprite\", {\r\n        /**\r\n         * Returns the mail chart object that this element belongs to.\r\n         *\r\n         * In most cases it will mean the chart object.\r\n         *\r\n         * Can be used to retrieve chart object in various events and adapters.\r\n         *\r\n         * ```TypeScript\r\n         * chart.seriesContainer.events.on(\"hit\", function(ev) {\r\n         *   console.log(ev.target.baseSprite);\r\n         * });\r\n         * ```\r\n         * ```JavaScript\r\n         * chart.seriesContainer.events.on(\"hit\", function(ev) {\r\n         *   console.log(ev.target.baseSprite);\r\n         * });\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"seriesContainer\": {\r\n         *     \"events\": {\r\n         *       \"hit\": function(ev) {\r\n         *         console.log(ev.target.baseSprite);\r\n         *       }\r\n         *     }\r\n         *   }\r\n         * }\r\n         * ```\r\n         *\r\n         * @readonly\r\n         * @return  Base chart object\r\n         */\r\n        get: function () {\r\n            if (this.isBaseSprite) {\r\n                return this;\r\n            }\r\n            else if (this._parent) {\r\n                return this._parent.baseSprite;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"urlTarget\", {\r\n        /**\r\n         * @return URL target\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"urlTarget\");\r\n        },\r\n        /**\r\n         * Target to use for URL clicks:\r\n         *\r\n         * * _blank\r\n         * * _self (default)\r\n         * * _parent\r\n         * * _top\r\n         * * Name of the window/frame\r\n         *\r\n         * Ignored if `url` is not set.\r\n         *\r\n         * @param value URL target\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"urlTarget\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Handles URL transition on element click.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param ev An event object\r\n     */\r\n    Sprite.prototype.urlHandler = function (ev) {\r\n        // Is URL set?\r\n        if ($utils.isNotEmpty(this.url)) {\r\n            // Proceed to the URL\r\n            var url = this.populateString(this.url);\r\n            if (this.urlTarget === \"_self\") {\r\n                window.location.href = url;\r\n            }\r\n            else {\r\n                window.open(url, this.urlTarget);\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"swipeOptions\", {\r\n        /**\r\n         * ==========================================================================\r\n         * SWIPING GESTURE TRACKING\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Returns element's swipe gesture options.\r\n         *\r\n         * @return Swipe gesture options\r\n         */\r\n        get: function () {\r\n            if (!this.interactions.swipeOptions) {\r\n                if (this.virtualParent) {\r\n                    return this.virtualParent.swipeOptions;\r\n                }\r\n                if (this._parent) {\r\n                    return this._parent.swipeOptions;\r\n                }\r\n            }\r\n            return this.interactions.swipeOptions;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"swipeable\", {\r\n        /**\r\n         * @return Element swipable?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"swipeable\");\r\n        },\r\n        /**\r\n         * Controls if element is swipeable.\r\n         *\r\n         * Swipable element will invoke `swipe`, `swipeleft` and `swiperight` events,\r\n         * when quick horizontal drag action is performed with either mouse or touch.\r\n         *\r\n         * Please note that combining swipe and drag is possible, however will incur\r\n         * a slight but noticeable delay in drag start.\r\n         *\r\n         * @param value  Element swipable?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"swipeable\", value)) {\r\n                this.applyCursorStyle();\r\n                if (!value && !this.isInteractive()) {\r\n                    // void\r\n                }\r\n                else {\r\n                    this.interactions.swipeable = value;\r\n                }\r\n                //interaction.processSwipeable(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"trackable\", {\r\n        /**\r\n         * @return Track cursor movement over element?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"trackable\");\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * POINTER TRACKING\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Indicates if the element is trackable (mouse position over it is reported to\r\n         * event listeners).\r\n         *\r\n         * Will invoke `track` events whenever pointer (cursor) changes position\r\n         * while over element.\r\n         *\r\n         * Please note, touch devices will also invoke `track` events when touch\r\n         * point is moved while holding down on a trackable element.\r\n         *\r\n         * @param value Track cursor movement over element?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"trackable\", value)) {\r\n                if (!value && !this.isInteractive()) {\r\n                    // void\r\n                }\r\n                else {\r\n                    this.applyCursorStyle();\r\n                    this.interactions.trackable = value;\r\n                }\r\n                //interaction.processTrackable(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"wheelable\", {\r\n        /**\r\n         * @return Mouse wheel events enabled?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"wheelable\");\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * MOUSE-WHEEL RELATED\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Indicates if the element can be interacted with mouse wheel.\r\n         *\r\n         * Will invoke `wheel`, `wheelup`, `wheeldown`, `wheelleft`, and `wheelright`\r\n         * events when using mouse wheel over the element.\r\n         *\r\n         * @param value Mouse wheel events enabled?\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"wheelable\", value)) {\r\n                if (!value && !this.isInteractive()) {\r\n                    // void\r\n                }\r\n                else {\r\n                    this.applyCursorStyle();\r\n                    this.interactions.wheelable = value;\r\n                }\r\n                //interaction.processWheelable(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"resizable\", {\r\n        /**\r\n         * @return Element resizable?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"resizable\");\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * RESIZE\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Indicates if this element is resizable.\r\n         *\r\n         * Enabling resize will turn on various interactions on the element. Their\r\n         * actual functionality will depend on other properties.\r\n         *\r\n         * If the element also `draggable`, resize will only happen with two points\r\n         * of contact on a touch device.\r\n         *\r\n         * If the element is not draggable, resize can be performed with just one\r\n         * point of contact, touch or mouse.\r\n         *\r\n         * Will invoke `resize` event every time the size of the element changes.\r\n         *\r\n         * @param value  Element resizable?\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"resizable\", value)) {\r\n                if (!value && !this.isInteractive()) {\r\n                    // void\r\n                }\r\n                else {\r\n                    this.applyCursorStyle();\r\n                    this.interactions.resizable = value;\r\n                    // setEventDisposer will also remove listeners if value == false\r\n                    this.interactions.setEventDisposer(\"sprite-resizable\", value, function () { return new MultiDisposer([\r\n                        _this.events.on(\"down\", _this.handleDown, _this, false),\r\n                        _this.events.on(\"resize\", _this.handleResize, _this, false)\r\n                    ]); });\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Handles resize intermediate step.\r\n     *\r\n     * By default this method resizes actual element. Each element, can override\r\n     * this method to implement their own resize logic.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param ev Event object\r\n     */\r\n    Sprite.prototype.handleResize = function (ev) {\r\n        if (!this.interactions.isTouchProtected || !ev.touch) {\r\n            this._isResized = true;\r\n            this.scale = this.interactions.originalScale * ev.scale;\r\n            this.validatePosition();\r\n            /*center: (io.draggable\r\n            ? $math.getMidPoint(point1, point2)\r\n            : {\r\n                \"x\": io.originalPosition.x,\r\n                \"y\": io.originalPosition.y\r\n            })*/\r\n            //this.moveTo(this.originalPosition.x + ev.shift.x, this.originalPosition.y + ev.shift.y);\r\n            if (this.draggable || this.dragWhileResize) {\r\n                this._isDragged = false;\r\n                var svgPoint1 = $utils.documentPointToSvg(ev.point1, this.htmlContainer, this.svgContainer.cssScale);\r\n                var svgPoint2 = $utils.documentPointToSvg(ev.point2, this.htmlContainer, this.svgContainer.cssScale);\r\n                var svgMidPoint = $math.getMidPoint(svgPoint1, svgPoint2);\r\n                var parentPoint1 = $utils.documentPointToSprite(ev.startPoint1, this._parent);\r\n                var parentPoint2 = $utils.documentPointToSprite(ev.startPoint2, this._parent);\r\n                var originalPosition = this.interactions.originalPosition;\r\n                var originalScale = this.interactions.originalScale;\r\n                if (originalPosition) {\r\n                    var spritePoint1 = { x: (parentPoint1.x - originalPosition.x) / originalScale, y: (parentPoint1.y - originalPosition.y) / originalScale };\r\n                    var spritePoint2 = { x: (parentPoint2.x - originalPosition.x) / originalScale, y: (parentPoint2.y - originalPosition.y) / originalScale };\r\n                    var spriteMidPoint = $math.getMidPoint(spritePoint1, spritePoint2);\r\n                    var parentPoint = $utils.svgPointToSprite(svgMidPoint, this._parent);\r\n                    this.moveTo({ x: parentPoint.x - spriteMidPoint.x * this.scale, y: parentPoint.y - spriteMidPoint.y * this.scale }, undefined, undefined, true);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"cursorOptions\", {\r\n        /**\r\n         * ==========================================================================\r\n         * MOUSE-RELATED\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Returns element's cursor options.\r\n         *\r\n         * Cursor options usually define cursor style for various states of the\r\n         * hovered element.\r\n         *\r\n         * Elements inherit `cursorOptions` from their parents if they don't have\r\n         * them set explicitly.\r\n         *\r\n         * @see {@link ICursorOptions} for a list of available options\r\n         * @return Cursor options\r\n         */\r\n        get: function () {\r\n            if (!this.interactions.cursorOptions) {\r\n                if (this.virtualParent) {\r\n                    return this.virtualParent.cursorOptions;\r\n                }\r\n                if (this._parent) {\r\n                    return this._parent.cursorOptions;\r\n                }\r\n            }\r\n            return this.interactions.cursorOptions;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"cursorOverStyle\", {\r\n        /**\r\n         * A shortcut to setting mouse cursor on hover.\r\n         *\r\n         * Example:\r\n         *\r\n         * ```TypeScript\r\n         * series.slices.template.cursorOverStyle = am4core.MouseCursorStyle.pointer;\r\n         * ```\r\n         * ```JavaScript\r\n         * series.slices.template.cursorOverStyle = am4core.MouseCursorStyle.pointer;\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"series\": {\r\n         *     // ...\r\n         *     \"slices\": {\r\n         *       \"cursorOverStyle\": \"pointer\"\r\n         *     }\r\n         *   }\r\n         * }\r\n         * ```\r\n         *\r\n         * @param style An array of styles to apply onhover\r\n         */\r\n        set: function (style) {\r\n            if (!this.cursorOptions.overStyle) {\r\n                this.interactions.cursorOptions = {\r\n                    defaultStyle: this.cursorOptions.defaultStyle\r\n                };\r\n            }\r\n            this.cursorOptions.overStyle = style;\r\n            getInteraction().applyCursorOverStyle(this.interactions);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"cursorDownStyle\", {\r\n        /**\r\n         * A shortcut to setting mouse cursor when button is pressed down.\r\n         *\r\n         * Example:\r\n         *\r\n         * ```TypeScript\r\n         * series.slices.template.cursorDownStyle = am4core.MouseCursorStyle.grabbing;\r\n         * ```\r\n         * ```JavaScript\r\n         * series.slices.template.cursorDownStyle = am4core.MouseCursorStyle.grabbing;\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"series\": {\r\n         *     // ...\r\n         *     \"slices\": {\r\n         *       \"cursorDownStyle\": \"grabbing\"\r\n         *     }\r\n         *   }\r\n         * }\r\n         * ```\r\n         *\r\n         * @param style An array of styles to apply onhover\r\n         */\r\n        set: function (style) {\r\n            this.cursorOptions.downStyle = style;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Applies default cursor styles for interactable elements.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Determine if this is necessary. Maybe let's not apply any cursor styles by default\r\n     */\r\n    Sprite.prototype.applyCursorStyle = function () {\r\n        // Draggable styles\r\n        /*if (this.draggable) {\r\n\r\n            if (!$type.hasValue(this.cursorOptions.overStyle)) {\r\n                this.cursorOptions.overStyle = MouseCursorStyle.grab;\r\n            }\r\n\r\n            if (!$type.hasValue(this.cursorOptions.downStyle)) {\r\n                this.cursorOptions.downStyle = MouseCursorStyle.grabbing;\r\n            }\r\n        }*/\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"interactionsEnabled\", {\r\n        /**\r\n         * @return Is interaction enabled for this element?\r\n         */\r\n        get: function () {\r\n            var value = this.getPropertyValue(\"interactionsEnabled\");\r\n            if (value === false) {\r\n                return false;\r\n            }\r\n            if (this.virtualParent) {\r\n                return this.virtualParent.interactionsEnabled;\r\n            }\r\n            if (this._parent) {\r\n                return this._parent.interactionsEnabled;\r\n            }\r\n            return true;\r\n        },\r\n        /**\r\n         * Setting this to `false` will effectively disable all interactivity on the\r\n         * element.\r\n         *\r\n         * @param value  Is interaction enabled for this element?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"interactionsEnabled\", value)) {\r\n                var pointerEvents = null; // must be null, not \"null\"!\r\n                if (!value) {\r\n                    pointerEvents = \"none\";\r\n                }\r\n                else {\r\n                    // this is for IE\r\n                    this.group.node.style.pointerEvents = \"\";\r\n                }\r\n                this.group.node.style.pointerEvents = pointerEvents;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"exporting\", {\r\n        /**\r\n         * @return Export instance\r\n         */\r\n        get: function () {\r\n            return this.getExporting();\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * EXPORT-RELATED STUFF\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * An [[Export]] instance.\r\n         *\r\n         * Used to access API of the chart export functionality.\r\n         *\r\n         * If `exporting` is not set, the element inherits [[Export]] instance from\r\n         * its parents.\r\n         *\r\n         * Upon request, if no parent has such instance, a new one is created, using\r\n         * default settings, what in most cases is just enough.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/exporting/} for more info about exporting\r\n         * @param exp  Export\r\n         */\r\n        set: function (exp) {\r\n            this._exporting.set(exp, exp);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * This is here as a method so that inheriting classes could override it.\r\n     *\r\n     * @return Export instance\r\n     */\r\n    Sprite.prototype.getExporting = function () {\r\n        var _export = this._exporting.get();\r\n        if (_export) {\r\n            return _export;\r\n        }\r\n        else {\r\n            if (this.isStandaloneInstance || !this._parent) {\r\n                _export = new Export(this.svgContainer.SVGContainer);\r\n                _export.sprite = this;\r\n                _export.language = this.language;\r\n                _export.numberFormatter = this.numberFormatter;\r\n                _export.dateFormatter = this.dateFormatter;\r\n                _export.durationFormatter = this.durationFormatter;\r\n                this._exporting.set(_export, _export);\r\n            }\r\n            else {\r\n                return this._parent.exporting;\r\n            }\r\n        }\r\n        return _export;\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"exportable\", {\r\n        /**\r\n         * @return Export?\r\n         */\r\n        get: function () {\r\n            return this._exportable;\r\n            /*const svgContainer = this.svgContainer;\r\n            return !svgContainer || $array.indexOf(svgContainer.nonExportableSprites, this) == -1;*/\r\n        },\r\n        /**\r\n         * If set to `false` this element will be omitted when exporting the chart\r\n         * to an image.\r\n         *\r\n         * @default true\r\n         * @param value  Export?\r\n         */\r\n        set: function (value) {\r\n            var svgContainer = this.svgContainer;\r\n            this._exportable = value;\r\n            if (svgContainer) {\r\n                if (value) {\r\n                    $array.remove(svgContainer.nonExportableSprites, this);\r\n                }\r\n                else if ($array.indexOf(svgContainer.nonExportableSprites, this) == -1) {\r\n                    svgContainer.nonExportableSprites.push(this);\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * ==========================================================================\r\n     * MODAL/POPUP RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Private method to be used for \"classPrefix\" adapter for modals/popups.\r\n     *\r\n     * @param value  Prefix\r\n     */\r\n    Sprite.prototype.modalPrefix = function (value) {\r\n        value = options.classNamePrefix + value;\r\n        return value;\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"modal\", {\r\n        /**\r\n         * Returns a [[Modal]] instance, associated with this chart.\r\n         * (elements top parent)\r\n         *\r\n         * Accessing modal does not make it appear. To make a modal appear, use\r\n         * `showModal()` method.\r\n         *\r\n         * @see {@link Modal} for more information about using Modal windows\r\n         * @return Modal instance\r\n         */\r\n        get: function () {\r\n            var svgContainer = this.svgContainer;\r\n            if (svgContainer) {\r\n                var modal = svgContainer.modal;\r\n                if (!modal.adapter.has(\"classPrefix\", this.modalPrefix)) {\r\n                    modal.adapter.add(\"classPrefix\", this.modalPrefix);\r\n                }\r\n                return modal;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Opens a modal window with specific content (`text` parameter) and,\r\n     * optionally, `title`.\r\n     *\r\n     * The `text` parameter can contain HTML content.\r\n     *\r\n     * @see {@link Modal} for more information about using Modal windows\r\n     * @param text   Modal contents\r\n     * @param title  Title for the modal window\r\n     */\r\n    Sprite.prototype.openModal = function (text, title) {\r\n        var svgContainer = this.svgContainer;\r\n        if (svgContainer) {\r\n            return svgContainer.openModal(text, title);\r\n        }\r\n    };\r\n    /**\r\n     * Hides modal window if there is one currently open.\r\n     */\r\n    Sprite.prototype.closeModal = function () {\r\n        var svgContainer = this.svgContainer;\r\n        if (svgContainer) {\r\n            svgContainer.closeModal();\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"popups\", {\r\n        /**\r\n         * A list of popups for this chart.\r\n         *\r\n         * @return Popups\r\n         */\r\n        get: function () {\r\n            var svgContainer = this.svgContainer;\r\n            if (svgContainer) {\r\n                var popups = svgContainer.popups;\r\n                popups.template.sprite = this;\r\n                if (!popups.template.adapter.has(\"classPrefix\", this.modalPrefix)) {\r\n                    popups.template.adapter.add(\"classPrefix\", this.modalPrefix);\r\n                }\r\n                return popups;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates, opens, and returns a new [[Popup]] window.\r\n     *\r\n     * `text` can be any valid HTML.\r\n     *\r\n     * `title` is currently not supported.\r\n     *\r\n     * @param text   Popup contents\r\n     * @param title  Popup title\r\n     * @return Popup instance\r\n     */\r\n    Sprite.prototype.openPopup = function (text, title) {\r\n        var svgContainer = this.svgContainer;\r\n        if (svgContainer) {\r\n            return svgContainer.openPopup(text, title);\r\n        }\r\n    };\r\n    /**\r\n     * Closes all currently open popup windows\r\n     */\r\n    Sprite.prototype.closeAllPopups = function () {\r\n        var svgContainer = this.svgContainer;\r\n        if (svgContainer) {\r\n            svgContainer.closeAllPopups();\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"x\", {\r\n        /**\r\n         * @return X coordinate\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"x\");\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * POSITIONAL PROPERTIES AND RELATED STUFF\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Element's absolute or relative X coordinate.\r\n         *\r\n         * If setting both X and Y, please consider using `moveTo()` method instead,\r\n         * as it will be faster to set both coordinates at once.\r\n         *\r\n         * @param value X coordinate\r\n         */\r\n        set: function (value) {\r\n            if (!this.isDragged) {\r\n                this.setPercentProperty(\"x\", value, false, true, this._positionPrecision, true);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelX\", {\r\n        /**\r\n         * Returns element's current absolute X coordinate in pixels.\r\n         *\r\n         * @readonly\r\n         * @return X coordinate (px)\r\n         */\r\n        get: function () {\r\n            var value = $math.fitToRange(this.getPixelX(this.x), this.minX, this.maxX);\r\n            if (!this._adapterO) {\r\n                return value;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"pixelX\", value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"relativeX\", {\r\n        /**\r\n         * Returns element's current relative X coordinate in [[Percent]].\r\n         *\r\n         * @return X coordinate ([[Percent]])\r\n         */\r\n        get: function () {\r\n            if (!this._adapterO) {\r\n                return this.getRelativeX(this.x);\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"relativeX\", this.getRelativeX(this.x));\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"minX\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Min X (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"minX\");\r\n        },\r\n        /**\r\n         * The smallest allowable absolute X coordinate for this element.\r\n         *\r\n         * This is used to contain element movement within certain boundaries.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value Min X (px)\r\n         */\r\n        set: function (value) {\r\n            if ($type.isNumber(value)) {\r\n                value = $math.round(value, this._positionPrecision, true);\r\n                this.setPropertyValue(\"minX\", value, false, true);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"maxX\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Max X (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maxX\");\r\n        },\r\n        /**\r\n         * The biggest allowable absolute X coordinate for this element.\r\n         *\r\n         * This is used to contain element movement within certain boundaries.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value Max X (px)\r\n         */\r\n        set: function (value) {\r\n            if ($type.isNumber(value)) {\r\n                value = $math.round(value, this._positionPrecision, true);\r\n                this.setPropertyValue(\"maxX\", value, false, true);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"y\", {\r\n        /**\r\n         * @return Y coordinate\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"y\");\r\n        },\r\n        /**\r\n         * Element's absolute or relative Y coordinate.\r\n         *\r\n         * If setting both X and Y, please consider using `moveTo()` method instead,\r\n         * as it will be faster to set both coordinates at once.\r\n         *\r\n         * @param value  Y coordinate\r\n         */\r\n        set: function (value) {\r\n            if (!this.isDragged) {\r\n                this.setPercentProperty(\"y\", value, false, true, this._positionPrecision, true);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelY\", {\r\n        /**\r\n         * Returns element's current absolute Y coordinate in pixels.\r\n         *\r\n         * @readonly\r\n         * @return Y coordinate (px)\r\n         */\r\n        get: function () {\r\n            var value = $math.fitToRange(this.getPixelY(this.y), this.minY, this.maxY);\r\n            if (!this._adapterO) {\r\n                return value;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"pixelY\", value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"relativeY\", {\r\n        /**\r\n         * Returns element's current relative Y coordinate in [[Percent]].\r\n         *\r\n         * @readonly\r\n         * @return Y coordinate ([[Percent]])\r\n         */\r\n        get: function () {\r\n            if (!this._adapterO) {\r\n                return this.getRelativeX(this.y);\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"relativeY\", this.getRelativeX(this.y));\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"minY\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Min Y (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"minY\");\r\n        },\r\n        /**\r\n         * The smallest allowable absolute Y coordinate for this element.\r\n         *\r\n         * This is used to contain element movement within certain boundaries.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value Min Y (px)\r\n         */\r\n        set: function (value) {\r\n            if ($type.isNumber(value)) {\r\n                value = $math.round(value, this._positionPrecision, true);\r\n                this.setPropertyValue(\"minY\", value, false, true);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"maxY\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Max Y (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maxY\");\r\n        },\r\n        /**\r\n         * The biggest allowable absolute Y coordinate for this element.\r\n         *\r\n         * This is used to contain element movement within certain boundaries.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value  Max Y (px)\r\n         */\r\n        set: function (value) {\r\n            if ($type.isNumber(value)) {\r\n                value = $math.round(value, this._positionPrecision, true);\r\n                this.setPropertyValue(\"maxY\", value, false, true);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"dx\", {\r\n        /**\r\n         * @return Horizontal offset (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"dx\");\r\n        },\r\n        /**\r\n         * A horizontal offset for the element in pixels.\r\n         *\r\n         * Can be negative value for offset to the left.\r\n         *\r\n         * @param value  Horizontal offset (px)\r\n         */\r\n        set: function (value) {\r\n            if ($type.isNumber(value)) {\r\n                value = $math.round(value, this._positionPrecision, true);\r\n                this.setPropertyValue(\"dx\", value, false, true);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"dy\", {\r\n        /**\r\n         * @return Vertical offset (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"dy\");\r\n        },\r\n        /**\r\n         * A vertical offset for the element in pixels.\r\n         *\r\n         * Can be negative value for offset upwards.\r\n         *\r\n         * @param value  Vertical offset (px)\r\n         */\r\n        set: function (value) {\r\n            if ($type.isNumber(value)) {\r\n                value = $math.round(value, this._positionPrecision, true);\r\n                this.setPropertyValue(\"dy\", value, false, true);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"rotation\", {\r\n        /**\r\n         * @return Rotation (0-360)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"rotation\");\r\n        },\r\n        /**\r\n         * Rotation of the element in degrees. (0-360)\r\n         *\r\n         * Note: For convenience purposes, negative values (for counter-clockwise\r\n         * rotation) and values exceeding 360 can also be used.\r\n         *\r\n         * @param value  Rotation (0-360)\r\n         */\r\n        set: function (value) {\r\n            value = $type.toNumber(value);\r\n            if (!$type.isNumber(value)) {\r\n                value = 0;\r\n            }\r\n            this.setPropertyValue(\"rotation\", value, false, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"align\", {\r\n        /**\r\n         * @return Horizontal align\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"align\");\r\n        },\r\n        /**\r\n         * Controls horizontal alignment of the element.\r\n         *\r\n         * This is used by parent [[Container]] when layouting its children.\r\n         *\r\n         * @param value  Horizontal align\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"align\", value)) {\r\n                if (this._parent) {\r\n                    this._parent.invalidateLayout();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"valign\", {\r\n        /**\r\n         * @return Vertical align\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"valign\");\r\n        },\r\n        /**\r\n         * Controls vertical alignment of the element.\r\n         *\r\n         * This is used by parent [[Container]] when layouting its children.\r\n         *\r\n         * @param value  Vertical align\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"valign\", value)) {\r\n                if (this._parent) {\r\n                    this._parent.invalidateLayout();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"horizontalCenter\", {\r\n        /**\r\n         * @return Horizontal center\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"horizontalCenter\");\r\n        },\r\n        /**\r\n         * Controls which part of the element to treat as a horizontal center.\r\n         *\r\n         * The setting will be used when positioning, resizing and rotating the\r\n         * element.\r\n         *\r\n         * @param value  Horizontal center\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"horizontalCenter\", value)) {\r\n                this.updateCenter();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"verticalCenter\", {\r\n        /**\r\n         * @return Vertical center\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"verticalCenter\");\r\n        },\r\n        /**\r\n         * Controls which part of the element to treat as a vertical center.\r\n         *\r\n         * The setting will be used when positioning, resizing and rotating the\r\n         * element.\r\n         *\r\n         * @param value  Vertical center\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"verticalCenter\", value)) {\r\n                this.updateCenter();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"maxWidth\", {\r\n        /**\r\n         * @return Maximum width (px)\r\n         */\r\n        get: function () {\r\n            var maxWidth = this.getPropertyValue(\"maxWidth\");\r\n            if (!$type.isNumber(maxWidth)) {\r\n                if (this._parent) {\r\n                    var parentWidth = this._parent.maxWidth;\r\n                    if (this._parent.layout != \"absolute\" && this.align != \"none\" && this.align != undefined) {\r\n                        parentWidth = parentWidth - this.pixelMarginLeft - this.pixelMarginRight;\r\n                    }\r\n                    return parentWidth;\r\n                }\r\n            }\r\n            return maxWidth;\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * DIMENSIONAL PROPERTIES AND RELATED STUFF\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Maximum allowed width for the element in pixels.\r\n         *\r\n         * @param value  Maximum width (px)\r\n         */\r\n        set: function (value) {\r\n            this.setMaxWidth(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Sprite.prototype.setMaxWidth = function (value) {\r\n        var prevWidth = this.maxWidth;\r\n        var prevHeight = this.maxHeight;\r\n        if (this.setPropertyValue(\"maxWidth\", value)) {\r\n            if ($type.isNumber(this.relativeWidth)) {\r\n                this.invalidate();\r\n            }\r\n            var event_2 = {\r\n                type: \"maxsizechanged\",\r\n                target: this,\r\n                previousWidth: prevWidth,\r\n                previousHeight: prevHeight\r\n            };\r\n            this.dispatchImmediately(\"maxsizechanged\", event_2);\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"maxHeight\", {\r\n        /**\r\n         * @return Maximum height (px)\r\n         */\r\n        get: function () {\r\n            var maxHeight = this.getPropertyValue(\"maxHeight\");\r\n            if (!$type.isNumber(maxHeight)) {\r\n                if (this._parent) {\r\n                    var parentHeight = this._parent.maxHeight;\r\n                    if (this._parent.layout != \"absolute\" && this.valign != \"none\" && this.valign != undefined) {\r\n                        parentHeight = parentHeight - this.pixelMarginTop - this.pixelMarginBottom;\r\n                    }\r\n                    return parentHeight;\r\n                }\r\n            }\r\n            return maxHeight;\r\n        },\r\n        /**\r\n         * Maximum allowed height for the element in pixels.\r\n         *\r\n         * @param value  Maximum height (px)\r\n         */\r\n        set: function (value) {\r\n            this.setMaxHeight(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Sprite.prototype.setMaxHeight = function (value) {\r\n        var prevWidth = this.maxWidth;\r\n        var prevHeight = this.maxHeight;\r\n        if (this.setPropertyValue(\"maxHeight\", value)) {\r\n            if ($type.isNumber(this.relativeHeight)) {\r\n                this.invalidate();\r\n            }\r\n            var event_3 = {\r\n                type: \"maxsizechanged\",\r\n                target: this,\r\n                previousWidth: prevWidth,\r\n                previousHeight: prevHeight\r\n            };\r\n            this.dispatchImmediately(\"maxsizechanged\", event_3);\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"minWidth\", {\r\n        /**\r\n         * @return Minimum width (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"minWidth\");\r\n        },\r\n        /**\r\n         * Minimum width of the element in pixels.\r\n         *\r\n         * Set to `undefined` to remove the limit.\r\n         *\r\n         * @param value  Minimum width (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"minWidth\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"minHeight\", {\r\n        /**\r\n         * @return Minimum height (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"minHeight\");\r\n        },\r\n        /**\r\n         * Minimum height for the element in pixels.\r\n         *\r\n         * Set to `undefined` to remove the limit.\r\n         *\r\n         * @param value  Minimum height (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"minHeight\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"width\", {\r\n        /**\r\n         * @return Width (absolute or relative)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"width\");\r\n        },\r\n        /**\r\n         * Element's absolute or relative width.\r\n         *\r\n         * The width can either be absolute, set in numeric pixels, or relative, set\r\n         * in [[Percent]].\r\n         *\r\n         * Relative width will be calculated using closest measured ancestor\r\n         * [[Container]].\r\n         *\r\n         * NOTE: `width` is an accessor, which allows setting width in pixels or\r\n         * percent. It is a sort of a \"shortcut\" for the users. Actual renderer does\r\n         * not ever use it. It uses either `pixelWidth` or `percentWidth`, so if\r\n         * you need to add an adapter for width add it for either of the two\r\n         * properties - whichever suits your requirements.\r\n         *\r\n         * @param value  Width (numeric in pixels or relative)\r\n         */\r\n        set: function (value) {\r\n            var changed = this.setPercentProperty(\"width\", value, true, false, this._positionPrecision, true);\r\n            if (changed) {\r\n                this.percentWidth = undefined;\r\n                this.relativeWidth = undefined;\r\n                if (value instanceof Percent) {\r\n                    this.percentWidth = value.percent;\r\n                    if ($type.isNumber(this._pixelWidth)) {\r\n                        this.maxWidth = undefined;\r\n                    }\r\n                    this._pixelWidth = undefined;\r\n                }\r\n                else {\r\n                    this._pixelWidth = Number(value);\r\n                    //this._measuredWidth = this._pixelWidth;\r\n                    this.maxWidth = this._pixelWidth;\r\n                }\r\n                this.invalidatePosition();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"height\", {\r\n        /**\r\n         * @return height (absolute or relative)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"height\");\r\n        },\r\n        /**\r\n         * Element's absolute or relative height.\r\n         *\r\n         * The height can either be absolute, set in numeric pixels, or relative, set\r\n         * in [[Percent]].\r\n         *\r\n         * Relative height will be calculated using closest measured ancestor\r\n         * [[Container]].\r\n         *\r\n         * NOTE: `height` is an accessor, which allows setting height in pixels or\r\n         * percent. It is a sort of a \"shortcut\" for the users. Actual renderer does\r\n         * not ever use it. It uses either `pixelHeight` or `percentHeight`, so if\r\n         * you need to add an adapter for height add it for either of the two\r\n         * properties - whichever suits your requirements.\r\n         *\r\n         * @param value  Height (numeric in pixels or relative)\r\n         */\r\n        set: function (value) {\r\n            var changed = this.setPercentProperty(\"height\", value, true, false, this._positionPrecision, true);\r\n            if (changed) {\r\n                this.percentHeight = undefined;\r\n                this._relativeHeight = undefined;\r\n                if (value instanceof Percent) {\r\n                    this.percentHeight = value.percent;\r\n                    if ($type.isNumber(this._pixelHeight)) {\r\n                        this.maxHeight = undefined;\r\n                    }\r\n                    this._pixelHeight = undefined;\r\n                }\r\n                else {\r\n                    this._pixelHeight = Number(value);\r\n                    //this._measuredHeight = this._pixelHeight;\r\n                    this.maxHeight = this._pixelHeight; // yes, we reset maxWidth\r\n                }\r\n                this.invalidatePosition();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelWidth\", {\r\n        /**\r\n         * Returns element's width in pixels, if width was set. For actual width use measuredWidth property.\r\n         *\r\n         * @readonly\r\n         * @return Width (px)\r\n         */\r\n        get: function () {\r\n            var width;\r\n            if ($type.isNumber(this.percentWidth)) {\r\n                width = this.maxWidth;\r\n            }\r\n            else if ($type.isNumber(this._pixelWidth)) {\r\n                width = this._pixelWidth;\r\n            }\r\n            else {\r\n                width = 0;\r\n            }\r\n            var minWidth = this.minWidth;\r\n            if (minWidth != null && width < minWidth) {\r\n                width = minWidth;\r\n            }\r\n            var value = $math.round(width, this._positionPrecision, true);\r\n            if (!this._adapterO) {\r\n                return value;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"pixelWidth\", value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelHeight\", {\r\n        /**\r\n         * Returns element's height in pixels. For actual height use measuredHeight property.\r\n         *\r\n         * @readonly\r\n         * @return Height (px)\r\n         */\r\n        get: function () {\r\n            var height;\r\n            if ($type.isNumber(this.percentHeight)) {\r\n                height = this.maxHeight;\r\n            }\r\n            else if ($type.isNumber(this._pixelHeight)) {\r\n                height = this._pixelHeight;\r\n            }\r\n            else {\r\n                height = 0; //this._measuredHeightSelf;\r\n            }\r\n            var minHeight = this.minHeight;\r\n            if (minHeight != null && height < minHeight) {\r\n                height = minHeight;\r\n            }\r\n            var value = $math.round(height, this._positionPrecision, true);\r\n            if (!this._adapterO) {\r\n                return value;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"pixelHeight\", value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"relativeWidth\", {\r\n        /**\r\n         * @return Relative width\r\n         * @ignore\r\n         */\r\n        get: function () {\r\n            var relativeWidth = this._relativeWidth;\r\n            if ($type.isNumber(relativeWidth)) {\r\n                if (!this._adapterO) {\r\n                    return relativeWidth;\r\n                }\r\n                else {\r\n                    return this._adapterO.apply(\"relativeWidth\", relativeWidth);\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * Element's relative width in [[Percent]].\r\n         * @ignore\r\n         *\r\n         * @param value  Relative width\r\n         */\r\n        set: function (value) {\r\n            if (this._relativeWidth != value) {\r\n                this._relativeWidth = value;\r\n                //\t\t\tthis.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"relativeHeight\", {\r\n        /**\r\n         * @return Relative height\r\n         * @ignore\r\n         */\r\n        get: function () {\r\n            var relativeHeight = this._relativeHeight;\r\n            if ($type.isNumber(relativeHeight)) {\r\n                if (!this._adapterO) {\r\n                    return relativeHeight;\r\n                }\r\n                else {\r\n                    return this._adapterO.apply(\"relativeHeight\", relativeHeight);\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * Element's relative height in [[Percent]].\r\n         *\r\n         * @param value  Relative height\r\n         * @ignore\r\n         */\r\n        set: function (value) {\r\n            if (this._relativeHeight != value) {\r\n                this._relativeHeight = value;\r\n                //\t\t\tthis.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"measuredWidth\", {\r\n        /**\r\n         * Returns element's measured width in pixels.\r\n         *\r\n         * A measured width is actual width of contents plus `paddingRight` and* `paddingLeft`, relative to sprite parent, meaning that\r\n         * rotation and scale is taken into account.\r\n         *\r\n         * @readonly\r\n         * @return Width (px)\r\n         */\r\n        get: function () {\r\n            if (this.disabled || this.__disabled) {\r\n                return 0;\r\n            }\r\n            if (!this._adapterO) {\r\n                return this._measuredWidth;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"measuredWidth\", this._measuredWidth);\r\n            }\r\n            // it's not good to fit to min/max range as then rotations and scale won't be taken into account\r\n            //return this.adapter.apply(\"measuredWidth\", $math.fitToRange(this._measuredWidth, this.minWidth, this.maxWidth));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"measuredHeight\", {\r\n        /**\r\n         * Returns elements's measured height in pixels.\r\n         *\r\n         * A measured height is actual height of contents plus `paddingTop` and `paddingBottom`, relative to sprite parent, meaning that\r\n         * rotation and scale taken into account.\r\n         *\r\n         * @readonly\r\n         * @return Height (px)\r\n         */\r\n        get: function () {\r\n            if (this.disabled || this.__disabled) {\r\n                return 0;\r\n            }\r\n            // it's not good to fit to min/max range as then rotations and scale won't be taken into account\r\n            //return this.adapter.apply(\"measuredHeight\", $math.fitToRange(this._measuredHeight, this.minHeight, this.maxHeight));\r\n            if (!this._adapterO) {\r\n                return this._measuredHeight;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"measuredHeight\", this._measuredHeight);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"outerWidth\", {\r\n        /**\r\n         * Returns element's measured width plus its left and right margins in\r\n         * pixels.\r\n         *\r\n         * @readonly\r\n         * @return Outer width (px)\r\n         */\r\n        get: function () {\r\n            var value = this.pixelWidth + this.pixelMarginRight + this.pixelMarginLeft;\r\n            if (!this._adapterO) {\r\n                return value;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"outerWidth\", value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"outerHeight\", {\r\n        /**\r\n         * Returns element's measured height plus its top and bottom margins in\r\n         * pixels.\r\n         *\r\n         * @readonly\r\n         * @return Outer height (px)\r\n         */\r\n        get: function () {\r\n            var value = this.pixelHeight + this.pixelMarginTop + this.pixelMarginBottom;\r\n            if (!this._adapterO) {\r\n                return value;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"outerHeight\", value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"innerWidth\", {\r\n        /**\r\n         * Returns element's measured inner width in pixels.\r\n         *\r\n         * Inner width is actual available space for content, e.g. element's width\r\n         * minus horizontal padding.\r\n         *\r\n         * @readonly\r\n         * @return Inner width (px)\r\n         */\r\n        get: function () {\r\n            var value = Math.max(0, this.pixelWidth - this.pixelPaddingRight - this.pixelPaddingLeft);\r\n            if (!this._adapterO) {\r\n                return value;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"innerWidth\", value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"innerHeight\", {\r\n        /**\r\n         * Returns element's measured inner height in pixels.\r\n         *\r\n         * Inner height is actual available space for content, e.g. element's height\r\n         * minus vertical padding.\r\n         *\r\n         * @readonly\r\n         * @return Inner height (px)\r\n         */\r\n        get: function () {\r\n            var value = Math.max(0, this.pixelHeight - this.pixelPaddingTop - this.pixelPaddingBottom);\r\n            if (!this._adapterO) {\r\n                return value;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"innerHeight\", value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"globalScale\", {\r\n        /**\r\n         * Returns element's current \"global\" scale.\r\n         *\r\n         * Scale values accumulate over hierarchy of elements.\r\n         *\r\n         * E.g. if a [[Container]] has `scale = 2` and it's child has a `scale = 2`,\r\n         * the child's `globalScale` will be 4. (a multitude of `2 x 2`)\r\n         *\r\n         * @readonly\r\n         * @return Global scale\r\n         */\r\n        get: function () {\r\n            var scale = this.scale;\r\n            if (this._parent) {\r\n                scale = scale * this._parent.globalScale;\r\n            }\r\n            if (!this._adapterO) {\r\n                return scale;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"globalScale\", scale);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"scale\", {\r\n        /**\r\n         * @return Scale (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"scale\");\r\n        },\r\n        /**\r\n         * Scale of the element.\r\n         *\r\n         * The scale is set from 0 (element reduced to nothing) to 1 (default size).\r\n         * * 2 will mean element is increased twice.\r\n         * * 0.5 - reduced by 50%.\r\n         *\r\n         * Etc.\r\n         *\r\n         * @param value  Scale (0-1)\r\n         */\r\n        set: function (value) {\r\n            value = $type.toNumber(value);\r\n            if (value < 0) {\r\n                value = 0;\r\n            }\r\n            if (value != this.getPropertyValue(\"scale\")) {\r\n                this.setPropertyValue(\"scale\", value, false, true);\r\n                this.handleGlobalScale();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets all four margins for the element at once.\r\n     *\r\n     * Margins are set in pixels.\r\n     *\r\n     * @param top     Top margin\r\n     * @param right   Right margin\r\n     * @param bottom  Bottom margin\r\n     * @param left    Left margin\r\n     * @return Current element\r\n     */\r\n    Sprite.prototype.margin = function (top, right, bottom, left) {\r\n        this.marginTop = top;\r\n        this.marginRight = right;\r\n        this.marginBottom = bottom;\r\n        this.marginLeft = left;\r\n        return this;\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"marginLeft\", {\r\n        /**\r\n         * @return Margin value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"marginLeft\");\r\n        },\r\n        /**\r\n         * Left margin - absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param value  Margin value\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"marginLeft\", value, true, true, this._positionPrecision, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"marginRight\", {\r\n        /**\r\n         * @return Margin value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"marginRight\");\r\n        },\r\n        /**\r\n         * Right margin - absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param value  Margin value\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"marginRight\", value, true, true, this._positionPrecision, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"marginTop\", {\r\n        /**\r\n         * @return Margin value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"marginTop\");\r\n        },\r\n        /**\r\n         * Top margin - absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param value  Margin value\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"marginTop\", value, true, true, this._positionPrecision, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"marginBottom\", {\r\n        /**\r\n         * @return Margin value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"marginBottom\");\r\n        },\r\n        /**\r\n         * Bottom margin - absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param value  Margin value\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"marginBottom\", value, true, true, this._positionPrecision, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelMarginRight\", {\r\n        /**\r\n         * Returns current right margin in pixels.\r\n         *\r\n         * @readonly\r\n         * @return Right margin (px)\r\n         */\r\n        get: function () {\r\n            var value = this.getPixelX(this.marginRight);\r\n            if (!this._adapterO) {\r\n                return value;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"pixelMarginRight\", value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"relativeMarginRight\", {\r\n        /**\r\n         * Returns current relative right margin.\r\n         *\r\n         * @readonly\r\n         * @return Relative right margin\r\n         */\r\n        get: function () {\r\n            // @todo Maybe use [[Percent]]?\r\n            var value = this.getRelativeX(this.marginRight);\r\n            if (!this._adapterO) {\r\n                return value;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"relativeMarginRight\", value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelMarginLeft\", {\r\n        /**\r\n         * Returns current left margin in pixels.\r\n         *\r\n         * @readonly\r\n         * @return Left margin (px)\r\n         */\r\n        get: function () {\r\n            var value = this.getPixelX(this.marginLeft);\r\n            if (!this._adapterO) {\r\n                return value;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"pixelMarginLeft\", value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"relativeMarginLeft\", {\r\n        /**\r\n         * Returns current relative left margin.\r\n         *\r\n         * @readonly\r\n         * @return Relative left margin\r\n         */\r\n        get: function () {\r\n            //@todo Maybe use [[Percent]]?\r\n            var value = this.getRelativeX(this.marginLeft);\r\n            if (!this._adapterO) {\r\n                return value;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"relativeMarginLeft\", value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelMarginTop\", {\r\n        /**\r\n         * Returns current top margin in pixels.\r\n         *\r\n         * @readonly\r\n         * @return Top margin (px)\r\n         */\r\n        get: function () {\r\n            var value = this.getPixelY(this.marginTop);\r\n            if (!this._adapterO) {\r\n                return value;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"pixelMarginTop\", value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"relativeMarginTop\", {\r\n        /**\r\n         * Returns current relative top margin.\r\n         *\r\n         * @readonly\r\n         * @return Relative top margin\r\n         */\r\n        get: function () {\r\n            // @todo Maybe use [[Percent]]?\r\n            var value = this.getRelativeY(this.marginTop);\r\n            if (!this._adapterO) {\r\n                return value;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"relativeMarginTop\", value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelMarginBottom\", {\r\n        /**\r\n         * Returns current bottom margin in pixels.\r\n         *\r\n         * @readonly\r\n         * @return Bottom margin (px)\r\n         */\r\n        get: function () {\r\n            var value = this.getPixelY(this.marginBottom);\r\n            if (!this._adapterO) {\r\n                return value;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"pixelMarginBottom\", value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"relativeMarginBottom\", {\r\n        /**\r\n         * Returns current relative bottom margin.\r\n         *\r\n         * @readonly\r\n         * @return Relative bottom margin\r\n         */\r\n        get: function () {\r\n            // @todo Maybe use [[Percent]]?\r\n            var value = this.getRelativeY(this.marginBottom);\r\n            if (!this._adapterO) {\r\n                return value;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"relativeMarginBottom\", value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets padding for the element in pixels.\r\n     *\r\n     * @param top     Top padding (px)\r\n     * @param right   Right padding (px)\r\n     * @param bottom  Bottom padding (px)\r\n     * @param left    Left padding (px)\r\n     * @return Element\r\n     */\r\n    Sprite.prototype.padding = function (top, right, bottom, left) {\r\n        this.paddingTop = top;\r\n        this.paddingRight = right;\r\n        this.paddingBottom = bottom;\r\n        this.paddingLeft = left;\r\n        return this;\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"paddingLeft\", {\r\n        /**\r\n         * @return Padding value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"paddingLeft\");\r\n        },\r\n        /**\r\n         * Left padding - absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param value  Padding value\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"paddingLeft\", value, true, true, this._positionPrecision, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"paddingRight\", {\r\n        /**\r\n         * @return Padding value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"paddingRight\");\r\n        },\r\n        /**\r\n         * Right padding - absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param value  Padding value\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"paddingRight\", value, true, true, this._positionPrecision, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"paddingTop\", {\r\n        /**\r\n         * @return Padding value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"paddingTop\");\r\n        },\r\n        /**\r\n         * Top padding - absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param value  Padding value\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"paddingTop\", value, true, true, this._positionPrecision, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"paddingBottom\", {\r\n        /**\r\n         * @return Padding value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"paddingBottom\");\r\n        },\r\n        /**\r\n         * Bottom padding - absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param value  Padding value\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"paddingBottom\", value, true, true, this._positionPrecision, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelPaddingRight\", {\r\n        /**\r\n         * Returns current right padding in pixels.\r\n         *\r\n         * @readonly\r\n         * @return Right padding (px)\r\n         */\r\n        get: function () {\r\n            return this.getPixelX(this.paddingRight);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"relativePaddingRight\", {\r\n        /**\r\n         * Returns current relative right padding.\r\n         *\r\n         * @readonly\r\n         * @return Relative right padding\r\n         */\r\n        get: function () {\r\n            // @todo Maybe use [[Percent]]?\r\n            return this.getRelativeX(this.paddingRight);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelPaddingLeft\", {\r\n        /**\r\n         * Returns current left padding in pixels.\r\n         *\r\n         * @readonly\r\n         * @return Left padding (px)\r\n         */\r\n        get: function () {\r\n            return this.getPixelX(this.paddingLeft);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"relativePaddingLeft\", {\r\n        /**\r\n         * Returns current relative left padding.\r\n         *\r\n         * @readonly\r\n         * @return Relative left padding\r\n         */\r\n        get: function () {\r\n            // @todo Maybe use [[Percent]]?\r\n            return this.getRelativeX(this.paddingLeft);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelPaddingTop\", {\r\n        /**\r\n         * Returns current top padding in pixels.\r\n         *\r\n         * @readonly\r\n         * @return Top padding (px)\r\n         */\r\n        get: function () {\r\n            return this.getPixelY(this.paddingTop);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"relativePaddingTop\", {\r\n        /**\r\n         * Returns current relative top padding.\r\n         *\r\n         * @readonly\r\n         * @return Relative top padding\r\n         */\r\n        get: function () {\r\n            // @todo Maybe use [[Percent]]?\r\n            return this.getRelativeY(this.paddingTop);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelPaddingBottom\", {\r\n        /**\r\n         * Returns current bottom padding in pixels.\r\n         *\r\n         * @readonly\r\n         * @return Bottom padding (px)\r\n         */\r\n        get: function () {\r\n            return this.getPixelY(this.paddingBottom);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"relativePaddingBottom\", {\r\n        /**\r\n         * Returns current relative bottom padding.\r\n         *\r\n         * @readonly\r\n         * @return Relative bottom padding\r\n         */\r\n        get: function () {\r\n            // @todo Maybe use [[Percent]]?\r\n            return this.getRelativeY(this.paddingBottom);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"path\", {\r\n        /**\r\n         * @return Path of a Sprite element\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"path\");\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * APPEARANCE-RELATED PROPERTIES AND RELATED STUFF\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Path of Sprite element\r\n         */\r\n        set: function (value) {\r\n            this.setPath(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    Sprite.prototype.setPath = function (value) {\r\n        if (this.setPropertyValue(\"path\", value)) {\r\n            if (this._adapterO) {\r\n                value = this._adapterO.apply(\"path\", value);\r\n            }\r\n            if (!this._isPath) {\r\n                if (!this.element || (this.element.node && !(this.element.node instanceof SVGPathElement))) {\r\n                    this.element = this.paper.add(\"path\");\r\n                }\r\n                this._isPath = true;\r\n            }\r\n            if ($type.hasValue(value)) {\r\n                this.element.attr({ \"d\": value });\r\n            }\r\n            else {\r\n                this.element.removeAttr(\"d\");\r\n            }\r\n            this.invalidatePosition();\r\n            // otherwise is 0x0\r\n            if (!this.inited) {\r\n                this.events.once(\"inited\", this.validatePosition, this, false);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"fillModifier\", {\r\n        /**\r\n         * @return Fill color modifier\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"fillModifier\");\r\n        },\r\n        /**\r\n         * [[ColorModifier]] that can be used to modify color and pattern of the\r\n         * element's fill, e.g. create gradients.\r\n         *\r\n         * @param value  Fill color modifiier\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"fillModifier\", value)) {\r\n                this.setFill(this.fill);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"strokeModifier\", {\r\n        /**\r\n         * @return Stroke color modifier\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"strokeModifier\");\r\n        },\r\n        /**\r\n         * [[ColorModifier]] that can be used to modify color and pattern of the\r\n         * element's stroke (outline), e.g. create gradients.\r\n         *\r\n         * @param value  Stroke color modifier\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"strokeModifier\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"fillOpacity\", {\r\n        /**\r\n         * @return Opacity (0-9)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"fillOpacity\");\r\n        },\r\n        /**\r\n         * Element's fill opacity.\r\n         *\r\n         * Opacity ranges from 0 (fully transparent) to 1 (fully opaque).\r\n         *\r\n         * @param value  Opacity (0-1)\r\n         */\r\n        set: function (value) {\r\n            value = $math.toNumberRange(value, 0, 1);\r\n            if (this.setPropertyValue(\"fillOpacity\", value)) {\r\n                this.setSVGAttribute({ \"fill-opacity\": value });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"fill\", {\r\n        /**\r\n         * @return Fill\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"fill\");\r\n        },\r\n        /**\r\n         * Element's fill color or pattern.\r\n         *\r\n         * @param value  Fill\r\n         */\r\n        set: function (value) {\r\n            this.setFill(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets actual `fill` property on the SVG element, including applicable color\r\n     * modifiers.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Fill\r\n     */\r\n    Sprite.prototype.setFill = function (value) {\r\n        if (!$type.isObject(value) || \"r\" in value) {\r\n            value = toColor(value);\r\n        }\r\n        if (this.setColorProperty(\"fill\", value) || this.fillModifier) {\r\n            // this can not go into next if, as value is turned to Gradient\r\n            if (value instanceof Color) {\r\n                if (this.fillModifier) {\r\n                    value = this.fillModifier.modify(value);\r\n                }\r\n            }\r\n            this.realFill = value;\r\n            // todo: review this place when some Color type will be added\r\n            if (value instanceof Color) {\r\n                this.setSVGAttribute({ \"fill\": value.toString() });\r\n            }\r\n            else if (!$type.hasValue(value)) {\r\n                this.removeSVGAttribute(\"fill\");\r\n            }\r\n            else if (value instanceof Pattern || value instanceof LinearGradient || value instanceof RadialGradient) {\r\n                var fill = value;\r\n                fill.paper = this.paper;\r\n                this.setSVGAttribute({ \"fill\": \"url(\\\"\" + $utils.getBaseURI() + fill.id + \"\\\")\" });\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"opacity\", {\r\n        /**\r\n         * @return Opacity (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"opacity\");\r\n        },\r\n        /**\r\n         * Element's opacity.\r\n         *\r\n         * Opacity setting can range from 0 (fully transparent) to 1 (fully opaque).\r\n         *\r\n         * ATTENTION: It is highly not recommended to use `opacity` directly on the\r\n         * element. The charts use `opacity` to hide/show elements, so your setting\r\n         * might be lost if element is hidden and then later shown.\r\n         *\r\n         * Instead use methods `hide()` and `show()` to completely toggle off and on\r\n         * the element.\r\n         *\r\n         * Or, use properties `fillOpacity` and `strokeOpacity`, if you need to make\r\n         * the element semi-transparent.\r\n         *\r\n         * @param value Opacity (0-1)\r\n         */\r\n        set: function (value) {\r\n            value = $math.toNumberRange(value, 0, 1);\r\n            if (this.setPropertyValue(\"opacity\", value)) {\r\n                this.setSVGAttribute({ \"opacity\": value });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"stroke\", {\r\n        /**\r\n         * @return Stroke setting\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"stroke\");\r\n        },\r\n        /**\r\n         * Element's stroke (outline) color or pattern.\r\n         *\r\n         * @param value  Stroke setting\r\n         */\r\n        set: function (value) {\r\n            this.setStroke(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets actual `stroke` property on the SVG element, including applicable\r\n     * color modifiers.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Stroke setting\r\n     */\r\n    Sprite.prototype.setStroke = function (value) {\r\n        if (!$type.isObject(value) || \"r\" in value) {\r\n            value = toColor(value);\r\n        }\r\n        if (this.setColorProperty(\"stroke\", value) || this.strokeModifier) {\r\n            // this can not go into next if, as value is turned to Gradient\r\n            if (value instanceof Color) {\r\n                if (this.strokeModifier) {\r\n                    value = this.strokeModifier.modify(value);\r\n                }\r\n            }\r\n            this.realStroke = value;\r\n            if (value instanceof Color) {\r\n                if (value.hex == \"none\") {\r\n                    this.removeSVGAttribute(\"stroke\");\r\n                }\r\n                else {\r\n                    this.setSVGAttribute({ \"stroke\": value.toString() });\r\n                }\r\n            }\r\n            else if (!$type.hasValue(value)) {\r\n                this.removeSVGAttribute(\"stroke\");\r\n            }\r\n            else if (value instanceof Pattern || value instanceof LinearGradient || value instanceof RadialGradient) {\r\n                var stroke = value;\r\n                stroke.paper = this.paper;\r\n                this.setSVGAttribute({ \"stroke\": \"url(\\\"\" + $utils.getBaseURI() + stroke.id + \"\\\")\" });\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"strokeOpacity\", {\r\n        /**\r\n         * @return Opacity (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"strokeOpacity\");\r\n        },\r\n        /**\r\n         * Stroke (outline) opacity.\r\n         *\r\n         * The values may range from 0 (fully transparent) to 1 (fully opaque).\r\n         *\r\n         * @param value  Opacity (0-1)\r\n         */\r\n        set: function (value) {\r\n            value = $math.toNumberRange(value, 0, 1);\r\n            if (this.setPropertyValue(\"strokeOpacity\", value)) {\r\n                this.setSVGAttribute({ \"stroke-opacity\": value });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"nonScalingStroke\", {\r\n        /**\r\n         * @return Do not scale stroke (outline)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"nonScalingStroke\");\r\n        },\r\n        /**\r\n         * Controls if the element's stroke (outline) should remain keep constant\r\n         * thicnkess and do not scale when the whole element is resized.\r\n         *\r\n         * @param value  Do not scale stroke (outline)\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (this.setPropertyValue(\"nonScalingStroke\", value)) {\r\n                this.strokeWidth = this.strokeWidth;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"nonScaling\", {\r\n        /**\r\n         * @return Is element scaleable?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"nonScaling\");\r\n        },\r\n        /**\r\n         * Controls if element should keep constant size and not scale even if there is\r\n         * space available, or it does not fit.\r\n         *\r\n         * @param value  Is element scaleable?\r\n         */\r\n        set: function (value) {\r\n            // @todo Description (review)\r\n            value = $type.toBoolean(value);\r\n            this.setPropertyValue(\"nonScaling\", value, false, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"strokeWidth\", {\r\n        /**\r\n         * @return Thickness (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"strokeWidth\");\r\n        },\r\n        /**\r\n         * Stroke (outline) thickness in pixels.\r\n         *\r\n         * @param value  Thickness (px)\r\n         */\r\n        set: function (value) {\r\n            value = $type.toNumber(value);\r\n            this.setPropertyValue(\"strokeWidth\", value, true);\r\n            if (this.nonScalingStroke) {\r\n                if (!$type.isNumber(value)) {\r\n                    value = 1;\r\n                }\r\n                value = value / this.globalScale;\r\n            }\r\n            this.setSVGAttribute({ \"stroke-width\": value });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"strokeDasharray\", {\r\n        /**\r\n         * @return `stroke-dasharray`\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"strokeDasharray\");\r\n        },\r\n        /**\r\n         * A `stroke-dasharray` for the stroke (outline).\r\n         *\r\n         * \"Dasharray\" allows setting rules to make lines dashed, dotted, etc.\r\n         *\r\n         * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray} for more info on `stroke-dasharray`\r\n         * @param value  `stroke-dasharray`\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"strokeDasharray\", value)) {\r\n                this.setSVGAttribute({ \"stroke-dasharray\": value });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"strokeDashoffset\", {\r\n        /**\r\n         * @return `stroke-dashoffset`\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"strokeDashoffset\");\r\n        },\r\n        /**\r\n         * A `stroke-dashoffset` for the stroke (outline).\r\n         *\r\n         * \"Dashoffset\" allows setting the start position of the dashes if\r\n         * `strokeDasharray` is used.\r\n         *\r\n         * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dashoffset} for more info on `stroke-dashoffset`\r\n         * @param value  `stroke-dashoffset`\r\n         */\r\n        set: function (value) {\r\n            value = $type.toNumber(value);\r\n            if (this.setPropertyValue(\"strokeDashoffset\", value)) {\r\n                this.setSVGAttribute({ \"stroke-dashoffset\": value });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"strokeLinecap\", {\r\n        /**\r\n         * @return `stroke-linecap`\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"strokeLinecap\");\r\n        },\r\n        /**\r\n         * A `stroke-linecap` to indicate how line ends are drawn.\r\n         *\r\n         * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Fills_and_Strokes#Stroke} for more info on `stroke-linecap`\r\n         * @param value  `stroke-linecap`\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"strokeLinecap\", value)) {\r\n                this.setSVGAttribute({ \"stroke-linecap\": value });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"strokeLinejoin\", {\r\n        /**\r\n         * @return `stroke-linejoin`\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"strokeLinejoin\");\r\n        },\r\n        /**\r\n         * A `stroke-linejoin` to indicate how line ends are drawn.\r\n         *\r\n         * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Fills_and_Strokes#Stroke} for more info on `stroke-linejoin`\r\n         * @param value  `stroke-linejoin`\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"strokeLinejoin\", value)) {\r\n                this.setSVGAttribute({ \"stroke-linejoin\": value });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"shapeRendering\", {\r\n        /**\r\n         * @return 'shape-rendering' value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"shapeRendering\");\r\n        },\r\n        /**\r\n         * An SVG-specific `shape-rendering` value.\r\n         *\r\n         * `shape-rendering` controls how vector graphics are drawn and rendered.\r\n         *\r\n         * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering} for more information about `shape-rendering`\r\n         * @default \"auto\"\r\n         * @param value  'shape-rendering' value\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (this.setPropertyValue(\"shapeRendering\", value)) {\r\n                this.setSVGAttribute({ \"shape-rendering\": value });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"pixelPerfect\", {\r\n        /**\r\n         * @return Use pixel perfect?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"pixelPerfect\");\r\n        },\r\n        /**\r\n         * Controls if SVG vectors should be drawn with \"pixel\" precision, producing\r\n         * perfectly crisp lines on retina displays.\r\n         *\r\n         * Setting this to `true` might improve visual quality, but may have a\r\n         * negative effect on performance.\r\n         *\r\n         * Different elements use different default setting for `pixelPerfect`.\r\n         *\r\n         * We recommend leaving this at their default settings, unless there's a\r\n         * specific need.\r\n         *\r\n         * @param value  Use pixel perfect?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (value) {\r\n                this._positionPrecision = options.pixelPerfectPrecision;\r\n            }\r\n            else {\r\n                this._positionPrecision = 3;\r\n            }\r\n            this.setPropertyValue(\"pixelPerfect\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"rtl\", {\r\n        /**\r\n         * @return RTL?\r\n         */\r\n        get: function () {\r\n            if ($type.hasValue(this._rtl)) {\r\n                return this._rtl;\r\n            }\r\n            else if (this._topParent) {\r\n                return this._topParent.rtl;\r\n            }\r\n            //this.rtl = false;\r\n            return false;\r\n        },\r\n        /**\r\n         * An RTL (right-to-left) setting.\r\n         *\r\n         * RTL may affect alignment, text, and other visual properties.\r\n         *\r\n         * If you set this on a top-level chart object, it will be used for all\r\n         * child elements, e.g. labels, unless they have their own `rtl` setting\r\n         * set directly on them.\r\n         *\r\n         * @param value  `true` for to use RTL\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (this.isBaseSprite) {\r\n                this.topParent.rtl = value;\r\n            }\r\n            this._rtl = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * ==========================================================================\r\n     * VISIBILITY AND ORDER PROPERTIES AND RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Reveals hidden element.\r\n     *\r\n     * Has no effect if element is already visible.\r\n     *\r\n     * If `duration` is not specified, it will use default.\r\n     *\r\n     * @param duration  Fade in duration (ms)\r\n     * @return Animation object if such object was created\r\n     */\r\n    Sprite.prototype.show = function (duration) {\r\n        return this.showReal(duration);\r\n    };\r\n    /**\r\n     * Performs actual operations to reveal this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param duration Fade in duration (ms)\r\n     * @return Fade in duration (ms)\r\n     */\r\n    Sprite.prototype.showReal = function (duration) {\r\n        var _this = this;\r\n        if (this.preventShow) {\r\n            return;\r\n        }\r\n        var transition;\r\n        var properties = this.defaultState.properties;\r\n        if (!this.disabled && (this.isHidden || !this.visible || this.isHiding || (properties.opacity != null && this.opacity < properties.opacity && !this.isShowing)) && !this.isDisposed()) {\r\n            // helps to avoid flicker, as show might change opacity or visibility but item might be at invalid state/position\r\n            if (this.invalid) {\r\n                this.validate();\r\n            }\r\n            if (this.positionInvalid) {\r\n                this.validatePosition();\r\n            }\r\n            if (!$type.isNumber(duration)) {\r\n                duration = this.defaultState.transitionDuration;\r\n            }\r\n            if (this._hideAnimation) {\r\n                this._hideAnimation.kill();\r\n                this._hideAnimation = undefined;\r\n            }\r\n            // Cancel hide handler just in case it was there\r\n            if (this._showHideDisposer) {\r\n                this.removeDispose(this._showHideDisposer);\r\n            }\r\n            this._isHidden = false;\r\n            this.isHiding = false;\r\n            this.isShowing = true;\r\n            // Apply current state\r\n            transition = this.applyCurrentState(duration);\r\n            if (transition && !transition.isFinished()) {\r\n                this._showHideDisposer = transition.events.on(\"animationended\", function () {\r\n                    _this.isShowing = false;\r\n                });\r\n                this._disposers.push(this._showHideDisposer);\r\n            }\r\n            else {\r\n                this.isShowing = false;\r\n            }\r\n            // Make it visible\r\n            var visible = this.defaultState.properties.visible;\r\n            if (!$type.hasValue(visible)) {\r\n                visible = true;\r\n            }\r\n            this.visible = visible;\r\n            // Unhide from screen readers\r\n            this.readerHidden = false;\r\n            // Dispatch \"show\" event\r\n            this.dispatchImmediately(\"shown\");\r\n        }\r\n        return transition;\r\n    };\r\n    /**\r\n     * Initiates hiding of Sprite.\r\n     * When called it will fade out the the Sprite to transparency, then make it\r\n     * invisible.\r\n     * @param duration Duration in millisecons\r\n     */\r\n    /**\r\n     * Hides the element, by applying `hidden` state.\r\n     *\r\n     * Has no effect if element is already hidden.\r\n     *\r\n     * If `duration` is not specified, it will use default.\r\n     *\r\n     * While element is fading out, its `isHiding` property will resolve to\r\n     * `true`.\r\n     *\r\n     * When element is hidden, its `visible` property will resolve to `false`.\r\n     *\r\n     * @param duration  Fade out duration (ms)\r\n     * @return hide Animation object if such object was created\r\n     */\r\n    Sprite.prototype.hide = function (duration) {\r\n        return this.hideReal(duration);\r\n    };\r\n    /**\r\n     * Hides actual SVG elements and handles hiding animations.\r\n     *\r\n     * @param duration  Fade out duration (ms)\r\n     * @return Fade out duration (ms)\r\n     * @ignore\r\n     */\r\n    Sprite.prototype.hideReal = function (duration) {\r\n        var _this = this;\r\n        var transition;\r\n        if (!this.isHiding && this.visible && !this.isDisposed()) {\r\n            // added to solve 51375\r\n            if (this.tooltip && this.tooltip.currentSprite == this) {\r\n                this.hideTooltip(0);\r\n            }\r\n            if (this._hideAnimation) {\r\n                this._hideAnimation.kill();\r\n                this._hideAnimation = undefined;\r\n            }\r\n            this.isShowing = false;\r\n            // Cancel hide handler just in case it was there\r\n            if (this._showHideDisposer) {\r\n                this.removeDispose(this._showHideDisposer);\r\n            }\r\n            // Get state\r\n            var hiddenState_1 = this.hiddenState;\r\n            // Transition to \"hidden\" state, provided Sprite has one set\r\n            if (hiddenState_1) {\r\n                // Yes, we have a \"hidden\" state\r\n                // `setState` will return an `Animation` object which we can set\r\n                // events on\r\n                transition = this.setState(hiddenState_1, duration, undefined);\r\n                if (transition && !transition.isFinished()) {\r\n                    this._hideAnimation = transition;\r\n                    this._showHideDisposer = transition.events.on(\"animationended\", function () {\r\n                        _this.isHiding = false;\r\n                        _this._isHidden = true;\r\n                        if (hiddenState_1.properties.visible == false) {\r\n                            _this.visible = false;\r\n                        }\r\n                    }, this);\r\n                    this._disposers.push(this._showHideDisposer);\r\n                    // Thrown everything into `_disposers` just in case Sprite gets\r\n                    // destroyed in the meantime\r\n                    this._disposers.push(transition);\r\n                }\r\n                else {\r\n                    this.isHiding = false;\r\n                    this._isHidden = true;\r\n                }\r\n            }\r\n            else {\r\n                // No hidden state, let's just set `visible` and call it a day\r\n                this.visible = false;\r\n                this.isHiding = false;\r\n                this._isHidden = true;\r\n            }\r\n            // Hide from screen readers\r\n            this.readerHidden = true;\r\n            // Dispach \"hidden\" event\r\n            this.dispatchImmediately(\"hidden\");\r\n            this.invalidate(); // hide it at once to avoid flickers // validate() causes SO\r\n        }\r\n        if (!$type.isNumber(duration)) {\r\n            duration = this.hiddenState.transitionDuration;\r\n        }\r\n        return transition;\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"visible\", {\r\n        /**\r\n         * @return Visible?\r\n         */\r\n        get: function () {\r\n            return this.getVisibility();\r\n        },\r\n        /**\r\n         * Indicates if element is current visible (`true`) or hidden (`false`).\r\n         *\r\n         * @param value Visible?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            this.setVisibility(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns visibility value\r\n     * @ignore\r\n     */\r\n    Sprite.prototype.getVisibility = function () {\r\n        var value = this.getPropertyValue(\"visible\");\r\n        if (!$type.hasValue(value)) {\r\n            value = true;\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * Sets `visibility` property:\r\n     *\r\n     * * `true` - visible\r\n     * * `false` - hidden\r\n     *\r\n     * @param value  true - visible, false - hidden\r\n     * @return Current visibility\r\n     */\r\n    Sprite.prototype.setVisibility = function (value) {\r\n        if (this.setPropertyValue(\"visible\", value)) {\r\n            if (value) {\r\n                this.group.removeAttr(\"visibility\");\r\n            }\r\n            else {\r\n                this.group.attr({ \"visibility\": \"hidden\" });\r\n            }\r\n            //this.invalidatePosition();\r\n            if (this.events.isEnabled(\"visibilitychanged\")) {\r\n                var event_4 = {\r\n                    type: \"visibilitychanged\",\r\n                    target: this,\r\n                    visible: value\r\n                };\r\n                this.events.dispatchImmediately(\"visibilitychanged\", event_4);\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"zIndex\", {\r\n        /**\r\n         * @return zIndex\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"zIndex\");\r\n        },\r\n        /**\r\n         * A \"zIndex\" of the element.\r\n         *\r\n         * \"zIndex\" determines the order of how elements are placed over each other.\r\n         *\r\n         * Higher \"zIndex\" will mean the element will be draw on top of elements\r\n         * with lower \"zIndexes\".\r\n         *\r\n         * @param value  zIndex\r\n         */\r\n        set: function (value) {\r\n            value = $type.toNumber(value);\r\n            if (this.setPropertyValue(\"zIndex\", value)) {\r\n                this.dispatch(\"zIndexChanged\");\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Moves the element to the very top in element order, so that it appears\r\n     * in front of other elements.\r\n     */\r\n    Sprite.prototype.toFront = function () {\r\n        var parent = this._parent;\r\n        if (parent && parent.children.indexOf(this) != parent.children.length - 1) {\r\n            parent.children.moveValue(this, parent.children.length - 1);\r\n            this.dispatch(\"zIndexChanged\");\r\n        }\r\n    };\r\n    /**\r\n     * Moves the element to the very bottom in the element order, so that it\r\n     * appears behind other elements.\r\n     */\r\n    Sprite.prototype.toBack = function () {\r\n        var parent = this._parent;\r\n        if (parent && parent.children.indexOf(this) != 0) {\r\n            parent.children.moveValue(this, 0);\r\n            this.dispatch(\"zIndexChanged\");\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"userClassName\", {\r\n        /**\r\n         * @return Class name\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"userClassName\");\r\n        },\r\n        /**\r\n         * A custom class name to set on the element.\r\n         *\r\n         * If set, the value will be added to element's `class` attribute.\r\n         *\r\n         * @since 4.9.11\r\n         * @param  value  Class name\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"userClassName\", value)) {\r\n                if (!value && this.userClassName) {\r\n                    this.group.removeClass(this.userClassName);\r\n                }\r\n                this.setClassName();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"tooltip\", {\r\n        /**\r\n         * @return Tooltip\r\n         */\r\n        get: function () {\r\n            if (this._tooltip) {\r\n                return this._tooltip;\r\n            }\r\n            else if (this.virtualParent) {\r\n                return this.virtualParent.tooltip;\r\n            }\r\n            else if (this._parent) {\r\n                return this._parent.tooltip;\r\n            }\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * TOOLTIP-RELATED PROPERTIES STUFF\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * A [[Tooltip]] object to be used when displayed rollover information for\r\n         * the element.\r\n         *\r\n         * @param tooltip  Tooltip\r\n         */\r\n        set: function (tooltip) {\r\n            if (this._tooltip) {\r\n                //this._tooltip.dispose();\r\n                this.removeDispose(this._tooltip);\r\n            }\r\n            this._tooltip = tooltip;\r\n            if (tooltip) {\r\n                tooltip.parent = this.tooltipContainer;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"tooltipDataItem\", {\r\n        /**\r\n         * @return Tooltip data item\r\n         */\r\n        get: function () {\r\n            var tooltipDataItem = this._tooltipDataItem;\r\n            if (tooltipDataItem) {\r\n                return tooltipDataItem;\r\n            }\r\n            else {\r\n                return this.dataItem;\r\n            }\r\n        },\r\n        /**\r\n         * A [[DataItem]] to use when populating content for the element's\r\n         * [[Tooltip]].\r\n         *\r\n         * @see {@link Tooltip}\r\n         * @see {@link DataItem}\r\n         * @param value  Tooltip data item\r\n         */\r\n        set: function (value) {\r\n            // important: do not dispose tooltip dataItem, as it is some actual data item from data!\r\n            this._tooltipDataItem = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"tooltipColorSource\", {\r\n        /**\r\n         * @return Tooltip color source\r\n         */\r\n        get: function () {\r\n            return this._tooltipColorSource;\r\n        },\r\n        /**\r\n         * A [[Sprite]] or sprite template to use when getting colors for tooltip. If a template is set,\r\n         * tooltip will look for a clone in tooltipDataItem.sprites. If no clone is found, then template colors will be used.\r\n         *\r\n         * @see {@link Tooltip}\r\n         * @see {@link Sprite}\r\n         * @param sprite Sprite\r\n         */\r\n        set: function (sprite) {\r\n            this._tooltipColorSource = sprite;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Shows the element's [[Tooltip]].\r\n     *\r\n     * A tooltip will be populated using text templates in either `tooltipHTML` or\r\n     * `tooltipText` as well as data in `tooltipDataItem`.\r\n     *\r\n     * @see {@link Tooltip}\r\n     * @param optional point (sprite-related) to which tooltip must point.\r\n     * @return returns true if the tooltip was shown and false if it wasn't (no text was found)\r\n     */\r\n    Sprite.prototype.showTooltip = function (point) {\r\n        if (this.showTooltipOn == \"always\" && !this._tooltip && this.tooltip) {\r\n            this._tooltip = this.tooltip.clone();\r\n        }\r\n        if (!point && this.tooltipPosition == \"pointer\" && this.isHover) {\r\n            point = $utils.documentPointToSvg(getInteraction().lastPointer.point, this.svgContainer.SVGContainer, this.svgContainer.cssScale);\r\n        }\r\n        // do not show if hidden\r\n        var sprite = this;\r\n        while (sprite != undefined) {\r\n            if (!sprite.visible || sprite.disabled || sprite.__disabled) {\r\n                if (this._tooltip && this._tooltip.visible) {\r\n                    this._tooltip.hide(0);\r\n                }\r\n                return;\r\n            }\r\n            sprite = sprite.parent;\r\n        }\r\n        if ($type.hasValue(this.tooltipText) || $type.hasValue(this.tooltipHTML)) {\r\n            var tooltip = this.tooltip;\r\n            var tooltipDataItem = this.tooltipDataItem;\r\n            if (tooltip) {\r\n                tooltip.targetSprite = this;\r\n                var colorSource_1 = this;\r\n                var tooltipColorSource_1 = this.tooltipColorSource;\r\n                if ((tooltip.getStrokeFromObject || tooltip.getFillFromObject) && tooltipColorSource_1) {\r\n                    if (tooltipColorSource_1.isTemplate) {\r\n                        if (tooltipDataItem) {\r\n                            $array.eachContinue(tooltipDataItem.sprites, function (sprite) {\r\n                                if (sprite.clonedFrom == tooltipColorSource_1) {\r\n                                    colorSource_1 = sprite;\r\n                                    return false;\r\n                                }\r\n                                return true;\r\n                            });\r\n                        }\r\n                    }\r\n                    else {\r\n                        colorSource_1 = tooltipColorSource_1;\r\n                    }\r\n                }\r\n                if (tooltip.getStrokeFromObject) {\r\n                    var stroke = this.stroke;\r\n                    var source = colorSource_1;\r\n                    while (source.parent != undefined) {\r\n                        stroke = source.stroke;\r\n                        if (stroke == undefined) {\r\n                            source = source.parent;\r\n                        }\r\n                        if (stroke != undefined) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (stroke instanceof Color) {\r\n                        tooltip.background.animate({ property: \"stroke\", to: stroke }, tooltip.animationDuration);\r\n                    }\r\n                    else {\r\n                        tooltip.background.stroke = stroke;\r\n                    }\r\n                }\r\n                // Set data item\r\n                tooltip.dataItem = tooltipDataItem;\r\n                tooltip.label.populateStringFrom = this;\r\n                if (tooltip.getFillFromObject) {\r\n                    var fill = this.fill;\r\n                    var source = colorSource_1;\r\n                    while (source.parent != undefined) {\r\n                        fill = source.fill;\r\n                        if (fill == undefined || (fill instanceof Color && fill.rgb == undefined)) {\r\n                            source = source.parent;\r\n                        }\r\n                        else if (fill != undefined) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (fill == undefined) {\r\n                        fill = color(\"#000000\");\r\n                    }\r\n                    if (fill instanceof Color) {\r\n                        if (!tooltip.visible) {\r\n                            tooltip.background.fill = fill;\r\n                        }\r\n                        else {\r\n                            tooltip.background.animate({ property: \"fill\", to: fill }, tooltip.animationDuration);\r\n                        }\r\n                    }\r\n                    else {\r\n                        tooltip.background.fill = fill;\r\n                    }\r\n                    if (tooltip.autoTextColor && fill instanceof Color) {\r\n                        tooltip.label.fill = fill.alternative;\r\n                    }\r\n                }\r\n                // Apply tooltip text\r\n                var text = \"\";\r\n                if (this.tooltipHTML) {\r\n                    tooltip.html = this.tooltipHTML;\r\n                    text = this.tooltipHTML;\r\n                }\r\n                if (this.tooltipText) {\r\n                    tooltip.text = this.tooltipText;\r\n                    text = this.tooltipText;\r\n                }\r\n                if (this.updateTooltipPosition(point)) {\r\n                    // Set accessibility option\r\n                    tooltip.readerDescribedBy = this.uidAttr();\r\n                    // make label to render to be able to check currentText\r\n                    if (tooltip.label.invalid) {\r\n                        tooltip.label.validate();\r\n                    }\r\n                    if (text != undefined && text != \"\" && tooltip.label.currentText != \"\") {\r\n                        //@todo: think of how to solve this better\r\n                        if (tooltip && !tooltip.parent) {\r\n                            tooltip.parent = this.tooltipContainer;\r\n                        }\r\n                        // Reveal tooltip\r\n                        // showing it in 1 ms helps to avoid strange flickering in IE\r\n                        var duration = tooltip.defaultState.transitionDuration;\r\n                        if (duration <= 0) {\r\n                            duration = 1;\r\n                        }\r\n                        tooltip.show(duration);\r\n                        tooltip.currentSprite = this;\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        this.hideTooltip(0);\r\n                    }\r\n                }\r\n                else {\r\n                    this.hideTooltip(0);\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Sprite.prototype.updateTooltipPosition = function (point) {\r\n        var _this = this;\r\n        if (this.tooltipPosition == \"pointer\") {\r\n            if (this._interactionDisposer) {\r\n                this._interactionDisposer.dispose();\r\n            }\r\n            this._interactionDisposer = getInteraction().body.events.on(\"track\", function (ev) {\r\n                return _this.pointTooltipTo($utils.documentPointToSvg(ev.point, _this.svgContainer.SVGContainer, _this.svgContainer.cssScale), true);\r\n            });\r\n            if (point) {\r\n                return this.pointTooltipTo(point, true);\r\n            }\r\n        }\r\n        else {\r\n            // Point to the X/Y of this Sprite\r\n            var globalPoint = $utils.spritePointToSvg({\r\n                \"x\": this.getTooltipX(),\r\n                \"y\": this.getTooltipY()\r\n            }, this);\r\n            return this.pointTooltipTo(globalPoint);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the point the [[Tooltip]] should point to.\r\n     *\r\n     * @param point      Coordinates to point to\r\n     * @param instantly  Move instantly without animation\r\n     */\r\n    Sprite.prototype.pointTooltipTo = function (point, instantly) {\r\n        var tooltip = this.tooltip;\r\n        if (tooltip && this.topParent) {\r\n            if (tooltip.showInViewport) {\r\n                tooltip.pointTo(point, instantly);\r\n                return true;\r\n            }\r\n            if ($math.isInRectangle(point, { x: 0, y: 0, width: this.topParent.maxWidth, height: this.topParent.maxHeight })) {\r\n                tooltip.pointTo(point, instantly);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Hides element's [[Tooltip]].\r\n     *\r\n     * @see {@link Tooltip}\r\n     */\r\n    Sprite.prototype.hideTooltip = function (duration) {\r\n        if (this.showTooltipOn == \"always\") {\r\n            return;\r\n        }\r\n        var tooltip = this.tooltip;\r\n        if (tooltip) {\r\n            if (tooltip.targetSprite == this) {\r\n                tooltip.targetSprite = undefined;\r\n            }\r\n            tooltip.hide(duration);\r\n            if (this._interactionDisposer) {\r\n                this._interactionDisposer.dispose();\r\n                this._interactionDisposer = undefined;\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"tooltipHTML\", {\r\n        /**\r\n         * @return Tooltip HTML content template\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tooltipHTML\");\r\n        },\r\n        /**\r\n         * An HTML template to be used to populate [[Tooltip]] contents.\r\n         *\r\n         * If element has `tooltipDataItem` or `dataItem` set, this will be parsed\r\n         * for any data values to be replaced with the values from respective data\r\n         * items.\r\n         *\r\n         * @param value Tooltip HTML content template\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            this.hoverable = true;\r\n            if (this.setPropertyValue(\"tooltipHTML\", value)) {\r\n                if (this.tooltip) {\r\n                    if (this.tooltip.visible) {\r\n                        this.showTooltip();\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"tooltipText\", {\r\n        /**\r\n         * @return Tooltip content template\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tooltipText\");\r\n        },\r\n        /**\r\n         * A text template to be used to populate Tooltip's contents.\r\n         *\r\n         * If element has `tooltipDataItem` or `dataItem` set, this will be parsed\r\n         * for any data values to be replaced with the values from respective data\r\n         * items.\r\n         *\r\n         * This template will also be parsed for any special formatting tags.\r\n         *\r\n         * @param value Tooltip content template\r\n         * @see {@link TextFormatter}\r\n         */\r\n        set: function (value) {\r\n            value = $type.toText(value);\r\n            if (value) {\r\n                this.hoverable = true;\r\n            }\r\n            if (this.setPropertyValue(\"tooltipText\", value)) {\r\n                if (this.tooltip) {\r\n                    if (this.tooltip.visible) {\r\n                        this.showTooltip();\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"tooltipContainer\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Container\r\n         */\r\n        get: function () {\r\n            if (this._tooltipContainer) {\r\n                return this._tooltipContainer;\r\n            }\r\n            else if (this._parent) {\r\n                return this._parent.tooltipContainer;\r\n            }\r\n        },\r\n        /**\r\n         * A container reference that should be used to place element's\r\n         * [[Tooltip]] in.\r\n         *\r\n         * Will use parent's container if does not have one set.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value Container\r\n         * @todo Dispose of the old _tooltipContainer ?\r\n         */\r\n        set: function (value) {\r\n            this._tooltipContainer = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"tooltipX\", {\r\n        /**\r\n         * @return Tooltip X (px)\r\n         */\r\n        get: function () {\r\n            return this.getTooltipX();\r\n        },\r\n        /**\r\n         * X coordinate the [[Tooltip]] should be shown at.\r\n         *\r\n         * @param value  Tooltip X (px)\r\n         */\r\n        set: function (value) {\r\n            if (this.setPercentProperty(\"tooltipX\", value) && this.tooltip) {\r\n                this.tooltip.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"alwaysShowTooltip\", {\r\n        /**\r\n         * @return Always show tooltip?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"showTooltipOn\") == \"always\";\r\n        },\r\n        /**\r\n         * DEPRECATION NOTICE: This setting is deprecated in favor of a more flexible\r\n         * setting: `showTooltipOn`. Please use `showTooltipOn = \"always\"` instead.\r\n         *\r\n         * Indicates if this element should display a tooltip permanently.\r\n         *\r\n         * Useful, if you want to show permanent tooltips on some items.\r\n         *\r\n         * @default false\r\n         * @since 4.5.4\r\n         * @deprecated Use `showTooltipOn = \"always\"` instead\r\n         * @param  value  Always show tooltip?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            if (value) {\r\n                this.showTooltipOn = \"always\";\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"showTooltipOn\", {\r\n        /**\r\n         * @return When to show tooltip\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"showTooltipOn\");\r\n        },\r\n        /**\r\n         * Indicates when tooltip needs to be shown on this element:\r\n         *\r\n         * * `\"hover\"` (default) - Tooltip will be shown when element is hovered on.\r\n         * * `\"hit\"` - Tooltip will be shown when element is clicked/tapped. Tooltip will be hidden when clicked/tapped anywhere else.\r\n         * * `\"always\"` - Tooltip will be shown on the element permanently.\r\n         *\r\n         * For example, if you would like to show tooltips on all of the columns of\r\n         * a [[ColumnSeries]]:\r\n         *\r\n         * ```TypeScript\r\n         * series.columns.template.showTooltipOn = \"always\";\r\n         * ```\r\n         * ```JavaScript\r\n         * series.columns.template.showTooltipOn = \"always\";\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"series\": [{\r\n         *     // ...\r\n         *     \"columns\": {\r\n         *       \"showTooltipOn\": \"always\"\r\n         *     }\r\n         *   }]\r\n         * }\r\n         * ```\r\n         *\r\n         * It can even be set to display on a selected columns via `propertyFields`:\r\n         *\r\n         * ```TypeScript\r\n         * series.columns.template.propertyFields.showTooltipOn = \"tooltip\";\r\n         * ```\r\n         * ```JavaScript\r\n         * series.columns.template.propertyFields.showTooltipOn = \"tooltip\";\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"series\": [{\r\n         *     // ...\r\n         *     \"columns\": {\r\n         *       \"propertyFields\": {\r\n         *         \"showTooltipOn\": \"tooltip\"\r\n         *       }\r\n         *     }\r\n         *   }]\r\n         * }\r\n         * ```\r\n         *\r\n         * @default \"hover\"\r\n         * @since 4.7.9\r\n         * @param  value  When to show tooltip\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"showTooltipOn\", value)) {\r\n                if (value == \"hit\") {\r\n                    this.clickable = true;\r\n                }\r\n                if (this.tooltip) {\r\n                    if (value == \"always\") {\r\n                        this.showTooltip();\r\n                    }\r\n                    else {\r\n                        this.handleAlwaysShowTooltip();\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"tooltipPosition\", {\r\n        /**\r\n         * Position\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tooltipPosition\");\r\n        },\r\n        /**\r\n         * Specifies if [[Tooltip]] should follow the mouse or touch pointer or stay\r\n         * at the fixed position.\r\n         *\r\n         * @param value  Position\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"tooltipPosition\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"tooltipY\", {\r\n        /**\r\n         * @return Tooltip Y (px)\r\n         */\r\n        get: function () {\r\n            return this.getTooltipY();\r\n        },\r\n        /**\r\n         * Y coordinate the [[Tooltip]] should be shown at.\r\n         *\r\n         * @param value  Tooltip Y (px)\r\n         */\r\n        set: function (value) {\r\n            if (this.setPercentProperty(\"tooltipY\", value) && this.tooltip) {\r\n                this.tooltip.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns Tooltip X coordinate if it's set, or middle of the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return X (px)\r\n     */\r\n    Sprite.prototype.getTooltipX = function () {\r\n        var x = this.getPropertyValue(\"tooltipX\");\r\n        if (!$type.hasValue(x)) {\r\n            x = percent(50);\r\n        }\r\n        var value;\r\n        if ($type.isNumber(x)) {\r\n            value = x;\r\n        }\r\n        if (x instanceof Percent) {\r\n            value = this.maxLeftSelf + this._measuredWidthSelf * x.value - this.pixelPaddingLeft - this.ex; // overflow is know only for measured items, so this is not always good\r\n        }\r\n        if (!$type.isNumber(value)) {\r\n            value = 0;\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * Returns Tooltip Y coordinate if it's set, or middle of the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Y (px)\r\n     */\r\n    Sprite.prototype.getTooltipY = function () {\r\n        var y = this.getPropertyValue(\"tooltipY\");\r\n        if (!$type.hasValue(y)) {\r\n            y = percent(50);\r\n        }\r\n        var value;\r\n        if ($type.isNumber(y)) {\r\n            value = y;\r\n        }\r\n        if (y instanceof Percent) {\r\n            value = this.maxTopSelf + this._measuredHeightSelf * y.value - this.pixelPaddingTop - this.ey; // overflow is know only for measured items, so this is not always good\r\n        }\r\n        if (!$type.isNumber(value)) {\r\n            value = 0;\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * Displays a modal or console message with error, and halts any further\r\n     * processing of this item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param e Error\r\n     * @todo Implement from applying further actions to this item\r\n     */\r\n    Sprite.prototype.raiseCriticalError = function (e, closable) {\r\n        if (this.svgContainer) {\r\n            if (!this._adapterO) {\r\n                this.modal.content = e.message;\r\n            }\r\n            else {\r\n                this.modal.content = this._adapterO.apply(\"criticalError\", e).message;\r\n            }\r\n            if (!closable) {\r\n                this.disabled = true;\r\n            }\r\n            else {\r\n                this.modal.closable = true;\r\n            }\r\n            if (!options.suppressErrors) {\r\n                this.modal.open();\r\n            }\r\n        }\r\n        if (options.verbose) {\r\n            console.log(e);\r\n        }\r\n    };\r\n    /**\r\n * Processes JSON-based config before it is applied to the object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param config  Config\r\n */\r\n    Sprite.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Tooltip color source\r\n            if ($type.hasValue(config.tooltipColorSource) && $type.isString(config.tooltipColorSource) && this.map.hasKey(config.tooltipColorSource)) {\r\n                config.tooltipColorSource = this.map.getKey(config.tooltipColorSource);\r\n            }\r\n            // Cursor styles\r\n            if ($type.hasValue(config.cursorOverStyle) && $type.isString(config.cursorOverStyle)) {\r\n                config.cursorOverStyle = this.getCursorStyle(config.cursorOverStyle);\r\n            }\r\n            if ($type.hasValue(config.cursorDowntyle) && $type.isString(config.cursorDowntyle)) {\r\n                config.cursorDowntyle = this.getCursorStyle(config.cursorDowntyle);\r\n            }\r\n            if ($type.hasValue(config.cursorOptions)) {\r\n                if ($type.hasValue(config.cursorOptions.overStyle) && $type.isString(config.cursorOptions.overStyle)) {\r\n                    config.cursorOptions.overStyle = this.getCursorStyle(config.cursorOptions.overStyle);\r\n                }\r\n                if ($type.hasValue(config.cursorOptions.downStyle) && $type.isString(config.cursorOptions.downStyle)) {\r\n                    config.cursorOptions.downStyle = this.getCursorStyle(config.cursorOptions.downStyle);\r\n                }\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n        this.processDelayedMap();\r\n    };\r\n    /**\r\n     * Converts string name of the cursor into actual [[MouseCursorStyle]].\r\n     *\r\n     * @param style  Cursor type\r\n     * @return Cursor definition\r\n     */\r\n    Sprite.prototype.getCursorStyle = function (style) {\r\n        switch (style) {\r\n            case \"grab\":\r\n                return MouseCursorStyle.grab;\r\n            case \"grabbing\":\r\n                return MouseCursorStyle.grabbing;\r\n            case \"pointer\":\r\n                return MouseCursorStyle.pointer;\r\n            case \"horizontalResize\":\r\n                return MouseCursorStyle.horizontalResize;\r\n            case \"verticalResize\":\r\n                return MouseCursorStyle.verticalResize;\r\n            default:\r\n                return MouseCursorStyle.default;\r\n        }\r\n    };\r\n    /**\r\n     * This function is used to sort element's JSON config properties, so that\r\n     * some properties that absolutely need to be processed last, can be put at\r\n     * the end.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param a  Element 1\r\n     * @param b  Element 2\r\n     * @return Sorting number\r\n     */\r\n    Sprite.prototype.configOrder = function (a, b) {\r\n        if (a == b) {\r\n            return 0;\r\n        }\r\n        // Must come last\r\n        else if (a == \"tooltipColorSource\") {\r\n            return 1;\r\n        }\r\n        else if (b == \"tooltipColorSource\") {\r\n            return -1;\r\n        }\r\n        else {\r\n            return _super.prototype.configOrder.call(this, a, b);\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"isHidden\", {\r\n        /**\r\n         * If `sprite.hide()` is called, we set isHidden to true when sprite is hidden.\r\n         * This was added becaus hidden state might have visibility set to true and so\r\n         * there would not be possible to find out if a sprite is technically hidden or not.\r\n         */\r\n        get: function () {\r\n            if (this._isHidden) {\r\n                return this._isHidden;\r\n            }\r\n            else if (this._parent) {\r\n                return this._parent.isHidden;\r\n            }\r\n            return false;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"showOnInit\", {\r\n        /**\r\n         * @return Show on init?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"showOnInit\");\r\n        },\r\n        /**\r\n         * If this is set to `true`, Sprite, when inited will be instantly hidden\r\n         * (\"hidden\" state applied) and then shown (\"default\" state applied).\r\n         *\r\n         * If your \"default\" state's `transitionDuration > 0` this will result in\r\n         * initial animation from \"hidden\" state to \"default\" state.\r\n         *\r\n         * If you need a Sprite which has `showOnInit = true` not to be shown\r\n         * initially, set `sprite.hidden = true`. Setting `sprite.visible = false`\r\n         * will not prevent the animation and the sprite will be shown.\r\n         *\r\n         * @param value show on init?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            this.setShowOnInit(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    Sprite.prototype.setShowOnInit = function (value) {\r\n        if (this.setPropertyValue(\"showOnInit\", value)) {\r\n            if (!this.isTemplate) {\r\n                if (value && !this.inited && !this.hidden) {\r\n                    this._showOnInitDisposer = new MultiDisposer([\r\n                        registry.events.once(\"enterframe\", this.hideInitially, this),\r\n                        this.events.once(\"beforevalidated\", this.hideInitially, this, false),\r\n                        this.events.on(\"inited\", this.appear, this, false)\r\n                    ]);\r\n                    this._disposers.push(this._showOnInitDisposer);\r\n                }\r\n                else {\r\n                    if (this._showOnInitDisposer) {\r\n                        this._showOnInitDisposer.dispose();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Sprite.prototype.hideInitially = function () {\r\n        if (!this.isDisposed()) {\r\n            this.appeared = false;\r\n            //if (!this.hidden && !this._isHidden) { // not good for series, as on enterframe it doesn't have data items yet.\r\n            if (!this.inited) {\r\n                this.hide(0);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Hides the chart instantly and then shows it. If defaultState.transitionDuration > 0, this will result an animation in which properties of hidden state will animate to properties of visible state.\r\n     */\r\n    Sprite.prototype.appear = function () {\r\n        var _this = this;\r\n        this.appeared = false;\r\n        if (!this.hidden && !this.isHidden) {\r\n            this.hide(0);\r\n        }\r\n        if (!this.hidden) {\r\n            var animation = this.show();\r\n            if (animation && !animation.isFinished()) {\r\n                this.addDisposer(animation.events.on(\"animationended\", function () {\r\n                    _this.appeared = true;\r\n                    _this.dispatch(\"appeared\");\r\n                }));\r\n            }\r\n            else {\r\n                this.appeared = true;\r\n                this.dispatch(\"appeared\");\r\n            }\r\n        }\r\n        else {\r\n            this.appeared = true;\r\n            this.dispatch(\"appeared\");\r\n        }\r\n    };\r\n    Object.defineProperty(Sprite.prototype, \"hidden\", {\r\n        /**\r\n         * @return Is initially hidden?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"hidden\");\r\n        },\r\n        /**\r\n         * If a sprite has `showOnInit = true`, it will animate from \"hidden\" to\r\n         * \"default\" state when initialized. To prevent this but keep\r\n         * `showOnInit = true`, you can set `sprite.hidden = true`.\r\n         *\r\n         * @param value initially hidden?\r\n         */\r\n        set: function (value) {\r\n            value = $type.toBoolean(value);\r\n            this.setPropertyValue(\"hidden\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"bbox\", {\r\n        /**\r\n         * Returns bounding box (square) for this element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        get: function () {\r\n            if (this.definedBBox) {\r\n                return this.definedBBox;\r\n            }\r\n            return this._bbox;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Sprite.prototype, \"plugins\", {\r\n        /**\r\n         * A list of plugins (objects that implement [[IPlugin]] interface) attached\r\n         * to this object.\r\n         *\r\n         * @since 4.2.2\r\n         * @return List of plugins\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            if (!this._plugins) {\r\n                this._plugins = new List();\r\n                this._disposers.push(this._plugins.events.on(\"inserted\", function (ev) {\r\n                    ev.newValue.target = _this;\r\n                    ev.newValue.init();\r\n                }));\r\n                this._disposers.push(new ListDisposer(this._plugins));\r\n            }\r\n            return this._plugins;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Called during the System.update method\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype._systemUpdate = function (skippedSprites) {\r\n        this.validate();\r\n    };\r\n    /**\r\n     * Called during the System.update method\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype._systemCheckIfValidate = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * Called during the System.validatePositions method\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype._systemValidatePositions = function () {\r\n        this.validatePosition();\r\n    };\r\n    /**\r\n     * Called during the System.validateLayouts method\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Sprite.prototype._systemValidateLayouts = function () {\r\n    };\r\n    return Sprite;\r\n}(BaseObjectEvents));\r\nexport { Sprite };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Sprite\"] = Sprite;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,qBAAqB,QAAQ,gBAAgB;AACtD,SAASA,qBAAqB;AAC9B,SAASC,gBAAgB,QAAQ,QAAQ;AACzC,SAASC,OAAO,EAAEC,aAAa,QAAQ,iBAAiB;AACxD,SAASC,UAAU,EAAEC,kBAAkB,EAAEC,kBAAkB,QAAQ,oBAAoB;AACvF,SAASC,YAAY,EAAEC,IAAI,QAAQ,cAAc;AACjD,SAASC,aAAa,EAAEC,QAAQ,EAAEC,oBAAoB,QAAQ,kBAAkB;AAChF,SAASC,SAAS,EAAEC,iBAAiB,QAAQ,mBAAmB;AAChE,SAASC,aAAa,QAAQ,mBAAmB;AACjD,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,OAAO,QAAQ,2BAA2B;AACnD,SAASC,cAAc,QAAQ,kCAAkC;AACjE,SAASC,cAAc,QAAQ,kCAAkC;AACjE,SAASC,KAAK,EAAEC,KAAK,EAAEC,OAAO,QAAQ,eAAe;AACrD,SAASC,cAAc,QAAQ,2BAA2B;AAC1D,SAASC,gBAAgB,QAAQ,qBAAqB;AACtD,SAASC,OAAO,QAAQ,WAAW;AACnC,SAASC,QAAQ,QAAQ,YAAY;AACrC,SAASC,eAAe,QAAQ,8BAA8B;AAC9D,SAASC,aAAa,QAAQ,4BAA4B;AAC1D,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,gBAAgB,QAAQ,4BAA4B;AAC7D,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,MAAM,QAAQ,iBAAiB;AACxC,OAAO,KAAKC,MAAM,MAAM,eAAe;AACvC,OAAO,KAAKC,KAAK,MAAM,cAAc;AACrC,OAAO,KAAKC,QAAQ,MAAM,iBAAiB;AAC3C,OAAO,KAAKC,MAAM,MAAM,eAAe;AACvC,OAAO,KAAKC,OAAO,MAAM,gBAAgB;AACzC,OAAO,KAAKC,KAAK,MAAM,cAAc;AACrC,OAAO,KAAKC,KAAK,MAAM,kBAAkB;AACzC,SAASC,MAAM,QAAQ,UAAU;AACjC,SAASC,OAAO,EAAEC,OAAO,QAAQ,iBAAiB;AAClD;AACA;AACA;AACA,OAAO,IAAIC,gBAAgB,GAAG,CAAC,MAAM,EAAE,aAAa,EAAE,QAAQ,EAAE,eAAe,EAAE,aAAa,EAAE,iBAAiB,EAAE,kBAAkB,EAAE,eAAe,EAAE,gBAAgB,CAAC,CAAC,CAAC;AAC3K;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,MAAM,GAAG,aAAe,UAAUC,MAAM,EAAE;EAC1C/C,SAAS,CAAC8C,MAAM,EAAEC,MAAM,CAAC;EACzB;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,SAASD,MAAMA,CAAA,EAAG;IACd,IAAIE,KAAK;IACT;IACAD,MAAM,CAACE,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI;IACzB;AACR;AACA;IACQD,KAAK,CAACE,UAAU,GAAG,CAAC,CAAC;IACrB;AACR;AACA;IACQF,KAAK,CAACG,gBAAgB,GAAG,IAAIhD,qBAAqB,CAAC6C,KAAK,CAAC;IACzD;AACR;AACA;AACA;IACQA,KAAK,CAACI,SAAS,GAAG,CAAC,CAAC;IACpB;AACR;AACA;AACA;AACA;AACA;IACQJ,KAAK,CAACK,WAAW,GAAG,KAAK;IACzBL,KAAK,CAACM,OAAO,GAAG,KAAK;IACrB;AACR;AACA;AACA;AACA;IACQN,KAAK,CAACO,OAAO,GAAG,KAAK;IACrB;AACR;AACA;AACA;AACA;IACQP,KAAK,CAACQ,MAAM,GAAG,KAAK;IACpB;AACR;AACA;AACA;AACA;AACA;IACQR,KAAK,CAACS,QAAQ,GAAG,KAAK;IACtB;AACR;AACA;AACA;AACA;IACQT,KAAK,CAACU,SAAS,GAAG,KAAK;IACvB;AACR;AACA;AACA;AACA;IACQV,KAAK,CAACW,SAAS,GAAG,KAAK;IACvB;AACR;AACA;AACA;AACA;AACA;AACA;IACQX,KAAK,CAACY,oBAAoB,GAAG,KAAK;IAClC;AACR;AACA;AACA;AACA;IACQZ,KAAK,CAA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}