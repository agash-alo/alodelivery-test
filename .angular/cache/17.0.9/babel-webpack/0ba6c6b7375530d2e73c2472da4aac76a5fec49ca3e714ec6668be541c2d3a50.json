{"ast":null,"code":"import * as $type from \"../utils/Type\";\n/**\r\n * Maps time period names to their numeric representations in milliseconds.\r\n *\r\n * @ignore Exclude from docs\r\n */\nexport var timeUnitDurations = {\n  millisecond: 1,\n  second: 1000,\n  minute: 60000,\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n  month: 2592000000,\n  year: 31536000000\n};\n/**\r\n * Returns the next time unit that goes after source `unit`.\r\n *\r\n * E.g. \"hour\" is the next unit after \"minute\", etc.\r\n *\r\n * @ignore Exclude from docs\r\n * @param unit  Source time unit\r\n * @return Next time unit\r\n */\nexport function getNextUnit(unit) {\n  switch (unit) {\n    case \"year\":\n      return;\n    case \"month\":\n      return \"year\";\n    case \"week\":\n      return \"month\";\n    case \"day\":\n      return \"month\";\n    // not a mistake\n    case \"hour\":\n      return \"day\";\n    case \"minute\":\n      return \"hour\";\n    case \"second\":\n      return \"minute\";\n    case \"millisecond\":\n      return \"second\";\n  }\n}\n/**\r\n * Returns number of milliseconds in the `count` of time `unit`.\r\n *\r\n * Available units: \"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"week\",\r\n * \"month\", and \"year\".\r\n *\r\n * @ignore Exclude from docs\r\n * @param unit   Time unit\r\n * @param count  Number of units\r\n * @return Milliseconds\r\n */\nexport function getDuration(unit, count) {\n  if (!$type.hasValue(count)) {\n    count = 1;\n  }\n  return timeUnitDurations[unit] * count;\n}\n/**\r\n * Returns current `Date` object.\r\n *\r\n * @return Current date\r\n */\nexport function now() {\n  return new Date();\n}\n/**\r\n * Returns current timestamp.\r\n *\r\n * @return Current timestamp\r\n */\nexport function getTime() {\n  return now().getTime();\n}\n/**\r\n * Returns a copy of the `Date` object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param date  Source date\r\n * @return Copy\r\n */\nexport function copy(date) {\n  return new Date(date.getTime()); // todo: check if this is ok. new Date(date) used to strip milliseconds on FF in v3\n}\n/**\r\n * Checks if the `unit` part of two `Date` objects do not match. Two dates\r\n * represent a \"range\" of time, rather the same time date.\r\n *\r\n * @ignore Exclude from docs\r\n * @param dateOne  Date 1\r\n * @param dateTwo  Date 2\r\n * @param unit     Time unit to check\r\n * @return Range?\r\n */\nexport function checkChange(dateOne, dateTwo, unit, utc) {\n  dateOne = new Date(dateOne.getTime());\n  dateTwo = new Date(dateTwo.getTime());\n  var timeZoneOffset1 = 0;\n  var timeZoneOffset2 = 0;\n  if (!utc && unit != \"millisecond\") {\n    timeZoneOffset1 = dateOne.getTimezoneOffset();\n    dateOne.setUTCMinutes(dateOne.getUTCMinutes() - timeZoneOffset1);\n    timeZoneOffset2 = dateTwo.getTimezoneOffset();\n    dateTwo.setUTCMinutes(dateTwo.getUTCMinutes() - timeZoneOffset2);\n  }\n  var changed = false;\n  switch (unit) {\n    case \"year\":\n      if (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {\n        changed = true;\n      }\n      break;\n    case \"month\":\n      if (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {\n        changed = true;\n      } else if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {\n        changed = true;\n      }\n      break;\n    case \"day\":\n      if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {\n        changed = true;\n      } else if (dateOne.getUTCDate() != dateTwo.getUTCDate()) {\n        changed = true;\n      }\n      break;\n    case \"hour\":\n      if (dateOne.getUTCHours() != dateTwo.getUTCHours()) {\n        changed = true;\n      }\n      break;\n    case \"minute\":\n      if (dateOne.getUTCMinutes() != dateTwo.getUTCMinutes()) {\n        changed = true;\n      }\n      break;\n    case \"second\":\n      if (dateOne.getUTCSeconds() != dateTwo.getUTCSeconds()) {\n        changed = true;\n      }\n      break;\n    case \"millisecond\":\n      if (dateOne.getTime() != dateTwo.getTime()) {\n        changed = true;\n      }\n      break;\n  }\n  if (changed) {\n    return true;\n  }\n  var nextUnit = getNextUnit(unit);\n  if (nextUnit) {\n    dateOne.setUTCMinutes(dateOne.getUTCMinutes() + timeZoneOffset1);\n    dateTwo.setUTCMinutes(dateTwo.getUTCMinutes() + timeZoneOffset2);\n    return checkChange(dateOne, dateTwo, nextUnit, utc);\n  } else {\n    return false;\n  }\n}\n/**\r\n * Adds `count` of time `unit` to the source date. Returns a modified `Date` object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param date   Source date\r\n * @param unit   Time unit\r\n * @param count  Number of units to add\r\n * @return Modified date\r\n */\nexport function add(date, unit, count, utc) {\n  var timeZoneOffset = 0;\n  if (!utc && unit != \"millisecond\") {\n    timeZoneOffset = date.getTimezoneOffset();\n    date.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);\n  }\n  switch (unit) {\n    case \"day\":\n      var day = date.getUTCDate();\n      date.setUTCDate(day + count);\n      break;\n    case \"second\":\n      var seconds = date.getUTCSeconds();\n      date.setUTCSeconds(seconds + count);\n      break;\n    case \"millisecond\":\n      var milliseconds = date.getUTCMilliseconds();\n      date.setUTCMilliseconds(milliseconds + count);\n      break;\n    case \"hour\":\n      var hours = date.getUTCHours();\n      date.setUTCHours(hours + count);\n      break;\n    case \"minute\":\n      var minutes = date.getUTCMinutes();\n      date.setUTCMinutes(minutes + count);\n      break;\n    case \"year\":\n      var year = date.getUTCFullYear();\n      date.setUTCFullYear(year + count);\n      break;\n    case \"month\":\n      var month = date.getUTCMonth();\n      date.setUTCMonth(month + count);\n      break;\n    case \"week\":\n      var wday = date.getUTCDate();\n      date.setUTCDate(wday + count * 7);\n      break;\n  }\n  if (!utc && unit != \"millisecond\") {\n    date.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);\n    if (unit == \"day\" || unit == \"week\" || unit == \"month\" || unit == \"year\") {\n      var newTimeZoneOffset = date.getTimezoneOffset();\n      if (newTimeZoneOffset != timeZoneOffset) {\n        var diff = newTimeZoneOffset - timeZoneOffset;\n        date.setUTCMinutes(date.getUTCMinutes() + diff);\n        // solves issues if newe time falls back to old time zone\n        if (date.getTimezoneOffset() != newTimeZoneOffset) {\n          date.setUTCMinutes(date.getUTCMinutes() - diff);\n        }\n      }\n    }\n  }\n  return date;\n}\n/**\r\n * \"Rounds\" the date to specific time unit.\r\n *\r\n * @ignore Exclude from docs\r\n * @param date             Source date\r\n * @param unit             Time unit\r\n * @param count            Number of units to round to\r\n * @param firstDateOfWeek  First day of week\r\n * @param roundMinutes     Minutes to round to (some timezones use non-whole hour)\r\n * @param timezone         Use specific named timezone when rounding\r\n * @return New date\r\n */\nexport function round(date, unit, count, firstDateOfWeek, utc, firstDate, roundMinutes, timezone) {\n  if (roundMinutes === void 0) {\n    roundMinutes = 0;\n  }\n  if (!$type.isNumber(count)) {\n    count = 1;\n  }\n  var timeZoneOffset = 0;\n  if (timezone && [\"day\", \"month\", \"week\", \"year\"].indexOf(unit) != -1) {\n    date = setTimezone(date, timezone);\n  }\n  if (!utc && unit != \"millisecond\") {\n    timeZoneOffset = date.getTimezoneOffset();\n    date.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);\n  }\n  switch (unit) {\n    case \"day\":\n      var day = date.getUTCDate();\n      if (count > 1) {\n        //\tday = Math.floor(day / count) * count;\n        if (firstDate) {\n          firstDate = round(firstDate, \"day\", 1);\n          var difference = date.getTime() - firstDate.getTime();\n          var unitCount = Math.floor(difference / getDuration(\"day\") / count);\n          var duration = getDuration(\"day\", unitCount * count);\n          date.setTime(firstDate.getTime() + duration - timeZoneOffset * getDuration(\"minute\"));\n        }\n      } else {\n        date.setUTCDate(day);\n      }\n      date.setUTCHours(0, 0, 0, 0);\n      break;\n    case \"second\":\n      var seconds = date.getUTCSeconds();\n      if (count > 1) {\n        seconds = Math.floor(seconds / count) * count;\n      }\n      date.setUTCSeconds(seconds, 0);\n      break;\n    case \"millisecond\":\n      if (count == 1) {\n        return date; // much better for perf!\n      }\n\n      var milliseconds = date.getUTCMilliseconds();\n      milliseconds = Math.floor(milliseconds / count) * count;\n      date.setUTCMilliseconds(milliseconds);\n      break;\n    case \"hour\":\n      var hours = date.getUTCHours();\n      if (count > 1) {\n        hours = Math.floor(hours / count) * count;\n      }\n      date.setUTCHours(hours, roundMinutes, 0, 0);\n      break;\n    case \"minute\":\n      var minutes = date.getUTCMinutes();\n      milliseconds = date.getUTCMilliseconds();\n      if (count > 1) {\n        minutes = Math.floor(minutes / count) * count;\n      }\n      date.setUTCMinutes(minutes, 0, 0);\n      break;\n    case \"month\":\n      var month = date.getUTCMonth();\n      if (count > 1) {\n        month = Math.floor(month / count) * count;\n      }\n      date.setUTCMonth(month, 1);\n      date.setUTCHours(0, roundMinutes, 0, 0);\n      break;\n    case \"year\":\n      var year = date.getUTCFullYear();\n      if (count > 1) {\n        year = Math.floor(year / count) * count;\n      }\n      date.setUTCFullYear(year, 0, 1);\n      date.setUTCHours(0, roundMinutes, 0, 0);\n      //let nonUTCDateY = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n      //timeZoneOffset = nonUTCDateY.getTimezoneOffset();\n      break;\n    case \"week\":\n      var wday = date.getUTCDate();\n      var weekDay = date.getUTCDay();\n      if (!$type.isNumber(firstDateOfWeek)) {\n        firstDateOfWeek = 1;\n      }\n      // todo: rounding when count is not 1\n      if (weekDay >= firstDateOfWeek) {\n        wday = wday - weekDay + firstDateOfWeek;\n      } else {\n        wday = wday - (7 + weekDay) + firstDateOfWeek;\n      }\n      date.setUTCDate(wday);\n      date.setUTCHours(0, roundMinutes, 0, 0);\n      break;\n  }\n  if (!utc && unit != \"millisecond\") {\n    date.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);\n    if (unit == \"day\" || unit == \"week\" || unit == \"month\" || unit == \"year\") {\n      var newTimeZoneOffset = date.getTimezoneOffset();\n      if (newTimeZoneOffset != timeZoneOffset) {\n        var diff = newTimeZoneOffset - timeZoneOffset;\n        date.setUTCMinutes(date.getUTCMinutes() + diff);\n      }\n    }\n  }\n  return date;\n}\n/**\r\n * Returns a new `Date` object which corresponds to the source date in a\r\n * specific timezone.\r\n *\r\n * @since 4.10.1\r\n * @param   date      Source date\r\n * @param   timezone  Timezone identifier\r\n * @return            Recalculated new Date\r\n */\nexport function setTimezone(date, timezone) {\n  var d = new Date(date.toLocaleString(\"en-US\", {\n    timeZone: timezone\n  }));\n  return d;\n}\n/**\r\n * Returns minute fraction of the set timezone.\r\n *\r\n * @since 4.10.12\r\n * @param  timezone  Timezone identifier\r\n * @return           Minutes\r\n */\nexport function getTimezoneMinutes(timezone) {\n  var d = new Date();\n  d.setHours(0, 0, 0, 0);\n  var d2 = setTimezone(d, timezone);\n  return d2.getMinutes();\n}","map":{"version":3,"names":["$type","timeUnitDurations","millisecond","second","minute","hour","day","week","month","year","getNextUnit","unit","getDuration","count","hasValue","now","Date","getTime","copy","date","checkChange","dateOne","dateTwo","utc","timeZoneOffset1","timeZoneOffset2","getTimezoneOffset","setUTCMinutes","getUTCMinutes","changed","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCSeconds","nextUnit","add","timeZoneOffset","setUTCDate","seconds","setUTCSeconds","milliseconds","getUTCMilliseconds","setUTCMilliseconds","hours","setUTCHours","minutes","setUTCFullYear","setUTCMonth","wday","newTimeZoneOffset","diff","round","firstDateOfWeek","firstDate","roundMinutes","timezone","isNumber","indexOf","setTimezone","difference","unitCount","Math","floor","duration","setTime","weekDay","getUTCDay","d","toLocaleString","timeZone","getTimezoneMinutes","setHours","d2","getMinutes"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/utils/Time.js"],"sourcesContent":["import * as $type from \"../utils/Type\";\r\n/**\r\n * Maps time period names to their numeric representations in milliseconds.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport var timeUnitDurations = {\r\n    millisecond: 1,\r\n    second: 1000,\r\n    minute: 60000,\r\n    hour: 3600000,\r\n    day: 86400000,\r\n    week: 604800000,\r\n    month: 2592000000,\r\n    year: 31536000000\r\n};\r\n/**\r\n * Returns the next time unit that goes after source `unit`.\r\n *\r\n * E.g. \"hour\" is the next unit after \"minute\", etc.\r\n *\r\n * @ignore Exclude from docs\r\n * @param unit  Source time unit\r\n * @return Next time unit\r\n */\r\nexport function getNextUnit(unit) {\r\n    switch (unit) {\r\n        case \"year\":\r\n            return;\r\n        case \"month\":\r\n            return \"year\";\r\n        case \"week\":\r\n            return \"month\";\r\n        case \"day\":\r\n            return \"month\"; // not a mistake\r\n        case \"hour\":\r\n            return \"day\";\r\n        case \"minute\":\r\n            return \"hour\";\r\n        case \"second\":\r\n            return \"minute\";\r\n        case \"millisecond\":\r\n            return \"second\";\r\n    }\r\n}\r\n/**\r\n * Returns number of milliseconds in the `count` of time `unit`.\r\n *\r\n * Available units: \"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"week\",\r\n * \"month\", and \"year\".\r\n *\r\n * @ignore Exclude from docs\r\n * @param unit   Time unit\r\n * @param count  Number of units\r\n * @return Milliseconds\r\n */\r\nexport function getDuration(unit, count) {\r\n    if (!$type.hasValue(count)) {\r\n        count = 1;\r\n    }\r\n    return timeUnitDurations[unit] * count;\r\n}\r\n/**\r\n * Returns current `Date` object.\r\n *\r\n * @return Current date\r\n */\r\nexport function now() {\r\n    return new Date();\r\n}\r\n/**\r\n * Returns current timestamp.\r\n *\r\n * @return Current timestamp\r\n */\r\nexport function getTime() {\r\n    return now().getTime();\r\n}\r\n/**\r\n * Returns a copy of the `Date` object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param date  Source date\r\n * @return Copy\r\n */\r\nexport function copy(date) {\r\n    return new Date(date.getTime()); // todo: check if this is ok. new Date(date) used to strip milliseconds on FF in v3\r\n}\r\n/**\r\n * Checks if the `unit` part of two `Date` objects do not match. Two dates\r\n * represent a \"range\" of time, rather the same time date.\r\n *\r\n * @ignore Exclude from docs\r\n * @param dateOne  Date 1\r\n * @param dateTwo  Date 2\r\n * @param unit     Time unit to check\r\n * @return Range?\r\n */\r\nexport function checkChange(dateOne, dateTwo, unit, utc) {\r\n    dateOne = new Date(dateOne.getTime());\r\n    dateTwo = new Date(dateTwo.getTime());\r\n    var timeZoneOffset1 = 0;\r\n    var timeZoneOffset2 = 0;\r\n    if (!utc && unit != \"millisecond\") {\r\n        timeZoneOffset1 = dateOne.getTimezoneOffset();\r\n        dateOne.setUTCMinutes(dateOne.getUTCMinutes() - timeZoneOffset1);\r\n        timeZoneOffset2 = dateTwo.getTimezoneOffset();\r\n        dateTwo.setUTCMinutes(dateTwo.getUTCMinutes() - timeZoneOffset2);\r\n    }\r\n    var changed = false;\r\n    switch (unit) {\r\n        case \"year\":\r\n            if (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {\r\n                changed = true;\r\n            }\r\n            break;\r\n        case \"month\":\r\n            if (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {\r\n                changed = true;\r\n            }\r\n            else if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {\r\n                changed = true;\r\n            }\r\n            break;\r\n        case \"day\":\r\n            if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {\r\n                changed = true;\r\n            }\r\n            else if (dateOne.getUTCDate() != dateTwo.getUTCDate()) {\r\n                changed = true;\r\n            }\r\n            break;\r\n        case \"hour\":\r\n            if (dateOne.getUTCHours() != dateTwo.getUTCHours()) {\r\n                changed = true;\r\n            }\r\n            break;\r\n        case \"minute\":\r\n            if (dateOne.getUTCMinutes() != dateTwo.getUTCMinutes()) {\r\n                changed = true;\r\n            }\r\n            break;\r\n        case \"second\":\r\n            if (dateOne.getUTCSeconds() != dateTwo.getUTCSeconds()) {\r\n                changed = true;\r\n            }\r\n            break;\r\n        case \"millisecond\":\r\n            if (dateOne.getTime() != dateTwo.getTime()) {\r\n                changed = true;\r\n            }\r\n            break;\r\n    }\r\n    if (changed) {\r\n        return true;\r\n    }\r\n    var nextUnit = getNextUnit(unit);\r\n    if (nextUnit) {\r\n        dateOne.setUTCMinutes(dateOne.getUTCMinutes() + timeZoneOffset1);\r\n        dateTwo.setUTCMinutes(dateTwo.getUTCMinutes() + timeZoneOffset2);\r\n        return checkChange(dateOne, dateTwo, nextUnit, utc);\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Adds `count` of time `unit` to the source date. Returns a modified `Date` object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param date   Source date\r\n * @param unit   Time unit\r\n * @param count  Number of units to add\r\n * @return Modified date\r\n */\r\nexport function add(date, unit, count, utc) {\r\n    var timeZoneOffset = 0;\r\n    if (!utc && unit != \"millisecond\") {\r\n        timeZoneOffset = date.getTimezoneOffset();\r\n        date.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);\r\n    }\r\n    switch (unit) {\r\n        case \"day\":\r\n            var day = date.getUTCDate();\r\n            date.setUTCDate(day + count);\r\n            break;\r\n        case \"second\":\r\n            var seconds = date.getUTCSeconds();\r\n            date.setUTCSeconds(seconds + count);\r\n            break;\r\n        case \"millisecond\":\r\n            var milliseconds = date.getUTCMilliseconds();\r\n            date.setUTCMilliseconds(milliseconds + count);\r\n            break;\r\n        case \"hour\":\r\n            var hours = date.getUTCHours();\r\n            date.setUTCHours(hours + count);\r\n            break;\r\n        case \"minute\":\r\n            var minutes = date.getUTCMinutes();\r\n            date.setUTCMinutes(minutes + count);\r\n            break;\r\n        case \"year\":\r\n            var year = date.getUTCFullYear();\r\n            date.setUTCFullYear(year + count);\r\n            break;\r\n        case \"month\":\r\n            var month = date.getUTCMonth();\r\n            date.setUTCMonth(month + count);\r\n            break;\r\n        case \"week\":\r\n            var wday = date.getUTCDate();\r\n            date.setUTCDate(wday + count * 7);\r\n            break;\r\n    }\r\n    if (!utc && unit != \"millisecond\") {\r\n        date.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);\r\n        if (unit == \"day\" || unit == \"week\" || unit == \"month\" || unit == \"year\") {\r\n            var newTimeZoneOffset = date.getTimezoneOffset();\r\n            if (newTimeZoneOffset != timeZoneOffset) {\r\n                var diff = newTimeZoneOffset - timeZoneOffset;\r\n                date.setUTCMinutes(date.getUTCMinutes() + diff);\r\n                // solves issues if newe time falls back to old time zone\r\n                if (date.getTimezoneOffset() != newTimeZoneOffset) {\r\n                    date.setUTCMinutes(date.getUTCMinutes() - diff);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return date;\r\n}\r\n/**\r\n * \"Rounds\" the date to specific time unit.\r\n *\r\n * @ignore Exclude from docs\r\n * @param date             Source date\r\n * @param unit             Time unit\r\n * @param count            Number of units to round to\r\n * @param firstDateOfWeek  First day of week\r\n * @param roundMinutes     Minutes to round to (some timezones use non-whole hour)\r\n * @param timezone         Use specific named timezone when rounding\r\n * @return New date\r\n */\r\nexport function round(date, unit, count, firstDateOfWeek, utc, firstDate, roundMinutes, timezone) {\r\n    if (roundMinutes === void 0) { roundMinutes = 0; }\r\n    if (!$type.isNumber(count)) {\r\n        count = 1;\r\n    }\r\n    var timeZoneOffset = 0;\r\n    if (timezone && [\"day\", \"month\", \"week\", \"year\"].indexOf(unit) != -1) {\r\n        date = setTimezone(date, timezone);\r\n    }\r\n    if (!utc && unit != \"millisecond\") {\r\n        timeZoneOffset = date.getTimezoneOffset();\r\n        date.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);\r\n    }\r\n    switch (unit) {\r\n        case \"day\":\r\n            var day = date.getUTCDate();\r\n            if (count > 1) {\r\n                //\tday = Math.floor(day / count) * count;\r\n                if (firstDate) {\r\n                    firstDate = round(firstDate, \"day\", 1);\r\n                    var difference = date.getTime() - firstDate.getTime();\r\n                    var unitCount = Math.floor(difference / getDuration(\"day\") / count);\r\n                    var duration = getDuration(\"day\", unitCount * count);\r\n                    date.setTime(firstDate.getTime() + duration - timeZoneOffset * getDuration(\"minute\"));\r\n                }\r\n            }\r\n            else {\r\n                date.setUTCDate(day);\r\n            }\r\n            date.setUTCHours(0, 0, 0, 0);\r\n            break;\r\n        case \"second\":\r\n            var seconds = date.getUTCSeconds();\r\n            if (count > 1) {\r\n                seconds = Math.floor(seconds / count) * count;\r\n            }\r\n            date.setUTCSeconds(seconds, 0);\r\n            break;\r\n        case \"millisecond\":\r\n            if (count == 1) {\r\n                return date; // much better for perf!\r\n            }\r\n            var milliseconds = date.getUTCMilliseconds();\r\n            milliseconds = Math.floor(milliseconds / count) * count;\r\n            date.setUTCMilliseconds(milliseconds);\r\n            break;\r\n        case \"hour\":\r\n            var hours = date.getUTCHours();\r\n            if (count > 1) {\r\n                hours = Math.floor(hours / count) * count;\r\n            }\r\n            date.setUTCHours(hours, roundMinutes, 0, 0);\r\n            break;\r\n        case \"minute\":\r\n            var minutes = date.getUTCMinutes();\r\n            milliseconds = date.getUTCMilliseconds();\r\n            if (count > 1) {\r\n                minutes = Math.floor(minutes / count) * count;\r\n            }\r\n            date.setUTCMinutes(minutes, 0, 0);\r\n            break;\r\n        case \"month\":\r\n            var month = date.getUTCMonth();\r\n            if (count > 1) {\r\n                month = Math.floor(month / count) * count;\r\n            }\r\n            date.setUTCMonth(month, 1);\r\n            date.setUTCHours(0, roundMinutes, 0, 0);\r\n            break;\r\n        case \"year\":\r\n            var year = date.getUTCFullYear();\r\n            if (count > 1) {\r\n                year = Math.floor(year / count) * count;\r\n            }\r\n            date.setUTCFullYear(year, 0, 1);\r\n            date.setUTCHours(0, roundMinutes, 0, 0);\r\n            //let nonUTCDateY = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\r\n            //timeZoneOffset = nonUTCDateY.getTimezoneOffset();\r\n            break;\r\n        case \"week\":\r\n            var wday = date.getUTCDate();\r\n            var weekDay = date.getUTCDay();\r\n            if (!$type.isNumber(firstDateOfWeek)) {\r\n                firstDateOfWeek = 1;\r\n            }\r\n            // todo: rounding when count is not 1\r\n            if (weekDay >= firstDateOfWeek) {\r\n                wday = wday - weekDay + firstDateOfWeek;\r\n            }\r\n            else {\r\n                wday = wday - (7 + weekDay) + firstDateOfWeek;\r\n            }\r\n            date.setUTCDate(wday);\r\n            date.setUTCHours(0, roundMinutes, 0, 0);\r\n            break;\r\n    }\r\n    if (!utc && unit != \"millisecond\") {\r\n        date.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);\r\n        if (unit == \"day\" || unit == \"week\" || unit == \"month\" || unit == \"year\") {\r\n            var newTimeZoneOffset = date.getTimezoneOffset();\r\n            if (newTimeZoneOffset != timeZoneOffset) {\r\n                var diff = newTimeZoneOffset - timeZoneOffset;\r\n                date.setUTCMinutes(date.getUTCMinutes() + diff);\r\n            }\r\n        }\r\n    }\r\n    return date;\r\n}\r\n/**\r\n * Returns a new `Date` object which corresponds to the source date in a\r\n * specific timezone.\r\n *\r\n * @since 4.10.1\r\n * @param   date      Source date\r\n * @param   timezone  Timezone identifier\r\n * @return            Recalculated new Date\r\n */\r\nexport function setTimezone(date, timezone) {\r\n    var d = new Date(date.toLocaleString(\"en-US\", { timeZone: timezone }));\r\n    return d;\r\n}\r\n/**\r\n * Returns minute fraction of the set timezone.\r\n *\r\n * @since 4.10.12\r\n * @param  timezone  Timezone identifier\r\n * @return           Minutes\r\n */\r\nexport function getTimezoneMinutes(timezone) {\r\n    var d = new Date();\r\n    d.setHours(0, 0, 0, 0);\r\n    var d2 = setTimezone(d, timezone);\r\n    return d2.getMinutes();\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}