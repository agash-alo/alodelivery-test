{"ast":null,"code":"/**\r\n * Functionality for drawing simple ClockHands\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Container } from \"../../core/Container\";\nimport { Circle } from \"../../core/elements/Circle\";\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../../core/Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n *\r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\nvar ClockHand = /** @class */function (_super) {\n  __extends(ClockHand, _super);\n  /**\r\n   * Constructor\r\n   */\n  function ClockHand() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * An Axis hand is related to.\r\n     */\n    _this._axis = new MutableValueDisposer();\n    _this.className = \"ClockHand\";\n    var interfaceColors = new InterfaceColorSet();\n    _this.fill = interfaceColors.getFor(\"alternativeBackground\");\n    _this.stroke = _this.fill;\n    var pin = new Circle();\n    pin.radius = 5;\n    _this.pin = pin;\n    _this.isMeasured = false;\n    _this.startWidth = 5;\n    _this.endWidth = 1;\n    _this.width = percent(100);\n    _this.height = percent(100);\n    _this.radius = percent(100);\n    _this.innerRadius = percent(0);\n    var hand = new Trapezoid();\n    _this.hand = hand;\n    _this._disposers.push(_this._axis);\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Re(validates) the clock hand, effectively redrawing it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  ClockHand.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n    var hand = this.hand;\n    hand.width = this.pixelWidth;\n    var h = Math.max(this.startWidth, this.endWidth);\n    hand.height = h;\n    hand.leftSide = percent(this.startWidth / h * 100);\n    hand.rightSide = percent(this.endWidth / h * 100);\n    if (this.axis) {\n      var renderer = this.axis.renderer;\n      var x0 = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\n      var x1 = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\n      hand.x = x0;\n      hand.y = -h / 2;\n      hand.width = x1 - x0;\n    }\n  };\n  Object.defineProperty(ClockHand.prototype, \"pin\", {\n    /**\r\n     * @return Pin element\r\n     */\n    get: function () {\n      return this._pin;\n    },\n    /**\r\n     * A circle element used as hand's base. (pin)\r\n     *\r\n     * @param pin  Pin element\r\n     */\n    set: function (pin) {\n      if (this._pin) {\n        this.removeDispose(this._pin);\n      }\n      if (pin) {\n        this._pin = pin;\n        pin.parent = this;\n        this._disposers.push(pin);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"hand\", {\n    /**\r\n     * @return Hand element\r\n     */\n    get: function () {\n      return this._hand;\n    },\n    /**\r\n     * A trapezoid shape used for hand itself.\r\n     *\r\n     * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n     * `endWidth` properties.\r\n     *\r\n     * Set `endWidth` to 1 (px) to make it pointy.\r\n     *\r\n     * @param hand  Hand element\r\n     */\n    set: function (hand) {\n      if (this._hand) {\n        this.removeDispose(this._hand);\n      }\n      if (hand) {\n        this._hand = hand;\n        hand.parent = this;\n        this._disposers.push(hand);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"radius\", {\n    /**\r\n     * @return Radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n    /**\r\n     * Radius of the hand's outer end. (tip)\r\n     *\r\n     * Absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @default Percent(0)\r\n     * @param value  Radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"radius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"innerRadius\", {\n    /**\r\n     * @return Radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n    /**\r\n     * Radius of the hand's inner end. (base)\r\n     *\r\n     * Absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @default Percent(0)\r\n     * @param value  Radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"startWidth\", {\n    /**\r\n     * @return Width (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startWidth\");\n    },\n    /**\r\n     * Width, in pixels, of the clock hand's inner end. (base)\r\n     *\r\n     * @default 5\r\n     * @param value  Width (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"startWidth\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"endWidth\", {\n    /**\r\n     * @return Width (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endWidth\");\n    },\n    /**\r\n     * Width, in pixels, of the clock hand's outer end. (tip)\r\n     *\r\n     * @default 1\r\n     * @param value  Width (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"endWidth\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"rotationDirection\", {\n    /**\r\n     * @return rotationDirection\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"rotationDirection\");\n    },\n    /**\r\n     * Rotation direction\r\n     *\r\n     * @default any\r\n     * @param value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"rotationDirection\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Moves clock hand to particular value.\r\n   *\r\n   * If `duration` is set to a number in milliseconds, the hand will move\r\n   * to the new position gracefully, rather than jumping rigth to it.\r\n   *\r\n   * Alternatively, you can also set `value` directly.\r\n   *\r\n   * @param value     New value\r\n   * @param duration  Animation duration (ms)\r\n   * @param easing  Animation easing function\r\n   */\n  ClockHand.prototype.showValue = function (value, duration, easing) {\n    this._value = value;\n    if (value != undefined) {\n      if (!$type.isNumber(duration)) {\n        duration = 0;\n      }\n      if (this.axis) {\n        var renderer = this.axis.renderer;\n        var newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\n        var currentAngle = this.rotation;\n        if (this.rotationDirection == \"clockWise\") {\n          if (newAngle < currentAngle) {\n            this.rotation = currentAngle - 360;\n          }\n        }\n        if (this.rotationDirection == \"counterClockWise\") {\n          if (newAngle > currentAngle) {\n            this.rotation = currentAngle + 360;\n          }\n        }\n        this.animate({\n          property: \"rotation\",\n          to: newAngle\n        }, duration, easing);\n      }\n    }\n  };\n  Object.defineProperty(ClockHand.prototype, \"currentPosition\", {\n    /**\r\n     * Returns hand's relative position on axis\r\n     */\n    get: function () {\n      if (this.axis) {\n        var renderer = this.axis.renderer;\n        return renderer.angleToPosition(this.rotation);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"value\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      return this._value;\n    },\n    /**\r\n     * A current value clock hand is pointing to.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function (value) {\n      this.showValue(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClockHand.prototype, \"axis\", {\n    /**\r\n     * @return Axis\r\n     */\n    get: function () {\n      return this._axis.get();\n    },\n    /**\r\n     * An Axis clock hand is associated with.\r\n     *\r\n     * Hand's `value` relates to values on the Axis.\r\n     *\r\n     * @param axis  Axis\r\n     */\n    set: function (axis) {\n      if (this.axis != axis) {\n        this._axis.set(axis, new MultiDisposer([axis.events.on(\"datavalidated\", this.updateValue, this, false), axis.events.on(\"datarangechanged\", this.updateValue, this, false), axis.events.on(\"dataitemsvalidated\", this.updateValue, this, false), axis.events.on(\"propertychanged\", this.invalidate, this, false)]));\n      }\n      if (axis) {\n        var chart = axis.chart;\n        if (chart) {\n          this.rotation = chart.startAngle;\n        }\n      }\n      this.parent = axis.renderer;\n      this.zIndex = 5;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Triggers `value` accessor, so that Hand animates to new position, in case\r\n   * value has changed.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  ClockHand.prototype.updateValue = function () {\n    this.value = this.value;\n  };\n  /**\r\n  * Processes JSON-based config before it is applied to the object.\r\n  *\r\n  * @ignore Exclude from docs\r\n  * @param config  Config\r\n  */\n  ClockHand.prototype.processConfig = function (config) {\n    if (config) {\n      // Connect clock hands with axes\n      if ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\n        config.axis = this.map.getKey(config.axis);\n      }\n    }\n    _super.prototype.processConfig.call(this, config);\n  };\n  return ClockHand;\n}(Container);\nexport { ClockHand };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"ClockHand\"] = ClockHand;","map":{"version":3,"names":["__extends","Container","Circle","Trapezoid","MutableValueDisposer","MultiDisposer","percent","registry","InterfaceColorSet","$utils","$type","ClockHand","_super","_this","call","_axis","className","interfaceColors","fill","getFor","stroke","pin","radius","isMeasured","startWidth","endWidth","width","height","innerRadius","hand","_disposers","push","applyTheme","prototype","validate","pixelWidth","h","Math","max","leftSide","rightSide","axis","renderer","x0","relativeRadiusToValue","pixelRadius","x1","x","y","Object","defineProperty","get","_pin","set","removeDispose","parent","enumerable","configurable","_hand","getPropertyValue","value","setPercentProperty","setPropertyValue","showValue","duration","easing","_value","undefined","isNumber","newAngle","positionToAngle","anyToPosition","currentAngle","rotation","rotationDirection","animate","property","to","angleToPosition","events","on","updateValue","invalidate","chart","startAngle","zIndex","processConfig","config","hasValue","isString","map","hasKey","getKey","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/charts/elements/ClockHand.js"],"sourcesContent":["/**\r\n * Functionality for drawing simple ClockHands\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../../core/Container\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n *\r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\r\nvar ClockHand = /** @class */ (function (_super) {\r\n    __extends(ClockHand, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ClockHand() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * An Axis hand is related to.\r\n         */\r\n        _this._axis = new MutableValueDisposer();\r\n        _this.className = \"ClockHand\";\r\n        var interfaceColors = new InterfaceColorSet();\r\n        _this.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n        _this.stroke = _this.fill;\r\n        var pin = new Circle();\r\n        pin.radius = 5;\r\n        _this.pin = pin;\r\n        _this.isMeasured = false;\r\n        _this.startWidth = 5;\r\n        _this.endWidth = 1;\r\n        _this.width = percent(100);\r\n        _this.height = percent(100);\r\n        _this.radius = percent(100);\r\n        _this.innerRadius = percent(0);\r\n        var hand = new Trapezoid();\r\n        _this.hand = hand;\r\n        _this._disposers.push(_this._axis);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Re(validates) the clock hand, effectively redrawing it.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ClockHand.prototype.validate = function () {\r\n        _super.prototype.validate.call(this);\r\n        var hand = this.hand;\r\n        hand.width = this.pixelWidth;\r\n        var h = Math.max(this.startWidth, this.endWidth);\r\n        hand.height = h;\r\n        hand.leftSide = percent(this.startWidth / h * 100);\r\n        hand.rightSide = percent(this.endWidth / h * 100);\r\n        if (this.axis) {\r\n            var renderer = this.axis.renderer;\r\n            var x0 = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\r\n            var x1 = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\r\n            hand.x = x0;\r\n            hand.y = -h / 2;\r\n            hand.width = x1 - x0;\r\n        }\r\n    };\r\n    Object.defineProperty(ClockHand.prototype, \"pin\", {\r\n        /**\r\n         * @return Pin element\r\n         */\r\n        get: function () {\r\n            return this._pin;\r\n        },\r\n        /**\r\n         * A circle element used as hand's base. (pin)\r\n         *\r\n         * @param pin  Pin element\r\n         */\r\n        set: function (pin) {\r\n            if (this._pin) {\r\n                this.removeDispose(this._pin);\r\n            }\r\n            if (pin) {\r\n                this._pin = pin;\r\n                pin.parent = this;\r\n                this._disposers.push(pin);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ClockHand.prototype, \"hand\", {\r\n        /**\r\n         * @return Hand element\r\n         */\r\n        get: function () {\r\n            return this._hand;\r\n        },\r\n        /**\r\n         * A trapezoid shape used for hand itself.\r\n         *\r\n         * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n         * `endWidth` properties.\r\n         *\r\n         * Set `endWidth` to 1 (px) to make it pointy.\r\n         *\r\n         * @param hand  Hand element\r\n         */\r\n        set: function (hand) {\r\n            if (this._hand) {\r\n                this.removeDispose(this._hand);\r\n            }\r\n            if (hand) {\r\n                this._hand = hand;\r\n                hand.parent = this;\r\n                this._disposers.push(hand);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ClockHand.prototype, \"radius\", {\r\n        /**\r\n         * @return Radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Radius of the hand's outer end. (tip)\r\n         *\r\n         * Absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @default Percent(0)\r\n         * @param value  Radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ClockHand.prototype, \"innerRadius\", {\r\n        /**\r\n         * @return Radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"innerRadius\");\r\n        },\r\n        /**\r\n         * Radius of the hand's inner end. (base)\r\n         *\r\n         * Absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @default Percent(0)\r\n         * @param value  Radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ClockHand.prototype, \"startWidth\", {\r\n        /**\r\n         * @return Width (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startWidth\");\r\n        },\r\n        /**\r\n         * Width, in pixels, of the clock hand's inner end. (base)\r\n         *\r\n         * @default 5\r\n         * @param value  Width (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"startWidth\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ClockHand.prototype, \"endWidth\", {\r\n        /**\r\n         * @return Width (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endWidth\");\r\n        },\r\n        /**\r\n         * Width, in pixels, of the clock hand's outer end. (tip)\r\n         *\r\n         * @default 1\r\n         * @param value  Width (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"endWidth\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ClockHand.prototype, \"rotationDirection\", {\r\n        /**\r\n         * @return rotationDirection\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"rotationDirection\");\r\n        },\r\n        /**\r\n         * Rotation direction\r\n         *\r\n         * @default any\r\n         * @param value\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"rotationDirection\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Moves clock hand to particular value.\r\n     *\r\n     * If `duration` is set to a number in milliseconds, the hand will move\r\n     * to the new position gracefully, rather than jumping rigth to it.\r\n     *\r\n     * Alternatively, you can also set `value` directly.\r\n     *\r\n     * @param value     New value\r\n     * @param duration  Animation duration (ms)\r\n     * @param easing  Animation easing function\r\n     */\r\n    ClockHand.prototype.showValue = function (value, duration, easing) {\r\n        this._value = value;\r\n        if (value != undefined) {\r\n            if (!$type.isNumber(duration)) {\r\n                duration = 0;\r\n            }\r\n            if (this.axis) {\r\n                var renderer = this.axis.renderer;\r\n                var newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\r\n                var currentAngle = this.rotation;\r\n                if (this.rotationDirection == \"clockWise\") {\r\n                    if (newAngle < currentAngle) {\r\n                        this.rotation = currentAngle - 360;\r\n                    }\r\n                }\r\n                if (this.rotationDirection == \"counterClockWise\") {\r\n                    if (newAngle > currentAngle) {\r\n                        this.rotation = currentAngle + 360;\r\n                    }\r\n                }\r\n                this.animate({ property: \"rotation\", to: newAngle }, duration, easing);\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(ClockHand.prototype, \"currentPosition\", {\r\n        /**\r\n         * Returns hand's relative position on axis\r\n         */\r\n        get: function () {\r\n            if (this.axis) {\r\n                var renderer = this.axis.renderer;\r\n                return renderer.angleToPosition(this.rotation);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ClockHand.prototype, \"value\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            return this._value;\r\n        },\r\n        /**\r\n         * A current value clock hand is pointing to.\r\n         *\r\n         * @param value  Value\r\n         */\r\n        set: function (value) {\r\n            this.showValue(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ClockHand.prototype, \"axis\", {\r\n        /**\r\n         * @return Axis\r\n         */\r\n        get: function () {\r\n            return this._axis.get();\r\n        },\r\n        /**\r\n         * An Axis clock hand is associated with.\r\n         *\r\n         * Hand's `value` relates to values on the Axis.\r\n         *\r\n         * @param axis  Axis\r\n         */\r\n        set: function (axis) {\r\n            if (this.axis != axis) {\r\n                this._axis.set(axis, new MultiDisposer([\r\n                    axis.events.on(\"datavalidated\", this.updateValue, this, false),\r\n                    axis.events.on(\"datarangechanged\", this.updateValue, this, false),\r\n                    axis.events.on(\"dataitemsvalidated\", this.updateValue, this, false),\r\n                    axis.events.on(\"propertychanged\", this.invalidate, this, false)\r\n                ]));\r\n            }\r\n            if (axis) {\r\n                var chart = axis.chart;\r\n                if (chart) {\r\n                    this.rotation = chart.startAngle;\r\n                }\r\n            }\r\n            this.parent = axis.renderer;\r\n            this.zIndex = 5;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Triggers `value` accessor, so that Hand animates to new position, in case\r\n     * value has changed.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ClockHand.prototype.updateValue = function () {\r\n        this.value = this.value;\r\n    };\r\n    /**\r\n * Processes JSON-based config before it is applied to the object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param config  Config\r\n */\r\n    ClockHand.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Connect clock hands with axes\r\n            if ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\r\n                config.axis = this.map.getKey(config.axis);\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    return ClockHand;\r\n}(Container));\r\nexport { ClockHand };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ClockHand\"] = ClockHand;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}