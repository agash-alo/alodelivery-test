{"ast":null,"code":"/**\r\n * Cursor module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Container } from \"../../core/Container\";\nimport { getInteraction } from \"../../core/interaction/Interaction\";\nimport { registry } from \"../../core/Registry\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $dom from \"../../core/utils/DOM\";\nimport { system } from \"../../core/System\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Main Cursor class with common cursor functionality.\r\n *\r\n * Chart-specific cursors must extend this class.\r\n *\r\n * @see {@link ICursorEvents} for a list of available events\r\n * @see {@link ICursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\nvar Cursor = /** @class */function (_super) {\n  __extends(Cursor, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Cursor() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * Current cursor position during selection.\r\n     *\r\n     * @todo Better description\r\n     */\n    _this.point = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * Specifies the rules when cursor needs to be moved or hidden.\r\n     */\n    _this._stick = \"none\";\n    _this.className = \"Cursor\";\n    // Set defaults\n    _this.width = percent(100);\n    _this.height = percent(100);\n    _this.shouldClone = false;\n    _this.hide(0);\n    _this.trackable = true;\n    _this.clickable = true;\n    _this.isMeasured = false;\n    // Add events on body to trigger down and up events (to start zooming or\n    // selection)\n    var interaction = getInteraction();\n    _this._disposers.push(interaction.body.events.on(\"down\", _this.handleCursorDown, _this));\n    _this._disposers.push(interaction.body.events.on(\"up\", _this.handleCursorUp, _this));\n    _this._disposers.push(interaction.body.events.on(\"track\", _this.handleCursorMove, _this));\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Handle pointer movement in document and update cursor position as needed.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event Event\r\n   */\n  Cursor.prototype.handleCursorMove = function (event) {\n    if (!this.interactionsEnabled || this.interactions.isTouchProtected && event.touch) {\n      return;\n    }\n    if ((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\" || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\n      // We want to let zoom/pan continue even if cursor is outside chart area\n      if (!this.isHidden || !this.isHiding) {\n        this.hide();\n      }\n      return;\n    }\n    var local = $utils.documentPointToSprite(event.pointer.point, this);\n    if (this._stick == \"hard\" && this._stickPoint) {\n      local = this._stickPoint;\n    }\n    if (this._stick == \"soft\" && this._stickPoint) {\n      if (!this.fitsToBounds(local)) {\n        local = this._stickPoint;\n      }\n    }\n    if (this._adapterO) {\n      this._adapterO.apply(\"cursorPoint\", local);\n    }\n    this.triggerMove(local);\n    return local;\n  };\n  /**\r\n   * Hides actual SVG elements and handles hiding animations.\r\n   *\r\n   * @param duration  Fade out duration (ms)\r\n   * @return Fade out duration (ms)\r\n   * @ignore\r\n   */\n  Cursor.prototype.hideReal = function (duration) {\n    if ((this._stick == \"hard\" || this._stick == \"soft\") && this._stickPoint) {\n      return;\n    }\n    return _super.prototype.hideReal.call(this, duration);\n  };\n  /**\r\n   * Places the cursor at specific point.\r\n   *\r\n   * The second parameter has following options:\r\n   *\r\n   * `\"none\"` - placed cursor will only be there until mouse/touch moves, then\r\n   * it either moves to a new place (if pointer over plot area) or is hidden.\r\n   *\r\n   * `\"soft\"` - cursor will stay in the place if mouse/touch is happening\r\n   * outside chart, but will move to a new place whe plot area is hovered or\r\n   * touched.\r\n   *\r\n   * `\"hard\"` - cursor will stay in place no matter what, until it is moved by\r\n   * another `triggerMove()` call.\r\n   *\r\n   * The third parameter - `force` (since `4.9.5`) - if set to `true` will\r\n   * make cursor execute all of the actions associated with cursor move,\r\n   * including line redraws, tooltip updates, etc. Useful when underlying\r\n   * chart data is dynamically being updated.\r\n   *\r\n   * @param point  Point to place cursor at\r\n   * @param stick  Level of cursor stickiness to the place\r\n   * @param force  Force cursor move\r\n   */\n  Cursor.prototype.triggerMove = function (point, stick, force) {\n    point.x = $math.round(point.x, 1);\n    point.y = $math.round(point.y, 1);\n    if (stick) {\n      this._stick = stick;\n    }\n    if (stick == \"hard\" || stick == \"soft\") {\n      this._stickPoint = point;\n    }\n    this.triggerMoveReal(point, force);\n  };\n  /**\r\n   * Places the cursor at specific point.\r\n   *\r\n   * @param point Point to place cursor at\r\n   */\n  Cursor.prototype.triggerMoveReal = function (point, force) {\n    if (this.point.x != point.x || this.point.y != point.y || force) {\n      this.point = point;\n      this.invalidatePosition();\n      // hide cursor if it's out of bounds\n      if (this.fitsToBounds(point)) {\n        this.show(0);\n      } else {\n        // unless we are selecting (mouse is down)\n        if (!this.downPoint) {\n          this.hide(0);\n        }\n      }\n      if (this.visible) {\n        this.getPositions();\n        this.dispatch(\"cursorpositionchanged\"); // not good to dispatch later (check step count example)\n      }\n    }\n  };\n  /**\r\n   * Simulates pressing down (click/touch) action by a cursor.\r\n   *\r\n   * @param point               Point of action\r\n   */\n  Cursor.prototype.triggerDown = function (point) {\n    this.triggerDownReal(point);\n  };\n  /**\r\n   * Simulates pressing down (click/touch) action by a cursor.\r\n   *\r\n   * @param point               Point of action\r\n   */\n  Cursor.prototype.triggerDownReal = function (point) {\n    switch (this._generalBehavior) {\n      case \"zoom\":\n        this.dispatchImmediately(\"zoomstarted\");\n        break;\n      case \"select\":\n        this.dispatchImmediately(\"selectstarted\");\n        break;\n      case \"pan\":\n        this.dispatchImmediately(\"panstarted\");\n        getInteraction().setGlobalStyle(MouseCursorStyle.grabbing);\n        break;\n    }\n  };\n  /**\r\n   * Simulates the action of release of the mouse down / touch.\r\n   *\r\n   * @param point               Point of action\r\n   */\n  Cursor.prototype.triggerUp = function (point) {\n    this.triggerUpReal(point);\n  };\n  /**\r\n   * Simulates the action of release of the mouse down / touch.\r\n   *\r\n   * @param point               Point of action\r\n   */\n  Cursor.prototype.triggerUpReal = function (point) {\n    system.requestFrame();\n    this.updatePoint(this.upPoint);\n    var interaction = getInteraction();\n    if ($math.getDistance(this._upPointOrig, this._downPointOrig) > interaction.getHitOption(this.interactions, \"hitTolerance\")) {\n      switch (this._generalBehavior) {\n        case \"zoom\":\n          this.dispatch(\"zoomended\");\n          break;\n        case \"select\":\n          this.dispatch(\"selectended\");\n          break;\n        case \"pan\":\n          this.dispatch(\"panended\");\n          interaction.setGlobalStyle(MouseCursorStyle.default);\n          break;\n      }\n      this.downPoint = undefined;\n      this.updateSelection();\n    }\n    /*\r\n    else {\r\n        \r\n        if(this._generalBehavior == \"select\"){\r\n            this.dispatchImmediately(\"selectended\");\r\n        }\r\n        this.dispatchImmediately(\"behaviorcanceled\");\r\n        interaction.setGlobalStyle(MouseCursorStyle.default);\r\n        this.downPoint = undefined;\r\n    }*/\n  };\n  /**\r\n   * Updates selection dimensions on size change.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Cursor.prototype.updateSelection = function () {};\n  /**\r\n   * Updates cursors current positions.\r\n   */\n  Cursor.prototype.getPositions = function () {\n    // positions are used by axes or series\n    this.xPosition = this.point.x / this.innerWidth;\n    this.yPosition = 1 - this.point.y / this.innerHeight;\n  };\n  /**\r\n   * Handles pointer down event so we can start zoom or selection.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event Original event\r\n   */\n  Cursor.prototype.handleCursorDown = function (event) {\n    if (!this.interactionsEnabled || this.interactions.isTouchProtected && event.touch || !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\n      return;\n    }\n    // Initiate blur so that whatever focused element on the page is unselected\n    $dom.blur();\n    // Get local point\n    var local = $utils.documentPointToSprite(event.pointer.point, this);\n    if (this._stick == \"hard\" && this._stickPoint) {\n      local = this._stickPoint;\n    }\n    if (this._adapterO) {\n      this._adapterO.apply(\"cursorPoint\", local);\n    }\n    if (!this.fitsToBounds(local)) {\n      return;\n    }\n    this._downPointOrig = {\n      x: local.x,\n      y: local.y\n    };\n    // We need to cancel the event to prevent gestures on touch devices\n    if (event.event.cancelable && this.shouldPreventGestures(event.touch) && this.fitsToBounds(local)) {\n      event.event.preventDefault();\n    }\n    // Make this happen\n    this.triggerMove(local);\n    this.triggerDown(local);\n  };\n  /**\r\n   * Determines whether Cursor should prevent default action on move.\r\n   *\r\n   * Child classes should override this as necessary.\r\n   *\r\n   * @return Prevent default?\r\n   */\n  Cursor.prototype.shouldPreventGestures = function (touch) {\n    return true;\n  };\n  /**\r\n   * Updates the coordinates of where pointer down event occurred\r\n   * (was pressed).\r\n   */\n  Cursor.prototype.updatePoint = function (point) {};\n  /**\r\n   * Handles pointer up event - finishes zoom or selection action.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event Original event\r\n   */\n  Cursor.prototype.handleCursorUp = function (event) {\n    if (!this.interactionsEnabled) {\n      return;\n    }\n    if (!this.downPoint && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\n      return;\n    }\n    var local = $utils.documentPointToSprite(event.pointer.point, this);\n    if (this._adapterO) {\n      this._adapterO.apply(\"cursorPoint\", local);\n    }\n    if (!this.downPoint || !this.fitsToBounds(this.downPoint)) {\n      return;\n    }\n    if (this._stick == \"hard\" && this._stickPoint) {\n      local = this._stickPoint;\n    }\n    this._upPointOrig = {\n      x: local.x,\n      y: local.y\n    };\n    this.triggerMove(local);\n    this.triggerUp(local);\n  };\n  Object.defineProperty(Cursor.prototype, \"chart\", {\n    /**\r\n     * @return Chart\r\n     */\n    get: function () {\n      return this._chart;\n    },\n    /**\r\n     * A reference to a [[Chart]] the cursor belongs to.\r\n     *\r\n     * @param value  Chart\r\n     */\n    set: function (value) {\n      this._chart = value;\n      if ($type.hasValue(this._chart.plotContainer)) {\n        getInteraction().lockElement(this._chart.plotContainer.interactions);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Cursor;\n}(Container);\nexport { Cursor };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Cursor\"] = Cursor;","map":{"version":3,"names":["__extends","Container","getInteraction","registry","percent","MouseCursorStyle","$math","$utils","$type","$dom","system","Cursor","_super","_this","call","point","x","y","_stick","className","width","height","shouldClone","hide","trackable","clickable","isMeasured","interaction","_disposers","push","body","events","on","handleCursorDown","handleCursorUp","handleCursorMove","applyTheme","prototype","event","interactionsEnabled","interactions","isTouchProtected","touch","_generalBehavior","downPoint","isLocalElement","pointer","paper","svg","uid","isHidden","isHiding","local","documentPointToSprite","_stickPoint","fitsToBounds","_adapterO","apply","triggerMove","hideReal","duration","stick","force","round","triggerMoveReal","invalidatePosition","show","visible","getPositions","dispatch","triggerDown","triggerDownReal","dispatchImmediately","setGlobalStyle","grabbing","triggerUp","triggerUpReal","requestFrame","updatePoint","upPoint","getDistance","_upPointOrig","_downPointOrig","getHitOption","default","undefined","updateSelection","xPosition","innerWidth","yPosition","innerHeight","blur","cancelable","shouldPreventGestures","preventDefault","Object","defineProperty","get","_chart","set","value","hasValue","plotContainer","lockElement","enumerable","configurable","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/charts/cursors/Cursor.js"],"sourcesContent":["/**\r\n * Cursor module\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../../core/Container\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $dom from \"../../core/utils/DOM\";\r\nimport { system } from \"../../core/System\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Main Cursor class with common cursor functionality.\r\n *\r\n * Chart-specific cursors must extend this class.\r\n *\r\n * @see {@link ICursorEvents} for a list of available events\r\n * @see {@link ICursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nvar Cursor = /** @class */ (function (_super) {\r\n    __extends(Cursor, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Cursor() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Current cursor position during selection.\r\n         *\r\n         * @todo Better description\r\n         */\r\n        _this.point = { x: 0, y: 0 };\r\n        /**\r\n         * Specifies the rules when cursor needs to be moved or hidden.\r\n         */\r\n        _this._stick = \"none\";\r\n        _this.className = \"Cursor\";\r\n        // Set defaults\r\n        _this.width = percent(100);\r\n        _this.height = percent(100);\r\n        _this.shouldClone = false;\r\n        _this.hide(0);\r\n        _this.trackable = true;\r\n        _this.clickable = true;\r\n        _this.isMeasured = false;\r\n        // Add events on body to trigger down and up events (to start zooming or\r\n        // selection)\r\n        var interaction = getInteraction();\r\n        _this._disposers.push(interaction.body.events.on(\"down\", _this.handleCursorDown, _this));\r\n        _this._disposers.push(interaction.body.events.on(\"up\", _this.handleCursorUp, _this));\r\n        _this._disposers.push(interaction.body.events.on(\"track\", _this.handleCursorMove, _this));\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Handle pointer movement in document and update cursor position as needed.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event Event\r\n     */\r\n    Cursor.prototype.handleCursorMove = function (event) {\r\n        if (!this.interactionsEnabled || (this.interactions.isTouchProtected && event.touch)) {\r\n            return;\r\n        }\r\n        if (((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\") || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n            // We want to let zoom/pan continue even if cursor is outside chart area\r\n            if (!this.isHidden || !this.isHiding) {\r\n                this.hide();\r\n            }\r\n            return;\r\n        }\r\n        var local = $utils.documentPointToSprite(event.pointer.point, this);\r\n        if (this._stick == \"hard\" && this._stickPoint) {\r\n            local = this._stickPoint;\r\n        }\r\n        if (this._stick == \"soft\" && this._stickPoint) {\r\n            if (!this.fitsToBounds(local)) {\r\n                local = this._stickPoint;\r\n            }\r\n        }\r\n        if (this._adapterO) {\r\n            this._adapterO.apply(\"cursorPoint\", local);\r\n        }\r\n        this.triggerMove(local);\r\n        return local;\r\n    };\r\n    /**\r\n     * Hides actual SVG elements and handles hiding animations.\r\n     *\r\n     * @param duration  Fade out duration (ms)\r\n     * @return Fade out duration (ms)\r\n     * @ignore\r\n     */\r\n    Cursor.prototype.hideReal = function (duration) {\r\n        if ((this._stick == \"hard\" || this._stick == \"soft\") && this._stickPoint) {\r\n            return;\r\n        }\r\n        return _super.prototype.hideReal.call(this, duration);\r\n    };\r\n    /**\r\n     * Places the cursor at specific point.\r\n     *\r\n     * The second parameter has following options:\r\n     *\r\n     * `\"none\"` - placed cursor will only be there until mouse/touch moves, then\r\n     * it either moves to a new place (if pointer over plot area) or is hidden.\r\n     *\r\n     * `\"soft\"` - cursor will stay in the place if mouse/touch is happening\r\n     * outside chart, but will move to a new place whe plot area is hovered or\r\n     * touched.\r\n     *\r\n     * `\"hard\"` - cursor will stay in place no matter what, until it is moved by\r\n     * another `triggerMove()` call.\r\n     *\r\n     * The third parameter - `force` (since `4.9.5`) - if set to `true` will\r\n     * make cursor execute all of the actions associated with cursor move,\r\n     * including line redraws, tooltip updates, etc. Useful when underlying\r\n     * chart data is dynamically being updated.\r\n     *\r\n     * @param point  Point to place cursor at\r\n     * @param stick  Level of cursor stickiness to the place\r\n     * @param force  Force cursor move\r\n     */\r\n    Cursor.prototype.triggerMove = function (point, stick, force) {\r\n        point.x = $math.round(point.x, 1);\r\n        point.y = $math.round(point.y, 1);\r\n        if (stick) {\r\n            this._stick = stick;\r\n        }\r\n        if (stick == \"hard\" || stick == \"soft\") {\r\n            this._stickPoint = point;\r\n        }\r\n        this.triggerMoveReal(point, force);\r\n    };\r\n    /**\r\n     * Places the cursor at specific point.\r\n     *\r\n     * @param point Point to place cursor at\r\n     */\r\n    Cursor.prototype.triggerMoveReal = function (point, force) {\r\n        if (this.point.x != point.x || this.point.y != point.y || force) {\r\n            this.point = point;\r\n            this.invalidatePosition();\r\n            // hide cursor if it's out of bounds\r\n            if (this.fitsToBounds(point)) {\r\n                this.show(0);\r\n            }\r\n            else {\r\n                // unless we are selecting (mouse is down)\r\n                if (!this.downPoint) {\r\n                    this.hide(0);\r\n                }\r\n            }\r\n            if (this.visible) {\r\n                this.getPositions();\r\n                this.dispatch(\"cursorpositionchanged\"); // not good to dispatch later (check step count example)\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Simulates pressing down (click/touch) action by a cursor.\r\n     *\r\n     * @param point               Point of action\r\n     */\r\n    Cursor.prototype.triggerDown = function (point) {\r\n        this.triggerDownReal(point);\r\n    };\r\n    /**\r\n     * Simulates pressing down (click/touch) action by a cursor.\r\n     *\r\n     * @param point               Point of action\r\n     */\r\n    Cursor.prototype.triggerDownReal = function (point) {\r\n        switch (this._generalBehavior) {\r\n            case \"zoom\":\r\n                this.dispatchImmediately(\"zoomstarted\");\r\n                break;\r\n            case \"select\":\r\n                this.dispatchImmediately(\"selectstarted\");\r\n                break;\r\n            case \"pan\":\r\n                this.dispatchImmediately(\"panstarted\");\r\n                getInteraction().setGlobalStyle(MouseCursorStyle.grabbing);\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * Simulates the action of release of the mouse down / touch.\r\n     *\r\n     * @param point               Point of action\r\n     */\r\n    Cursor.prototype.triggerUp = function (point) {\r\n        this.triggerUpReal(point);\r\n    };\r\n    /**\r\n     * Simulates the action of release of the mouse down / touch.\r\n     *\r\n     * @param point               Point of action\r\n     */\r\n    Cursor.prototype.triggerUpReal = function (point) {\r\n        system.requestFrame();\r\n        this.updatePoint(this.upPoint);\r\n        var interaction = getInteraction();\r\n        if ($math.getDistance(this._upPointOrig, this._downPointOrig) > interaction.getHitOption(this.interactions, \"hitTolerance\")) {\r\n            switch (this._generalBehavior) {\r\n                case \"zoom\":\r\n                    this.dispatch(\"zoomended\");\r\n                    break;\r\n                case \"select\":\r\n                    this.dispatch(\"selectended\");\r\n                    break;\r\n                case \"pan\":\r\n                    this.dispatch(\"panended\");\r\n                    interaction.setGlobalStyle(MouseCursorStyle.default);\r\n                    break;\r\n            }\r\n            this.downPoint = undefined;\r\n            this.updateSelection();\r\n        }\r\n        /*\r\n        else {\r\n            \r\n            if(this._generalBehavior == \"select\"){\r\n                this.dispatchImmediately(\"selectended\");\r\n            }\r\n            this.dispatchImmediately(\"behaviorcanceled\");\r\n            interaction.setGlobalStyle(MouseCursorStyle.default);\r\n            this.downPoint = undefined;\r\n        }*/\r\n    };\r\n    /**\r\n     * Updates selection dimensions on size change.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Cursor.prototype.updateSelection = function () {\r\n    };\r\n    /**\r\n     * Updates cursors current positions.\r\n     */\r\n    Cursor.prototype.getPositions = function () {\r\n        // positions are used by axes or series\r\n        this.xPosition = this.point.x / this.innerWidth;\r\n        this.yPosition = 1 - this.point.y / this.innerHeight;\r\n    };\r\n    /**\r\n     * Handles pointer down event so we can start zoom or selection.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event Original event\r\n     */\r\n    Cursor.prototype.handleCursorDown = function (event) {\r\n        if (!this.interactionsEnabled || (this.interactions.isTouchProtected && event.touch) || !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n            return;\r\n        }\r\n        // Initiate blur so that whatever focused element on the page is unselected\r\n        $dom.blur();\r\n        // Get local point\r\n        var local = $utils.documentPointToSprite(event.pointer.point, this);\r\n        if (this._stick == \"hard\" && this._stickPoint) {\r\n            local = this._stickPoint;\r\n        }\r\n        if (this._adapterO) {\r\n            this._adapterO.apply(\"cursorPoint\", local);\r\n        }\r\n        if (!this.fitsToBounds(local)) {\r\n            return;\r\n        }\r\n        this._downPointOrig = { x: local.x, y: local.y };\r\n        // We need to cancel the event to prevent gestures on touch devices\r\n        if (event.event.cancelable && this.shouldPreventGestures(event.touch) && this.fitsToBounds(local)) {\r\n            event.event.preventDefault();\r\n        }\r\n        // Make this happen\r\n        this.triggerMove(local);\r\n        this.triggerDown(local);\r\n    };\r\n    /**\r\n     * Determines whether Cursor should prevent default action on move.\r\n     *\r\n     * Child classes should override this as necessary.\r\n     *\r\n     * @return Prevent default?\r\n     */\r\n    Cursor.prototype.shouldPreventGestures = function (touch) {\r\n        return true;\r\n    };\r\n    /**\r\n     * Updates the coordinates of where pointer down event occurred\r\n     * (was pressed).\r\n     */\r\n    Cursor.prototype.updatePoint = function (point) {\r\n    };\r\n    /**\r\n     * Handles pointer up event - finishes zoom or selection action.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event Original event\r\n     */\r\n    Cursor.prototype.handleCursorUp = function (event) {\r\n        if (!this.interactionsEnabled) {\r\n            return;\r\n        }\r\n        if (!this.downPoint && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n            return;\r\n        }\r\n        var local = $utils.documentPointToSprite(event.pointer.point, this);\r\n        if (this._adapterO) {\r\n            this._adapterO.apply(\"cursorPoint\", local);\r\n        }\r\n        if (!this.downPoint || !this.fitsToBounds(this.downPoint)) {\r\n            return;\r\n        }\r\n        if (this._stick == \"hard\" && this._stickPoint) {\r\n            local = this._stickPoint;\r\n        }\r\n        this._upPointOrig = { x: local.x, y: local.y };\r\n        this.triggerMove(local);\r\n        this.triggerUp(local);\r\n    };\r\n    Object.defineProperty(Cursor.prototype, \"chart\", {\r\n        /**\r\n         * @return Chart\r\n         */\r\n        get: function () {\r\n            return this._chart;\r\n        },\r\n        /**\r\n         * A reference to a [[Chart]] the cursor belongs to.\r\n         *\r\n         * @param value  Chart\r\n         */\r\n        set: function (value) {\r\n            this._chart = value;\r\n            if ($type.hasValue(this._chart.plotContainer)) {\r\n                getInteraction().lockElement(this._chart.plotContainer.interactions);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Cursor;\r\n}(Container));\r\nexport { Cursor };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Cursor\"] = Cursor;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}