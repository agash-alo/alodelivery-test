{"ast":null,"code":"/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Dictionary } from \"./Dictionary\";\nimport * as $type from \"./Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Represents object cache.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Better storage\r\n * @todo TTL logging\r\n * @todo Garbage collector\r\n */\nvar Cache = /** @class */function () {\n  function Cache() {\n    /**\r\n     * Storage for cache items.\r\n     */\n    this._storage = new Dictionary();\n    /**\r\n     * Default TTL in milliseconds.\r\n     */\n    this.ttl = 1000;\n  }\n  /**\r\n   * Caches or updates cached value, resets TTL.\r\n   *\r\n   * If `ttl` is set to zero, item will never expire.\r\n   *\r\n   * @param owner  An id of the object that owns this cache\r\n   * @param key    Index key\r\n   * @param value  Value\r\n   * @param ttl    TTL of the cache to live in milliseconds\r\n   */\n  Cache.prototype.set = function (owner, key, value, ttl) {\n    // Create if storage does not exist for this owner\n    var ownerStorage = this._storage.insertKeyIfEmpty(owner, function () {\n      return new Dictionary();\n    });\n    // Create cache item\n    var item = {\n      \"touched\": new Date().getTime(),\n      \"ttl\": $type.isNumber(ttl) ? ttl : this.ttl,\n      \"value\": value\n    };\n    // Set\n    ownerStorage.setKey(key, item);\n  };\n  /**\r\n   * Rerturns cached item, respecting TTL.\r\n   *\r\n   * @param owner  An id of the object that owns this cache\r\n   * @param key    Index key\r\n   * @param value  Value to return if cache not available\r\n   * @return Value, or `undefined` if not set\r\n   */\n  Cache.prototype.get = function (owner, key, value) {\n    if (value === void 0) {\n      value = undefined;\n    }\n    // \t\t || ypeof this._storage[owner][key] === \"undefined\" || this._storage[owner][key].expired === true) {\n    if (this._storage.hasKey(owner)) {\n      var ownerStorage = this._storage.getKey(owner);\n      if (ownerStorage.hasKey(key)) {\n        var cacheItem = ownerStorage.getKey(key);\n        if (cacheItem.ttl && cacheItem.touched + cacheItem.ttl < new Date().getTime()) {\n          cacheItem.expired = true;\n        }\n        if (cacheItem.expired) {\n          ownerStorage.removeKey(key);\n          return value;\n        }\n        return cacheItem.value;\n      } else {\n        return value;\n      }\n    } else {\n      return value;\n    }\n  };\n  /**\r\n   * Clears cache for specific owner or everything.\r\n   *\r\n   * @param owner Owner to clear cache for\r\n   */\n  Cache.prototype.clear = function (owner) {\n    if (owner) {\n      this._storage.removeKey(owner);\n    } else {\n      this._storage.clear();\n    }\n  };\n  return Cache;\n}();\nexport { Cache };\n/**\r\n * ============================================================================\r\n * GLOBAL INSTANCE\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * A global instance of cache. Use this instance to cache any values.\r\n *\r\n * @ignore Exclude from docs\r\n */\nexport var cache = new Cache();","map":{"version":3,"names":["Dictionary","$type","Cache","_storage","ttl","prototype","set","owner","key","value","ownerStorage","insertKeyIfEmpty","item","Date","getTime","isNumber","setKey","get","undefined","hasKey","getKey","cacheItem","touched","expired","removeKey","clear","cache"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/utils/Cache.js"],"sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Dictionary } from \"./Dictionary\";\r\nimport * as $type from \"./Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Represents object cache.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Better storage\r\n * @todo TTL logging\r\n * @todo Garbage collector\r\n */\r\nvar Cache = /** @class */ (function () {\r\n    function Cache() {\r\n        /**\r\n         * Storage for cache items.\r\n         */\r\n        this._storage = new Dictionary();\r\n        /**\r\n         * Default TTL in milliseconds.\r\n         */\r\n        this.ttl = 1000;\r\n    }\r\n    /**\r\n     * Caches or updates cached value, resets TTL.\r\n     *\r\n     * If `ttl` is set to zero, item will never expire.\r\n     *\r\n     * @param owner  An id of the object that owns this cache\r\n     * @param key    Index key\r\n     * @param value  Value\r\n     * @param ttl    TTL of the cache to live in milliseconds\r\n     */\r\n    Cache.prototype.set = function (owner, key, value, ttl) {\r\n        // Create if storage does not exist for this owner\r\n        var ownerStorage = this._storage.insertKeyIfEmpty(owner, function () { return new Dictionary(); });\r\n        // Create cache item\r\n        var item = {\r\n            \"touched\": new Date().getTime(),\r\n            \"ttl\": $type.isNumber(ttl) ? ttl : this.ttl,\r\n            \"value\": value\r\n        };\r\n        // Set\r\n        ownerStorage.setKey(key, item);\r\n    };\r\n    /**\r\n     * Rerturns cached item, respecting TTL.\r\n     *\r\n     * @param owner  An id of the object that owns this cache\r\n     * @param key    Index key\r\n     * @param value  Value to return if cache not available\r\n     * @return Value, or `undefined` if not set\r\n     */\r\n    Cache.prototype.get = function (owner, key, value) {\r\n        if (value === void 0) { value = undefined; }\r\n        // \t\t || ypeof this._storage[owner][key] === \"undefined\" || this._storage[owner][key].expired === true) {\r\n        if (this._storage.hasKey(owner)) {\r\n            var ownerStorage = this._storage.getKey(owner);\r\n            if (ownerStorage.hasKey(key)) {\r\n                var cacheItem = ownerStorage.getKey(key);\r\n                if (cacheItem.ttl && ((cacheItem.touched + cacheItem.ttl) < new Date().getTime())) {\r\n                    cacheItem.expired = true;\r\n                }\r\n                if (cacheItem.expired) {\r\n                    ownerStorage.removeKey(key);\r\n                    return value;\r\n                }\r\n                return cacheItem.value;\r\n            }\r\n            else {\r\n                return value;\r\n            }\r\n        }\r\n        else {\r\n            return value;\r\n        }\r\n    };\r\n    /**\r\n     * Clears cache for specific owner or everything.\r\n     *\r\n     * @param owner Owner to clear cache for\r\n     */\r\n    Cache.prototype.clear = function (owner) {\r\n        if (owner) {\r\n            this._storage.removeKey(owner);\r\n        }\r\n        else {\r\n            this._storage.clear();\r\n        }\r\n    };\r\n    return Cache;\r\n}());\r\nexport { Cache };\r\n/**\r\n * ============================================================================\r\n * GLOBAL INSTANCE\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A global instance of cache. Use this instance to cache any values.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport var cache = new Cache();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}