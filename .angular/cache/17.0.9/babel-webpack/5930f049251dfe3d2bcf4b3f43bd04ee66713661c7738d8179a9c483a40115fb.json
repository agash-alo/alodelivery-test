{"ast":null,"code":"/**\r\n * Functionality for drawing waved circles.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Circle } from \"./Circle\";\nimport { registry } from \"../Registry\";\nimport * as $path from \"../rendering/Path\";\nimport * as $math from \"../utils/Math\";\nimport * as $utils from \"../utils/Utils\";\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Draws a waved circle.\r\n *\r\n * @see {@link IWavedCircleEvents} for a list of available events\r\n * @see {@link IWavedCircleAdapters} for a list of available Adapters\r\n */\nvar WavedCircle = /** @class */function (_super) {\n  __extends(WavedCircle, _super);\n  /**\r\n   * Constructor\r\n   */\n  function WavedCircle() {\n    var _this = _super.call(this) || this;\n    _this.className = \"WavedCircle\";\n    _this.element = _this.paper.add(\"path\");\n    _this.waveLength = 16;\n    _this.waveHeight = 4;\n    _this.fill = undefined;\n    _this.fillOpacity = 0;\n    _this.tension = 0.8;\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Draws the waved line.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  WavedCircle.prototype.draw = function () {\n    var path = \"\";\n    var radius = this.pixelRadius;\n    if (radius > 0) {\n      var points = this.getPoints(radius);\n      path = $path.moveTo(points[0]) + new $smoothing.Tension(this.tension, this.tension).smooth(points);\n    }\n    var innerRadius = this.pixelInnerRadius;\n    if (innerRadius > 0) {\n      var points = this.getPoints(innerRadius);\n      points.reverse();\n      path += $path.moveTo(points[0]) + new $smoothing.Tension(this.tension, this.tension).smooth(points);\n    }\n    this.path = path;\n  };\n  /**\r\n   * Returns points that circle consists of.\r\n   *\r\n   * @param radius  Radius (px)\r\n   * @return Points\r\n   */\n  WavedCircle.prototype.getPoints = function (radius) {\n    var circleLength = radius * Math.PI * 2;\n    var halfWaveHeight = this.waveHeight / 2;\n    var waveLength = circleLength / Math.round(circleLength / this.waveLength);\n    var halfWaveLength = waveLength / 2;\n    var points = [];\n    var count = circleLength / waveLength;\n    for (var i = 0; i <= count; i++) {\n      var angle1 = i * waveLength / circleLength * 360;\n      var angle2 = (i * waveLength + halfWaveLength) / circleLength * 360;\n      points.push({\n        x: (radius - halfWaveHeight) * $math.cos(angle1),\n        y: (radius - halfWaveHeight) * $math.sin(angle1)\n      });\n      points.push({\n        x: (radius + halfWaveHeight) * $math.cos(angle2),\n        y: (radius + halfWaveHeight) * $math.sin(angle2)\n      });\n    }\n    points.pop();\n    return points;\n  };\n  Object.defineProperty(WavedCircle.prototype, \"innerRadius\", {\n    /**\r\n     * @return Inner radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n    /**\r\n     * Inner radius of the circle in pixels (absolute) or [[Percent]] (relative).\r\n     *\r\n     * @param value  Inner radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WavedCircle.prototype, \"pixelInnerRadius\", {\n    /**\r\n     * Calculated inner radius of the circle in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Inner radius (px)\r\n     */\n    get: function () {\n      return $utils.relativeToValue(this.innerRadius, $math.min(this.innerWidth / 2, this.innerHeight / 2));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WavedCircle.prototype, \"waveLength\", {\n    /**\r\n     * @return Wave length (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"waveLength\");\n    },\n    /**\r\n     * Wave length in pixels.\r\n     *\r\n     * @default 16\r\n     * @param value  Wave length (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"waveLength\", value);\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WavedCircle.prototype, \"waveHeight\", {\n    /**\r\n     * @return Wave height (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"waveHeight\");\n    },\n    /**\r\n     * Wave height in pixels.\r\n     *\r\n     * @default 4\r\n     * @param value  Wave height (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"waveHeight\", value);\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WavedCircle.prototype, \"tension\", {\n    /**\r\n     * @return Tension\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tension\");\n    },\n    /**\r\n     * Tension of the wave.\r\n     *\r\n     * @default 0.8\r\n     * @param value  Tension\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"tension\", value);\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return WavedCircle;\n}(Circle);\nexport { WavedCircle };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"WavedCircle\"] = WavedCircle;","map":{"version":3,"names":["__extends","Circle","registry","$path","$math","$utils","$smoothing","WavedCircle","_super","_this","call","className","element","paper","add","waveLength","waveHeight","fill","undefined","fillOpacity","tension","applyTheme","prototype","draw","path","radius","pixelRadius","points","getPoints","moveTo","Tension","smooth","innerRadius","pixelInnerRadius","reverse","circleLength","Math","PI","halfWaveHeight","round","halfWaveLength","count","i","angle1","angle2","push","x","cos","y","sin","pop","Object","defineProperty","get","getPropertyValue","set","value","setPercentProperty","invalidate","enumerable","configurable","relativeToValue","min","innerWidth","innerHeight","setPropertyValue","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/elements/WavedCircle.js"],"sourcesContent":["/**\r\n * Functionality for drawing waved circles.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Circle } from \"./Circle\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws a waved circle.\r\n *\r\n * @see {@link IWavedCircleEvents} for a list of available events\r\n * @see {@link IWavedCircleAdapters} for a list of available Adapters\r\n */\r\nvar WavedCircle = /** @class */ (function (_super) {\r\n    __extends(WavedCircle, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function WavedCircle() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"WavedCircle\";\r\n        _this.element = _this.paper.add(\"path\");\r\n        _this.waveLength = 16;\r\n        _this.waveHeight = 4;\r\n        _this.fill = undefined;\r\n        _this.fillOpacity = 0;\r\n        _this.tension = 0.8;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the waved line.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    WavedCircle.prototype.draw = function () {\r\n        var path = \"\";\r\n        var radius = this.pixelRadius;\r\n        if (radius > 0) {\r\n            var points = this.getPoints(radius);\r\n            path = $path.moveTo(points[0]) + new $smoothing.Tension(this.tension, this.tension).smooth(points);\r\n        }\r\n        var innerRadius = this.pixelInnerRadius;\r\n        if (innerRadius > 0) {\r\n            var points = this.getPoints(innerRadius);\r\n            points.reverse();\r\n            path += $path.moveTo(points[0]) + new $smoothing.Tension(this.tension, this.tension).smooth(points);\r\n        }\r\n        this.path = path;\r\n    };\r\n    /**\r\n     * Returns points that circle consists of.\r\n     *\r\n     * @param radius  Radius (px)\r\n     * @return Points\r\n     */\r\n    WavedCircle.prototype.getPoints = function (radius) {\r\n        var circleLength = radius * Math.PI * 2;\r\n        var halfWaveHeight = this.waveHeight / 2;\r\n        var waveLength = circleLength / Math.round(circleLength / this.waveLength);\r\n        var halfWaveLength = waveLength / 2;\r\n        var points = [];\r\n        var count = circleLength / waveLength;\r\n        for (var i = 0; i <= count; i++) {\r\n            var angle1 = (i * waveLength) / circleLength * 360;\r\n            var angle2 = (i * waveLength + halfWaveLength) / circleLength * 360;\r\n            points.push({ x: (radius - halfWaveHeight) * $math.cos(angle1), y: (radius - halfWaveHeight) * $math.sin(angle1) });\r\n            points.push({ x: (radius + halfWaveHeight) * $math.cos(angle2), y: (radius + halfWaveHeight) * $math.sin(angle2) });\r\n        }\r\n        points.pop();\r\n        return points;\r\n    };\r\n    Object.defineProperty(WavedCircle.prototype, \"innerRadius\", {\r\n        /**\r\n         * @return Inner radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"innerRadius\");\r\n        },\r\n        /**\r\n         * Inner radius of the circle in pixels (absolute) or [[Percent]] (relative).\r\n         *\r\n         * @param value  Inner radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(WavedCircle.prototype, \"pixelInnerRadius\", {\r\n        /**\r\n         * Calculated inner radius of the circle in pixels.\r\n         *\r\n         * @readonly\r\n         * @return Inner radius (px)\r\n         */\r\n        get: function () {\r\n            return $utils.relativeToValue(this.innerRadius, $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(WavedCircle.prototype, \"waveLength\", {\r\n        /**\r\n         * @return Wave length (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"waveLength\");\r\n        },\r\n        /**\r\n         * Wave length in pixels.\r\n         *\r\n         * @default 16\r\n         * @param value  Wave length (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"waveLength\", value);\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(WavedCircle.prototype, \"waveHeight\", {\r\n        /**\r\n         * @return Wave height (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"waveHeight\");\r\n        },\r\n        /**\r\n         * Wave height in pixels.\r\n         *\r\n         * @default 4\r\n         * @param value  Wave height (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"waveHeight\", value);\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(WavedCircle.prototype, \"tension\", {\r\n        /**\r\n         * @return Tension\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"tension\");\r\n        },\r\n        /**\r\n         * Tension of the wave.\r\n         *\r\n         * @default 0.8\r\n         * @param value  Tension\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"tension\", value);\r\n            this.invalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return WavedCircle;\r\n}(Circle));\r\nexport { WavedCircle };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"WavedCircle\"] = WavedCircle;\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,SAAS,QAAQ,OAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,MAAM,QAAQ,UAAU;AACjC,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAO,KAAKC,KAAK,MAAM,mBAAmB;AAC1C,OAAO,KAAKC,KAAK,MAAM,eAAe;AACtC,OAAO,KAAKC,MAAM,MAAM,gBAAgB;AACxC,OAAO,KAAKC,UAAU,MAAM,gCAAgC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,WAAW,GAAG,aAAe,UAAUC,MAAM,EAAE;EAC/CR,SAAS,CAACO,WAAW,EAAEC,MAAM,CAAC;EAC9B;AACJ;AACA;EACI,SAASD,WAAWA,CAAA,EAAG;IACnB,IAAIE,KAAK,GAAGD,MAAM,CAACE,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI;IACrCD,KAAK,CAACE,SAAS,GAAG,aAAa;IAC/BF,KAAK,CAACG,OAAO,GAAGH,KAAK,CAACI,KAAK,CAACC,GAAG,CAAC,MAAM,CAAC;IACvCL,KAAK,CAACM,UAAU,GAAG,EAAE;IACrBN,KAAK,CAACO,UAAU,GAAG,CAAC;IACpBP,KAAK,CAACQ,IAAI,GAAGC,SAAS;IACtBT,KAAK,CAACU,WAAW,GAAG,CAAC;IACrBV,KAAK,CAACW,OAAO,GAAG,GAAG;IACnBX,KAAK,CAACY,UAAU,CAAC,CAAC;IAClB,OAAOZ,KAAK;EAChB;EACA;AACJ;AACA;AACA;AACA;EACIF,WAAW,CAACe,SAAS,CAACC,IAAI,GAAG,YAAY;IACrC,IAAIC,IAAI,GAAG,EAAE;IACb,IAAIC,MAAM,GAAG,IAAI,CAACC,WAAW;IAC7B,IAAID,MAAM,GAAG,CAAC,EAAE;MACZ,IAAIE,MAAM,GAAG,IAAI,CAACC,SAAS,CAACH,MAAM,CAAC;MACnCD,IAAI,GAAGrB,KAAK,CAAC0B,MAAM,CAACF,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,IAAIrB,UAAU,CAACwB,OAAO,CAAC,IAAI,CAACV,OAAO,EAAE,IAAI,CAACA,OAAO,CAAC,CAACW,MAAM,CAACJ,MAAM,CAAC;IACtG;IACA,IAAIK,WAAW,GAAG,IAAI,CAACC,gBAAgB;IACvC,IAAID,WAAW,GAAG,CAAC,EAAE;MACjB,IAAIL,MAAM,GAAG,IAAI,CAACC,SAAS,CAACI,WAAW,CAAC;MACxCL,MAAM,CAACO,OAAO,CAAC,CAAC;MAChBV,IAAI,IAAIrB,KAAK,CAAC0B,MAAM,CAACF,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,IAAIrB,UAAU,CAACwB,OAAO,CAAC,IAAI,CAACV,OAAO,EAAE,IAAI,CAACA,OAAO,CAAC,CAACW,MAAM,CAACJ,MAAM,CAAC;IACvG;IACA,IAAI,CAACH,IAAI,GAAGA,IAAI;EACpB,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIjB,WAAW,CAACe,SAAS,CAACM,SAAS,GAAG,UAAUH,MAAM,EAAE;IAChD,IAAIU,YAAY,GAAGV,MAAM,GAAGW,IAAI,CAACC,EAAE,GAAG,CAAC;IACvC,IAAIC,cAAc,GAAG,IAAI,CAACtB,UAAU,GAAG,CAAC;IACxC,IAAID,UAAU,GAAGoB,YAAY,GAAGC,IAAI,CAACG,KAAK,CAACJ,YAAY,GAAG,IAAI,CAACpB,UAAU,CAAC;IAC1E,IAAIyB,cAAc,GAAGzB,UAAU,GAAG,CAAC;IACnC,IAAIY,MAAM,GAAG,EAAE;IACf,IAAIc,KAAK,GAAGN,YAAY,GAAGpB,UAAU;IACrC,KAAK,IAAI2B,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAID,KAAK,EAAEC,CAAC,EAAE,EAAE;MAC7B,IAAIC,MAAM,GAAID,CAAC,GAAG3B,UAAU,GAAIoB,YAAY,GAAG,GAAG;MAClD,IAAIS,MAAM,GAAG,CAACF,CAAC,GAAG3B,UAAU,GAAGyB,cAAc,IAAIL,YAAY,GAAG,GAAG;MACnER,MAAM,CAACkB,IAAI,CAAC;QAAEC,CAAC,EAAE,CAACrB,MAAM,GAAGa,cAAc,IAAIlC,KAAK,CAAC2C,GAAG,CAACJ,MAAM,CAAC;QAAEK,CAAC,EAAE,CAACvB,MAAM,GAAGa,cAAc,IAAIlC,KAAK,CAAC6C,GAAG,CAACN,MAAM;MAAE,CAAC,CAAC;MACnHhB,MAAM,CAACkB,IAAI,CAAC;QAAEC,CAAC,EAAE,CAACrB,MAAM,GAAGa,cAAc,IAAIlC,KAAK,CAAC2C,GAAG,CAACH,MAAM,CAAC;QAAEI,CAAC,EAAE,CAACvB,MAAM,GAAGa,cAAc,IAAIlC,KAAK,CAAC6C,GAAG,CAACL,MAAM;MAAE,CAAC,CAAC;IACvH;IACAjB,MAAM,CAACuB,GAAG,CAAC,CAAC;IACZ,OAAOvB,MAAM;EACjB,CAAC;EACDwB,MAAM,CAACC,cAAc,CAAC7C,WAAW,CAACe,SAAS,EAAE,aAAa,EAAE;IACxD;AACR;AACA;IACQ+B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACC,gBAAgB,CAAC,aAAa,CAAC;IAC/C,CAAC;IACD;AACR;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAACC,kBAAkB,CAAC,aAAa,EAAED,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,CAAC;MACrE,IAAI,CAACE,UAAU,CAAC,CAAC;IACrB,CAAC;IACDC,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFT,MAAM,CAACC,cAAc,CAAC7C,WAAW,CAACe,SAAS,EAAE,kBAAkB,EAAE;IAC7D;AACR;AACA;AACA;AACA;AACA;IACQ+B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAOhD,MAAM,CAACwD,eAAe,CAAC,IAAI,CAAC7B,WAAW,EAAE5B,KAAK,CAAC0D,GAAG,CAAC,IAAI,CAACC,UAAU,GAAG,CAAC,EAAE,IAAI,CAACC,WAAW,GAAG,CAAC,CAAC,CAAC;IACzG,CAAC;IACDL,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFT,MAAM,CAACC,cAAc,CAAC7C,WAAW,CAACe,SAAS,EAAE,YAAY,EAAE;IACvD;AACR;AACA;IACQ+B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACC,gBAAgB,CAAC,YAAY,CAAC;IAC9C,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAACS,gBAAgB,CAAC,YAAY,EAAET,KAAK,CAAC;MAC1C,IAAI,CAACE,UAAU,CAAC,CAAC;IACrB,CAAC;IACDC,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFT,MAAM,CAACC,cAAc,CAAC7C,WAAW,CAACe,SAAS,EAAE,YAAY,EAAE;IACvD;AACR;AACA;IACQ+B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACC,gBAAgB,CAAC,YAAY,CAAC;IAC9C,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAACS,gBAAgB,CAAC,YAAY,EAAET,KAAK,CAAC;MAC1C,IAAI,CAACE,UAAU,CAAC,CAAC;IACrB,CAAC;IACDC,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFT,MAAM,CAACC,cAAc,CAAC7C,WAAW,CAACe,SAAS,EAAE,SAAS,EAAE;IACpD;AACR;AACA;IACQ+B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACC,gBAAgB,CAAC,SAAS,CAAC;IAC3C,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAACS,gBAAgB,CAAC,SAAS,EAAET,KAAK,CAAC;MACvC,IAAI,CAACE,UAAU,CAAC,CAAC;IACrB,CAAC;IACDC,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF,OAAOrD,WAAW;AACtB,CAAC,CAACN,MAAM,CAAE;AACV,SAASM,WAAW;AACpB;AACA;AACA;AACA;AACA;AACA;AACAL,QAAQ,CAACgE,iBAAiB,CAAC,aAAa,CAAC,GAAG3D,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}