{"ast":null,"code":"/**\r\n * Value Axis module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Axis, AxisDataItem } from \"./Axis\";\nimport { AxisRendererY } from \"./AxisRendererY\";\nimport { MultiDisposer } from \"../../core/utils/Disposer\";\nimport { registry } from \"../../core/Registry\";\nimport { ValueAxisBreak } from \"./ValueAxisBreak\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $object from \"../../core/utils/Object\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $utils from \"../../core/utils/Utils\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines a [[DataItem]] for [[ValueAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar ValueAxisDataItem = /** @class */function (_super) {\n  __extends(ValueAxisDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function ValueAxisDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"ValueAxisDataItem\";\n    _this.values.value = {};\n    _this.values.endValue = {};\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(ValueAxisDataItem.prototype, \"value\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      return this.values[\"value\"].value;\n    },\n    /**\r\n     * A data point's numeric value.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function (value) {\n      this.setValue(\"value\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxisDataItem.prototype, \"endValue\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      return this.values[\"endValue\"].value;\n    },\n    /**\r\n     * Data point's numeric end value.\r\n     *\r\n     * @param value  End value\r\n     */\n    set: function (value) {\n      this.setValue(\"endValue\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ValueAxisDataItem;\n}(AxisDataItem);\nexport { ValueAxisDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Used to create a value axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Monthly Sales\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Monthly Sales\";\r\n * ```\r\n * ```JSON\r\n * \"yAxes\": [{\r\n *   \"type\": \"ValueAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Monthly Sales\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IValueAxisEvents} for a list of available Events\r\n * @see {@link IValueAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\nvar ValueAxis = /** @class */function (_super) {\n  __extends(ValueAxis, _super);\n  /**\r\n   * Constructor\r\n   */\n  function ValueAxis() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * [_stepDecimalPlaces description]\r\n     *\r\n     * @todo Description\r\n     */\n    _this._stepDecimalPlaces = 0;\n    _this._prevStepDecimalPlaces = 0;\n    _this._adjustLabelPrecision = true;\n    /**\r\n     * Base value for the axis.\r\n     */\n    _this._baseValue = 0;\n    /**\r\n     * Adjusted start in case we have breaks.\r\n     *\r\n     * @todo Description\r\n     */\n    _this._adjustedStart = 0;\n    /**\r\n     * Adjusted end in case we have breaks.\r\n     *\r\n     * @todo Description\r\n     */\n    _this._adjustedEnd = 1;\n    _this._extremesChanged = false;\n    _this._deltaMinMax = 1;\n    _this._dsc = false;\n    /**\r\n     * As calculating totals is expensive operation and not often needed, we\r\n     * don't do it by default.\r\n     *\r\n     * In case you use `totalPercent` or `total` in your charts, this must be set\r\n     * to `true`.\r\n     *\r\n     * @default false\r\n     * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/#100_stacks} For using `calculateTotals` for 100% stacked series.\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-strings/#Placeholders_for_numeric_values} For using `calculateTotals` in labels.\r\n     */\n    _this.calculateTotals = false;\n    _this.className = \"ValueAxis\";\n    // Set field name\n    _this.axisFieldName = \"value\";\n    // Set defaults\n    _this.setPropertyValue(\"maxZoomFactor\", 1000);\n    _this.setPropertyValue(\"extraMin\", 0);\n    _this.setPropertyValue(\"extraMax\", 0);\n    _this.setPropertyValue(\"strictMinMax\", false);\n    _this.setPropertyValue(\"maxPrecision\", Number.MAX_VALUE);\n    _this.setPropertyValue(\"adjustLabelPrecision\", true);\n    _this.setPropertyValue(\"extraTooltipPrecision\", 0);\n    _this.keepSelection = false;\n    _this.includeRangesInMinMax = false;\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Holds reference to a function that accepts a DataItem as parameter.\r\n   *\r\n   * It can either return a fill opacity for a fill, or manipulate data item\r\n   * directly, to create various highlighting scenarios.\r\n   */\n  ValueAxis.prototype.fillRule = function (dataItem) {\n    var value = dataItem.value;\n    var axis = dataItem.component;\n    if (!dataItem.axisFill.disabled) {\n      // rounding in left to solve floating point number\n      if ($math.round(value / axis.step / 2, 5) == Math.round(value / axis.step / 2)) {\n        dataItem.axisFill.__disabled = true;\n      } else {\n        dataItem.axisFill.__disabled = false;\n      }\n    }\n  };\n  /**\r\n   * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n  ValueAxis.prototype.createDataItem = function () {\n    return new ValueAxisDataItem();\n  };\n  /**\r\n   * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n   *\r\n   * @return Axis break\r\n   */\n  ValueAxis.prototype.createAxisBreak = function () {\n    return new ValueAxisBreak();\n  };\n  /**\r\n   * [dataChangeUpdate description]\r\n   *\r\n   * This is a placeholder to override for extending classes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n  ValueAxis.prototype.dataChangeUpdate = function () {\n    this.clearCache();\n    if (!this.keepSelection) {\n      if (this._start != 0 || this._end != 1) {\n        this._start = 0;\n        this._end = 1;\n        this.dispatchImmediately(\"startendchanged\");\n      }\n    } else {\n      if (this._start != 0) {\n        this.dispatchImmediately(\"startchanged\");\n      }\n      if (this._end != 1) {\n        this.dispatchImmediately(\"endchanged\");\n      }\n      if (this._start != 0 || this._end != 1) {\n        this.dispatchImmediately(\"startendchanged\");\n      }\n    }\n    this._maxZoomed = this._maxDefined;\n    this._minZoomed = this._minDefined;\n    this._maxAdjusted = this._maxDefined;\n    this._minAdjusted = this._minDefined;\n  };\n  /**\r\n   * Processes data items of the related Series.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  ValueAxis.prototype.processSeriesDataItems = function () {\n    // @todo: add some boolean (maybe autodedect) if we need these calculations or not. this place uses a lot of cpu\n    if (this.calculateTotals) {\n      var series = this.series.getIndex(0);\n      var startIndex = series.startIndex;\n      if (series.dataItems.length > 0) {\n        if (startIndex > 0) {\n          startIndex--;\n        }\n        var endIndex = series.endIndex;\n        if (endIndex < series.dataItems.length) {\n          endIndex++;\n        }\n        var _loop_1 = function (i) {\n          // This has to be `var` in order to avoid garbage collection\n          var total = {};\n          var sum = {};\n          this_1.series.each(function (series) {\n            if (!series.excludeFromTotal) {\n              var dataItem_1 = series.dataItems.getIndex(i);\n              if (dataItem_1) {\n                $object.each(dataItem_1.values, function (key) {\n                  var value = dataItem_1.values[key].workingValue; // can not use getWorkingValue here!\n                  if ($type.isNumber(value)) {\n                    if (!$type.isNumber(total[key])) {\n                      total[key] = Math.abs(value);\n                    } else {\n                      total[key] += Math.abs(value);\n                    }\n                    if (!$type.isNumber(sum[key])) {\n                      sum[key] = value;\n                    } else {\n                      sum[key] += value;\n                    }\n                  }\n                });\n              }\n            }\n          });\n          this_1.series.each(function (series) {\n            if (!series.excludeFromTotal) {\n              var dataItem_2 = series.dataItems.getIndex(i);\n              if (dataItem_2) {\n                $object.each(dataItem_2.values, function (key) {\n                  var value = dataItem_2.values[key].workingValue; // can not use getWorkingValue here!\n                  if ($type.isNumber(value)) {\n                    dataItem_2.setCalculatedValue(key, total[key], \"total\");\n                    dataItem_2.setCalculatedValue(key, 100 * value / total[key], \"totalPercent\");\n                    dataItem_2.setCalculatedValue(key, sum[key], \"sum\");\n                  }\n                });\n              }\n            }\n          });\n        };\n        var this_1 = this;\n        // This has to be `var` in order to avoid garbage collection\n        for (var i = startIndex; i < endIndex; ++i) {\n          _loop_1(i);\n        }\n      }\n    }\n  };\n  /**\r\n   * Validates the whole axis. Causes it to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (review)\r\n   */\n  ValueAxis.prototype.validate = function () {\n    if (this.axisLength <= 0) {\n      return;\n    }\n    _super.prototype.validate.call(this);\n    this.getMinMax();\n    if (!$type.isNumber(this._minAdjusted)) {\n      this.dataItems.each(function (dataItem) {\n        dataItem.value = null;\n      });\n    }\n    this.fixAxisBreaks();\n    this.calculateZoom();\n    this.validateAxisElements();\n    this.validateAxisRanges();\n    this.validateBreaks();\n    this.hideUnusedDataItems();\n    this.renderer.invalidateLayout();\n    // hide too close\n    //this.hideTooCloseDataItems();\n  };\n  /**\r\n   * Calculates all positions, related to axis as per current zoom.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  ValueAxis.prototype.calculateZoom = function () {\n    if ($type.isNumber(this.min) && $type.isNumber(this.max)) {\n      var min = this.positionToValue(this.start);\n      var max = this.positionToValue(this.end);\n      var differece = this.adjustDifference(min, max);\n      var minMaxStep = this.adjustMinMax(min, max, differece, this._gridCount, true);\n      var stepDecimalPlaces = $utils.decimalPlaces(minMaxStep.step);\n      this._stepDecimalPlaces = stepDecimalPlaces;\n      min = $math.round(min, stepDecimalPlaces);\n      max = $math.round(max, stepDecimalPlaces);\n      minMaxStep = this.adjustMinMax(min, max, differece, this._gridCount, true);\n      var step = minMaxStep.step;\n      if (this.syncWithAxis) {\n        var calculated = this.getCache(min + \"-\" + max);\n        if ($type.isNumber(calculated)) {\n          step = calculated;\n        }\n      } else {\n        min = minMaxStep.min;\n        max = minMaxStep.max;\n      }\n      if (this._minZoomed != min || this._maxZoomed != max || this._step != step || this._dsc) {\n        this._dsc = false;\n        this._minZoomed = min;\n        this._maxZoomed = max;\n        this._step = step;\n        this.dispatchImmediately(\"selectionextremeschanged\");\n      }\n    }\n  };\n  ValueAxis.prototype.fixSmallStep = function (step) {\n    if (1 + step == 1) {\n      step *= 2;\n      return this.fixSmallStep(step);\n    }\n    return step;\n  };\n  /**\r\n   * Validates Axis elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n  ValueAxis.prototype.validateAxisElements = function () {\n    var _this = this;\n    if ($type.isNumber(this.max) && $type.isNumber(this.min)) {\n      // first regular items\n      var value_1 = this.minZoomed - this._step * 2;\n      if (!this.logarithmic) {\n        value_1 = Math.floor(value_1 / this._step) * this._step;\n      } else {\n        var differencePower = Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E;\n        if (differencePower > 1) {\n          value_1 = Math.pow(10, Math.log(this.min) * Math.LOG10E);\n        } else {\n          value_1 = Math.floor(this.minZoomed / this._step) * this._step;\n          if (value_1 == 0) {\n            value_1 = this.minZoomed;\n          }\n        }\n      }\n      var maxZoomed = this._maxZoomed + this._step;\n      this.resetIterators();\n      var dataItemsIterator_1 = this._dataItemsIterator;\n      if (this._step == 0) {\n        return;\n      }\n      this._step = this.fixSmallStep(this._step);\n      var i = 0;\n      var precisionChanged = this._prevStepDecimalPlaces != this._stepDecimalPlaces;\n      this._prevStepDecimalPlaces = this._stepDecimalPlaces;\n      while (value_1 <= maxZoomed) {\n        var axisBreak = this.isInBreak(value_1);\n        if (!axisBreak) {\n          var dataItem = dataItemsIterator_1.find(function (x) {\n            return x.value === value_1;\n          });\n          if (dataItem.__disabled) {\n            dataItem.__disabled = false;\n          }\n          //this.processDataItem(dataItem);\n          this.appendDataItem(dataItem);\n          dataItem.axisBreak = undefined;\n          if (dataItem.value != value_1 || precisionChanged) {\n            dataItem.value = value_1;\n            dataItem.text = this.formatLabel(value_1);\n            if (dataItem.label && dataItem.label.invalid) {\n              dataItem.label.validate();\n            }\n            if (dataItem.value >= this.min && dataItem.value <= this.max) {\n              if (dataItem.label) {\n                if (this.axisLetter == \"Y\" && dataItem.label.measuredWidth > this.ghostLabel.measuredWidth || this.axisLetter == \"X\" && dataItem.label.measuredHeight > this.ghostLabel.measuredHeight) {\n                  this.ghostLabel.text = dataItem.label.currentText;\n                  this.ghostLabel.validate();\n                }\n              }\n            }\n          }\n          this.validateDataElement(dataItem);\n        }\n        i++;\n        var oldValue = value_1;\n        if (!this.logarithmic) {\n          value_1 += this._step;\n        } else {\n          var differencePower = Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E;\n          if (differencePower > 1) {\n            value_1 = Math.pow(10, Math.log(this.min) * Math.LOG10E + i);\n          } else {\n            value_1 += this._step;\n          }\n        }\n        var stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(this._step)) * Math.LOG10E));\n        if (stepPower < 1) {\n          // exponent is less then 1 too. Count decimals of exponent\n          var decCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 2;\n          decCount = Math.min(13, decCount);\n          // round value to avoid floating point issues\n          value_1 = $math.round(value_1, decCount);\n          // ceil causes problems: https://codepen.io/team/amcharts/pen/XWMjZwy?editors=1010\n          if (oldValue == value_1) {\n            value_1 = maxZoomed;\n            break;\n          }\n        }\n      }\n      var axisBreaks = this._axisBreaks;\n      if (axisBreaks) {\n        // breaks later\n        var renderer_1 = this.renderer;\n        $iter.each(axisBreaks.iterator(), function (axisBreak) {\n          if (axisBreak.breakSize > 0) {\n            // only add grid if gap is bigger then minGridDistance\n            if ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer_1.minGridDistance) {\n              var breakValue_1 = axisBreak.adjustedMin;\n              while (breakValue_1 <= axisBreak.adjustedMax) {\n                if (breakValue_1 >= axisBreak.adjustedStartValue && breakValue_1 <= axisBreak.adjustedEndValue) {\n                  var dataItem = dataItemsIterator_1.find(function (x) {\n                    return x.value === breakValue_1;\n                  });\n                  if (dataItem.__disabled) {\n                    dataItem.__disabled = false;\n                  }\n                  //this.processDataItem(dataItem);\n                  _this.appendDataItem(dataItem);\n                  dataItem.axisBreak = axisBreak;\n                  if (dataItem.value != breakValue_1) {\n                    dataItem.value = breakValue_1;\n                    dataItem.text = _this.formatLabel(breakValue_1);\n                    if (dataItem.label && dataItem.label.invalid) {\n                      dataItem.label.validate();\n                    }\n                  }\n                  _this.validateDataElement(dataItem);\n                }\n                breakValue_1 += axisBreak.adjustedStep;\n              }\n            }\n          }\n        });\n      }\n    }\n  };\n  /**\r\n   * Validates axis data item.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param dataItem  Data item\r\n   */\n  ValueAxis.prototype.validateDataElement = function (dataItem) {\n    _super.prototype.validateDataElement.call(this, dataItem);\n    //dataItem.__disabled = false;\n    dataItem.itemIndex = this._axisItemCount;\n    this._axisItemCount++;\n    var renderer = this.renderer;\n    var value = dataItem.value;\n    var endValue = dataItem.endValue;\n    var position = this.valueToPosition(value);\n    dataItem.position = position;\n    var endPosition = position;\n    var fillEndPosition = this.valueToPosition(value + this._step);\n    if ($type.isNumber(endValue)) {\n      endPosition = this.valueToPosition(endValue);\n      fillEndPosition = endPosition;\n    }\n    // this point is needed to calculate distance to satisfy minGridDistance\n    dataItem.point = renderer.positionToPoint(position);\n    var tick = dataItem.tick;\n    if (tick && !tick.disabled) {\n      renderer.updateTickElement(tick, position, endPosition);\n    }\n    var grid = dataItem.grid;\n    if (grid && !grid.disabled) {\n      renderer.updateGridElement(grid, position, endPosition);\n    }\n    var label = dataItem.label;\n    if (label && !label.disabled) {\n      renderer.updateLabelElement(label, position, endPosition);\n    }\n    var fill = dataItem.axisFill;\n    if (fill && !fill.disabled) {\n      renderer.updateFillElement(fill, position, fillEndPosition);\n      if (!dataItem.isRange) {\n        this.fillRule(dataItem);\n      }\n    }\n    if (dataItem.bullet) {\n      renderer.updateBullet(dataItem.bullet, position, endPosition);\n    }\n    var mask = dataItem.mask;\n    if (mask) {\n      renderer.updateFillElement(mask, position, fillEndPosition);\n    }\n  };\n  /**\r\n   * Formats the value according to axis' own [[NumberFormatter]].\r\n   *\r\n   * @param value  Source value\r\n   * @return Formatted value\r\n   */\n  ValueAxis.prototype.formatLabel = function (value) {\n    if (this.adjustLabelPrecision && value != 0) {\n      return this.numberFormatter.format(value, undefined, this._stepDecimalPlaces);\n    } else {\n      return this.numberFormatter.format(value);\n    }\n  };\n  Object.defineProperty(ValueAxis.prototype, \"basePoint\", {\n    /**\r\n     * Coordinates of the actual axis start.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Base point\r\n     */\n    get: function () {\n      var baseValue = this.baseValue;\n      var position = this.valueToPosition(baseValue);\n      var basePoint = this.renderer.positionToPoint(position);\n      return basePoint;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"baseValue\", {\n    /**\r\n     * @return base value\r\n     */\n    get: function () {\n      var baseValue = this._baseValue;\n      if (this.logarithmic) {\n        baseValue = this.min;\n      }\n      if (!this._adapterO) {\n        return baseValue;\n      } else {\n        return this._adapterO.apply(\"baseValue\", baseValue);\n      }\n    },\n    /**\r\n     * A base value.\r\n     *\r\n     * This is a threshold value that will divide \"positive\" and \"negative\"\r\n     * value ranges.\r\n     *\r\n     * Other scale-related functionality also depend on base value. E.g. stacks,\r\n     * value-dependent coloring, etc.\r\n     *\r\n     * @param value Base value\r\n     */\n    set: function (value) {\n      this._baseValue = value;\n      this.invalidateLayout();\n      this.invalidateSeries();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts a numeric value to relative position on axis\r\n   *\r\n   * An alias to `valueToPosition()`.\r\n   *\r\n   * @param value  Value\r\n   * @return Position\r\n   */\n  ValueAxis.prototype.anyToPosition = function (value) {\n    return this.valueToPosition(value);\n  };\n  /**\r\n   * Converts a numeric value to orientation point (x, y, angle) on axis\r\n   *\r\n   * @param value  Value\r\n   * @return Orientation point\r\n   */\n  ValueAxis.prototype.valueToPoint = function (value) {\n    var position = this.valueToPosition(value);\n    var point = this.renderer.positionToPoint(position);\n    var angle = this.renderer.positionToAngle(position);\n    return {\n      x: point.x,\n      y: point.y,\n      angle: angle\n    };\n  };\n  /**\r\n   * Converts a numeric value to orientation (x, y, angle) point on axis\r\n   *\r\n   * @param value  Value\r\n   * @return Orientation point\r\n   */\n  ValueAxis.prototype.anyToPoint = function (value) {\n    return this.valueToPoint(value);\n  };\n  /**\r\n   * Converts a numeric value to relative position on axis.\r\n   *\r\n   * @param value  Value\r\n   * @return relative position\r\n   */\n  ValueAxis.prototype.valueToPosition = function (value) {\n    if ($type.isNumber(value)) {\n      // todo: think if possible to take previous value and do not go through all previous breaks\n      var min_1 = this.min;\n      var max_1 = this.max;\n      if ($type.isNumber(min_1) && $type.isNumber(max_1)) {\n        var difference = this._difference;\n        var axisBreaks = this._axisBreaks;\n        if (axisBreaks && axisBreaks.length > 0) {\n          $iter.eachContinue(axisBreaks.iterator(), function (axisBreak) {\n            var startValue = axisBreak.adjustedStartValue;\n            var endValue = axisBreak.adjustedEndValue;\n            if ($type.isNumber(startValue) && $type.isNumber(endValue)) {\n              if (value < startValue) {\n                return false;\n              }\n              if ($math.intersect({\n                start: startValue,\n                end: endValue\n              }, {\n                start: min_1,\n                end: max_1\n              })) {\n                // todo: check this once and set some flag in axisBreak\n                startValue = Math.max(startValue, min_1);\n                endValue = Math.min(endValue, max_1);\n                var breakSize = axisBreak.breakSize;\n                // value to the right of break end\n                if (value > endValue) {\n                  min_1 += (endValue - startValue) * (1 - breakSize); // todo: maybe this can be done differently?\n                }\n                // value to the left of break start\n                else if (value < startValue) {}\n                // value within break\n                else {\n                  value = startValue + (value - startValue) * breakSize;\n                }\n              }\n            }\n            return true;\n          });\n        }\n        var position = void 0;\n        if (!this.logarithmic) {\n          position = (value - min_1) / difference;\n        } else {\n          var treatZeroAs = this.treatZeroAs;\n          if ($type.isNumber(treatZeroAs)) {\n            if (value <= treatZeroAs) {\n              value = treatZeroAs;\n            }\n          }\n          position = (Math.log(value) * Math.LOG10E - Math.log(this.min) * Math.LOG10E) / (Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E);\n        }\n        //position = $math.round(position, 10);\n        return position;\n      }\n    }\n    return 0;\n  };\n  /**\r\n   * When fontSize of fontFamily changes we need to hard-invalidate all Labels of this container to position them properly.\r\n   */\n  ValueAxis.prototype.invalidateLabels = function () {\n    _super.prototype.invalidateLabels.call(this);\n    if (this.dataItems) {\n      this.dataItems.each(function (dataItem) {\n        dataItem.value = undefined;\n      });\n      this.invalidate();\n    }\n  };\n  /**\r\n   * Converts an relative position to a corresponding value within\r\n   * axis' scale.\r\n   *\r\n   * @param position  Position (px)\r\n   * @return Value\r\n   */\n  ValueAxis.prototype.positionToValue = function (position) {\n    var min = this.min;\n    var max = this.max;\n    if ($type.isNumber(min) && $type.isNumber(max)) {\n      var difference_1 = max - min; //no need to adjust!\n      var value_2 = null;\n      var axisBreaks = this._axisBreaks;\n      if (axisBreaks) {\n        // in case we have some axis breaks\n        if (axisBreaks.length > 0) {\n          $iter.eachContinue(axisBreaks.iterator(), function (axisBreak) {\n            var breakStartPosition = axisBreak.startPosition;\n            var breakEndPosition = axisBreak.endPosition;\n            var breakStartValue = axisBreak.adjustedStartValue;\n            var breakEndValue = axisBreak.adjustedEndValue;\n            if ($type.isNumber(breakStartValue) && $type.isNumber(breakEndValue)) {\n              if (breakStartValue > max) {\n                return false;\n              }\n              if ($math.intersect({\n                start: breakStartValue,\n                end: breakEndValue\n              }, {\n                start: min,\n                end: max\n              })) {\n                breakStartValue = $math.max(breakStartValue, min);\n                breakEndValue = $math.min(breakEndValue, max);\n                var breakSize = axisBreak.breakSize;\n                difference_1 -= (breakEndValue - breakStartValue) * (1 - breakSize);\n                // position to the right of break end\n                if (position > breakEndPosition) {\n                  min += (breakEndValue - breakStartValue) * (1 - breakSize);\n                }\n                // position to the left of break start\n                else if (position < breakStartPosition) {}\n                // value within break\n                else {\n                  var breakPosition = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\n                  value_2 = breakStartValue + breakPosition * (breakEndValue - breakStartValue);\n                  return false;\n                }\n              }\n              return true;\n            }\n          });\n        }\n      }\n      if (!$type.isNumber(value_2)) {\n        if (this.logarithmic) {\n          value_2 = Math.pow(Math.E, (position * (Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E) + Math.log(this.min) * Math.LOG10E) / Math.LOG10E);\n        } else {\n          value_2 = position * difference_1 + min;\n        }\n      }\n      return value_2;\n    }\n    //}\n  };\n  /**\r\n   * Converts an X coordinate to a relative value in axis' scale.\r\n   *\r\n   * @param x  X (px)\r\n   * @return Value\r\n   */\n  ValueAxis.prototype.xToValue = function (x) {\n    return this.positionToValue(this.pointToPosition({\n      x: x,\n      y: 0\n    }));\n  };\n  /**\r\n   * Converts an Y coordinate to a relative value in axis' scale.\r\n   *\r\n   * @param y  Y (px)\r\n   * @return Value\r\n   */\n  ValueAxis.prototype.yToValue = function (y) {\n    return this.positionToValue(this.pointToPosition({\n      x: 0,\n      y: y\n    }));\n  };\n  /**\r\n   * Converts pixel coordinates to a relative position. (0-1)\r\n   *\r\n   * @param point  Coorinates (px)\r\n   * @return Position (0-1)\r\n   */\n  ValueAxis.prototype.pointToPosition = function (point) {\n    if (this.renderer instanceof AxisRendererY) {\n      return 1 - this.renderer.pointToPosition(point);\n    } else {\n      return this.renderer.pointToPosition(point);\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n  ValueAxis.prototype.animateMinMax = function (min, max) {\n    return this.animate([{\n      property: \"_minAdjusted\",\n      from: this._minAdjusted,\n      to: min\n    }, {\n      property: \"_maxAdjusted\",\n      from: this._maxAdjusted,\n      to: max\n    }], this.rangeChangeDuration, this.rangeChangeEasing);\n  };\n  /**\r\n   * Calculates smallest and biggest value for the axis scale.\r\n   * @ignore\r\n   * @todo Description (review)\r\n   */\n  ValueAxis.prototype.getMinMax = function () {\n    var _this = this;\n    this.updateGridCount();\n    var min = Number.POSITIVE_INFINITY;\n    var max = Number.NEGATIVE_INFINITY;\n    // only if min and max are not set from outside, we go through min and max influencers\n    if (!$type.isNumber(this._minDefined) || !$type.isNumber(this._maxDefined)) {\n      this.series.each(function (series) {\n        if (!series.ignoreMinMax) {\n          // check min\n          var seriesMin = series.min(_this);\n          if ($type.isNumber(seriesMin) && seriesMin < min) {\n            min = seriesMin;\n          }\n          // check max\n          var seriesMax = series.max(_this);\n          if ($type.isNumber(seriesMax) && seriesMax > max) {\n            max = seriesMax;\n          }\n        }\n      });\n      if (this.includeRangesInMinMax) {\n        this.axisRanges.each(function (range) {\n          if (!range.ignoreMinMax) {\n            var minValue = $math.min(range.value, range.endValue);\n            var maxValue = $math.max(range.value, range.endValue);\n            if (minValue < min || !$type.isNumber(min)) {\n              min = minValue;\n            }\n            if (maxValue > max || !$type.isNumber(max)) {\n              max = maxValue;\n            }\n          }\n        });\n      }\n    }\n    if (this.logarithmic) {\n      var treatZeroAs = this.treatZeroAs;\n      if ($type.isNumber(treatZeroAs)) {\n        if (min <= 0) {\n          min = treatZeroAs;\n        }\n      }\n      if (min <= 0) {\n        this.raiseCriticalError(new Error(\"Logarithmic value axis can not have values <= 0.\"), true);\n      }\n    }\n    if (min == 0 && max == 0) {\n      max = 0.9;\n      min = -0.9;\n    }\n    // if defined from outside\n    if ($type.isNumber(this._minDefined)) {\n      min = this._minDefined;\n    }\n    if ($type.isNumber(this._maxDefined)) {\n      max = this._maxDefined;\n    }\n    if (this._adapterO) {\n      min = this._adapterO.apply(\"min\", min);\n    }\n    if (this._adapterO) {\n      max = this._adapterO.apply(\"max\", max);\n    }\n    if (!$type.isNumber(min) || !$type.isNumber(max)) {\n      return;\n    }\n    this._minReal = min;\n    this._maxReal = max;\n    if (min == Number.POSITIVE_INFINITY) {\n      min = undefined;\n    }\n    if (max == Number.NEGATIVE_INFINITY) {\n      max = undefined;\n    }\n    var dif = this.adjustDifference(min, max); // previously it was max-min, but not worked well\n    min = this.fixMin(min);\n    max = this.fixMax(max);\n    // this happens if starLocation and endLocation are 0.5 and DateAxis has only one date\n    if (max - min <= 1 / Math.pow(10, 15)) {\n      if (max - min != 0) {\n        this._deltaMinMax = (max - min) / 2;\n      } else {\n        // the number by which we need to raise 10 to get difference\n        var exponent = Math.log(Math.abs(max)) * Math.LOG10E;\n        // here we find a number which is power of 10 and has the same count of numbers as difference has\n        var power = Math.pow(10, Math.floor(exponent));\n        // reduce this number by 10 times\n        power = power / 10;\n        this._deltaMinMax = power;\n      }\n      min -= this._deltaMinMax;\n      max += this._deltaMinMax;\n    }\n    min -= (max - min) * this.extraMin;\n    max += (max - min) * this.extraMax;\n    var strict = this.strictMinMax;\n    if ($type.isNumber(this._maxDefined)) {\n      strict = true;\n    }\n    var minMaxStep = this.adjustMinMax(min, max, dif, this._gridCount, strict);\n    min = minMaxStep.min;\n    max = minMaxStep.max;\n    dif = max - min; //new\n    // do it for the second time (importat!)\n    minMaxStep = this.adjustMinMax(min, max, max - min, this._gridCount, true);\n    min = minMaxStep.min;\n    max = minMaxStep.max;\n    // return min max if strict\n    if (this.strictMinMax) {\n      if ($type.isNumber(this._minDefined)) {\n        min = this._minDefined;\n      } else {\n        min = this._minReal;\n      }\n      if ($type.isNumber(this._maxDefined)) {\n        max = this._maxDefined;\n      } else {\n        max = this._maxReal;\n      }\n      if (max - min <= 0.00000001) {\n        min -= this._deltaMinMax;\n        max += this._deltaMinMax;\n      }\n      min -= (max - min) * this.extraMin;\n      max += (max - min) * this.extraMax;\n    }\n    if (this._adapterO) {\n      min = this._adapterO.apply(\"min\", min);\n    }\n    if (this._adapterO) {\n      max = this._adapterO.apply(\"max\", max);\n    }\n    this._step = minMaxStep.step;\n    if (!$type.isNumber(min) && !$type.isNumber(max)) {\n      this.start = 0;\n      this.end = 1;\n      this.renderer.labels.each(function (label) {\n        label.dataItem.text = \"\";\n      });\n    }\n    // checking isNumber is good when all series are hidden\n    if ((this._minAdjusted != min || this._maxAdjusted != max) && $type.isNumber(min) && $type.isNumber(max)) {\n      var animation = this._minMaxAnimation;\n      if (this._extremesChanged && $type.isNumber(this._minAdjusted) && $type.isNumber(this._maxAdjusted) && this.inited) {\n        if (animation && !animation.isFinished() && this._finalMax == max && this._finalMin == min) {\n          return;\n        } else {\n          this._finalMin = min;\n          this._finalMax = max;\n          animation = this.animateMinMax(min, max);\n          if (animation && !animation.isFinished()) {\n            animation.events.on(\"animationprogress\", this.validateDataItems, this);\n            animation.events.on(\"animationended\", function () {\n              //this.validateDataItems();\n              _this.series.each(function (series) {\n                series.validate();\n              });\n              _this.validateDataItems();\n              _this.handleSelectionExtremesChange();\n            });\n            this._minMaxAnimation = animation;\n          } else {\n            this.series.each(function (series) {\n              series.invalidate();\n            });\n          }\n          this.validateDataItems();\n          this.dispatchImmediately(\"extremeschanged\");\n          this.handleSelectionExtremesChange();\n        }\n      } else {\n        if (animation && !animation.isFinished() && this._finalMax == max && this._finalMin == min) {\n          return;\n        } else {\n          this._minAdjusted = min;\n          this._maxAdjusted = max;\n          this._finalMin = min;\n          this._finalMax = max;\n          this.invalidateDataItems();\n          this.dispatchImmediately(\"extremeschanged\");\n          this._saveMinMax(min, max);\n        }\n      }\n    }\n    this._extremesChanged = false;\n    this._difference = this.adjustDifference(min, max);\n  };\n  /**\r\n   * Adjusts the minimum value.\r\n   *\r\n   * This is a placeholder method for extending classes to override.\r\n   *\r\n   * For numeric values this does nothing, however for more complex types, like\r\n   * dates, it may be necessary to adjust.\r\n   *\r\n   * @param value  Value\r\n   * @return Adjusted value\r\n   */\n  ValueAxis.prototype.fixMin = function (value) {\n    return value;\n  };\n  /**\r\n   * Adjusts the maximum value.\r\n   *\r\n   * This is a placeholder method for extending classes to override.\r\n   *\r\n   * For numeric values this does nothing, however for more complex types, like\r\n   * dates, it may be necessary to adjust.\r\n   *\r\n   * @param value  Value\r\n   * @return Adjusted value\r\n   */\n  ValueAxis.prototype.fixMax = function (value) {\n    return value;\n  };\n  /**\r\n   * Adjusts actual min and max scale values so that the axis starts and ends\r\n   * at \"nice\" values, unless `strictMinMax` is set.\r\n   *\r\n   * The `difference` can be something else than `max - min`, because of the\r\n   * axis breaks.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param min        [description]\r\n   * @param max        [description]\r\n   * @param difference [description]\r\n   * @param gridCount  [description]\r\n   * @param strictMode [description]\r\n   * @return [description]\r\n   */\n  ValueAxis.prototype.adjustMinMax = function (min, max, difference, gridCount, strictMode) {\n    // will fail if 0\n    if (gridCount <= 1) {\n      gridCount = 1;\n    }\n    gridCount = Math.round(gridCount);\n    var initialMin = min;\n    var initialMax = max;\n    // in case min and max is the same, use max\n    if (difference === 0) {\n      difference = Math.abs(max);\n    }\n    // the number by which we need to raise 10 to get difference\n    var exponent = Math.log(Math.abs(difference)) * Math.LOG10E;\n    // here we find a number which is power of 10 and has the same count of numbers as difference has\n    var power = Math.pow(10, Math.floor(exponent));\n    // reduce this number by 10 times\n    power = power / 10;\n    var extra = power;\n    if (strictMode) {\n      extra = 0;\n    }\n    if (!this.logarithmic) {\n      // round down min\n      if (strictMode) {\n        min = Math.floor(min / power) * power;\n        // round up max\n        max = Math.ceil(max / power) * power;\n      } else {\n        min = Math.ceil(min / power) * power - extra;\n        // round up max\n        max = Math.floor(max / power) * power + extra;\n      }\n      // don't let min go below 0 if real min is >= 0\n      if (min < 0 && initialMin >= 0) {\n        min = 0;\n      }\n      // don't let max go above 0 if real max is <= 0\n      if (max > 0 && initialMax <= 0) {\n        max = 0;\n      }\n    } else {\n      if (min <= 0) {\n        //throw Error(\"Logarithmic value axis can not have values <= 0.\");\n        min = this.baseValue;\n      }\n      // @todo: think of a better way or to restrict zooming when no series are selected\n      if (min == Infinity) {\n        min = 1;\n      }\n      if (max == -Infinity) {\n        max = 10;\n      }\n      if (this.strictMinMax) {\n        if (this._minDefined > 0) {\n          min = this._minDefined;\n        } else {\n          min = min;\n        }\n        if (this._maxDefined > 0) {\n          max = max;\n        }\n      } else {\n        min = Math.pow(10, Math.floor(Math.log(Math.abs(min)) * Math.LOG10E));\n        max = Math.pow(10, Math.ceil(Math.log(Math.abs(max)) * Math.LOG10E));\n      }\n    }\n    // repeat diff, exponent and power again with rounded values\n    //difference = this.adjustDifference(min, max);\n    /*\r\n              if(min > initialMin){\r\n                min = initialMin;\r\n            }\r\n              if(max < initialMax){\r\n                max = initialMax;\r\n            }\r\n    */\n    exponent = Math.log(Math.abs(difference)) * Math.LOG10E;\n    power = Math.pow(10, Math.floor(exponent));\n    power = power / 10;\n    // approximate difference between two grid lines\n    var step = Math.ceil(difference / gridCount / power) * power;\n    var stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(step)) * Math.LOG10E));\n    // TODO: in v3 I had fixStepE here, ommiting it for a while, need to think about other solution\n    // the step should divide by  2, 5, and 10.\n    var stepDivisor = Math.ceil(step / stepPower); // number 0 - 10\n    if (stepDivisor > 5) {\n      stepDivisor = 10;\n    } else if (stepDivisor <= 5 && stepDivisor > 2) {\n      stepDivisor = 5;\n    }\n    // now get real step\n    step = Math.ceil(step / (stepPower * stepDivisor)) * stepPower * stepDivisor;\n    if (this.maxPrecision < Number.MAX_VALUE && step != $math.ceil(step, this.maxPrecision)) {\n      step = $math.ceil(step, this.maxPrecision);\n    }\n    var decCount = 0;\n    // in case numbers are smaller than 1\n    if (stepPower < 1) {\n      // exponent is less then 1 too. Count decimals of exponent\n      decCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 1;\n      // round step\n      step = $math.round(step, decCount);\n    }\n    if (!this.logarithmic) {\n      // final min and max\n      var minCount = Math.floor(min / step);\n      min = $math.round(step * minCount, decCount);\n      var maxCount = void 0;\n      if (!strictMode) {\n        maxCount = Math.ceil(max / step);\n      } else {\n        maxCount = Math.floor(max / step);\n      }\n      if (maxCount == minCount) {\n        maxCount++;\n      }\n      max = $math.round(step * maxCount, decCount);\n      if (max < initialMax) {\n        max = max + step;\n      }\n      if (min > initialMin) {\n        min = min - step;\n      }\n    }\n    return {\n      min: min,\n      max: max,\n      step: step\n    };\n  };\n  Object.defineProperty(ValueAxis.prototype, \"min\", {\n    /**\r\n     * @return Min value\r\n     */\n    get: function () {\n      var min = this._minAdjusted;\n      if (!$type.isNumber(min)) {\n        min = this._minDefined;\n      }\n      return min;\n    },\n    /**\r\n     * A minimum value for the axis scale.\r\n     *\r\n     * This value might be auto-adjusted by the Axis in order to accomodate the\r\n     * grid nicely, i.e. plot area is divided by grid in nice equal cells.\r\n     *\r\n     * The above might be overridden by `strictMinMax` which will force exact\r\n     * user-defined min and max values to be used for scale.\r\n     *\r\n     * @param value  Min value\r\n     */\n    set: function (value) {\n      if (this._minDefined != value) {\n        this._minDefined = value;\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"minDefined\", {\n    /**\r\n     * Min value as defined by user's code, not auto-calculated.\r\n     *\r\n     * @readonly\r\n     * @return Min value\r\n     */\n    get: function () {\n      return this._minDefined;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"maxDefined\", {\n    /**\r\n     * Max value as defined by user's code, not auto-calculated.\r\n     *\r\n     * @readonly\r\n     * @return Man value\r\n     */\n    get: function () {\n      return this._maxDefined;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"extraMin\", {\n    /**\r\n     * @return {number}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"extraMin\");\n    },\n    /**\r\n     * Allows relatively adjusting minimum value of the axis' scale.\r\n     *\r\n     * The value is relative to the actual range of values currently displayed\r\n     * on the axis.\r\n     *\r\n     * E.g.: 0.5 will mean half of the current range. If we have axis displaying\r\n     * from 100 to 200, we will now have axis displaying from 50 to 200 because\r\n     * we asked to expand minimum value by 50% (0.5).\r\n     *\r\n     * NOTE: this setting is not compatible with `strictMinMax`.\r\n     *\r\n     * @param {number}\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"extraMin\", value)) {\n        this.invalidateDataItems();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"extraMax\", {\n    /**\r\n     * @return Min multiplier\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"extraMax\");\n    },\n    /**\r\n     * Allows relatively adjusting maximum value of the axis' scale.\r\n     *\r\n     * The value is relative to the actual range of values currently displayed\r\n     * on the axis.\r\n     *\r\n     * E.g.: 0.5 will mean half of the current range. If we have axis displaying\r\n     * from 100 to 200, we will now have axis displaying from 100 to 250 because\r\n     * we asked to expand maximum value by 50% (0.5).\r\n     *\r\n     * NOTE: this setting is not compatible with `strictMinMax`.\r\n     *\r\n     * @param {number}\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"extraMax\", value)) {\n        this.invalidateDataItems();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"step\", {\n    /**\r\n     * Current calculated delta in values between two adjacent grid lines (step).\r\n     *\r\n     * This is a read-only value and cannot be used to set actual step.\r\n     *\r\n     * @readonly\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/#Setting_the_density_of_the_the_grid_labels} For more information about modifying density of labels\r\n     * @return [description]\r\n     */\n    get: function () {\n      return this._step;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"max\", {\n    /**\r\n     * @return Max value\r\n     */\n    get: function () {\n      var max = this._maxAdjusted;\n      if (!$type.isNumber(max)) {\n        max = this._maxDefined;\n      }\n      return max;\n    },\n    /**\r\n     * A maximum value for the axis scale.\r\n     *\r\n     * This value might be auto-adjusted by the Axis in order to accomodate the\r\n     * grid nicely, i.e. plot area is divided by grid in nice equal cells.\r\n     *\r\n     * The above might be overridden by `strictMinMax` which will force exact\r\n     * user-defined min and max values to be used for scale.\r\n     *\r\n     * @param value  Max value\r\n     */\n    set: function (value) {\n      if (this._maxDefined != value) {\n        this._maxDefined = value;\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"adjustLabelPrecision\", {\n    /**\r\n     * @return Adjust precision\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"adjustLabelPrecision\");\n    },\n    /**\r\n     * By default the axis will adjust precision of all numbers to match number\r\n     * of decimals in all its labels, e.g.: `1.0`, `1.5`, `2.0`.\r\n     *\r\n     * To disable set `adjustLabelPrecision` to `false`, to use whatever other\r\n     * precision or number format settings are set.\r\n     *\r\n     * IMPORTANT: This setting will be ignored if your number format uses\r\n     * modifiers, e.g. `\"#a\"`.\r\n     *\r\n     * @default true\r\n     * @since 4.9.14\r\n     * @param  value  Adjust precision\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"adjustLabelPrecision\", value)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Used for the Series to register itself as the user of this Axis.\r\n   *\r\n   * This will also decorate both the Series and Axis with event handlers, used\r\n   * to redraw on Axis position/zoom change.\r\n   *\r\n   * A disposer for those events is returned, so that they can be disposed\r\n   * together with Series.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param series  Series\r\n   * @return Disposer for events\r\n   */\n  ValueAxis.prototype.registerSeries = function (series) {\n    return new MultiDisposer([_super.prototype.registerSeries.call(this, series), series.events.on(\"extremeschanged\", this.handleExtremesChange, this, false), series.events.on(\"selectionextremeschanged\", this.handleSelectionExtremesChange, this, false), this.events.on(\"extremeschanged\", series.invalidate, series, false)]);\n  };\n  /**\r\n   * Perform tasks after Axis zoom.\r\n   */\n  ValueAxis.prototype.handleSelectionExtremesChange = function () {\n    var _this = this;\n    var selectionMin;\n    var selectionMax;\n    var allHidden = true;\n    $iter.each(this.series.iterator(), function (series) {\n      if (!series.ignoreMinMax && !series.isHidden && !series.outOfRange) {\n        if (series.visible && !series.isHiding) {\n          allHidden = false;\n        }\n        var seriesSelectionMin = series.selectionMin(_this);\n        var seriesSelectionMax = series.selectionMax(_this);\n        if ($type.isNumber(seriesSelectionMin)) {\n          if (!$type.isNumber(selectionMin) || seriesSelectionMin < selectionMin) {\n            selectionMin = seriesSelectionMin;\n          }\n        }\n        // check max\n        if ($type.isNumber(seriesSelectionMax)) {\n          if (!$type.isNumber(selectionMax) || seriesSelectionMax > selectionMax) {\n            selectionMax = seriesSelectionMax;\n          }\n        }\n      }\n    });\n    if (this.includeRangesInMinMax) {\n      this.axisRanges.each(function (range) {\n        if (!range.ignoreMinMax) {\n          var minValue = $math.min(range.value, range.endValue);\n          var maxValue = $math.max(range.value, range.endValue);\n          if (minValue < selectionMin) {\n            selectionMin = minValue;\n          }\n          if (maxValue > selectionMax) {\n            selectionMax = maxValue;\n          }\n        }\n      });\n    }\n    // this is not good, as if date axis is initially zoomed, selection of y axis is reset to 0, 1 at the end of this method\n    //$iter.each(this.series.iterator(), (series) => {\n    //\tif (!series.appeared) {\n    //\t\tallHidden = true;\n    //\t}\n    //})\n    if ($type.isNumber(this._minDefined)) {\n      if (this.strictMinMax) {\n        selectionMin = this._minDefined;\n      } else {\n        selectionMin = this.min;\n      }\n    } else if (this.strictMinMax) {\n      selectionMin = this._minReal;\n    }\n    if ($type.isNumber(this._maxDefined)) {\n      if (this.strictMinMax) {\n        selectionMax = this._maxDefined;\n      } else {\n        selectionMax = this.max;\n      }\n    } else if (this.strictMinMax) {\n      selectionMax = this._maxReal;\n    }\n    if (selectionMin == selectionMax) {\n      selectionMin -= this._deltaMinMax;\n      selectionMax += this._deltaMinMax;\n      var minMaxStep2 = this.adjustMinMax(selectionMin, selectionMax, 0, this._gridCount, this.strictMinMax);\n      selectionMin = minMaxStep2.min;\n      selectionMax = minMaxStep2.max;\n    }\n    var dif = this.adjustDifference(selectionMin, selectionMax);\n    var minMaxStep = this.adjustMinMax(selectionMin, selectionMax, dif, this._gridCount);\n    selectionMin = minMaxStep.min;\n    selectionMax = minMaxStep.max;\n    selectionMin -= (selectionMax - selectionMin) * this.extraMin;\n    selectionMax += (selectionMax - selectionMin) * this.extraMax;\n    selectionMin = $math.fitToRange(selectionMin, this.min, this.max);\n    selectionMax = $math.fitToRange(selectionMax, this.min, this.max);\n    // do it for the second time !important\n    dif = this.adjustDifference(selectionMin, selectionMax);\n    minMaxStep = this.adjustMinMax(selectionMin, selectionMax, dif, this._gridCount, true);\n    selectionMin = minMaxStep.min;\n    selectionMax = minMaxStep.max;\n    if (this.strictMinMax) {\n      selectionMin = $math.max(selectionMin, this._minDefined);\n      selectionMax = $math.min(selectionMax, this._maxDefined);\n    }\n    var step = minMaxStep.step;\n    if (this.syncWithAxis) {\n      minMaxStep = this.syncAxes(selectionMin, selectionMax, step);\n      selectionMin = minMaxStep.min;\n      selectionMax = minMaxStep.max;\n      this.invalidate();\n    }\n    step = minMaxStep.step;\n    // needed because of grouping\n    this._difference = this.adjustDifference(this.min, this.max);\n    var start = this.valueToPosition(selectionMin);\n    var end = this.valueToPosition(selectionMax);\n    // in case all series are hidden or hiding, full zoomout\n    if (allHidden && !this.syncWithAxis) {\n      start = 0;\n      end = 1;\n    }\n    var declination = 0;\n    if (this.syncWithAxis) {\n      declination = 5;\n      this.setCache(selectionMin + \"-\" + selectionMax, step);\n    } else {\n      if (this._step != step || this._minZoomed != selectionMin || this._maxZoomed != selectionMax) {\n        this._dsc = true;\n      }\n      this._step = step;\n      this._minZoomed = selectionMin;\n      this._maxZoomed = selectionMax;\n    }\n    if (!this.keepSelection) {\n      this.zoom({\n        start: start,\n        end: end\n      }, false, false, declination);\n    }\n  };\n  Object.defineProperty(ValueAxis.prototype, \"strictMinMax\", {\n    /**\r\n     * @return Use exact values?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"strictMinMax\");\n    },\n    /**\r\n     * Indicates whether to blindly use exact `min` and `max` values set by user\r\n     * when generating Axis scale.\r\n     *\r\n     * If not set, the Axis might slightly adjust those values to accomodate a\r\n     * better looking grid.\r\n     *\r\n     * NOTE: if `min` and `max` are not set, setting `strictMinMax` to `true`\r\n     * will result in fixing the scale of the axis to actual lowest and highest\r\n     * values in the series within currently selected scope.\r\n     *\r\n     * @default false\r\n     * @param value Use exact values?\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"strictMinMax\", value)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"logarithmic\", {\n    /**\r\n     * @return Logarithmic scale?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"logarithmic\");\n    },\n    /**\r\n     * Indicates if this axis should use a logarithmic scale.\r\n     *\r\n     * Please note that logarithmic axis can **only** accommodate values bigger\r\n     * than zero.\r\n     *\r\n     * Having zero or negative values will result in error and failure of the\r\n     * whole chart.\r\n     *\r\n     * @param value Logarithmic scale?\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"logarithmic\", value)) {\n        this.invalidate();\n        this.series.each(function (series) {\n          series.invalidateDataItems();\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"keepSelection\", {\n    /**\r\n     * @return Preseve zoom after data update?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"keepSelection\");\n    },\n    /**\r\n     * Indicates if a current selection (zoom) should be kept across data updates.\r\n     *\r\n     * If your axis is zoomed while chart's data is updated, the axis will try\r\n     * to retain the same start and end values.\r\n     *\r\n     * You can also use this to initially pre-zoom axis:\r\n     *\r\n     * ```TypeScript\r\n     * axis.keepSelection = true;\r\n     * axis.start = 0.5;\r\n     * axis.end = 0.7;\r\n     * ```\r\n     * ```JavaScript\r\n     * axis.keepSelection = true;\r\n     * axis.start = 0.5;\r\n     * axis.end = 0.7;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   \"xAxes\": [{\r\n     *     // ...\r\n     *     \"keepSelection\": true,\r\n     *     \"start\": 0.5,\r\n     *     \"end\": 0.7\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * The above will start the chart zoomed from the middle of the actual scope\r\n     * to 70%.\r\n     *\r\n     * @since 4.1.1\r\n     * @default false\r\n     * @param  value  Preseve zoom after data update?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"keepSelection\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"includeRangesInMinMax\", {\n    /**\r\n     * @return Include ranges?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"includeRangesInMinMax\");\n    },\n    /**\r\n     * If set to `true`, values of axis ranges will be included when calculating\r\n     * range of values / scale of the [[ValueAxis]].\r\n     *\r\n     * @default false\r\n     * @since 4.4.9\r\n     * @param  value  Include ranges?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"includeRangesInMinMax\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"maxPrecision\", {\n    /**\r\n     * @return max precision\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxPrecision\");\n    },\n    /**\r\n     * Maximum number of decimals to allow when placing grid lines and labels\r\n     * on axis.\r\n     *\r\n     * Set it to `0` (zero) to force integer-only axis labels.\r\n     *\r\n     * @param {number}\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"maxPrecision\", value)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"extraTooltipPrecision\", {\n    /**\r\n     * @return Extra decimals\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"extraTooltipPrecision\");\n    },\n    /**\r\n     * This setting allows using bigger precision for numbers displayed in axis\r\n     * tooltip.\r\n     *\r\n     * Please note that this setting indicates additional decimal places to\r\n     * automatically-calculated axis number precision.\r\n     *\r\n     * So if your axis displays numbers like 0.1, 0.2, etc. (one decimal place),\r\n     * and you set `extraTooltipPrecision = 1`, tooltips will display numbers\r\n     * like 0.12, 0.25, etc. (two decimal places).\r\n     *\r\n     * @default 0\r\n     * @since 4.8.3\r\n     * @param  value  Extra decimals\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"extraTooltipPrecision\", value)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Invalidates axis data items when series extremes change\r\n   */\n  ValueAxis.prototype.handleExtremesChange = function () {\n    var _this = this;\n    this._extremesChanged = true;\n    this.getMinMax();\n    if (this.ghostLabel) {\n      var mw_1 = 0;\n      this.dataItems.each(function (dataItem) {\n        if (dataItem.label && dataItem.label.pixelWidth > mw_1) {\n          _this.ghostLabel.text = dataItem.label.currentText;\n        }\n      });\n    }\n  };\n  /**\r\n   * Returns relative position on axis for series' data item's value.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (review)\r\n   * @param dataItem  Data item\r\n   * @param key       Data field to get value from\r\n   * @param location  Location (0-1)\r\n   * @param stackKey  ?\r\n   * @return X coordinate (px)\r\n   */\n  ValueAxis.prototype.getX = function (dataItem, key, location, stackKey, range) {\n    return this.renderer.positionToPoint(this.getPositionX(dataItem, key, location, stackKey, range)).x;\n  };\n  /**\r\n   * Returns the X coordinate for series' data item's value.\r\n   *\r\n   * @since 4.5.14\r\n   * @param  dataItem  Data item\r\n   * @param  key       Data field to get value from\r\n   * @param  location  Location (0-1)\r\n   * @param  stackKey  ?\r\n   * @return           Relative position\r\n   */\n  ValueAxis.prototype.getPositionX = function (dataItem, key, location, stackKey, range) {\n    var value = dataItem.getWorkingValue(key);\n    if (!$type.hasValue(stackKey)) {\n      stackKey = \"valueX\";\n    }\n    var stack = dataItem.getValue(stackKey, \"stack\");\n    if (!$type.isNumber(value)) {\n      value = this.baseValue;\n      if (this.logarithmic) {\n        if (stack > 0) {\n          value = 0;\n        }\n      }\n    }\n    var position = this.valueToPosition(value + stack);\n    if (range) {\n      position = $math.fitToRange(position, range.start, range.end);\n    }\n    return position;\n  };\n  /**\r\n   * Returns the Y coordinate for series' data item's value.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (review)\r\n   * @param dataItem  Data item\r\n   * @param key       Data field to get value from\r\n   * @param location  Location (0-1)\r\n   * @param stackKey  Stack ID\r\n   * @return Y coordinate (px)\r\n   */\n  ValueAxis.prototype.getY = function (dataItem, key, location, stackKey, range) {\n    return this.renderer.positionToPoint(this.getPositionY(dataItem, key, location, stackKey, range)).y;\n  };\n  /**\r\n   * Returns relative position on axis for series' data item's value.\r\n   *\r\n   * @since 4.5.14\r\n   * @param  dataItem  Data item\r\n   * @param  key       Data field to get value from\r\n   * @param  location  Location (0-1)\r\n   * @param  stackKey  Stack ID\r\n   * @return           Relative position\r\n   */\n  ValueAxis.prototype.getPositionY = function (dataItem, key, location, stackKey, range) {\n    var value = dataItem.getWorkingValue(key);\n    if (!$type.hasValue(stackKey)) {\n      stackKey = \"valueY\";\n    }\n    var stack = dataItem.getValue(stackKey, \"stack\");\n    if (!$type.isNumber(value)) {\n      value = this.baseValue;\n      if (this.logarithmic) {\n        if (stack > 0) {\n          value = 0;\n        }\n      }\n    }\n    var position = this.valueToPosition(value + stack);\n    if (range) {\n      position = $math.fitToRange(position, range.start, range.end);\n    }\n    return position;\n  };\n  /**\r\n   * Returns an angle for series data item.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (review)\r\n   * @param dataItem  Data item\r\n   * @param key       Data field to get value from\r\n   * @param location  Location (0-1)\r\n   * @param stackKey  Stack ID\r\n   * @param range Range to fit in\r\n   * @return Angle\r\n   */\n  ValueAxis.prototype.getAngle = function (dataItem, key, location, stackKey, range) {\n    var value = dataItem.getWorkingValue(key);\n    var stack = dataItem.getValue(stackKey, \"stack\");\n    if (!$type.isNumber(value)) {\n      value = this.baseValue;\n    }\n    var position = this.valueToPosition(value + stack);\n    if (range) {\n      position = $math.fitToRange(position, range.start, range.end);\n    }\n    return this.positionToAngle(position);\n  };\n  /**\r\n   * [getAnyRangePath description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param start     [description]\r\n   * @param end       [description]\r\n   * @param location  [description]\r\n   * @return [description]\r\n   */\n  ValueAxis.prototype.getAnyRangePath = function (start, end, location) {\n    var startPosition = this.valueToPosition(start);\n    var endPosition = this.valueToPosition(end);\n    return this.getPositionRangePath(startPosition, endPosition); // Base class (Axis) gets range shape from AxisRenderer\n  };\n  /**\r\n   * Returns text to show in a axis tooltip, based on specific position within\r\n   * axis.\r\n   *\r\n   * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n   * chart, or explicitly for this Axis.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param position  Position (px)\r\n   * @return Label (numeric value)\r\n   */\n  ValueAxis.prototype.getTooltipText = function (position) {\n    var value = $math.round(this.positionToValue(position), this._stepDecimalPlaces + this.extraTooltipPrecision);\n    var valueStr = this.tooltip.numberFormatter.format(value);\n    if (!this._adapterO) {\n      return valueStr;\n    } else {\n      return this._adapterO.apply(\"getTooltipText\", valueStr);\n    }\n  };\n  /**\r\n   * Zooms axis to specific values.\r\n   *\r\n   * @param startValue      Start value\r\n   * @param endValue        End value\r\n   * @param skipRangeEvent  Do not invoke events\r\n   * @param instantly       Do not play zoom animations\r\n   */\n  ValueAxis.prototype.zoomToValues = function (startValue, endValue, skipRangeEvent, instantly) {\n    var start = (startValue - this.min) / (this.max - this.min);\n    var end = (endValue - this.min) / (this.max - this.min);\n    this.zoom({\n      start: start,\n      end: end\n    }, skipRangeEvent, instantly);\n  };\n  Object.defineProperty(ValueAxis.prototype, \"minZoomed\", {\n    /**\r\n     * A smallest value in axis scale within current zoom.\r\n     *\r\n     * @return Min zoom value\r\n     */\n    get: function () {\n      if (!this.syncWithAxis) {\n        return $math.max(this.min, this._minZoomed);\n      } else {\n        return this._minZoomed;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"maxZoomed\", {\n    /**\r\n     * A biggest value in axis scale within current zoom.\r\n     * @return [description]\r\n     */\n    get: function () {\n      if (!this.syncWithAxis) {\n        return $math.min(this.max, this._maxZoomed);\n      } else {\n        return this._maxZoomed;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates positioning of Axis breaks after something changes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  ValueAxis.prototype.fixAxisBreaks = function () {\n    var _this = this;\n    _super.prototype.fixAxisBreaks.call(this);\n    var axisBreaks = this._axisBreaks;\n    if (axisBreaks && axisBreaks.length > 0) {\n      // process breaks\n      axisBreaks.each(function (axisBreak) {\n        var startValue = axisBreak.adjustedStartValue;\n        var endValue = axisBreak.adjustedEndValue;\n        // break difference\n        var axisBreakDif = endValue - startValue;\n        var axisBreakGridCount = Math.ceil(axisBreakDif * axisBreak.breakSize) * _this._gridCount / (_this.max - _this.min);\n        // calculate min, max and step for axis break\n        var breakMinMaxStep = _this.adjustMinMax(startValue, endValue, axisBreakDif, axisBreakGridCount, true);\n        axisBreak.adjustedStep = breakMinMaxStep.step;\n        axisBreak.adjustedMin = breakMinMaxStep.min;\n        axisBreak.adjustedMax = breakMinMaxStep.max;\n      });\n    }\n    this._difference = this.adjustDifference(this.min, this.max);\n  };\n  /**\r\n   * Returns value based on position.\r\n   *\r\n   * Please note that `position` represents position within axis which may be\r\n   * zoomed and not correspond to Cursor's `position`.\r\n   *\r\n   * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n   * @param position  Relative position on axis (0-1)\r\n   * @return Position label\r\n   */\n  ValueAxis.prototype.getPositionLabel = function (position) {\n    var value = this.positionToValue(position);\n    return this.numberFormatter.format(value);\n  };\n  /**\r\n   * Shows Axis tooltip at specific value\r\n   *\r\n   * @param value Value\r\n   */\n  ValueAxis.prototype.showTooltipAt = function (value) {\n    this.showTooltipAtPosition(this.valueToPosition(value));\n  };\n  /**\r\n   * Copies all properties and related data from a different instance of Axis.\r\n   *\r\n   * @param source Source Axis\r\n   */\n  ValueAxis.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    this.min = source.min;\n    this.max = source.max;\n    this.calculateTotals = source.calculateTotals;\n    this._baseValue = source.baseValue;\n  };\n  Object.defineProperty(ValueAxis.prototype, \"syncWithAxis\", {\n    /**\r\n     * @return Target axis\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"syncWithAxis\");\n    },\n    /**\r\n     * Enables syncing of grid with another axis.\r\n     *\r\n     * To enable, set to a reference of the other `ValueAxis`. This axis will try\r\n     * to maintain its scale in such way that its grid matches target axis grid.\r\n     *\r\n     * IMPORTANT #1: At this stage it's an experimental feature. Use it at your\r\n     * own risk, as it may not work in 100% of the scenarios.\r\n     *\r\n     * IMPORTANT #2: `syncWithAxis` is not compatible with `strictMinMax` and\r\n     * `sequencedInterpolation` settings.\r\n     *\r\n     * IMPORTANT #3: `syncWithAxis` is not compatible with scrollbars. Make sure\r\n     * you do not add a scrollbar in the same direction as synced axes. For\r\n     * example, if you have vertical synced axes, do not add `scrollbarY` on\r\n     * your chart. It will create anomalies when used.\r\n     *\r\n     * IMPORTANT #4: `syncWithAxis` is not compatible with `XYCursor` if it has\r\n     * its `behavior` set to either `zoomY` or `zoomXY`.\r\n     *\r\n     * @since 4.8.1\r\n     * @param  axis  Target axis\r\n     */\n    set: function (axis) {\n      var _this = this;\n      if (this.setPropertyValue(\"syncWithAxis\", axis, true)) {\n        if (axis) {\n          this._disposers.push(axis.events.on(\"extremeschanged\", this.handleSelectionExtremesChange, this, false));\n          this._disposers.push(axis.events.on(\"selectionextremeschanged\", this.handleSelectionExtremesChange, this, false));\n          this._disposers.push(axis.events.on(\"startendchanged\", this.handleSelectionExtremesChange, this, false));\n          this.events.on(\"shown\", this.handleSelectionExtremesChange, this, false);\n          this.events.on(\"maxsizechanged\", function () {\n            _this.clearCache();\n            _this._disposers.push(registry.events.once(\"exitframe\", function () {\n              _this.handleSelectionExtremesChange();\n            }));\n          }, this, false);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"treatZeroAs\", {\n    /**\r\n     * @return Zero replacement value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"treatZeroAs\");\n    },\n    /**\r\n     * If set, zero values will be treated as this value.\r\n     *\r\n     * It is useful if you need to use data with zero-values on a logarithmic\r\n     * axis scale.\r\n     *\r\n     * @since 4.9.34\r\n     * @param  value  Zero replacement value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"treatZeroAs\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Syncs with a target axis.\r\n   *\r\n   * @param  min  Min\r\n   * @param  max  Max\r\n   * @param  step Step\r\n   */\n  ValueAxis.prototype.syncAxes = function (min, max, step) {\n    var axis = this.syncWithAxis;\n    if (axis) {\n      if (!$type.isNumber(min)) {\n        min = this.min;\n      }\n      if (!$type.isNumber(max)) {\n        max = this.max;\n      }\n      if (!$type.isNumber(step)) {\n        step = this._step;\n      }\n      var count = Math.round((axis.maxZoomed - axis.minZoomed) / axis.step);\n      var currentCount = Math.round((max - min) / step);\n      if ($type.isNumber(count) && $type.isNumber(currentCount)) {\n        var synced = false;\n        var c = 0;\n        var diff = (max - min) * 0.01;\n        var omin = min;\n        var omax = max;\n        var ostep = step;\n        while (synced != true) {\n          synced = this.checkSync(omin, omax, ostep, count);\n          c++;\n          if (c > 1000) {\n            synced = true;\n          }\n          if (!synced) {\n            //omin = min - diff * c;\n            if (c / 3 == Math.round(c / 3)) {\n              omin = min - diff * c;\n              if (min >= 0 && omin < 0) {\n                omin = 0;\n              }\n            } else {\n              omax = max + diff * c;\n              if (omax <= 0 && omax > 0) {\n                omax = 0;\n              }\n            }\n            var minMaxStep = this.adjustMinMax(omin, omax, omax - omin, this._gridCount, true);\n            omin = minMaxStep.min;\n            omax = minMaxStep.max;\n            ostep = minMaxStep.step;\n          } else {\n            min = omin;\n            max = omax;\n            step = ostep;\n          }\n        }\n      }\n    }\n    return {\n      min: min,\n      max: max,\n      step: step\n    };\n  };\n  /**\r\n   * Returns `true` if axis needs to be resunced with some other axis.\r\n   */\n  ValueAxis.prototype.checkSync = function (min, max, step, count) {\n    var currentCount = (max - min) / step;\n    for (var i = 1; i < count; i++) {\n      if ($math.round(currentCount / i, 1) == count || currentCount * i == count) {\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n  ValueAxis.prototype.processConfig = function (config) {\n    if (config) {\n      // Set up axes\n      if ($type.hasValue(config.syncWithAxis) && $type.isString(config.syncWithAxis)) {\n        if (this.map.hasKey(config.syncWithAxis)) {\n          config.syncWithAxis = this.map.getKey(config.syncWithAxis);\n        } else {\n          this.processingErrors.push(\"[ValueAxis] No axis with id \\\"\" + config.syncWithAxis + \"\\\" found for `syncWithAxis`\");\n          delete config.xAxis;\n        }\n      }\n    }\n    _super.prototype.processConfig.call(this, config);\n  };\n  ValueAxis.prototype._saveMinMax = function (_min, _max) {};\n  return ValueAxis;\n}(Axis);\nexport { ValueAxis };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"ValueAxis\"] = ValueAxis;\nregistry.registeredClasses[\"ValueAxisDataItem\"] = ValueAxisDataItem;","map":{"version":3,"names":["__extends","Axis","AxisDataItem","AxisRendererY","MultiDisposer","registry","ValueAxisBreak","$math","$iter","$object","$type","$utils","ValueAxisDataItem","_super","_this","call","className","values","value","endValue","applyTheme","Object","defineProperty","prototype","get","set","setValue","enumerable","configurable","ValueAxis","_stepDecimalPlaces","_prevStepDecimalPlaces","_adjustLabelPrecision","_baseValue","_adjustedStart","_adjustedEnd","_extremesChanged","_deltaMinMax","_dsc","calculateTotals","axisFieldName","setPropertyValue","Number","MAX_VALUE","keepSelection","includeRangesInMinMax","fillRule","dataItem","axis","component","axisFill","disabled","round","step","Math","__disabled","createDataItem","createAxisBreak","dataChangeUpdate","clearCache","_start","_end","dispatchImmediately","_maxZoomed","_maxDefined","_minZoomed","_minDefined","_maxAdjusted","_minAdjusted","processSeriesDataItems","series","getIndex","startIndex","dataItems","length","endIndex","_loop_1","i","total","sum","this_1","each","excludeFromTotal","dataItem_1","key","workingValue","isNumber","abs","dataItem_2","setCalculatedValue","validate","axisLength","getMinMax","fixAxisBreaks","calculateZoom","validateAxisElements","validateAxisRanges","validateBreaks","hideUnusedDataItems","renderer","invalidateLayout","min","max","positionToValue","start","end","differece","adjustDifference","minMaxStep","adjustMinMax","_gridCount","stepDecimalPlaces","decimalPlaces","syncWithAxis","calculated","getCache","_step","fixSmallStep","value_1","minZoomed","logarithmic","floor","differencePower","log","LOG10E","pow","maxZoomed","resetIterators","dataItemsIterator_1","_dataItemsIterator","precisionChanged","axisBreak","isInBreak","find","x","appendDataItem","undefined","text","formatLabel","label","invalid","axisLetter","measuredWidth","ghostLabel","measuredHeight","currentText","validateDataElement","oldValue","stepPower","decCount","axisBreaks","_axisBreaks","renderer_1","iterator","breakSize","getDistance","startPoint","endPoint","minGridDistance","breakValue_1","adjustedMin","adjustedMax","adjustedStartValue","adjustedEndValue","adjustedStep","itemIndex","_axisItemCount","position","valueToPosition","endPosition","fillEndPosition","point","positionToPoint","tick","updateTickElement","grid","updateGridElement","updateLabelElement","fill","updateFillElement","isRange","bullet","updateBullet","mask","adjustLabelPrecision","numberFormatter","format","baseValue","basePoint","_adapterO","apply","invalidateSeries","anyToPosition","valueToPoint","angle","positionToAngle","y","anyToPoint","min_1","max_1","difference","_difference","eachContinue","startValue","intersect","treatZeroAs","invalidateLabels","invalidate","difference_1","value_2","breakStartPosition","startPosition","breakEndPosition","breakStartValue","breakEndValue","breakPosition","E","xToValue","pointToPosition","yToValue","animateMinMax","animate","property","from","to","rangeChangeDuration","rangeChangeEasing","updateGridCount","POSITIVE_INFINITY","NEGATIVE_INFINITY","ignoreMinMax","seriesMin","seriesMax","axisRanges","range","minValue","maxValue","raiseCriticalError","Error","_minReal","_maxReal","dif","fixMin","fixMax","exponent","power","extraMin","extraMax","strict","strictMinMax","labels","animation","_minMaxAnimation","inited","isFinished","_finalMax","_finalMin","events","on","validateDataItems","handleSelectionExtremesChange","invalidateDataItems","_saveMinMax","gridCount","strictMode","initialMin","initialMax","extra","ceil","Infinity","stepDivisor","maxPrecision","minCount","maxCount","getPropertyValue","registerSeries","handleExtremesChange","selectionMin","selectionMax","allHidden","isHidden","outOfRange","visible","isHiding","seriesSelectionMin","seriesSelectionMax","minMaxStep2","fitToRange","syncAxes","declination","setCache","zoom","mw_1","pixelWidth","getX","location","stackKey","getPositionX","getWorkingValue","hasValue","stack","getValue","getY","getPositionY","getAngle","getAnyRangePath","getPositionRangePath","getTooltipText","extraTooltipPrecision","valueStr","tooltip","zoomToValues","skipRangeEvent","instantly","axisBreakDif","axisBreakGridCount","breakMinMaxStep","getPositionLabel","showTooltipAt","showTooltipAtPosition","copyFrom","source","_disposers","push","once","count","currentCount","synced","c","diff","omin","omax","ostep","checkSync","processConfig","config","isString","map","hasKey","getKey","processingErrors","xAxis","_min","_max","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/charts/axes/ValueAxis.js"],"sourcesContent":["/**\r\n * Value Axis module\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Axis, AxisDataItem } from \"./Axis\";\r\nimport { AxisRendererY } from \"./AxisRendererY\";\r\nimport { MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ValueAxisBreak } from \"./ValueAxisBreak\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[ValueAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar ValueAxisDataItem = /** @class */ (function (_super) {\r\n    __extends(ValueAxisDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ValueAxisDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ValueAxisDataItem\";\r\n        _this.values.value = {};\r\n        _this.values.endValue = {};\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ValueAxisDataItem.prototype, \"value\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            return this.values[\"value\"].value;\r\n        },\r\n        /**\r\n         * A data point's numeric value.\r\n         *\r\n         * @param value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"value\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxisDataItem.prototype, \"endValue\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            return this.values[\"endValue\"].value;\r\n        },\r\n        /**\r\n         * Data point's numeric end value.\r\n         *\r\n         * @param value  End value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"endValue\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return ValueAxisDataItem;\r\n}(AxisDataItem));\r\nexport { ValueAxisDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Used to create a value axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Monthly Sales\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Monthly Sales\";\r\n * ```\r\n * ```JSON\r\n * \"yAxes\": [{\r\n *   \"type\": \"ValueAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Monthly Sales\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IValueAxisEvents} for a list of available Events\r\n * @see {@link IValueAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar ValueAxis = /** @class */ (function (_super) {\r\n    __extends(ValueAxis, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ValueAxis() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * [_stepDecimalPlaces description]\r\n         *\r\n         * @todo Description\r\n         */\r\n        _this._stepDecimalPlaces = 0;\r\n        _this._prevStepDecimalPlaces = 0;\r\n        _this._adjustLabelPrecision = true;\r\n        /**\r\n         * Base value for the axis.\r\n         */\r\n        _this._baseValue = 0;\r\n        /**\r\n         * Adjusted start in case we have breaks.\r\n         *\r\n         * @todo Description\r\n         */\r\n        _this._adjustedStart = 0;\r\n        /**\r\n         * Adjusted end in case we have breaks.\r\n         *\r\n         * @todo Description\r\n         */\r\n        _this._adjustedEnd = 1;\r\n        _this._extremesChanged = false;\r\n        _this._deltaMinMax = 1;\r\n        _this._dsc = false;\r\n        /**\r\n         * As calculating totals is expensive operation and not often needed, we\r\n         * don't do it by default.\r\n         *\r\n         * In case you use `totalPercent` or `total` in your charts, this must be set\r\n         * to `true`.\r\n         *\r\n         * @default false\r\n         * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/#100_stacks} For using `calculateTotals` for 100% stacked series.\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-strings/#Placeholders_for_numeric_values} For using `calculateTotals` in labels.\r\n         */\r\n        _this.calculateTotals = false;\r\n        _this.className = \"ValueAxis\";\r\n        // Set field name\r\n        _this.axisFieldName = \"value\";\r\n        // Set defaults\r\n        _this.setPropertyValue(\"maxZoomFactor\", 1000);\r\n        _this.setPropertyValue(\"extraMin\", 0);\r\n        _this.setPropertyValue(\"extraMax\", 0);\r\n        _this.setPropertyValue(\"strictMinMax\", false);\r\n        _this.setPropertyValue(\"maxPrecision\", Number.MAX_VALUE);\r\n        _this.setPropertyValue(\"adjustLabelPrecision\", true);\r\n        _this.setPropertyValue(\"extraTooltipPrecision\", 0);\r\n        _this.keepSelection = false;\r\n        _this.includeRangesInMinMax = false;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Holds reference to a function that accepts a DataItem as parameter.\r\n     *\r\n     * It can either return a fill opacity for a fill, or manipulate data item\r\n     * directly, to create various highlighting scenarios.\r\n     */\r\n    ValueAxis.prototype.fillRule = function (dataItem) {\r\n        var value = dataItem.value;\r\n        var axis = dataItem.component;\r\n        if (!dataItem.axisFill.disabled) {\r\n            // rounding in left to solve floating point number\r\n            if ($math.round(value / axis.step / 2, 5) == Math.round(value / axis.step / 2)) {\r\n                dataItem.axisFill.__disabled = true;\r\n            }\r\n            else {\r\n                dataItem.axisFill.__disabled = false;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return Data Item\r\n     */\r\n    ValueAxis.prototype.createDataItem = function () {\r\n        return new ValueAxisDataItem();\r\n    };\r\n    /**\r\n     * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n     *\r\n     * @return Axis break\r\n     */\r\n    ValueAxis.prototype.createAxisBreak = function () {\r\n        return new ValueAxisBreak();\r\n    };\r\n    /**\r\n     * [dataChangeUpdate description]\r\n     *\r\n     * This is a placeholder to override for extending classes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    ValueAxis.prototype.dataChangeUpdate = function () {\r\n        this.clearCache();\r\n        if (!this.keepSelection) {\r\n            if (this._start != 0 || this._end != 1) {\r\n                this._start = 0;\r\n                this._end = 1;\r\n                this.dispatchImmediately(\"startendchanged\");\r\n            }\r\n        }\r\n        else {\r\n            if (this._start != 0) {\r\n                this.dispatchImmediately(\"startchanged\");\r\n            }\r\n            if (this._end != 1) {\r\n                this.dispatchImmediately(\"endchanged\");\r\n            }\r\n            if (this._start != 0 || this._end != 1) {\r\n                this.dispatchImmediately(\"startendchanged\");\r\n            }\r\n        }\r\n        this._maxZoomed = this._maxDefined;\r\n        this._minZoomed = this._minDefined;\r\n        this._maxAdjusted = this._maxDefined;\r\n        this._minAdjusted = this._minDefined;\r\n    };\r\n    /**\r\n     * Processes data items of the related Series.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ValueAxis.prototype.processSeriesDataItems = function () {\r\n        // @todo: add some boolean (maybe autodedect) if we need these calculations or not. this place uses a lot of cpu\r\n        if (this.calculateTotals) {\r\n            var series = this.series.getIndex(0);\r\n            var startIndex = series.startIndex;\r\n            if (series.dataItems.length > 0) {\r\n                if (startIndex > 0) {\r\n                    startIndex--;\r\n                }\r\n                var endIndex = series.endIndex;\r\n                if (endIndex < series.dataItems.length) {\r\n                    endIndex++;\r\n                }\r\n                var _loop_1 = function (i) {\r\n                    // This has to be `var` in order to avoid garbage collection\r\n                    var total = {};\r\n                    var sum = {};\r\n                    this_1.series.each(function (series) {\r\n                        if (!series.excludeFromTotal) {\r\n                            var dataItem_1 = series.dataItems.getIndex(i);\r\n                            if (dataItem_1) {\r\n                                $object.each(dataItem_1.values, function (key) {\r\n                                    var value = dataItem_1.values[key].workingValue; // can not use getWorkingValue here!\r\n                                    if ($type.isNumber(value)) {\r\n                                        if (!$type.isNumber(total[key])) {\r\n                                            total[key] = Math.abs(value);\r\n                                        }\r\n                                        else {\r\n                                            total[key] += Math.abs(value);\r\n                                        }\r\n                                        if (!$type.isNumber(sum[key])) {\r\n                                            sum[key] = value;\r\n                                        }\r\n                                        else {\r\n                                            sum[key] += value;\r\n                                        }\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                    });\r\n                    this_1.series.each(function (series) {\r\n                        if (!series.excludeFromTotal) {\r\n                            var dataItem_2 = series.dataItems.getIndex(i);\r\n                            if (dataItem_2) {\r\n                                $object.each(dataItem_2.values, function (key) {\r\n                                    var value = dataItem_2.values[key].workingValue; // can not use getWorkingValue here!\r\n                                    if ($type.isNumber(value)) {\r\n                                        dataItem_2.setCalculatedValue(key, total[key], \"total\");\r\n                                        dataItem_2.setCalculatedValue(key, 100 * value / total[key], \"totalPercent\");\r\n                                        dataItem_2.setCalculatedValue(key, sum[key], \"sum\");\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                    });\r\n                };\r\n                var this_1 = this;\r\n                // This has to be `var` in order to avoid garbage collection\r\n                for (var i = startIndex; i < endIndex; ++i) {\r\n                    _loop_1(i);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Validates the whole axis. Causes it to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     */\r\n    ValueAxis.prototype.validate = function () {\r\n        if (this.axisLength <= 0) {\r\n            return;\r\n        }\r\n        _super.prototype.validate.call(this);\r\n        this.getMinMax();\r\n        if (!$type.isNumber(this._minAdjusted)) {\r\n            this.dataItems.each(function (dataItem) {\r\n                dataItem.value = null;\r\n            });\r\n        }\r\n        this.fixAxisBreaks();\r\n        this.calculateZoom();\r\n        this.validateAxisElements();\r\n        this.validateAxisRanges();\r\n        this.validateBreaks();\r\n        this.hideUnusedDataItems();\r\n        this.renderer.invalidateLayout();\r\n        // hide too close\r\n        //this.hideTooCloseDataItems();\r\n    };\r\n    /**\r\n     * Calculates all positions, related to axis as per current zoom.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ValueAxis.prototype.calculateZoom = function () {\r\n        if ($type.isNumber(this.min) && $type.isNumber(this.max)) {\r\n            var min = this.positionToValue(this.start);\r\n            var max = this.positionToValue(this.end);\r\n            var differece = this.adjustDifference(min, max);\r\n            var minMaxStep = this.adjustMinMax(min, max, differece, this._gridCount, true);\r\n            var stepDecimalPlaces = $utils.decimalPlaces(minMaxStep.step);\r\n            this._stepDecimalPlaces = stepDecimalPlaces;\r\n            min = $math.round(min, stepDecimalPlaces);\r\n            max = $math.round(max, stepDecimalPlaces);\r\n            minMaxStep = this.adjustMinMax(min, max, differece, this._gridCount, true);\r\n            var step = minMaxStep.step;\r\n            if (this.syncWithAxis) {\r\n                var calculated = this.getCache(min + \"-\" + max);\r\n                if ($type.isNumber(calculated)) {\r\n                    step = calculated;\r\n                }\r\n            }\r\n            else {\r\n                min = minMaxStep.min;\r\n                max = minMaxStep.max;\r\n            }\r\n            if (this._minZoomed != min || this._maxZoomed != max || this._step != step || this._dsc) {\r\n                this._dsc = false;\r\n                this._minZoomed = min;\r\n                this._maxZoomed = max;\r\n                this._step = step;\r\n                this.dispatchImmediately(\"selectionextremeschanged\");\r\n            }\r\n        }\r\n    };\r\n    ValueAxis.prototype.fixSmallStep = function (step) {\r\n        if (1 + step == 1) {\r\n            step *= 2;\r\n            return this.fixSmallStep(step);\r\n        }\r\n        return step;\r\n    };\r\n    /**\r\n     * Validates Axis elements.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    ValueAxis.prototype.validateAxisElements = function () {\r\n        var _this = this;\r\n        if ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n            // first regular items\r\n            var value_1 = this.minZoomed - this._step * 2;\r\n            if (!this.logarithmic) {\r\n                value_1 = Math.floor(value_1 / this._step) * this._step;\r\n            }\r\n            else {\r\n                var differencePower = Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E;\r\n                if (differencePower > 1) {\r\n                    value_1 = Math.pow(10, Math.log(this.min) * Math.LOG10E);\r\n                }\r\n                else {\r\n                    value_1 = Math.floor(this.minZoomed / this._step) * this._step;\r\n                    if (value_1 == 0) {\r\n                        value_1 = this.minZoomed;\r\n                    }\r\n                }\r\n            }\r\n            var maxZoomed = this._maxZoomed + this._step;\r\n            this.resetIterators();\r\n            var dataItemsIterator_1 = this._dataItemsIterator;\r\n            if (this._step == 0) {\r\n                return;\r\n            }\r\n            this._step = this.fixSmallStep(this._step);\r\n            var i = 0;\r\n            var precisionChanged = this._prevStepDecimalPlaces != this._stepDecimalPlaces;\r\n            this._prevStepDecimalPlaces = this._stepDecimalPlaces;\r\n            while (value_1 <= maxZoomed) {\r\n                var axisBreak = this.isInBreak(value_1);\r\n                if (!axisBreak) {\r\n                    var dataItem = dataItemsIterator_1.find(function (x) { return x.value === value_1; });\r\n                    if (dataItem.__disabled) {\r\n                        dataItem.__disabled = false;\r\n                    }\r\n                    //this.processDataItem(dataItem);\r\n                    this.appendDataItem(dataItem);\r\n                    dataItem.axisBreak = undefined;\r\n                    if (dataItem.value != value_1 || precisionChanged) {\r\n                        dataItem.value = value_1;\r\n                        dataItem.text = this.formatLabel(value_1);\r\n                        if (dataItem.label && dataItem.label.invalid) {\r\n                            dataItem.label.validate();\r\n                        }\r\n                        if (dataItem.value >= this.min && dataItem.value <= this.max) {\r\n                            if (dataItem.label) {\r\n                                if ((this.axisLetter == \"Y\" && dataItem.label.measuredWidth > this.ghostLabel.measuredWidth) || (this.axisLetter == \"X\" && dataItem.label.measuredHeight > this.ghostLabel.measuredHeight)) {\r\n                                    this.ghostLabel.text = dataItem.label.currentText;\r\n                                    this.ghostLabel.validate();\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    this.validateDataElement(dataItem);\r\n                }\r\n                i++;\r\n                var oldValue = value_1;\r\n                if (!this.logarithmic) {\r\n                    value_1 += this._step;\r\n                }\r\n                else {\r\n                    var differencePower = Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E;\r\n                    if (differencePower > 1) {\r\n                        value_1 = Math.pow(10, Math.log(this.min) * Math.LOG10E + i);\r\n                    }\r\n                    else {\r\n                        value_1 += this._step;\r\n                    }\r\n                }\r\n                var stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(this._step)) * Math.LOG10E));\r\n                if (stepPower < 1) {\r\n                    // exponent is less then 1 too. Count decimals of exponent\r\n                    var decCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 2;\r\n                    decCount = Math.min(13, decCount);\r\n                    // round value to avoid floating point issues\r\n                    value_1 = $math.round(value_1, decCount);\r\n                    // ceil causes problems: https://codepen.io/team/amcharts/pen/XWMjZwy?editors=1010\r\n                    if (oldValue == value_1) {\r\n                        value_1 = maxZoomed;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            var axisBreaks = this._axisBreaks;\r\n            if (axisBreaks) {\r\n                // breaks later\r\n                var renderer_1 = this.renderer;\r\n                $iter.each(axisBreaks.iterator(), function (axisBreak) {\r\n                    if (axisBreak.breakSize > 0) {\r\n                        // only add grid if gap is bigger then minGridDistance\r\n                        if ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer_1.minGridDistance) {\r\n                            var breakValue_1 = axisBreak.adjustedMin;\r\n                            while (breakValue_1 <= axisBreak.adjustedMax) {\r\n                                if (breakValue_1 >= axisBreak.adjustedStartValue && breakValue_1 <= axisBreak.adjustedEndValue) {\r\n                                    var dataItem = dataItemsIterator_1.find(function (x) { return x.value === breakValue_1; });\r\n                                    if (dataItem.__disabled) {\r\n                                        dataItem.__disabled = false;\r\n                                    }\r\n                                    //this.processDataItem(dataItem);\r\n                                    _this.appendDataItem(dataItem);\r\n                                    dataItem.axisBreak = axisBreak;\r\n                                    if (dataItem.value != breakValue_1) {\r\n                                        dataItem.value = breakValue_1;\r\n                                        dataItem.text = _this.formatLabel(breakValue_1);\r\n                                        if (dataItem.label && dataItem.label.invalid) {\r\n                                            dataItem.label.validate();\r\n                                        }\r\n                                    }\r\n                                    _this.validateDataElement(dataItem);\r\n                                }\r\n                                breakValue_1 += axisBreak.adjustedStep;\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Validates axis data item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param dataItem  Data item\r\n     */\r\n    ValueAxis.prototype.validateDataElement = function (dataItem) {\r\n        _super.prototype.validateDataElement.call(this, dataItem);\r\n        //dataItem.__disabled = false;\r\n        dataItem.itemIndex = this._axisItemCount;\r\n        this._axisItemCount++;\r\n        var renderer = this.renderer;\r\n        var value = dataItem.value;\r\n        var endValue = dataItem.endValue;\r\n        var position = this.valueToPosition(value);\r\n        dataItem.position = position;\r\n        var endPosition = position;\r\n        var fillEndPosition = this.valueToPosition(value + this._step);\r\n        if ($type.isNumber(endValue)) {\r\n            endPosition = this.valueToPosition(endValue);\r\n            fillEndPosition = endPosition;\r\n        }\r\n        // this point is needed to calculate distance to satisfy minGridDistance\r\n        dataItem.point = renderer.positionToPoint(position);\r\n        var tick = dataItem.tick;\r\n        if (tick && !tick.disabled) {\r\n            renderer.updateTickElement(tick, position, endPosition);\r\n        }\r\n        var grid = dataItem.grid;\r\n        if (grid && !grid.disabled) {\r\n            renderer.updateGridElement(grid, position, endPosition);\r\n        }\r\n        var label = dataItem.label;\r\n        if (label && !label.disabled) {\r\n            renderer.updateLabelElement(label, position, endPosition);\r\n        }\r\n        var fill = dataItem.axisFill;\r\n        if (fill && !fill.disabled) {\r\n            renderer.updateFillElement(fill, position, fillEndPosition);\r\n            if (!dataItem.isRange) {\r\n                this.fillRule(dataItem);\r\n            }\r\n        }\r\n        if (dataItem.bullet) {\r\n            renderer.updateBullet(dataItem.bullet, position, endPosition);\r\n        }\r\n        var mask = dataItem.mask;\r\n        if (mask) {\r\n            renderer.updateFillElement(mask, position, fillEndPosition);\r\n        }\r\n    };\r\n    /**\r\n     * Formats the value according to axis' own [[NumberFormatter]].\r\n     *\r\n     * @param value  Source value\r\n     * @return Formatted value\r\n     */\r\n    ValueAxis.prototype.formatLabel = function (value) {\r\n        if (this.adjustLabelPrecision && value != 0) {\r\n            return this.numberFormatter.format(value, undefined, this._stepDecimalPlaces);\r\n        }\r\n        else {\r\n            return this.numberFormatter.format(value);\r\n        }\r\n    };\r\n    Object.defineProperty(ValueAxis.prototype, \"basePoint\", {\r\n        /**\r\n         * Coordinates of the actual axis start.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return Base point\r\n         */\r\n        get: function () {\r\n            var baseValue = this.baseValue;\r\n            var position = this.valueToPosition(baseValue);\r\n            var basePoint = this.renderer.positionToPoint(position);\r\n            return basePoint;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"baseValue\", {\r\n        /**\r\n         * @return base value\r\n         */\r\n        get: function () {\r\n            var baseValue = this._baseValue;\r\n            if (this.logarithmic) {\r\n                baseValue = this.min;\r\n            }\r\n            if (!this._adapterO) {\r\n                return baseValue;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"baseValue\", baseValue);\r\n            }\r\n        },\r\n        /**\r\n         * A base value.\r\n         *\r\n         * This is a threshold value that will divide \"positive\" and \"negative\"\r\n         * value ranges.\r\n         *\r\n         * Other scale-related functionality also depend on base value. E.g. stacks,\r\n         * value-dependent coloring, etc.\r\n         *\r\n         * @param value Base value\r\n         */\r\n        set: function (value) {\r\n            this._baseValue = value;\r\n            this.invalidateLayout();\r\n            this.invalidateSeries();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts a numeric value to relative position on axis\r\n     *\r\n     * An alias to `valueToPosition()`.\r\n     *\r\n     * @param value  Value\r\n     * @return Position\r\n     */\r\n    ValueAxis.prototype.anyToPosition = function (value) {\r\n        return this.valueToPosition(value);\r\n    };\r\n    /**\r\n     * Converts a numeric value to orientation point (x, y, angle) on axis\r\n     *\r\n     * @param value  Value\r\n     * @return Orientation point\r\n     */\r\n    ValueAxis.prototype.valueToPoint = function (value) {\r\n        var position = this.valueToPosition(value);\r\n        var point = this.renderer.positionToPoint(position);\r\n        var angle = this.renderer.positionToAngle(position);\r\n        return { x: point.x, y: point.y, angle: angle };\r\n    };\r\n    /**\r\n     * Converts a numeric value to orientation (x, y, angle) point on axis\r\n     *\r\n     * @param value  Value\r\n     * @return Orientation point\r\n     */\r\n    ValueAxis.prototype.anyToPoint = function (value) {\r\n        return this.valueToPoint(value);\r\n    };\r\n    /**\r\n     * Converts a numeric value to relative position on axis.\r\n     *\r\n     * @param value  Value\r\n     * @return relative position\r\n     */\r\n    ValueAxis.prototype.valueToPosition = function (value) {\r\n        if ($type.isNumber(value)) {\r\n            // todo: think if possible to take previous value and do not go through all previous breaks\r\n            var min_1 = this.min;\r\n            var max_1 = this.max;\r\n            if ($type.isNumber(min_1) && $type.isNumber(max_1)) {\r\n                var difference = this._difference;\r\n                var axisBreaks = this._axisBreaks;\r\n                if (axisBreaks && axisBreaks.length > 0) {\r\n                    $iter.eachContinue(axisBreaks.iterator(), function (axisBreak) {\r\n                        var startValue = axisBreak.adjustedStartValue;\r\n                        var endValue = axisBreak.adjustedEndValue;\r\n                        if ($type.isNumber(startValue) && $type.isNumber(endValue)) {\r\n                            if (value < startValue) {\r\n                                return false;\r\n                            }\r\n                            if ($math.intersect({ start: startValue, end: endValue }, { start: min_1, end: max_1 })) { // todo: check this once and set some flag in axisBreak\r\n                                startValue = Math.max(startValue, min_1);\r\n                                endValue = Math.min(endValue, max_1);\r\n                                var breakSize = axisBreak.breakSize;\r\n                                // value to the right of break end\r\n                                if (value > endValue) {\r\n                                    min_1 += (endValue - startValue) * (1 - breakSize); // todo: maybe this can be done differently?\r\n                                }\r\n                                // value to the left of break start\r\n                                else if (value < startValue) {\r\n                                }\r\n                                // value within break\r\n                                else {\r\n                                    value = startValue + (value - startValue) * breakSize;\r\n                                }\r\n                            }\r\n                        }\r\n                        return true;\r\n                    });\r\n                }\r\n                var position = void 0;\r\n                if (!this.logarithmic) {\r\n                    position = (value - min_1) / difference;\r\n                }\r\n                else {\r\n                    var treatZeroAs = this.treatZeroAs;\r\n                    if ($type.isNumber(treatZeroAs)) {\r\n                        if (value <= treatZeroAs) {\r\n                            value = treatZeroAs;\r\n                        }\r\n                    }\r\n                    position = (Math.log(value) * Math.LOG10E - Math.log(this.min) * Math.LOG10E) / ((Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E));\r\n                }\r\n                //position = $math.round(position, 10);\r\n                return position;\r\n            }\r\n        }\r\n        return 0;\r\n    };\r\n    /**\r\n     * When fontSize of fontFamily changes we need to hard-invalidate all Labels of this container to position them properly.\r\n     */\r\n    ValueAxis.prototype.invalidateLabels = function () {\r\n        _super.prototype.invalidateLabels.call(this);\r\n        if (this.dataItems) {\r\n            this.dataItems.each(function (dataItem) {\r\n                dataItem.value = undefined;\r\n            });\r\n            this.invalidate();\r\n        }\r\n    };\r\n    /**\r\n     * Converts an relative position to a corresponding value within\r\n     * axis' scale.\r\n     *\r\n     * @param position  Position (px)\r\n     * @return Value\r\n     */\r\n    ValueAxis.prototype.positionToValue = function (position) {\r\n        var min = this.min;\r\n        var max = this.max;\r\n        if ($type.isNumber(min) && $type.isNumber(max)) {\r\n            var difference_1 = max - min; //no need to adjust!\r\n            var value_2 = null;\r\n            var axisBreaks = this._axisBreaks;\r\n            if (axisBreaks) {\r\n                // in case we have some axis breaks\r\n                if (axisBreaks.length > 0) {\r\n                    $iter.eachContinue(axisBreaks.iterator(), function (axisBreak) {\r\n                        var breakStartPosition = axisBreak.startPosition;\r\n                        var breakEndPosition = axisBreak.endPosition;\r\n                        var breakStartValue = axisBreak.adjustedStartValue;\r\n                        var breakEndValue = axisBreak.adjustedEndValue;\r\n                        if ($type.isNumber(breakStartValue) && $type.isNumber(breakEndValue)) {\r\n                            if (breakStartValue > max) {\r\n                                return false;\r\n                            }\r\n                            if ($math.intersect({ start: breakStartValue, end: breakEndValue }, { start: min, end: max })) {\r\n                                breakStartValue = $math.max(breakStartValue, min);\r\n                                breakEndValue = $math.min(breakEndValue, max);\r\n                                var breakSize = axisBreak.breakSize;\r\n                                difference_1 -= (breakEndValue - breakStartValue) * (1 - breakSize);\r\n                                // position to the right of break end\r\n                                if (position > breakEndPosition) {\r\n                                    min += (breakEndValue - breakStartValue) * (1 - breakSize);\r\n                                }\r\n                                // position to the left of break start\r\n                                else if (position < breakStartPosition) {\r\n                                }\r\n                                // value within break\r\n                                else {\r\n                                    var breakPosition = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\r\n                                    value_2 = breakStartValue + breakPosition * (breakEndValue - breakStartValue);\r\n                                    return false;\r\n                                }\r\n                            }\r\n                            return true;\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            if (!$type.isNumber(value_2)) {\r\n                if (this.logarithmic) {\r\n                    value_2 = Math.pow(Math.E, (position * ((Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E)) + Math.log(this.min) * Math.LOG10E) / Math.LOG10E);\r\n                }\r\n                else {\r\n                    value_2 = position * difference_1 + min;\r\n                }\r\n            }\r\n            return value_2;\r\n        }\r\n        //}\r\n    };\r\n    /**\r\n     * Converts an X coordinate to a relative value in axis' scale.\r\n     *\r\n     * @param x  X (px)\r\n     * @return Value\r\n     */\r\n    ValueAxis.prototype.xToValue = function (x) {\r\n        return this.positionToValue(this.pointToPosition({ x: x, y: 0 }));\r\n    };\r\n    /**\r\n     * Converts an Y coordinate to a relative value in axis' scale.\r\n     *\r\n     * @param y  Y (px)\r\n     * @return Value\r\n     */\r\n    ValueAxis.prototype.yToValue = function (y) {\r\n        return this.positionToValue(this.pointToPosition({ x: 0, y: y }));\r\n    };\r\n    /**\r\n     * Converts pixel coordinates to a relative position. (0-1)\r\n     *\r\n     * @param point  Coorinates (px)\r\n     * @return Position (0-1)\r\n     */\r\n    ValueAxis.prototype.pointToPosition = function (point) {\r\n        if (this.renderer instanceof AxisRendererY) {\r\n            return 1 - this.renderer.pointToPosition(point);\r\n        }\r\n        else {\r\n            return this.renderer.pointToPosition(point);\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    ValueAxis.prototype.animateMinMax = function (min, max) {\r\n        return this.animate([{ property: \"_minAdjusted\", from: this._minAdjusted, to: min }, { property: \"_maxAdjusted\", from: this._maxAdjusted, to: max }], this.rangeChangeDuration, this.rangeChangeEasing);\r\n    };\r\n    /**\r\n     * Calculates smallest and biggest value for the axis scale.\r\n     * @ignore\r\n     * @todo Description (review)\r\n     */\r\n    ValueAxis.prototype.getMinMax = function () {\r\n        var _this = this;\r\n        this.updateGridCount();\r\n        var min = Number.POSITIVE_INFINITY;\r\n        var max = Number.NEGATIVE_INFINITY;\r\n        // only if min and max are not set from outside, we go through min and max influencers\r\n        if (!$type.isNumber(this._minDefined) || !$type.isNumber(this._maxDefined)) {\r\n            this.series.each(function (series) {\r\n                if (!series.ignoreMinMax) {\r\n                    // check min\r\n                    var seriesMin = series.min(_this);\r\n                    if ($type.isNumber(seriesMin) && (seriesMin < min)) {\r\n                        min = seriesMin;\r\n                    }\r\n                    // check max\r\n                    var seriesMax = series.max(_this);\r\n                    if ($type.isNumber(seriesMax) && (seriesMax > max)) {\r\n                        max = seriesMax;\r\n                    }\r\n                }\r\n            });\r\n            if (this.includeRangesInMinMax) {\r\n                this.axisRanges.each(function (range) {\r\n                    if (!range.ignoreMinMax) {\r\n                        var minValue = $math.min(range.value, range.endValue);\r\n                        var maxValue = $math.max(range.value, range.endValue);\r\n                        if (minValue < min || !$type.isNumber(min)) {\r\n                            min = minValue;\r\n                        }\r\n                        if (maxValue > max || !$type.isNumber(max)) {\r\n                            max = maxValue;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (this.logarithmic) {\r\n            var treatZeroAs = this.treatZeroAs;\r\n            if ($type.isNumber(treatZeroAs)) {\r\n                if (min <= 0) {\r\n                    min = treatZeroAs;\r\n                }\r\n            }\r\n            if (min <= 0) {\r\n                this.raiseCriticalError(new Error(\"Logarithmic value axis can not have values <= 0.\"), true);\r\n            }\r\n        }\r\n        if (min == 0 && max == 0) {\r\n            max = 0.9;\r\n            min = -0.9;\r\n        }\r\n        // if defined from outside\r\n        if ($type.isNumber(this._minDefined)) {\r\n            min = this._minDefined;\r\n        }\r\n        if ($type.isNumber(this._maxDefined)) {\r\n            max = this._maxDefined;\r\n        }\r\n        if (this._adapterO) {\r\n            min = this._adapterO.apply(\"min\", min);\r\n        }\r\n        if (this._adapterO) {\r\n            max = this._adapterO.apply(\"max\", max);\r\n        }\r\n        if (!$type.isNumber(min) || !$type.isNumber(max)) {\r\n            return;\r\n        }\r\n        this._minReal = min;\r\n        this._maxReal = max;\r\n        if (min == Number.POSITIVE_INFINITY) {\r\n            min = undefined;\r\n        }\r\n        if (max == Number.NEGATIVE_INFINITY) {\r\n            max = undefined;\r\n        }\r\n        var dif = this.adjustDifference(min, max); // previously it was max-min, but not worked well\r\n        min = this.fixMin(min);\r\n        max = this.fixMax(max);\r\n        // this happens if starLocation and endLocation are 0.5 and DateAxis has only one date\r\n        if (max - min <= 1 / Math.pow(10, 15)) {\r\n            if (max - min != 0) {\r\n                this._deltaMinMax = (max - min) / 2;\r\n            }\r\n            else {\r\n                // the number by which we need to raise 10 to get difference\r\n                var exponent = Math.log(Math.abs(max)) * Math.LOG10E;\r\n                // here we find a number which is power of 10 and has the same count of numbers as difference has\r\n                var power = Math.pow(10, Math.floor(exponent));\r\n                // reduce this number by 10 times\r\n                power = power / 10;\r\n                this._deltaMinMax = power;\r\n            }\r\n            min -= this._deltaMinMax;\r\n            max += this._deltaMinMax;\r\n        }\r\n        min -= (max - min) * this.extraMin;\r\n        max += (max - min) * this.extraMax;\r\n        var strict = this.strictMinMax;\r\n        if ($type.isNumber(this._maxDefined)) {\r\n            strict = true;\r\n        }\r\n        var minMaxStep = this.adjustMinMax(min, max, dif, this._gridCount, strict);\r\n        min = minMaxStep.min;\r\n        max = minMaxStep.max;\r\n        dif = max - min; //new\r\n        // do it for the second time (importat!)\r\n        minMaxStep = this.adjustMinMax(min, max, max - min, this._gridCount, true);\r\n        min = minMaxStep.min;\r\n        max = minMaxStep.max;\r\n        // return min max if strict\r\n        if (this.strictMinMax) {\r\n            if ($type.isNumber(this._minDefined)) {\r\n                min = this._minDefined;\r\n            }\r\n            else {\r\n                min = this._minReal;\r\n            }\r\n            if ($type.isNumber(this._maxDefined)) {\r\n                max = this._maxDefined;\r\n            }\r\n            else {\r\n                max = this._maxReal;\r\n            }\r\n            if (max - min <= 0.00000001) {\r\n                min -= this._deltaMinMax;\r\n                max += this._deltaMinMax;\r\n            }\r\n            min -= (max - min) * this.extraMin;\r\n            max += (max - min) * this.extraMax;\r\n        }\r\n        if (this._adapterO) {\r\n            min = this._adapterO.apply(\"min\", min);\r\n        }\r\n        if (this._adapterO) {\r\n            max = this._adapterO.apply(\"max\", max);\r\n        }\r\n        this._step = minMaxStep.step;\r\n        if (!$type.isNumber(min) && !$type.isNumber(max)) {\r\n            this.start = 0;\r\n            this.end = 1;\r\n            this.renderer.labels.each(function (label) {\r\n                label.dataItem.text = \"\";\r\n            });\r\n        }\r\n        // checking isNumber is good when all series are hidden\r\n        if ((this._minAdjusted != min || this._maxAdjusted != max) && $type.isNumber(min) && $type.isNumber(max)) {\r\n            var animation = this._minMaxAnimation;\r\n            if (this._extremesChanged && $type.isNumber(this._minAdjusted) && $type.isNumber(this._maxAdjusted) && this.inited) {\r\n                if ((animation && !animation.isFinished()) && this._finalMax == max && this._finalMin == min) {\r\n                    return;\r\n                }\r\n                else {\r\n                    this._finalMin = min;\r\n                    this._finalMax = max;\r\n                    animation = this.animateMinMax(min, max);\r\n                    if (animation && !animation.isFinished()) {\r\n                        animation.events.on(\"animationprogress\", this.validateDataItems, this);\r\n                        animation.events.on(\"animationended\", function () {\r\n                            //this.validateDataItems();\r\n                            _this.series.each(function (series) {\r\n                                series.validate();\r\n                            });\r\n                            _this.validateDataItems();\r\n                            _this.handleSelectionExtremesChange();\r\n                        });\r\n                        this._minMaxAnimation = animation;\r\n                    }\r\n                    else {\r\n                        this.series.each(function (series) {\r\n                            series.invalidate();\r\n                        });\r\n                    }\r\n                    this.validateDataItems();\r\n                    this.dispatchImmediately(\"extremeschanged\");\r\n                    this.handleSelectionExtremesChange();\r\n                }\r\n            }\r\n            else {\r\n                if ((animation && !animation.isFinished()) && this._finalMax == max && this._finalMin == min) {\r\n                    return;\r\n                }\r\n                else {\r\n                    this._minAdjusted = min;\r\n                    this._maxAdjusted = max;\r\n                    this._finalMin = min;\r\n                    this._finalMax = max;\r\n                    this.invalidateDataItems();\r\n                    this.dispatchImmediately(\"extremeschanged\");\r\n                    this._saveMinMax(min, max);\r\n                }\r\n            }\r\n        }\r\n        this._extremesChanged = false;\r\n        this._difference = this.adjustDifference(min, max);\r\n    };\r\n    /**\r\n     * Adjusts the minimum value.\r\n     *\r\n     * This is a placeholder method for extending classes to override.\r\n     *\r\n     * For numeric values this does nothing, however for more complex types, like\r\n     * dates, it may be necessary to adjust.\r\n     *\r\n     * @param value  Value\r\n     * @return Adjusted value\r\n     */\r\n    ValueAxis.prototype.fixMin = function (value) {\r\n        return value;\r\n    };\r\n    /**\r\n     * Adjusts the maximum value.\r\n     *\r\n     * This is a placeholder method for extending classes to override.\r\n     *\r\n     * For numeric values this does nothing, however for more complex types, like\r\n     * dates, it may be necessary to adjust.\r\n     *\r\n     * @param value  Value\r\n     * @return Adjusted value\r\n     */\r\n    ValueAxis.prototype.fixMax = function (value) {\r\n        return value;\r\n    };\r\n    /**\r\n     * Adjusts actual min and max scale values so that the axis starts and ends\r\n     * at \"nice\" values, unless `strictMinMax` is set.\r\n     *\r\n     * The `difference` can be something else than `max - min`, because of the\r\n     * axis breaks.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param min        [description]\r\n     * @param max        [description]\r\n     * @param difference [description]\r\n     * @param gridCount  [description]\r\n     * @param strictMode [description]\r\n     * @return [description]\r\n     */\r\n    ValueAxis.prototype.adjustMinMax = function (min, max, difference, gridCount, strictMode) {\r\n        // will fail if 0\r\n        if (gridCount <= 1) {\r\n            gridCount = 1;\r\n        }\r\n        gridCount = Math.round(gridCount);\r\n        var initialMin = min;\r\n        var initialMax = max;\r\n        // in case min and max is the same, use max\r\n        if (difference === 0) {\r\n            difference = Math.abs(max);\r\n        }\r\n        // the number by which we need to raise 10 to get difference\r\n        var exponent = Math.log(Math.abs(difference)) * Math.LOG10E;\r\n        // here we find a number which is power of 10 and has the same count of numbers as difference has\r\n        var power = Math.pow(10, Math.floor(exponent));\r\n        // reduce this number by 10 times\r\n        power = power / 10;\r\n        var extra = power;\r\n        if (strictMode) {\r\n            extra = 0;\r\n        }\r\n        if (!this.logarithmic) {\r\n            // round down min\r\n            if (strictMode) {\r\n                min = Math.floor(min / power) * power;\r\n                // round up max\r\n                max = Math.ceil(max / power) * power;\r\n            }\r\n            else {\r\n                min = Math.ceil(min / power) * power - extra;\r\n                // round up max\r\n                max = Math.floor(max / power) * power + extra;\r\n            }\r\n            // don't let min go below 0 if real min is >= 0\r\n            if (min < 0 && initialMin >= 0) {\r\n                min = 0;\r\n            }\r\n            // don't let max go above 0 if real max is <= 0\r\n            if (max > 0 && initialMax <= 0) {\r\n                max = 0;\r\n            }\r\n        }\r\n        else {\r\n            if (min <= 0) {\r\n                //throw Error(\"Logarithmic value axis can not have values <= 0.\");\r\n                min = this.baseValue;\r\n            }\r\n            // @todo: think of a better way or to restrict zooming when no series are selected\r\n            if (min == Infinity) {\r\n                min = 1;\r\n            }\r\n            if (max == -Infinity) {\r\n                max = 10;\r\n            }\r\n            if (this.strictMinMax) {\r\n                if (this._minDefined > 0) {\r\n                    min = this._minDefined;\r\n                }\r\n                else {\r\n                    min = min;\r\n                }\r\n                if (this._maxDefined > 0) {\r\n                    max = max;\r\n                }\r\n            }\r\n            else {\r\n                min = Math.pow(10, Math.floor(Math.log(Math.abs(min)) * Math.LOG10E));\r\n                max = Math.pow(10, Math.ceil(Math.log(Math.abs(max)) * Math.LOG10E));\r\n            }\r\n        }\r\n        // repeat diff, exponent and power again with rounded values\r\n        //difference = this.adjustDifference(min, max);\r\n        /*\r\n\r\n                if(min > initialMin){\r\n                    min = initialMin;\r\n                }\r\n\r\n                if(max < initialMax){\r\n                    max = initialMax;\r\n                }\r\n        */\r\n        exponent = Math.log(Math.abs(difference)) * Math.LOG10E;\r\n        power = Math.pow(10, Math.floor(exponent));\r\n        power = power / 10;\r\n        // approximate difference between two grid lines\r\n        var step = Math.ceil((difference / gridCount) / power) * power;\r\n        var stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(step)) * Math.LOG10E));\r\n        // TODO: in v3 I had fixStepE here, ommiting it for a while, need to think about other solution\r\n        // the step should divide by  2, 5, and 10.\r\n        var stepDivisor = Math.ceil(step / stepPower); // number 0 - 10\r\n        if (stepDivisor > 5) {\r\n            stepDivisor = 10;\r\n        }\r\n        else if (stepDivisor <= 5 && stepDivisor > 2) {\r\n            stepDivisor = 5;\r\n        }\r\n        // now get real step\r\n        step = Math.ceil(step / (stepPower * stepDivisor)) * stepPower * stepDivisor;\r\n        if (this.maxPrecision < Number.MAX_VALUE && step != $math.ceil(step, this.maxPrecision)) {\r\n            step = $math.ceil(step, this.maxPrecision);\r\n        }\r\n        var decCount = 0;\r\n        // in case numbers are smaller than 1\r\n        if (stepPower < 1) {\r\n            // exponent is less then 1 too. Count decimals of exponent\r\n            decCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 1;\r\n            // round step\r\n            step = $math.round(step, decCount);\r\n        }\r\n        if (!this.logarithmic) {\r\n            // final min and max\r\n            var minCount = Math.floor(min / step);\r\n            min = $math.round(step * minCount, decCount);\r\n            var maxCount = void 0;\r\n            if (!strictMode) {\r\n                maxCount = Math.ceil(max / step);\r\n            }\r\n            else {\r\n                maxCount = Math.floor(max / step);\r\n            }\r\n            if (maxCount == minCount) {\r\n                maxCount++;\r\n            }\r\n            max = $math.round(step * maxCount, decCount);\r\n            if (max < initialMax) {\r\n                max = max + step;\r\n            }\r\n            if (min > initialMin) {\r\n                min = min - step;\r\n            }\r\n        }\r\n        return { min: min, max: max, step: step };\r\n    };\r\n    Object.defineProperty(ValueAxis.prototype, \"min\", {\r\n        /**\r\n         * @return Min value\r\n         */\r\n        get: function () {\r\n            var min = this._minAdjusted;\r\n            if (!$type.isNumber(min)) {\r\n                min = this._minDefined;\r\n            }\r\n            return min;\r\n        },\r\n        /**\r\n         * A minimum value for the axis scale.\r\n         *\r\n         * This value might be auto-adjusted by the Axis in order to accomodate the\r\n         * grid nicely, i.e. plot area is divided by grid in nice equal cells.\r\n         *\r\n         * The above might be overridden by `strictMinMax` which will force exact\r\n         * user-defined min and max values to be used for scale.\r\n         *\r\n         * @param value  Min value\r\n         */\r\n        set: function (value) {\r\n            if (this._minDefined != value) {\r\n                this._minDefined = value;\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"minDefined\", {\r\n        /**\r\n         * Min value as defined by user's code, not auto-calculated.\r\n         *\r\n         * @readonly\r\n         * @return Min value\r\n         */\r\n        get: function () {\r\n            return this._minDefined;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"maxDefined\", {\r\n        /**\r\n         * Max value as defined by user's code, not auto-calculated.\r\n         *\r\n         * @readonly\r\n         * @return Man value\r\n         */\r\n        get: function () {\r\n            return this._maxDefined;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"extraMin\", {\r\n        /**\r\n         * @return {number}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"extraMin\");\r\n        },\r\n        /**\r\n         * Allows relatively adjusting minimum value of the axis' scale.\r\n         *\r\n         * The value is relative to the actual range of values currently displayed\r\n         * on the axis.\r\n         *\r\n         * E.g.: 0.5 will mean half of the current range. If we have axis displaying\r\n         * from 100 to 200, we will now have axis displaying from 50 to 200 because\r\n         * we asked to expand minimum value by 50% (0.5).\r\n         *\r\n         * NOTE: this setting is not compatible with `strictMinMax`.\r\n         *\r\n         * @param {number}\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"extraMin\", value)) {\r\n                this.invalidateDataItems();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"extraMax\", {\r\n        /**\r\n         * @return Min multiplier\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"extraMax\");\r\n        },\r\n        /**\r\n         * Allows relatively adjusting maximum value of the axis' scale.\r\n         *\r\n         * The value is relative to the actual range of values currently displayed\r\n         * on the axis.\r\n         *\r\n         * E.g.: 0.5 will mean half of the current range. If we have axis displaying\r\n         * from 100 to 200, we will now have axis displaying from 100 to 250 because\r\n         * we asked to expand maximum value by 50% (0.5).\r\n         *\r\n         * NOTE: this setting is not compatible with `strictMinMax`.\r\n         *\r\n         * @param {number}\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"extraMax\", value)) {\r\n                this.invalidateDataItems();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"step\", {\r\n        /**\r\n         * Current calculated delta in values between two adjacent grid lines (step).\r\n         *\r\n         * This is a read-only value and cannot be used to set actual step.\r\n         *\r\n         * @readonly\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/#Setting_the_density_of_the_the_grid_labels} For more information about modifying density of labels\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            return this._step;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"max\", {\r\n        /**\r\n         * @return Max value\r\n         */\r\n        get: function () {\r\n            var max = this._maxAdjusted;\r\n            if (!$type.isNumber(max)) {\r\n                max = this._maxDefined;\r\n            }\r\n            return max;\r\n        },\r\n        /**\r\n         * A maximum value for the axis scale.\r\n         *\r\n         * This value might be auto-adjusted by the Axis in order to accomodate the\r\n         * grid nicely, i.e. plot area is divided by grid in nice equal cells.\r\n         *\r\n         * The above might be overridden by `strictMinMax` which will force exact\r\n         * user-defined min and max values to be used for scale.\r\n         *\r\n         * @param value  Max value\r\n         */\r\n        set: function (value) {\r\n            if (this._maxDefined != value) {\r\n                this._maxDefined = value;\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"adjustLabelPrecision\", {\r\n        /**\r\n         * @return Adjust precision\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"adjustLabelPrecision\");\r\n        },\r\n        /**\r\n         * By default the axis will adjust precision of all numbers to match number\r\n         * of decimals in all its labels, e.g.: `1.0`, `1.5`, `2.0`.\r\n         *\r\n         * To disable set `adjustLabelPrecision` to `false`, to use whatever other\r\n         * precision or number format settings are set.\r\n         *\r\n         * IMPORTANT: This setting will be ignored if your number format uses\r\n         * modifiers, e.g. `\"#a\"`.\r\n         *\r\n         * @default true\r\n         * @since 4.9.14\r\n         * @param  value  Adjust precision\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"adjustLabelPrecision\", value)) {\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Used for the Series to register itself as the user of this Axis.\r\n     *\r\n     * This will also decorate both the Series and Axis with event handlers, used\r\n     * to redraw on Axis position/zoom change.\r\n     *\r\n     * A disposer for those events is returned, so that they can be disposed\r\n     * together with Series.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param series  Series\r\n     * @return Disposer for events\r\n     */\r\n    ValueAxis.prototype.registerSeries = function (series) {\r\n        return new MultiDisposer([\r\n            _super.prototype.registerSeries.call(this, series),\r\n            series.events.on(\"extremeschanged\", this.handleExtremesChange, this, false),\r\n            series.events.on(\"selectionextremeschanged\", this.handleSelectionExtremesChange, this, false),\r\n            this.events.on(\"extremeschanged\", series.invalidate, series, false)\r\n        ]);\r\n    };\r\n    /**\r\n     * Perform tasks after Axis zoom.\r\n     */\r\n    ValueAxis.prototype.handleSelectionExtremesChange = function () {\r\n        var _this = this;\r\n        var selectionMin;\r\n        var selectionMax;\r\n        var allHidden = true;\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            if (!series.ignoreMinMax && !series.isHidden && !series.outOfRange) {\r\n                if (series.visible && !series.isHiding) {\r\n                    allHidden = false;\r\n                }\r\n                var seriesSelectionMin = series.selectionMin(_this);\r\n                var seriesSelectionMax = series.selectionMax(_this);\r\n                if ($type.isNumber(seriesSelectionMin)) {\r\n                    if (!$type.isNumber(selectionMin) || (seriesSelectionMin < selectionMin)) {\r\n                        selectionMin = seriesSelectionMin;\r\n                    }\r\n                }\r\n                // check max\r\n                if ($type.isNumber(seriesSelectionMax)) {\r\n                    if (!$type.isNumber(selectionMax) || (seriesSelectionMax > selectionMax)) {\r\n                        selectionMax = seriesSelectionMax;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        if (this.includeRangesInMinMax) {\r\n            this.axisRanges.each(function (range) {\r\n                if (!range.ignoreMinMax) {\r\n                    var minValue = $math.min(range.value, range.endValue);\r\n                    var maxValue = $math.max(range.value, range.endValue);\r\n                    if (minValue < selectionMin) {\r\n                        selectionMin = minValue;\r\n                    }\r\n                    if (maxValue > selectionMax) {\r\n                        selectionMax = maxValue;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        // this is not good, as if date axis is initially zoomed, selection of y axis is reset to 0, 1 at the end of this method\r\n        //$iter.each(this.series.iterator(), (series) => {\r\n        //\tif (!series.appeared) {\r\n        //\t\tallHidden = true;\r\n        //\t}\r\n        //})\r\n        if ($type.isNumber(this._minDefined)) {\r\n            if (this.strictMinMax) {\r\n                selectionMin = this._minDefined;\r\n            }\r\n            else {\r\n                selectionMin = this.min;\r\n            }\r\n        }\r\n        else if (this.strictMinMax) {\r\n            selectionMin = this._minReal;\r\n        }\r\n        if ($type.isNumber(this._maxDefined)) {\r\n            if (this.strictMinMax) {\r\n                selectionMax = this._maxDefined;\r\n            }\r\n            else {\r\n                selectionMax = this.max;\r\n            }\r\n        }\r\n        else if (this.strictMinMax) {\r\n            selectionMax = this._maxReal;\r\n        }\r\n        if (selectionMin == selectionMax) {\r\n            selectionMin -= this._deltaMinMax;\r\n            selectionMax += this._deltaMinMax;\r\n            var minMaxStep2 = this.adjustMinMax(selectionMin, selectionMax, 0, this._gridCount, this.strictMinMax);\r\n            selectionMin = minMaxStep2.min;\r\n            selectionMax = minMaxStep2.max;\r\n        }\r\n        var dif = this.adjustDifference(selectionMin, selectionMax);\r\n        var minMaxStep = this.adjustMinMax(selectionMin, selectionMax, dif, this._gridCount);\r\n        selectionMin = minMaxStep.min;\r\n        selectionMax = minMaxStep.max;\r\n        selectionMin -= (selectionMax - selectionMin) * this.extraMin;\r\n        selectionMax += (selectionMax - selectionMin) * this.extraMax;\r\n        selectionMin = $math.fitToRange(selectionMin, this.min, this.max);\r\n        selectionMax = $math.fitToRange(selectionMax, this.min, this.max);\r\n        // do it for the second time !important\r\n        dif = this.adjustDifference(selectionMin, selectionMax);\r\n        minMaxStep = this.adjustMinMax(selectionMin, selectionMax, dif, this._gridCount, true);\r\n        selectionMin = minMaxStep.min;\r\n        selectionMax = minMaxStep.max;\r\n        if (this.strictMinMax) {\r\n            selectionMin = $math.max(selectionMin, this._minDefined);\r\n            selectionMax = $math.min(selectionMax, this._maxDefined);\r\n        }\r\n        var step = minMaxStep.step;\r\n        if (this.syncWithAxis) {\r\n            minMaxStep = this.syncAxes(selectionMin, selectionMax, step);\r\n            selectionMin = minMaxStep.min;\r\n            selectionMax = minMaxStep.max;\r\n            this.invalidate();\r\n        }\r\n        step = minMaxStep.step;\r\n        // needed because of grouping\r\n        this._difference = this.adjustDifference(this.min, this.max);\r\n        var start = this.valueToPosition(selectionMin);\r\n        var end = this.valueToPosition(selectionMax);\r\n        // in case all series are hidden or hiding, full zoomout\r\n        if (allHidden && !this.syncWithAxis) {\r\n            start = 0;\r\n            end = 1;\r\n        }\r\n        var declination = 0;\r\n        if (this.syncWithAxis) {\r\n            declination = 5;\r\n            this.setCache(selectionMin + \"-\" + selectionMax, step);\r\n        }\r\n        else {\r\n            if (this._step != step || this._minZoomed != selectionMin || this._maxZoomed != selectionMax) {\r\n                this._dsc = true;\r\n            }\r\n            this._step = step;\r\n            this._minZoomed = selectionMin;\r\n            this._maxZoomed = selectionMax;\r\n        }\r\n        if (!this.keepSelection) {\r\n            this.zoom({ start: start, end: end }, false, false, declination);\r\n        }\r\n    };\r\n    Object.defineProperty(ValueAxis.prototype, \"strictMinMax\", {\r\n        /**\r\n         * @return Use exact values?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"strictMinMax\");\r\n        },\r\n        /**\r\n         * Indicates whether to blindly use exact `min` and `max` values set by user\r\n         * when generating Axis scale.\r\n         *\r\n         * If not set, the Axis might slightly adjust those values to accomodate a\r\n         * better looking grid.\r\n         *\r\n         * NOTE: if `min` and `max` are not set, setting `strictMinMax` to `true`\r\n         * will result in fixing the scale of the axis to actual lowest and highest\r\n         * values in the series within currently selected scope.\r\n         *\r\n         * @default false\r\n         * @param value Use exact values?\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"strictMinMax\", value)) {\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"logarithmic\", {\r\n        /**\r\n         * @return Logarithmic scale?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"logarithmic\");\r\n        },\r\n        /**\r\n         * Indicates if this axis should use a logarithmic scale.\r\n         *\r\n         * Please note that logarithmic axis can **only** accommodate values bigger\r\n         * than zero.\r\n         *\r\n         * Having zero or negative values will result in error and failure of the\r\n         * whole chart.\r\n         *\r\n         * @param value Logarithmic scale?\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"logarithmic\", value)) {\r\n                this.invalidate();\r\n                this.series.each(function (series) {\r\n                    series.invalidateDataItems();\r\n                });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"keepSelection\", {\r\n        /**\r\n         * @return Preseve zoom after data update?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"keepSelection\");\r\n        },\r\n        /**\r\n         * Indicates if a current selection (zoom) should be kept across data updates.\r\n         *\r\n         * If your axis is zoomed while chart's data is updated, the axis will try\r\n         * to retain the same start and end values.\r\n         *\r\n         * You can also use this to initially pre-zoom axis:\r\n         *\r\n         * ```TypeScript\r\n         * axis.keepSelection = true;\r\n         * axis.start = 0.5;\r\n         * axis.end = 0.7;\r\n         * ```\r\n         * ```JavaScript\r\n         * axis.keepSelection = true;\r\n         * axis.start = 0.5;\r\n         * axis.end = 0.7;\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   \"xAxes\": [{\r\n         *     // ...\r\n         *     \"keepSelection\": true,\r\n         *     \"start\": 0.5,\r\n         *     \"end\": 0.7\r\n         *   }]\r\n         * }\r\n         * ```\r\n         *\r\n         * The above will start the chart zoomed from the middle of the actual scope\r\n         * to 70%.\r\n         *\r\n         * @since 4.1.1\r\n         * @default false\r\n         * @param  value  Preseve zoom after data update?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"keepSelection\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"includeRangesInMinMax\", {\r\n        /**\r\n         * @return Include ranges?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"includeRangesInMinMax\");\r\n        },\r\n        /**\r\n         * If set to `true`, values of axis ranges will be included when calculating\r\n         * range of values / scale of the [[ValueAxis]].\r\n         *\r\n         * @default false\r\n         * @since 4.4.9\r\n         * @param  value  Include ranges?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"includeRangesInMinMax\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"maxPrecision\", {\r\n        /**\r\n         * @return max precision\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maxPrecision\");\r\n        },\r\n        /**\r\n         * Maximum number of decimals to allow when placing grid lines and labels\r\n         * on axis.\r\n         *\r\n         * Set it to `0` (zero) to force integer-only axis labels.\r\n         *\r\n         * @param {number}\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"maxPrecision\", value)) {\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"extraTooltipPrecision\", {\r\n        /**\r\n         * @return Extra decimals\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"extraTooltipPrecision\");\r\n        },\r\n        /**\r\n         * This setting allows using bigger precision for numbers displayed in axis\r\n         * tooltip.\r\n         *\r\n         * Please note that this setting indicates additional decimal places to\r\n         * automatically-calculated axis number precision.\r\n         *\r\n         * So if your axis displays numbers like 0.1, 0.2, etc. (one decimal place),\r\n         * and you set `extraTooltipPrecision = 1`, tooltips will display numbers\r\n         * like 0.12, 0.25, etc. (two decimal places).\r\n         *\r\n         * @default 0\r\n         * @since 4.8.3\r\n         * @param  value  Extra decimals\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"extraTooltipPrecision\", value)) {\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Invalidates axis data items when series extremes change\r\n     */\r\n    ValueAxis.prototype.handleExtremesChange = function () {\r\n        var _this = this;\r\n        this._extremesChanged = true;\r\n        this.getMinMax();\r\n        if (this.ghostLabel) {\r\n            var mw_1 = 0;\r\n            this.dataItems.each(function (dataItem) {\r\n                if (dataItem.label && dataItem.label.pixelWidth > mw_1) {\r\n                    _this.ghostLabel.text = dataItem.label.currentText;\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Returns relative position on axis for series' data item's value.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param dataItem  Data item\r\n     * @param key       Data field to get value from\r\n     * @param location  Location (0-1)\r\n     * @param stackKey  ?\r\n     * @return X coordinate (px)\r\n     */\r\n    ValueAxis.prototype.getX = function (dataItem, key, location, stackKey, range) {\r\n        return this.renderer.positionToPoint(this.getPositionX(dataItem, key, location, stackKey, range)).x;\r\n    };\r\n    /**\r\n     * Returns the X coordinate for series' data item's value.\r\n     *\r\n     * @since 4.5.14\r\n     * @param  dataItem  Data item\r\n     * @param  key       Data field to get value from\r\n     * @param  location  Location (0-1)\r\n     * @param  stackKey  ?\r\n     * @return           Relative position\r\n     */\r\n    ValueAxis.prototype.getPositionX = function (dataItem, key, location, stackKey, range) {\r\n        var value = dataItem.getWorkingValue(key);\r\n        if (!$type.hasValue(stackKey)) {\r\n            stackKey = \"valueX\";\r\n        }\r\n        var stack = dataItem.getValue(stackKey, \"stack\");\r\n        if (!$type.isNumber(value)) {\r\n            value = this.baseValue;\r\n            if (this.logarithmic) {\r\n                if (stack > 0) {\r\n                    value = 0;\r\n                }\r\n            }\r\n        }\r\n        var position = this.valueToPosition(value + stack);\r\n        if (range) {\r\n            position = $math.fitToRange(position, range.start, range.end);\r\n        }\r\n        return position;\r\n    };\r\n    /**\r\n     * Returns the Y coordinate for series' data item's value.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param dataItem  Data item\r\n     * @param key       Data field to get value from\r\n     * @param location  Location (0-1)\r\n     * @param stackKey  Stack ID\r\n     * @return Y coordinate (px)\r\n     */\r\n    ValueAxis.prototype.getY = function (dataItem, key, location, stackKey, range) {\r\n        return this.renderer.positionToPoint(this.getPositionY(dataItem, key, location, stackKey, range)).y;\r\n    };\r\n    /**\r\n     * Returns relative position on axis for series' data item's value.\r\n     *\r\n     * @since 4.5.14\r\n     * @param  dataItem  Data item\r\n     * @param  key       Data field to get value from\r\n     * @param  location  Location (0-1)\r\n     * @param  stackKey  Stack ID\r\n     * @return           Relative position\r\n     */\r\n    ValueAxis.prototype.getPositionY = function (dataItem, key, location, stackKey, range) {\r\n        var value = dataItem.getWorkingValue(key);\r\n        if (!$type.hasValue(stackKey)) {\r\n            stackKey = \"valueY\";\r\n        }\r\n        var stack = dataItem.getValue(stackKey, \"stack\");\r\n        if (!$type.isNumber(value)) {\r\n            value = this.baseValue;\r\n            if (this.logarithmic) {\r\n                if (stack > 0) {\r\n                    value = 0;\r\n                }\r\n            }\r\n        }\r\n        var position = this.valueToPosition(value + stack);\r\n        if (range) {\r\n            position = $math.fitToRange(position, range.start, range.end);\r\n        }\r\n        return position;\r\n    };\r\n    /**\r\n     * Returns an angle for series data item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param dataItem  Data item\r\n     * @param key       Data field to get value from\r\n     * @param location  Location (0-1)\r\n     * @param stackKey  Stack ID\r\n     * @param range Range to fit in\r\n     * @return Angle\r\n     */\r\n    ValueAxis.prototype.getAngle = function (dataItem, key, location, stackKey, range) {\r\n        var value = dataItem.getWorkingValue(key);\r\n        var stack = dataItem.getValue(stackKey, \"stack\");\r\n        if (!$type.isNumber(value)) {\r\n            value = this.baseValue;\r\n        }\r\n        var position = this.valueToPosition(value + stack);\r\n        if (range) {\r\n            position = $math.fitToRange(position, range.start, range.end);\r\n        }\r\n        return this.positionToAngle(position);\r\n    };\r\n    /**\r\n     * [getAnyRangePath description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param start     [description]\r\n     * @param end       [description]\r\n     * @param location  [description]\r\n     * @return [description]\r\n     */\r\n    ValueAxis.prototype.getAnyRangePath = function (start, end, location) {\r\n        var startPosition = this.valueToPosition(start);\r\n        var endPosition = this.valueToPosition(end);\r\n        return this.getPositionRangePath(startPosition, endPosition); // Base class (Axis) gets range shape from AxisRenderer\r\n    };\r\n    /**\r\n     * Returns text to show in a axis tooltip, based on specific position within\r\n     * axis.\r\n     *\r\n     * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n     * chart, or explicitly for this Axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param position  Position (px)\r\n     * @return Label (numeric value)\r\n     */\r\n    ValueAxis.prototype.getTooltipText = function (position) {\r\n        var value = $math.round(this.positionToValue(position), this._stepDecimalPlaces + this.extraTooltipPrecision);\r\n        var valueStr = this.tooltip.numberFormatter.format(value);\r\n        if (!this._adapterO) {\r\n            return valueStr;\r\n        }\r\n        else {\r\n            return this._adapterO.apply(\"getTooltipText\", valueStr);\r\n        }\r\n    };\r\n    /**\r\n     * Zooms axis to specific values.\r\n     *\r\n     * @param startValue      Start value\r\n     * @param endValue        End value\r\n     * @param skipRangeEvent  Do not invoke events\r\n     * @param instantly       Do not play zoom animations\r\n     */\r\n    ValueAxis.prototype.zoomToValues = function (startValue, endValue, skipRangeEvent, instantly) {\r\n        var start = (startValue - this.min) / (this.max - this.min);\r\n        var end = (endValue - this.min) / (this.max - this.min);\r\n        this.zoom({ start: start, end: end }, skipRangeEvent, instantly);\r\n    };\r\n    Object.defineProperty(ValueAxis.prototype, \"minZoomed\", {\r\n        /**\r\n         * A smallest value in axis scale within current zoom.\r\n         *\r\n         * @return Min zoom value\r\n         */\r\n        get: function () {\r\n            if (!this.syncWithAxis) {\r\n                return $math.max(this.min, this._minZoomed);\r\n            }\r\n            else {\r\n                return this._minZoomed;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"maxZoomed\", {\r\n        /**\r\n         * A biggest value in axis scale within current zoom.\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            if (!this.syncWithAxis) {\r\n                return $math.min(this.max, this._maxZoomed);\r\n            }\r\n            else {\r\n                return this._maxZoomed;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Updates positioning of Axis breaks after something changes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ValueAxis.prototype.fixAxisBreaks = function () {\r\n        var _this = this;\r\n        _super.prototype.fixAxisBreaks.call(this);\r\n        var axisBreaks = this._axisBreaks;\r\n        if (axisBreaks && axisBreaks.length > 0) {\r\n            // process breaks\r\n            axisBreaks.each(function (axisBreak) {\r\n                var startValue = axisBreak.adjustedStartValue;\r\n                var endValue = axisBreak.adjustedEndValue;\r\n                // break difference\r\n                var axisBreakDif = endValue - startValue;\r\n                var axisBreakGridCount = Math.ceil(axisBreakDif * axisBreak.breakSize) * _this._gridCount / (_this.max - _this.min);\r\n                // calculate min, max and step for axis break\r\n                var breakMinMaxStep = _this.adjustMinMax(startValue, endValue, axisBreakDif, axisBreakGridCount, true);\r\n                axisBreak.adjustedStep = breakMinMaxStep.step;\r\n                axisBreak.adjustedMin = breakMinMaxStep.min;\r\n                axisBreak.adjustedMax = breakMinMaxStep.max;\r\n            });\r\n        }\r\n        this._difference = this.adjustDifference(this.min, this.max);\r\n    };\r\n    /**\r\n     * Returns value based on position.\r\n     *\r\n     * Please note that `position` represents position within axis which may be\r\n     * zoomed and not correspond to Cursor's `position`.\r\n     *\r\n     * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n     * @param position  Relative position on axis (0-1)\r\n     * @return Position label\r\n     */\r\n    ValueAxis.prototype.getPositionLabel = function (position) {\r\n        var value = this.positionToValue(position);\r\n        return this.numberFormatter.format(value);\r\n    };\r\n    /**\r\n     * Shows Axis tooltip at specific value\r\n     *\r\n     * @param value Value\r\n     */\r\n    ValueAxis.prototype.showTooltipAt = function (value) {\r\n        this.showTooltipAtPosition(this.valueToPosition(value));\r\n    };\r\n    /**\r\n     * Copies all properties and related data from a different instance of Axis.\r\n     *\r\n     * @param source Source Axis\r\n     */\r\n    ValueAxis.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.min = source.min;\r\n        this.max = source.max;\r\n        this.calculateTotals = source.calculateTotals;\r\n        this._baseValue = source.baseValue;\r\n    };\r\n    Object.defineProperty(ValueAxis.prototype, \"syncWithAxis\", {\r\n        /**\r\n         * @return Target axis\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"syncWithAxis\");\r\n        },\r\n        /**\r\n         * Enables syncing of grid with another axis.\r\n         *\r\n         * To enable, set to a reference of the other `ValueAxis`. This axis will try\r\n         * to maintain its scale in such way that its grid matches target axis grid.\r\n         *\r\n         * IMPORTANT #1: At this stage it's an experimental feature. Use it at your\r\n         * own risk, as it may not work in 100% of the scenarios.\r\n         *\r\n         * IMPORTANT #2: `syncWithAxis` is not compatible with `strictMinMax` and\r\n         * `sequencedInterpolation` settings.\r\n         *\r\n         * IMPORTANT #3: `syncWithAxis` is not compatible with scrollbars. Make sure\r\n         * you do not add a scrollbar in the same direction as synced axes. For\r\n         * example, if you have vertical synced axes, do not add `scrollbarY` on\r\n         * your chart. It will create anomalies when used.\r\n         *\r\n         * IMPORTANT #4: `syncWithAxis` is not compatible with `XYCursor` if it has\r\n         * its `behavior` set to either `zoomY` or `zoomXY`.\r\n         *\r\n         * @since 4.8.1\r\n         * @param  axis  Target axis\r\n         */\r\n        set: function (axis) {\r\n            var _this = this;\r\n            if (this.setPropertyValue(\"syncWithAxis\", axis, true)) {\r\n                if (axis) {\r\n                    this._disposers.push(axis.events.on(\"extremeschanged\", this.handleSelectionExtremesChange, this, false));\r\n                    this._disposers.push(axis.events.on(\"selectionextremeschanged\", this.handleSelectionExtremesChange, this, false));\r\n                    this._disposers.push(axis.events.on(\"startendchanged\", this.handleSelectionExtremesChange, this, false));\r\n                    this.events.on(\"shown\", this.handleSelectionExtremesChange, this, false);\r\n                    this.events.on(\"maxsizechanged\", function () {\r\n                        _this.clearCache();\r\n                        _this._disposers.push(registry.events.once(\"exitframe\", function () {\r\n                            _this.handleSelectionExtremesChange();\r\n                        }));\r\n                    }, this, false);\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValueAxis.prototype, \"treatZeroAs\", {\r\n        /**\r\n         * @return Zero replacement value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"treatZeroAs\");\r\n        },\r\n        /**\r\n         * If set, zero values will be treated as this value.\r\n         *\r\n         * It is useful if you need to use data with zero-values on a logarithmic\r\n         * axis scale.\r\n         *\r\n         * @since 4.9.34\r\n         * @param  value  Zero replacement value\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"treatZeroAs\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Syncs with a target axis.\r\n     *\r\n     * @param  min  Min\r\n     * @param  max  Max\r\n     * @param  step Step\r\n     */\r\n    ValueAxis.prototype.syncAxes = function (min, max, step) {\r\n        var axis = this.syncWithAxis;\r\n        if (axis) {\r\n            if (!$type.isNumber(min)) {\r\n                min = this.min;\r\n            }\r\n            if (!$type.isNumber(max)) {\r\n                max = this.max;\r\n            }\r\n            if (!$type.isNumber(step)) {\r\n                step = this._step;\r\n            }\r\n            var count = Math.round((axis.maxZoomed - axis.minZoomed) / axis.step);\r\n            var currentCount = Math.round((max - min) / step);\r\n            if ($type.isNumber(count) && $type.isNumber(currentCount)) {\r\n                var synced = false;\r\n                var c = 0;\r\n                var diff = (max - min) * 0.01;\r\n                var omin = min;\r\n                var omax = max;\r\n                var ostep = step;\r\n                while (synced != true) {\r\n                    synced = this.checkSync(omin, omax, ostep, count);\r\n                    c++;\r\n                    if (c > 1000) {\r\n                        synced = true;\r\n                    }\r\n                    if (!synced) {\r\n                        //omin = min - diff * c;\r\n                        if (c / 3 == Math.round(c / 3)) {\r\n                            omin = min - diff * c;\r\n                            if (min >= 0 && omin < 0) {\r\n                                omin = 0;\r\n                            }\r\n                        }\r\n                        else {\r\n                            omax = max + diff * c;\r\n                            if (omax <= 0 && omax > 0) {\r\n                                omax = 0;\r\n                            }\r\n                        }\r\n                        var minMaxStep = this.adjustMinMax(omin, omax, omax - omin, this._gridCount, true);\r\n                        omin = minMaxStep.min;\r\n                        omax = minMaxStep.max;\r\n                        ostep = minMaxStep.step;\r\n                    }\r\n                    else {\r\n                        min = omin;\r\n                        max = omax;\r\n                        step = ostep;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return { min: min, max: max, step: step };\r\n    };\r\n    /**\r\n     * Returns `true` if axis needs to be resunced with some other axis.\r\n     */\r\n    ValueAxis.prototype.checkSync = function (min, max, step, count) {\r\n        var currentCount = (max - min) / step;\r\n        for (var i = 1; i < count; i++) {\r\n            if ($math.round(currentCount / i, 1) == count || currentCount * i == count) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param config  Config\r\n     */\r\n    ValueAxis.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Set up axes\r\n            if ($type.hasValue(config.syncWithAxis) && $type.isString(config.syncWithAxis)) {\r\n                if (this.map.hasKey(config.syncWithAxis)) {\r\n                    config.syncWithAxis = this.map.getKey(config.syncWithAxis);\r\n                }\r\n                else {\r\n                    this.processingErrors.push(\"[ValueAxis] No axis with id \\\"\" + config.syncWithAxis + \"\\\" found for `syncWithAxis`\");\r\n                    delete config.xAxis;\r\n                }\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    ValueAxis.prototype._saveMinMax = function (_min, _max) {\r\n    };\r\n    return ValueAxis;\r\n}(Axis));\r\nexport { ValueAxis };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ValueAxis\"] = ValueAxis;\r\nregistry.registeredClasses[\"ValueAxisDataItem\"] = ValueAxisDataItem;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}