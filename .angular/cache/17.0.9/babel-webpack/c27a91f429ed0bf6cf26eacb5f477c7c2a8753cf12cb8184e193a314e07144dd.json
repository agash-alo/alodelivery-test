{"ast":null,"code":"/**\r\n * A collection of functions that deals with path calculations.\r\n */\nimport * as $math from \"../utils/Math\";\nimport * as $type from \"../utils/Type\";\nimport { getGhostPaper } from \"../rendering/Paper\";\nimport { options } from \"../Options\";\n/**\r\n * ============================================================================\r\n * PATH FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Returns an SVG path from a number of points.\r\n *\r\n * @ignore Exclude from docs\r\n * @param points  An array of line elbow points\r\n * @return SVG path\r\n */\nexport function polyline(points) {\n  var path = lineTo(points[0]);\n  var prevPoint = {\n    x: 0,\n    y: 0\n  };\n  var minStep = options.minPolylineStep;\n  if (!$type.isNumber(minStep)) {\n    minStep = 0.5;\n  }\n  for (var i = 0, len = points.length; i < len; i++) {\n    var point = points[i];\n    if ($math.getDistance(point, prevPoint) > minStep) {\n      path += lineTo(point);\n      prevPoint = point;\n    }\n  }\n  return path;\n}\n/**\r\n * Returns a starting point of an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @param point  Starting point\r\n * @return SVG path\r\n */\nexport function moveTo(point) {\n  return \" M\" + $math.round(point.x, 4) + \",\" + $math.round(point.y, 4) + \" \";\n}\n/**\r\n * Returns a line part of SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @param point  SVG path\r\n * @return SVG path\r\n */\nexport function lineTo(point) {\n  return \" L\" + $math.round(point.x, 4) + \",\" + $math.round(point.y, 4) + \" \";\n}\n/**\r\n * Returns a quadratic curve part of an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @param point         End point of the curve\r\n * @param controlPoint  Control point\r\n * @return SVG path\r\n */\nexport function quadraticCurveTo(point, controlPoint) {\n  return \" Q\" + $math.round(controlPoint.x, 4) + \",\" + $math.round(controlPoint.y, 4) + \" \" + $math.round(point.x, 4) + \",\" + $math.round(point.y, 4);\n}\n/**\r\n * Returns a cubic curve part of an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @param point          End point of the curve\r\n * @param controlPointA  Control point A\r\n * @param controlPointB  Control point B\r\n * @return SVG path\r\n */\nexport function cubicCurveTo(point, controlPointA, controlPointB) {\n  return \" C\" + $math.round(controlPointA.x, 4) + \",\" + $math.round(controlPointA.y, 4) + \" \" + $math.round(controlPointB.x, 4) + \",\" + $math.round(controlPointB.y, 4) + \" \" + $math.round(point.x, 4) + \",\" + $math.round(point.y, 4);\n}\n/**\r\n * Returns a terminator for an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @return SVG path\r\n */\nexport function closePath() {\n  return \" Z\";\n}\n/**\r\n * Returns an arc part of an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Better parameter descriptions\r\n * @param startAngle  Starting angle\r\n * @param arc         Arc\r\n * @param radius      Radius\r\n * @param radiusY     Vertical radius\r\n * @return SVG path\r\n */\nexport function arcTo(startAngle, arc, radius, radiusY) {\n  if (arc == 0) {\n    return \"\";\n  }\n  if (!$type.isNumber(radiusY)) {\n    radiusY = radius;\n  }\n  var path = \"\";\n  var c = \",\";\n  var segments = Math.ceil(Math.abs(arc) / 180);\n  var l = 1;\n  if (arc < 0) {\n    l = 0;\n  }\n  // previous, as we use a not A\n  var pax = 0;\n  var pay = 0;\n  // center\n  var cx = -$math.cos(startAngle) * radius;\n  var cy = -$math.sin(startAngle) * radiusY;\n  // foir very short angles and big radius, solves artefacts\n  if (arc < 0.5 && radius > 3000) {\n    var endAngle = startAngle + arc;\n    var ax = $math.round($math.cos(endAngle) * radius, 4);\n    var ay = $math.round($math.sin(endAngle) * radiusY, 4);\n    return lineTo({\n      x: ax,\n      y: ay\n    });\n  }\n  for (var i = 0; i < segments; i++) {\n    var endAngle = startAngle + arc / segments * (i + 1);\n    var ax = $math.round($math.cos(endAngle) * radius + cx - pax, 4);\n    var ay = $math.round($math.sin(endAngle) * radiusY + cy - pay, 4);\n    path += \" a\" + radius + c + radiusY + c + 0 + c + 0 + c + l + c + ax + c + ay;\n    pax = ax;\n    pay = ay;\n  }\n  return path;\n}\n/**\r\n * Creates an arc path.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param startAngle         [description]\r\n * @param arc                [description]\r\n * @param radius             [description]\r\n * @param innerRadius        [description]\r\n * @param radiusY            [description]\r\n * @param cornerRadius       [description]\r\n * @param innerCornerRadius  [description]\r\n * @return SVG path\r\n */\nexport function arc(startAngle, arc, radius, innerRadius, radiusY, cornerRadius, innerCornerRadius) {\n  if (arc == 0) {\n    return \"\";\n  }\n  if (!$type.isNumber(innerRadius)) {\n    innerRadius = 0;\n  }\n  if (radius == 0 && innerRadius <= 0) {\n    return \"\";\n  }\n  if (radius < innerRadius) {\n    var temp = radius;\n    radius = innerRadius;\n    innerRadius = temp;\n    if ($type.isNumber(radiusY)) {\n      radiusY = radiusY / innerRadius * radius;\n    }\n  }\n  arc = $math.min(arc, 360);\n  if (arc == 360) {\n    cornerRadius = 0;\n    innerCornerRadius = 0;\n  }\n  var endAngle = startAngle + arc;\n  var crSin = $math.sin($math.min(arc, 45) / 2);\n  radiusY = $type.isNumber(radiusY) ? radiusY : radius;\n  cornerRadius = cornerRadius || 0;\n  innerCornerRadius = $type.isNumber(innerCornerRadius) ? innerCornerRadius : cornerRadius;\n  var innerRadiusY = radiusY / radius * innerRadius;\n  var cornerRadiusY = radiusY / radius * cornerRadius;\n  var innerCornerRadiusY = radiusY / radius * innerCornerRadius;\n  cornerRadius = $math.fitToRange(cornerRadius, 0, (radius - innerRadius) / 2);\n  cornerRadiusY = $math.fitToRange(cornerRadiusY, 0, (radiusY - innerRadiusY) / 2);\n  innerCornerRadius = $math.fitToRange(innerCornerRadius, 0, (radius - innerRadius) / 2);\n  innerCornerRadiusY = $math.fitToRange(innerCornerRadiusY, 0, (radiusY - innerRadiusY) / 2);\n  cornerRadius = $math.round($math.fitToRange(cornerRadius, 0, radius * crSin), 4);\n  cornerRadiusY = $math.round($math.fitToRange(cornerRadiusY, 0, radiusY * crSin), 4);\n  innerCornerRadius = $math.round($math.fitToRange(innerCornerRadius, 0, innerRadius * crSin), 4);\n  innerCornerRadiusY = $math.round($math.fitToRange(innerCornerRadiusY, 0, innerRadiusY * crSin), 4);\n  var crAngle = Math.asin(cornerRadius / radius / 2) * $math.DEGREES * 2;\n  var crAngleY = Math.asin(cornerRadiusY / radiusY / 2) * $math.DEGREES * 2;\n  if (innerRadius < innerCornerRadius) {\n    innerRadius = innerCornerRadius;\n  }\n  if (innerRadiusY < innerCornerRadiusY) {\n    innerRadiusY = innerCornerRadiusY;\n  }\n  var crInnerAngle = Math.asin(innerCornerRadius / innerRadius / 2) * $math.DEGREES * 2;\n  var crInnerAngleY = Math.asin(innerCornerRadiusY / innerRadiusY / 2) * $math.DEGREES * 2;\n  if (!$type.isNumber(crInnerAngle)) {\n    crInnerAngle = 0;\n  }\n  if (!$type.isNumber(crInnerAngleY)) {\n    crInnerAngleY = 0;\n  }\n  var middleAngle = startAngle + arc / 2;\n  var mPoint = {\n    x: $math.round($math.cos(middleAngle) * innerRadius, 4),\n    y: $math.sin(middleAngle) * innerRadiusY\n  };\n  var a0 = {\n    x: $math.cos(startAngle) * (innerRadius + innerCornerRadius),\n    y: $math.sin(startAngle) * (innerRadiusY + innerCornerRadiusY)\n  };\n  var b0 = {\n    x: $math.cos(startAngle) * (radius - cornerRadius),\n    y: $math.sin(startAngle) * (radiusY - cornerRadiusY)\n  };\n  var c0 = {\n    x: $math.cos(endAngle) * (radius - cornerRadius),\n    y: $math.sin(endAngle) * (radiusY - cornerRadiusY)\n  };\n  var d0 = {\n    x: $math.cos(endAngle) * (innerRadius + innerCornerRadius),\n    y: $math.sin(endAngle) * (innerRadiusY + innerCornerRadiusY)\n  };\n  var b1 = {\n    x: $math.cos(startAngle + crAngle) * radius,\n    y: $math.sin(startAngle + crAngleY) * radiusY\n  };\n  var d1 = {\n    x: $math.cos(endAngle - crInnerAngle) * innerRadius,\n    y: $math.sin(endAngle - crInnerAngleY) * innerRadiusY\n  };\n  // some magic math\n  innerCornerRadius += innerCornerRadius * $math.sin(crInnerAngle / 2);\n  innerCornerRadiusY += innerCornerRadiusY * $math.sin(crInnerAngleY / 2);\n  if (crInnerAngle > (endAngle - startAngle) / 2) {\n    d1 = mPoint;\n  }\n  var path = \"\";\n  // start from b if this is full circle\n  if (arc == 360) {\n    path = moveTo(b0);\n  }\n  // otherwise start from a\n  else {\n    path = moveTo(a0);\n    path += lineTo(b0);\n    path += arcToPoint(b1, cornerRadius, cornerRadiusY, true);\n  }\n  // draw arc\n  path += arcTo(startAngle + crAngle, arc - 2 * crAngle, radius, radiusY);\n  // draw inner arc\n  if ($type.isNumber(innerRadius) && innerRadius != 0) {\n    // move to B if this is full circle\n    if (arc == 360 && cornerRadius == 0) {\n      path += moveTo(d0);\n    }\n    // draw line otherwise\n    else {\n      path += arcToPoint(c0, cornerRadius, cornerRadiusY, true);\n      path += lineTo(d0);\n      path += arcToPoint(d1, innerCornerRadius, innerCornerRadiusY, true);\n    }\n    path += arcTo(endAngle - crInnerAngle, -(arc - 2 * crInnerAngle), innerRadius, innerRadiusY);\n    if (arc < 360 || cornerRadius > 0) {\n      path += arcToPoint(a0, innerCornerRadius, innerCornerRadiusY, true);\n    }\n    path += lineTo(a0);\n  } else {\n    path += arcToPoint(c0, cornerRadius, cornerRadiusY, true);\n    if (arc < 360) {\n      path += lineTo(a0);\n    }\n  }\n  return path;\n}\n/**\r\n * Creates a path for an arc to specific coordinate.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param point         Reference point\r\n * @param radius        Radius\r\n * @param radiusY       Vertical radius (for skewed arcs)\r\n * @param sweepFlag     [description]\r\n * @param largeArcFlag  [description]\r\n * @param xAxisRotation [description]\r\n * @return Arc path\r\n */\nexport function arcToPoint(point, radius, radiusY, sweepFlag, largeArcFlag, xAxisRotation) {\n  if (radius == 0) {\n    return \"\";\n  }\n  xAxisRotation = xAxisRotation || 0;\n  largeArcFlag = Boolean(largeArcFlag);\n  sweepFlag = Boolean(sweepFlag);\n  var c = \",\";\n  var sweepFlagValue = +sweepFlag; // converts to 1 or 0\n  var largeArcFlagValue = +largeArcFlag; // converts to 1 or 0\n  return \" A\" + radius + c + radiusY + c + xAxisRotation + c + largeArcFlagValue + c + sweepFlagValue + c + $math.round(point.x, 4) + c + $math.round(point.y, 4);\n}\n/**\r\n * Creates a new rectangle.\r\n *\r\n * @ignore Exclude from docs\r\n * @param width   Width (px)\r\n * @param height  Height (px)\r\n * @param x       X position\r\n * @param y       Y position\r\n * @return Rectangle\r\n */\nexport function rectangle(width, height, x, y) {\n  if (!$type.isNumber(x)) {\n    x = 0;\n  }\n  if (!$type.isNumber(y)) {\n    y = 0;\n  }\n  return moveTo({\n    x: x,\n    y: y\n  }) + lineTo({\n    x: x + width,\n    y: y\n  }) + lineTo({\n    x: x + width,\n    y: y + height\n  }) + lineTo({\n    x: x,\n    y: y + height\n  }) + closePath();\n}\n/**\r\n * Converts a rectangle to an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @param rect  Rectangle\r\n * @param ccw   Counter-clockwise?\r\n * @return SVG path\r\n */\nexport function rectToPath(rect, ccw) {\n  var c = \",\";\n  var L = \" L\";\n  if (ccw) {\n    return \"M\" + rect.x + c + rect.y + L + rect.x + c + (rect.y + rect.height) + L + (rect.x + rect.width) + c + (rect.y + rect.height) + L + (rect.x + rect.width) + c + rect.y + L + rect.x + c + rect.y;\n  } else {\n    return \"M\" + rect.x + c + rect.y + L + (rect.x + rect.width) + c + rect.y + L + (rect.x + rect.width) + c + (rect.y + rect.height) + L + rect.x + c + (rect.y + rect.height) + L + rect.x + c + rect.y;\n  }\n}\n/**\r\n * Converts SVG path to array of points.\r\n *\r\n * Note, this is experimental feature based on method which is deprecated\r\n * on some browsers and some browsers do not support it at all.\r\n *\r\n * You can save the output of this function, but not rely on it completely.\r\n */\nexport function pathToPoints(path, pointCount) {\n  var paper = getGhostPaper();\n  var svgPath = paper.add(\"path\").node;\n  svgPath.setAttribute(\"d\", path);\n  if (svgPath.getPointAtLength && svgPath.getTotalLength) {\n    var length_1 = svgPath.getTotalLength();\n    var toPoints = [];\n    for (var i = 0; i < pointCount; i++) {\n      var point = svgPath.getPointAtLength(i / pointCount * length_1);\n      toPoints.push({\n        x: point.x,\n        y: point.y\n      });\n    }\n    return toPoints;\n  }\n  svgPath.remove();\n}\nexport function spiralPoints(cx, cy, radius, radiusY, innerRadius, step, radiusStep, startAngle, endAngle) {\n  if (!$type.isNumber(startAngle)) {\n    startAngle = 0;\n  }\n  if (!$type.isNumber(startAngle)) {\n    endAngle = startAngle;\n  }\n  var r = innerRadius + 0.01;\n  var angle = startAngle * $math.RADIANS;\n  var points = [];\n  while (r < radius + radiusStep) {\n    var stepSize = step;\n    if (stepSize / 2 > r) {\n      stepSize = 2 * r;\n    }\n    angle += 2 * Math.asin(stepSize / 2 / r);\n    if (angle * $math.DEGREES > endAngle + (radius - innerRadius) / radiusStep * 360) {\n      break;\n    }\n    var degrees = angle * $math.DEGREES;\n    var point = {\n      x: cx + r * Math.cos(angle),\n      y: cy + r * radiusY / radius * Math.sin(angle)\n    };\n    points.push(point);\n    r = innerRadius + degrees / 360 * radiusStep;\n  }\n  points.shift();\n  return points;\n}\nexport function pointsToPath(points) {\n  if (!points || points.length == 0) {\n    return \"\";\n  }\n  var path = moveTo(points[0]);\n  if (points && points.length > 0) {\n    for (var i = 1; i < points.length; i++) {\n      path += lineTo(points[i]);\n    }\n  }\n  return path;\n}","map":{"version":3,"names":["$math","$type","getGhostPaper","options","polyline","points","path","lineTo","prevPoint","x","y","minStep","minPolylineStep","isNumber","i","len","length","point","getDistance","moveTo","round","quadraticCurveTo","controlPoint","cubicCurveTo","controlPointA","controlPointB","closePath","arcTo","startAngle","arc","radius","radiusY","c","segments","Math","ceil","abs","l","pax","pay","cx","cos","cy","sin","endAngle","ax","ay","innerRadius","cornerRadius","innerCornerRadius","temp","min","crSin","innerRadiusY","cornerRadiusY","innerCornerRadiusY","fitToRange","crAngle","asin","DEGREES","crAngleY","crInnerAngle","crInnerAngleY","middleAngle","mPoint","a0","b0","c0","d0","b1","d1","arcToPoint","sweepFlag","largeArcFlag","xAxisRotation","Boolean","sweepFlagValue","largeArcFlagValue","rectangle","width","height","rectToPath","rect","ccw","L","pathToPoints","pointCount","paper","svgPath","add","node","setAttribute","getPointAtLength","getTotalLength","length_1","toPoints","push","remove","spiralPoints","step","radiusStep","r","angle","RADIANS","stepSize","degrees","shift","pointsToPath"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/rendering/Path.js"],"sourcesContent":["/**\r\n * A collection of functions that deals with path calculations.\r\n */\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\nimport { getGhostPaper } from \"../rendering/Paper\";\r\nimport { options } from \"../Options\";\r\n/**\r\n * ============================================================================\r\n * PATH FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Returns an SVG path from a number of points.\r\n *\r\n * @ignore Exclude from docs\r\n * @param points  An array of line elbow points\r\n * @return SVG path\r\n */\r\nexport function polyline(points) {\r\n    var path = lineTo(points[0]);\r\n    var prevPoint = { x: 0, y: 0 };\r\n    var minStep = options.minPolylineStep;\r\n    if (!$type.isNumber(minStep)) {\r\n        minStep = 0.5;\r\n    }\r\n    for (var i = 0, len = points.length; i < len; i++) {\r\n        var point = points[i];\r\n        if ($math.getDistance(point, prevPoint) > minStep) {\r\n            path += lineTo(point);\r\n            prevPoint = point;\r\n        }\r\n    }\r\n    return path;\r\n}\r\n/**\r\n * Returns a starting point of an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @param point  Starting point\r\n * @return SVG path\r\n */\r\nexport function moveTo(point) {\r\n    return \" M\" + $math.round(point.x, 4) + \",\" + $math.round(point.y, 4) + \" \";\r\n}\r\n/**\r\n * Returns a line part of SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @param point  SVG path\r\n * @return SVG path\r\n */\r\nexport function lineTo(point) {\r\n    return \" L\" + $math.round(point.x, 4) + \",\" + $math.round(point.y, 4) + \" \";\r\n}\r\n/**\r\n * Returns a quadratic curve part of an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @param point         End point of the curve\r\n * @param controlPoint  Control point\r\n * @return SVG path\r\n */\r\nexport function quadraticCurveTo(point, controlPoint) {\r\n    return \" Q\" + $math.round(controlPoint.x, 4)\r\n        + \",\" + $math.round(controlPoint.y, 4) + \" \" + $math.round(point.x, 4)\r\n        + \",\" + $math.round(point.y, 4);\r\n}\r\n/**\r\n * Returns a cubic curve part of an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @param point          End point of the curve\r\n * @param controlPointA  Control point A\r\n * @param controlPointB  Control point B\r\n * @return SVG path\r\n */\r\nexport function cubicCurveTo(point, controlPointA, controlPointB) {\r\n    return \" C\" + $math.round(controlPointA.x, 4)\r\n        + \",\" + $math.round(controlPointA.y, 4) + \" \" + $math.round(controlPointB.x, 4)\r\n        + \",\" + $math.round(controlPointB.y, 4) + \" \" + $math.round(point.x, 4)\r\n        + \",\" + $math.round(point.y, 4);\r\n}\r\n/**\r\n * Returns a terminator for an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @return SVG path\r\n */\r\nexport function closePath() {\r\n    return \" Z\";\r\n}\r\n/**\r\n * Returns an arc part of an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Better parameter descriptions\r\n * @param startAngle  Starting angle\r\n * @param arc         Arc\r\n * @param radius      Radius\r\n * @param radiusY     Vertical radius\r\n * @return SVG path\r\n */\r\nexport function arcTo(startAngle, arc, radius, radiusY) {\r\n    if (arc == 0) {\r\n        return \"\";\r\n    }\r\n    if (!$type.isNumber(radiusY)) {\r\n        radiusY = radius;\r\n    }\r\n    var path = \"\";\r\n    var c = \",\";\r\n    var segments = Math.ceil(Math.abs(arc) / 180);\r\n    var l = 1;\r\n    if (arc < 0) {\r\n        l = 0;\r\n    }\r\n    // previous, as we use a not A\r\n    var pax = 0;\r\n    var pay = 0;\r\n    // center\r\n    var cx = -$math.cos(startAngle) * radius;\r\n    var cy = -$math.sin(startAngle) * radiusY;\r\n    // foir very short angles and big radius, solves artefacts\r\n    if (arc < 0.5 && radius > 3000) {\r\n        var endAngle = startAngle + arc;\r\n        var ax = $math.round($math.cos(endAngle) * radius, 4);\r\n        var ay = $math.round($math.sin(endAngle) * radiusY, 4);\r\n        return lineTo({ x: ax, y: ay });\r\n    }\r\n    for (var i = 0; i < segments; i++) {\r\n        var endAngle = startAngle + arc / segments * (i + 1);\r\n        var ax = $math.round($math.cos(endAngle) * radius + cx - pax, 4);\r\n        var ay = $math.round($math.sin(endAngle) * radiusY + cy - pay, 4);\r\n        path += \" a\" + radius + c + radiusY + c + 0 + c + 0 + c + l + c + ax + c + ay;\r\n        pax = ax;\r\n        pay = ay;\r\n    }\r\n    return path;\r\n}\r\n/**\r\n * Creates an arc path.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param startAngle         [description]\r\n * @param arc                [description]\r\n * @param radius             [description]\r\n * @param innerRadius        [description]\r\n * @param radiusY            [description]\r\n * @param cornerRadius       [description]\r\n * @param innerCornerRadius  [description]\r\n * @return SVG path\r\n */\r\nexport function arc(startAngle, arc, radius, innerRadius, radiusY, cornerRadius, innerCornerRadius) {\r\n    if (arc == 0) {\r\n        return \"\";\r\n    }\r\n    if (!$type.isNumber(innerRadius)) {\r\n        innerRadius = 0;\r\n    }\r\n    if (radius == 0 && innerRadius <= 0) {\r\n        return \"\";\r\n    }\r\n    if (radius < innerRadius) {\r\n        var temp = radius;\r\n        radius = innerRadius;\r\n        innerRadius = temp;\r\n        if ($type.isNumber(radiusY)) {\r\n            radiusY = radiusY / innerRadius * radius;\r\n        }\r\n    }\r\n    arc = $math.min(arc, 360);\r\n    if (arc == 360) {\r\n        cornerRadius = 0;\r\n        innerCornerRadius = 0;\r\n    }\r\n    var endAngle = startAngle + arc;\r\n    var crSin = $math.sin($math.min(arc, 45) / 2);\r\n    radiusY = $type.isNumber(radiusY) ? radiusY : radius;\r\n    cornerRadius = cornerRadius || 0;\r\n    innerCornerRadius = $type.isNumber(innerCornerRadius) ? innerCornerRadius : cornerRadius;\r\n    var innerRadiusY = (radiusY / radius) * innerRadius;\r\n    var cornerRadiusY = (radiusY / radius) * cornerRadius;\r\n    var innerCornerRadiusY = (radiusY / radius) * innerCornerRadius;\r\n    cornerRadius = $math.fitToRange(cornerRadius, 0, (radius - innerRadius) / 2);\r\n    cornerRadiusY = $math.fitToRange(cornerRadiusY, 0, (radiusY - innerRadiusY) / 2);\r\n    innerCornerRadius = $math.fitToRange(innerCornerRadius, 0, (radius - innerRadius) / 2);\r\n    innerCornerRadiusY = $math.fitToRange(innerCornerRadiusY, 0, (radiusY - innerRadiusY) / 2);\r\n    cornerRadius = $math.round($math.fitToRange(cornerRadius, 0, radius * crSin), 4);\r\n    cornerRadiusY = $math.round($math.fitToRange(cornerRadiusY, 0, radiusY * crSin), 4);\r\n    innerCornerRadius = $math.round($math.fitToRange(innerCornerRadius, 0, innerRadius * crSin), 4);\r\n    innerCornerRadiusY = $math.round($math.fitToRange(innerCornerRadiusY, 0, innerRadiusY * crSin), 4);\r\n    var crAngle = Math.asin(cornerRadius / radius / 2) * $math.DEGREES * 2;\r\n    var crAngleY = Math.asin(cornerRadiusY / radiusY / 2) * $math.DEGREES * 2;\r\n    if (innerRadius < innerCornerRadius) {\r\n        innerRadius = innerCornerRadius;\r\n    }\r\n    if (innerRadiusY < innerCornerRadiusY) {\r\n        innerRadiusY = innerCornerRadiusY;\r\n    }\r\n    var crInnerAngle = Math.asin(innerCornerRadius / innerRadius / 2) * $math.DEGREES * 2;\r\n    var crInnerAngleY = Math.asin(innerCornerRadiusY / innerRadiusY / 2) * $math.DEGREES * 2;\r\n    if (!$type.isNumber(crInnerAngle)) {\r\n        crInnerAngle = 0;\r\n    }\r\n    if (!$type.isNumber(crInnerAngleY)) {\r\n        crInnerAngleY = 0;\r\n    }\r\n    var middleAngle = startAngle + arc / 2;\r\n    var mPoint = { x: $math.round($math.cos(middleAngle) * innerRadius, 4), y: $math.sin(middleAngle) * innerRadiusY };\r\n    var a0 = { x: $math.cos(startAngle) * (innerRadius + innerCornerRadius), y: $math.sin(startAngle) * (innerRadiusY + innerCornerRadiusY) };\r\n    var b0 = { x: $math.cos(startAngle) * (radius - cornerRadius), y: $math.sin(startAngle) * (radiusY - cornerRadiusY) };\r\n    var c0 = { x: $math.cos(endAngle) * (radius - cornerRadius), y: $math.sin(endAngle) * (radiusY - cornerRadiusY) };\r\n    var d0 = { x: $math.cos(endAngle) * (innerRadius + innerCornerRadius), y: $math.sin(endAngle) * (innerRadiusY + innerCornerRadiusY) };\r\n    var b1 = { x: $math.cos(startAngle + crAngle) * radius, y: $math.sin(startAngle + crAngleY) * radiusY };\r\n    var d1 = { x: $math.cos(endAngle - crInnerAngle) * innerRadius, y: $math.sin(endAngle - crInnerAngleY) * innerRadiusY };\r\n    // some magic math\r\n    innerCornerRadius += innerCornerRadius * $math.sin(crInnerAngle / 2);\r\n    innerCornerRadiusY += innerCornerRadiusY * $math.sin(crInnerAngleY / 2);\r\n    if (crInnerAngle > (endAngle - startAngle) / 2) {\r\n        d1 = mPoint;\r\n    }\r\n    var path = \"\";\r\n    // start from b if this is full circle\r\n    if (arc == 360) {\r\n        path = moveTo(b0);\r\n    }\r\n    // otherwise start from a\r\n    else {\r\n        path = moveTo(a0);\r\n        path += lineTo(b0);\r\n        path += arcToPoint(b1, cornerRadius, cornerRadiusY, true);\r\n    }\r\n    // draw arc\r\n    path += arcTo(startAngle + crAngle, arc - 2 * crAngle, radius, radiusY);\r\n    // draw inner arc\r\n    if ($type.isNumber(innerRadius) && innerRadius != 0) {\r\n        // move to B if this is full circle\r\n        if (arc == 360 && cornerRadius == 0) {\r\n            path += moveTo(d0);\r\n        }\r\n        // draw line otherwise\r\n        else {\r\n            path += arcToPoint(c0, cornerRadius, cornerRadiusY, true);\r\n            path += lineTo(d0);\r\n            path += arcToPoint(d1, innerCornerRadius, innerCornerRadiusY, true);\r\n        }\r\n        path += arcTo(endAngle - crInnerAngle, -(arc - 2 * crInnerAngle), innerRadius, innerRadiusY);\r\n        if (arc < 360 || cornerRadius > 0) {\r\n            path += arcToPoint(a0, innerCornerRadius, innerCornerRadiusY, true);\r\n        }\r\n        path += lineTo(a0);\r\n    }\r\n    else {\r\n        path += arcToPoint(c0, cornerRadius, cornerRadiusY, true);\r\n        if (arc < 360) {\r\n            path += lineTo(a0);\r\n        }\r\n    }\r\n    return path;\r\n}\r\n/**\r\n * Creates a path for an arc to specific coordinate.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param point         Reference point\r\n * @param radius        Radius\r\n * @param radiusY       Vertical radius (for skewed arcs)\r\n * @param sweepFlag     [description]\r\n * @param largeArcFlag  [description]\r\n * @param xAxisRotation [description]\r\n * @return Arc path\r\n */\r\nexport function arcToPoint(point, radius, radiusY, sweepFlag, largeArcFlag, xAxisRotation) {\r\n    if (radius == 0) {\r\n        return \"\";\r\n    }\r\n    xAxisRotation = xAxisRotation || 0;\r\n    largeArcFlag = Boolean(largeArcFlag);\r\n    sweepFlag = Boolean(sweepFlag);\r\n    var c = \",\";\r\n    var sweepFlagValue = +sweepFlag; // converts to 1 or 0\r\n    var largeArcFlagValue = +largeArcFlag; // converts to 1 or 0\r\n    return \" A\" + radius + c + radiusY + c + xAxisRotation + c + largeArcFlagValue + c + sweepFlagValue + c + $math.round(point.x, 4) + c + $math.round(point.y, 4);\r\n}\r\n/**\r\n * Creates a new rectangle.\r\n *\r\n * @ignore Exclude from docs\r\n * @param width   Width (px)\r\n * @param height  Height (px)\r\n * @param x       X position\r\n * @param y       Y position\r\n * @return Rectangle\r\n */\r\nexport function rectangle(width, height, x, y) {\r\n    if (!$type.isNumber(x)) {\r\n        x = 0;\r\n    }\r\n    if (!$type.isNumber(y)) {\r\n        y = 0;\r\n    }\r\n    return moveTo({ x: x, y: y }) + lineTo({ x: x + width, y: y }) + lineTo({ x: x + width, y: y + height }) + lineTo({ x: x, y: y + height }) + closePath();\r\n}\r\n/**\r\n * Converts a rectangle to an SVG path.\r\n *\r\n * @ignore Exclude from docs\r\n * @param rect  Rectangle\r\n * @param ccw   Counter-clockwise?\r\n * @return SVG path\r\n */\r\nexport function rectToPath(rect, ccw) {\r\n    var c = \",\";\r\n    var L = \" L\";\r\n    if (ccw) {\r\n        return \"M\" + rect.x\r\n            + c + rect.y + L + rect.x\r\n            + c + (rect.y + rect.height) + L + (rect.x + rect.width)\r\n            + c + (rect.y + rect.height) + L + (rect.x + rect.width)\r\n            + c + rect.y + L + rect.x\r\n            + c + rect.y;\r\n    }\r\n    else {\r\n        return \"M\" + rect.x\r\n            + c + rect.y + L + (rect.x + rect.width)\r\n            + c + rect.y + L + (rect.x + rect.width)\r\n            + c + (rect.y + rect.height) + L + rect.x\r\n            + c + (rect.y + rect.height) + L + rect.x\r\n            + c + rect.y;\r\n    }\r\n}\r\n/**\r\n * Converts SVG path to array of points.\r\n *\r\n * Note, this is experimental feature based on method which is deprecated\r\n * on some browsers and some browsers do not support it at all.\r\n *\r\n * You can save the output of this function, but not rely on it completely.\r\n */\r\nexport function pathToPoints(path, pointCount) {\r\n    var paper = getGhostPaper();\r\n    var svgPath = paper.add(\"path\").node;\r\n    svgPath.setAttribute(\"d\", path);\r\n    if (svgPath.getPointAtLength && svgPath.getTotalLength) {\r\n        var length_1 = svgPath.getTotalLength();\r\n        var toPoints = [];\r\n        for (var i = 0; i < pointCount; i++) {\r\n            var point = svgPath.getPointAtLength(i / pointCount * length_1);\r\n            toPoints.push({ x: point.x, y: point.y });\r\n        }\r\n        return toPoints;\r\n    }\r\n    svgPath.remove();\r\n}\r\nexport function spiralPoints(cx, cy, radius, radiusY, innerRadius, step, radiusStep, startAngle, endAngle) {\r\n    if (!$type.isNumber(startAngle)) {\r\n        startAngle = 0;\r\n    }\r\n    if (!$type.isNumber(startAngle)) {\r\n        endAngle = startAngle;\r\n    }\r\n    var r = innerRadius + 0.01;\r\n    var angle = startAngle * $math.RADIANS;\r\n    var points = [];\r\n    while (r < radius + radiusStep) {\r\n        var stepSize = step;\r\n        if (stepSize / 2 > r) {\r\n            stepSize = 2 * r;\r\n        }\r\n        angle += 2 * Math.asin(stepSize / 2 / r);\r\n        if (angle * $math.DEGREES > endAngle + ((radius - innerRadius) / radiusStep) * 360) {\r\n            break;\r\n        }\r\n        var degrees = angle * $math.DEGREES;\r\n        var point = { x: cx + r * Math.cos(angle), y: cy + r * radiusY / radius * Math.sin(angle) };\r\n        points.push(point);\r\n        r = innerRadius + degrees / 360 * radiusStep;\r\n    }\r\n    points.shift();\r\n    return points;\r\n}\r\nexport function pointsToPath(points) {\r\n    if (!points || points.length == 0) {\r\n        return \"\";\r\n    }\r\n    var path = moveTo(points[0]);\r\n    if (points && points.length > 0) {\r\n        for (var i = 1; i < points.length; i++) {\r\n            path += lineTo(points[i]);\r\n        }\r\n    }\r\n    return path;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}