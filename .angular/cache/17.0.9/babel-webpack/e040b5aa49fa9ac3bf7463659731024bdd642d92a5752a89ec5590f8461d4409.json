{"ast":null,"code":"/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { AxisRenderer } from \"./AxisRenderer\";\nimport { AxisFillCircular } from \"./AxisFillCircular\";\nimport { GridCircular } from \"./GridCircular\";\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\nimport { registry } from \"../../core/Registry\";\nimport { percent, Percent } from \"../../core/utils/Percent\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\nimport { AxisBullet } from \"./AxisBullet\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * A renderer for circular axis.\r\n */\nvar AxisRendererCircular = /** @class */function (_super) {\n  __extends(AxisRendererCircular, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param axis Related axis\r\n   */\n  function AxisRendererCircular() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * @ignore\r\n     */\n    _this.pixelRadiusReal = 0;\n    // axis.layout = \"none\"; // does not trigger redraw when size changes\n    _this.layout = \"none\";\n    _this.className = \"AxisRendererCircular\";\n    _this.isMeasured = false;\n    _this.startAngle = -90;\n    _this.endAngle = 270;\n    _this.useChartAngles = true;\n    _this.radius = percent(100);\n    _this.isMeasured = false;\n    _this.grid.template.location = 0;\n    _this.labels.template.location = 0;\n    _this.labels.template.radius = 15;\n    _this.ticks.template.location = 0;\n    _this.ticks.template.pixelPerfect = false;\n    _this.tooltipLocation = 0;\n    _this.line.strokeOpacity = 0;\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n  * @ignore\r\n  */\n  AxisRendererCircular.prototype.setAxis = function (axis) {\n    var _this = this;\n    _super.prototype.setAxis.call(this, axis);\n    axis.isMeasured = false;\n    // modify x and y so that tooltip would always be on circle\n    var tooltip = axis.tooltip;\n    tooltip.adapter.add(\"dx\", function (x, target) {\n      var point = $utils.svgPointToSprite({\n        x: target.pixelX,\n        y: target.pixelY\n      }, _this);\n      return _this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\n    });\n    tooltip.adapter.add(\"dy\", function (y, target) {\n      var point = $utils.svgPointToSprite({\n        x: target.pixelX,\n        y: target.pixelY\n      }, _this);\n      return _this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\n    });\n  };\n  /**\r\n   * Validates Axis renderer.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  AxisRendererCircular.prototype.validate = function () {\n    // so that radius would be updated\n    if (this.chart && this.chart.invalid) {\n      this.chart.validate();\n    }\n    _super.prototype.validate.call(this);\n  };\n  Object.defineProperty(AxisRendererCircular.prototype, \"axisLength\", {\n    /**\r\n     * Returns actual length of the Axis, in pixels.\r\n     *\r\n     * @return Length (px)\r\n     */\n    get: function () {\n      return 2 * Math.PI * this.pixelRadius;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererCircular.prototype, \"radius\", {\n    /**\r\n     * @return Outer radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n    /**\r\n     * Outer radius of the axis.\r\n     *\r\n     * Can be absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Outer radius\r\n     */\n    set: function (value) {\n      if (this.setPercentProperty(\"radius\", value, false, false, 10, false)) {\n        if (this.axis) {\n          this.axis.invalidate();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererCircular.prototype, \"pixelRadius\", {\n    /**\r\n     * Outer radius in pixels.\r\n     *\r\n     * @return Outer radius (px)\r\n     */\n    get: function () {\n      return $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererCircular.prototype, \"innerRadius\", {\n    /**\r\n     * @return Inner radius\r\n     */\n    get: function () {\n      var chart = this.chart;\n      var innerRadius = this.getPropertyValue(\"innerRadius\");\n      if (chart) {\n        if (!$type.hasValue(innerRadius)) {\n          innerRadius = chart.innerRadius;\n          if (innerRadius instanceof Percent && chart) {\n            innerRadius = percent(innerRadius.value * chart.innerRadiusModifyer * 100);\n          }\n        } else {\n          if (innerRadius instanceof Percent && chart) {\n            var mr = chart.mr;\n            var value = innerRadius.value;\n            value = Math.max(mr * value, mr - Math.min(chart.plotContainer.innerHeight, chart.plotContainer.innerWidth)) / mr;\n            innerRadius = percent(value * 100);\n          }\n        }\n        return innerRadius;\n      }\n    },\n    /**\r\n     * Inner radius of the axis.\r\n     *\r\n     * Can be absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Inner radius\r\n     */\n    set: function (value) {\n      if (this.setPercentProperty(\"innerRadius\", value, false, false, 10, false)) {\n        if (this.axis) {\n          this.axis.invalidate();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererCircular.prototype, \"useChartAngles\", {\n    /**\r\n     * @return Use chart angles\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"useChartAngles\");\n    },\n    /**\r\n     * Specifies if axis should use its own `startAngle` and `endAngle` or\r\n     * inherit them from relative properties from chart.\r\n     *\r\n     * @default false\r\n     * @param value  Use chart's angles\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"useChartAngles\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererCircular.prototype, \"pixelInnerRadius\", {\n    /**\r\n     * Inner radius in pixels.\r\n     *\r\n     * @return Inner radius (px)\r\n     */\n    get: function () {\n      return $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts relative position on axis to point coordinates.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @param position2  Position (0-1) Position on the second axis\r\n   * @return Point\r\n   */\n  AxisRendererCircular.prototype.positionToPoint = function (position, position2) {\n    if (!$type.isNumber(position2)) {\n      position2 = 1;\n    }\n    var coordinate = this.positionToCoordinate(position);\n    var angle = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\n    var radius = this.pixelRadius;\n    var innerRadius = this.pixelInnerRadius;\n    if (this.axisRendererY) {\n      var realRadius = $math.fitToRange(this.axisRendererY.positionToCoordinate(position2), 0, Infinity);\n      if (realRadius == 0) {\n        realRadius = 0.000001;\n      }\n      var point = {\n        x: realRadius * $math.cos(angle),\n        y: realRadius * $math.sin(angle)\n      };\n      return point;\n    }\n    return {\n      x: $math.cos(angle) * innerRadius + (radius - innerRadius) * $math.cos(angle) * position2,\n      y: $math.sin(angle) * innerRadius + (radius - innerRadius) * $math.sin(angle) * position2\n    };\n  };\n  /**\r\n   * Converts relative position (0-1) on axis to angle in degrees (0-360).\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @return Angle (0-360)\r\n   */\n  AxisRendererCircular.prototype.positionToAngle = function (position) {\n    var axis = this.axis;\n    var arc = (this.endAngle - this.startAngle) / (axis.end - axis.start);\n    var angle;\n    if (axis.renderer.inversed) {\n      angle = this.startAngle + (axis.end - position) * arc;\n    } else {\n      angle = this.startAngle + (position - axis.start) * arc;\n    }\n    return $math.round(angle, 3);\n  };\n  /**\r\n   * Converts angle on axis to relative position(0-1).\r\n   *\r\n   * @param angle Angle in degrees\r\n   * @return Position (0-1)\r\n   */\n  AxisRendererCircular.prototype.angleToPosition = function (angle) {\n    var axis = this.axis;\n    var arc = (this.endAngle - this.startAngle) / (axis.end - axis.start);\n    var position;\n    if (axis.renderer.inversed) {\n      position = axis.end - (angle - this.startAngle) / arc;\n    } else {\n      position = (angle - this.startAngle) / arc + axis.start;\n    }\n    return $math.round(position, 5);\n  };\n  /**\r\n   * Updates and positions the axis line element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  AxisRendererCircular.prototype.updateAxisLine = function () {\n    var radius = this.pixelRadius;\n    var startAngle = this.startAngle;\n    var endAngle = this.endAngle;\n    var arc = $math.min(360, endAngle - startAngle);\n    this.line.path = $path.moveTo({\n      x: radius * $math.cos(startAngle),\n      y: radius * $math.sin(startAngle)\n    }) + $path.arcTo(startAngle, arc, radius, radius);\n  };\n  /**\r\n   * Updates and positions a grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param grid         Grid element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n  AxisRendererCircular.prototype.updateGridElement = function (grid, position, endPosition) {\n    position = position + (endPosition - position) * grid.location;\n    var point = this.positionToPoint(position);\n    if ($type.isNumber(point.x) && $type.isNumber(point.y) && grid.element) {\n      var angle = $math.DEGREES * Math.atan2(point.y, point.x);\n      var radius = $utils.relativeRadiusToValue($type.hasValue(grid.radius) ? grid.radius : percent(100), this.pixelRadius);\n      var gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\n      grid.zIndex = 0;\n      var innerRadius = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadiusReal, true);\n      if (!$type.isNumber(innerRadius)) {\n        innerRadius = 0;\n      }\n      grid.path = $path.moveTo({\n        x: innerRadius * $math.cos(angle),\n        y: innerRadius * $math.sin(angle)\n      }) + $path.lineTo({\n        x: radius * $math.cos(angle),\n        y: radius * $math.sin(angle)\n      });\n    }\n    this.toggleVisibility(grid, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions a tick element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param tick         Tick element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n  AxisRendererCircular.prototype.updateTickElement = function (tick, position, endPosition) {\n    position = position + (endPosition - position) * tick.location;\n    var point = this.positionToPoint(position);\n    if (tick.element) {\n      var radius = this.pixelRadius;\n      var angle = $math.DEGREES * Math.atan2(point.y, point.x);\n      var tickLength = tick.length;\n      if (tick.inside) {\n        tickLength = -tickLength;\n      }\n      tick.zIndex = 1;\n      tick.path = $path.moveTo({\n        x: radius * $math.cos(angle),\n        y: radius * $math.sin(angle)\n      }) + $path.lineTo({\n        x: (radius + tickLength) * $math.cos(angle),\n        y: (radius + tickLength) * $math.sin(angle)\n      });\n    }\n    this.toggleVisibility(tick, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions axis bullet.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param bullet       AxisBullet element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n  AxisRendererCircular.prototype.updateBullet = function (bullet, position, endPosition) {\n    var location = 0.5;\n    if (bullet instanceof AxisBullet) {\n      location = bullet.location;\n    }\n    position = position + (endPosition - position) * location;\n    var point = this.positionToPoint(position);\n    var radius = this.pixelRadius;\n    var angle = $math.DEGREES * Math.atan2(point.y, point.x);\n    point = {\n      x: radius * $math.cos(angle),\n      y: radius * $math.sin(angle)\n    };\n    this.positionItem(bullet, point);\n    this.toggleVisibility(bullet, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions a label element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param label        Label element\r\n   * @param position     Starting position\r\n   * @param endPosition  Ending position\r\n   */\n  AxisRendererCircular.prototype.updateLabelElement = function (label, position, endPosition, location) {\n    if (!$type.hasValue(location)) {\n      location = label.location;\n    }\n    position = position + (endPosition - position) * location;\n    label.fixPosition(this.positionToAngle(position), this.pixelRadius);\n    label.zIndex = 2;\n    this.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\n  };\n  /**\r\n   * Checks if point is within bounds of a container.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param point Point coordinates\r\n   * @return Fits?\r\n   */\n  AxisRendererCircular.prototype.fitsToBounds = function (point) {\n    return true;\n  };\n  Object.defineProperty(AxisRendererCircular.prototype, \"startAngle\", {\n    /**\r\n     * @return Start angle\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startAngle\");\n    },\n    /**\r\n     * Start angle of the axis in degrees (0-360).\r\n     *\r\n     * @param value  Start angle\r\n     */\n    set: function (value) {\n      // do not normalize angel here!\n      if (this.setPropertyValue(\"startAngle\", value)) {\n        this.invalidateAxisItems();\n        if (this.axis) {\n          this.axis.invalidateSeries();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererCircular.prototype, \"endAngle\", {\n    /**\r\n     * @return End angle\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endAngle\");\n    },\n    /**\r\n     * End angle of the axis in degrees (0-360).\r\n     *\r\n     * @param value  End angle\r\n     */\n    set: function (value) {\n      // do not normalize angel here!\n      if (this.setPropertyValue(\"endAngle\", value)) {\n        this.invalidateAxisItems();\n        if (this.axis) {\n          this.axis.invalidateSeries();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * [getPositionRangePath description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param startPosition  Starting position\r\n   * @param endPosition    End position\r\n   * @return SVG path\r\n   */\n  AxisRendererCircular.prototype.getPositionRangePath = function (startPosition, endPosition, radius, innerRadius, cornerRadius) {\n    var path = \"\";\n    if ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\n      if (!$type.hasValue(radius)) {\n        radius = this.radius;\n      }\n      startPosition = $math.max(startPosition, this.axis.start);\n      endPosition = $math.min(endPosition, this.axis.end);\n      if (endPosition < startPosition) {\n        endPosition = startPosition;\n      }\n      var pixelRadius = $utils.relativeRadiusToValue(radius, this.pixelRadius);\n      var pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\n      var startAngle = this.positionToAngle(startPosition);\n      var endAngle = this.positionToAngle(endPosition);\n      var arc = endAngle - startAngle;\n      path = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\n    }\n    return path;\n  };\n  /**\r\n   * Returns a new grid element, suitable for this Axis Renderer type.\r\n   *\r\n   * @return Grid element\r\n   */\n  AxisRendererCircular.prototype.createGrid = function () {\n    return new GridCircular();\n  };\n  /**\r\n   * Returns a new fill element, suitable for this Axis Renderer type.\r\n   *\r\n   * @return Fill element\r\n   */\n  AxisRendererCircular.prototype.createFill = function (axis) {\n    return new AxisFillCircular(axis);\n  };\n  /**\r\n   * Returns a new label element, suitable for this Axis Renderer type.\r\n   *\r\n   * @return Label element\r\n   */\n  AxisRendererCircular.prototype.createLabel = function () {\n    return new AxisLabelCircular();\n  };\n  /**\r\n   * Converts a point at specific coordinates to a relative position (0-1)\r\n   * on the axis.\r\n   *\r\n   * @param point  Point\r\n   * @return Position (0-1)\r\n   */\n  AxisRendererCircular.prototype.pointToPosition = function (point) {\n    var angle = $math.fitAngleToRange($math.getAngle(point), this.startAngle, this.endAngle);\n    return this.coordinateToPosition((angle - this.startAngle) / 360 * this.axisLength);\n  };\n  return AxisRendererCircular;\n}(AxisRenderer);\nexport { AxisRendererCircular };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;","map":{"version":3,"names":["__extends","AxisRenderer","AxisFillCircular","GridCircular","AxisLabelCircular","registry","percent","Percent","$math","$path","$utils","$type","AxisBullet","AxisRendererCircular","_super","_this","call","pixelRadiusReal","layout","className","isMeasured","startAngle","endAngle","useChartAngles","radius","grid","template","location","labels","ticks","pixelPerfect","tooltipLocation","line","strokeOpacity","applyTheme","prototype","setAxis","axis","tooltip","adapter","add","x","target","point","svgPointToSprite","pixelX","y","pixelY","pixelRadius","Math","cos","atan2","sin","validate","chart","invalid","Object","defineProperty","get","PI","enumerable","configurable","getPropertyValue","set","value","setPercentProperty","invalidate","relativeRadiusToValue","innerRadius","hasValue","innerRadiusModifyer","mr","max","min","plotContainer","innerHeight","innerWidth","setPropertyValue","positionToPoint","position","position2","isNumber","coordinate","positionToCoordinate","angle","axisLength","pixelInnerRadius","axisRendererY","realRadius","fitToRange","Infinity","positionToAngle","arc","end","start","renderer","inversed","round","angleToPosition","updateAxisLine","path","moveTo","arcTo","updateGridElement","endPosition","element","DEGREES","gridInnerRadius","zIndex","lineTo","toggleVisibility","updateTickElement","tick","tickLength","length","inside","updateBullet","bullet","positionItem","updateLabelElement","label","fixPosition","minLabelPosition","maxLabelPosition","fitsToBounds","invalidateAxisItems","invalidateSeries","getPositionRangePath","startPosition","cornerRadius","createGrid","createFill","createLabel","pointToPosition","fitAngleToRange","getAngle","coordinateToPosition","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/charts/axes/AxisRendererCircular.js"],"sourcesContent":["/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisFillCircular } from \"./AxisFillCircular\";\r\nimport { GridCircular } from \"./GridCircular\";\r\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A renderer for circular axis.\r\n */\r\nvar AxisRendererCircular = /** @class */ (function (_super) {\r\n    __extends(AxisRendererCircular, _super);\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param axis Related axis\r\n     */\r\n    function AxisRendererCircular() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * @ignore\r\n         */\r\n        _this.pixelRadiusReal = 0;\r\n        // axis.layout = \"none\"; // does not trigger redraw when size changes\r\n        _this.layout = \"none\";\r\n        _this.className = \"AxisRendererCircular\";\r\n        _this.isMeasured = false;\r\n        _this.startAngle = -90;\r\n        _this.endAngle = 270;\r\n        _this.useChartAngles = true;\r\n        _this.radius = percent(100);\r\n        _this.isMeasured = false;\r\n        _this.grid.template.location = 0;\r\n        _this.labels.template.location = 0;\r\n        _this.labels.template.radius = 15;\r\n        _this.ticks.template.location = 0;\r\n        _this.ticks.template.pixelPerfect = false;\r\n        _this.tooltipLocation = 0;\r\n        _this.line.strokeOpacity = 0;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n    * @ignore\r\n    */\r\n    AxisRendererCircular.prototype.setAxis = function (axis) {\r\n        var _this = this;\r\n        _super.prototype.setAxis.call(this, axis);\r\n        axis.isMeasured = false;\r\n        // modify x and y so that tooltip would always be on circle\r\n        var tooltip = axis.tooltip;\r\n        tooltip.adapter.add(\"dx\", function (x, target) {\r\n            var point = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, _this);\r\n            return _this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\r\n        });\r\n        tooltip.adapter.add(\"dy\", function (y, target) {\r\n            var point = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, _this);\r\n            return _this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\r\n        });\r\n    };\r\n    /**\r\n     * Validates Axis renderer.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererCircular.prototype.validate = function () {\r\n        // so that radius would be updated\r\n        if (this.chart && this.chart.invalid) {\r\n            this.chart.validate();\r\n        }\r\n        _super.prototype.validate.call(this);\r\n    };\r\n    Object.defineProperty(AxisRendererCircular.prototype, \"axisLength\", {\r\n        /**\r\n         * Returns actual length of the Axis, in pixels.\r\n         *\r\n         * @return Length (px)\r\n         */\r\n        get: function () {\r\n            return 2 * Math.PI * this.pixelRadius;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererCircular.prototype, \"radius\", {\r\n        /**\r\n         * @return Outer radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Outer radius of the axis.\r\n         *\r\n         * Can be absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param value  Outer radius\r\n         */\r\n        set: function (value) {\r\n            if (this.setPercentProperty(\"radius\", value, false, false, 10, false)) {\r\n                if (this.axis) {\r\n                    this.axis.invalidate();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererCircular.prototype, \"pixelRadius\", {\r\n        /**\r\n         * Outer radius in pixels.\r\n         *\r\n         * @return Outer radius (px)\r\n         */\r\n        get: function () {\r\n            return $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererCircular.prototype, \"innerRadius\", {\r\n        /**\r\n         * @return Inner radius\r\n         */\r\n        get: function () {\r\n            var chart = this.chart;\r\n            var innerRadius = this.getPropertyValue(\"innerRadius\");\r\n            if (chart) {\r\n                if (!$type.hasValue(innerRadius)) {\r\n                    innerRadius = chart.innerRadius;\r\n                    if (innerRadius instanceof Percent && chart) {\r\n                        innerRadius = percent(innerRadius.value * chart.innerRadiusModifyer * 100);\r\n                    }\r\n                }\r\n                else {\r\n                    if (innerRadius instanceof Percent && chart) {\r\n                        var mr = chart.mr;\r\n                        var value = innerRadius.value;\r\n                        value = Math.max(mr * value, mr - Math.min(chart.plotContainer.innerHeight, chart.plotContainer.innerWidth)) / mr;\r\n                        innerRadius = percent(value * 100);\r\n                    }\r\n                }\r\n                return innerRadius;\r\n            }\r\n        },\r\n        /**\r\n         * Inner radius of the axis.\r\n         *\r\n         * Can be absolute (px) or relative ([[Percent]]).\r\n         *\r\n         * @param value  Inner radius\r\n         */\r\n        set: function (value) {\r\n            if (this.setPercentProperty(\"innerRadius\", value, false, false, 10, false)) {\r\n                if (this.axis) {\r\n                    this.axis.invalidate();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererCircular.prototype, \"useChartAngles\", {\r\n        /**\r\n         * @return Use chart angles\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"useChartAngles\");\r\n        },\r\n        /**\r\n         * Specifies if axis should use its own `startAngle` and `endAngle` or\r\n         * inherit them from relative properties from chart.\r\n         *\r\n         * @default false\r\n         * @param value  Use chart's angles\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"useChartAngles\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererCircular.prototype, \"pixelInnerRadius\", {\r\n        /**\r\n         * Inner radius in pixels.\r\n         *\r\n         * @return Inner radius (px)\r\n         */\r\n        get: function () {\r\n            return $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts relative position on axis to point coordinates.\r\n     *\r\n     * @param position  Position (0-1)\r\n     * @param position2  Position (0-1) Position on the second axis\r\n     * @return Point\r\n     */\r\n    AxisRendererCircular.prototype.positionToPoint = function (position, position2) {\r\n        if (!$type.isNumber(position2)) {\r\n            position2 = 1;\r\n        }\r\n        var coordinate = this.positionToCoordinate(position);\r\n        var angle = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\r\n        var radius = this.pixelRadius;\r\n        var innerRadius = this.pixelInnerRadius;\r\n        if (this.axisRendererY) {\r\n            var realRadius = $math.fitToRange(this.axisRendererY.positionToCoordinate(position2), 0, Infinity);\r\n            if (realRadius == 0) {\r\n                realRadius = 0.000001;\r\n            }\r\n            var point = { x: realRadius * $math.cos(angle), y: realRadius * $math.sin(angle) };\r\n            return point;\r\n        }\r\n        return { x: $math.cos(angle) * innerRadius + (radius - innerRadius) * $math.cos(angle) * position2, y: $math.sin(angle) * innerRadius + (radius - innerRadius) * $math.sin(angle) * position2 };\r\n    };\r\n    /**\r\n     * Converts relative position (0-1) on axis to angle in degrees (0-360).\r\n     *\r\n     * @param position  Position (0-1)\r\n     * @return Angle (0-360)\r\n     */\r\n    AxisRendererCircular.prototype.positionToAngle = function (position) {\r\n        var axis = this.axis;\r\n        var arc = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n        var angle;\r\n        if (axis.renderer.inversed) {\r\n            angle = this.startAngle + (axis.end - position) * arc;\r\n        }\r\n        else {\r\n            angle = this.startAngle + (position - axis.start) * arc;\r\n        }\r\n        return $math.round(angle, 3);\r\n    };\r\n    /**\r\n     * Converts angle on axis to relative position(0-1).\r\n     *\r\n     * @param angle Angle in degrees\r\n     * @return Position (0-1)\r\n     */\r\n    AxisRendererCircular.prototype.angleToPosition = function (angle) {\r\n        var axis = this.axis;\r\n        var arc = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n        var position;\r\n        if (axis.renderer.inversed) {\r\n            position = axis.end - (angle - this.startAngle) / arc;\r\n        }\r\n        else {\r\n            position = (angle - this.startAngle) / arc + axis.start;\r\n        }\r\n        return $math.round(position, 5);\r\n    };\r\n    /**\r\n     * Updates and positions the axis line element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererCircular.prototype.updateAxisLine = function () {\r\n        var radius = this.pixelRadius;\r\n        var startAngle = this.startAngle;\r\n        var endAngle = this.endAngle;\r\n        var arc = $math.min(360, endAngle - startAngle);\r\n        this.line.path = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius, radius);\r\n    };\r\n    /**\r\n     * Updates and positions a grid element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param grid         Grid element\r\n     * @param position     Starting position\r\n     * @param endPosition  End position\r\n     */\r\n    AxisRendererCircular.prototype.updateGridElement = function (grid, position, endPosition) {\r\n        position = position + (endPosition - position) * grid.location;\r\n        var point = this.positionToPoint(position);\r\n        if ($type.isNumber(point.x) && $type.isNumber(point.y) && grid.element) {\r\n            var angle = $math.DEGREES * Math.atan2(point.y, point.x);\r\n            var radius = $utils.relativeRadiusToValue($type.hasValue(grid.radius) ? grid.radius : percent(100), this.pixelRadius);\r\n            var gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\r\n            grid.zIndex = 0;\r\n            var innerRadius = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadiusReal, true);\r\n            if (!$type.isNumber(innerRadius)) {\r\n                innerRadius = 0;\r\n            }\r\n            grid.path = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n        }\r\n        this.toggleVisibility(grid, position, 0, 1);\r\n    };\r\n    /**\r\n     * Updates and positions a tick element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param tick         Tick element\r\n     * @param position     Starting position\r\n     * @param endPosition  End position\r\n     */\r\n    AxisRendererCircular.prototype.updateTickElement = function (tick, position, endPosition) {\r\n        position = position + (endPosition - position) * tick.location;\r\n        var point = this.positionToPoint(position);\r\n        if (tick.element) {\r\n            var radius = this.pixelRadius;\r\n            var angle = $math.DEGREES * Math.atan2(point.y, point.x);\r\n            var tickLength = tick.length;\r\n            if (tick.inside) {\r\n                tickLength = -tickLength;\r\n            }\r\n            tick.zIndex = 1;\r\n            tick.path = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) + $path.lineTo({ x: (radius + tickLength) * $math.cos(angle), y: (radius + tickLength) * $math.sin(angle) });\r\n        }\r\n        this.toggleVisibility(tick, position, 0, 1);\r\n    };\r\n    /**\r\n     * Updates and positions axis bullet.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param bullet       AxisBullet element\r\n     * @param position     Starting position\r\n     * @param endPosition  End position\r\n     */\r\n    AxisRendererCircular.prototype.updateBullet = function (bullet, position, endPosition) {\r\n        var location = 0.5;\r\n        if (bullet instanceof AxisBullet) {\r\n            location = bullet.location;\r\n        }\r\n        position = position + (endPosition - position) * location;\r\n        var point = this.positionToPoint(position);\r\n        var radius = this.pixelRadius;\r\n        var angle = $math.DEGREES * Math.atan2(point.y, point.x);\r\n        point = { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n        this.positionItem(bullet, point);\r\n        this.toggleVisibility(bullet, position, 0, 1);\r\n    };\r\n    /**\r\n     * Updates and positions a label element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param label        Label element\r\n     * @param position     Starting position\r\n     * @param endPosition  Ending position\r\n     */\r\n    AxisRendererCircular.prototype.updateLabelElement = function (label, position, endPosition, location) {\r\n        if (!$type.hasValue(location)) {\r\n            location = label.location;\r\n        }\r\n        position = position + (endPosition - position) * location;\r\n        label.fixPosition(this.positionToAngle(position), this.pixelRadius);\r\n        label.zIndex = 2;\r\n        this.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n    };\r\n    /**\r\n     * Checks if point is within bounds of a container.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param point Point coordinates\r\n     * @return Fits?\r\n     */\r\n    AxisRendererCircular.prototype.fitsToBounds = function (point) {\r\n        return true;\r\n    };\r\n    Object.defineProperty(AxisRendererCircular.prototype, \"startAngle\", {\r\n        /**\r\n         * @return Start angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startAngle\");\r\n        },\r\n        /**\r\n         * Start angle of the axis in degrees (0-360).\r\n         *\r\n         * @param value  Start angle\r\n         */\r\n        set: function (value) {\r\n            // do not normalize angel here!\r\n            if (this.setPropertyValue(\"startAngle\", value)) {\r\n                this.invalidateAxisItems();\r\n                if (this.axis) {\r\n                    this.axis.invalidateSeries();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisRendererCircular.prototype, \"endAngle\", {\r\n        /**\r\n         * @return End angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endAngle\");\r\n        },\r\n        /**\r\n         * End angle of the axis in degrees (0-360).\r\n         *\r\n         * @param value  End angle\r\n         */\r\n        set: function (value) {\r\n            // do not normalize angel here!\r\n            if (this.setPropertyValue(\"endAngle\", value)) {\r\n                this.invalidateAxisItems();\r\n                if (this.axis) {\r\n                    this.axis.invalidateSeries();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * [getPositionRangePath description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param startPosition  Starting position\r\n     * @param endPosition    End position\r\n     * @return SVG path\r\n     */\r\n    AxisRendererCircular.prototype.getPositionRangePath = function (startPosition, endPosition, radius, innerRadius, cornerRadius) {\r\n        var path = \"\";\r\n        if ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\r\n            if (!$type.hasValue(radius)) {\r\n                radius = this.radius;\r\n            }\r\n            startPosition = $math.max(startPosition, this.axis.start);\r\n            endPosition = $math.min(endPosition, this.axis.end);\r\n            if (endPosition < startPosition) {\r\n                endPosition = startPosition;\r\n            }\r\n            var pixelRadius = $utils.relativeRadiusToValue(radius, this.pixelRadius);\r\n            var pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\r\n            var startAngle = this.positionToAngle(startPosition);\r\n            var endAngle = this.positionToAngle(endPosition);\r\n            var arc = endAngle - startAngle;\r\n            path = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\r\n        }\r\n        return path;\r\n    };\r\n    /**\r\n     * Returns a new grid element, suitable for this Axis Renderer type.\r\n     *\r\n     * @return Grid element\r\n     */\r\n    AxisRendererCircular.prototype.createGrid = function () {\r\n        return new GridCircular();\r\n    };\r\n    /**\r\n     * Returns a new fill element, suitable for this Axis Renderer type.\r\n     *\r\n     * @return Fill element\r\n     */\r\n    AxisRendererCircular.prototype.createFill = function (axis) {\r\n        return new AxisFillCircular(axis);\r\n    };\r\n    /**\r\n     * Returns a new label element, suitable for this Axis Renderer type.\r\n     *\r\n     * @return Label element\r\n     */\r\n    AxisRendererCircular.prototype.createLabel = function () {\r\n        return new AxisLabelCircular();\r\n    };\r\n    /**\r\n     * Converts a point at specific coordinates to a relative position (0-1)\r\n     * on the axis.\r\n     *\r\n     * @param point  Point\r\n     * @return Position (0-1)\r\n     */\r\n    AxisRendererCircular.prototype.pointToPosition = function (point) {\r\n        var angle = $math.fitAngleToRange($math.getAngle(point), this.startAngle, this.endAngle);\r\n        return this.coordinateToPosition((angle - this.startAngle) / 360 * this.axisLength);\r\n    };\r\n    return AxisRendererCircular;\r\n}(AxisRenderer));\r\nexport { AxisRendererCircular };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}