{"ast":null,"code":"/**\r\n * FlowDiagram module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Chart, ChartDataItem } from \"../Chart\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\nimport { Container } from \"../../core/Container\";\nimport { registry } from \"../../core/Registry\";\nimport { FlowDiagramNode } from \"../elements/FlowDiagramNode\";\nimport { FlowDiagramLink } from \"../elements/FlowDiagramLink\";\nimport { LinearGradientModifier } from \"../../core/rendering/fills/LinearGradientModifier\";\nimport { ColorSet } from \"../../core/utils/ColorSet\";\nimport { toColor, Color } from \"../../core/utils/Color\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $number from \"../../core/utils/Number\";\nimport * as $order from \"../../core/utils/Order\";\nimport { Disposer } from \"../../core/utils/Disposer\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n//@todo rearange notes after dragged\n/**\r\n * Defines a [[DataItem]] for [[FlowDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar FlowDiagramDataItem = /** @class */function (_super) {\n  __extends(FlowDiagramDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function FlowDiagramDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"FlowDiagramDataItem\";\n    _this.values.value = {};\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(FlowDiagramDataItem.prototype, \"fromName\", {\n    /**\r\n     * @return name\r\n     */\n    get: function () {\n      return this.properties.fromName;\n    },\n    /**\r\n     * Source node's name.\r\n     *\r\n     * @param value  Name\r\n     */\n    set: function (value) {\n      this.setProperty(\"fromName\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramDataItem.prototype, \"toName\", {\n    /**\r\n     * @return name\r\n     */\n    get: function () {\n      return this.properties.toName;\n    },\n    /**\r\n     * Destination node's name.\r\n     *\r\n     * @param value  Name\r\n     */\n    set: function (value) {\n      this.setProperty(\"toName\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramDataItem.prototype, \"color\", {\n    /**\r\n     * @return color\r\n     */\n    get: function () {\n      return this.properties.color;\n    },\n    /**\r\n     * Node color\r\n     *\r\n     * @param value  Name\r\n     */\n    set: function (value) {\n      this.setProperty(\"color\", toColor(value));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramDataItem.prototype, \"value\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      return this.values.value.value;\n    },\n    /**\r\n     * Link's value.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function (value) {\n      this.setValue(\"value\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramDataItem.prototype, \"link\", {\n    /**\r\n     * A visual element, representing link between the source and target nodes.\r\n     *\r\n     * Link's actual thickness will be determined by `value` of this link and\r\n     * `value` of the source node.\r\n     *\r\n     * @readonly\r\n     * @return Link element\r\n     */\n    get: function () {\n      var _this = this;\n      if (!this._link) {\n        var link_1 = this.component.links.create();\n        this._link = link_1;\n        this.addSprite(link_1);\n        this._disposers.push(new Disposer(function () {\n          if (_this.component) {\n            _this.component.links.removeValue(link_1);\n          }\n        }));\n      }\n      return this._link;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return FlowDiagramDataItem;\n}(ChartDataItem);\nexport { FlowDiagramDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Creates a Pie chart\r\n * @see {@link IFlowDiagramEvents} for a list of available Events\r\n * @see {@link IFlowDiagramAdapters} for a list of available Adapters\r\n * @important\r\n */\nvar FlowDiagram = /** @class */function (_super) {\n  __extends(FlowDiagram, _super);\n  /**\r\n   * Constructor\r\n   */\n  function FlowDiagram() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * A Color Set to use when applying/generating colors for each subsequent\r\n     * node.\r\n     */\n    _this.colors = new ColorSet();\n    _this.className = \"FlowDiagram\";\n    _this.nodePadding = 20;\n    _this.sortBy = \"none\";\n    _this.sequencedInterpolation = true;\n    _this.colors.step = 2;\n    _this.minNodeSize = 0.02;\n    var linksContainer = _this.chartContainer.createChild(Container);\n    linksContainer.shouldClone = false;\n    linksContainer.layout = \"none\";\n    linksContainer.isMeasured = false;\n    _this.linksContainer = linksContainer;\n    var nodesContainer = _this.chartContainer.createChild(Container);\n    nodesContainer.shouldClone = false;\n    nodesContainer.layout = \"none\";\n    nodesContainer.isMeasured = false;\n    _this.nodesContainer = nodesContainer;\n    // this data item holds sums, averages, etc\n    _this.dataItem = _this.createDataItem();\n    _this.dataItem.component = _this;\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  FlowDiagram.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n    this.dataItem.dispose();\n  };\n  /**\r\n   * (Re)validates chart's data, effectively causing the chart to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  FlowDiagram.prototype.validateData = function () {\n    var _this = this;\n    if (this._parseDataFrom == 0) {\n      this.nodes.clear();\n    }\n    this.sortNodes();\n    this.colors.reset();\n    _super.prototype.validateData.call(this);\n    var sum = 0;\n    var count = 0;\n    var low;\n    var high;\n    // build blocks\n    $iter.each(this.dataItems.iterator(), function (dataItem) {\n      var fromName = dataItem.fromName;\n      if (fromName) {\n        var node = _this.nodes.getKey(fromName);\n        if (!node) {\n          node = _this.nodes.create(fromName);\n          node.name = fromName;\n          node.chart = _this;\n          node.dataItem = dataItem;\n        }\n        dataItem.fromNode = node;\n        dataItem.fromNode.outgoingDataItems.push(dataItem);\n      }\n      var toName = dataItem.toName;\n      if (toName) {\n        var node = _this.nodes.getKey(toName);\n        if (!node) {\n          node = _this.nodes.create(toName);\n          node.name = toName;\n          node.chart = _this;\n          node.dataItem = dataItem;\n        }\n        dataItem.toNode = node;\n        dataItem.toNode.incomingDataItems.push(dataItem);\n      }\n      if (!dataItem.fromNode) {\n        var strokeModifier = new LinearGradientModifier();\n        strokeModifier.opacities = [0, 1];\n        dataItem.link.strokeModifier = strokeModifier;\n      }\n      if (!dataItem.toNode) {\n        var fillModifier = new LinearGradientModifier();\n        fillModifier.opacities = [1, 0];\n        dataItem.link.strokeModifier = fillModifier;\n      }\n      var value = dataItem.value;\n      if ($type.isNumber(value)) {\n        sum += value;\n        count++;\n        if (low > value || !$type.isNumber(low)) {\n          low = value;\n        }\n        if (high < value || !$type.isNumber(high)) {\n          high = value;\n        }\n      }\n    });\n    var key = \"value\";\n    this.dataItem.setCalculatedValue(key, high, \"high\");\n    this.dataItem.setCalculatedValue(key, low, \"low\");\n    this.dataItem.setCalculatedValue(key, sum, \"sum\");\n    this.dataItem.setCalculatedValue(key, sum / count, \"average\");\n    this.dataItem.setCalculatedValue(key, count, \"count\");\n    $iter.each(this.nodes.iterator(), function (strNode) {\n      var node = strNode[1];\n      if (node.fill instanceof Color) {\n        node.color = node.fill;\n      }\n      if (node.color == undefined) {\n        node.color = _this.colors.next();\n      }\n      if (node.dataItem.color != undefined) {\n        node.color = node.dataItem.color;\n      }\n      if (!node.dataItem.visible) {\n        node.hide(0);\n      }\n      _this.getNodeValue(node);\n    });\n    this.sortNodes();\n    this.feedLegend();\n  };\n  /**\r\n   * [handleDataItemWorkingValueChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  FlowDiagram.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {\n    this.invalidate();\n  };\n  /**\r\n   * Sorts nodes by either their values or names, based on `sortBy` setting.\r\n   */\n  FlowDiagram.prototype.sortNodes = function () {\n    if (this.sortBy == \"name\") {\n      this._sorted = this.nodes.sortedIterator();\n    } else if (this.sortBy == \"value\") {\n      this._sorted = $iter.sort(this.nodes.iterator(), function (x, y) {\n        return $order.reverse($number.order(x[1].total, y[1].total));\n      });\n    } else {\n      this._sorted = this.nodes.iterator();\n    }\n  };\n  /**\r\n   * Updates a cummulative value of the node.\r\n   *\r\n   * A node's value is determined by summing values of all of the incoming\r\n   * links or all of the outgoing links, whichever results in bigger number.\r\n   *\r\n   * @param node  Node value\r\n   */\n  FlowDiagram.prototype.getNodeValue = function (node) {\n    // todo: totalIncomming totalOutgoing, total\n    var incomingTotal = 0;\n    var outgoingTotal = 0;\n    $iter.each(node.incomingDataItems.iterator(), function (dataItem) {\n      var value = dataItem.getWorkingValue(\"value\");\n      if ($type.isNumber(value)) {\n        incomingTotal += value;\n      }\n    });\n    $iter.each(node.outgoingDataItems.iterator(), function (dataItem) {\n      var value = dataItem.getWorkingValue(\"value\");\n      if ($type.isNumber(value)) {\n        outgoingTotal += value;\n      }\n    });\n    node.total = incomingTotal + outgoingTotal;\n    node.totalIncoming = incomingTotal;\n    node.totalOutgoing = outgoingTotal;\n  };\n  ;\n  /**\r\n   * Changes the sort type of the nodes.\r\n   *\r\n   * This will actually reshuffle nodes using nice animation.\r\n   */\n  FlowDiagram.prototype.changeSorting = function () {\n    this.sortNodes();\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n  FlowDiagram.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n    // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Flow diagram\");\n    }\n  };\n  /**\r\n   * Creates and returns a new data item.\r\n   *\r\n   * @return Data item\r\n   */\n  FlowDiagram.prototype.createDataItem = function () {\n    return new FlowDiagramDataItem();\n  };\n  Object.defineProperty(FlowDiagram.prototype, \"nodePadding\", {\n    /**\r\n     * @return Padding (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"nodePadding\");\n    },\n    /**\r\n     * Padding for node square in pixels.\r\n     *\r\n     * Padding will add extra space around node's name label.\r\n     *\r\n     * @param value Padding (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"nodePadding\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagram.prototype, \"sortBy\", {\n    /**\r\n     * @returns Node sorting\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"sortBy\");\n    },\n    /**\r\n     * Sort nodes by \"name\" or \"value\" or do not sort at all. If not sorted, nodes will appear in the same order as they are in the data.\r\n     * @default \"none\"\r\n     * @param value  Node sorting\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"sortBy\", value);\n      this.changeSorting();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagram.prototype, \"minNodeSize\", {\n    /**\r\n     * @returns min node size\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minNodeSize\");\n    },\n    /**\r\n     * Sometimes nodes can get very small if their value is little. With this setting you\r\n     * can set min size of a node (this is relative value from the total size of all nodes)\r\n     * @default 0.02\r\n     * @param value  Node sorting\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"minNodeSize\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagram.prototype, \"nodes\", {\n    /**\r\n     * A list of chart's nodes.\r\n     *\r\n     * @param {DictionaryTemplate<string, this[\"_node\"]>}\r\n     */\n    get: function () {\n      if (!this._nodes) {\n        var template = this.createNode();\n        template.events.on(\"hit\", function (event) {\n          event.target.handleHit(event);\n        });\n        this._nodes = new DictionaryTemplate(template);\n        this._disposers.push(new DictionaryDisposer(this._nodes));\n      }\n      return this._nodes;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n  FlowDiagram.prototype.createNode = function () {\n    var node = new FlowDiagramNode();\n    this._disposers.push(node);\n    return node;\n  };\n  Object.defineProperty(FlowDiagram.prototype, \"links\", {\n    /**\r\n     * A list of chart's links.\r\n     *\r\n     * @param {ListTemplate<this[\"_link\"]>}\r\n     */\n    get: function () {\n      if (!this._links) {\n        this._links = new ListTemplate(this.createLink());\n        this._disposers.push(new ListDisposer(this._links));\n      }\n      return this._links;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n  FlowDiagram.prototype.createLink = function () {\n    var link = new FlowDiagramLink();\n    this._disposers.push(link);\n    return link;\n  };\n  /**\r\n   * Setups the legend to use the chart's data.\r\n   * @ignore\r\n   */\n  FlowDiagram.prototype.feedLegend = function () {\n    var legend = this.legend;\n    if (legend) {\n      var legendData_1 = [];\n      this.nodes.each(function (key, node) {\n        legendData_1.push(node);\n      });\n      legend.data = legendData_1;\n      legend.dataFields.name = \"name\";\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n  FlowDiagram.prototype.disposeData = function () {\n    _super.prototype.disposeData.call(this);\n    this.nodes.clear();\n  };\n  return FlowDiagram;\n}(Chart);\nexport { FlowDiagram };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"FlowDiagram\"] = FlowDiagram;","map":{"version":3,"names":["__extends","Chart","ChartDataItem","ListTemplate","ListDisposer","DictionaryTemplate","DictionaryDisposer","Container","registry","FlowDiagramNode","FlowDiagramLink","LinearGradientModifier","ColorSet","toColor","Color","$iter","$type","$number","$order","Disposer","FlowDiagramDataItem","_super","_this","call","className","values","value","applyTheme","Object","defineProperty","prototype","get","properties","fromName","set","setProperty","enumerable","configurable","toName","color","setValue","_link","link_1","component","links","create","addSprite","_disposers","push","removeValue","FlowDiagram","colors","nodePadding","sortBy","sequencedInterpolation","step","minNodeSize","linksContainer","chartContainer","createChild","shouldClone","layout","isMeasured","nodesContainer","dataItem","createDataItem","dispose","validateData","_parseDataFrom","nodes","clear","sortNodes","reset","sum","count","low","high","each","dataItems","iterator","node","getKey","name","chart","fromNode","outgoingDataItems","toNode","incomingDataItems","strokeModifier","opacities","link","fillModifier","isNumber","key","setCalculatedValue","strNode","fill","undefined","next","visible","hide","getNodeValue","feedLegend","handleDataItemWorkingValueChange","invalidate","_sorted","sortedIterator","sort","x","y","reverse","order","total","incomingTotal","outgoingTotal","getWorkingValue","totalIncoming","totalOutgoing","changeSorting","applyInternalDefaults","hasValue","readerTitle","language","translate","getPropertyValue","setPropertyValue","_nodes","template","createNode","events","on","event","target","handleHit","_links","createLink","legend","legendData_1","data","dataFields","disposeData","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/charts/types/FlowDiagram.js"],"sourcesContent":["/**\r\n * FlowDiagram module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Chart, ChartDataItem } from \"../Chart\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { FlowDiagramNode } from \"../elements/FlowDiagramNode\";\r\nimport { FlowDiagramLink } from \"../elements/FlowDiagramLink\";\r\nimport { LinearGradientModifier } from \"../../core/rendering/fills/LinearGradientModifier\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { toColor, Color } from \"../../core/utils/Color\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n//@todo rearange notes after dragged\r\n/**\r\n * Defines a [[DataItem]] for [[FlowDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar FlowDiagramDataItem = /** @class */ (function (_super) {\r\n    __extends(FlowDiagramDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function FlowDiagramDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"FlowDiagramDataItem\";\r\n        _this.values.value = {};\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(FlowDiagramDataItem.prototype, \"fromName\", {\r\n        /**\r\n         * @return name\r\n         */\r\n        get: function () {\r\n            return this.properties.fromName;\r\n        },\r\n        /**\r\n         * Source node's name.\r\n         *\r\n         * @param value  Name\r\n         */\r\n        set: function (value) {\r\n            this.setProperty(\"fromName\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramDataItem.prototype, \"toName\", {\r\n        /**\r\n         * @return name\r\n         */\r\n        get: function () {\r\n            return this.properties.toName;\r\n        },\r\n        /**\r\n         * Destination node's name.\r\n         *\r\n         * @param value  Name\r\n         */\r\n        set: function (value) {\r\n            this.setProperty(\"toName\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramDataItem.prototype, \"color\", {\r\n        /**\r\n         * @return color\r\n         */\r\n        get: function () {\r\n            return this.properties.color;\r\n        },\r\n        /**\r\n         * Node color\r\n         *\r\n         * @param value  Name\r\n         */\r\n        set: function (value) {\r\n            this.setProperty(\"color\", toColor(value));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramDataItem.prototype, \"value\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            return this.values.value.value;\r\n        },\r\n        /**\r\n         * Link's value.\r\n         *\r\n         * @param value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"value\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramDataItem.prototype, \"link\", {\r\n        /**\r\n         * A visual element, representing link between the source and target nodes.\r\n         *\r\n         * Link's actual thickness will be determined by `value` of this link and\r\n         * `value` of the source node.\r\n         *\r\n         * @readonly\r\n         * @return Link element\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            if (!this._link) {\r\n                var link_1 = this.component.links.create();\r\n                this._link = link_1;\r\n                this.addSprite(link_1);\r\n                this._disposers.push(new Disposer(function () {\r\n                    if (_this.component) {\r\n                        _this.component.links.removeValue(link_1);\r\n                    }\r\n                }));\r\n            }\r\n            return this._link;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return FlowDiagramDataItem;\r\n}(ChartDataItem));\r\nexport { FlowDiagramDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a Pie chart\r\n * @see {@link IFlowDiagramEvents} for a list of available Events\r\n * @see {@link IFlowDiagramAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar FlowDiagram = /** @class */ (function (_super) {\r\n    __extends(FlowDiagram, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function FlowDiagram() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * A Color Set to use when applying/generating colors for each subsequent\r\n         * node.\r\n         */\r\n        _this.colors = new ColorSet();\r\n        _this.className = \"FlowDiagram\";\r\n        _this.nodePadding = 20;\r\n        _this.sortBy = \"none\";\r\n        _this.sequencedInterpolation = true;\r\n        _this.colors.step = 2;\r\n        _this.minNodeSize = 0.02;\r\n        var linksContainer = _this.chartContainer.createChild(Container);\r\n        linksContainer.shouldClone = false;\r\n        linksContainer.layout = \"none\";\r\n        linksContainer.isMeasured = false;\r\n        _this.linksContainer = linksContainer;\r\n        var nodesContainer = _this.chartContainer.createChild(Container);\r\n        nodesContainer.shouldClone = false;\r\n        nodesContainer.layout = \"none\";\r\n        nodesContainer.isMeasured = false;\r\n        _this.nodesContainer = nodesContainer;\r\n        // this data item holds sums, averages, etc\r\n        _this.dataItem = _this.createDataItem();\r\n        _this.dataItem.component = _this;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    FlowDiagram.prototype.dispose = function () {\r\n        _super.prototype.dispose.call(this);\r\n        this.dataItem.dispose();\r\n    };\r\n    /**\r\n     * (Re)validates chart's data, effectively causing the chart to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    FlowDiagram.prototype.validateData = function () {\r\n        var _this = this;\r\n        if (this._parseDataFrom == 0) {\r\n            this.nodes.clear();\r\n        }\r\n        this.sortNodes();\r\n        this.colors.reset();\r\n        _super.prototype.validateData.call(this);\r\n        var sum = 0;\r\n        var count = 0;\r\n        var low;\r\n        var high;\r\n        // build blocks\r\n        $iter.each(this.dataItems.iterator(), function (dataItem) {\r\n            var fromName = dataItem.fromName;\r\n            if (fromName) {\r\n                var node = _this.nodes.getKey(fromName);\r\n                if (!node) {\r\n                    node = _this.nodes.create(fromName);\r\n                    node.name = fromName;\r\n                    node.chart = _this;\r\n                    node.dataItem = dataItem;\r\n                }\r\n                dataItem.fromNode = node;\r\n                dataItem.fromNode.outgoingDataItems.push(dataItem);\r\n            }\r\n            var toName = dataItem.toName;\r\n            if (toName) {\r\n                var node = _this.nodes.getKey(toName);\r\n                if (!node) {\r\n                    node = _this.nodes.create(toName);\r\n                    node.name = toName;\r\n                    node.chart = _this;\r\n                    node.dataItem = dataItem;\r\n                }\r\n                dataItem.toNode = node;\r\n                dataItem.toNode.incomingDataItems.push(dataItem);\r\n            }\r\n            if (!dataItem.fromNode) {\r\n                var strokeModifier = new LinearGradientModifier();\r\n                strokeModifier.opacities = [0, 1];\r\n                dataItem.link.strokeModifier = strokeModifier;\r\n            }\r\n            if (!dataItem.toNode) {\r\n                var fillModifier = new LinearGradientModifier();\r\n                fillModifier.opacities = [1, 0];\r\n                dataItem.link.strokeModifier = fillModifier;\r\n            }\r\n            var value = dataItem.value;\r\n            if ($type.isNumber(value)) {\r\n                sum += value;\r\n                count++;\r\n                if (low > value || !$type.isNumber(low)) {\r\n                    low = value;\r\n                }\r\n                if (high < value || !$type.isNumber(high)) {\r\n                    high = value;\r\n                }\r\n            }\r\n        });\r\n        var key = \"value\";\r\n        this.dataItem.setCalculatedValue(key, high, \"high\");\r\n        this.dataItem.setCalculatedValue(key, low, \"low\");\r\n        this.dataItem.setCalculatedValue(key, sum, \"sum\");\r\n        this.dataItem.setCalculatedValue(key, sum / count, \"average\");\r\n        this.dataItem.setCalculatedValue(key, count, \"count\");\r\n        $iter.each(this.nodes.iterator(), function (strNode) {\r\n            var node = strNode[1];\r\n            if (node.fill instanceof Color) {\r\n                node.color = node.fill;\r\n            }\r\n            if (node.color == undefined) {\r\n                node.color = _this.colors.next();\r\n            }\r\n            if (node.dataItem.color != undefined) {\r\n                node.color = node.dataItem.color;\r\n            }\r\n            if (!node.dataItem.visible) {\r\n                node.hide(0);\r\n            }\r\n            _this.getNodeValue(node);\r\n        });\r\n        this.sortNodes();\r\n        this.feedLegend();\r\n    };\r\n    /**\r\n     * [handleDataItemWorkingValueChange description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    FlowDiagram.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {\r\n        this.invalidate();\r\n    };\r\n    /**\r\n     * Sorts nodes by either their values or names, based on `sortBy` setting.\r\n     */\r\n    FlowDiagram.prototype.sortNodes = function () {\r\n        if (this.sortBy == \"name\") {\r\n            this._sorted = this.nodes.sortedIterator();\r\n        }\r\n        else if (this.sortBy == \"value\") {\r\n            this._sorted = $iter.sort(this.nodes.iterator(), function (x, y) { return $order.reverse($number.order(x[1].total, y[1].total)); });\r\n        }\r\n        else {\r\n            this._sorted = this.nodes.iterator();\r\n        }\r\n    };\r\n    /**\r\n     * Updates a cummulative value of the node.\r\n     *\r\n     * A node's value is determined by summing values of all of the incoming\r\n     * links or all of the outgoing links, whichever results in bigger number.\r\n     *\r\n     * @param node  Node value\r\n     */\r\n    FlowDiagram.prototype.getNodeValue = function (node) {\r\n        // todo: totalIncomming totalOutgoing, total\r\n        var incomingTotal = 0;\r\n        var outgoingTotal = 0;\r\n        $iter.each(node.incomingDataItems.iterator(), function (dataItem) {\r\n            var value = dataItem.getWorkingValue(\"value\");\r\n            if ($type.isNumber(value)) {\r\n                incomingTotal += value;\r\n            }\r\n        });\r\n        $iter.each(node.outgoingDataItems.iterator(), function (dataItem) {\r\n            var value = dataItem.getWorkingValue(\"value\");\r\n            if ($type.isNumber(value)) {\r\n                outgoingTotal += value;\r\n            }\r\n        });\r\n        node.total = incomingTotal + outgoingTotal;\r\n        node.totalIncoming = incomingTotal;\r\n        node.totalOutgoing = outgoingTotal;\r\n    };\r\n    ;\r\n    /**\r\n     * Changes the sort type of the nodes.\r\n     *\r\n     * This will actually reshuffle nodes using nice animation.\r\n     */\r\n    FlowDiagram.prototype.changeSorting = function () {\r\n        this.sortNodes();\r\n    };\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    FlowDiagram.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        // Add a default screen reader title for accessibility\r\n        // This will be overridden in screen reader if there are any `titles` set\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Flow diagram\");\r\n        }\r\n    };\r\n    /**\r\n     * Creates and returns a new data item.\r\n     *\r\n     * @return Data item\r\n     */\r\n    FlowDiagram.prototype.createDataItem = function () {\r\n        return new FlowDiagramDataItem();\r\n    };\r\n    Object.defineProperty(FlowDiagram.prototype, \"nodePadding\", {\r\n        /**\r\n         * @return Padding (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"nodePadding\");\r\n        },\r\n        /**\r\n         * Padding for node square in pixels.\r\n         *\r\n         * Padding will add extra space around node's name label.\r\n         *\r\n         * @param value Padding (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"nodePadding\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagram.prototype, \"sortBy\", {\r\n        /**\r\n         * @returns Node sorting\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"sortBy\");\r\n        },\r\n        /**\r\n         * Sort nodes by \"name\" or \"value\" or do not sort at all. If not sorted, nodes will appear in the same order as they are in the data.\r\n         * @default \"none\"\r\n         * @param value  Node sorting\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"sortBy\", value);\r\n            this.changeSorting();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagram.prototype, \"minNodeSize\", {\r\n        /**\r\n         * @returns min node size\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"minNodeSize\");\r\n        },\r\n        /**\r\n         * Sometimes nodes can get very small if their value is little. With this setting you\r\n         * can set min size of a node (this is relative value from the total size of all nodes)\r\n         * @default 0.02\r\n         * @param value  Node sorting\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"minNodeSize\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagram.prototype, \"nodes\", {\r\n        /**\r\n         * A list of chart's nodes.\r\n         *\r\n         * @param {DictionaryTemplate<string, this[\"_node\"]>}\r\n         */\r\n        get: function () {\r\n            if (!this._nodes) {\r\n                var template = this.createNode();\r\n                template.events.on(\"hit\", function (event) {\r\n                    event.target.handleHit(event);\r\n                });\r\n                this._nodes = new DictionaryTemplate(template);\r\n                this._disposers.push(new DictionaryDisposer(this._nodes));\r\n            }\r\n            return this._nodes;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    FlowDiagram.prototype.createNode = function () {\r\n        var node = new FlowDiagramNode();\r\n        this._disposers.push(node);\r\n        return node;\r\n    };\r\n    Object.defineProperty(FlowDiagram.prototype, \"links\", {\r\n        /**\r\n         * A list of chart's links.\r\n         *\r\n         * @param {ListTemplate<this[\"_link\"]>}\r\n         */\r\n        get: function () {\r\n            if (!this._links) {\r\n                this._links = new ListTemplate(this.createLink());\r\n                this._disposers.push(new ListDisposer(this._links));\r\n            }\r\n            return this._links;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    FlowDiagram.prototype.createLink = function () {\r\n        var link = new FlowDiagramLink();\r\n        this._disposers.push(link);\r\n        return link;\r\n    };\r\n    /**\r\n     * Setups the legend to use the chart's data.\r\n     * @ignore\r\n     */\r\n    FlowDiagram.prototype.feedLegend = function () {\r\n        var legend = this.legend;\r\n        if (legend) {\r\n            var legendData_1 = [];\r\n            this.nodes.each(function (key, node) {\r\n                legendData_1.push(node);\r\n            });\r\n            legend.data = legendData_1;\r\n            legend.dataFields.name = \"name\";\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    FlowDiagram.prototype.disposeData = function () {\r\n        _super.prototype.disposeData.call(this);\r\n        this.nodes.clear();\r\n    };\r\n    return FlowDiagram;\r\n}(Chart));\r\nexport { FlowDiagram };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagram\"] = FlowDiagram;\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,SAAS,QAAQ,OAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,KAAK,EAAEC,aAAa,QAAQ,UAAU;AAC/C,SAASC,YAAY,EAAEC,YAAY,QAAQ,uBAAuB;AAClE,SAASC,kBAAkB,EAAEC,kBAAkB,QAAQ,6BAA6B;AACpF,SAASC,SAAS,QAAQ,sBAAsB;AAChD,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,SAASC,eAAe,QAAQ,6BAA6B;AAC7D,SAASC,eAAe,QAAQ,6BAA6B;AAC7D,SAASC,sBAAsB,QAAQ,mDAAmD;AAC1F,SAASC,QAAQ,QAAQ,2BAA2B;AACpD,SAASC,OAAO,EAAEC,KAAK,QAAQ,wBAAwB;AACvD,OAAO,KAAKC,KAAK,MAAM,2BAA2B;AAClD,OAAO,KAAKC,KAAK,MAAM,uBAAuB;AAC9C,OAAO,KAAKC,OAAO,MAAM,yBAAyB;AAClD,OAAO,KAAKC,MAAM,MAAM,wBAAwB;AAChD,SAASC,QAAQ,QAAQ,2BAA2B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,mBAAmB,GAAG,aAAe,UAAUC,MAAM,EAAE;EACvDrB,SAAS,CAACoB,mBAAmB,EAAEC,MAAM,CAAC;EACtC;AACJ;AACA;EACI,SAASD,mBAAmBA,CAAA,EAAG;IAC3B,IAAIE,KAAK,GAAGD,MAAM,CAACE,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI;IACrCD,KAAK,CAACE,SAAS,GAAG,qBAAqB;IACvCF,KAAK,CAACG,MAAM,CAACC,KAAK,GAAG,CAAC,CAAC;IACvBJ,KAAK,CAACK,UAAU,CAAC,CAAC;IAClB,OAAOL,KAAK;EAChB;EACAM,MAAM,CAACC,cAAc,CAACT,mBAAmB,CAACU,SAAS,EAAE,UAAU,EAAE;IAC7D;AACR;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACC,UAAU,CAACC,QAAQ;IACnC,CAAC;IACD;AACR;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAUR,KAAK,EAAE;MAClB,IAAI,CAACS,WAAW,CAAC,UAAU,EAAET,KAAK,CAAC;IACvC,CAAC;IACDU,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFT,MAAM,CAACC,cAAc,CAACT,mBAAmB,CAACU,SAAS,EAAE,QAAQ,EAAE;IAC3D;AACR;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACC,UAAU,CAACM,MAAM;IACjC,CAAC;IACD;AACR;AACA;AACA;AACA;IACQJ,GAAG,EAAE,SAAAA,CAAUR,KAAK,EAAE;MAClB,IAAI,CAACS,WAAW,CAAC,QAAQ,EAAET,KAAK,CAAC;IACrC,CAAC;IACDU,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFT,MAAM,CAACC,cAAc,CAACT,mBAAmB,CAACU,SAAS,EAAE,OAAO,EAAE;IAC1D;AACR;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACC,UAAU,CAACO,KAAK;IAChC,CAAC;IACD;AACR;AACA;AACA;AACA;IACQL,GAAG,EAAE,SAAAA,CAAUR,KAAK,EAAE;MAClB,IAAI,CAACS,WAAW,CAAC,OAAO,EAAEtB,OAAO,CAACa,KAAK,CAAC,CAAC;IAC7C,CAAC;IACDU,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFT,MAAM,CAACC,cAAc,CAACT,mBAAmB,CAACU,SAAS,EAAE,OAAO,EAAE;IAC1D;AACR;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACN,MAAM,CAACC,KAAK,CAACA,KAAK;IAClC,CAAC;IACD;AACR;AACA;AACA;AACA;IACQQ,GAAG,EAAE,SAAAA,CAAUR,KAAK,EAAE;MAClB,IAAI,CAACc,QAAQ,CAAC,OAAO,EAAEd,KAAK,CAAC;IACjC,CAAC;IACDU,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFT,MAAM,CAACC,cAAc,CAACT,mBAAmB,CAACU,SAAS,EAAE,MAAM,EAAE;IACzD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,IAAIT,KAAK,GAAG,IAAI;MAChB,IAAI,CAAC,IAAI,CAACmB,KAAK,EAAE;QACb,IAAIC,MAAM,GAAG,IAAI,CAACC,SAAS,CAACC,KAAK,CAACC,MAAM,CAAC,CAAC;QAC1C,IAAI,CAACJ,KAAK,GAAGC,MAAM;QACnB,IAAI,CAACI,SAAS,CAACJ,MAAM,CAAC;QACtB,IAAI,CAACK,UAAU,CAACC,IAAI,CAAC,IAAI7B,QAAQ,CAAC,YAAY;UAC1C,IAAIG,KAAK,CAACqB,SAAS,EAAE;YACjBrB,KAAK,CAACqB,SAAS,CAACC,KAAK,CAACK,WAAW,CAACP,MAAM,CAAC;UAC7C;QACJ,CAAC,CAAC,CAAC;MACP;MACA,OAAO,IAAI,CAACD,KAAK;IACrB,CAAC;IACDL,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF,OAAOjB,mBAAmB;AAC9B,CAAC,CAAClB,aAAa,CAAE;AACjB,SAASkB,mBAAmB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI8B,WAAW,GAAG,aAAe,UAAU7B,MAAM,EAAE;EAC/CrB,SAAS,CAACkD,WAAW,EAAE7B,MAAM,CAAC;EAC9B;AACJ;AACA;EACI,SAAS6B,WAAWA,CAAA,EAAG;IACnB,IAAI5B,KAAK;IACT;IACAD,MAAM,CAACE,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI;IACzB;AACR;AACA;AACA;IACQD,KAAK,CAAC6B,MAAM,GAAG,IAAIvC,QAAQ,CAAC,CAAC;IAC7BU,KAAK,CAACE,SAAS,GAAG,aAAa;IAC/BF,KAAK,CAAC8B,WAAW,GAAG,EAAE;IACtB9B,KAAK,CAAC+B,MAAM,GAAG,MAAM;IACrB/B,KAAK,CAACgC,sBAAsB,GAAG,IAAI;IACnChC,KAAK,CAAC6B,MAAM,CAACI,IAAI,GAAG,CAAC;IACrBjC,KAAK,CAACkC,WAAW,GAAG,IAAI;IACxB,IAAIC,cAAc,GAAGnC,KAAK,CAACoC,cAAc,CAACC,WAAW,CAACpD,SAAS,CAAC;IAChEkD,cAAc,CAACG,WAAW,GAAG,KAAK;IAClCH,cAAc,CAACI,MAAM,GAAG,MAAM;IAC9BJ,cAAc,CAACK,UAAU,GAAG,KAAK;IACjCxC,KAAK,CAACmC,cAAc,GAAGA,cAAc;IACrC,IAAIM,cAAc,GAAGzC,KAAK,CAACoC,cAAc,CAACC,WAAW,CAACpD,SAAS,CAAC;IAChEwD,cAAc,CAACH,WAAW,GAAG,KAAK;IAClCG,cAAc,CAACF,MAAM,GAAG,MAAM;IAC9BE,cAAc,CAACD,UAAU,GAAG,KAAK;IACjCxC,KAAK,CAACyC,cAAc,GAAGA,cAAc;IACrC;IACAzC,KAAK,CAAC0C,QAAQ,GAAG1C,KAAK,CAAC2C,cAAc,CAAC,CAAC;IACvC3C,KAAK,CAAC0C,QAAQ,CAACrB,SAAS,GAAGrB,KAAK;IAChC;IACAA,KAAK,CAACK,UAAU,CAAC,CAAC;IAClB,OAAOL,KAAK;EAChB;EACA4B,WAAW,CAACpB,SAAS,CAACoC,OAAO,GAAG,YAAY;IACxC7C,MAAM,CAACS,SAAS,CAACoC,OAAO,CAAC3C,IAAI,CAAC,IAAI,CAAC;IACnC,IAAI,CAACyC,QAAQ,CAACE,OAAO,CAAC,CAAC;EAC3B,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIhB,WAAW,CAACpB,SAAS,CAACqC,YAAY,GAAG,YAAY;IAC7C,IAAI7C,KAAK,GAAG,IAAI;IAChB,IAAI,IAAI,CAAC8C,cAAc,IAAI,CAAC,EAAE;MAC1B,IAAI,CAACC,KAAK,CAACC,KAAK,CAAC,CAAC;IACtB;IACA,IAAI,CAACC,SAAS,CAAC,CAAC;IAChB,IAAI,CAACpB,MAAM,CAACqB,KAAK,CAAC,CAAC;IACnBnD,MAAM,CAACS,SAAS,CAACqC,YAAY,CAAC5C,IAAI,CAAC,IAAI,CAAC;IACxC,IAAIkD,GAAG,GAAG,CAAC;IACX,IAAIC,KAAK,GAAG,CAAC;IACb,IAAIC,GAAG;IACP,IAAIC,IAAI;IACR;IACA7D,KAAK,CAAC8D,IAAI,CAAC,IAAI,CAACC,SAAS,CAACC,QAAQ,CAAC,CAAC,EAAE,UAAUf,QAAQ,EAAE;MACtD,IAAI/B,QAAQ,GAAG+B,QAAQ,CAAC/B,QAAQ;MAChC,IAAIA,QAAQ,EAAE;QACV,IAAI+C,IAAI,GAAG1D,KAAK,CAAC+C,KAAK,CAACY,MAAM,CAAChD,QAAQ,CAAC;QACvC,IAAI,CAAC+C,IAAI,EAAE;UACPA,IAAI,GAAG1D,KAAK,CAAC+C,KAAK,CAACxB,MAAM,CAACZ,QAAQ,CAAC;UACnC+C,IAAI,CAACE,IAAI,GAAGjD,QAAQ;UACpB+C,IAAI,CAACG,KAAK,GAAG7D,KAAK;UAClB0D,IAAI,CAAChB,QAAQ,GAAGA,QAAQ;QAC5B;QACAA,QAAQ,CAACoB,QAAQ,GAAGJ,IAAI;QACxBhB,QAAQ,CAACoB,QAAQ,CAACC,iBAAiB,CAACrC,IAAI,CAACgB,QAAQ,CAAC;MACtD;MACA,IAAI1B,MAAM,GAAG0B,QAAQ,CAAC1B,MAAM;MAC5B,IAAIA,MAAM,EAAE;QACR,IAAI0C,IAAI,GAAG1D,KAAK,CAAC+C,KAAK,CAACY,MAAM,CAAC3C,MAAM,CAAC;QACrC,IAAI,CAAC0C,IAAI,EAAE;UACPA,IAAI,GAAG1D,KAAK,CAAC+C,KAAK,CAACxB,MAAM,CAACP,MAAM,CAAC;UACjC0C,IAAI,CAACE,IAAI,GAAG5C,MAAM;UAClB0C,IAAI,CAACG,KAAK,GAAG7D,KAAK;UAClB0D,IAAI,CAAChB,QAAQ,GAAGA,QAAQ;QAC5B;QACAA,QAAQ,CAACsB,MAAM,GAAGN,IAAI;QACtBhB,QAAQ,CAACsB,MAAM,CAACC,iBAAiB,CAACvC,IAAI,CAACgB,QAAQ,CAAC;MACpD;MACA,IAAI,CAACA,QAAQ,CAACoB,QAAQ,EAAE;QACpB,IAAII,cAAc,GAAG,IAAI7E,sBAAsB,CAAC,CAAC;QACjD6E,cAAc,CAACC,SAAS,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;QACjCzB,QAAQ,CAAC0B,IAAI,CAACF,cAAc,GAAGA,cAAc;MACjD;MACA,IAAI,CAACxB,QAAQ,CAACsB,MAAM,EAAE;QAClB,IAAIK,YAAY,GAAG,IAAIhF,sBAAsB,CAAC,CAAC;QAC/CgF,YAAY,CAACF,SAAS,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;QAC/BzB,QAAQ,CAAC0B,IAAI,CAACF,cAAc,GAAGG,YAAY;MAC/C;MACA,IAAIjE,KAAK,GAAGsC,QAAQ,CAACtC,KAAK;MAC1B,IAAIV,KAAK,CAAC4E,QAAQ,CAAClE,KAAK,CAAC,EAAE;QACvB+C,GAAG,IAAI/C,KAAK;QACZgD,KAAK,EAAE;QACP,IAAIC,GAAG,GAAGjD,KAAK,IAAI,CAACV,KAAK,CAAC4E,QAAQ,CAACjB,GAAG,CAAC,EAAE;UACrCA,GAAG,GAAGjD,KAAK;QACf;QACA,IAAIkD,IAAI,GAAGlD,KAAK,IAAI,CAACV,KAAK,CAAC4E,QAAQ,CAAChB,IAAI,CAAC,EAAE;UACvCA,IAAI,GAAGlD,KAAK;QAChB;MACJ;IACJ,CAAC,CAAC;IACF,IAAImE,GAAG,GAAG,OAAO;IACjB,IAAI,CAAC7B,QAAQ,CAAC8B,kBAAkB,CAACD,GAAG,EAAEjB,IAAI,EAAE,MAAM,CAAC;IACnD,IAAI,CAACZ,QAAQ,CAAC8B,kBAAkB,CAACD,GAAG,EAAElB,GAAG,EAAE,KAAK,CAAC;IACjD,IAAI,CAACX,QAAQ,CAAC8B,kBAAkB,CAACD,GAAG,EAAEpB,GAAG,EAAE,KAAK,CAAC;IACjD,IAAI,CAACT,QAAQ,CAAC8B,kBAAkB,CAACD,GAAG,EAAEpB,GAAG,GAAGC,KAAK,EAAE,SAAS,CAAC;IAC7D,IAAI,CAACV,QAAQ,CAAC8B,kBAAkB,CAACD,GAAG,EAAEnB,KAAK,EAAE,OAAO,CAAC;IACrD3D,KAAK,CAAC8D,IAAI,CAAC,IAAI,CAACR,KAAK,CAACU,QAAQ,CAAC,CAAC,EAAE,UAAUgB,OAAO,EAAE;MACjD,IAAIf,IAAI,GAAGe,OAAO,CAAC,CAAC,CAAC;MACrB,IAAIf,IAAI,CAACgB,IAAI,YAAYlF,KAAK,EAAE;QAC5BkE,IAAI,CAACzC,KAAK,GAAGyC,IAAI,CAACgB,IAAI;MAC1B;MACA,IAAIhB,IAAI,CAACzC,KAAK,IAAI0D,SAAS,EAAE;QACzBjB,IAAI,CAACzC,KAAK,GAAGjB,KAAK,CAAC6B,MAAM,CAAC+C,IAAI,CAAC,CAAC;MACpC;MACA,IAAIlB,IAAI,CAAChB,QAAQ,CAACzB,KAAK,IAAI0D,SAAS,EAAE;QAClCjB,IAAI,CAACzC,KAAK,GAAGyC,IAAI,CAAChB,QAAQ,CAACzB,KAAK;MACpC;MACA,IAAI,CAACyC,IAAI,CAAChB,QAAQ,CAACmC,OAAO,EAAE;QACxBnB,IAAI,CAACoB,IAAI,CAAC,CAAC,CAAC;MAChB;MACA9E,KAAK,CAAC+E,YAAY,CAACrB,IAAI,CAAC;IAC5B,CAAC,CAAC;IACF,IAAI,CAACT,SAAS,CAAC,CAAC;IAChB,IAAI,CAAC+B,UAAU,CAAC,CAAC;EACrB,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIpD,WAAW,CAACpB,SAAS,CAACyE,gCAAgC,GAAG,UAAUvC,QAAQ,EAAEkB,IAAI,EAAE;IAC/E,IAAI,CAACsB,UAAU,CAAC,CAAC;EACrB,CAAC;EACD;AACJ;AACA;EACItD,WAAW,CAACpB,SAAS,CAACyC,SAAS,GAAG,YAAY;IAC1C,IAAI,IAAI,CAAClB,MAAM,IAAI,MAAM,EAAE;MACvB,IAAI,CAACoD,OAAO,GAAG,IAAI,CAACpC,KAAK,CAACqC,cAAc,CAAC,CAAC;IAC9C,CAAC,MACI,IAAI,IAAI,CAACrD,MAAM,IAAI,OAAO,EAAE;MAC7B,IAAI,CAACoD,OAAO,GAAG1F,KAAK,CAAC4F,IAAI,CAAC,IAAI,CAACtC,KAAK,CAACU,QAAQ,CAAC,CAAC,EAAE,UAAU6B,CAAC,EAAEC,CAAC,EAAE;QAAE,OAAO3F,MAAM,CAAC4F,OAAO,CAAC7F,OAAO,CAAC8F,KAAK,CAACH,CAAC,CAAC,CAAC,CAAC,CAACI,KAAK,EAAEH,CAAC,CAAC,CAAC,CAAC,CAACG,KAAK,CAAC,CAAC;MAAE,CAAC,CAAC;IACvI,CAAC,MACI;MACD,IAAI,CAACP,OAAO,GAAG,IAAI,CAACpC,KAAK,CAACU,QAAQ,CAAC,CAAC;IACxC;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI7B,WAAW,CAACpB,SAAS,CAACuE,YAAY,GAAG,UAAUrB,IAAI,EAAE;IACjD;IACA,IAAIiC,aAAa,GAAG,CAAC;IACrB,IAAIC,aAAa,GAAG,CAAC;IACrBnG,KAAK,CAAC8D,IAAI,CAACG,IAAI,CAACO,iBAAiB,CAACR,QAAQ,CAAC,CAAC,EAAE,UAAUf,QAAQ,EAAE;MAC9D,IAAItC,KAAK,GAAGsC,QAAQ,CAACmD,eAAe,CAAC,OAAO,CAAC;MAC7C,IAAInG,KAAK,CAAC4E,QAAQ,CAAClE,KAAK,CAAC,EAAE;QACvBuF,aAAa,IAAIvF,KAAK;MAC1B;IACJ,CAAC,CAAC;IACFX,KAAK,CAAC8D,IAAI,CAACG,IAAI,CAACK,iBAAiB,CAACN,QAAQ,CAAC,CAAC,EAAE,UAAUf,QAAQ,EAAE;MAC9D,IAAItC,KAAK,GAAGsC,QAAQ,CAACmD,eAAe,CAAC,OAAO,CAAC;MAC7C,IAAInG,KAAK,CAAC4E,QAAQ,CAAClE,KAAK,CAAC,EAAE;QACvBwF,aAAa,IAAIxF,KAAK;MAC1B;IACJ,CAAC,CAAC;IACFsD,IAAI,CAACgC,KAAK,GAAGC,aAAa,GAAGC,aAAa;IAC1ClC,IAAI,CAACoC,aAAa,GAAGH,aAAa;IAClCjC,IAAI,CAACqC,aAAa,GAAGH,aAAa;EACtC,CAAC;EACD;EACA;AACJ;AACA;AACA;AACA;EACIhE,WAAW,CAACpB,SAAS,CAACwF,aAAa,GAAG,YAAY;IAC9C,IAAI,CAAC/C,SAAS,CAAC,CAAC;EACpB,CAAC;EACD;AACJ;AACA;AACA;EACIrB,WAAW,CAACpB,SAAS,CAACyF,qBAAqB,GAAG,YAAY;IACtDlG,MAAM,CAACS,SAAS,CAACyF,qBAAqB,CAAChG,IAAI,CAAC,IAAI,CAAC;IACjD;IACA;IACA,IAAI,CAACP,KAAK,CAACwG,QAAQ,CAAC,IAAI,CAACC,WAAW,CAAC,EAAE;MACnC,IAAI,CAACA,WAAW,GAAG,IAAI,CAACC,QAAQ,CAACC,SAAS,CAAC,cAAc,CAAC;IAC9D;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIzE,WAAW,CAACpB,SAAS,CAACmC,cAAc,GAAG,YAAY;IAC/C,OAAO,IAAI7C,mBAAmB,CAAC,CAAC;EACpC,CAAC;EACDQ,MAAM,CAACC,cAAc,CAACqB,WAAW,CAACpB,SAAS,EAAE,aAAa,EAAE;IACxD;AACR;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAAC6F,gBAAgB,CAAC,aAAa,CAAC;IAC/C,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;IACQ1F,GAAG,EAAE,SAAAA,CAAUR,KAAK,EAAE;MAClB,IAAI,CAACmG,gBAAgB,CAAC,aAAa,EAAEnG,KAAK,EAAE,IAAI,CAAC;IACrD,CAAC;IACDU,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFT,MAAM,CAACC,cAAc,CAACqB,WAAW,CAACpB,SAAS,EAAE,QAAQ,EAAE;IACnD;AACR;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAAC6F,gBAAgB,CAAC,QAAQ,CAAC;IAC1C,CAAC;IACD;AACR;AACA;AACA;AACA;IACQ1F,GAAG,EAAE,SAAAA,CAAUR,KAAK,EAAE;MAClB,IAAI,CAACmG,gBAAgB,CAAC,QAAQ,EAAEnG,KAAK,CAAC;MACtC,IAAI,CAAC4F,aAAa,CAAC,CAAC;IACxB,CAAC;IACDlF,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFT,MAAM,CAACC,cAAc,CAACqB,WAAW,CAACpB,SAAS,EAAE,aAAa,EAAE;IACxD;AACR;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAAC6F,gBAAgB,CAAC,aAAa,CAAC;IAC/C,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;IACQ1F,GAAG,EAAE,SAAAA,CAAUR,KAAK,EAAE;MAClB,IAAI,CAACmG,gBAAgB,CAAC,aAAa,EAAEnG,KAAK,EAAE,IAAI,CAAC;IACrD,CAAC;IACDU,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFT,MAAM,CAACC,cAAc,CAACqB,WAAW,CAACpB,SAAS,EAAE,OAAO,EAAE;IAClD;AACR;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,IAAI,CAAC,IAAI,CAAC+F,MAAM,EAAE;QACd,IAAIC,QAAQ,GAAG,IAAI,CAACC,UAAU,CAAC,CAAC;QAChCD,QAAQ,CAACE,MAAM,CAACC,EAAE,CAAC,KAAK,EAAE,UAAUC,KAAK,EAAE;UACvCA,KAAK,CAACC,MAAM,CAACC,SAAS,CAACF,KAAK,CAAC;QACjC,CAAC,CAAC;QACF,IAAI,CAACL,MAAM,GAAG,IAAIzH,kBAAkB,CAAC0H,QAAQ,CAAC;QAC9C,IAAI,CAAChF,UAAU,CAACC,IAAI,CAAC,IAAI1C,kBAAkB,CAAC,IAAI,CAACwH,MAAM,CAAC,CAAC;MAC7D;MACA,OAAO,IAAI,CAACA,MAAM;IACtB,CAAC;IACD1F,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF;AACJ;AACA;EACIa,WAAW,CAACpB,SAAS,CAACkG,UAAU,GAAG,YAAY;IAC3C,IAAIhD,IAAI,GAAG,IAAIvE,eAAe,CAAC,CAAC;IAChC,IAAI,CAACsC,UAAU,CAACC,IAAI,CAACgC,IAAI,CAAC;IAC1B,OAAOA,IAAI;EACf,CAAC;EACDpD,MAAM,CAACC,cAAc,CAACqB,WAAW,CAACpB,SAAS,EAAE,OAAO,EAAE;IAClD;AACR;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,IAAI,CAAC,IAAI,CAACuG,MAAM,EAAE;QACd,IAAI,CAACA,MAAM,GAAG,IAAInI,YAAY,CAAC,IAAI,CAACoI,UAAU,CAAC,CAAC,CAAC;QACjD,IAAI,CAACxF,UAAU,CAACC,IAAI,CAAC,IAAI5C,YAAY,CAAC,IAAI,CAACkI,MAAM,CAAC,CAAC;MACvD;MACA,OAAO,IAAI,CAACA,MAAM;IACtB,CAAC;IACDlG,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF;AACJ;AACA;EACIa,WAAW,CAACpB,SAAS,CAACyG,UAAU,GAAG,YAAY;IAC3C,IAAI7C,IAAI,GAAG,IAAIhF,eAAe,CAAC,CAAC;IAChC,IAAI,CAACqC,UAAU,CAACC,IAAI,CAAC0C,IAAI,CAAC;IAC1B,OAAOA,IAAI;EACf,CAAC;EACD;AACJ;AACA;AACA;EACIxC,WAAW,CAACpB,SAAS,CAACwE,UAAU,GAAG,YAAY;IAC3C,IAAIkC,MAAM,GAAG,IAAI,CAACA,MAAM;IACxB,IAAIA,MAAM,EAAE;MACR,IAAIC,YAAY,GAAG,EAAE;MACrB,IAAI,CAACpE,KAAK,CAACQ,IAAI,CAAC,UAAUgB,GAAG,EAAEb,IAAI,EAAE;QACjCyD,YAAY,CAACzF,IAAI,CAACgC,IAAI,CAAC;MAC3B,CAAC,CAAC;MACFwD,MAAM,CAACE,IAAI,GAAGD,YAAY;MAC1BD,MAAM,CAACG,UAAU,CAACzD,IAAI,GAAG,MAAM;IACnC;EACJ,CAAC;EACD;AACJ;AACA;EACIhC,WAAW,CAACpB,SAAS,CAAC8G,WAAW,GAAG,YAAY;IAC5CvH,MAAM,CAACS,SAAS,CAAC8G,WAAW,CAACrH,IAAI,CAAC,IAAI,CAAC;IACvC,IAAI,CAAC8C,KAAK,CAACC,KAAK,CAAC,CAAC;EACtB,CAAC;EACD,OAAOpB,WAAW;AACtB,CAAC,CAACjD,KAAK,CAAE;AACT,SAASiD,WAAW;AACpB;AACA;AACA;AACA;AACA;AACA;AACA1C,QAAQ,CAACqI,iBAAiB,CAAC,aAAa,CAAC,GAAG3F,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}