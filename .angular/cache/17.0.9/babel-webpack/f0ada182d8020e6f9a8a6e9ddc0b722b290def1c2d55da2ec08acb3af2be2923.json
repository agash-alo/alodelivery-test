{"ast":null,"code":"/**\r\n * Functionality for drawing circles.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Sprite } from \"../Sprite\";\nimport { percent } from \"../utils/Percent\";\nimport { registry } from \"../Registry\";\nimport * as $utils from \"../utils/Utils\";\nimport * as $math from \"../utils/Math\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Used to create a circle\r\n * @see {@link ICircleEvents} for a list of available events\r\n * @see {@link ICircleAdapters} for a list of available Adapters\r\n */\nvar Circle = /** @class */function (_super) {\n  __extends(Circle, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Circle() {\n    var _this = _super.call(this) || this;\n    _this.className = \"Circle\";\n    _this.element = _this.paper.add(\"circle\");\n    _this.setPercentProperty(\"radius\", percent(100));\n    _this.setPropertyValue(\"horizontalCenter\", \"middle\");\n    _this.setPropertyValue(\"verticalCenter\", \"middle\");\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Draws the circle.\r\n   */\n  Circle.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n    this.element.attr({\n      \"r\": this.pixelRadius\n    });\n  };\n  Object.defineProperty(Circle.prototype, \"radius\", {\n    /**\r\n     * @return Radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n    /**\r\n     * Radius of the circle.\r\n     *\r\n     * Can be either absolute (pixels) or relative ([Percent]).\r\n     *\r\n     * @param value  Radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"radius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Circle.prototype, \"pixelRadius\", {\n    /**\r\n     * Radius of the circle in pixels.\r\n     *\r\n     * This is a read-only property. To set radius in pixels, use `radius`\r\n     * property.\r\n     *\r\n     * @readonly\r\n     * @return Radius (px)\r\n     */\n    get: function () {\n      return $utils.relativeToValue(this.radius, $math.min(this.innerWidth / 2, this.innerHeight / 2));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates bounding box.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Circle.prototype.measureElement = function () {\n    var pixelRadius = this.pixelRadius;\n    this._bbox = {\n      x: -pixelRadius,\n      y: -pixelRadius,\n      width: pixelRadius * 2,\n      height: pixelRadius * 2\n    };\n  };\n  return Circle;\n}(Sprite);\nexport { Circle };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Circle\"] = Circle;","map":{"version":3,"names":["__extends","Sprite","percent","registry","$utils","$math","Circle","_super","_this","call","className","element","paper","add","setPercentProperty","setPropertyValue","applyTheme","prototype","draw","attr","pixelRadius","Object","defineProperty","get","getPropertyValue","set","value","enumerable","configurable","relativeToValue","radius","min","innerWidth","innerHeight","measureElement","_bbox","x","y","width","height","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/elements/Circle.js"],"sourcesContent":["/**\r\n * Functionality for drawing circles.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../Sprite\";\r\nimport { percent } from \"../utils/Percent\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $math from \"../utils/Math\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Used to create a circle\r\n * @see {@link ICircleEvents} for a list of available events\r\n * @see {@link ICircleAdapters} for a list of available Adapters\r\n */\r\nvar Circle = /** @class */ (function (_super) {\r\n    __extends(Circle, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Circle() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Circle\";\r\n        _this.element = _this.paper.add(\"circle\");\r\n        _this.setPercentProperty(\"radius\", percent(100));\r\n        _this.setPropertyValue(\"horizontalCenter\", \"middle\");\r\n        _this.setPropertyValue(\"verticalCenter\", \"middle\");\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the circle.\r\n     */\r\n    Circle.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        this.element.attr({ \"r\": this.pixelRadius });\r\n    };\r\n    Object.defineProperty(Circle.prototype, \"radius\", {\r\n        /**\r\n         * @return Radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Radius of the circle.\r\n         *\r\n         * Can be either absolute (pixels) or relative ([Percent]).\r\n         *\r\n         * @param value  Radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Circle.prototype, \"pixelRadius\", {\r\n        /**\r\n         * Radius of the circle in pixels.\r\n         *\r\n         * This is a read-only property. To set radius in pixels, use `radius`\r\n         * property.\r\n         *\r\n         * @readonly\r\n         * @return Radius (px)\r\n         */\r\n        get: function () {\r\n            return $utils.relativeToValue(this.radius, $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Updates bounding box.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Circle.prototype.measureElement = function () {\r\n        var pixelRadius = this.pixelRadius;\r\n        this._bbox = {\r\n            x: -pixelRadius,\r\n            y: -pixelRadius,\r\n            width: pixelRadius * 2,\r\n            height: pixelRadius * 2\r\n        };\r\n    };\r\n    return Circle;\r\n}(Sprite));\r\nexport { Circle };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Circle\"] = Circle;\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,SAAS,QAAQ,OAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,MAAM,QAAQ,WAAW;AAClC,SAASC,OAAO,QAAQ,kBAAkB;AAC1C,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAO,KAAKC,MAAM,MAAM,gBAAgB;AACxC,OAAO,KAAKC,KAAK,MAAM,eAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,MAAM,GAAG,aAAe,UAAUC,MAAM,EAAE;EAC1CP,SAAS,CAACM,MAAM,EAAEC,MAAM,CAAC;EACzB;AACJ;AACA;EACI,SAASD,MAAMA,CAAA,EAAG;IACd,IAAIE,KAAK,GAAGD,MAAM,CAACE,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI;IACrCD,KAAK,CAACE,SAAS,GAAG,QAAQ;IAC1BF,KAAK,CAACG,OAAO,GAAGH,KAAK,CAACI,KAAK,CAACC,GAAG,CAAC,QAAQ,CAAC;IACzCL,KAAK,CAACM,kBAAkB,CAAC,QAAQ,EAAEZ,OAAO,CAAC,GAAG,CAAC,CAAC;IAChDM,KAAK,CAACO,gBAAgB,CAAC,kBAAkB,EAAE,QAAQ,CAAC;IACpDP,KAAK,CAACO,gBAAgB,CAAC,gBAAgB,EAAE,QAAQ,CAAC;IAClDP,KAAK,CAACQ,UAAU,CAAC,CAAC;IAClB,OAAOR,KAAK;EAChB;EACA;AACJ;AACA;EACIF,MAAM,CAACW,SAAS,CAACC,IAAI,GAAG,YAAY;IAChCX,MAAM,CAACU,SAAS,CAACC,IAAI,CAACT,IAAI,CAAC,IAAI,CAAC;IAChC,IAAI,CAACE,OAAO,CAACQ,IAAI,CAAC;MAAE,GAAG,EAAE,IAAI,CAACC;IAAY,CAAC,CAAC;EAChD,CAAC;EACDC,MAAM,CAACC,cAAc,CAAChB,MAAM,CAACW,SAAS,EAAE,QAAQ,EAAE;IAC9C;AACR;AACA;IACQM,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACC,gBAAgB,CAAC,QAAQ,CAAC;IAC1C,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAACZ,kBAAkB,CAAC,QAAQ,EAAEY,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,CAAC;IACpE,CAAC;IACDC,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFP,MAAM,CAACC,cAAc,CAAChB,MAAM,CAACW,SAAS,EAAE,aAAa,EAAE;IACnD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQM,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAOnB,MAAM,CAACyB,eAAe,CAAC,IAAI,CAACC,MAAM,EAAEzB,KAAK,CAAC0B,GAAG,CAAC,IAAI,CAACC,UAAU,GAAG,CAAC,EAAE,IAAI,CAACC,WAAW,GAAG,CAAC,CAAC,CAAC;IACpG,CAAC;IACDN,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF;AACJ;AACA;AACA;AACA;EACItB,MAAM,CAACW,SAAS,CAACiB,cAAc,GAAG,YAAY;IAC1C,IAAId,WAAW,GAAG,IAAI,CAACA,WAAW;IAClC,IAAI,CAACe,KAAK,GAAG;MACTC,CAAC,EAAE,CAAChB,WAAW;MACfiB,CAAC,EAAE,CAACjB,WAAW;MACfkB,KAAK,EAAElB,WAAW,GAAG,CAAC;MACtBmB,MAAM,EAAEnB,WAAW,GAAG;IAC1B,CAAC;EACL,CAAC;EACD,OAAOd,MAAM;AACjB,CAAC,CAACL,MAAM,CAAE;AACV,SAASK,MAAM;AACf;AACA;AACA;AACA;AACA;AACA;AACAH,QAAQ,CAACqC,iBAAiB,CAAC,QAAQ,CAAC,GAAGlC,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}