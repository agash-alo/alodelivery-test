{"ast":null,"code":"import * as $math from \"./Math\";\nimport * as $type from \"./Type\";\n/**\r\n * ============================================================================\r\n * UTILITY FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Searches `array` for `value`.\r\n *\r\n * Returns -1 if not found.\r\n *\r\n * @param array  Source array\r\n * @param value  Value to search\r\n * @returns Index\r\n */\nexport function indexOf(array, value) {\n  var length = array.length;\n  for (var i = 0; i < length; ++i) {\n    // TODO handle NaN\n    if (array[i] === value) {\n      return i;\n    }\n  }\n  return -1;\n}\n/**\r\n * Calls `test` for each element in `array`.\r\n *\r\n * If `test` returns `true` then it immediately returns `true`.\r\n *\r\n * If `test` returns `false` for all of the elements in `array` then it returns `false`.\r\n *\r\n * @param array  Source array\r\n * @param test   Function which is called on each element\r\n * @returns Whether `test` returned true or not\r\n */\nexport function any(array, test) {\n  var length = array.length;\n  for (var i = 0; i < length; ++i) {\n    if (test(array[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n/**\r\n * Calls `fn` function for every member of array and returns a new array out\r\n * of all outputs.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n * @returns New array\r\n */\nexport function map(array, fn) {\n  var length = array.length;\n  var output = new Array(length);\n  for (var i = 0; i < length; ++i) {\n    output[i] = fn(array[i], i);\n  }\n  return output;\n}\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\nexport function each(array, fn) {\n  var length = array.length;\n  for (var i = 0; i < length; ++i) {\n    fn(array[i], i);\n  }\n}\n/**\r\n * Iterates through all items in array in reverse order and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\nexport function eachReverse(array, fn) {\n  var i = array.length;\n  while (i--) {\n    fn(array[i], i);\n  }\n}\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * If `fn` call evaluates to `false`, further iteration is cancelled.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\nexport function eachContinue(array, fn) {\n  var length = array.length;\n  for (var i = 0; i < length; ++i) {\n    if (!fn(array[i], i)) {\n      break;\n    }\n  }\n}\n/**\r\n * Shifts an item at `index` towards beginning of the array.\r\n *\r\n * @param array  Source array\r\n * @param index  Target element index\r\n */\nexport function shiftLeft(array, index) {\n  var length = array.length;\n  for (var i = index; i < length; ++i) {\n    array[i - index] = array[i];\n  }\n  array.length = length - index;\n}\n/**\r\n * Returns the last item of the array.\r\n *\r\n * @param array  Source array\r\n * @returns Last item\r\n */\nexport function last(array) {\n  var length = array.length;\n  return length ? array[length - 1] : undefined;\n}\n/**\r\n * Returns the first item of the array.\r\n *\r\n * @param array  Source array\r\n * @returns Last item\r\n */\nexport function first(array) {\n  return array[0];\n}\n/**\r\n * Inserts `element` into `array` at `index`.\r\n *\r\n * Caps `index` to be between `0` and `array.length`\r\n *\r\n * @param array    Source array\r\n * @param element  Item to insert\r\n * @param array    Index to insert item at\r\n */\nexport function insert(array, element, index) {\n  //if (array) {\n  index = $math.fitToRange(index, 0, array.length);\n  array.splice(index, 0, element);\n  //}\n}\n/**\r\n * Removes all copies of `element` from `array` (if they exist) and then\r\n * inserts `element` at `index`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item\r\n * @param array    Index to move item to\r\n */\nexport function setIndex(array, element, index) {\n  remove(array, element);\n  insert(array, element, index);\n}\n/**\r\n * Pushes all of the elements from `input` into `array`.\r\n *\r\n * @param array  Output array\r\n * @param input  Input array\r\n */\nexport function pushAll(array, input) {\n  var length = input.length;\n  for (var i = 0; i < length; ++i) {\n    array.push(input[i]);\n  }\n}\n/**\r\n * Removes `element` from `array`.\r\n *\r\n * If there are multiple copies of `element`, they are all removed.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to remove\r\n */\nexport function remove(array, element) {\n  var found = false;\n  var index = array.indexOf(element);\n  if (index !== -1) {\n    found = true;\n    array.splice(index, 1);\n    var length_1 = array.length;\n    while (index < length_1) {\n      // TODO handle NaN\n      if (array[index] === element) {\n        array.splice(index, 1);\n        --length_1;\n      } else {\n        ++index;\n      }\n    }\n  }\n  return found;\n}\n/**\r\n * Adds an `element` to `array`.\r\n *\r\n * If array already contains and item like this, it is removed before adding\r\n * it again.\r\n *\r\n * Optionally `toIndex` can be specified to add element at specific index.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to add\r\n * @param array    Index to move item to\r\n */\nexport function move(array, element, toIndex) {\n  // @todo this implementation must be the same as the List.moveValue method\n  // @todo don't do anything if the desired index is the same as the current index\n  var index = indexOf(array, element);\n  // @todo remove all old values rather than only the first ?\n  if (index !== -1) {\n    removeIndex(array, index);\n  }\n  if (toIndex == null) {\n    array.push(element);\n  } else {\n    insertIndex(array, toIndex, element);\n  }\n}\n/**\r\n * Inserts `element` into `array` at `index`.\r\n *\r\n * If `index` is not provided, it will insert `element` at the end of `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to add\r\n * @param array    Index to add item at\r\n */\nexport function add(array, element, index) {\n  // Append to the end if index is not set\n  if (!$type.isNumber(index)) {\n    array.push(element);\n  }\n  // Add to the beginning of array if index is 0\n  else if (index === 0) {\n    array.unshift(element);\n  }\n  // Add to indicated place if index is set\n  else {\n    array.splice(index, 0, element);\n  }\n}\n/**\r\n * Removes `element` from `array` (if it exists) and then inserts `element` at\r\n * `index`.\r\n *\r\n * If `index` is not provided, it will insert `element` at the end of `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to remove\r\n * @param array    Index to move item to\r\n */\nexport function replace(array, element, index) {\n  // check if exists\n  var ind = array.indexOf(element);\n  // remove if exists\n  if (ind !== -1) {\n    array.splice(ind, 1);\n  }\n  // add to end if index is not set\n  if (!$type.isNumber(index)) {\n    array.push(element);\n  }\n  // add to indicated place if index is set\n  else {\n    array.splice(index, 0, element);\n  }\n}\n/**\r\n * Wraps `input` in an array, if it isn't already an array.\r\n *\r\n * @param input  Source value\r\n * @return An array\r\n */\nexport function toArray(input) {\n  if (Array.isArray(input)) {\n    return input;\n  } else {\n    return [input];\n  }\n}\n/**\r\n * Returns `true` if `element` exists in `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to search for\r\n * @returns Item in array?\r\n */\nexport function has(array, element) {\n  return indexOf(array, element) !== -1;\n}\n/**\r\n * Returns a shallow copy of `array`.\r\n *\r\n * @param array  Source array\r\n * @returns Copy of the array\r\n */\nexport function copy(array) {\n  var length = array.length;\n  // It's faster to create the array with a pre-defined length\n  var output = new Array(length);\n  for (var i = 0; i < length; ++i) {\n    // Because the array has a pre-defined length, we have to assign rather than push\n    // This is also faster than pushing\n    output[i] = array[i];\n  }\n  return output;\n}\n/**\r\n * Returns a copy of `array` which contains all the elements between `start`\r\n * and `end`. (including `start` and excluding `end`)\r\n *\r\n * If `end` is not provided, it defaults to `array.length`.\r\n *\r\n * @param array  Source array\r\n * @param start  Start index\r\n * @param end    End index\r\n * @returns Part of the array\r\n */\nexport function slice(array, start, end) {\n  if (end === void 0) {\n    end = array.length;\n  }\n  var output = new Array(end - start);\n  for (var i = start; i < end; ++i) {\n    output[i - start] = array[i];\n  }\n  return output;\n}\n/**\r\n * Inserts a value into array at specific index.\r\n *\r\n * @param array  Source array\r\n * @param index  Index\r\n * @param value  Value to insert\r\n */\nexport function insertIndex(array, index, value) {\n  array.splice(index, 0, value);\n}\n/**\r\n * Removes a value from array at specific index.\r\n *\r\n * @param array  Source array\r\n * @param index  Index\r\n */\nexport function removeIndex(array, index) {\n  array.splice(index, 1);\n}\n/**\r\n * Orders an array using specific `ordering` function and returns index of\r\n * the `value`.\r\n *\r\n * @ignore Exclude from docs\r\n * @param array     Source array\r\n * @param ordering  An ordering function\r\n * @param value     Value to search for\r\n * @returns Result of the search\r\n */\nexport function getSortedIndex(array, ordering, value) {\n  var start = 0;\n  var end = array.length;\n  var found = false;\n  while (start < end) {\n    // TODO is this faster/slower than using Math.floor ?\n    var pivot = start + end >> 1;\n    var order = ordering(value, array[pivot]);\n    // less\n    if (order < 0) {\n      end = pivot;\n      // equal\n    } else if (order === 0) {\n      found = true;\n      start = pivot + 1;\n      // more\n    } else {\n      start = pivot + 1;\n    }\n  }\n  return {\n    found: found,\n    index: found ? start - 1 : start\n  };\n}\n/**\r\n * Searches the array using custom function and returns index of the item if\r\n * found.\r\n *\r\n * Will call `matches` function on all items of the array. If return value\r\n * evaluates to `true`, index is returned.\r\n *\r\n * Otherwise returns -1.\r\n *\r\n * @param array    Source array\r\n * @param matches  Search function\r\n * @returns Index of the item if found\r\n */\nexport function findIndex(array, matches) {\n  var length = array.length;\n  for (var i = 0; i < length; ++i) {\n    if (matches(array[i], i)) {\n      return i;\n    }\n  }\n  return -1;\n}\n/**\r\n * Searches the array using custom function and returns item if found.\r\n *\r\n * Will call `matches` function on all items of the array. If return value\r\n * evaluates to `true`, index is returned.\r\n *\r\n * Otherwise returns `undefined`.\r\n *\r\n * @param array    Source array\r\n * @param matches  Search function\r\n * @returns Item if found\r\n */\nexport function find(array, matches) {\n  var index = findIndex(array, matches);\n  if (index !== -1) {\n    return array[index];\n  }\n}\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\nexport function shuffle(array) {\n  // https://stackoverflow.com/a/2450976/449477\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n}\nexport function keepIf(array, keep) {\n  var length = array.length;\n  var i = 0;\n  while (i < length) {\n    if (keep(array[i])) {\n      ++i;\n    } else {\n      array.splice(i, 1);\n      --length;\n    }\n  }\n}","map":{"version":3,"names":["$math","$type","indexOf","array","value","length","i","any","test","map","fn","output","Array","each","eachReverse","eachContinue","shiftLeft","index","last","undefined","first","insert","element","fitToRange","splice","setIndex","remove","pushAll","input","push","found","length_1","move","toIndex","removeIndex","insertIndex","add","isNumber","unshift","replace","ind","toArray","isArray","has","copy","slice","start","end","getSortedIndex","ordering","pivot","order","findIndex","matches","find","shuffle","currentIndex","temporaryValue","randomIndex","Math","floor","random","keepIf","keep"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/utils/Array.js"],"sourcesContent":["import * as $math from \"./Math\";\r\nimport * as $type from \"./Type\";\r\n/**\r\n * ============================================================================\r\n * UTILITY FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Searches `array` for `value`.\r\n *\r\n * Returns -1 if not found.\r\n *\r\n * @param array  Source array\r\n * @param value  Value to search\r\n * @returns Index\r\n */\r\nexport function indexOf(array, value) {\r\n    var length = array.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        // TODO handle NaN\r\n        if (array[i] === value) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n/**\r\n * Calls `test` for each element in `array`.\r\n *\r\n * If `test` returns `true` then it immediately returns `true`.\r\n *\r\n * If `test` returns `false` for all of the elements in `array` then it returns `false`.\r\n *\r\n * @param array  Source array\r\n * @param test   Function which is called on each element\r\n * @returns Whether `test` returned true or not\r\n */\r\nexport function any(array, test) {\r\n    var length = array.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        if (test(array[i])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Calls `fn` function for every member of array and returns a new array out\r\n * of all outputs.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n * @returns New array\r\n */\r\nexport function map(array, fn) {\r\n    var length = array.length;\r\n    var output = new Array(length);\r\n    for (var i = 0; i < length; ++i) {\r\n        output[i] = fn(array[i], i);\r\n    }\r\n    return output;\r\n}\r\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\r\nexport function each(array, fn) {\r\n    var length = array.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        fn(array[i], i);\r\n    }\r\n}\r\n/**\r\n * Iterates through all items in array in reverse order and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\r\nexport function eachReverse(array, fn) {\r\n    var i = array.length;\r\n    while (i--) {\r\n        fn(array[i], i);\r\n    }\r\n}\r\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * If `fn` call evaluates to `false`, further iteration is cancelled.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\r\nexport function eachContinue(array, fn) {\r\n    var length = array.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        if (!fn(array[i], i)) {\r\n            break;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Shifts an item at `index` towards beginning of the array.\r\n *\r\n * @param array  Source array\r\n * @param index  Target element index\r\n */\r\nexport function shiftLeft(array, index) {\r\n    var length = array.length;\r\n    for (var i = index; i < length; ++i) {\r\n        array[i - index] = array[i];\r\n    }\r\n    array.length = length - index;\r\n}\r\n/**\r\n * Returns the last item of the array.\r\n *\r\n * @param array  Source array\r\n * @returns Last item\r\n */\r\nexport function last(array) {\r\n    var length = array.length;\r\n    return length ? array[length - 1] : undefined;\r\n}\r\n/**\r\n * Returns the first item of the array.\r\n *\r\n * @param array  Source array\r\n * @returns Last item\r\n */\r\nexport function first(array) {\r\n    return array[0];\r\n}\r\n/**\r\n * Inserts `element` into `array` at `index`.\r\n *\r\n * Caps `index` to be between `0` and `array.length`\r\n *\r\n * @param array    Source array\r\n * @param element  Item to insert\r\n * @param array    Index to insert item at\r\n */\r\nexport function insert(array, element, index) {\r\n    //if (array) {\r\n    index = $math.fitToRange(index, 0, array.length);\r\n    array.splice(index, 0, element);\r\n    //}\r\n}\r\n/**\r\n * Removes all copies of `element` from `array` (if they exist) and then\r\n * inserts `element` at `index`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item\r\n * @param array    Index to move item to\r\n */\r\nexport function setIndex(array, element, index) {\r\n    remove(array, element);\r\n    insert(array, element, index);\r\n}\r\n/**\r\n * Pushes all of the elements from `input` into `array`.\r\n *\r\n * @param array  Output array\r\n * @param input  Input array\r\n */\r\nexport function pushAll(array, input) {\r\n    var length = input.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        array.push(input[i]);\r\n    }\r\n}\r\n/**\r\n * Removes `element` from `array`.\r\n *\r\n * If there are multiple copies of `element`, they are all removed.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to remove\r\n */\r\nexport function remove(array, element) {\r\n    var found = false;\r\n    var index = array.indexOf(element);\r\n    if (index !== -1) {\r\n        found = true;\r\n        array.splice(index, 1);\r\n        var length_1 = array.length;\r\n        while (index < length_1) {\r\n            // TODO handle NaN\r\n            if (array[index] === element) {\r\n                array.splice(index, 1);\r\n                --length_1;\r\n            }\r\n            else {\r\n                ++index;\r\n            }\r\n        }\r\n    }\r\n    return found;\r\n}\r\n/**\r\n * Adds an `element` to `array`.\r\n *\r\n * If array already contains and item like this, it is removed before adding\r\n * it again.\r\n *\r\n * Optionally `toIndex` can be specified to add element at specific index.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to add\r\n * @param array    Index to move item to\r\n */\r\nexport function move(array, element, toIndex) {\r\n    // @todo this implementation must be the same as the List.moveValue method\r\n    // @todo don't do anything if the desired index is the same as the current index\r\n    var index = indexOf(array, element);\r\n    // @todo remove all old values rather than only the first ?\r\n    if (index !== -1) {\r\n        removeIndex(array, index);\r\n    }\r\n    if (toIndex == null) {\r\n        array.push(element);\r\n    }\r\n    else {\r\n        insertIndex(array, toIndex, element);\r\n    }\r\n}\r\n/**\r\n * Inserts `element` into `array` at `index`.\r\n *\r\n * If `index` is not provided, it will insert `element` at the end of `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to add\r\n * @param array    Index to add item at\r\n */\r\nexport function add(array, element, index) {\r\n    // Append to the end if index is not set\r\n    if (!$type.isNumber(index)) {\r\n        array.push(element);\r\n    }\r\n    // Add to the beginning of array if index is 0\r\n    else if (index === 0) {\r\n        array.unshift(element);\r\n    }\r\n    // Add to indicated place if index is set\r\n    else {\r\n        array.splice(index, 0, element);\r\n    }\r\n}\r\n/**\r\n * Removes `element` from `array` (if it exists) and then inserts `element` at\r\n * `index`.\r\n *\r\n * If `index` is not provided, it will insert `element` at the end of `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to remove\r\n * @param array    Index to move item to\r\n */\r\nexport function replace(array, element, index) {\r\n    // check if exists\r\n    var ind = array.indexOf(element);\r\n    // remove if exists\r\n    if (ind !== -1) {\r\n        array.splice(ind, 1);\r\n    }\r\n    // add to end if index is not set\r\n    if (!$type.isNumber(index)) {\r\n        array.push(element);\r\n    }\r\n    // add to indicated place if index is set\r\n    else {\r\n        array.splice(index, 0, element);\r\n    }\r\n}\r\n/**\r\n * Wraps `input` in an array, if it isn't already an array.\r\n *\r\n * @param input  Source value\r\n * @return An array\r\n */\r\nexport function toArray(input) {\r\n    if (Array.isArray(input)) {\r\n        return input;\r\n    }\r\n    else {\r\n        return [input];\r\n    }\r\n}\r\n/**\r\n * Returns `true` if `element` exists in `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to search for\r\n * @returns Item in array?\r\n */\r\nexport function has(array, element) {\r\n    return indexOf(array, element) !== -1;\r\n}\r\n/**\r\n * Returns a shallow copy of `array`.\r\n *\r\n * @param array  Source array\r\n * @returns Copy of the array\r\n */\r\nexport function copy(array) {\r\n    var length = array.length;\r\n    // It's faster to create the array with a pre-defined length\r\n    var output = new Array(length);\r\n    for (var i = 0; i < length; ++i) {\r\n        // Because the array has a pre-defined length, we have to assign rather than push\r\n        // This is also faster than pushing\r\n        output[i] = array[i];\r\n    }\r\n    return output;\r\n}\r\n/**\r\n * Returns a copy of `array` which contains all the elements between `start`\r\n * and `end`. (including `start` and excluding `end`)\r\n *\r\n * If `end` is not provided, it defaults to `array.length`.\r\n *\r\n * @param array  Source array\r\n * @param start  Start index\r\n * @param end    End index\r\n * @returns Part of the array\r\n */\r\nexport function slice(array, start, end) {\r\n    if (end === void 0) { end = array.length; }\r\n    var output = new Array(end - start);\r\n    for (var i = start; i < end; ++i) {\r\n        output[i - start] = array[i];\r\n    }\r\n    return output;\r\n}\r\n/**\r\n * Inserts a value into array at specific index.\r\n *\r\n * @param array  Source array\r\n * @param index  Index\r\n * @param value  Value to insert\r\n */\r\nexport function insertIndex(array, index, value) {\r\n    array.splice(index, 0, value);\r\n}\r\n/**\r\n * Removes a value from array at specific index.\r\n *\r\n * @param array  Source array\r\n * @param index  Index\r\n */\r\nexport function removeIndex(array, index) {\r\n    array.splice(index, 1);\r\n}\r\n/**\r\n * Orders an array using specific `ordering` function and returns index of\r\n * the `value`.\r\n *\r\n * @ignore Exclude from docs\r\n * @param array     Source array\r\n * @param ordering  An ordering function\r\n * @param value     Value to search for\r\n * @returns Result of the search\r\n */\r\nexport function getSortedIndex(array, ordering, value) {\r\n    var start = 0;\r\n    var end = array.length;\r\n    var found = false;\r\n    while (start < end) {\r\n        // TODO is this faster/slower than using Math.floor ?\r\n        var pivot = (start + end) >> 1;\r\n        var order = ordering(value, array[pivot]);\r\n        // less\r\n        if (order < 0) {\r\n            end = pivot;\r\n            // equal\r\n        }\r\n        else if (order === 0) {\r\n            found = true;\r\n            start = pivot + 1;\r\n            // more\r\n        }\r\n        else {\r\n            start = pivot + 1;\r\n        }\r\n    }\r\n    return {\r\n        found: found,\r\n        index: (found ? start - 1 : start)\r\n    };\r\n}\r\n/**\r\n * Searches the array using custom function and returns index of the item if\r\n * found.\r\n *\r\n * Will call `matches` function on all items of the array. If return value\r\n * evaluates to `true`, index is returned.\r\n *\r\n * Otherwise returns -1.\r\n *\r\n * @param array    Source array\r\n * @param matches  Search function\r\n * @returns Index of the item if found\r\n */\r\nexport function findIndex(array, matches) {\r\n    var length = array.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        if (matches(array[i], i)) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n/**\r\n * Searches the array using custom function and returns item if found.\r\n *\r\n * Will call `matches` function on all items of the array. If return value\r\n * evaluates to `true`, index is returned.\r\n *\r\n * Otherwise returns `undefined`.\r\n *\r\n * @param array    Source array\r\n * @param matches  Search function\r\n * @returns Item if found\r\n */\r\nexport function find(array, matches) {\r\n    var index = findIndex(array, matches);\r\n    if (index !== -1) {\r\n        return array[index];\r\n    }\r\n}\r\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\r\nexport function shuffle(array) {\r\n    // https://stackoverflow.com/a/2450976/449477\r\n    var currentIndex = array.length, temporaryValue, randomIndex;\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n        // And swap it with the current element.\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n    }\r\n}\r\nexport function keepIf(array, keep) {\r\n    var length = array.length;\r\n    var i = 0;\r\n    while (i < length) {\r\n        if (keep(array[i])) {\r\n            ++i;\r\n        }\r\n        else {\r\n            array.splice(i, 1);\r\n            --length;\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}