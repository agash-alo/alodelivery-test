{"ast":null,"code":"/**\r\n * JSON parser.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { DataParser } from \"./DataParser\";\nimport * as $object from \"../utils/Object\";\nimport * as $type from \"../utils/Type\";\n/**\r\n * A parser for JSON.\r\n *\r\n * @important\r\n */\nvar JSONParser = /** @class */function (_super) {\n  __extends(JSONParser, _super);\n  function JSONParser() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * Content-type suitable for JSON format.\r\n     */\n    _this.contentType = \"application/json\";\n    /**\r\n     * Parser options.\r\n     *\r\n     * @see {@link IJSONOptions} for description of each option\r\n     */\n    _this.options = {};\n    return _this;\n  }\n  /**\r\n   * Tests if the data is valid JSON.\r\n   *\r\n   * @param data  Source data\r\n   * @return Is it JSON?\r\n   */\n  JSONParser.isJSON = function (data) {\n    try {\n      // Try parsing JSON\n      JSON.parse(data);\n      // If we got to this point it means it's a valid JSON\n      return true;\n    } catch (e) {\n      return false;\n    }\n  };\n  /**\r\n   * Parses and returns data.\r\n   *\r\n   * @param data  Unparsed data\r\n   * @return Parsed data\r\n   */\n  JSONParser.prototype.parse = function (data) {\n    var _this = this;\n    // Init return\n    var res;\n    // Try parsing\n    try {\n      if ($type.hasValue(JSON)) {\n        res = JSON.parse(data);\n      }\n    } catch (e) {\n      return undefined;\n    }\n    // Do we need to cast some fields to numbers or dates?\n    var empty = $type.hasValue(this.options.emptyAs);\n    var numbers = this.parsableNumbers;\n    var dates = this.parsableDates;\n    if (Array.isArray(res) && (numbers || dates || empty)) {\n      var _loop_1 = function (i, len) {\n        var row = res[i];\n        $object.each(row, function (key, value) {\n          if (empty) {\n            row[key] = _this.maybeToEmpty(row[key]);\n          }\n          if (numbers) {\n            row[key] = _this.maybeToNumber(key, row[key]);\n          }\n          if (dates) {\n            row[key] = _this.maybeToDate(key, row[key]);\n          }\n        });\n      };\n      // Iterate through the data and check if it needs to be converted\n      for (var i = 0, len = res.length; i < len; i++) {\n        _loop_1(i, len);\n      }\n    }\n    // Convert to array\n    //return Array.isArray(res) ? res : [res];\n    return res;\n  };\n  return JSONParser;\n}(DataParser);\nexport { JSONParser };","map":{"version":3,"names":["__extends","DataParser","$object","$type","JSONParser","_super","_this","apply","arguments","contentType","options","isJSON","data","JSON","parse","e","prototype","res","hasValue","undefined","empty","emptyAs","numbers","parsableNumbers","dates","parsableDates","Array","isArray","_loop_1","i","len","row","each","key","value","maybeToEmpty","maybeToNumber","maybeToDate","length"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/data/JSONParser.js"],"sourcesContent":["/**\r\n * JSON parser.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { DataParser } from \"./DataParser\";\r\nimport * as $object from \"../utils/Object\";\r\nimport * as $type from \"../utils/Type\";\r\n/**\r\n * A parser for JSON.\r\n *\r\n * @important\r\n */\r\nvar JSONParser = /** @class */ (function (_super) {\r\n    __extends(JSONParser, _super);\r\n    function JSONParser() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        /**\r\n         * Content-type suitable for JSON format.\r\n         */\r\n        _this.contentType = \"application/json\";\r\n        /**\r\n         * Parser options.\r\n         *\r\n         * @see {@link IJSONOptions} for description of each option\r\n         */\r\n        _this.options = {};\r\n        return _this;\r\n    }\r\n    /**\r\n     * Tests if the data is valid JSON.\r\n     *\r\n     * @param data  Source data\r\n     * @return Is it JSON?\r\n     */\r\n    JSONParser.isJSON = function (data) {\r\n        try {\r\n            // Try parsing JSON\r\n            JSON.parse(data);\r\n            // If we got to this point it means it's a valid JSON\r\n            return true;\r\n        }\r\n        catch (e) {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Parses and returns data.\r\n     *\r\n     * @param data  Unparsed data\r\n     * @return Parsed data\r\n     */\r\n    JSONParser.prototype.parse = function (data) {\r\n        var _this = this;\r\n        // Init return\r\n        var res;\r\n        // Try parsing\r\n        try {\r\n            if ($type.hasValue(JSON)) {\r\n                res = JSON.parse(data);\r\n            }\r\n        }\r\n        catch (e) {\r\n            return undefined;\r\n        }\r\n        // Do we need to cast some fields to numbers or dates?\r\n        var empty = $type.hasValue(this.options.emptyAs);\r\n        var numbers = this.parsableNumbers;\r\n        var dates = this.parsableDates;\r\n        if (Array.isArray(res) && (numbers || dates || empty)) {\r\n            var _loop_1 = function (i, len) {\r\n                var row = res[i];\r\n                $object.each(row, function (key, value) {\r\n                    if (empty) {\r\n                        row[key] = _this.maybeToEmpty(row[key]);\r\n                    }\r\n                    if (numbers) {\r\n                        row[key] = _this.maybeToNumber(key, row[key]);\r\n                    }\r\n                    if (dates) {\r\n                        row[key] = _this.maybeToDate(key, row[key]);\r\n                    }\r\n                });\r\n            };\r\n            // Iterate through the data and check if it needs to be converted\r\n            for (var i = 0, len = res.length; i < len; i++) {\r\n                _loop_1(i, len);\r\n            }\r\n        }\r\n        // Convert to array\r\n        //return Array.isArray(res) ? res : [res];\r\n        return res;\r\n    };\r\n    return JSONParser;\r\n}(DataParser));\r\nexport { JSONParser };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}