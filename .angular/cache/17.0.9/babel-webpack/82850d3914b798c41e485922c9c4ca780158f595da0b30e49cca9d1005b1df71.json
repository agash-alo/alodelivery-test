{"ast":null,"code":"import { ObserversModule } from '@angular/cdk/observers';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Attribute, Inject, Optional, ViewChild, Input, Output, Directive, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n  providedIn: 'root',\n  factory: () => ({\n    disableToggleValue: false\n  })\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n/** @docs-private */\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n/** Change event object emitted by a MatSlideToggle. */\nclass MatSlideToggleChange {\n  constructor( /** The source MatSlideToggle of the event. */\n  source, /** The new `checked` value of the MatSlideToggle. */\n  checked) {\n    this.source = source;\n    this.checked = checked;\n  }\n}\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n}\nconst _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase))));\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\nclass MatSlideToggle extends _MatSlideToggleMixinBase {\n  constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, defaults, animationMode) {\n    super(elementRef);\n    this._focusMonitor = _focusMonitor;\n    this._changeDetectorRef = _changeDetectorRef;\n    this.defaults = defaults;\n    this._onChange = _ => {};\n    this._onTouched = () => {};\n    this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;\n    this._required = false;\n    this._checked = false;\n    /** Name value will be applied to the input element if present. */\n    this.name = null;\n    /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n    this.id = this._uniqueId;\n    /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n    this.labelPosition = 'after';\n    /** Used to set the aria-label attribute on the underlying input element. */\n    this.ariaLabel = null;\n    /** Used to set the aria-labelledby attribute on the underlying input element. */\n    this.ariaLabelledby = null;\n    /** An event will be dispatched each time the slide-toggle changes its value. */\n    this.change = new EventEmitter();\n    /**\n     * An event will be dispatched each time the slide-toggle input is toggled.\n     * This event is always emitted when the user toggles the slide toggle, but this does not mean\n     * the slide toggle's value has changed.\n     */\n    this.toggleChange = new EventEmitter();\n    this.tabIndex = parseInt(tabIndex) || 0;\n    this.color = this.defaultColor = defaults.color || 'accent';\n    this._noopAnimations = animationMode === 'NoopAnimations';\n  }\n  /** Whether the slide-toggle is required. */\n  get required() {\n    return this._required;\n  }\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n  }\n  /** Whether the slide-toggle element is checked or not. */\n  get checked() {\n    return this._checked;\n  }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** Returns the unique id for the visual hidden input. */\n  get inputId() {\n    return `${this.id || this._uniqueId}-input`;\n  }\n  ngAfterContentInit() {\n    this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n      // Only forward focus manually when it was received programmatically or through the\n      // keyboard. We should not do this for mouse/touch focus for two reasons:\n      // 1. It can prevent clicks from landing in Chrome (see #18269).\n      // 2. They're already handled by the wrapping `label` element.\n      if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n        this._inputElement.nativeElement.focus();\n      } else if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state\n        // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n        // error. See https://github.com/angular/angular/issues/17793. To work around this,\n        // we defer telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => this._onTouched());\n      }\n    });\n  }\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n    this.toggleChange.emit();\n    // When the slide toggle's config disables toggle change event by setting\n    // `disableToggleValue: true`, the slide toggle's value does not change, and the\n    // checked state of the underlying input needs to be changed back.\n    if (this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value) {\n    this.checked = !!value;\n  }\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n  /** Focuses the slide-toggle. */\n  focus(options, origin) {\n    if (origin) {\n      this._focusMonitor.focusVia(this._inputElement, origin, options);\n    } else {\n      this._inputElement.nativeElement.focus(options);\n    }\n  }\n  /** Toggles the checked state of the slide-toggle. */\n  toggle() {\n    this.checked = !this.checked;\n    this._onChange(this.checked);\n  }\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  _emitChangeEvent() {\n    this._onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and its children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\nMatSlideToggle.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-slide-toggle',\n    exportAs: 'matSlideToggle',\n    host: {\n      'class': 'mat-slide-toggle',\n      '[id]': 'id',\n      // Needs to be `-1` so it can still receive programmatic focus.\n      '[attr.tabindex]': 'disabled ? null : -1',\n      '[attr.aria-label]': 'null',\n      '[attr.aria-labelledby]': 'null',\n      '[class.mat-checked]': 'checked',\n      '[class.mat-disabled]': 'disabled',\n      '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n      '[class._mat-animation-noopable]': '_noopAnimations'\n    },\n    template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <div #toggleBar class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked.toString()\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer>\\n      <div class=\\\"mat-slide-toggle-thumb\\\"></div>\\n      <div class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: _noopAnimations ? 0 : 150}\\\">\\n\\n        <div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div>\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n    providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n    inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"]\n  }]\n}];\nMatSlideToggle.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: FocusMonitor\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}];\nMatSlideToggle.propDecorators = {\n  _thumbEl: [{\n    type: ViewChild,\n    args: ['thumbContainer']\n  }],\n  _thumbBarEl: [{\n    type: ViewChild,\n    args: ['toggleBar']\n  }],\n  name: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  labelPosition: [{\n    type: Input\n  }],\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  required: [{\n    type: Input\n  }],\n  checked: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }],\n  toggleChange: [{\n    type: Output\n  }],\n  _inputElement: [{\n    type: ViewChild,\n    args: ['input']\n  }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n  multi: true\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\nclass MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {}\nMatSlideToggleRequiredValidator.decorators = [{\n  type: Directive,\n  args: [{\n    selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n    providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** This module is used by both original and MDC-based slide-toggle implementations. */\nclass _MatSlideToggleRequiredValidatorModule {}\n_MatSlideToggleRequiredValidatorModule.decorators = [{\n  type: NgModule,\n  args: [{\n    exports: [MatSlideToggleRequiredValidator],\n    declarations: [MatSlideToggleRequiredValidator]\n  }]\n}];\nclass MatSlideToggleModule {}\nMatSlideToggleModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [_MatSlideToggleRequiredValidatorModule, MatRippleModule, MatCommonModule, ObserversModule],\n    exports: [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule],\n    declarations: [MatSlideToggle]\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule, MatSlideToggleRequiredValidator, _MatSlideToggleRequiredValidatorModule };","map":{"version":3,"names":["ObserversModule","InjectionToken","forwardRef","EventEmitter","Component","ViewEncapsulation","ChangeDetectionStrategy","ElementRef","ChangeDetectorRef","Attribute","Inject","Optional","ViewChild","Input","Output","Directive","NgModule","mixinTabIndex","mixinColor","mixinDisableRipple","mixinDisabled","MatRippleModule","MatCommonModule","FocusMonitor","coerceBooleanProperty","NG_VALUE_ACCESSOR","NG_VALIDATORS","CheckboxRequiredValidator","ANIMATION_MODULE_TYPE","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","providedIn","factory","disableToggleValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","provide","useExisting","MatSlideToggle","multi","MatSlideToggleChange","constructor","source","checked","MatSlideToggleBase","_elementRef","_MatSlideToggleMixinBase","elementRef","_focusMonitor","_changeDetectorRef","tabIndex","defaults","animationMode","_onChange","_","_onTouched","_uniqueId","_required","_checked","name","id","labelPosition","ariaLabel","ariaLabelledby","change","toggleChange","parseInt","color","defaultColor","_noopAnimations","required","value","markForCheck","inputId","ngAfterContentInit","monitor","subscribe","focusOrigin","_inputElement","nativeElement","focus","Promise","resolve","then","ngOnDestroy","stopMonitoring","_onChangeEvent","event","stopPropagation","emit","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","options","origin","focusVia","toggle","_onLabelTextChange","detectChanges","decorators","type","args","selector","exportAs","host","template","providers","inputs","encapsulation","None","changeDetection","OnPush","styles","ctorParameters","String","undefined","propDecorators","_thumbEl","_thumbBarEl","MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR","MatSlideToggleRequiredValidator","_MatSlideToggleRequiredValidatorModule","exports","declarations","MatSlideToggleModule","imports"],"sources":["D:/alodelivery test/node_modules/@angular/material/fesm2015/slide-toggle.js"],"sourcesContent":["import { ObserversModule } from '@angular/cdk/observers';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Attribute, Inject, Optional, ViewChild, Input, Output, Directive, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({ disableToggleValue: false })\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n/** @docs-private */\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSlideToggle),\n    multi: true\n};\n/** Change event object emitted by a MatSlideToggle. */\nclass MatSlideToggleChange {\n    constructor(\n    /** The source MatSlideToggle of the event. */\n    source, \n    /** The new `checked` value of the MatSlideToggle. */\n    checked) {\n        this.source = source;\n        this.checked = checked;\n    }\n}\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase))));\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\nclass MatSlideToggle extends _MatSlideToggleMixinBase {\n    constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, defaults, animationMode) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.defaults = defaults;\n        this._onChange = (_) => { };\n        this._onTouched = () => { };\n        this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;\n        this._required = false;\n        this._checked = false;\n        /** Name value will be applied to the input element if present. */\n        this.name = null;\n        /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n        this.id = this._uniqueId;\n        /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n        this.labelPosition = 'after';\n        /** Used to set the aria-label attribute on the underlying input element. */\n        this.ariaLabel = null;\n        /** Used to set the aria-labelledby attribute on the underlying input element. */\n        this.ariaLabelledby = null;\n        /** An event will be dispatched each time the slide-toggle changes its value. */\n        this.change = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle input is toggled.\n         * This event is always emitted when the user toggles the slide toggle, but this does not mean\n         * the slide toggle's value has changed.\n         */\n        this.toggleChange = new EventEmitter();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        this.color = this.defaultColor = defaults.color || 'accent';\n        this._noopAnimations = animationMode === 'NoopAnimations';\n    }\n    /** Whether the slide-toggle is required. */\n    get required() { return this._required; }\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /** Whether the slide-toggle element is checked or not. */\n    get checked() { return this._checked; }\n    set checked(value) {\n        this._checked = coerceBooleanProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Returns the unique id for the visual hidden input. */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    ngAfterContentInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe(focusOrigin => {\n            // Only forward focus manually when it was received programmatically or through the\n            // keyboard. We should not do this for mouse/touch focus for two reasons:\n            // 1. It can prevent clicks from landing in Chrome (see #18269).\n            // 2. They're already handled by the wrapping `label` element.\n            if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n                this._inputElement.nativeElement.focus();\n            }\n            else if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state\n                // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n                // error. See https://github.com/angular/angular/issues/17793. To work around this,\n                // we defer telling the form control it has been touched until the next tick.\n                Promise.resolve().then(() => this._onTouched());\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /** Method being called whenever the underlying input emits a change event. */\n    _onChangeEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the component's `change` output.\n        event.stopPropagation();\n        this.toggleChange.emit();\n        // When the slide toggle's config disables toggle change event by setting\n        // `disableToggleValue: true`, the slide toggle's value does not change, and the\n        // checked state of the underlying input needs to be changed back.\n        if (this.defaults.disableToggleValue) {\n            this._inputElement.nativeElement.checked = this.checked;\n            return;\n        }\n        // Sync the value from the underlying input element with the component instance.\n        this.checked = this._inputElement.nativeElement.checked;\n        // Emit our custom change event only if the underlying input emitted one. This ensures that\n        // there is no change event, when the checked state changes programmatically.\n        this._emitChangeEvent();\n    }\n    /** Method being called whenever the slide-toggle has been clicked. */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /** Implemented as a part of ControlValueAccessor. */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Focuses the slide-toggle. */\n    focus(options, origin) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        }\n        else {\n            this._inputElement.nativeElement.focus(options);\n        }\n    }\n    /** Toggles the checked state of the slide-toggle. */\n    toggle() {\n        this.checked = !this.checked;\n        this._onChange(this.checked);\n    }\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     */\n    _emitChangeEvent() {\n        this._onChange(this.checked);\n        this.change.emit(new MatSlideToggleChange(this, this.checked));\n    }\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n        // slide-toggle component will be only marked for check, but no actual change detection runs\n        // automatically. Instead of going back into the zone in order to trigger a change detection\n        // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n        // we only trigger an explicit change detection for the slide-toggle view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n}\nMatSlideToggle.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-slide-toggle',\n                exportAs: 'matSlideToggle',\n                host: {\n                    'class': 'mat-slide-toggle',\n                    '[id]': 'id',\n                    // Needs to be `-1` so it can still receive programmatic focus.\n                    '[attr.tabindex]': 'disabled ? null : -1',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[class.mat-checked]': 'checked',\n                    '[class.mat-disabled]': 'disabled',\n                    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': '_noopAnimations',\n                },\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <div #toggleBar class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked.toString()\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer>\\n      <div class=\\\"mat-slide-toggle-thumb\\\"></div>\\n      <div class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: _noopAnimations ? 0 : 150}\\\">\\n\\n        <div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div>\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n                inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"]\n            },] }\n];\nMatSlideToggle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatSlideToggle.propDecorators = {\n    _thumbEl: [{ type: ViewChild, args: ['thumbContainer',] }],\n    _thumbBarEl: [{ type: ViewChild, args: ['toggleBar',] }],\n    name: [{ type: Input }],\n    id: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    required: [{ type: Input }],\n    checked: [{ type: Input }],\n    change: [{ type: Output }],\n    toggleChange: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n    multi: true\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\nclass MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {\n}\nMatSlideToggleRequiredValidator.decorators = [\n    { type: Directive, args: [{\n                selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n                providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR],\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** This module is used by both original and MDC-based slide-toggle implementations. */\nclass _MatSlideToggleRequiredValidatorModule {\n}\n_MatSlideToggleRequiredValidatorModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [MatSlideToggleRequiredValidator],\n                declarations: [MatSlideToggleRequiredValidator],\n            },] }\n];\nclass MatSlideToggleModule {\n}\nMatSlideToggleModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatRippleModule,\n                    MatCommonModule,\n                    ObserversModule,\n                ],\n                exports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatSlideToggle,\n                    MatCommonModule\n                ],\n                declarations: [MatSlideToggle],\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule, MatSlideToggleRequiredValidator, _MatSlideToggleRequiredValidatorModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}