{"ast":null,"code":"import * as i2 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, QueryList, NgZone, Directive, ElementRef, Input, InjectionToken, Optional, EventEmitter, Output, NgModule } from '@angular/core';\nimport { Subject, Subscription, of } from 'rxjs';\nimport { hasModifierKey, A, Z, ZERO, NINE, END, HOME, LEFT_ARROW, RIGHT_ARROW, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { tap, debounceTime, filter, map, take } from 'rxjs/operators';\nimport { coerceBooleanProperty, coerceElement } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { Platform, _getFocusedElementPierceShadowDom, normalizePassiveListenerOptions, _getShadowRoot, PlatformModule } from '@angular/cdk/platform';\nimport { ContentObserver, ObserversModule } from '@angular/cdk/observers';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** IDs are delimited by an empty space, as per the spec. */\nconst ID_DELIMITER = ' ';\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction addAriaReferencedId(el, attr, id) {\n  const ids = getAriaReferenceIds(el, attr);\n  if (ids.some(existingId => existingId.trim() == id.trim())) {\n    return;\n  }\n  ids.push(id.trim());\n  el.setAttribute(attr, ids.join(ID_DELIMITER));\n}\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction removeAriaReferencedId(el, attr, id) {\n  const ids = getAriaReferenceIds(el, attr);\n  const filteredIds = ids.filter(val => val != id.trim());\n  if (filteredIds.length) {\n    el.setAttribute(attr, filteredIds.join(ID_DELIMITER));\n  } else {\n    el.removeAttribute(attr);\n  }\n}\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction getAriaReferenceIds(el, attr) {\n  // Get string array of all individual ids (whitespace delimited) in the attribute value\n  return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** ID used for the body container where all messages are appended. */\nconst MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n/** ID prefix used for each created message element. */\nconst CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n/** Attribute given to each host element that is described by a message element. */\nconst CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n/** Global incremental identifier for each registered message element. */\nlet nextId = 0;\n/** Global map of all registered message elements that have been placed into the document. */\nconst messageRegistry = new Map();\n/** Container for all registered messages. */\nlet messagesContainer = null;\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n */\nclass AriaDescriber {\n  constructor(_document) {\n    this._document = _document;\n  }\n  describe(hostElement, message, role) {\n    if (!this._canBeDescribed(hostElement, message)) {\n      return;\n    }\n    const key = getKey(message, role);\n    if (typeof message !== 'string') {\n      // We need to ensure that the element has an ID.\n      setMessageId(message);\n      messageRegistry.set(key, {\n        messageElement: message,\n        referenceCount: 0\n      });\n    } else if (!messageRegistry.has(key)) {\n      this._createMessageElement(message, role);\n    }\n    if (!this._isElementDescribedByMessage(hostElement, key)) {\n      this._addMessageReference(hostElement, key);\n    }\n  }\n  removeDescription(hostElement, message, role) {\n    if (!message || !this._isElementNode(hostElement)) {\n      return;\n    }\n    const key = getKey(message, role);\n    if (this._isElementDescribedByMessage(hostElement, key)) {\n      this._removeMessageReference(hostElement, key);\n    }\n    // If the message is a string, it means that it's one that we created for the\n    // consumer so we can remove it safely, otherwise we should leave it in place.\n    if (typeof message === 'string') {\n      const registeredMessage = messageRegistry.get(key);\n      if (registeredMessage && registeredMessage.referenceCount === 0) {\n        this._deleteMessageElement(key);\n      }\n    }\n    if (messagesContainer && messagesContainer.childNodes.length === 0) {\n      this._deleteMessagesContainer();\n    }\n  }\n  /** Unregisters all created message elements and removes the message container. */\n  ngOnDestroy() {\n    const describedElements = this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}]`);\n    for (let i = 0; i < describedElements.length; i++) {\n      this._removeCdkDescribedByReferenceIds(describedElements[i]);\n      describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n    if (messagesContainer) {\n      this._deleteMessagesContainer();\n    }\n    messageRegistry.clear();\n  }\n  /**\n   * Creates a new element in the visually hidden message container element with the message\n   * as its content and adds it to the message registry.\n   */\n  _createMessageElement(message, role) {\n    const messageElement = this._document.createElement('div');\n    setMessageId(messageElement);\n    messageElement.textContent = message;\n    if (role) {\n      messageElement.setAttribute('role', role);\n    }\n    this._createMessagesContainer();\n    messagesContainer.appendChild(messageElement);\n    messageRegistry.set(getKey(message, role), {\n      messageElement,\n      referenceCount: 0\n    });\n  }\n  /** Deletes the message element from the global messages container. */\n  _deleteMessageElement(key) {\n    const registeredMessage = messageRegistry.get(key);\n    const messageElement = registeredMessage && registeredMessage.messageElement;\n    if (messagesContainer && messageElement) {\n      messagesContainer.removeChild(messageElement);\n    }\n    messageRegistry.delete(key);\n  }\n  /** Creates the global container for all aria-describedby messages. */\n  _createMessagesContainer() {\n    if (!messagesContainer) {\n      const preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID);\n      // When going from the server to the client, we may end up in a situation where there's\n      // already a container on the page, but we don't have a reference to it. Clear the\n      // old container so we don't get duplicates. Doing this, instead of emptying the previous\n      // container, should be slightly faster.\n      if (preExistingContainer && preExistingContainer.parentNode) {\n        preExistingContainer.parentNode.removeChild(preExistingContainer);\n      }\n      messagesContainer = this._document.createElement('div');\n      messagesContainer.id = MESSAGES_CONTAINER_ID;\n      // We add `visibility: hidden` in order to prevent text in this container from\n      // being searchable by the browser's Ctrl + F functionality.\n      // Screen-readers will still read the description for elements with aria-describedby even\n      // when the description element is not visible.\n      messagesContainer.style.visibility = 'hidden';\n      // Even though we use `visibility: hidden`, we still apply `cdk-visually-hidden` so that\n      // the description element doesn't impact page layout.\n      messagesContainer.classList.add('cdk-visually-hidden');\n      this._document.body.appendChild(messagesContainer);\n    }\n  }\n  /** Deletes the global messages container. */\n  _deleteMessagesContainer() {\n    if (messagesContainer && messagesContainer.parentNode) {\n      messagesContainer.parentNode.removeChild(messagesContainer);\n      messagesContainer = null;\n    }\n  }\n  /** Removes all cdk-describedby messages that are hosted through the element. */\n  _removeCdkDescribedByReferenceIds(element) {\n    // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n    const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby').filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\n    element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n  }\n  /**\n   * Adds a message reference to the element using aria-describedby and increments the registered\n   * message's reference count.\n   */\n  _addMessageReference(element, key) {\n    const registeredMessage = messageRegistry.get(key);\n    // Add the aria-describedby reference and set the\n    // describedby_host attribute to mark the element.\n    addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n    element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\n    registeredMessage.referenceCount++;\n  }\n  /**\n   * Removes a message reference from the element using aria-describedby\n   * and decrements the registered message's reference count.\n   */\n  _removeMessageReference(element, key) {\n    const registeredMessage = messageRegistry.get(key);\n    registeredMessage.referenceCount--;\n    removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n    element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n  }\n  /** Returns true if the element has been described by the provided message ID. */\n  _isElementDescribedByMessage(element, key) {\n    const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n    const registeredMessage = messageRegistry.get(key);\n    const messageId = registeredMessage && registeredMessage.messageElement.id;\n    return !!messageId && referenceIds.indexOf(messageId) != -1;\n  }\n  /** Determines whether a message can be described on a particular element. */\n  _canBeDescribed(element, message) {\n    if (!this._isElementNode(element)) {\n      return false;\n    }\n    if (message && typeof message === 'object') {\n      // We'd have to make some assumptions about the description element's text, if the consumer\n      // passed in an element. Assume that if an element is passed in, the consumer has verified\n      // that it can be used as a description.\n      return true;\n    }\n    const trimmedMessage = message == null ? '' : `${message}`.trim();\n    const ariaLabel = element.getAttribute('aria-label');\n    // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the\n    // element, because screen readers will end up reading out the same text twice in a row.\n    return trimmedMessage ? !ariaLabel || ariaLabel.trim() !== trimmedMessage : false;\n  }\n  /** Checks whether a node is an Element node. */\n  _isElementNode(element) {\n    return element.nodeType === this._document.ELEMENT_NODE;\n  }\n}\nAriaDescriber.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function AriaDescriber_Factory() {\n    return new AriaDescriber(i0.ɵɵinject(i2.DOCUMENT));\n  },\n  token: AriaDescriber,\n  providedIn: \"root\"\n});\nAriaDescriber.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: 'root'\n  }]\n}];\nAriaDescriber.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n/** Gets a key that can be used to look messages up in the registry. */\nfunction getKey(message, role) {\n  return typeof message === 'string' ? `${role || ''}/${message}` : message;\n}\n/** Assigns a unique ID to an element, if it doesn't have one already. */\nfunction setMessageId(element) {\n  if (!element.id) {\n    element.id = `${CDK_DESCRIBEDBY_ID_PREFIX}-${nextId++}`;\n  }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nclass ListKeyManager {\n  constructor(_items) {\n    this._items = _items;\n    this._activeItemIndex = -1;\n    this._activeItem = null;\n    this._wrap = false;\n    this._letterKeyStream = new Subject();\n    this._typeaheadSubscription = Subscription.EMPTY;\n    this._vertical = true;\n    this._allowedModifierKeys = [];\n    this._homeAndEnd = false;\n    /**\n     * Predicate function that can be used to check whether an item should be skipped\n     * by the key manager. By default, disabled items are skipped.\n     */\n    this._skipPredicateFn = item => item.disabled;\n    // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n    this._pressedLetters = [];\n    /**\n     * Stream that emits any time the TAB key is pressed, so components can react\n     * when focus is shifted off of the list.\n     */\n    this.tabOut = new Subject();\n    /** Stream that emits whenever the active item of the list manager changes. */\n    this.change = new Subject();\n    // We allow for the items to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the items they want to manage (e.g. when the\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\n    if (_items instanceof QueryList) {\n      _items.changes.subscribe(newItems => {\n        if (this._activeItem) {\n          const itemArray = newItems.toArray();\n          const newIndex = itemArray.indexOf(this._activeItem);\n          if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n            this._activeItemIndex = newIndex;\n          }\n        }\n      });\n    }\n  }\n  /**\n   * Sets the predicate function that determines which items should be skipped by the\n   * list key manager.\n   * @param predicate Function that determines whether the given item should be skipped.\n   */\n  skipPredicate(predicate) {\n    this._skipPredicateFn = predicate;\n    return this;\n  }\n  /**\n   * Configures wrapping mode, which determines whether the active item will wrap to\n   * the other end of list when there are no more items in the given direction.\n   * @param shouldWrap Whether the list should wrap when reaching the end.\n   */\n  withWrap(shouldWrap = true) {\n    this._wrap = shouldWrap;\n    return this;\n  }\n  /**\n   * Configures whether the key manager should be able to move the selection vertically.\n   * @param enabled Whether vertical selection should be enabled.\n   */\n  withVerticalOrientation(enabled = true) {\n    this._vertical = enabled;\n    return this;\n  }\n  /**\n   * Configures the key manager to move the selection horizontally.\n   * Passing in `null` will disable horizontal movement.\n   * @param direction Direction in which the selection can be moved.\n   */\n  withHorizontalOrientation(direction) {\n    this._horizontal = direction;\n    return this;\n  }\n  /**\n   * Modifier keys which are allowed to be held down and whose default actions will be prevented\n   * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n   */\n  withAllowedModifierKeys(keys) {\n    this._allowedModifierKeys = keys;\n    return this;\n  }\n  /**\n   * Turns on typeahead mode which allows users to set the active item by typing.\n   * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n   */\n  withTypeAhead(debounceInterval = 200) {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && this._items.length && this._items.some(item => typeof item.getLabel !== 'function')) {\n      throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n    }\n    this._typeaheadSubscription.unsubscribe();\n    // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n    // and convert those letters back into a string. Afterwards find the first item that starts\n    // with that string and select it.\n    this._typeaheadSubscription = this._letterKeyStream.pipe(tap(letter => this._pressedLetters.push(letter)), debounceTime(debounceInterval), filter(() => this._pressedLetters.length > 0), map(() => this._pressedLetters.join(''))).subscribe(inputString => {\n      const items = this._getItemsArray();\n      // Start at 1 because we want to start searching at the item immediately\n      // following the current active item.\n      for (let i = 1; i < items.length + 1; i++) {\n        const index = (this._activeItemIndex + i) % items.length;\n        const item = items[index];\n        if (!this._skipPredicateFn(item) && item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {\n          this.setActiveItem(index);\n          break;\n        }\n      }\n      this._pressedLetters = [];\n    });\n    return this;\n  }\n  /**\n   * Configures the key manager to activate the first and last items\n   * respectively when the Home or End key is pressed.\n   * @param enabled Whether pressing the Home or End key activates the first/last item.\n   */\n  withHomeAndEnd(enabled = true) {\n    this._homeAndEnd = enabled;\n    return this;\n  }\n  setActiveItem(item) {\n    const previousActiveItem = this._activeItem;\n    this.updateActiveItem(item);\n    if (this._activeItem !== previousActiveItem) {\n      this.change.next(this._activeItemIndex);\n    }\n  }\n  /**\n   * Sets the active item depending on the key event passed in.\n   * @param event Keyboard event to be used for determining which element should be active.\n   */\n  onKeydown(event) {\n    const keyCode = event.keyCode;\n    const modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n    const isModifierAllowed = modifiers.every(modifier => {\n      return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n    });\n    switch (keyCode) {\n      case TAB:\n        this.tabOut.next();\n        return;\n      case DOWN_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n      case UP_ARROW:\n        if (this._vertical && isModifierAllowed) {\n          this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n      case RIGHT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n      case LEFT_ARROW:\n        if (this._horizontal && isModifierAllowed) {\n          this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n      case HOME:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setFirstItemActive();\n          break;\n        } else {\n          return;\n        }\n      case END:\n        if (this._homeAndEnd && isModifierAllowed) {\n          this.setLastItemActive();\n          break;\n        } else {\n          return;\n        }\n      default:\n        if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n          // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n          // otherwise fall back to resolving alphanumeric characters via the keyCode.\n          if (event.key && event.key.length === 1) {\n            this._letterKeyStream.next(event.key.toLocaleUpperCase());\n          } else if (keyCode >= A && keyCode <= Z || keyCode >= ZERO && keyCode <= NINE) {\n            this._letterKeyStream.next(String.fromCharCode(keyCode));\n          }\n        }\n        // Note that we return here, in order to avoid preventing\n        // the default action of non-navigational keys.\n        return;\n    }\n    this._pressedLetters = [];\n    event.preventDefault();\n  }\n  /** Index of the currently active item. */\n  get activeItemIndex() {\n    return this._activeItemIndex;\n  }\n  /** The active item. */\n  get activeItem() {\n    return this._activeItem;\n  }\n  /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n  isTyping() {\n    return this._pressedLetters.length > 0;\n  }\n  /** Sets the active item to the first enabled item in the list. */\n  setFirstItemActive() {\n    this._setActiveItemByIndex(0, 1);\n  }\n  /** Sets the active item to the last enabled item in the list. */\n  setLastItemActive() {\n    this._setActiveItemByIndex(this._items.length - 1, -1);\n  }\n  /** Sets the active item to the next enabled item in the list. */\n  setNextItemActive() {\n    this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n  }\n  /** Sets the active item to a previous enabled item in the list. */\n  setPreviousItemActive() {\n    this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive() : this._setActiveItemByDelta(-1);\n  }\n  updateActiveItem(item) {\n    const itemArray = this._getItemsArray();\n    const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n    const activeItem = itemArray[index];\n    // Explicitly check for `null` and `undefined` because other falsy values are valid.\n    this._activeItem = activeItem == null ? null : activeItem;\n    this._activeItemIndex = index;\n  }\n  /**\n   * This method sets the active item, given a list of items and the delta between the\n   * currently active item and the new active item. It will calculate differently\n   * depending on whether wrap mode is turned on.\n   */\n  _setActiveItemByDelta(delta) {\n    this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n  }\n  /**\n   * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n   * down the list until it finds an item that is not disabled, and it will wrap if it\n   * encounters either end of the list.\n   */\n  _setActiveInWrapMode(delta) {\n    const items = this._getItemsArray();\n    for (let i = 1; i <= items.length; i++) {\n      const index = (this._activeItemIndex + delta * i + items.length) % items.length;\n      const item = items[index];\n      if (!this._skipPredicateFn(item)) {\n        this.setActiveItem(index);\n        return;\n      }\n    }\n  }\n  /**\n   * Sets the active item properly given the default mode. In other words, it will\n   * continue to move down the list until it finds an item that is not disabled. If\n   * it encounters either end of the list, it will stop and not wrap.\n   */\n  _setActiveInDefaultMode(delta) {\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n  }\n  /**\n   * Sets the active item to the first enabled item starting at the index specified. If the\n   * item is disabled, it will move in the fallbackDelta direction until it either\n   * finds an enabled item or encounters the end of the list.\n   */\n  _setActiveItemByIndex(index, fallbackDelta) {\n    const items = this._getItemsArray();\n    if (!items[index]) {\n      return;\n    }\n    while (this._skipPredicateFn(items[index])) {\n      index += fallbackDelta;\n      if (!items[index]) {\n        return;\n      }\n    }\n    this.setActiveItem(index);\n  }\n  /** Returns the items as an array. */\n  _getItemsArray() {\n    return this._items instanceof QueryList ? this._items.toArray() : this._items;\n  }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ActiveDescendantKeyManager extends ListKeyManager {\n  setActiveItem(index) {\n    if (this.activeItem) {\n      this.activeItem.setInactiveStyles();\n    }\n    super.setActiveItem(index);\n    if (this.activeItem) {\n      this.activeItem.setActiveStyles();\n    }\n  }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass FocusKeyManager extends ListKeyManager {\n  constructor() {\n    super(...arguments);\n    this._origin = 'program';\n  }\n  /**\n   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n   * @param origin Focus origin to be used when focusing items.\n   */\n  setFocusOrigin(origin) {\n    this._origin = origin;\n    return this;\n  }\n  setActiveItem(item) {\n    super.setActiveItem(item);\n    if (this.activeItem) {\n      this.activeItem.focus(this._origin);\n    }\n  }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Configuration for the isFocusable method.\n */\nclass IsFocusableConfig {\n  constructor() {\n    /**\n     * Whether to count an element as focusable even if it is not currently visible.\n     */\n    this.ignoreVisibility = false;\n  }\n}\n// The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\nclass InteractivityChecker {\n  constructor(_platform) {\n    this._platform = _platform;\n  }\n  /**\n   * Gets whether an element is disabled.\n   *\n   * @param element Element to be checked.\n   * @returns Whether the element is disabled.\n   */\n  isDisabled(element) {\n    // This does not capture some cases, such as a non-form control with a disabled attribute or\n    // a form control inside of a disabled form, but should capture the most common cases.\n    return element.hasAttribute('disabled');\n  }\n  /**\n   * Gets whether an element is visible for the purposes of interactivity.\n   *\n   * This will capture states like `display: none` and `visibility: hidden`, but not things like\n   * being clipped by an `overflow: hidden` parent or being outside the viewport.\n   *\n   * @returns Whether the element is visible.\n   */\n  isVisible(element) {\n    return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n  }\n  /**\n   * Gets whether an element can be reached via Tab key.\n   * Assumes that the element has already been checked with isFocusable.\n   *\n   * @param element Element to be checked.\n   * @returns Whether the element is tabbable.\n   */\n  isTabbable(element) {\n    // Nothing is tabbable on the server 😎\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n    const frameElement = getFrameElement(getWindow(element));\n    if (frameElement) {\n      // Frame elements inherit their tabindex onto all child elements.\n      if (getTabIndexValue(frameElement) === -1) {\n        return false;\n      }\n      // Browsers disable tabbing to an element inside of an invisible frame.\n      if (!this.isVisible(frameElement)) {\n        return false;\n      }\n    }\n    let nodeName = element.nodeName.toLowerCase();\n    let tabIndexValue = getTabIndexValue(element);\n    if (element.hasAttribute('contenteditable')) {\n      return tabIndexValue !== -1;\n    }\n    if (nodeName === 'iframe' || nodeName === 'object') {\n      // The frame or object's content may be tabbable depending on the content, but it's\n      // not possibly to reliably detect the content of the frames. We always consider such\n      // elements as non-tabbable.\n      return false;\n    }\n    // In iOS, the browser only considers some specific elements as tabbable.\n    if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n      return false;\n    }\n    if (nodeName === 'audio') {\n      // Audio elements without controls enabled are never tabbable, regardless\n      // of the tabindex attribute explicitly being set.\n      if (!element.hasAttribute('controls')) {\n        return false;\n      }\n      // Audio elements with controls are by default tabbable unless the\n      // tabindex attribute is set to `-1` explicitly.\n      return tabIndexValue !== -1;\n    }\n    if (nodeName === 'video') {\n      // For all video elements, if the tabindex attribute is set to `-1`, the video\n      // is not tabbable. Note: We cannot rely on the default `HTMLElement.tabIndex`\n      // property as that one is set to `-1` in Chrome, Edge and Safari v13.1. The\n      // tabindex attribute is the source of truth here.\n      if (tabIndexValue === -1) {\n        return false;\n      }\n      // If the tabindex is explicitly set, and not `-1` (as per check before), the\n      // video element is always tabbable (regardless of whether it has controls or not).\n      if (tabIndexValue !== null) {\n        return true;\n      }\n      // Otherwise (when no explicit tabindex is set), a video is only tabbable if it\n      // has controls enabled. Firefox is special as videos are always tabbable regardless\n      // of whether there are controls or not.\n      return this._platform.FIREFOX || element.hasAttribute('controls');\n    }\n    return element.tabIndex >= 0;\n  }\n  /**\n   * Gets whether an element can be focused by the user.\n   *\n   * @param element Element to be checked.\n   * @param config The config object with options to customize this method's behavior\n   * @returns Whether the element is focusable.\n   */\n  isFocusable(element, config) {\n    // Perform checks in order of left to most expensive.\n    // Again, naive approach that does not capture many edge cases and browser quirks.\n    return isPotentiallyFocusable(element) && !this.isDisabled(element) && ((config === null || config === void 0 ? void 0 : config.ignoreVisibility) || this.isVisible(element));\n  }\n}\nInteractivityChecker.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function InteractivityChecker_Factory() {\n    return new InteractivityChecker(i0.ɵɵinject(i1.Platform));\n  },\n  token: InteractivityChecker,\n  providedIn: \"root\"\n});\nInteractivityChecker.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: 'root'\n  }]\n}];\nInteractivityChecker.ctorParameters = () => [{\n  type: Platform\n}];\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n */\nfunction getFrameElement(window) {\n  try {\n    return window.frameElement;\n  } catch (_a) {\n    return null;\n  }\n}\n/** Checks whether the specified element has any geometry / rectangles. */\nfunction hasGeometry(element) {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(element.offsetWidth || element.offsetHeight || typeof element.getClientRects === 'function' && element.getClientRects().length);\n}\n/** Gets whether an element's  */\nfunction isNativeFormElement(element) {\n  let nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input' || nodeName === 'select' || nodeName === 'button' || nodeName === 'textarea';\n}\n/** Gets whether an element is an `<input type=\"hidden\">`. */\nfunction isHiddenInput(element) {\n  return isInputElement(element) && element.type == 'hidden';\n}\n/** Gets whether an element is an anchor that has an href attribute. */\nfunction isAnchorWithHref(element) {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n/** Gets whether an element is an input element. */\nfunction isInputElement(element) {\n  return element.nodeName.toLowerCase() == 'input';\n}\n/** Gets whether an element is an anchor element. */\nfunction isAnchorElement(element) {\n  return element.nodeName.toLowerCase() == 'a';\n}\n/** Gets whether an element has a valid tabindex. */\nfunction hasValidTabIndex(element) {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n  let tabIndex = element.getAttribute('tabindex');\n  // IE11 parses tabindex=\"\" as the value \"-32768\"\n  if (tabIndex == '-32768') {\n    return false;\n  }\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n */\nfunction getTabIndexValue(element) {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  }\n  // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n  const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/** Checks whether the specified element is potentially tabbable on iOS */\nfunction isPotentiallyTabbableIOS(element) {\n  let nodeName = element.nodeName.toLowerCase();\n  let inputType = nodeName === 'input' && element.type;\n  return inputType === 'text' || inputType === 'password' || nodeName === 'select' || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n */\nfunction isPotentiallyFocusable(element) {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n  return isNativeFormElement(element) || isAnchorWithHref(element) || element.hasAttribute('contenteditable') || hasValidTabIndex(element);\n}\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\nfunction getWindow(node) {\n  // ownerDocument is null if `node` itself *is* a document.\n  return node.ownerDocument && node.ownerDocument.defaultView || window;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to be misaligned.\n *\n * @deprecated Use `ConfigurableFocusTrap` instead.\n * @breaking-change 11.0.0\n */\nclass FocusTrap {\n  constructor(_element, _checker, _ngZone, _document, deferAnchors = false) {\n    this._element = _element;\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._document = _document;\n    this._hasAttached = false;\n    // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\n    this.startAnchorListener = () => this.focusLastTabbableElement();\n    this.endAnchorListener = () => this.focusFirstTabbableElement();\n    this._enabled = true;\n    if (!deferAnchors) {\n      this.attachAnchors();\n    }\n  }\n  /** Whether the focus trap is active. */\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(value) {\n    this._enabled = value;\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(value, this._startAnchor);\n      this._toggleAnchorTabIndex(value, this._endAnchor);\n    }\n  }\n  /** Destroys the focus trap by cleaning up the anchors. */\n  destroy() {\n    const startAnchor = this._startAnchor;\n    const endAnchor = this._endAnchor;\n    if (startAnchor) {\n      startAnchor.removeEventListener('focus', this.startAnchorListener);\n      if (startAnchor.parentNode) {\n        startAnchor.parentNode.removeChild(startAnchor);\n      }\n    }\n    if (endAnchor) {\n      endAnchor.removeEventListener('focus', this.endAnchorListener);\n      if (endAnchor.parentNode) {\n        endAnchor.parentNode.removeChild(endAnchor);\n      }\n    }\n    this._startAnchor = this._endAnchor = null;\n    this._hasAttached = false;\n  }\n  /**\n   * Inserts the anchors into the DOM. This is usually done automatically\n   * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n   * @returns Whether the focus trap managed to attach successfully. This may not be the case\n   * if the target element isn't currently in the DOM.\n   */\n  attachAnchors() {\n    // If we're not on the browser, there can be no focus to trap.\n    if (this._hasAttached) {\n      return true;\n    }\n    this._ngZone.runOutsideAngular(() => {\n      if (!this._startAnchor) {\n        this._startAnchor = this._createAnchor();\n        this._startAnchor.addEventListener('focus', this.startAnchorListener);\n      }\n      if (!this._endAnchor) {\n        this._endAnchor = this._createAnchor();\n        this._endAnchor.addEventListener('focus', this.endAnchorListener);\n      }\n    });\n    if (this._element.parentNode) {\n      this._element.parentNode.insertBefore(this._startAnchor, this._element);\n      this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);\n      this._hasAttached = true;\n    }\n    return this._hasAttached;\n  }\n  /**\n   * Waits for the zone to stabilize, then either focuses the first element that the\n   * user specified, or the first tabbable element.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n  focusInitialElementWhenReady(options) {\n    return new Promise(resolve => {\n      this._executeOnStable(() => resolve(this.focusInitialElement(options)));\n    });\n  }\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the first tabbable element within the focus trap region.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n  focusFirstTabbableElementWhenReady(options) {\n    return new Promise(resolve => {\n      this._executeOnStable(() => resolve(this.focusFirstTabbableElement(options)));\n    });\n  }\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the last tabbable element within the focus trap region.\n   * @returns Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfully.\n   */\n  focusLastTabbableElementWhenReady(options) {\n    return new Promise(resolve => {\n      this._executeOnStable(() => resolve(this.focusLastTabbableElement(options)));\n    });\n  }\n  /**\n   * Get the specified boundary element of the trapped region.\n   * @param bound The boundary to get (start or end of trapped region).\n   * @returns The boundary element.\n   */\n  _getRegionBoundary(bound) {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    let markers = this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` + `[cdkFocusRegion${bound}], ` + `[cdk-focus-${bound}]`);\n    for (let i = 0; i < markers.length; i++) {\n      // @breaking-change 8.0.0\n      if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` + `use 'cdkFocusRegion${bound}' instead. The deprecated ` + `attribute will be removed in 8.0.0.`, markers[i]);\n      } else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` + `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` + `will be removed in 8.0.0.`, markers[i]);\n      }\n    }\n    if (bound == 'start') {\n      return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n    }\n    return markers.length ? markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n  }\n  /**\n   * Focuses the element that should be focused when the focus trap is initialized.\n   * @returns Whether focus was moved successfully.\n   */\n  focusInitialElement(options) {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    const redirectToElement = this._element.querySelector(`[cdk-focus-initial], ` + `[cdkFocusInitial]`);\n    if (redirectToElement) {\n      // @breaking-change 8.0.0\n      if (redirectToElement.hasAttribute(`cdk-focus-initial`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` + `use 'cdkFocusInitial' instead. The deprecated attribute ` + `will be removed in 8.0.0`, redirectToElement);\n      }\n      // Warn the consumer if the element they've pointed to\n      // isn't focusable, when not in production mode.\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._checker.isFocusable(redirectToElement)) {\n        console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);\n      }\n      if (!this._checker.isFocusable(redirectToElement)) {\n        const focusableChild = this._getFirstTabbableElement(redirectToElement);\n        focusableChild === null || focusableChild === void 0 ? void 0 : focusableChild.focus(options);\n        return !!focusableChild;\n      }\n      redirectToElement.focus(options);\n      return true;\n    }\n    return this.focusFirstTabbableElement(options);\n  }\n  /**\n   * Focuses the first tabbable element within the focus trap region.\n   * @returns Whether focus was moved successfully.\n   */\n  focusFirstTabbableElement(options) {\n    const redirectToElement = this._getRegionBoundary('start');\n    if (redirectToElement) {\n      redirectToElement.focus(options);\n    }\n    return !!redirectToElement;\n  }\n  /**\n   * Focuses the last tabbable element within the focus trap region.\n   * @returns Whether focus was moved successfully.\n   */\n  focusLastTabbableElement(options) {\n    const redirectToElement = this._getRegionBoundary('end');\n    if (redirectToElement) {\n      redirectToElement.focus(options);\n    }\n    return !!redirectToElement;\n  }\n  /**\n   * Checks whether the focus trap has successfully been attached.\n   */\n  hasAttached() {\n    return this._hasAttached;\n  }\n  /** Get the first tabbable element from a DOM subtree (inclusive). */\n  _getFirstTabbableElement(root) {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n    // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall\n    // back to `childNodes` which includes text nodes, comments etc.\n    let children = root.children || root.childNodes;\n    for (let i = 0; i < children.length; i++) {\n      let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getFirstTabbableElement(children[i]) : null;\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n    return null;\n  }\n  /** Get the last tabbable element from a DOM subtree (inclusive). */\n  _getLastTabbableElement(root) {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n    // Iterate in reverse DOM order.\n    let children = root.children || root.childNodes;\n    for (let i = children.length - 1; i >= 0; i--) {\n      let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getLastTabbableElement(children[i]) : null;\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n    return null;\n  }\n  /** Creates an anchor element. */\n  _createAnchor() {\n    const anchor = this._document.createElement('div');\n    this._toggleAnchorTabIndex(this._enabled, anchor);\n    anchor.classList.add('cdk-visually-hidden');\n    anchor.classList.add('cdk-focus-trap-anchor');\n    anchor.setAttribute('aria-hidden', 'true');\n    return anchor;\n  }\n  /**\n   * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n   * @param isEnabled Whether the focus trap is enabled.\n   * @param anchor Anchor on which to toggle the tabindex.\n   */\n  _toggleAnchorTabIndex(isEnabled, anchor) {\n    // Remove the tabindex completely, rather than setting it to -1, because if the\n    // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n    isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n  }\n  /**\n   * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.\n   * @param enabled: Whether the anchors should trap Tab.\n   */\n  toggleAnchors(enabled) {\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(enabled, this._startAnchor);\n      this._toggleAnchorTabIndex(enabled, this._endAnchor);\n    }\n  }\n  /** Executes a function when the zone is stable. */\n  _executeOnStable(fn) {\n    if (this._ngZone.isStable) {\n      fn();\n    } else {\n      this._ngZone.onStable.pipe(take(1)).subscribe(fn);\n    }\n  }\n}\n/**\n * Factory that allows easy instantiation of focus traps.\n * @deprecated Use `ConfigurableFocusTrapFactory` instead.\n * @breaking-change 11.0.0\n */\nclass FocusTrapFactory {\n  constructor(_checker, _ngZone, _document) {\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._document = _document;\n  }\n  /**\n   * Creates a focus-trapped region around the given element.\n   * @param element The element around which focus will be trapped.\n   * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\n   *     manually by the user.\n   * @returns The created focus trap instance.\n   */\n  create(element, deferCaptureElements = false) {\n    return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);\n  }\n}\nFocusTrapFactory.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function FocusTrapFactory_Factory() {\n    return new FocusTrapFactory(i0.ɵɵinject(InteractivityChecker), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.DOCUMENT));\n  },\n  token: FocusTrapFactory,\n  providedIn: \"root\"\n});\nFocusTrapFactory.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: 'root'\n  }]\n}];\nFocusTrapFactory.ctorParameters = () => [{\n  type: InteractivityChecker\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n/** Directive for trapping focus within a region. */\nclass CdkTrapFocus {\n  constructor(_elementRef, _focusTrapFactory,\n  /**\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 13.0.0\n   */\n  _document) {\n    this._elementRef = _elementRef;\n    this._focusTrapFactory = _focusTrapFactory;\n    /** Previously focused element to restore focus to upon destroy when using autoCapture. */\n    this._previouslyFocusedElement = null;\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n  }\n  /** Whether the focus trap is active. */\n  get enabled() {\n    return this.focusTrap.enabled;\n  }\n  set enabled(value) {\n    this.focusTrap.enabled = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the directive should automatically move focus into the trapped region upon\n   * initialization and return focus to the previous activeElement upon destruction.\n   */\n  get autoCapture() {\n    return this._autoCapture;\n  }\n  set autoCapture(value) {\n    this._autoCapture = coerceBooleanProperty(value);\n  }\n  ngOnDestroy() {\n    this.focusTrap.destroy();\n    // If we stored a previously focused element when using autoCapture, return focus to that\n    // element now that the trapped region is being destroyed.\n    if (this._previouslyFocusedElement) {\n      this._previouslyFocusedElement.focus();\n      this._previouslyFocusedElement = null;\n    }\n  }\n  ngAfterContentInit() {\n    this.focusTrap.attachAnchors();\n    if (this.autoCapture) {\n      this._captureFocus();\n    }\n  }\n  ngDoCheck() {\n    if (!this.focusTrap.hasAttached()) {\n      this.focusTrap.attachAnchors();\n    }\n  }\n  ngOnChanges(changes) {\n    const autoCaptureChange = changes['autoCapture'];\n    if (autoCaptureChange && !autoCaptureChange.firstChange && this.autoCapture && this.focusTrap.hasAttached()) {\n      this._captureFocus();\n    }\n  }\n  _captureFocus() {\n    this._previouslyFocusedElement = _getFocusedElementPierceShadowDom();\n    this.focusTrap.focusInitialElementWhenReady();\n  }\n}\nCdkTrapFocus.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[cdkTrapFocus]',\n    exportAs: 'cdkTrapFocus'\n  }]\n}];\nCdkTrapFocus.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: FocusTrapFactory\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\nCdkTrapFocus.propDecorators = {\n  enabled: [{\n    type: Input,\n    args: ['cdkTrapFocus']\n  }],\n  autoCapture: [{\n    type: Input,\n    args: ['cdkTrapFocusAutoCapture']\n  }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class uses a strategy pattern that determines how it traps focus.\n * See FocusTrapInertStrategy.\n */\nclass ConfigurableFocusTrap extends FocusTrap {\n  constructor(_element, _checker, _ngZone, _document, _focusTrapManager, _inertStrategy, config) {\n    super(_element, _checker, _ngZone, _document, config.defer);\n    this._focusTrapManager = _focusTrapManager;\n    this._inertStrategy = _inertStrategy;\n    this._focusTrapManager.register(this);\n  }\n  /** Whether the FocusTrap is enabled. */\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(value) {\n    this._enabled = value;\n    if (this._enabled) {\n      this._focusTrapManager.register(this);\n    } else {\n      this._focusTrapManager.deregister(this);\n    }\n  }\n  /** Notifies the FocusTrapManager that this FocusTrap will be destroyed. */\n  destroy() {\n    this._focusTrapManager.deregister(this);\n    super.destroy();\n  }\n  /** @docs-private Implemented as part of ManagedFocusTrap. */\n  _enable() {\n    this._inertStrategy.preventFocus(this);\n    this.toggleAnchors(true);\n  }\n  /** @docs-private Implemented as part of ManagedFocusTrap. */\n  _disable() {\n    this._inertStrategy.allowFocus(this);\n    this.toggleAnchors(false);\n  }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The injection token used to specify the inert strategy. */\nconst FOCUS_TRAP_INERT_STRATEGY = new InjectionToken('FOCUS_TRAP_INERT_STRATEGY');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** IE 11 compatible closest implementation that is able to start from non-Element Nodes. */\nfunction closest(element, selector) {\n  if (!(element instanceof Node)) {\n    return null;\n  }\n  let curr = element;\n  while (curr != null && !(curr instanceof Element)) {\n    curr = curr.parentNode;\n  }\n  return curr && (hasNativeClosest ? curr.closest(selector) : polyfillClosest(curr, selector));\n}\n/** Polyfill for browsers without Element.closest. */\nfunction polyfillClosest(element, selector) {\n  let curr = element;\n  while (curr != null && !(curr instanceof Element && matches(curr, selector))) {\n    curr = curr.parentNode;\n  }\n  return curr || null;\n}\nconst hasNativeClosest = typeof Element != 'undefined' && !!Element.prototype.closest;\n/** IE 11 compatible matches implementation. */\nfunction matches(element, selector) {\n  return element.matches ? element.matches(selector) : element['msMatchesSelector'](selector);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Lightweight FocusTrapInertStrategy that adds a document focus event\n * listener to redirect focus back inside the FocusTrap.\n */\nclass EventListenerFocusTrapInertStrategy {\n  constructor() {\n    /** Focus event handler. */\n    this._listener = null;\n  }\n  /** Adds a document event listener that keeps focus inside the FocusTrap. */\n  preventFocus(focusTrap) {\n    // Ensure there's only one listener per document\n    if (this._listener) {\n      focusTrap._document.removeEventListener('focus', this._listener, true);\n    }\n    this._listener = e => this._trapFocus(focusTrap, e);\n    focusTrap._ngZone.runOutsideAngular(() => {\n      focusTrap._document.addEventListener('focus', this._listener, true);\n    });\n  }\n  /** Removes the event listener added in preventFocus. */\n  allowFocus(focusTrap) {\n    if (!this._listener) {\n      return;\n    }\n    focusTrap._document.removeEventListener('focus', this._listener, true);\n    this._listener = null;\n  }\n  /**\n   * Refocuses the first element in the FocusTrap if the focus event target was outside\n   * the FocusTrap.\n   *\n   * This is an event listener callback. The event listener is added in runOutsideAngular,\n   * so all this code runs outside Angular as well.\n   */\n  _trapFocus(focusTrap, event) {\n    const target = event.target;\n    const focusTrapRoot = focusTrap._element;\n    // Don't refocus if target was in an overlay, because the overlay might be associated\n    // with an element inside the FocusTrap, ex. mat-select.\n    if (!focusTrapRoot.contains(target) && closest(target, 'div.cdk-overlay-pane') === null) {\n      // Some legacy FocusTrap usages have logic that focuses some element on the page\n      // just before FocusTrap is destroyed. For backwards compatibility, wait\n      // to be sure FocusTrap is still enabled before refocusing.\n      setTimeout(() => {\n        // Check whether focus wasn't put back into the focus trap while the timeout was pending.\n        if (focusTrap.enabled && !focusTrapRoot.contains(focusTrap._document.activeElement)) {\n          focusTrap.focusFirstTabbableElement();\n        }\n      });\n    }\n  }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injectable that ensures only the most recently enabled FocusTrap is active. */\nclass FocusTrapManager {\n  constructor() {\n    // A stack of the FocusTraps on the page. Only the FocusTrap at the\n    // top of the stack is active.\n    this._focusTrapStack = [];\n  }\n  /**\n   * Disables the FocusTrap at the top of the stack, and then pushes\n   * the new FocusTrap onto the stack.\n   */\n  register(focusTrap) {\n    // Dedupe focusTraps that register multiple times.\n    this._focusTrapStack = this._focusTrapStack.filter(ft => ft !== focusTrap);\n    let stack = this._focusTrapStack;\n    if (stack.length) {\n      stack[stack.length - 1]._disable();\n    }\n    stack.push(focusTrap);\n    focusTrap._enable();\n  }\n  /**\n   * Removes the FocusTrap from the stack, and activates the\n   * FocusTrap that is the new top of the stack.\n   */\n  deregister(focusTrap) {\n    focusTrap._disable();\n    const stack = this._focusTrapStack;\n    const i = stack.indexOf(focusTrap);\n    if (i !== -1) {\n      stack.splice(i, 1);\n      if (stack.length) {\n        stack[stack.length - 1]._enable();\n      }\n    }\n  }\n}\nFocusTrapManager.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function FocusTrapManager_Factory() {\n    return new FocusTrapManager();\n  },\n  token: FocusTrapManager,\n  providedIn: \"root\"\n});\nFocusTrapManager.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: 'root'\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Factory that allows easy instantiation of configurable focus traps. */\nclass ConfigurableFocusTrapFactory {\n  constructor(_checker, _ngZone, _focusTrapManager, _document, _inertStrategy) {\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._focusTrapManager = _focusTrapManager;\n    this._document = _document;\n    // TODO split up the strategies into different modules, similar to DateAdapter.\n    this._inertStrategy = _inertStrategy || new EventListenerFocusTrapInertStrategy();\n  }\n  create(element, config = {\n    defer: false\n  }) {\n    let configObject;\n    if (typeof config === 'boolean') {\n      configObject = {\n        defer: config\n      };\n    } else {\n      configObject = config;\n    }\n    return new ConfigurableFocusTrap(element, this._checker, this._ngZone, this._document, this._focusTrapManager, this._inertStrategy, configObject);\n  }\n}\nConfigurableFocusTrapFactory.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function ConfigurableFocusTrapFactory_Factory() {\n    return new ConfigurableFocusTrapFactory(i0.ɵɵinject(InteractivityChecker), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(FocusTrapManager), i0.ɵɵinject(i2.DOCUMENT), i0.ɵɵinject(FOCUS_TRAP_INERT_STRATEGY, 8));\n  },\n  token: ConfigurableFocusTrapFactory,\n  providedIn: \"root\"\n});\nConfigurableFocusTrapFactory.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: 'root'\n  }]\n}];\nConfigurableFocusTrapFactory.ctorParameters = () => [{\n  type: InteractivityChecker\n}, {\n  type: NgZone\n}, {\n  type: FocusTrapManager\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [FOCUS_TRAP_INERT_STRATEGY]\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken('liveAnnouncerElement', {\n  providedIn: 'root',\n  factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY\n});\n/** @docs-private */\nfunction LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {\n  return null;\n}\n/** Injection token that can be used to configure the default options for the LiveAnnouncer. */\nconst LIVE_ANNOUNCER_DEFAULT_OPTIONS = new InjectionToken('LIVE_ANNOUNCER_DEFAULT_OPTIONS');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass LiveAnnouncer {\n  constructor(elementToken, _ngZone, _document, _defaultOptions) {\n    this._ngZone = _ngZone;\n    this._defaultOptions = _defaultOptions;\n    // We inject the live element and document as `any` because the constructor signature cannot\n    // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n    // a class decorator causes TypeScript to preserve the constructor signature types.\n    this._document = _document;\n    this._liveElement = elementToken || this._createLiveElement();\n  }\n  announce(message, ...args) {\n    const defaultOptions = this._defaultOptions;\n    let politeness;\n    let duration;\n    if (args.length === 1 && typeof args[0] === 'number') {\n      duration = args[0];\n    } else {\n      [politeness, duration] = args;\n    }\n    this.clear();\n    clearTimeout(this._previousTimeout);\n    if (!politeness) {\n      politeness = defaultOptions && defaultOptions.politeness ? defaultOptions.politeness : 'polite';\n    }\n    if (duration == null && defaultOptions) {\n      duration = defaultOptions.duration;\n    }\n    // TODO: ensure changing the politeness works on all environments we support.\n    this._liveElement.setAttribute('aria-live', politeness);\n    // This 100ms timeout is necessary for some browser + screen-reader combinations:\n    // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n    // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n    //   second time without clearing and then using a non-zero delay.\n    // (using JAWS 17 at time of this writing).\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        clearTimeout(this._previousTimeout);\n        this._previousTimeout = setTimeout(() => {\n          this._liveElement.textContent = message;\n          resolve();\n          if (typeof duration === 'number') {\n            this._previousTimeout = setTimeout(() => this.clear(), duration);\n          }\n        }, 100);\n      });\n    });\n  }\n  /**\n   * Clears the current text from the announcer element. Can be used to prevent\n   * screen readers from reading the text out again while the user is going\n   * through the page landmarks.\n   */\n  clear() {\n    if (this._liveElement) {\n      this._liveElement.textContent = '';\n    }\n  }\n  ngOnDestroy() {\n    clearTimeout(this._previousTimeout);\n    if (this._liveElement && this._liveElement.parentNode) {\n      this._liveElement.parentNode.removeChild(this._liveElement);\n      this._liveElement = null;\n    }\n  }\n  _createLiveElement() {\n    const elementClass = 'cdk-live-announcer-element';\n    const previousElements = this._document.getElementsByClassName(elementClass);\n    const liveEl = this._document.createElement('div');\n    // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n    for (let i = 0; i < previousElements.length; i++) {\n      previousElements[i].parentNode.removeChild(previousElements[i]);\n    }\n    liveEl.classList.add(elementClass);\n    liveEl.classList.add('cdk-visually-hidden');\n    liveEl.setAttribute('aria-atomic', 'true');\n    liveEl.setAttribute('aria-live', 'polite');\n    this._document.body.appendChild(liveEl);\n    return liveEl;\n  }\n}\nLiveAnnouncer.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function LiveAnnouncer_Factory() {\n    return new LiveAnnouncer(i0.ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.DOCUMENT), i0.ɵɵinject(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8));\n  },\n  token: LiveAnnouncer,\n  providedIn: \"root\"\n});\nLiveAnnouncer.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: 'root'\n  }]\n}];\nLiveAnnouncer.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]\n  }]\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS]\n  }]\n}];\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\nclass CdkAriaLive {\n  constructor(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {\n    this._elementRef = _elementRef;\n    this._liveAnnouncer = _liveAnnouncer;\n    this._contentObserver = _contentObserver;\n    this._ngZone = _ngZone;\n    this._politeness = 'polite';\n  }\n  /** The aria-live politeness level to use when announcing messages. */\n  get politeness() {\n    return this._politeness;\n  }\n  set politeness(value) {\n    this._politeness = value === 'off' || value === 'assertive' ? value : 'polite';\n    if (this._politeness === 'off') {\n      if (this._subscription) {\n        this._subscription.unsubscribe();\n        this._subscription = null;\n      }\n    } else if (!this._subscription) {\n      this._subscription = this._ngZone.runOutsideAngular(() => {\n        return this._contentObserver.observe(this._elementRef).subscribe(() => {\n          // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\n          const elementText = this._elementRef.nativeElement.textContent;\n          // The `MutationObserver` fires also for attribute\n          // changes which we don't want to announce.\n          if (elementText !== this._previousAnnouncedText) {\n            this._liveAnnouncer.announce(elementText, this._politeness);\n            this._previousAnnouncedText = elementText;\n          }\n        });\n      });\n    }\n  }\n  ngOnDestroy() {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n  }\n}\nCdkAriaLive.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[cdkAriaLive]',\n    exportAs: 'cdkAriaLive'\n  }]\n}];\nCdkAriaLive.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: LiveAnnouncer\n}, {\n  type: ContentObserver\n}, {\n  type: NgZone\n}];\nCdkAriaLive.propDecorators = {\n  politeness: [{\n    type: Input,\n    args: ['cdkAriaLive']\n  }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Gets whether an event could be a faked `mousedown` event dispatched by a screen reader. */\nfunction isFakeMousedownFromScreenReader(event) {\n  // We can typically distinguish between these faked mousedown events and real mousedown events\n  // using the \"buttons\" property. While real mousedowns will indicate the mouse button that was\n  // pressed (e.g. \"1\" for the left mouse button), faked mousedowns will usually set the property\n  // value to 0.\n  return event.buttons === 0;\n}\n/** Gets whether an event could be a faked `touchstart` event dispatched by a screen reader. */\nfunction isFakeTouchstartFromScreenReader(event) {\n  const touch = event.touches && event.touches[0] || event.changedTouches && event.changedTouches[0];\n  // A fake `touchstart` can be distinguished from a real one by looking at the `identifier`\n  // which is typically >= 0 on a real device versus -1 from a screen reader. Just to be safe,\n  // we can also look at `radiusX` and `radiusY`. This behavior was observed against a Windows 10\n  // device with a touch screen running NVDA v2020.4 and Firefox 85 or Chrome 88.\n  return !!touch && touch.identifier === -1 && (touch.radiusX == null || touch.radiusX === 1) && (touch.radiusY == null || touch.radiusY === 1);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\nconst TOUCH_BUFFER_MS = 650;\n/** InjectionToken for FocusMonitorOptions. */\nconst FOCUS_MONITOR_DEFAULT_OPTIONS = new InjectionToken('cdk-focus-monitor-default-options');\n/**\n * Event listener options that enable capturing and also\n * mark the listener as passive if the browser supports it.\n */\nconst captureEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true,\n  capture: true\n});\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\nclass FocusMonitor {\n  constructor(_ngZone, _platform, /** @breaking-change 11.0.0 make document required */\n  document, options) {\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    /** The focus origin that the next focus event is a result of. */\n    this._origin = null;\n    /** Whether the window has just been focused. */\n    this._windowFocused = false;\n    /** Map of elements being monitored to their info. */\n    this._elementInfo = new Map();\n    /** The number of elements currently being monitored. */\n    this._monitoredElementCount = 0;\n    /**\n     * Keeps track of the root nodes to which we've currently bound a focus/blur handler,\n     * as well as the number of monitored elements that they contain. We have to treat focus/blur\n     * handlers differently from the rest of the events, because the browser won't emit events\n     * to the document when focus moves inside of a shadow root.\n     */\n    this._rootNodeFocusListenerCount = new Map();\n    /**\n     * Event listener for `keydown` events on the document.\n     * Needs to be an arrow function in order to preserve the context when it gets bound.\n     */\n    this._documentKeydownListener = () => {\n      // On keydown record the origin and clear any touch event that may be in progress.\n      this._lastTouchTarget = null;\n      this._setOriginForCurrentEventQueue('keyboard');\n    };\n    /**\n     * Event listener for `mousedown` events on the document.\n     * Needs to be an arrow function in order to preserve the context when it gets bound.\n     */\n    this._documentMousedownListener = event => {\n      // On mousedown record the origin only if there is not touch\n      // target, since a mousedown can happen as a result of a touch event.\n      if (!this._lastTouchTarget) {\n        // In some cases screen readers fire fake `mousedown` events instead of `keydown`.\n        // Resolve the focus source to `keyboard` if we detect one of them.\n        const source = isFakeMousedownFromScreenReader(event) ? 'keyboard' : 'mouse';\n        this._setOriginForCurrentEventQueue(source);\n      }\n    };\n    /**\n     * Event listener for `touchstart` events on the document.\n     * Needs to be an arrow function in order to preserve the context when it gets bound.\n     */\n    this._documentTouchstartListener = event => {\n      // Some screen readers will fire a fake `touchstart` event if an element is activated using\n      // the keyboard while on a device with a touchsreen. Consider such events as keyboard focus.\n      if (!isFakeTouchstartFromScreenReader(event)) {\n        // When the touchstart event fires the focus event is not yet in the event queue. This means\n        // we can't rely on the trick used above (setting timeout of 1ms). Instead we wait 650ms to\n        // see if a focus happens.\n        if (this._touchTimeoutId != null) {\n          clearTimeout(this._touchTimeoutId);\n        }\n        this._lastTouchTarget = getTarget(event);\n        this._touchTimeoutId = setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\n      } else if (!this._lastTouchTarget) {\n        this._setOriginForCurrentEventQueue('keyboard');\n      }\n    };\n    /**\n     * Event listener for `focus` events on the window.\n     * Needs to be an arrow function in order to preserve the context when it gets bound.\n     */\n    this._windowFocusListener = () => {\n      // Make a note of when the window regains focus, so we can\n      // restore the origin info for the focused element.\n      this._windowFocused = true;\n      this._windowFocusTimeoutId = setTimeout(() => this._windowFocused = false);\n    };\n    /**\n     * Event listener for `focus` and 'blur' events on the document.\n     * Needs to be an arrow function in order to preserve the context when it gets bound.\n     */\n    this._rootNodeFocusAndBlurListener = event => {\n      const target = getTarget(event);\n      const handler = event.type === 'focus' ? this._onFocus : this._onBlur;\n      // We need to walk up the ancestor chain in order to support `checkChildren`.\n      for (let element = target; element; element = element.parentElement) {\n        handler.call(this, event, element);\n      }\n    };\n    this._document = document;\n    this._detectionMode = (options === null || options === void 0 ? void 0 : options.detectionMode) || 0 /* IMMEDIATE */;\n  }\n\n  monitor(element, checkChildren = false) {\n    const nativeElement = coerceElement(element);\n    // Do nothing if we're not on the browser platform or the passed in node isn't an element.\n    if (!this._platform.isBrowser || nativeElement.nodeType !== 1) {\n      return of(null);\n    }\n    // If the element is inside the shadow DOM, we need to bind our focus/blur listeners to\n    // the shadow root, rather than the `document`, because the browser won't emit focus events\n    // to the `document`, if focus is moving within the same shadow root.\n    const rootNode = _getShadowRoot(nativeElement) || this._getDocument();\n    const cachedInfo = this._elementInfo.get(nativeElement);\n    // Check if we're already monitoring this element.\n    if (cachedInfo) {\n      if (checkChildren) {\n        // TODO(COMP-318): this can be problematic, because it'll turn all non-checkChildren\n        // observers into ones that behave as if `checkChildren` was turned on. We need a more\n        // robust solution.\n        cachedInfo.checkChildren = true;\n      }\n      return cachedInfo.subject;\n    }\n    // Create monitored element info.\n    const info = {\n      checkChildren: checkChildren,\n      subject: new Subject(),\n      rootNode\n    };\n    this._elementInfo.set(nativeElement, info);\n    this._registerGlobalListeners(info);\n    return info.subject;\n  }\n  stopMonitoring(element) {\n    const nativeElement = coerceElement(element);\n    const elementInfo = this._elementInfo.get(nativeElement);\n    if (elementInfo) {\n      elementInfo.subject.complete();\n      this._setClasses(nativeElement);\n      this._elementInfo.delete(nativeElement);\n      this._removeGlobalListeners(elementInfo);\n    }\n  }\n  focusVia(element, origin, options) {\n    const nativeElement = coerceElement(element);\n    const focusedElement = this._getDocument().activeElement;\n    // If the element is focused already, calling `focus` again won't trigger the event listener\n    // which means that the focus classes won't be updated. If that's the case, update the classes\n    // directly without waiting for an event.\n    if (nativeElement === focusedElement) {\n      this._getClosestElementsInfo(nativeElement).forEach(([currentElement, info]) => this._originChanged(currentElement, origin, info));\n    } else {\n      this._setOriginForCurrentEventQueue(origin);\n      // `focus` isn't available on the server\n      if (typeof nativeElement.focus === 'function') {\n        nativeElement.focus(options);\n      }\n    }\n  }\n  ngOnDestroy() {\n    this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n  }\n  /** Access injected document if available or fallback to global document reference */\n  _getDocument() {\n    return this._document || document;\n  }\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  _getWindow() {\n    const doc = this._getDocument();\n    return doc.defaultView || window;\n  }\n  _toggleClass(element, className, shouldSet) {\n    if (shouldSet) {\n      element.classList.add(className);\n    } else {\n      element.classList.remove(className);\n    }\n  }\n  _getFocusOrigin(event) {\n    // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n    // 1) The window has just regained focus, in which case we want to restore the focused state of\n    //    the element from before the window blurred.\n    // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n    // 3) The element was programmatically focused, in which case we should mark the origin as\n    //    'program'.\n    if (this._origin) {\n      return this._origin;\n    }\n    if (this._windowFocused && this._lastFocusOrigin) {\n      return this._lastFocusOrigin;\n    } else if (this._wasCausedByTouch(event)) {\n      return 'touch';\n    } else {\n      return 'program';\n    }\n  }\n  /**\n   * Sets the focus classes on the element based on the given focus origin.\n   * @param element The element to update the classes on.\n   * @param origin The focus origin.\n   */\n  _setClasses(element, origin) {\n    this._toggleClass(element, 'cdk-focused', !!origin);\n    this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');\n    this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n    this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');\n    this._toggleClass(element, 'cdk-program-focused', origin === 'program');\n  }\n  /**\n   * Sets the origin and schedules an async function to clear it at the end of the event queue.\n   * If the detection mode is 'eventual', the origin is never cleared.\n   * @param origin The origin to set.\n   */\n  _setOriginForCurrentEventQueue(origin) {\n    this._ngZone.runOutsideAngular(() => {\n      this._origin = origin;\n      if (this._detectionMode === 0 /* IMMEDIATE */) {\n        // Sometimes the focus origin won't be valid in Firefox because Firefox seems to focus *one*\n        // tick after the interaction event fired. To ensure the focus origin is always correct,\n        // the focus origin will be determined at the beginning of the next tick.\n        this._originTimeoutId = setTimeout(() => this._origin = null, 1);\n      }\n    });\n  }\n  /**\n   * Checks whether the given focus event was caused by a touchstart event.\n   * @param event The focus event to check.\n   * @returns Whether the event was caused by a touch.\n   */\n  _wasCausedByTouch(event) {\n    // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n    // Consider the following dom structure:\n    //\n    // <div #parent tabindex=\"0\" cdkFocusClasses>\n    //   <div #child (click)=\"#parent.focus()\"></div>\n    // </div>\n    //\n    // If the user touches the #child element and the #parent is programmatically focused as a\n    // result, this code will still consider it to have been caused by the touch event and will\n    // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n    // relatively small edge-case that can be worked around by using\n    // focusVia(parentEl, 'program') to focus the parent element.\n    //\n    // If we decide that we absolutely must handle this case correctly, we can do so by listening\n    // for the first focus event after the touchstart, and then the first blur event after that\n    // focus event. When that blur event fires we know that whatever follows is not a result of the\n    // touchstart.\n    const focusTarget = getTarget(event);\n    return this._lastTouchTarget instanceof Node && focusTarget instanceof Node && (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n  }\n  /**\n   * Handles focus events on a registered element.\n   * @param event The focus event.\n   * @param element The monitored element.\n   */\n  _onFocus(event, element) {\n    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n    // focus event affecting the monitored element. If we want to use the origin of the first event\n    // instead we should check for the cdk-focused class here and return if the element already has\n    // it. (This only matters for elements that have includesChildren = true).\n    // If we are not counting child-element-focus as focused, make sure that the event target is the\n    // monitored element itself.\n    const elementInfo = this._elementInfo.get(element);\n    if (!elementInfo || !elementInfo.checkChildren && element !== getTarget(event)) {\n      return;\n    }\n    this._originChanged(element, this._getFocusOrigin(event), elementInfo);\n  }\n  /**\n   * Handles blur events on a registered element.\n   * @param event The blur event.\n   * @param element The monitored element.\n   */\n  _onBlur(event, element) {\n    // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n    // order to focus another child of the monitored element.\n    const elementInfo = this._elementInfo.get(element);\n    if (!elementInfo || elementInfo.checkChildren && event.relatedTarget instanceof Node && element.contains(event.relatedTarget)) {\n      return;\n    }\n    this._setClasses(element);\n    this._emitOrigin(elementInfo.subject, null);\n  }\n  _emitOrigin(subject, origin) {\n    this._ngZone.run(() => subject.next(origin));\n  }\n  _registerGlobalListeners(elementInfo) {\n    if (!this._platform.isBrowser) {\n      return;\n    }\n    const rootNode = elementInfo.rootNode;\n    const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;\n    if (!rootNodeFocusListeners) {\n      this._ngZone.runOutsideAngular(() => {\n        rootNode.addEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n        rootNode.addEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n      });\n    }\n    this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1);\n    // Register global listeners when first element is monitored.\n    if (++this._monitoredElementCount === 1) {\n      // Note: we listen to events in the capture phase so we\n      // can detect them even if the user stops propagation.\n      this._ngZone.runOutsideAngular(() => {\n        const document = this._getDocument();\n        const window = this._getWindow();\n        document.addEventListener('keydown', this._documentKeydownListener, captureEventListenerOptions);\n        document.addEventListener('mousedown', this._documentMousedownListener, captureEventListenerOptions);\n        document.addEventListener('touchstart', this._documentTouchstartListener, captureEventListenerOptions);\n        window.addEventListener('focus', this._windowFocusListener);\n      });\n    }\n  }\n  _removeGlobalListeners(elementInfo) {\n    const rootNode = elementInfo.rootNode;\n    if (this._rootNodeFocusListenerCount.has(rootNode)) {\n      const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode);\n      if (rootNodeFocusListeners > 1) {\n        this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);\n      } else {\n        rootNode.removeEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n        rootNode.removeEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n        this._rootNodeFocusListenerCount.delete(rootNode);\n      }\n    }\n    // Unregister global listeners when last element is unmonitored.\n    if (! --this._monitoredElementCount) {\n      const document = this._getDocument();\n      const window = this._getWindow();\n      document.removeEventListener('keydown', this._documentKeydownListener, captureEventListenerOptions);\n      document.removeEventListener('mousedown', this._documentMousedownListener, captureEventListenerOptions);\n      document.removeEventListener('touchstart', this._documentTouchstartListener, captureEventListenerOptions);\n      window.removeEventListener('focus', this._windowFocusListener);\n      // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n      clearTimeout(this._windowFocusTimeoutId);\n      clearTimeout(this._touchTimeoutId);\n      clearTimeout(this._originTimeoutId);\n    }\n  }\n  /** Updates all the state on an element once its focus origin has changed. */\n  _originChanged(element, origin, elementInfo) {\n    this._setClasses(element, origin);\n    this._emitOrigin(elementInfo.subject, origin);\n    this._lastFocusOrigin = origin;\n  }\n  /**\n   * Collects the `MonitoredElementInfo` of a particular element and\n   * all of its ancestors that have enabled `checkChildren`.\n   * @param element Element from which to start the search.\n   */\n  _getClosestElementsInfo(element) {\n    const results = [];\n    this._elementInfo.forEach((info, currentElement) => {\n      if (currentElement === element || info.checkChildren && currentElement.contains(element)) {\n        results.push([currentElement, info]);\n      }\n    });\n    return results;\n  }\n}\nFocusMonitor.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function FocusMonitor_Factory() {\n    return new FocusMonitor(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i2.DOCUMENT, 8), i0.ɵɵinject(FOCUS_MONITOR_DEFAULT_OPTIONS, 8));\n  },\n  token: FocusMonitor,\n  providedIn: \"root\"\n});\nFocusMonitor.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: 'root'\n  }]\n}];\nFocusMonitor.ctorParameters = () => [{\n  type: NgZone\n}, {\n  type: Platform\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [FOCUS_MONITOR_DEFAULT_OPTIONS]\n  }]\n}];\n/** Gets the target of an event, accounting for Shadow DOM. */\nfunction getTarget(event) {\n  // If an event is bound outside the Shadow DOM, the `event.target` will\n  // point to the shadow root so we have to use `composedPath` instead.\n  return event.composedPath ? event.composedPath()[0] : event.target;\n}\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\nclass CdkMonitorFocus {\n  constructor(_elementRef, _focusMonitor) {\n    this._elementRef = _elementRef;\n    this._focusMonitor = _focusMonitor;\n    this.cdkFocusChange = new EventEmitter();\n  }\n  ngAfterViewInit() {\n    const element = this._elementRef.nativeElement;\n    this._monitorSubscription = this._focusMonitor.monitor(element, element.nodeType === 1 && element.hasAttribute('cdkMonitorSubtreeFocus')).subscribe(origin => this.cdkFocusChange.emit(origin));\n  }\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    if (this._monitorSubscription) {\n      this._monitorSubscription.unsubscribe();\n    }\n  }\n}\nCdkMonitorFocus.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]'\n  }]\n}];\nCdkMonitorFocus.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: FocusMonitor\n}];\nCdkMonitorFocus.propDecorators = {\n  cdkFocusChange: [{\n    type: Output\n  }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** CSS class applied to the document body when in black-on-white high-contrast mode. */\nconst BLACK_ON_WHITE_CSS_CLASS = 'cdk-high-contrast-black-on-white';\n/** CSS class applied to the document body when in white-on-black high-contrast mode. */\nconst WHITE_ON_BLACK_CSS_CLASS = 'cdk-high-contrast-white-on-black';\n/** CSS class applied to the document body when in high-contrast mode. */\nconst HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = 'cdk-high-contrast-active';\n/**\n * Service to determine whether the browser is currently in a high-contrast-mode environment.\n *\n * Microsoft Windows supports an accessibility feature called \"High Contrast Mode\". This mode\n * changes the appearance of all applications, including web applications, to dramatically increase\n * contrast.\n *\n * IE, Edge, and Firefox currently support this mode. Chrome does not support Windows High Contrast\n * Mode. This service does not detect high-contrast mode as added by the Chrome \"High Contrast\"\n * browser extension.\n */\nclass HighContrastModeDetector {\n  constructor(_platform, document) {\n    this._platform = _platform;\n    this._document = document;\n  }\n  /** Gets the current high-contrast-mode for the page. */\n  getHighContrastMode() {\n    if (!this._platform.isBrowser) {\n      return 0 /* NONE */;\n    }\n    // Create a test element with an arbitrary background-color that is neither black nor\n    // white; high-contrast mode will coerce the color to either black or white. Also ensure that\n    // appending the test element to the DOM does not affect layout by absolutely positioning it\n    const testElement = this._document.createElement('div');\n    testElement.style.backgroundColor = 'rgb(1,2,3)';\n    testElement.style.position = 'absolute';\n    this._document.body.appendChild(testElement);\n    // Get the computed style for the background color, collapsing spaces to normalize between\n    // browsers. Once we get this color, we no longer need the test element. Access the `window`\n    // via the document so we can fake it in tests. Note that we have extra null checks, because\n    // this logic will likely run during app bootstrap and throwing can break the entire app.\n    const documentWindow = this._document.defaultView || window;\n    const computedStyle = documentWindow && documentWindow.getComputedStyle ? documentWindow.getComputedStyle(testElement) : null;\n    const computedColor = (computedStyle && computedStyle.backgroundColor || '').replace(/ /g, '');\n    this._document.body.removeChild(testElement);\n    switch (computedColor) {\n      case 'rgb(0,0,0)':\n        return 2 /* WHITE_ON_BLACK */;\n      case 'rgb(255,255,255)':\n        return 1 /* BLACK_ON_WHITE */;\n    }\n\n    return 0 /* NONE */;\n  }\n  /** Applies CSS classes indicating high-contrast mode to document body (browser-only). */\n  _applyBodyHighContrastModeCssClasses() {\n    if (!this._hasCheckedHighContrastMode && this._platform.isBrowser && this._document.body) {\n      const bodyClasses = this._document.body.classList;\n      // IE11 doesn't support `classList` operations with multiple arguments\n      bodyClasses.remove(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n      bodyClasses.remove(BLACK_ON_WHITE_CSS_CLASS);\n      bodyClasses.remove(WHITE_ON_BLACK_CSS_CLASS);\n      this._hasCheckedHighContrastMode = true;\n      const mode = this.getHighContrastMode();\n      if (mode === 1 /* BLACK_ON_WHITE */) {\n        bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n        bodyClasses.add(BLACK_ON_WHITE_CSS_CLASS);\n      } else if (mode === 2 /* WHITE_ON_BLACK */) {\n        bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n        bodyClasses.add(WHITE_ON_BLACK_CSS_CLASS);\n      }\n    }\n  }\n}\nHighContrastModeDetector.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function HighContrastModeDetector_Factory() {\n    return new HighContrastModeDetector(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i2.DOCUMENT));\n  },\n  token: HighContrastModeDetector,\n  providedIn: \"root\"\n});\nHighContrastModeDetector.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: 'root'\n  }]\n}];\nHighContrastModeDetector.ctorParameters = () => [{\n  type: Platform\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass A11yModule {\n  constructor(highContrastModeDetector) {\n    highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n  }\n}\nA11yModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [PlatformModule, ObserversModule],\n    declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n    exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]\n  }]\n}];\nA11yModule.ctorParameters = () => [{\n  type: HighContrastModeDetector\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { A11yModule, ActiveDescendantKeyManager, AriaDescriber, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, CDK_DESCRIBEDBY_ID_PREFIX, CdkAriaLive, CdkMonitorFocus, CdkTrapFocus, ConfigurableFocusTrap, ConfigurableFocusTrapFactory, EventListenerFocusTrapInertStrategy, FOCUS_MONITOR_DEFAULT_OPTIONS, FOCUS_TRAP_INERT_STRATEGY, FocusKeyManager, FocusMonitor, FocusTrap, FocusTrapFactory, HighContrastModeDetector, InteractivityChecker, IsFocusableConfig, LIVE_ANNOUNCER_DEFAULT_OPTIONS, LIVE_ANNOUNCER_ELEMENT_TOKEN, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, ListKeyManager, LiveAnnouncer, MESSAGES_CONTAINER_ID, TOUCH_BUFFER_MS, isFakeMousedownFromScreenReader, isFakeTouchstartFromScreenReader, FocusTrapManager as ɵangular_material_src_cdk_a11y_a11y_a };","map":{"version":3,"names":["i2","DOCUMENT","i0","Injectable","Inject","QueryList","NgZone","Directive","ElementRef","Input","InjectionToken","Optional","EventEmitter","Output","NgModule","Subject","Subscription","of","hasModifierKey","A","Z","ZERO","NINE","END","HOME","LEFT_ARROW","RIGHT_ARROW","UP_ARROW","DOWN_ARROW","TAB","tap","debounceTime","filter","map","take","coerceBooleanProperty","coerceElement","i1","Platform","_getFocusedElementPierceShadowDom","normalizePassiveListenerOptions","_getShadowRoot","PlatformModule","ContentObserver","ObserversModule","ID_DELIMITER","addAriaReferencedId","el","attr","id","ids","getAriaReferenceIds","some","existingId","trim","push","setAttribute","join","removeAriaReferencedId","filteredIds","val","length","removeAttribute","getAttribute","match","MESSAGES_CONTAINER_ID","CDK_DESCRIBEDBY_ID_PREFIX","CDK_DESCRIBEDBY_HOST_ATTRIBUTE","nextId","messageRegistry","Map","messagesContainer","AriaDescriber","constructor","_document","describe","hostElement","message","role","_canBeDescribed","key","getKey","setMessageId","set","messageElement","referenceCount","has","_createMessageElement","_isElementDescribedByMessage","_addMessageReference","removeDescription","_isElementNode","_removeMessageReference","registeredMessage","get","_deleteMessageElement","childNodes","_deleteMessagesContainer","ngOnDestroy","describedElements","querySelectorAll","i","_removeCdkDescribedByReferenceIds","clear","createElement","textContent","_createMessagesContainer","appendChild","removeChild","delete","preExistingContainer","getElementById","parentNode","style","visibility","classList","add","body","element","originalReferenceIds","indexOf","referenceIds","messageId","trimmedMessage","ariaLabel","nodeType","ELEMENT_NODE","ɵprov","ɵɵdefineInjectable","factory","AriaDescriber_Factory","ɵɵinject","token","providedIn","decorators","type","args","ctorParameters","undefined","ListKeyManager","_items","_activeItemIndex","_activeItem","_wrap","_letterKeyStream","_typeaheadSubscription","EMPTY","_vertical","_allowedModifierKeys","_homeAndEnd","_skipPredicateFn","item","disabled","_pressedLetters","tabOut","change","changes","subscribe","newItems","itemArray","toArray","newIndex","skipPredicate","predicate","withWrap","shouldWrap","withVerticalOrientation","enabled","withHorizontalOrientation","direction","_horizontal","withAllowedModifierKeys","keys","withTypeAhead","debounceInterval","ngDevMode","getLabel","Error","unsubscribe","pipe","letter","inputString","items","_getItemsArray","index","toUpperCase","setActiveItem","withHomeAndEnd","previousActiveItem","updateActiveItem","next","onKeydown","event","keyCode","modifiers","isModifierAllowed","every","modifier","setNextItemActive","setPreviousItemActive","setFirstItemActive","setLastItemActive","toLocaleUpperCase","String","fromCharCode","preventDefault","activeItemIndex","activeItem","isTyping","_setActiveItemByIndex","_setActiveItemByDelta","delta","_setActiveInWrapMode","_setActiveInDefaultMode","fallbackDelta","ActiveDescendantKeyManager","setInactiveStyles","setActiveStyles","FocusKeyManager","arguments","_origin","setFocusOrigin","origin","focus","IsFocusableConfig","ignoreVisibility","InteractivityChecker","_platform","isDisabled","hasAttribute","isVisible","hasGeometry","getComputedStyle","isTabbable","isBrowser","frameElement","getFrameElement","getWindow","getTabIndexValue","nodeName","toLowerCase","tabIndexValue","WEBKIT","IOS","isPotentiallyTabbableIOS","FIREFOX","tabIndex","isFocusable","config","isPotentiallyFocusable","InteractivityChecker_Factory","window","_a","offsetWidth","offsetHeight","getClientRects","isNativeFormElement","isHiddenInput","isInputElement","isAnchorWithHref","isAnchorElement","hasValidTabIndex","isNaN","parseInt","inputType","node","ownerDocument","defaultView","FocusTrap","_element","_checker","_ngZone","deferAnchors","_hasAttached","startAnchorListener","focusLastTabbableElement","endAnchorListener","focusFirstTabbableElement","_enabled","attachAnchors","value","_startAnchor","_endAnchor","_toggleAnchorTabIndex","destroy","startAnchor","endAnchor","removeEventListener","runOutsideAngular","_createAnchor","addEventListener","insertBefore","nextSibling","focusInitialElementWhenReady","options","Promise","resolve","_executeOnStable","focusInitialElement","focusFirstTabbableElementWhenReady","focusLastTabbableElementWhenReady","_getRegionBoundary","bound","markers","console","warn","_getFirstTabbableElement","_getLastTabbableElement","redirectToElement","querySelector","focusableChild","hasAttached","root","children","tabbableChild","anchor","isEnabled","toggleAnchors","fn","isStable","onStable","FocusTrapFactory","create","deferCaptureElements","FocusTrapFactory_Factory","CdkTrapFocus","_elementRef","_focusTrapFactory","_previouslyFocusedElement","focusTrap","nativeElement","autoCapture","_autoCapture","ngAfterContentInit","_captureFocus","ngDoCheck","ngOnChanges","autoCaptureChange","firstChange","selector","exportAs","propDecorators","ConfigurableFocusTrap","_focusTrapManager","_inertStrategy","defer","register","deregister","_enable","preventFocus","_disable","allowFocus","FOCUS_TRAP_INERT_STRATEGY","closest","Node","curr","Element","hasNativeClosest","polyfillClosest","matches","prototype","EventListenerFocusTrapInertStrategy","_listener","e","_trapFocus","target","focusTrapRoot","contains","setTimeout","activeElement","FocusTrapManager","_focusTrapStack","ft","stack","splice","FocusTrapManager_Factory","ConfigurableFocusTrapFactory","configObject","ConfigurableFocusTrapFactory_Factory","LIVE_ANNOUNCER_ELEMENT_TOKEN","LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY","LIVE_ANNOUNCER_DEFAULT_OPTIONS","LiveAnnouncer","elementToken","_defaultOptions","_liveElement","_createLiveElement","announce","defaultOptions","politeness","duration","clearTimeout","_previousTimeout","elementClass","previousElements","getElementsByClassName","liveEl","LiveAnnouncer_Factory","CdkAriaLive","_liveAnnouncer","_contentObserver","_politeness","_subscription","observe","elementText","_previousAnnouncedText","isFakeMousedownFromScreenReader","buttons","isFakeTouchstartFromScreenReader","touch","touches","changedTouches","identifier","radiusX","radiusY","TOUCH_BUFFER_MS","FOCUS_MONITOR_DEFAULT_OPTIONS","captureEventListenerOptions","passive","capture","FocusMonitor","document","_windowFocused","_elementInfo","_monitoredElementCount","_rootNodeFocusListenerCount","_documentKeydownListener","_lastTouchTarget","_setOriginForCurrentEventQueue","_documentMousedownListener","source","_documentTouchstartListener","_touchTimeoutId","getTarget","_windowFocusListener","_windowFocusTimeoutId","_rootNodeFocusAndBlurListener","handler","_onFocus","_onBlur","parentElement","call","_detectionMode","detectionMode","monitor","checkChildren","rootNode","_getDocument","cachedInfo","subject","info","_registerGlobalListeners","stopMonitoring","elementInfo","complete","_setClasses","_removeGlobalListeners","focusVia","focusedElement","_getClosestElementsInfo","forEach","currentElement","_originChanged","_info","_getWindow","doc","_toggleClass","className","shouldSet","remove","_getFocusOrigin","_lastFocusOrigin","_wasCausedByTouch","_originTimeoutId","focusTarget","relatedTarget","_emitOrigin","run","rootNodeFocusListeners","results","FocusMonitor_Factory","composedPath","CdkMonitorFocus","_focusMonitor","cdkFocusChange","ngAfterViewInit","_monitorSubscription","emit","BLACK_ON_WHITE_CSS_CLASS","WHITE_ON_BLACK_CSS_CLASS","HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS","HighContrastModeDetector","getHighContrastMode","testElement","backgroundColor","position","documentWindow","computedStyle","computedColor","replace","_applyBodyHighContrastModeCssClasses","_hasCheckedHighContrastMode","bodyClasses","mode","HighContrastModeDetector_Factory","A11yModule","highContrastModeDetector","imports","declarations","exports","ɵangular_material_src_cdk_a11y_a11y_a"],"sources":["D:/alodelivery test/node_modules/@angular/cdk/fesm2015/a11y.js"],"sourcesContent":["import * as i2 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, QueryList, NgZone, Directive, ElementRef, Input, InjectionToken, Optional, EventEmitter, Output, NgModule } from '@angular/core';\nimport { Subject, Subscription, of } from 'rxjs';\nimport { hasModifierKey, A, Z, ZERO, NINE, END, HOME, LEFT_ARROW, RIGHT_ARROW, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { tap, debounceTime, filter, map, take } from 'rxjs/operators';\nimport { coerceBooleanProperty, coerceElement } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { Platform, _getFocusedElementPierceShadowDom, normalizePassiveListenerOptions, _getShadowRoot, PlatformModule } from '@angular/cdk/platform';\nimport { ContentObserver, ObserversModule } from '@angular/cdk/observers';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** IDs are delimited by an empty space, as per the spec. */\nconst ID_DELIMITER = ' ';\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction addAriaReferencedId(el, attr, id) {\n    const ids = getAriaReferenceIds(el, attr);\n    if (ids.some(existingId => existingId.trim() == id.trim())) {\n        return;\n    }\n    ids.push(id.trim());\n    el.setAttribute(attr, ids.join(ID_DELIMITER));\n}\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction removeAriaReferencedId(el, attr, id) {\n    const ids = getAriaReferenceIds(el, attr);\n    const filteredIds = ids.filter(val => val != id.trim());\n    if (filteredIds.length) {\n        el.setAttribute(attr, filteredIds.join(ID_DELIMITER));\n    }\n    else {\n        el.removeAttribute(attr);\n    }\n}\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n */\nfunction getAriaReferenceIds(el, attr) {\n    // Get string array of all individual ids (whitespace delimited) in the attribute value\n    return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** ID used for the body container where all messages are appended. */\nconst MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n/** ID prefix used for each created message element. */\nconst CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n/** Attribute given to each host element that is described by a message element. */\nconst CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n/** Global incremental identifier for each registered message element. */\nlet nextId = 0;\n/** Global map of all registered message elements that have been placed into the document. */\nconst messageRegistry = new Map();\n/** Container for all registered messages. */\nlet messagesContainer = null;\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n */\nclass AriaDescriber {\n    constructor(_document) {\n        this._document = _document;\n    }\n    describe(hostElement, message, role) {\n        if (!this._canBeDescribed(hostElement, message)) {\n            return;\n        }\n        const key = getKey(message, role);\n        if (typeof message !== 'string') {\n            // We need to ensure that the element has an ID.\n            setMessageId(message);\n            messageRegistry.set(key, { messageElement: message, referenceCount: 0 });\n        }\n        else if (!messageRegistry.has(key)) {\n            this._createMessageElement(message, role);\n        }\n        if (!this._isElementDescribedByMessage(hostElement, key)) {\n            this._addMessageReference(hostElement, key);\n        }\n    }\n    removeDescription(hostElement, message, role) {\n        if (!message || !this._isElementNode(hostElement)) {\n            return;\n        }\n        const key = getKey(message, role);\n        if (this._isElementDescribedByMessage(hostElement, key)) {\n            this._removeMessageReference(hostElement, key);\n        }\n        // If the message is a string, it means that it's one that we created for the\n        // consumer so we can remove it safely, otherwise we should leave it in place.\n        if (typeof message === 'string') {\n            const registeredMessage = messageRegistry.get(key);\n            if (registeredMessage && registeredMessage.referenceCount === 0) {\n                this._deleteMessageElement(key);\n            }\n        }\n        if (messagesContainer && messagesContainer.childNodes.length === 0) {\n            this._deleteMessagesContainer();\n        }\n    }\n    /** Unregisters all created message elements and removes the message container. */\n    ngOnDestroy() {\n        const describedElements = this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}]`);\n        for (let i = 0; i < describedElements.length; i++) {\n            this._removeCdkDescribedByReferenceIds(describedElements[i]);\n            describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n        }\n        if (messagesContainer) {\n            this._deleteMessagesContainer();\n        }\n        messageRegistry.clear();\n    }\n    /**\n     * Creates a new element in the visually hidden message container element with the message\n     * as its content and adds it to the message registry.\n     */\n    _createMessageElement(message, role) {\n        const messageElement = this._document.createElement('div');\n        setMessageId(messageElement);\n        messageElement.textContent = message;\n        if (role) {\n            messageElement.setAttribute('role', role);\n        }\n        this._createMessagesContainer();\n        messagesContainer.appendChild(messageElement);\n        messageRegistry.set(getKey(message, role), { messageElement, referenceCount: 0 });\n    }\n    /** Deletes the message element from the global messages container. */\n    _deleteMessageElement(key) {\n        const registeredMessage = messageRegistry.get(key);\n        const messageElement = registeredMessage && registeredMessage.messageElement;\n        if (messagesContainer && messageElement) {\n            messagesContainer.removeChild(messageElement);\n        }\n        messageRegistry.delete(key);\n    }\n    /** Creates the global container for all aria-describedby messages. */\n    _createMessagesContainer() {\n        if (!messagesContainer) {\n            const preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID);\n            // When going from the server to the client, we may end up in a situation where there's\n            // already a container on the page, but we don't have a reference to it. Clear the\n            // old container so we don't get duplicates. Doing this, instead of emptying the previous\n            // container, should be slightly faster.\n            if (preExistingContainer && preExistingContainer.parentNode) {\n                preExistingContainer.parentNode.removeChild(preExistingContainer);\n            }\n            messagesContainer = this._document.createElement('div');\n            messagesContainer.id = MESSAGES_CONTAINER_ID;\n            // We add `visibility: hidden` in order to prevent text in this container from\n            // being searchable by the browser's Ctrl + F functionality.\n            // Screen-readers will still read the description for elements with aria-describedby even\n            // when the description element is not visible.\n            messagesContainer.style.visibility = 'hidden';\n            // Even though we use `visibility: hidden`, we still apply `cdk-visually-hidden` so that\n            // the description element doesn't impact page layout.\n            messagesContainer.classList.add('cdk-visually-hidden');\n            this._document.body.appendChild(messagesContainer);\n        }\n    }\n    /** Deletes the global messages container. */\n    _deleteMessagesContainer() {\n        if (messagesContainer && messagesContainer.parentNode) {\n            messagesContainer.parentNode.removeChild(messagesContainer);\n            messagesContainer = null;\n        }\n    }\n    /** Removes all cdk-describedby messages that are hosted through the element. */\n    _removeCdkDescribedByReferenceIds(element) {\n        // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n        const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby')\n            .filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\n        element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n    }\n    /**\n     * Adds a message reference to the element using aria-describedby and increments the registered\n     * message's reference count.\n     */\n    _addMessageReference(element, key) {\n        const registeredMessage = messageRegistry.get(key);\n        // Add the aria-describedby reference and set the\n        // describedby_host attribute to mark the element.\n        addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n        element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\n        registeredMessage.referenceCount++;\n    }\n    /**\n     * Removes a message reference from the element using aria-describedby\n     * and decrements the registered message's reference count.\n     */\n    _removeMessageReference(element, key) {\n        const registeredMessage = messageRegistry.get(key);\n        registeredMessage.referenceCount--;\n        removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n        element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n    /** Returns true if the element has been described by the provided message ID. */\n    _isElementDescribedByMessage(element, key) {\n        const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n        const registeredMessage = messageRegistry.get(key);\n        const messageId = registeredMessage && registeredMessage.messageElement.id;\n        return !!messageId && referenceIds.indexOf(messageId) != -1;\n    }\n    /** Determines whether a message can be described on a particular element. */\n    _canBeDescribed(element, message) {\n        if (!this._isElementNode(element)) {\n            return false;\n        }\n        if (message && typeof message === 'object') {\n            // We'd have to make some assumptions about the description element's text, if the consumer\n            // passed in an element. Assume that if an element is passed in, the consumer has verified\n            // that it can be used as a description.\n            return true;\n        }\n        const trimmedMessage = message == null ? '' : `${message}`.trim();\n        const ariaLabel = element.getAttribute('aria-label');\n        // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the\n        // element, because screen readers will end up reading out the same text twice in a row.\n        return trimmedMessage ? (!ariaLabel || ariaLabel.trim() !== trimmedMessage) : false;\n    }\n    /** Checks whether a node is an Element node. */\n    _isElementNode(element) {\n        return element.nodeType === this._document.ELEMENT_NODE;\n    }\n}\nAriaDescriber.ɵprov = i0.ɵɵdefineInjectable({ factory: function AriaDescriber_Factory() { return new AriaDescriber(i0.ɵɵinject(i2.DOCUMENT)); }, token: AriaDescriber, providedIn: \"root\" });\nAriaDescriber.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\nAriaDescriber.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** Gets a key that can be used to look messages up in the registry. */\nfunction getKey(message, role) {\n    return typeof message === 'string' ? `${role || ''}/${message}` : message;\n}\n/** Assigns a unique ID to an element, if it doesn't have one already. */\nfunction setMessageId(element) {\n    if (!element.id) {\n        element.id = `${CDK_DESCRIBEDBY_ID_PREFIX}-${nextId++}`;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nclass ListKeyManager {\n    constructor(_items) {\n        this._items = _items;\n        this._activeItemIndex = -1;\n        this._activeItem = null;\n        this._wrap = false;\n        this._letterKeyStream = new Subject();\n        this._typeaheadSubscription = Subscription.EMPTY;\n        this._vertical = true;\n        this._allowedModifierKeys = [];\n        this._homeAndEnd = false;\n        /**\n         * Predicate function that can be used to check whether an item should be skipped\n         * by the key manager. By default, disabled items are skipped.\n         */\n        this._skipPredicateFn = (item) => item.disabled;\n        // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n        this._pressedLetters = [];\n        /**\n         * Stream that emits any time the TAB key is pressed, so components can react\n         * when focus is shifted off of the list.\n         */\n        this.tabOut = new Subject();\n        /** Stream that emits whenever the active item of the list manager changes. */\n        this.change = new Subject();\n        // We allow for the items to be an array because, in some cases, the consumer may\n        // not have access to a QueryList of the items they want to manage (e.g. when the\n        // items aren't being collected via `ViewChildren` or `ContentChildren`).\n        if (_items instanceof QueryList) {\n            _items.changes.subscribe((newItems) => {\n                if (this._activeItem) {\n                    const itemArray = newItems.toArray();\n                    const newIndex = itemArray.indexOf(this._activeItem);\n                    if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n                        this._activeItemIndex = newIndex;\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * Sets the predicate function that determines which items should be skipped by the\n     * list key manager.\n     * @param predicate Function that determines whether the given item should be skipped.\n     */\n    skipPredicate(predicate) {\n        this._skipPredicateFn = predicate;\n        return this;\n    }\n    /**\n     * Configures wrapping mode, which determines whether the active item will wrap to\n     * the other end of list when there are no more items in the given direction.\n     * @param shouldWrap Whether the list should wrap when reaching the end.\n     */\n    withWrap(shouldWrap = true) {\n        this._wrap = shouldWrap;\n        return this;\n    }\n    /**\n     * Configures whether the key manager should be able to move the selection vertically.\n     * @param enabled Whether vertical selection should be enabled.\n     */\n    withVerticalOrientation(enabled = true) {\n        this._vertical = enabled;\n        return this;\n    }\n    /**\n     * Configures the key manager to move the selection horizontally.\n     * Passing in `null` will disable horizontal movement.\n     * @param direction Direction in which the selection can be moved.\n     */\n    withHorizontalOrientation(direction) {\n        this._horizontal = direction;\n        return this;\n    }\n    /**\n     * Modifier keys which are allowed to be held down and whose default actions will be prevented\n     * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\n     */\n    withAllowedModifierKeys(keys) {\n        this._allowedModifierKeys = keys;\n        return this;\n    }\n    /**\n     * Turns on typeahead mode which allows users to set the active item by typing.\n     * @param debounceInterval Time to wait after the last keystroke before setting the active item.\n     */\n    withTypeAhead(debounceInterval = 200) {\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && (this._items.length &&\n            this._items.some(item => typeof item.getLabel !== 'function'))) {\n            throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n        }\n        this._typeaheadSubscription.unsubscribe();\n        // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n        // and convert those letters back into a string. Afterwards find the first item that starts\n        // with that string and select it.\n        this._typeaheadSubscription = this._letterKeyStream.pipe(tap(letter => this._pressedLetters.push(letter)), debounceTime(debounceInterval), filter(() => this._pressedLetters.length > 0), map(() => this._pressedLetters.join(''))).subscribe(inputString => {\n            const items = this._getItemsArray();\n            // Start at 1 because we want to start searching at the item immediately\n            // following the current active item.\n            for (let i = 1; i < items.length + 1; i++) {\n                const index = (this._activeItemIndex + i) % items.length;\n                const item = items[index];\n                if (!this._skipPredicateFn(item) &&\n                    item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {\n                    this.setActiveItem(index);\n                    break;\n                }\n            }\n            this._pressedLetters = [];\n        });\n        return this;\n    }\n    /**\n     * Configures the key manager to activate the first and last items\n     * respectively when the Home or End key is pressed.\n     * @param enabled Whether pressing the Home or End key activates the first/last item.\n     */\n    withHomeAndEnd(enabled = true) {\n        this._homeAndEnd = enabled;\n        return this;\n    }\n    setActiveItem(item) {\n        const previousActiveItem = this._activeItem;\n        this.updateActiveItem(item);\n        if (this._activeItem !== previousActiveItem) {\n            this.change.next(this._activeItemIndex);\n        }\n    }\n    /**\n     * Sets the active item depending on the key event passed in.\n     * @param event Keyboard event to be used for determining which element should be active.\n     */\n    onKeydown(event) {\n        const keyCode = event.keyCode;\n        const modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n        const isModifierAllowed = modifiers.every(modifier => {\n            return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\n        });\n        switch (keyCode) {\n            case TAB:\n                this.tabOut.next();\n                return;\n            case DOWN_ARROW:\n                if (this._vertical && isModifierAllowed) {\n                    this.setNextItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case UP_ARROW:\n                if (this._vertical && isModifierAllowed) {\n                    this.setPreviousItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case RIGHT_ARROW:\n                if (this._horizontal && isModifierAllowed) {\n                    this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case LEFT_ARROW:\n                if (this._horizontal && isModifierAllowed) {\n                    this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case HOME:\n                if (this._homeAndEnd && isModifierAllowed) {\n                    this.setFirstItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case END:\n                if (this._homeAndEnd && isModifierAllowed) {\n                    this.setLastItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            default:\n                if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n                    // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n                    // otherwise fall back to resolving alphanumeric characters via the keyCode.\n                    if (event.key && event.key.length === 1) {\n                        this._letterKeyStream.next(event.key.toLocaleUpperCase());\n                    }\n                    else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n                        this._letterKeyStream.next(String.fromCharCode(keyCode));\n                    }\n                }\n                // Note that we return here, in order to avoid preventing\n                // the default action of non-navigational keys.\n                return;\n        }\n        this._pressedLetters = [];\n        event.preventDefault();\n    }\n    /** Index of the currently active item. */\n    get activeItemIndex() {\n        return this._activeItemIndex;\n    }\n    /** The active item. */\n    get activeItem() {\n        return this._activeItem;\n    }\n    /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n    isTyping() {\n        return this._pressedLetters.length > 0;\n    }\n    /** Sets the active item to the first enabled item in the list. */\n    setFirstItemActive() {\n        this._setActiveItemByIndex(0, 1);\n    }\n    /** Sets the active item to the last enabled item in the list. */\n    setLastItemActive() {\n        this._setActiveItemByIndex(this._items.length - 1, -1);\n    }\n    /** Sets the active item to the next enabled item in the list. */\n    setNextItemActive() {\n        this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n    }\n    /** Sets the active item to a previous enabled item in the list. */\n    setPreviousItemActive() {\n        this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive()\n            : this._setActiveItemByDelta(-1);\n    }\n    updateActiveItem(item) {\n        const itemArray = this._getItemsArray();\n        const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n        const activeItem = itemArray[index];\n        // Explicitly check for `null` and `undefined` because other falsy values are valid.\n        this._activeItem = activeItem == null ? null : activeItem;\n        this._activeItemIndex = index;\n    }\n    /**\n     * This method sets the active item, given a list of items and the delta between the\n     * currently active item and the new active item. It will calculate differently\n     * depending on whether wrap mode is turned on.\n     */\n    _setActiveItemByDelta(delta) {\n        this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n    }\n    /**\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n     * down the list until it finds an item that is not disabled, and it will wrap if it\n     * encounters either end of the list.\n     */\n    _setActiveInWrapMode(delta) {\n        const items = this._getItemsArray();\n        for (let i = 1; i <= items.length; i++) {\n            const index = (this._activeItemIndex + (delta * i) + items.length) % items.length;\n            const item = items[index];\n            if (!this._skipPredicateFn(item)) {\n                this.setActiveItem(index);\n                return;\n            }\n        }\n    }\n    /**\n     * Sets the active item properly given the default mode. In other words, it will\n     * continue to move down the list until it finds an item that is not disabled. If\n     * it encounters either end of the list, it will stop and not wrap.\n     */\n    _setActiveInDefaultMode(delta) {\n        this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n    }\n    /**\n     * Sets the active item to the first enabled item starting at the index specified. If the\n     * item is disabled, it will move in the fallbackDelta direction until it either\n     * finds an enabled item or encounters the end of the list.\n     */\n    _setActiveItemByIndex(index, fallbackDelta) {\n        const items = this._getItemsArray();\n        if (!items[index]) {\n            return;\n        }\n        while (this._skipPredicateFn(items[index])) {\n            index += fallbackDelta;\n            if (!items[index]) {\n                return;\n            }\n        }\n        this.setActiveItem(index);\n    }\n    /** Returns the items as an array. */\n    _getItemsArray() {\n        return this._items instanceof QueryList ? this._items.toArray() : this._items;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ActiveDescendantKeyManager extends ListKeyManager {\n    setActiveItem(index) {\n        if (this.activeItem) {\n            this.activeItem.setInactiveStyles();\n        }\n        super.setActiveItem(index);\n        if (this.activeItem) {\n            this.activeItem.setActiveStyles();\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass FocusKeyManager extends ListKeyManager {\n    constructor() {\n        super(...arguments);\n        this._origin = 'program';\n    }\n    /**\n     * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n     * @param origin Focus origin to be used when focusing items.\n     */\n    setFocusOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    setActiveItem(item) {\n        super.setActiveItem(item);\n        if (this.activeItem) {\n            this.activeItem.focus(this._origin);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Configuration for the isFocusable method.\n */\nclass IsFocusableConfig {\n    constructor() {\n        /**\n         * Whether to count an element as focusable even if it is not currently visible.\n         */\n        this.ignoreVisibility = false;\n    }\n}\n// The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\nclass InteractivityChecker {\n    constructor(_platform) {\n        this._platform = _platform;\n    }\n    /**\n     * Gets whether an element is disabled.\n     *\n     * @param element Element to be checked.\n     * @returns Whether the element is disabled.\n     */\n    isDisabled(element) {\n        // This does not capture some cases, such as a non-form control with a disabled attribute or\n        // a form control inside of a disabled form, but should capture the most common cases.\n        return element.hasAttribute('disabled');\n    }\n    /**\n     * Gets whether an element is visible for the purposes of interactivity.\n     *\n     * This will capture states like `display: none` and `visibility: hidden`, but not things like\n     * being clipped by an `overflow: hidden` parent or being outside the viewport.\n     *\n     * @returns Whether the element is visible.\n     */\n    isVisible(element) {\n        return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n    }\n    /**\n     * Gets whether an element can be reached via Tab key.\n     * Assumes that the element has already been checked with isFocusable.\n     *\n     * @param element Element to be checked.\n     * @returns Whether the element is tabbable.\n     */\n    isTabbable(element) {\n        // Nothing is tabbable on the server 😎\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n        const frameElement = getFrameElement(getWindow(element));\n        if (frameElement) {\n            // Frame elements inherit their tabindex onto all child elements.\n            if (getTabIndexValue(frameElement) === -1) {\n                return false;\n            }\n            // Browsers disable tabbing to an element inside of an invisible frame.\n            if (!this.isVisible(frameElement)) {\n                return false;\n            }\n        }\n        let nodeName = element.nodeName.toLowerCase();\n        let tabIndexValue = getTabIndexValue(element);\n        if (element.hasAttribute('contenteditable')) {\n            return tabIndexValue !== -1;\n        }\n        if (nodeName === 'iframe' || nodeName === 'object') {\n            // The frame or object's content may be tabbable depending on the content, but it's\n            // not possibly to reliably detect the content of the frames. We always consider such\n            // elements as non-tabbable.\n            return false;\n        }\n        // In iOS, the browser only considers some specific elements as tabbable.\n        if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n            return false;\n        }\n        if (nodeName === 'audio') {\n            // Audio elements without controls enabled are never tabbable, regardless\n            // of the tabindex attribute explicitly being set.\n            if (!element.hasAttribute('controls')) {\n                return false;\n            }\n            // Audio elements with controls are by default tabbable unless the\n            // tabindex attribute is set to `-1` explicitly.\n            return tabIndexValue !== -1;\n        }\n        if (nodeName === 'video') {\n            // For all video elements, if the tabindex attribute is set to `-1`, the video\n            // is not tabbable. Note: We cannot rely on the default `HTMLElement.tabIndex`\n            // property as that one is set to `-1` in Chrome, Edge and Safari v13.1. The\n            // tabindex attribute is the source of truth here.\n            if (tabIndexValue === -1) {\n                return false;\n            }\n            // If the tabindex is explicitly set, and not `-1` (as per check before), the\n            // video element is always tabbable (regardless of whether it has controls or not).\n            if (tabIndexValue !== null) {\n                return true;\n            }\n            // Otherwise (when no explicit tabindex is set), a video is only tabbable if it\n            // has controls enabled. Firefox is special as videos are always tabbable regardless\n            // of whether there are controls or not.\n            return this._platform.FIREFOX || element.hasAttribute('controls');\n        }\n        return element.tabIndex >= 0;\n    }\n    /**\n     * Gets whether an element can be focused by the user.\n     *\n     * @param element Element to be checked.\n     * @param config The config object with options to customize this method's behavior\n     * @returns Whether the element is focusable.\n     */\n    isFocusable(element, config) {\n        // Perform checks in order of left to most expensive.\n        // Again, naive approach that does not capture many edge cases and browser quirks.\n        return isPotentiallyFocusable(element) && !this.isDisabled(element) &&\n            ((config === null || config === void 0 ? void 0 : config.ignoreVisibility) || this.isVisible(element));\n    }\n}\nInteractivityChecker.ɵprov = i0.ɵɵdefineInjectable({ factory: function InteractivityChecker_Factory() { return new InteractivityChecker(i0.ɵɵinject(i1.Platform)); }, token: InteractivityChecker, providedIn: \"root\" });\nInteractivityChecker.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\nInteractivityChecker.ctorParameters = () => [\n    { type: Platform }\n];\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n */\nfunction getFrameElement(window) {\n    try {\n        return window.frameElement;\n    }\n    catch (_a) {\n        return null;\n    }\n}\n/** Checks whether the specified element has any geometry / rectangles. */\nfunction hasGeometry(element) {\n    // Use logic from jQuery to check for an invisible element.\n    // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n    return !!(element.offsetWidth || element.offsetHeight ||\n        (typeof element.getClientRects === 'function' && element.getClientRects().length));\n}\n/** Gets whether an element's  */\nfunction isNativeFormElement(element) {\n    let nodeName = element.nodeName.toLowerCase();\n    return nodeName === 'input' ||\n        nodeName === 'select' ||\n        nodeName === 'button' ||\n        nodeName === 'textarea';\n}\n/** Gets whether an element is an `<input type=\"hidden\">`. */\nfunction isHiddenInput(element) {\n    return isInputElement(element) && element.type == 'hidden';\n}\n/** Gets whether an element is an anchor that has an href attribute. */\nfunction isAnchorWithHref(element) {\n    return isAnchorElement(element) && element.hasAttribute('href');\n}\n/** Gets whether an element is an input element. */\nfunction isInputElement(element) {\n    return element.nodeName.toLowerCase() == 'input';\n}\n/** Gets whether an element is an anchor element. */\nfunction isAnchorElement(element) {\n    return element.nodeName.toLowerCase() == 'a';\n}\n/** Gets whether an element has a valid tabindex. */\nfunction hasValidTabIndex(element) {\n    if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n        return false;\n    }\n    let tabIndex = element.getAttribute('tabindex');\n    // IE11 parses tabindex=\"\" as the value \"-32768\"\n    if (tabIndex == '-32768') {\n        return false;\n    }\n    return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n */\nfunction getTabIndexValue(element) {\n    if (!hasValidTabIndex(element)) {\n        return null;\n    }\n    // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n    const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n    return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/** Checks whether the specified element is potentially tabbable on iOS */\nfunction isPotentiallyTabbableIOS(element) {\n    let nodeName = element.nodeName.toLowerCase();\n    let inputType = nodeName === 'input' && element.type;\n    return inputType === 'text'\n        || inputType === 'password'\n        || nodeName === 'select'\n        || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n */\nfunction isPotentiallyFocusable(element) {\n    // Inputs are potentially focusable *unless* they're type=\"hidden\".\n    if (isHiddenInput(element)) {\n        return false;\n    }\n    return isNativeFormElement(element) ||\n        isAnchorWithHref(element) ||\n        element.hasAttribute('contenteditable') ||\n        hasValidTabIndex(element);\n}\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\nfunction getWindow(node) {\n    // ownerDocument is null if `node` itself *is* a document.\n    return node.ownerDocument && node.ownerDocument.defaultView || window;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to be misaligned.\n *\n * @deprecated Use `ConfigurableFocusTrap` instead.\n * @breaking-change 11.0.0\n */\nclass FocusTrap {\n    constructor(_element, _checker, _ngZone, _document, deferAnchors = false) {\n        this._element = _element;\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._hasAttached = false;\n        // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\n        this.startAnchorListener = () => this.focusLastTabbableElement();\n        this.endAnchorListener = () => this.focusFirstTabbableElement();\n        this._enabled = true;\n        if (!deferAnchors) {\n            this.attachAnchors();\n        }\n    }\n    /** Whether the focus trap is active. */\n    get enabled() { return this._enabled; }\n    set enabled(value) {\n        this._enabled = value;\n        if (this._startAnchor && this._endAnchor) {\n            this._toggleAnchorTabIndex(value, this._startAnchor);\n            this._toggleAnchorTabIndex(value, this._endAnchor);\n        }\n    }\n    /** Destroys the focus trap by cleaning up the anchors. */\n    destroy() {\n        const startAnchor = this._startAnchor;\n        const endAnchor = this._endAnchor;\n        if (startAnchor) {\n            startAnchor.removeEventListener('focus', this.startAnchorListener);\n            if (startAnchor.parentNode) {\n                startAnchor.parentNode.removeChild(startAnchor);\n            }\n        }\n        if (endAnchor) {\n            endAnchor.removeEventListener('focus', this.endAnchorListener);\n            if (endAnchor.parentNode) {\n                endAnchor.parentNode.removeChild(endAnchor);\n            }\n        }\n        this._startAnchor = this._endAnchor = null;\n        this._hasAttached = false;\n    }\n    /**\n     * Inserts the anchors into the DOM. This is usually done automatically\n     * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n     * @returns Whether the focus trap managed to attach successfully. This may not be the case\n     * if the target element isn't currently in the DOM.\n     */\n    attachAnchors() {\n        // If we're not on the browser, there can be no focus to trap.\n        if (this._hasAttached) {\n            return true;\n        }\n        this._ngZone.runOutsideAngular(() => {\n            if (!this._startAnchor) {\n                this._startAnchor = this._createAnchor();\n                this._startAnchor.addEventListener('focus', this.startAnchorListener);\n            }\n            if (!this._endAnchor) {\n                this._endAnchor = this._createAnchor();\n                this._endAnchor.addEventListener('focus', this.endAnchorListener);\n            }\n        });\n        if (this._element.parentNode) {\n            this._element.parentNode.insertBefore(this._startAnchor, this._element);\n            this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);\n            this._hasAttached = true;\n        }\n        return this._hasAttached;\n    }\n    /**\n     * Waits for the zone to stabilize, then either focuses the first element that the\n     * user specified, or the first tabbable element.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfully.\n     */\n    focusInitialElementWhenReady(options) {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusInitialElement(options)));\n        });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the first tabbable element within the focus trap region.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfully.\n     */\n    focusFirstTabbableElementWhenReady(options) {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusFirstTabbableElement(options)));\n        });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the last tabbable element within the focus trap region.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfully.\n     */\n    focusLastTabbableElementWhenReady(options) {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusLastTabbableElement(options)));\n        });\n    }\n    /**\n     * Get the specified boundary element of the trapped region.\n     * @param bound The boundary to get (start or end of trapped region).\n     * @returns The boundary element.\n     */\n    _getRegionBoundary(bound) {\n        // Contains the deprecated version of selector, for temporary backwards comparability.\n        let markers = this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` +\n            `[cdkFocusRegion${bound}], ` +\n            `[cdk-focus-${bound}]`);\n        for (let i = 0; i < markers.length; i++) {\n            // @breaking-change 8.0.0\n            if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n                console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` +\n                    `use 'cdkFocusRegion${bound}' instead. The deprecated ` +\n                    `attribute will be removed in 8.0.0.`, markers[i]);\n            }\n            else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n                console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` +\n                    `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` +\n                    `will be removed in 8.0.0.`, markers[i]);\n            }\n        }\n        if (bound == 'start') {\n            return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n        }\n        return markers.length ?\n            markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n    }\n    /**\n     * Focuses the element that should be focused when the focus trap is initialized.\n     * @returns Whether focus was moved successfully.\n     */\n    focusInitialElement(options) {\n        // Contains the deprecated version of selector, for temporary backwards comparability.\n        const redirectToElement = this._element.querySelector(`[cdk-focus-initial], ` +\n            `[cdkFocusInitial]`);\n        if (redirectToElement) {\n            // @breaking-change 8.0.0\n            if (redirectToElement.hasAttribute(`cdk-focus-initial`)) {\n                console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` +\n                    `use 'cdkFocusInitial' instead. The deprecated attribute ` +\n                    `will be removed in 8.0.0`, redirectToElement);\n            }\n            // Warn the consumer if the element they've pointed to\n            // isn't focusable, when not in production mode.\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n                !this._checker.isFocusable(redirectToElement)) {\n                console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);\n            }\n            if (!this._checker.isFocusable(redirectToElement)) {\n                const focusableChild = this._getFirstTabbableElement(redirectToElement);\n                focusableChild === null || focusableChild === void 0 ? void 0 : focusableChild.focus(options);\n                return !!focusableChild;\n            }\n            redirectToElement.focus(options);\n            return true;\n        }\n        return this.focusFirstTabbableElement(options);\n    }\n    /**\n     * Focuses the first tabbable element within the focus trap region.\n     * @returns Whether focus was moved successfully.\n     */\n    focusFirstTabbableElement(options) {\n        const redirectToElement = this._getRegionBoundary('start');\n        if (redirectToElement) {\n            redirectToElement.focus(options);\n        }\n        return !!redirectToElement;\n    }\n    /**\n     * Focuses the last tabbable element within the focus trap region.\n     * @returns Whether focus was moved successfully.\n     */\n    focusLastTabbableElement(options) {\n        const redirectToElement = this._getRegionBoundary('end');\n        if (redirectToElement) {\n            redirectToElement.focus(options);\n        }\n        return !!redirectToElement;\n    }\n    /**\n     * Checks whether the focus trap has successfully been attached.\n     */\n    hasAttached() {\n        return this._hasAttached;\n    }\n    /** Get the first tabbable element from a DOM subtree (inclusive). */\n    _getFirstTabbableElement(root) {\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n            return root;\n        }\n        // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall\n        // back to `childNodes` which includes text nodes, comments etc.\n        let children = root.children || root.childNodes;\n        for (let i = 0; i < children.length; i++) {\n            let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?\n                this._getFirstTabbableElement(children[i]) :\n                null;\n            if (tabbableChild) {\n                return tabbableChild;\n            }\n        }\n        return null;\n    }\n    /** Get the last tabbable element from a DOM subtree (inclusive). */\n    _getLastTabbableElement(root) {\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n            return root;\n        }\n        // Iterate in reverse DOM order.\n        let children = root.children || root.childNodes;\n        for (let i = children.length - 1; i >= 0; i--) {\n            let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?\n                this._getLastTabbableElement(children[i]) :\n                null;\n            if (tabbableChild) {\n                return tabbableChild;\n            }\n        }\n        return null;\n    }\n    /** Creates an anchor element. */\n    _createAnchor() {\n        const anchor = this._document.createElement('div');\n        this._toggleAnchorTabIndex(this._enabled, anchor);\n        anchor.classList.add('cdk-visually-hidden');\n        anchor.classList.add('cdk-focus-trap-anchor');\n        anchor.setAttribute('aria-hidden', 'true');\n        return anchor;\n    }\n    /**\n     * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n     * @param isEnabled Whether the focus trap is enabled.\n     * @param anchor Anchor on which to toggle the tabindex.\n     */\n    _toggleAnchorTabIndex(isEnabled, anchor) {\n        // Remove the tabindex completely, rather than setting it to -1, because if the\n        // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n        isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n    }\n    /**\n     * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.\n     * @param enabled: Whether the anchors should trap Tab.\n     */\n    toggleAnchors(enabled) {\n        if (this._startAnchor && this._endAnchor) {\n            this._toggleAnchorTabIndex(enabled, this._startAnchor);\n            this._toggleAnchorTabIndex(enabled, this._endAnchor);\n        }\n    }\n    /** Executes a function when the zone is stable. */\n    _executeOnStable(fn) {\n        if (this._ngZone.isStable) {\n            fn();\n        }\n        else {\n            this._ngZone.onStable.pipe(take(1)).subscribe(fn);\n        }\n    }\n}\n/**\n * Factory that allows easy instantiation of focus traps.\n * @deprecated Use `ConfigurableFocusTrapFactory` instead.\n * @breaking-change 11.0.0\n */\nclass FocusTrapFactory {\n    constructor(_checker, _ngZone, _document) {\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._document = _document;\n    }\n    /**\n     * Creates a focus-trapped region around the given element.\n     * @param element The element around which focus will be trapped.\n     * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\n     *     manually by the user.\n     * @returns The created focus trap instance.\n     */\n    create(element, deferCaptureElements = false) {\n        return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);\n    }\n}\nFocusTrapFactory.ɵprov = i0.ɵɵdefineInjectable({ factory: function FocusTrapFactory_Factory() { return new FocusTrapFactory(i0.ɵɵinject(InteractivityChecker), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.DOCUMENT)); }, token: FocusTrapFactory, providedIn: \"root\" });\nFocusTrapFactory.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\nFocusTrapFactory.ctorParameters = () => [\n    { type: InteractivityChecker },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** Directive for trapping focus within a region. */\nclass CdkTrapFocus {\n    constructor(_elementRef, _focusTrapFactory, \n    /**\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 13.0.0\n     */\n    _document) {\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        /** Previously focused element to restore focus to upon destroy when using autoCapture. */\n        this._previouslyFocusedElement = null;\n        this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n    }\n    /** Whether the focus trap is active. */\n    get enabled() { return this.focusTrap.enabled; }\n    set enabled(value) { this.focusTrap.enabled = coerceBooleanProperty(value); }\n    /**\n     * Whether the directive should automatically move focus into the trapped region upon\n     * initialization and return focus to the previous activeElement upon destruction.\n     */\n    get autoCapture() { return this._autoCapture; }\n    set autoCapture(value) { this._autoCapture = coerceBooleanProperty(value); }\n    ngOnDestroy() {\n        this.focusTrap.destroy();\n        // If we stored a previously focused element when using autoCapture, return focus to that\n        // element now that the trapped region is being destroyed.\n        if (this._previouslyFocusedElement) {\n            this._previouslyFocusedElement.focus();\n            this._previouslyFocusedElement = null;\n        }\n    }\n    ngAfterContentInit() {\n        this.focusTrap.attachAnchors();\n        if (this.autoCapture) {\n            this._captureFocus();\n        }\n    }\n    ngDoCheck() {\n        if (!this.focusTrap.hasAttached()) {\n            this.focusTrap.attachAnchors();\n        }\n    }\n    ngOnChanges(changes) {\n        const autoCaptureChange = changes['autoCapture'];\n        if (autoCaptureChange && !autoCaptureChange.firstChange && this.autoCapture &&\n            this.focusTrap.hasAttached()) {\n            this._captureFocus();\n        }\n    }\n    _captureFocus() {\n        this._previouslyFocusedElement = _getFocusedElementPierceShadowDom();\n        this.focusTrap.focusInitialElementWhenReady();\n    }\n}\nCdkTrapFocus.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkTrapFocus]',\n                exportAs: 'cdkTrapFocus',\n            },] }\n];\nCdkTrapFocus.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusTrapFactory },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nCdkTrapFocus.propDecorators = {\n    enabled: [{ type: Input, args: ['cdkTrapFocus',] }],\n    autoCapture: [{ type: Input, args: ['cdkTrapFocusAutoCapture',] }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class uses a strategy pattern that determines how it traps focus.\n * See FocusTrapInertStrategy.\n */\nclass ConfigurableFocusTrap extends FocusTrap {\n    constructor(_element, _checker, _ngZone, _document, _focusTrapManager, _inertStrategy, config) {\n        super(_element, _checker, _ngZone, _document, config.defer);\n        this._focusTrapManager = _focusTrapManager;\n        this._inertStrategy = _inertStrategy;\n        this._focusTrapManager.register(this);\n    }\n    /** Whether the FocusTrap is enabled. */\n    get enabled() { return this._enabled; }\n    set enabled(value) {\n        this._enabled = value;\n        if (this._enabled) {\n            this._focusTrapManager.register(this);\n        }\n        else {\n            this._focusTrapManager.deregister(this);\n        }\n    }\n    /** Notifies the FocusTrapManager that this FocusTrap will be destroyed. */\n    destroy() {\n        this._focusTrapManager.deregister(this);\n        super.destroy();\n    }\n    /** @docs-private Implemented as part of ManagedFocusTrap. */\n    _enable() {\n        this._inertStrategy.preventFocus(this);\n        this.toggleAnchors(true);\n    }\n    /** @docs-private Implemented as part of ManagedFocusTrap. */\n    _disable() {\n        this._inertStrategy.allowFocus(this);\n        this.toggleAnchors(false);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The injection token used to specify the inert strategy. */\nconst FOCUS_TRAP_INERT_STRATEGY = new InjectionToken('FOCUS_TRAP_INERT_STRATEGY');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** IE 11 compatible closest implementation that is able to start from non-Element Nodes. */\nfunction closest(element, selector) {\n    if (!(element instanceof Node)) {\n        return null;\n    }\n    let curr = element;\n    while (curr != null && !(curr instanceof Element)) {\n        curr = curr.parentNode;\n    }\n    return curr && (hasNativeClosest ?\n        curr.closest(selector) : polyfillClosest(curr, selector));\n}\n/** Polyfill for browsers without Element.closest. */\nfunction polyfillClosest(element, selector) {\n    let curr = element;\n    while (curr != null && !(curr instanceof Element && matches(curr, selector))) {\n        curr = curr.parentNode;\n    }\n    return (curr || null);\n}\nconst hasNativeClosest = typeof Element != 'undefined' && !!Element.prototype.closest;\n/** IE 11 compatible matches implementation. */\nfunction matches(element, selector) {\n    return element.matches ?\n        element.matches(selector) :\n        element['msMatchesSelector'](selector);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Lightweight FocusTrapInertStrategy that adds a document focus event\n * listener to redirect focus back inside the FocusTrap.\n */\nclass EventListenerFocusTrapInertStrategy {\n    constructor() {\n        /** Focus event handler. */\n        this._listener = null;\n    }\n    /** Adds a document event listener that keeps focus inside the FocusTrap. */\n    preventFocus(focusTrap) {\n        // Ensure there's only one listener per document\n        if (this._listener) {\n            focusTrap._document.removeEventListener('focus', this._listener, true);\n        }\n        this._listener = (e) => this._trapFocus(focusTrap, e);\n        focusTrap._ngZone.runOutsideAngular(() => {\n            focusTrap._document.addEventListener('focus', this._listener, true);\n        });\n    }\n    /** Removes the event listener added in preventFocus. */\n    allowFocus(focusTrap) {\n        if (!this._listener) {\n            return;\n        }\n        focusTrap._document.removeEventListener('focus', this._listener, true);\n        this._listener = null;\n    }\n    /**\n     * Refocuses the first element in the FocusTrap if the focus event target was outside\n     * the FocusTrap.\n     *\n     * This is an event listener callback. The event listener is added in runOutsideAngular,\n     * so all this code runs outside Angular as well.\n     */\n    _trapFocus(focusTrap, event) {\n        const target = event.target;\n        const focusTrapRoot = focusTrap._element;\n        // Don't refocus if target was in an overlay, because the overlay might be associated\n        // with an element inside the FocusTrap, ex. mat-select.\n        if (!focusTrapRoot.contains(target) && closest(target, 'div.cdk-overlay-pane') === null) {\n            // Some legacy FocusTrap usages have logic that focuses some element on the page\n            // just before FocusTrap is destroyed. For backwards compatibility, wait\n            // to be sure FocusTrap is still enabled before refocusing.\n            setTimeout(() => {\n                // Check whether focus wasn't put back into the focus trap while the timeout was pending.\n                if (focusTrap.enabled && !focusTrapRoot.contains(focusTrap._document.activeElement)) {\n                    focusTrap.focusFirstTabbableElement();\n                }\n            });\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injectable that ensures only the most recently enabled FocusTrap is active. */\nclass FocusTrapManager {\n    constructor() {\n        // A stack of the FocusTraps on the page. Only the FocusTrap at the\n        // top of the stack is active.\n        this._focusTrapStack = [];\n    }\n    /**\n     * Disables the FocusTrap at the top of the stack, and then pushes\n     * the new FocusTrap onto the stack.\n     */\n    register(focusTrap) {\n        // Dedupe focusTraps that register multiple times.\n        this._focusTrapStack = this._focusTrapStack.filter((ft) => ft !== focusTrap);\n        let stack = this._focusTrapStack;\n        if (stack.length) {\n            stack[stack.length - 1]._disable();\n        }\n        stack.push(focusTrap);\n        focusTrap._enable();\n    }\n    /**\n     * Removes the FocusTrap from the stack, and activates the\n     * FocusTrap that is the new top of the stack.\n     */\n    deregister(focusTrap) {\n        focusTrap._disable();\n        const stack = this._focusTrapStack;\n        const i = stack.indexOf(focusTrap);\n        if (i !== -1) {\n            stack.splice(i, 1);\n            if (stack.length) {\n                stack[stack.length - 1]._enable();\n            }\n        }\n    }\n}\nFocusTrapManager.ɵprov = i0.ɵɵdefineInjectable({ factory: function FocusTrapManager_Factory() { return new FocusTrapManager(); }, token: FocusTrapManager, providedIn: \"root\" });\nFocusTrapManager.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Factory that allows easy instantiation of configurable focus traps. */\nclass ConfigurableFocusTrapFactory {\n    constructor(_checker, _ngZone, _focusTrapManager, _document, _inertStrategy) {\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._focusTrapManager = _focusTrapManager;\n        this._document = _document;\n        // TODO split up the strategies into different modules, similar to DateAdapter.\n        this._inertStrategy = _inertStrategy || new EventListenerFocusTrapInertStrategy();\n    }\n    create(element, config = { defer: false }) {\n        let configObject;\n        if (typeof config === 'boolean') {\n            configObject = { defer: config };\n        }\n        else {\n            configObject = config;\n        }\n        return new ConfigurableFocusTrap(element, this._checker, this._ngZone, this._document, this._focusTrapManager, this._inertStrategy, configObject);\n    }\n}\nConfigurableFocusTrapFactory.ɵprov = i0.ɵɵdefineInjectable({ factory: function ConfigurableFocusTrapFactory_Factory() { return new ConfigurableFocusTrapFactory(i0.ɵɵinject(InteractivityChecker), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(FocusTrapManager), i0.ɵɵinject(i2.DOCUMENT), i0.ɵɵinject(FOCUS_TRAP_INERT_STRATEGY, 8)); }, token: ConfigurableFocusTrapFactory, providedIn: \"root\" });\nConfigurableFocusTrapFactory.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\nConfigurableFocusTrapFactory.ctorParameters = () => [\n    { type: InteractivityChecker },\n    { type: NgZone },\n    { type: FocusTrapManager },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [FOCUS_TRAP_INERT_STRATEGY,] }] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken('liveAnnouncerElement', {\n    providedIn: 'root',\n    factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY,\n});\n/** @docs-private */\nfunction LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {\n    return null;\n}\n/** Injection token that can be used to configure the default options for the LiveAnnouncer. */\nconst LIVE_ANNOUNCER_DEFAULT_OPTIONS = new InjectionToken('LIVE_ANNOUNCER_DEFAULT_OPTIONS');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass LiveAnnouncer {\n    constructor(elementToken, _ngZone, _document, _defaultOptions) {\n        this._ngZone = _ngZone;\n        this._defaultOptions = _defaultOptions;\n        // We inject the live element and document as `any` because the constructor signature cannot\n        // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n        // a class decorator causes TypeScript to preserve the constructor signature types.\n        this._document = _document;\n        this._liveElement = elementToken || this._createLiveElement();\n    }\n    announce(message, ...args) {\n        const defaultOptions = this._defaultOptions;\n        let politeness;\n        let duration;\n        if (args.length === 1 && typeof args[0] === 'number') {\n            duration = args[0];\n        }\n        else {\n            [politeness, duration] = args;\n        }\n        this.clear();\n        clearTimeout(this._previousTimeout);\n        if (!politeness) {\n            politeness =\n                (defaultOptions && defaultOptions.politeness) ? defaultOptions.politeness : 'polite';\n        }\n        if (duration == null && defaultOptions) {\n            duration = defaultOptions.duration;\n        }\n        // TODO: ensure changing the politeness works on all environments we support.\n        this._liveElement.setAttribute('aria-live', politeness);\n        // This 100ms timeout is necessary for some browser + screen-reader combinations:\n        // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n        // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n        //   second time without clearing and then using a non-zero delay.\n        // (using JAWS 17 at time of this writing).\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                clearTimeout(this._previousTimeout);\n                this._previousTimeout = setTimeout(() => {\n                    this._liveElement.textContent = message;\n                    resolve();\n                    if (typeof duration === 'number') {\n                        this._previousTimeout = setTimeout(() => this.clear(), duration);\n                    }\n                }, 100);\n            });\n        });\n    }\n    /**\n     * Clears the current text from the announcer element. Can be used to prevent\n     * screen readers from reading the text out again while the user is going\n     * through the page landmarks.\n     */\n    clear() {\n        if (this._liveElement) {\n            this._liveElement.textContent = '';\n        }\n    }\n    ngOnDestroy() {\n        clearTimeout(this._previousTimeout);\n        if (this._liveElement && this._liveElement.parentNode) {\n            this._liveElement.parentNode.removeChild(this._liveElement);\n            this._liveElement = null;\n        }\n    }\n    _createLiveElement() {\n        const elementClass = 'cdk-live-announcer-element';\n        const previousElements = this._document.getElementsByClassName(elementClass);\n        const liveEl = this._document.createElement('div');\n        // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n        for (let i = 0; i < previousElements.length; i++) {\n            previousElements[i].parentNode.removeChild(previousElements[i]);\n        }\n        liveEl.classList.add(elementClass);\n        liveEl.classList.add('cdk-visually-hidden');\n        liveEl.setAttribute('aria-atomic', 'true');\n        liveEl.setAttribute('aria-live', 'polite');\n        this._document.body.appendChild(liveEl);\n        return liveEl;\n    }\n}\nLiveAnnouncer.ɵprov = i0.ɵɵdefineInjectable({ factory: function LiveAnnouncer_Factory() { return new LiveAnnouncer(i0.ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.DOCUMENT), i0.ɵɵinject(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8)); }, token: LiveAnnouncer, providedIn: \"root\" });\nLiveAnnouncer.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\nLiveAnnouncer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LIVE_ANNOUNCER_ELEMENT_TOKEN,] }] },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS,] }] }\n];\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\nclass CdkAriaLive {\n    constructor(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {\n        this._elementRef = _elementRef;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._contentObserver = _contentObserver;\n        this._ngZone = _ngZone;\n        this._politeness = 'polite';\n    }\n    /** The aria-live politeness level to use when announcing messages. */\n    get politeness() { return this._politeness; }\n    set politeness(value) {\n        this._politeness = value === 'off' || value === 'assertive' ? value : 'polite';\n        if (this._politeness === 'off') {\n            if (this._subscription) {\n                this._subscription.unsubscribe();\n                this._subscription = null;\n            }\n        }\n        else if (!this._subscription) {\n            this._subscription = this._ngZone.runOutsideAngular(() => {\n                return this._contentObserver\n                    .observe(this._elementRef)\n                    .subscribe(() => {\n                    // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\n                    const elementText = this._elementRef.nativeElement.textContent;\n                    // The `MutationObserver` fires also for attribute\n                    // changes which we don't want to announce.\n                    if (elementText !== this._previousAnnouncedText) {\n                        this._liveAnnouncer.announce(elementText, this._politeness);\n                        this._previousAnnouncedText = elementText;\n                    }\n                });\n            });\n        }\n    }\n    ngOnDestroy() {\n        if (this._subscription) {\n            this._subscription.unsubscribe();\n        }\n    }\n}\nCdkAriaLive.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkAriaLive]',\n                exportAs: 'cdkAriaLive',\n            },] }\n];\nCdkAriaLive.ctorParameters = () => [\n    { type: ElementRef },\n    { type: LiveAnnouncer },\n    { type: ContentObserver },\n    { type: NgZone }\n];\nCdkAriaLive.propDecorators = {\n    politeness: [{ type: Input, args: ['cdkAriaLive',] }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Gets whether an event could be a faked `mousedown` event dispatched by a screen reader. */\nfunction isFakeMousedownFromScreenReader(event) {\n    // We can typically distinguish between these faked mousedown events and real mousedown events\n    // using the \"buttons\" property. While real mousedowns will indicate the mouse button that was\n    // pressed (e.g. \"1\" for the left mouse button), faked mousedowns will usually set the property\n    // value to 0.\n    return event.buttons === 0;\n}\n/** Gets whether an event could be a faked `touchstart` event dispatched by a screen reader. */\nfunction isFakeTouchstartFromScreenReader(event) {\n    const touch = (event.touches && event.touches[0]) ||\n        (event.changedTouches && event.changedTouches[0]);\n    // A fake `touchstart` can be distinguished from a real one by looking at the `identifier`\n    // which is typically >= 0 on a real device versus -1 from a screen reader. Just to be safe,\n    // we can also look at `radiusX` and `radiusY`. This behavior was observed against a Windows 10\n    // device with a touch screen running NVDA v2020.4 and Firefox 85 or Chrome 88.\n    return !!touch && touch.identifier === -1 && (touch.radiusX == null || touch.radiusX === 1) &&\n        (touch.radiusY == null || touch.radiusY === 1);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\nconst TOUCH_BUFFER_MS = 650;\n/** InjectionToken for FocusMonitorOptions. */\nconst FOCUS_MONITOR_DEFAULT_OPTIONS = new InjectionToken('cdk-focus-monitor-default-options');\n/**\n * Event listener options that enable capturing and also\n * mark the listener as passive if the browser supports it.\n */\nconst captureEventListenerOptions = normalizePassiveListenerOptions({\n    passive: true,\n    capture: true\n});\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\nclass FocusMonitor {\n    constructor(_ngZone, _platform, \n    /** @breaking-change 11.0.0 make document required */\n    document, options) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /** The focus origin that the next focus event is a result of. */\n        this._origin = null;\n        /** Whether the window has just been focused. */\n        this._windowFocused = false;\n        /** Map of elements being monitored to their info. */\n        this._elementInfo = new Map();\n        /** The number of elements currently being monitored. */\n        this._monitoredElementCount = 0;\n        /**\n         * Keeps track of the root nodes to which we've currently bound a focus/blur handler,\n         * as well as the number of monitored elements that they contain. We have to treat focus/blur\n         * handlers differently from the rest of the events, because the browser won't emit events\n         * to the document when focus moves inside of a shadow root.\n         */\n        this._rootNodeFocusListenerCount = new Map();\n        /**\n         * Event listener for `keydown` events on the document.\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\n         */\n        this._documentKeydownListener = () => {\n            // On keydown record the origin and clear any touch event that may be in progress.\n            this._lastTouchTarget = null;\n            this._setOriginForCurrentEventQueue('keyboard');\n        };\n        /**\n         * Event listener for `mousedown` events on the document.\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\n         */\n        this._documentMousedownListener = (event) => {\n            // On mousedown record the origin only if there is not touch\n            // target, since a mousedown can happen as a result of a touch event.\n            if (!this._lastTouchTarget) {\n                // In some cases screen readers fire fake `mousedown` events instead of `keydown`.\n                // Resolve the focus source to `keyboard` if we detect one of them.\n                const source = isFakeMousedownFromScreenReader(event) ? 'keyboard' : 'mouse';\n                this._setOriginForCurrentEventQueue(source);\n            }\n        };\n        /**\n         * Event listener for `touchstart` events on the document.\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\n         */\n        this._documentTouchstartListener = (event) => {\n            // Some screen readers will fire a fake `touchstart` event if an element is activated using\n            // the keyboard while on a device with a touchsreen. Consider such events as keyboard focus.\n            if (!isFakeTouchstartFromScreenReader(event)) {\n                // When the touchstart event fires the focus event is not yet in the event queue. This means\n                // we can't rely on the trick used above (setting timeout of 1ms). Instead we wait 650ms to\n                // see if a focus happens.\n                if (this._touchTimeoutId != null) {\n                    clearTimeout(this._touchTimeoutId);\n                }\n                this._lastTouchTarget = getTarget(event);\n                this._touchTimeoutId = setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\n            }\n            else if (!this._lastTouchTarget) {\n                this._setOriginForCurrentEventQueue('keyboard');\n            }\n        };\n        /**\n         * Event listener for `focus` events on the window.\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\n         */\n        this._windowFocusListener = () => {\n            // Make a note of when the window regains focus, so we can\n            // restore the origin info for the focused element.\n            this._windowFocused = true;\n            this._windowFocusTimeoutId = setTimeout(() => this._windowFocused = false);\n        };\n        /**\n         * Event listener for `focus` and 'blur' events on the document.\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\n         */\n        this._rootNodeFocusAndBlurListener = (event) => {\n            const target = getTarget(event);\n            const handler = event.type === 'focus' ? this._onFocus : this._onBlur;\n            // We need to walk up the ancestor chain in order to support `checkChildren`.\n            for (let element = target; element; element = element.parentElement) {\n                handler.call(this, event, element);\n            }\n        };\n        this._document = document;\n        this._detectionMode = (options === null || options === void 0 ? void 0 : options.detectionMode) || 0 /* IMMEDIATE */;\n    }\n    monitor(element, checkChildren = false) {\n        const nativeElement = coerceElement(element);\n        // Do nothing if we're not on the browser platform or the passed in node isn't an element.\n        if (!this._platform.isBrowser || nativeElement.nodeType !== 1) {\n            return of(null);\n        }\n        // If the element is inside the shadow DOM, we need to bind our focus/blur listeners to\n        // the shadow root, rather than the `document`, because the browser won't emit focus events\n        // to the `document`, if focus is moving within the same shadow root.\n        const rootNode = _getShadowRoot(nativeElement) || this._getDocument();\n        const cachedInfo = this._elementInfo.get(nativeElement);\n        // Check if we're already monitoring this element.\n        if (cachedInfo) {\n            if (checkChildren) {\n                // TODO(COMP-318): this can be problematic, because it'll turn all non-checkChildren\n                // observers into ones that behave as if `checkChildren` was turned on. We need a more\n                // robust solution.\n                cachedInfo.checkChildren = true;\n            }\n            return cachedInfo.subject;\n        }\n        // Create monitored element info.\n        const info = {\n            checkChildren: checkChildren,\n            subject: new Subject(),\n            rootNode\n        };\n        this._elementInfo.set(nativeElement, info);\n        this._registerGlobalListeners(info);\n        return info.subject;\n    }\n    stopMonitoring(element) {\n        const nativeElement = coerceElement(element);\n        const elementInfo = this._elementInfo.get(nativeElement);\n        if (elementInfo) {\n            elementInfo.subject.complete();\n            this._setClasses(nativeElement);\n            this._elementInfo.delete(nativeElement);\n            this._removeGlobalListeners(elementInfo);\n        }\n    }\n    focusVia(element, origin, options) {\n        const nativeElement = coerceElement(element);\n        const focusedElement = this._getDocument().activeElement;\n        // If the element is focused already, calling `focus` again won't trigger the event listener\n        // which means that the focus classes won't be updated. If that's the case, update the classes\n        // directly without waiting for an event.\n        if (nativeElement === focusedElement) {\n            this._getClosestElementsInfo(nativeElement)\n                .forEach(([currentElement, info]) => this._originChanged(currentElement, origin, info));\n        }\n        else {\n            this._setOriginForCurrentEventQueue(origin);\n            // `focus` isn't available on the server\n            if (typeof nativeElement.focus === 'function') {\n                nativeElement.focus(options);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n        return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    _toggleClass(element, className, shouldSet) {\n        if (shouldSet) {\n            element.classList.add(className);\n        }\n        else {\n            element.classList.remove(className);\n        }\n    }\n    _getFocusOrigin(event) {\n        // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n        // 1) The window has just regained focus, in which case we want to restore the focused state of\n        //    the element from before the window blurred.\n        // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n        // 3) The element was programmatically focused, in which case we should mark the origin as\n        //    'program'.\n        if (this._origin) {\n            return this._origin;\n        }\n        if (this._windowFocused && this._lastFocusOrigin) {\n            return this._lastFocusOrigin;\n        }\n        else if (this._wasCausedByTouch(event)) {\n            return 'touch';\n        }\n        else {\n            return 'program';\n        }\n    }\n    /**\n     * Sets the focus classes on the element based on the given focus origin.\n     * @param element The element to update the classes on.\n     * @param origin The focus origin.\n     */\n    _setClasses(element, origin) {\n        this._toggleClass(element, 'cdk-focused', !!origin);\n        this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');\n        this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n        this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');\n        this._toggleClass(element, 'cdk-program-focused', origin === 'program');\n    }\n    /**\n     * Sets the origin and schedules an async function to clear it at the end of the event queue.\n     * If the detection mode is 'eventual', the origin is never cleared.\n     * @param origin The origin to set.\n     */\n    _setOriginForCurrentEventQueue(origin) {\n        this._ngZone.runOutsideAngular(() => {\n            this._origin = origin;\n            if (this._detectionMode === 0 /* IMMEDIATE */) {\n                // Sometimes the focus origin won't be valid in Firefox because Firefox seems to focus *one*\n                // tick after the interaction event fired. To ensure the focus origin is always correct,\n                // the focus origin will be determined at the beginning of the next tick.\n                this._originTimeoutId = setTimeout(() => this._origin = null, 1);\n            }\n        });\n    }\n    /**\n     * Checks whether the given focus event was caused by a touchstart event.\n     * @param event The focus event to check.\n     * @returns Whether the event was caused by a touch.\n     */\n    _wasCausedByTouch(event) {\n        // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n        // Consider the following dom structure:\n        //\n        // <div #parent tabindex=\"0\" cdkFocusClasses>\n        //   <div #child (click)=\"#parent.focus()\"></div>\n        // </div>\n        //\n        // If the user touches the #child element and the #parent is programmatically focused as a\n        // result, this code will still consider it to have been caused by the touch event and will\n        // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n        // relatively small edge-case that can be worked around by using\n        // focusVia(parentEl, 'program') to focus the parent element.\n        //\n        // If we decide that we absolutely must handle this case correctly, we can do so by listening\n        // for the first focus event after the touchstart, and then the first blur event after that\n        // focus event. When that blur event fires we know that whatever follows is not a result of the\n        // touchstart.\n        const focusTarget = getTarget(event);\n        return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&\n            (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n    }\n    /**\n     * Handles focus events on a registered element.\n     * @param event The focus event.\n     * @param element The monitored element.\n     */\n    _onFocus(event, element) {\n        // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n        // focus event affecting the monitored element. If we want to use the origin of the first event\n        // instead we should check for the cdk-focused class here and return if the element already has\n        // it. (This only matters for elements that have includesChildren = true).\n        // If we are not counting child-element-focus as focused, make sure that the event target is the\n        // monitored element itself.\n        const elementInfo = this._elementInfo.get(element);\n        if (!elementInfo || (!elementInfo.checkChildren && element !== getTarget(event))) {\n            return;\n        }\n        this._originChanged(element, this._getFocusOrigin(event), elementInfo);\n    }\n    /**\n     * Handles blur events on a registered element.\n     * @param event The blur event.\n     * @param element The monitored element.\n     */\n    _onBlur(event, element) {\n        // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n        // order to focus another child of the monitored element.\n        const elementInfo = this._elementInfo.get(element);\n        if (!elementInfo || (elementInfo.checkChildren && event.relatedTarget instanceof Node &&\n            element.contains(event.relatedTarget))) {\n            return;\n        }\n        this._setClasses(element);\n        this._emitOrigin(elementInfo.subject, null);\n    }\n    _emitOrigin(subject, origin) {\n        this._ngZone.run(() => subject.next(origin));\n    }\n    _registerGlobalListeners(elementInfo) {\n        if (!this._platform.isBrowser) {\n            return;\n        }\n        const rootNode = elementInfo.rootNode;\n        const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;\n        if (!rootNodeFocusListeners) {\n            this._ngZone.runOutsideAngular(() => {\n                rootNode.addEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n                rootNode.addEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n            });\n        }\n        this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1);\n        // Register global listeners when first element is monitored.\n        if (++this._monitoredElementCount === 1) {\n            // Note: we listen to events in the capture phase so we\n            // can detect them even if the user stops propagation.\n            this._ngZone.runOutsideAngular(() => {\n                const document = this._getDocument();\n                const window = this._getWindow();\n                document.addEventListener('keydown', this._documentKeydownListener, captureEventListenerOptions);\n                document.addEventListener('mousedown', this._documentMousedownListener, captureEventListenerOptions);\n                document.addEventListener('touchstart', this._documentTouchstartListener, captureEventListenerOptions);\n                window.addEventListener('focus', this._windowFocusListener);\n            });\n        }\n    }\n    _removeGlobalListeners(elementInfo) {\n        const rootNode = elementInfo.rootNode;\n        if (this._rootNodeFocusListenerCount.has(rootNode)) {\n            const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode);\n            if (rootNodeFocusListeners > 1) {\n                this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);\n            }\n            else {\n                rootNode.removeEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n                rootNode.removeEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n                this._rootNodeFocusListenerCount.delete(rootNode);\n            }\n        }\n        // Unregister global listeners when last element is unmonitored.\n        if (!--this._monitoredElementCount) {\n            const document = this._getDocument();\n            const window = this._getWindow();\n            document.removeEventListener('keydown', this._documentKeydownListener, captureEventListenerOptions);\n            document.removeEventListener('mousedown', this._documentMousedownListener, captureEventListenerOptions);\n            document.removeEventListener('touchstart', this._documentTouchstartListener, captureEventListenerOptions);\n            window.removeEventListener('focus', this._windowFocusListener);\n            // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n            clearTimeout(this._windowFocusTimeoutId);\n            clearTimeout(this._touchTimeoutId);\n            clearTimeout(this._originTimeoutId);\n        }\n    }\n    /** Updates all the state on an element once its focus origin has changed. */\n    _originChanged(element, origin, elementInfo) {\n        this._setClasses(element, origin);\n        this._emitOrigin(elementInfo.subject, origin);\n        this._lastFocusOrigin = origin;\n    }\n    /**\n     * Collects the `MonitoredElementInfo` of a particular element and\n     * all of its ancestors that have enabled `checkChildren`.\n     * @param element Element from which to start the search.\n     */\n    _getClosestElementsInfo(element) {\n        const results = [];\n        this._elementInfo.forEach((info, currentElement) => {\n            if (currentElement === element || (info.checkChildren && currentElement.contains(element))) {\n                results.push([currentElement, info]);\n            }\n        });\n        return results;\n    }\n}\nFocusMonitor.ɵprov = i0.ɵɵdefineInjectable({ factory: function FocusMonitor_Factory() { return new FocusMonitor(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i2.DOCUMENT, 8), i0.ɵɵinject(FOCUS_MONITOR_DEFAULT_OPTIONS, 8)); }, token: FocusMonitor, providedIn: \"root\" });\nFocusMonitor.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\nFocusMonitor.ctorParameters = () => [\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [FOCUS_MONITOR_DEFAULT_OPTIONS,] }] }\n];\n/** Gets the target of an event, accounting for Shadow DOM. */\nfunction getTarget(event) {\n    // If an event is bound outside the Shadow DOM, the `event.target` will\n    // point to the shadow root so we have to use `composedPath` instead.\n    return (event.composedPath ? event.composedPath()[0] : event.target);\n}\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\nclass CdkMonitorFocus {\n    constructor(_elementRef, _focusMonitor) {\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this.cdkFocusChange = new EventEmitter();\n    }\n    ngAfterViewInit() {\n        const element = this._elementRef.nativeElement;\n        this._monitorSubscription = this._focusMonitor.monitor(element, element.nodeType === 1 && element.hasAttribute('cdkMonitorSubtreeFocus'))\n            .subscribe(origin => this.cdkFocusChange.emit(origin));\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        if (this._monitorSubscription) {\n            this._monitorSubscription.unsubscribe();\n        }\n    }\n}\nCdkMonitorFocus.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',\n            },] }\n];\nCdkMonitorFocus.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor }\n];\nCdkMonitorFocus.propDecorators = {\n    cdkFocusChange: [{ type: Output }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** CSS class applied to the document body when in black-on-white high-contrast mode. */\nconst BLACK_ON_WHITE_CSS_CLASS = 'cdk-high-contrast-black-on-white';\n/** CSS class applied to the document body when in white-on-black high-contrast mode. */\nconst WHITE_ON_BLACK_CSS_CLASS = 'cdk-high-contrast-white-on-black';\n/** CSS class applied to the document body when in high-contrast mode. */\nconst HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = 'cdk-high-contrast-active';\n/**\n * Service to determine whether the browser is currently in a high-contrast-mode environment.\n *\n * Microsoft Windows supports an accessibility feature called \"High Contrast Mode\". This mode\n * changes the appearance of all applications, including web applications, to dramatically increase\n * contrast.\n *\n * IE, Edge, and Firefox currently support this mode. Chrome does not support Windows High Contrast\n * Mode. This service does not detect high-contrast mode as added by the Chrome \"High Contrast\"\n * browser extension.\n */\nclass HighContrastModeDetector {\n    constructor(_platform, document) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    /** Gets the current high-contrast-mode for the page. */\n    getHighContrastMode() {\n        if (!this._platform.isBrowser) {\n            return 0 /* NONE */;\n        }\n        // Create a test element with an arbitrary background-color that is neither black nor\n        // white; high-contrast mode will coerce the color to either black or white. Also ensure that\n        // appending the test element to the DOM does not affect layout by absolutely positioning it\n        const testElement = this._document.createElement('div');\n        testElement.style.backgroundColor = 'rgb(1,2,3)';\n        testElement.style.position = 'absolute';\n        this._document.body.appendChild(testElement);\n        // Get the computed style for the background color, collapsing spaces to normalize between\n        // browsers. Once we get this color, we no longer need the test element. Access the `window`\n        // via the document so we can fake it in tests. Note that we have extra null checks, because\n        // this logic will likely run during app bootstrap and throwing can break the entire app.\n        const documentWindow = this._document.defaultView || window;\n        const computedStyle = (documentWindow && documentWindow.getComputedStyle) ?\n            documentWindow.getComputedStyle(testElement) : null;\n        const computedColor = (computedStyle && computedStyle.backgroundColor || '').replace(/ /g, '');\n        this._document.body.removeChild(testElement);\n        switch (computedColor) {\n            case 'rgb(0,0,0)': return 2 /* WHITE_ON_BLACK */;\n            case 'rgb(255,255,255)': return 1 /* BLACK_ON_WHITE */;\n        }\n        return 0 /* NONE */;\n    }\n    /** Applies CSS classes indicating high-contrast mode to document body (browser-only). */\n    _applyBodyHighContrastModeCssClasses() {\n        if (!this._hasCheckedHighContrastMode && this._platform.isBrowser && this._document.body) {\n            const bodyClasses = this._document.body.classList;\n            // IE11 doesn't support `classList` operations with multiple arguments\n            bodyClasses.remove(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n            bodyClasses.remove(BLACK_ON_WHITE_CSS_CLASS);\n            bodyClasses.remove(WHITE_ON_BLACK_CSS_CLASS);\n            this._hasCheckedHighContrastMode = true;\n            const mode = this.getHighContrastMode();\n            if (mode === 1 /* BLACK_ON_WHITE */) {\n                bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n                bodyClasses.add(BLACK_ON_WHITE_CSS_CLASS);\n            }\n            else if (mode === 2 /* WHITE_ON_BLACK */) {\n                bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n                bodyClasses.add(WHITE_ON_BLACK_CSS_CLASS);\n            }\n        }\n    }\n}\nHighContrastModeDetector.ɵprov = i0.ɵɵdefineInjectable({ factory: function HighContrastModeDetector_Factory() { return new HighContrastModeDetector(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i2.DOCUMENT)); }, token: HighContrastModeDetector, providedIn: \"root\" });\nHighContrastModeDetector.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\nHighContrastModeDetector.ctorParameters = () => [\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass A11yModule {\n    constructor(highContrastModeDetector) {\n        highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n    }\n}\nA11yModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [PlatformModule, ObserversModule],\n                declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n                exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n            },] }\n];\nA11yModule.ctorParameters = () => [\n    { type: HighContrastModeDetector }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { A11yModule, ActiveDescendantKeyManager, AriaDescriber, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, CDK_DESCRIBEDBY_ID_PREFIX, CdkAriaLive, CdkMonitorFocus, CdkTrapFocus, ConfigurableFocusTrap, ConfigurableFocusTrapFactory, EventListenerFocusTrapInertStrategy, FOCUS_MONITOR_DEFAULT_OPTIONS, FOCUS_TRAP_INERT_STRATEGY, FocusKeyManager, FocusMonitor, FocusTrap, FocusTrapFactory, HighContrastModeDetector, InteractivityChecker, IsFocusableConfig, LIVE_ANNOUNCER_DEFAULT_OPTIONS, LIVE_ANNOUNCER_ELEMENT_TOKEN, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, ListKeyManager, LiveAnnouncer, MESSAGES_CONTAINER_ID, TOUCH_BUFFER_MS, isFakeMousedownFromScreenReader, isFakeTouchstartFromScreenReader, FocusTrapManager as ɵangular_material_src_cdk_a11y_a11y_a };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}