{"ast":null,"code":"/**\r\n * Paper class just like the white sheet of pressed fiber it draws its name\r\n * inspiration from is used as a starting point to start a drawing.\r\n *\r\n * Before we can start adding elements (drawing) we need to take out a new sheet\r\n * of paper, or in this instance create a blank SVG element.\r\n *\r\n * This class creates such element, as well as implements methods needed to\r\n * start adding elements to it.\r\n */\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { AMElement } from \"./AMElement\";\nimport { Group } from \"./Group\";\nimport { SVGContainer } from \"./SVGContainer\";\nimport * as $dom from \"../utils/DOM\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Paper class which when instantiated will create an SVG element as well as\r\n * some of the sub-elements like `<desc>`, `<defs>`.\r\n *\r\n * Use its methods like `addGroup` and `append` to add elements to the paper.\r\n */\nvar Paper = /** @class */function () {\n  /**\r\n   * Creates main `<svg>` container and related elements.\r\n   *\r\n   * @param container A reference to HTML element to create `<svg>` in\r\n   */\n  function Paper(container, id) {\n    // Store container reference\n    this.container = container;\n    this.id = id;\n    // Create SVG element\n    var svg = document.createElementNS($dom.SVGNS, \"svg\");\n    svg.setAttribute(\"version\", \"1.1\");\n    svg.setAttributeNS($dom.XMLNS, \"xmlns\", $dom.SVGNS);\n    svg.setAttributeNS($dom.XMLNS, \"xmlns:xlink\", $dom.XLINK);\n    svg.setAttribute(\"role\", \"group\");\n    this.container.appendChild(svg);\n    // Add description\n    //let desc: SVGElement = <SVGElement>document.createElementNS($dom.SVGNS, \"desc\");\n    //desc.appendChild(document.createTextNode(\"JavaScript chart by amCharts\"));\n    //svg.appendChild(desc);\n    // Add defs\n    this.defs = document.createElementNS($dom.SVGNS, \"defs\");\n    svg.appendChild(this.defs);\n    // Set width and height to fit container\n    svg.style.width = \"100%\";\n    svg.style.height = \"100%\";\n    svg.style.overflow = \"visible\";\n    // Store variable\n    this.svg = svg;\n  }\n  /**\r\n   * Creates and returns a new element. Does not attach it to Paper yet.\r\n   *\r\n   * @param elementName  Element name\r\n   * @return New element\r\n   */\n  Paper.prototype.add = function (elementName) {\n    return new AMElement(elementName);\n  };\n  /**\r\n   * Creates and returns a new Group element. Does not attach it to Paper.\r\n   *\r\n   * @param groupName  Element name\r\n   * @return New Group\r\n   */\n  Paper.prototype.addGroup = function (groupName) {\n    return new Group(groupName);\n  };\n  /**\r\n   * Appends an element to Paper.\r\n   *\r\n   * @param element Element to append\r\n   */\n  Paper.prototype.append = function (element) {\n    if (element) {\n      this.svg.appendChild(element.node);\n    }\n  };\n  /**\r\n   * Appends an element to `<defs>` block of the Paper.\r\n   *\r\n   * @param element  Element\r\n   */\n  Paper.prototype.appendDef = function (element) {\n    if (element) {\n      this.defs.appendChild(element.node);\n    }\n  };\n  /**\r\n   * Creates and returns new `<foreignObject>` element. Does not append it to\r\n   * Paper.\r\n   *\r\n   * @return A foreignObject element\r\n   */\n  Paper.prototype.foreignObject = function () {\n    var element = new AMElement(\"foreignObject\");\n    //this.append(element);\n    return element;\n  };\n  /**\r\n   * Checks if browser supports `<foreignObject>` elements.\r\n   *\r\n   * @return Supports `foreignObject`?\r\n   */\n  Paper.prototype.supportsForeignObject = function () {\n    return document.implementation.hasFeature(\"http://www.w3.org/TR/SVG11/feature#Extensibility\", \"1.1\");\n  };\n  return Paper;\n}();\nexport { Paper };\nvar ghostPaper = null;\n/**\r\n * A [[Paper]] instance to create elements, that are not yet ready to be\r\n * placed in visible DOM.\r\n *\r\n * @ignore Exclude from docs\r\n */\nexport function getGhostPaper() {\n  if (ghostPaper === null) {\n    // ghost is used to draw elements while real paper is not yet created or Sprite doesn't know parent yet\n    var ghostDiv = document.createElement(\"div\");\n    ghostDiv.hidden = true;\n    ghostDiv.style.width = \"1px\";\n    ghostDiv.style.height = \"1px\";\n    ghostDiv.style.position = \"absolute\";\n    ghostDiv.style.zIndex = \"-1000000\";\n    document.body.appendChild(ghostDiv);\n    var ghostSvgContainer = new SVGContainer(ghostDiv, true);\n    ghostPaper = new Paper(ghostSvgContainer.SVGContainer, \"ghost\");\n  }\n  return ghostPaper;\n}","map":{"version":3,"names":["AMElement","Group","SVGContainer","$dom","Paper","container","id","svg","document","createElementNS","SVGNS","setAttribute","setAttributeNS","XMLNS","XLINK","appendChild","defs","style","width","height","overflow","prototype","add","elementName","addGroup","groupName","append","element","node","appendDef","foreignObject","supportsForeignObject","implementation","hasFeature","ghostPaper","getGhostPaper","ghostDiv","createElement","hidden","position","zIndex","body","ghostSvgContainer"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/rendering/Paper.js"],"sourcesContent":["/**\r\n * Paper class just like the white sheet of pressed fiber it draws its name\r\n * inspiration from is used as a starting point to start a drawing.\r\n *\r\n * Before we can start adding elements (drawing) we need to take out a new sheet\r\n * of paper, or in this instance create a blank SVG element.\r\n *\r\n * This class creates such element, as well as implements methods needed to\r\n * start adding elements to it.\r\n */\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AMElement } from \"./AMElement\";\r\nimport { Group } from \"./Group\";\r\nimport { SVGContainer } from \"./SVGContainer\";\r\nimport * as $dom from \"../utils/DOM\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Paper class which when instantiated will create an SVG element as well as\r\n * some of the sub-elements like `<desc>`, `<defs>`.\r\n *\r\n * Use its methods like `addGroup` and `append` to add elements to the paper.\r\n */\r\nvar Paper = /** @class */ (function () {\r\n    /**\r\n     * Creates main `<svg>` container and related elements.\r\n     *\r\n     * @param container A reference to HTML element to create `<svg>` in\r\n     */\r\n    function Paper(container, id) {\r\n        // Store container reference\r\n        this.container = container;\r\n        this.id = id;\r\n        // Create SVG element\r\n        var svg = document.createElementNS($dom.SVGNS, \"svg\");\r\n        svg.setAttribute(\"version\", \"1.1\");\r\n        svg.setAttributeNS($dom.XMLNS, \"xmlns\", $dom.SVGNS);\r\n        svg.setAttributeNS($dom.XMLNS, \"xmlns:xlink\", $dom.XLINK);\r\n        svg.setAttribute(\"role\", \"group\");\r\n        this.container.appendChild(svg);\r\n        // Add description\r\n        //let desc: SVGElement = <SVGElement>document.createElementNS($dom.SVGNS, \"desc\");\r\n        //desc.appendChild(document.createTextNode(\"JavaScript chart by amCharts\"));\r\n        //svg.appendChild(desc);\r\n        // Add defs\r\n        this.defs = document.createElementNS($dom.SVGNS, \"defs\");\r\n        svg.appendChild(this.defs);\r\n        // Set width and height to fit container\r\n        svg.style.width = \"100%\";\r\n        svg.style.height = \"100%\";\r\n        svg.style.overflow = \"visible\";\r\n        // Store variable\r\n        this.svg = svg;\r\n    }\r\n    /**\r\n     * Creates and returns a new element. Does not attach it to Paper yet.\r\n     *\r\n     * @param elementName  Element name\r\n     * @return New element\r\n     */\r\n    Paper.prototype.add = function (elementName) {\r\n        return new AMElement(elementName);\r\n    };\r\n    /**\r\n     * Creates and returns a new Group element. Does not attach it to Paper.\r\n     *\r\n     * @param groupName  Element name\r\n     * @return New Group\r\n     */\r\n    Paper.prototype.addGroup = function (groupName) {\r\n        return new Group(groupName);\r\n    };\r\n    /**\r\n     * Appends an element to Paper.\r\n     *\r\n     * @param element Element to append\r\n     */\r\n    Paper.prototype.append = function (element) {\r\n        if (element) {\r\n            this.svg.appendChild(element.node);\r\n        }\r\n    };\r\n    /**\r\n     * Appends an element to `<defs>` block of the Paper.\r\n     *\r\n     * @param element  Element\r\n     */\r\n    Paper.prototype.appendDef = function (element) {\r\n        if (element) {\r\n            this.defs.appendChild(element.node);\r\n        }\r\n    };\r\n    /**\r\n     * Creates and returns new `<foreignObject>` element. Does not append it to\r\n     * Paper.\r\n     *\r\n     * @return A foreignObject element\r\n     */\r\n    Paper.prototype.foreignObject = function () {\r\n        var element = new AMElement(\"foreignObject\");\r\n        //this.append(element);\r\n        return element;\r\n    };\r\n    /**\r\n     * Checks if browser supports `<foreignObject>` elements.\r\n     *\r\n     * @return Supports `foreignObject`?\r\n     */\r\n    Paper.prototype.supportsForeignObject = function () {\r\n        return document.implementation.hasFeature(\"http://www.w3.org/TR/SVG11/feature#Extensibility\", \"1.1\");\r\n    };\r\n    return Paper;\r\n}());\r\nexport { Paper };\r\nvar ghostPaper = null;\r\n/**\r\n * A [[Paper]] instance to create elements, that are not yet ready to be\r\n * placed in visible DOM.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport function getGhostPaper() {\r\n    if (ghostPaper === null) {\r\n        // ghost is used to draw elements while real paper is not yet created or Sprite doesn't know parent yet\r\n        var ghostDiv = document.createElement(\"div\");\r\n        ghostDiv.hidden = true;\r\n        ghostDiv.style.width = \"1px\";\r\n        ghostDiv.style.height = \"1px\";\r\n        ghostDiv.style.position = \"absolute\";\r\n        ghostDiv.style.zIndex = \"-1000000\";\r\n        document.body.appendChild(ghostDiv);\r\n        var ghostSvgContainer = new SVGContainer(ghostDiv, true);\r\n        ghostPaper = new Paper(ghostSvgContainer.SVGContainer, \"ghost\");\r\n    }\r\n    return ghostPaper;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}