{"ast":null,"code":"import { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Optional, Inject, ContentChildren, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/**\n * Injection token that can be used to reference instances of `MatButtonToggleGroup`.\n * It serves as alternative token to the actual `MatButtonToggleGroup` class which\n * could cause unnecessary retention of the class and its component metadata.\n */\nconst MAT_BUTTON_TOGGLE_GROUP = new InjectionToken('MatButtonToggleGroup');\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n// Counter used to generate unique IDs.\nlet uniqueIdCounter = 0;\n/** Change event object emitted by MatButtonToggle. */\nclass MatButtonToggleChange {\n  constructor( /** The MatButtonToggle that emits the event. */\n  source, /** The value assigned to the MatButtonToggle. */\n  value) {\n    this.source = source;\n    this.value = value;\n  }\n}\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\nclass MatButtonToggleGroup {\n  constructor(_changeDetector, defaultOptions) {\n    this._changeDetector = _changeDetector;\n    this._vertical = false;\n    this._multiple = false;\n    this._disabled = false;\n    /**\n     * The method to be called in order to update ngModel.\n     * Now `ngModel` binding is not supported in multiple selection mode.\n     */\n    this._controlValueAccessorChangeFn = () => {};\n    /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n    this._onTouched = () => {};\n    this._name = `mat-button-toggle-group-${uniqueIdCounter++}`;\n    /**\n     * Event that emits whenever the value of the group changes.\n     * Used to facilitate two-way data binding.\n     * @docs-private\n     */\n    this.valueChange = new EventEmitter();\n    /** Event emitted when the group's value changes. */\n    this.change = new EventEmitter();\n    this.appearance = defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n  /** `name` attribute for the underlying `input` element. */\n  get name() {\n    return this._name;\n  }\n  set name(value) {\n    this._name = value;\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => {\n        toggle.name = this._name;\n        toggle._markForCheck();\n      });\n    }\n  }\n  /** Whether the toggle group is vertical. */\n  get vertical() {\n    return this._vertical;\n  }\n  set vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  /** Value of the toggle group. */\n  get value() {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n    return this.multiple ? selected : selected[0] || null;\n  }\n  /** Whether multiple button toggles can be selected. */\n  get multiple() {\n    return this._multiple;\n  }\n  set multiple(value) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  /** Whether multiple button toggle group is disabled. */\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n  ngOnInit() {\n    this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n  }\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n  }\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent() {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   * @param deferEvents Whether to defer emitting the change events.\n   */\n  _syncButtonToggle(toggle, select, isUserInput = false, deferEvents = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      this.selected.checked = false;\n    }\n    if (this._selectionModel) {\n      if (select) {\n        this._selectionModel.select(toggle);\n      } else {\n        this._selectionModel.deselect(toggle);\n      }\n    } else {\n      deferEvents = true;\n    }\n    // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n    // the side-effect is that we may end up updating the model value out of sequence in others\n    // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n    if (deferEvents) {\n      Promise.resolve().then(() => this._updateModelValue(isUserInput));\n    } else {\n      this._updateModelValue(isUserInput);\n    }\n  }\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle) {\n    return this._selectionModel && this._selectionModel.isSelected(toggle);\n  }\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n    return toggle.value === this._rawValue;\n  }\n  /** Updates the selection state of the toggles in the group based on a value. */\n  _setSelectionByValue(value) {\n    this._rawValue = value;\n    if (!this._buttonToggles) {\n      return;\n    }\n    if (this.multiple && value) {\n      if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n      this._clearSelection();\n      value.forEach(currentValue => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n  /** Clears the selected toggles. */\n  _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n  /** Selects a value if there's a toggle that corresponds to it. */\n  _selectValue(value) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n  /** Syncs up the group's value with the model and emits the change event. */\n  _updateModelValue(isUserInput) {\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n}\nMatButtonToggleGroup.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-button-toggle-group',\n    providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, {\n      provide: MAT_BUTTON_TOGGLE_GROUP,\n      useExisting: MatButtonToggleGroup\n    }],\n    host: {\n      'role': 'group',\n      'class': 'mat-button-toggle-group',\n      '[attr.aria-disabled]': 'disabled',\n      '[class.mat-button-toggle-vertical]': 'vertical',\n      '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"'\n    },\n    exportAs: 'matButtonToggleGroup'\n  }]\n}];\nMatButtonToggleGroup.ctorParameters = () => [{\n  type: ChangeDetectorRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n  }]\n}];\nMatButtonToggleGroup.propDecorators = {\n  _buttonToggles: [{\n    type: ContentChildren,\n    args: [forwardRef(() => MatButtonToggle), {\n      // Note that this would technically pick up toggles\n      // from nested groups, but that's not a case that we support.\n      descendants: true\n    }]\n  }],\n  appearance: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  vertical: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  valueChange: [{\n    type: Output\n  }],\n  multiple: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }]\n};\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nclass MatButtonToggleBase {}\nconst _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n/** Single button inside of a toggle group. */\nclass MatButtonToggle extends _MatButtonToggleMixinBase {\n  constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, defaultTabIndex, defaultOptions) {\n    super();\n    this._changeDetectorRef = _changeDetectorRef;\n    this._elementRef = _elementRef;\n    this._focusMonitor = _focusMonitor;\n    this._isSingleSelector = false;\n    this._checked = false;\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    this.ariaLabelledby = null;\n    this._disabled = false;\n    /** Event emitted when the group value changes. */\n    this.change = new EventEmitter();\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance = defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n  /** Unique ID for the underlying `button` element. */\n  get buttonId() {\n    return `${this.id}-button`;\n  }\n  /** The appearance style of the button. */\n  get appearance() {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value) {\n    this._appearance = value;\n  }\n  /** Whether the button is checked. */\n  get checked() {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /** Whether the button is disabled. */\n  get disabled() {\n    return this._disabled || this.buttonToggleGroup && this.buttonToggleGroup.disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  ngOnInit() {\n    const group = this.buttonToggleGroup;\n    this._isSingleSelector = group && !group.multiple;\n    this.id = this.id || `mat-button-toggle-${uniqueIdCounter++}`;\n    if (this._isSingleSelector) {\n      this.name = group.name;\n    }\n    if (group) {\n      if (group._isPrechecked(this)) {\n        this.checked = true;\n      } else if (group._isSelected(this) !== this._checked) {\n        // As as side effect of the circular dependency between the toggle group and the button,\n        // we may end up in a state where the button is supposed to be checked on init, but it\n        // isn't, because the checked value was assigned too early. This can happen when Ivy\n        // assigns the static input value before the `ngOnInit` has run.\n        group._syncButtonToggle(this, this._checked);\n      }\n    }\n  }\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      group._syncButtonToggle(this, false, false, true);\n    }\n  }\n  /** Focuses the button. */\n  focus(options) {\n    this._buttonElement.nativeElement.focus(options);\n  }\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\nMatButtonToggle.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-button-toggle',\n    template: \"<button #button class=\\\"mat-button-toggle-button mat-focus-indicator\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"name || null\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <span class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </span>\\n</button>\\n\\n<span class=\\\"mat-button-toggle-focus-overlay\\\"></span>\\n<span class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</span>\\n\",\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'matButtonToggle',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disableRipple'],\n    host: {\n      '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n      '[class.mat-button-toggle-checked]': 'checked',\n      '[class.mat-button-toggle-disabled]': 'disabled',\n      '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n      'class': 'mat-button-toggle',\n      '[attr.aria-label]': 'null',\n      '[attr.aria-labelledby]': 'null',\n      '[attr.id]': 'id',\n      '[attr.name]': 'null',\n      '(focus)': 'focus()',\n      'role': 'presentation'\n    },\n    styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"]\n  }]\n}];\nMatButtonToggle.ctorParameters = () => [{\n  type: MatButtonToggleGroup,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_BUTTON_TOGGLE_GROUP]\n  }]\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: ElementRef\n}, {\n  type: FocusMonitor\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n  }]\n}];\nMatButtonToggle.propDecorators = {\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  _buttonElement: [{\n    type: ViewChild,\n    args: ['button']\n  }],\n  id: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  tabIndex: [{\n    type: Input\n  }],\n  appearance: [{\n    type: Input\n  }],\n  checked: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatButtonToggleModule {}\nMatButtonToggleModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [MatCommonModule, MatRippleModule],\n    exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n    declarations: [MatButtonToggleGroup, MatButtonToggle]\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggle, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleModule };","map":{"version":3,"names":["FocusMonitor","coerceBooleanProperty","SelectionModel","InjectionToken","forwardRef","EventEmitter","Directive","ChangeDetectorRef","Optional","Inject","ContentChildren","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","ElementRef","Attribute","ViewChild","NgModule","NG_VALUE_ACCESSOR","mixinDisableRipple","MatCommonModule","MatRippleModule","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","provide","useExisting","MatButtonToggleGroup","multi","uniqueIdCounter","MatButtonToggleChange","constructor","source","value","_changeDetector","defaultOptions","_vertical","_multiple","_disabled","_controlValueAccessorChangeFn","_onTouched","_name","valueChange","change","appearance","name","_buttonToggles","forEach","toggle","_markForCheck","vertical","selected","_selectionModel","multiple","map","undefined","newValue","_setSelectionByValue","emit","disabled","ngOnInit","ngAfterContentInit","select","filter","checked","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","_emitChangeEvent","Array","isArray","length","event","_syncButtonToggle","isUserInput","deferEvents","deselect","Promise","resolve","then","_updateModelValue","_isSelected","isSelected","_isPrechecked","_rawValue","some","ngDevMode","Error","_clearSelection","currentValue","_selectValue","clear","correspondingOption","find","decorators","type","args","selector","providers","host","exportAs","ctorParameters","propDecorators","MatButtonToggle","descendants","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_changeDetectorRef","_elementRef","_focusMonitor","defaultTabIndex","_isSingleSelector","_checked","ariaLabelledby","parsedTabIndex","Number","tabIndex","buttonToggleGroup","buttonId","id","_appearance","group","ngAfterViewInit","monitor","ngOnDestroy","stopMonitoring","focus","options","_buttonElement","nativeElement","_onButtonClick","newChecked","template","encapsulation","None","changeDetection","OnPush","inputs","styles","String","ariaLabel","MatButtonToggleModule","imports","exports","declarations"],"sources":["D:/alodelivery test/node_modules/@angular/material/fesm2015/button-toggle.js"],"sourcesContent":["import { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Optional, Inject, ContentChildren, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/**\n * Injection token that can be used to reference instances of `MatButtonToggleGroup`.\n * It serves as alternative token to the actual `MatButtonToggleGroup` class which\n * could cause unnecessary retention of the class and its component metadata.\n */\nconst MAT_BUTTON_TOGGLE_GROUP = new InjectionToken('MatButtonToggleGroup');\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatButtonToggleGroup),\n    multi: true\n};\n// Counter used to generate unique IDs.\nlet uniqueIdCounter = 0;\n/** Change event object emitted by MatButtonToggle. */\nclass MatButtonToggleChange {\n    constructor(\n    /** The MatButtonToggle that emits the event. */\n    source, \n    /** The value assigned to the MatButtonToggle. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\nclass MatButtonToggleGroup {\n    constructor(_changeDetector, defaultOptions) {\n        this._changeDetector = _changeDetector;\n        this._vertical = false;\n        this._multiple = false;\n        this._disabled = false;\n        /**\n         * The method to be called in order to update ngModel.\n         * Now `ngModel` binding is not supported in multiple selection mode.\n         */\n        this._controlValueAccessorChangeFn = () => { };\n        /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n        this._onTouched = () => { };\n        this._name = `mat-button-toggle-group-${uniqueIdCounter++}`;\n        /**\n         * Event that emits whenever the value of the group changes.\n         * Used to facilitate two-way data binding.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /** Event emitted when the group's value changes. */\n        this.change = new EventEmitter();\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /** `name` attribute for the underlying `input` element. */\n    get name() { return this._name; }\n    set name(value) {\n        this._name = value;\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(toggle => {\n                toggle.name = this._name;\n                toggle._markForCheck();\n            });\n        }\n    }\n    /** Whether the toggle group is vertical. */\n    get vertical() { return this._vertical; }\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n    /** Value of the toggle group. */\n    get value() {\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        if (this.multiple) {\n            return selected.map(toggle => toggle.value);\n        }\n        return selected[0] ? selected[0].value : undefined;\n    }\n    set value(newValue) {\n        this._setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n    /** Selected button toggles in the group. */\n    get selected() {\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        return this.multiple ? selected : (selected[0] || null);\n    }\n    /** Whether multiple button toggles can be selected. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether multiple button toggle group is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(toggle => toggle._markForCheck());\n        }\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    }\n    ngAfterContentInit() {\n        this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent() {\n        const selected = this.selected;\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        const event = new MatButtonToggleChange(source, this.value);\n        this._controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     * @param deferEvents Whether to defer emitting the change events.\n     */\n    _syncButtonToggle(toggle, select, isUserInput = false, deferEvents = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            this.selected.checked = false;\n        }\n        if (this._selectionModel) {\n            if (select) {\n                this._selectionModel.select(toggle);\n            }\n            else {\n                this._selectionModel.deselect(toggle);\n            }\n        }\n        else {\n            deferEvents = true;\n        }\n        // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n        // the side-effect is that we may end up updating the model value out of sequence in others\n        // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n        if (deferEvents) {\n            Promise.resolve().then(() => this._updateModelValue(isUserInput));\n        }\n        else {\n            this._updateModelValue(isUserInput);\n        }\n    }\n    /** Checks whether a button toggle is selected. */\n    _isSelected(toggle) {\n        return this._selectionModel && this._selectionModel.isSelected(toggle);\n    }\n    /** Determines whether a button toggle should be checked on init. */\n    _isPrechecked(toggle) {\n        if (typeof this._rawValue === 'undefined') {\n            return false;\n        }\n        if (this.multiple && Array.isArray(this._rawValue)) {\n            return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n        }\n        return toggle.value === this._rawValue;\n    }\n    /** Updates the selection state of the toggles in the group based on a value. */\n    _setSelectionByValue(value) {\n        this._rawValue = value;\n        if (!this._buttonToggles) {\n            return;\n        }\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n            this._clearSelection();\n            value.forEach((currentValue) => this._selectValue(currentValue));\n        }\n        else {\n            this._clearSelection();\n            this._selectValue(value);\n        }\n    }\n    /** Clears the selected toggles. */\n    _clearSelection() {\n        this._selectionModel.clear();\n        this._buttonToggles.forEach(toggle => toggle.checked = false);\n    }\n    /** Selects a value if there's a toggle that corresponds to it. */\n    _selectValue(value) {\n        const correspondingOption = this._buttonToggles.find(toggle => {\n            return toggle.value != null && toggle.value === value;\n        });\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this._selectionModel.select(correspondingOption);\n        }\n    }\n    /** Syncs up the group's value with the model and emits the change event. */\n    _updateModelValue(isUserInput) {\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this._emitChangeEvent();\n        }\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n}\nMatButtonToggleGroup.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-button-toggle-group',\n                providers: [\n                    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n                    { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\n                ],\n                host: {\n                    'role': 'group',\n                    'class': 'mat-button-toggle-group',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[class.mat-button-toggle-vertical]': 'vertical',\n                    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n                },\n                exportAs: 'matButtonToggleGroup',\n            },] }\n];\nMatButtonToggleGroup.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggleGroup.propDecorators = {\n    _buttonToggles: [{ type: ContentChildren, args: [forwardRef(() => MatButtonToggle), {\n                    // Note that this would technically pick up toggles\n                    // from nested groups, but that's not a case that we support.\n                    descendants: true\n                },] }],\n    appearance: [{ type: Input }],\n    name: [{ type: Input }],\n    vertical: [{ type: Input }],\n    value: [{ type: Input }],\n    valueChange: [{ type: Output }],\n    multiple: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nclass MatButtonToggleBase {\n}\nconst _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n/** Single button inside of a toggle group. */\nclass MatButtonToggle extends _MatButtonToggleMixinBase {\n    constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, defaultTabIndex, defaultOptions) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._isSingleSelector = false;\n        this._checked = false;\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._disabled = false;\n        /** Event emitted when the group value changes. */\n        this.change = new EventEmitter();\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n        this.buttonToggleGroup = toggleGroup;\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /** Unique ID for the underlying `button` element. */\n    get buttonId() { return `${this.id}-button`; }\n    /** The appearance style of the button. */\n    get appearance() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n    }\n    set appearance(value) {\n        this._appearance = value;\n    }\n    /** Whether the button is checked. */\n    get checked() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n    }\n    set checked(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Whether the button is disabled. */\n    get disabled() {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    ngOnInit() {\n        const group = this.buttonToggleGroup;\n        this._isSingleSelector = group && !group.multiple;\n        this.id = this.id || `mat-button-toggle-${uniqueIdCounter++}`;\n        if (this._isSingleSelector) {\n            this.name = group.name;\n        }\n        if (group) {\n            if (group._isPrechecked(this)) {\n                this.checked = true;\n            }\n            else if (group._isSelected(this) !== this._checked) {\n                // As as side effect of the circular dependency between the toggle group and the button,\n                // we may end up in a state where the button is supposed to be checked on init, but it\n                // isn't, because the checked value was assigned too early. This can happen when Ivy\n                // assigns the static input value before the `ngOnInit` has run.\n                group._syncButtonToggle(this, this._checked);\n            }\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._elementRef, true);\n    }\n    ngOnDestroy() {\n        const group = this.buttonToggleGroup;\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group._isSelected(this)) {\n            group._syncButtonToggle(this, false, false, true);\n        }\n    }\n    /** Focuses the button. */\n    focus(options) {\n        this._buttonElement.nativeElement.focus(options);\n    }\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    _onButtonClick() {\n        const newChecked = this._isSingleSelector ? true : !this._checked;\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup._onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new MatButtonToggleChange(this, this.value));\n    }\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatButtonToggle.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-button-toggle',\n                template: \"<button #button class=\\\"mat-button-toggle-button mat-focus-indicator\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"name || null\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <span class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </span>\\n</button>\\n\\n<span class=\\\"mat-button-toggle-focus-overlay\\\"></span>\\n<span class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</span>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matButtonToggle',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disableRipple'],\n                host: {\n                    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n                    '[class.mat-button-toggle-checked]': 'checked',\n                    '[class.mat-button-toggle-disabled]': 'disabled',\n                    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n                    'class': 'mat-button-toggle',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[attr.id]': 'id',\n                    '[attr.name]': 'null',\n                    '(focus)': 'focus()',\n                    'role': 'presentation',\n                },\n                styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"]\n            },] }\n];\nMatButtonToggle.ctorParameters = () => [\n    { type: MatButtonToggleGroup, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_GROUP,] }] },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggle.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    _buttonElement: [{ type: ViewChild, args: ['button',] }],\n    id: [{ type: Input }],\n    name: [{ type: Input }],\n    value: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    appearance: [{ type: Input }],\n    checked: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatButtonToggleModule {\n}\nMatButtonToggleModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatCommonModule, MatRippleModule],\n                exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n                declarations: [MatButtonToggleGroup, MatButtonToggle],\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggle, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}