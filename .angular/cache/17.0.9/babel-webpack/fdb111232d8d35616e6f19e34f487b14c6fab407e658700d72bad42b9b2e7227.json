{"ast":null,"code":"/**\r\n * Defines Pictorial Stacked Series.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { PyramidSeries, PyramidSeriesDataItem } from \"./PyramidSeries\";\nimport { Sprite } from \"../../core/Sprite\";\nimport { registry } from \"../../core/Registry\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport { percent } from \"../../core/utils/Percent\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n//@todo: sequenced?\n/**\r\n * Defines a [[DataItem]] for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar PictorialStackedSeriesDataItem = /** @class */function (_super) {\n  __extends(PictorialStackedSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function PictorialStackedSeriesDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"PictorialStackedSeriesDataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  return PictorialStackedSeriesDataItem;\n}(PyramidSeriesDataItem);\nexport { PictorialStackedSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines [[Series]] for a PictorialStacked series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPictorialStackedSeriesEvents} for a list of available Events\r\n * @see {@link IPictorialStackedSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\nvar PictorialStackedSeries = /** @class */function (_super) {\n  __extends(PictorialStackedSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n  function PictorialStackedSeries() {\n    var _this = _super.call(this) || this;\n    _this.className = \"PictorialStackedSeries\";\n    _this.topWidth = percent(100);\n    _this.bottomWidth = percent(100);\n    _this.valueIs = \"height\";\n    _this.applyTheme();\n    _this.startLocation = 0;\n    _this.endLocation = 1;\n    _this.align = \"center\";\n    _this.valign = \"middle\";\n    _this._maskSprite = _this.slicesContainer.createChild(Sprite);\n    _this._maskSprite.visible = false;\n    _this._maskSprite.zIndex = 100;\n    _this._maskSprite.shouldClone = false;\n    return _this;\n  }\n  /**\r\n   * Sizes the mask to fit the series.\r\n   *\r\n   * @ignore\r\n   */\n  PictorialStackedSeries.prototype.validateDataElements = function () {\n    var maxWidth = this.slicesContainer.maxWidth;\n    var maxHeight = this.slicesContainer.maxHeight;\n    var maskSprite = this._maskSprite;\n    //maskSprite.validatePosition(); // for some reason size of the maskSprite is 0x0 after we removed validatePosition in afterdraw\n    var pictureWidth = maskSprite.measuredWidth / maskSprite.scale;\n    var pictureHeight = maskSprite.measuredHeight / maskSprite.scale;\n    var scale = $math.min(maxHeight / pictureHeight, maxWidth / pictureWidth);\n    if (scale == Infinity) {\n      scale = 1; // can't return here, won't draw legend properly\n    }\n\n    scale = $math.max(0.001, scale);\n    var startLocation = this.startLocation;\n    var endLocation = this.endLocation;\n    var newWidth = $math.min(maxWidth, pictureWidth * scale);\n    var newHeight = $math.min(maxHeight, pictureHeight * scale);\n    maskSprite.scale = scale;\n    if (this.orientation == \"vertical\") {\n      this.topWidth = newWidth + 4;\n      this.bottomWidth = newWidth + 4;\n      this.pyramidHeight = newHeight * (endLocation - startLocation);\n      maskSprite.x = maxWidth / 2;\n      maskSprite.y = newHeight / 2;\n    } else {\n      this.topWidth = newHeight + 4;\n      this.bottomWidth = newHeight + 4;\n      this.pyramidHeight = newWidth * (endLocation - startLocation);\n      maskSprite.valign = \"middle\";\n      maskSprite.x = newWidth / 2;\n      maskSprite.y = maxHeight / 2;\n    }\n    maskSprite.verticalCenter = \"middle\";\n    maskSprite.horizontalCenter = \"middle\";\n    _super.prototype.validateDataElements.call(this);\n    var y;\n    var x;\n    if (this.orientation == \"vertical\") {\n      if (this.valign == \"bottom\") {\n        y = maxHeight - newHeight;\n      }\n      if (this.valign == \"middle\") {\n        y = (maxHeight - newHeight) / 2;\n      }\n      if (this.valign == \"top\") {\n        y = 0;\n      }\n      if (this.align == \"left\") {\n        x = -(maxWidth - newWidth) / 2;\n      }\n      if (this.align == \"center\") {\n        x = 0;\n      }\n      if (this.align == \"right\") {\n        x = (maxWidth - newWidth) / 2;\n      }\n      this.slices.template.dy = startLocation * newHeight;\n      if (this.alignLabels) {\n        this.slicesContainer.dx = x;\n      }\n    } else {\n      if (this.valign == \"bottom\") {\n        y = (maxHeight - newHeight) / 2;\n      }\n      if (this.valign == \"middle\") {\n        y = 0;\n      }\n      if (this.valign == \"top\") {\n        y = -(maxHeight - newHeight) / 2;\n      }\n      if (this.align == \"left\") {\n        x = 0;\n      }\n      if (this.align == \"center\") {\n        x = (maxWidth - newWidth) / 2;\n      }\n      if (this.align == \"right\") {\n        x = maxWidth - newWidth;\n      }\n      this.slices.template.dx = startLocation * newWidth;\n      if (this.alignLabels) {\n        this.slicesContainer.dy = y;\n      }\n    }\n    this.slicesContainer.x = x;\n    this.labelsContainer.x = x;\n    this.ticksContainer.x = x;\n    this.slicesContainer.y = y;\n    this.labelsContainer.y = y;\n    this.ticksContainer.y = y;\n    if (newWidth > 0 && newHeight > 0) {\n      this.slicesContainer.mask = maskSprite;\n    }\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n  PictorialStackedSeries.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Pyramid Series\");\n    }\n  };\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n  PictorialStackedSeries.prototype.createDataItem = function () {\n    return new PictorialStackedSeriesDataItem();\n  };\n  Object.defineProperty(PictorialStackedSeries.prototype, \"maskSprite\", {\n    /**\r\n     * A [[Sprite]] element that is used as a series mask.\r\n     *\r\n     * If set, this element's shape will be used to apply shape to the whole\r\n     * stacked pictorial series.\r\n     *\r\n     * You can use this element's `path` property to set an SVG path for the\r\n     * shape:\r\n     *\r\n     * ```TypeScript\r\n     * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n     * // ...\r\n     * series.maskSprite.path = iconPath;\r\n     * ```\r\n     * ```JavaScript\r\n     * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n     * // ...\r\n     * series.maskSprite.path = iconPath;\r\n     * ```\r\n     * ```JSON\r\n     * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n     * // ...\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     \"type\": \"PictorialStackedSeries\",\r\n     *     // ...\r\n     *     \"maskSprite\": {\r\n     *       \"path\": iconPath\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * @return Mask sprite\r\n     */\n    get: function () {\n      return this._maskSprite;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Inits FunnelSlice.\r\n   *\r\n   * @param slice to init\r\n   */\n  PictorialStackedSeries.prototype.initSlice = function (slice) {\n    _super.prototype.initSlice.call(this, slice);\n    var hs = slice.states.getKey(\"hover\");\n    if (hs) {\n      hs.properties.expandDistance = 0;\n    }\n  };\n  Object.defineProperty(PictorialStackedSeries.prototype, \"startLocation\", {\n    /**\r\n     * @return  Start location\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startLocation\");\n    },\n    /**\r\n     * Relative location to start series from.\r\n     *\r\n     * Range of values: 0 to 1.\r\n     *\r\n     * This setting indicates where actual slices will start relatively to the\r\n     * whole height/width of the series.\r\n     *\r\n     * For example, if we want slices to start at 30% from the top/left of the\r\n     * series, we can set `startLocation = 0.3`.\r\n     *\r\n     * To fill shape outside of the location range, use background of the\r\n     * property `slicesContainer`.\r\n     *\r\n     * ```TypeScript\r\n     * series.startLocation = 0.2;\r\n     * series.endLocation = 0.8;\r\n     * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n     * ```\r\n     * ```JavaScript\r\n     * series.startLocation = 0.2;\r\n     * series.endLocation = 0.8;\r\n     * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     // ...\r\n     *     \"startLocation\": 0.2,\r\n     *     \"endLocation\": 0.8,\r\n     *     \"slicesContainer\": {\r\n     *       \"background\": {\r\n     *         \"fill\": \"#eee\"\r\n     *       }\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * @default 0\r\n     * @since 4.1.13\r\n     * @param  value  Start location\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"startLocation\", value)) {\n        this.invalidateDataItems();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PictorialStackedSeries.prototype, \"endLocation\", {\n    /**\r\n     * @return End location\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endLocation\");\n    },\n    /**\r\n     * Relative location to end series at.\r\n     *\r\n     * Range of values: 0 to 1.\r\n     *\r\n     * This setting indicates where actual slices will end relatively to the\r\n     * whole height/width of the series.\r\n     *\r\n     * For example, if we want slices to end at 70% from the top/left of the\r\n     * series, we can set `endLocation = 0.7`.\r\n     *\r\n     * To fill shape outside of the location range, use background of the\r\n     * property `slicesContainer`.\r\n     *\r\n     * ```TypeScript\r\n     * series.startLocation = 0.2;\r\n     * series.endLocation = 0.8;\r\n     * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n     * ```\r\n     * ```JavaScript\r\n     * series.startLocation = 0.2;\r\n     * series.endLocation = 0.8;\r\n     * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     // ...\r\n     *     \"startLocation\": 0.2,\r\n     *     \"endLocation\": 0.8,\r\n     *     \"slicesContainer\": {\r\n     *       \"background\": {\r\n     *         \"fill\": \"#eee\"\r\n     *       }\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * @default 1\r\n     * @since 4.1.13\r\n     * @param  value  End location\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"endLocation\", value)) {\n        this.invalidateDataItems();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PictorialStackedSeries;\n}(PyramidSeries);\nexport { PictorialStackedSeries };\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"PictorialStackedSeries\"] = PictorialStackedSeries;\nregistry.registeredClasses[\"PictorialStackedSeriesDataItem\"] = PictorialStackedSeriesDataItem;","map":{"version":3,"names":["__extends","PyramidSeries","PyramidSeriesDataItem","Sprite","registry","$math","$type","percent","PictorialStackedSeriesDataItem","_super","_this","call","className","applyTheme","PictorialStackedSeries","topWidth","bottomWidth","valueIs","startLocation","endLocation","align","valign","_maskSprite","slicesContainer","createChild","visible","zIndex","shouldClone","prototype","validateDataElements","maxWidth","maxHeight","maskSprite","pictureWidth","measuredWidth","scale","pictureHeight","measuredHeight","min","Infinity","max","newWidth","newHeight","orientation","pyramidHeight","x","y","verticalCenter","horizontalCenter","slices","template","dy","alignLabels","dx","labelsContainer","ticksContainer","mask","applyInternalDefaults","hasValue","readerTitle","language","translate","createDataItem","Object","defineProperty","get","enumerable","configurable","initSlice","slice","hs","states","getKey","properties","expandDistance","getPropertyValue","set","value","setPropertyValue","invalidateDataItems","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/charts/series/PictorialStackedSeries.js"],"sourcesContent":["/**\r\n * Defines Pictorial Stacked Series.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PyramidSeries, PyramidSeriesDataItem } from \"./PyramidSeries\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n//@todo: sequenced?\r\n/**\r\n * Defines a [[DataItem]] for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar PictorialStackedSeriesDataItem = /** @class */ (function (_super) {\r\n    __extends(PictorialStackedSeriesDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PictorialStackedSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PictorialStackedSeriesDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return PictorialStackedSeriesDataItem;\r\n}(PyramidSeriesDataItem));\r\nexport { PictorialStackedSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines [[Series]] for a PictorialStacked series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPictorialStackedSeriesEvents} for a list of available Events\r\n * @see {@link IPictorialStackedSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nvar PictorialStackedSeries = /** @class */ (function (_super) {\r\n    __extends(PictorialStackedSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PictorialStackedSeries() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PictorialStackedSeries\";\r\n        _this.topWidth = percent(100);\r\n        _this.bottomWidth = percent(100);\r\n        _this.valueIs = \"height\";\r\n        _this.applyTheme();\r\n        _this.startLocation = 0;\r\n        _this.endLocation = 1;\r\n        _this.align = \"center\";\r\n        _this.valign = \"middle\";\r\n        _this._maskSprite = _this.slicesContainer.createChild(Sprite);\r\n        _this._maskSprite.visible = false;\r\n        _this._maskSprite.zIndex = 100;\r\n        _this._maskSprite.shouldClone = false;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sizes the mask to fit the series.\r\n     *\r\n     * @ignore\r\n     */\r\n    PictorialStackedSeries.prototype.validateDataElements = function () {\r\n        var maxWidth = this.slicesContainer.maxWidth;\r\n        var maxHeight = this.slicesContainer.maxHeight;\r\n        var maskSprite = this._maskSprite;\r\n        //maskSprite.validatePosition(); // for some reason size of the maskSprite is 0x0 after we removed validatePosition in afterdraw\r\n        var pictureWidth = maskSprite.measuredWidth / maskSprite.scale;\r\n        var pictureHeight = maskSprite.measuredHeight / maskSprite.scale;\r\n        var scale = $math.min(maxHeight / pictureHeight, maxWidth / pictureWidth);\r\n        if (scale == Infinity) {\r\n            scale = 1; // can't return here, won't draw legend properly\r\n        }\r\n        scale = $math.max(0.001, scale);\r\n        var startLocation = this.startLocation;\r\n        var endLocation = this.endLocation;\r\n        var newWidth = $math.min(maxWidth, pictureWidth * scale);\r\n        var newHeight = $math.min(maxHeight, pictureHeight * scale);\r\n        maskSprite.scale = scale;\r\n        if (this.orientation == \"vertical\") {\r\n            this.topWidth = newWidth + 4;\r\n            this.bottomWidth = newWidth + 4;\r\n            this.pyramidHeight = newHeight * (endLocation - startLocation);\r\n            maskSprite.x = maxWidth / 2;\r\n            maskSprite.y = newHeight / 2;\r\n        }\r\n        else {\r\n            this.topWidth = newHeight + 4;\r\n            this.bottomWidth = newHeight + 4;\r\n            this.pyramidHeight = newWidth * (endLocation - startLocation);\r\n            maskSprite.valign = \"middle\";\r\n            maskSprite.x = newWidth / 2;\r\n            maskSprite.y = maxHeight / 2;\r\n        }\r\n        maskSprite.verticalCenter = \"middle\";\r\n        maskSprite.horizontalCenter = \"middle\";\r\n        _super.prototype.validateDataElements.call(this);\r\n        var y;\r\n        var x;\r\n        if (this.orientation == \"vertical\") {\r\n            if (this.valign == \"bottom\") {\r\n                y = (maxHeight - newHeight);\r\n            }\r\n            if (this.valign == \"middle\") {\r\n                y = (maxHeight - newHeight) / 2;\r\n            }\r\n            if (this.valign == \"top\") {\r\n                y = 0;\r\n            }\r\n            if (this.align == \"left\") {\r\n                x = -(maxWidth - newWidth) / 2;\r\n            }\r\n            if (this.align == \"center\") {\r\n                x = 0;\r\n            }\r\n            if (this.align == \"right\") {\r\n                x = (maxWidth - newWidth) / 2;\r\n            }\r\n            this.slices.template.dy = startLocation * newHeight;\r\n            if (this.alignLabels) {\r\n                this.slicesContainer.dx = x;\r\n            }\r\n        }\r\n        else {\r\n            if (this.valign == \"bottom\") {\r\n                y = (maxHeight - newHeight) / 2;\r\n            }\r\n            if (this.valign == \"middle\") {\r\n                y = 0;\r\n            }\r\n            if (this.valign == \"top\") {\r\n                y = -(maxHeight - newHeight) / 2;\r\n            }\r\n            if (this.align == \"left\") {\r\n                x = 0;\r\n            }\r\n            if (this.align == \"center\") {\r\n                x = (maxWidth - newWidth) / 2;\r\n            }\r\n            if (this.align == \"right\") {\r\n                x = (maxWidth - newWidth);\r\n            }\r\n            this.slices.template.dx = startLocation * newWidth;\r\n            if (this.alignLabels) {\r\n                this.slicesContainer.dy = y;\r\n            }\r\n        }\r\n        this.slicesContainer.x = x;\r\n        this.labelsContainer.x = x;\r\n        this.ticksContainer.x = x;\r\n        this.slicesContainer.y = y;\r\n        this.labelsContainer.y = y;\r\n        this.ticksContainer.y = y;\r\n        if (newWidth > 0 && newHeight > 0) {\r\n            this.slicesContainer.mask = maskSprite;\r\n        }\r\n    };\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    PictorialStackedSeries.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Pyramid Series\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return Data Item\r\n     */\r\n    PictorialStackedSeries.prototype.createDataItem = function () {\r\n        return new PictorialStackedSeriesDataItem();\r\n    };\r\n    Object.defineProperty(PictorialStackedSeries.prototype, \"maskSprite\", {\r\n        /**\r\n         * A [[Sprite]] element that is used as a series mask.\r\n         *\r\n         * If set, this element's shape will be used to apply shape to the whole\r\n         * stacked pictorial series.\r\n         *\r\n         * You can use this element's `path` property to set an SVG path for the\r\n         * shape:\r\n         *\r\n         * ```TypeScript\r\n         * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n         * // ...\r\n         * series.maskSprite.path = iconPath;\r\n         * ```\r\n         * ```JavaScript\r\n         * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n         * // ...\r\n         * series.maskSprite.path = iconPath;\r\n         * ```\r\n         * ```JSON\r\n         * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n         * // ...\r\n         * {\r\n         *   // ...\r\n         *   \"series\": [{\r\n         *     \"type\": \"PictorialStackedSeries\",\r\n         *     // ...\r\n         *     \"maskSprite\": {\r\n         *       \"path\": iconPath\r\n         *     }\r\n         *   }]\r\n         * }\r\n         * ```\r\n         *\r\n         * @return Mask sprite\r\n         */\r\n        get: function () {\r\n            return this._maskSprite;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Inits FunnelSlice.\r\n     *\r\n     * @param slice to init\r\n     */\r\n    PictorialStackedSeries.prototype.initSlice = function (slice) {\r\n        _super.prototype.initSlice.call(this, slice);\r\n        var hs = slice.states.getKey(\"hover\");\r\n        if (hs) {\r\n            hs.properties.expandDistance = 0;\r\n        }\r\n    };\r\n    Object.defineProperty(PictorialStackedSeries.prototype, \"startLocation\", {\r\n        /**\r\n         * @return  Start location\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startLocation\");\r\n        },\r\n        /**\r\n         * Relative location to start series from.\r\n         *\r\n         * Range of values: 0 to 1.\r\n         *\r\n         * This setting indicates where actual slices will start relatively to the\r\n         * whole height/width of the series.\r\n         *\r\n         * For example, if we want slices to start at 30% from the top/left of the\r\n         * series, we can set `startLocation = 0.3`.\r\n         *\r\n         * To fill shape outside of the location range, use background of the\r\n         * property `slicesContainer`.\r\n         *\r\n         * ```TypeScript\r\n         * series.startLocation = 0.2;\r\n         * series.endLocation = 0.8;\r\n         * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n         * ```\r\n         * ```JavaScript\r\n         * series.startLocation = 0.2;\r\n         * series.endLocation = 0.8;\r\n         * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"series\": [{\r\n         *     // ...\r\n         *     \"startLocation\": 0.2,\r\n         *     \"endLocation\": 0.8,\r\n         *     \"slicesContainer\": {\r\n         *       \"background\": {\r\n         *         \"fill\": \"#eee\"\r\n         *       }\r\n         *     }\r\n         *   }]\r\n         * }\r\n         * ```\r\n         *\r\n         * @default 0\r\n         * @since 4.1.13\r\n         * @param  value  Start location\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"startLocation\", value)) {\r\n                this.invalidateDataItems();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PictorialStackedSeries.prototype, \"endLocation\", {\r\n        /**\r\n         * @return End location\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endLocation\");\r\n        },\r\n        /**\r\n         * Relative location to end series at.\r\n         *\r\n         * Range of values: 0 to 1.\r\n         *\r\n         * This setting indicates where actual slices will end relatively to the\r\n         * whole height/width of the series.\r\n         *\r\n         * For example, if we want slices to end at 70% from the top/left of the\r\n         * series, we can set `endLocation = 0.7`.\r\n         *\r\n         * To fill shape outside of the location range, use background of the\r\n         * property `slicesContainer`.\r\n         *\r\n         * ```TypeScript\r\n         * series.startLocation = 0.2;\r\n         * series.endLocation = 0.8;\r\n         * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n         * ```\r\n         * ```JavaScript\r\n         * series.startLocation = 0.2;\r\n         * series.endLocation = 0.8;\r\n         * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"series\": [{\r\n         *     // ...\r\n         *     \"startLocation\": 0.2,\r\n         *     \"endLocation\": 0.8,\r\n         *     \"slicesContainer\": {\r\n         *       \"background\": {\r\n         *         \"fill\": \"#eee\"\r\n         *       }\r\n         *     }\r\n         *   }]\r\n         * }\r\n         * ```\r\n         *\r\n         * @default 1\r\n         * @since 4.1.13\r\n         * @param  value  End location\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"endLocation\", value)) {\r\n                this.invalidateDataItems();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return PictorialStackedSeries;\r\n}(PyramidSeries));\r\nexport { PictorialStackedSeries };\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PictorialStackedSeries\"] = PictorialStackedSeries;\r\nregistry.registeredClasses[\"PictorialStackedSeriesDataItem\"] = PictorialStackedSeriesDataItem;\r\n"],"mappings":"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E,eAAe,EAAE;IACrE;AACR;AACA;IACQqC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACU,gBAAgB,CAAC,eAAe,CAAC;IACjD,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,IAAI,CAACC,gBAAgB,CAAC,eAAe,EAAED,KAAK,CAAC,EAAE;QAC/C,IAAI,CAACE,mBAAmB,CAAC,CAAC;MAC9B;IACJ,CAAC;IACDb,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFJ,MAAM,CAACC,cAAc,CAAClD,sBAAsB,CAACc,SAAS,EAAE,aAAa,EAAE;IACnE;AACR;AACA;IACQqC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACU,gBAAgB,CAAC,aAAa,CAAC;IAC/C,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,IAAI,CAACC,gBAAgB,CAAC,aAAa,EAAED,KAAK,CAAC,EAAE;QAC7C,IAAI,CAACE,mBAAmB,CAAC,CAAC;MAC9B;IACJ,CAAC;IACDb,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF,OAAOrD,sBAAsB;AACjC,CAAC,CAACb,aAAa,CAAE;AACjB,SAASa,sBAAsB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACAV,QAAQ,CAAC4E,iBAAiB,CAAC,wBAAwB,CAAC,GAAGlE,sBAAsB;AAC7EV,QAAQ,CAAC4E,iBAAiB,CAAC,gCAAgC,CAAC,GAAGxE,8BAA8B"},"metadata":{},"sourceType":"module","externalDependencies":[]}