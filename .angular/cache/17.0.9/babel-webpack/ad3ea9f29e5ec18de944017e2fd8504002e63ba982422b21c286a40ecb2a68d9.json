{"ast":null,"code":"/**\r\n * HeatLegend module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Container } from \"../../core/Container\";\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\nimport { registry } from \"../../core/Registry\";\nimport { toColor, Color } from \"../../core/utils/Color\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { ValueAxis } from \"../../charts/axes/ValueAxis\";\nimport { AxisRendererX } from \"../../charts/axes/AxisRendererX\";\nimport { AxisRendererY } from \"../../charts/axes/AxisRendererY\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $colors from \"../../core/utils/Colors\";\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Sankey Diagram.\r\n *\r\n * @see {@link IHeatLegendEvents} for a list of available events\r\n * @see {@link IHeatLegendAdapters} for a list of available Adapters\r\n * @important\r\n */\nvar HeatLegend = /** @class */function (_super) {\n  __extends(HeatLegend, _super);\n  /**\r\n   * Constructor\r\n   */\n  function HeatLegend() {\n    var _this = _super.call(this) || this;\n    _this.className = \"HeatLegend\";\n    _this.markerContainer = _this.createChild(Container);\n    _this.markerContainer.shouldClone = false;\n    _this.markerCount = 1;\n    // Create a template container and list for the a marker\n    var marker = new RoundedRectangle();\n    marker.minHeight = 20;\n    marker.minWidth = 20;\n    marker.interactionsEnabled = false;\n    marker.fillOpacity = 1;\n    marker.cornerRadius(0, 0, 0, 0);\n    _this.markerContainer.minHeight = 20;\n    _this.markerContainer.minWidth = 20;\n    _this.orientation = \"horizontal\";\n    _this.markers = new ListTemplate(marker);\n    _this._disposers.push(new ListDisposer(_this.markers));\n    _this._disposers.push(_this.markers.template);\n    _this.applyTheme();\n    return _this;\n  }\n  HeatLegend.prototype.getMinFromRules = function (property) {\n    var series = this.series;\n    if (series) {\n      var minValue_1;\n      $iter.eachContinue(series.heatRules.iterator(), function (heatRule) {\n        if (heatRule.property == property) {\n          minValue_1 = heatRule.min;\n          return false;\n        }\n        return true;\n      });\n      return minValue_1;\n    }\n  };\n  HeatLegend.prototype.getMaxFromRules = function (property) {\n    var series = this.series;\n    if (series) {\n      var maxValue_1;\n      $iter.each(series.heatRules.iterator(), function (heatRule) {\n        if (heatRule.property == property) {\n          maxValue_1 = heatRule.max;\n          return false;\n        }\n        return true;\n      });\n      return maxValue_1;\n    }\n  };\n  /**\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  HeatLegend.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n    this.valueAxis.renderer.inversed = this.reverseOrder;\n    var series = this.series;\n    var minColor = this.minColor;\n    var maxColor = this.maxColor;\n    if (!$type.hasValue(minColor)) {\n      minColor = toColor(this.getMinFromRules(\"fill\"));\n    }\n    if (!$type.hasValue(maxColor)) {\n      maxColor = toColor(this.getMaxFromRules(\"fill\"));\n    }\n    if (series) {\n      var seriesFill = series.fill;\n      if (!$type.hasValue(minColor) && seriesFill instanceof Color) {\n        minColor = seriesFill;\n      }\n      if (!$type.hasValue(maxColor) && seriesFill instanceof Color) {\n        maxColor = seriesFill;\n      }\n    }\n    if (!$type.hasValue(maxColor)) {\n      maxColor = toColor(this.getMaxFromRules(\"fill\"));\n    }\n    var minOpacity = $type.toNumber(this.getMinFromRules(\"fillOpacity\"));\n    if (!$type.isNumber(minOpacity)) {\n      minOpacity = 1;\n    }\n    var maxOpacity = $type.toNumber(this.getMaxFromRules(\"fillOpacity\"));\n    if (!$type.isNumber(maxOpacity)) {\n      maxOpacity = 1;\n    }\n    var minStrokeOpacity = $type.toNumber(this.getMinFromRules(\"strokeOpacity\"));\n    if (!$type.isNumber(minStrokeOpacity)) {\n      minStrokeOpacity = 1;\n    }\n    var maxStrokeOpacity = $type.toNumber(this.getMaxFromRules(\"strokeOpacity\"));\n    if (!$type.isNumber(maxStrokeOpacity)) {\n      maxStrokeOpacity = 1;\n    }\n    var minStroke = toColor(this.getMinFromRules(\"stroke\"));\n    var maxStroke = toColor(this.getMaxFromRules(\"stroke\"));\n    //if (series) {\n    for (var i = 0; i < this.markerCount; i++) {\n      var marker = this.markers.getIndex(i);\n      if (!marker) {\n        marker = this.markers.create();\n        marker.parent = this.markerContainer;\n        marker.height = percent(100);\n        marker.width = percent(100);\n      }\n      if (this.markerCount == 1) {\n        var gradient = new LinearGradient();\n        if (this.reverseOrder) {\n          gradient.addColor(maxColor, maxOpacity);\n          gradient.addColor(minColor, minOpacity);\n        } else {\n          gradient.addColor(minColor, minOpacity);\n          gradient.addColor(maxColor, maxOpacity);\n        }\n        if (this.orientation == \"vertical\") {\n          gradient.rotation = -90;\n        }\n        marker.fill = gradient;\n        if ($type.hasValue(minStroke) && $type.hasValue(maxStroke)) {\n          var strokeGradient = new LinearGradient();\n          if (this.reverseOrder) {\n            strokeGradient.addColor(maxStroke, maxStrokeOpacity);\n            strokeGradient.addColor(minStroke, minStrokeOpacity);\n          } else {\n            strokeGradient.addColor(minStroke, minStrokeOpacity);\n            strokeGradient.addColor(maxStroke, maxStrokeOpacity);\n          }\n          if (this.orientation == \"vertical\") {\n            strokeGradient.rotation = -90;\n          }\n          marker.stroke = strokeGradient;\n        }\n      } else {\n        var c = i;\n        if (this.reverseOrder) {\n          c = this.markerCount - i - 1;\n        }\n        var color = new Color($colors.interpolate(minColor.rgb, maxColor.rgb, c / this.markerCount));\n        marker.fill = color;\n        var opacity = minOpacity + (maxOpacity - minOpacity) * c / this.markerCount;\n        marker.fillOpacity = opacity;\n        if ($type.hasValue(minStroke) && $type.hasValue(maxStroke)) {\n          var color_1 = new Color($colors.interpolate(minStroke.rgb, maxStroke.rgb, c / this.markerCount));\n          marker.stroke = color_1;\n          var opacity_1 = minStrokeOpacity + (maxStrokeOpacity - minStrokeOpacity) * c / this.markerCount;\n          marker.strokeOpacity = opacity_1;\n        }\n      }\n    }\n    var renderer = this.valueAxis.renderer;\n    if (this.markerCount > 1) {\n      if (this.orientation == \"horizontal\") {\n        renderer.minGridDistance = this.measuredWidth / this.markerCount;\n      } else {\n        renderer.minGridDistance = this.measuredHeight / this.markerCount;\n      }\n    }\n    this.valueAxis.invalidate();\n    for (var i = this.markerCount, len = this.markers.length; i < len; i++) {\n      this.markers.getIndex(i).parent = undefined;\n    }\n  };\n  Object.defineProperty(HeatLegend.prototype, \"minColor\", {\n    /**\r\n     * Returns minColor value\r\n     * @return {Color}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minColor\");\n    },\n    /**\r\n     * Min color of a heat legend. If a series is set for the legend, minColor is taken from series.\r\n     *\r\n     * @param {Color}\r\n     */\n    set: function (value) {\n      if (!(value instanceof Color)) {\n        value = toColor(value);\n      }\n      this.setColorProperty(\"minColor\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HeatLegend.prototype, \"maxColor\", {\n    /**\r\n     * Returns maxColor value\r\n     * @return {Color}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxColor\");\n    },\n    /**\r\n     * Max color of a heat legend. If a series is set for the legend, maxColor is taken from series.\r\n     *\r\n     * @param {Color}\r\n     */\n    set: function (value) {\n      if (!(value instanceof Color)) {\n        value = toColor(value);\n      }\n      this.setColorProperty(\"maxColor\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HeatLegend.prototype, \"markerCount\", {\n    /**\r\n     * Returns number of color squares (markers).\r\n     * @return {number}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"markerCount\");\n    },\n    /**\r\n     * Number of color squares (markers) in the heat legend. If only 1 marker is used, it will be filled with gradient.\r\n     *\r\n     * @param {number}\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"markerCount\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HeatLegend.prototype, \"minValue\", {\n    /**\r\n     * Returns minimum value of heat legend.\r\n     * @return {number}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minValue\");\n    },\n    /**\r\n     * Minimum value of heat legend's value axis. If a series is set for the legend, min is taken from series.\r\n     *\r\n     * @param {number}\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"minValue\", value);\n      this.valueAxis.min = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HeatLegend.prototype, \"maxValue\", {\n    /**\r\n     * Returns maximum value of heat legend.\r\n     * @return {number}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxValue\");\n    },\n    /**\r\n     * Maximum value of heat legend's value axis. If a series is set for the legend, max is taken from series.\r\n     *\r\n     * @param {number}\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"maxValue\", value);\n      this.valueAxis.max = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HeatLegend.prototype, \"orientation\", {\n    /**\r\n     * Returns orientation value.\r\n     *\r\n     * @return {\"horizontal\" | \"vertical\"}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"orientation\");\n    },\n    /**\r\n    * Heat legend orientation. Note, if you change orientation of a heat legend, you must set value axis renderer properties after that, as with orientation renderer changes.\r\n    *\r\n    * @param {\"horizontal\" | \"vertical\"}\r\n    */\n    set: function (value) {\n      this.setPropertyValue(\"orientation\", value, true);\n      var markerContainer = this.markerContainer;\n      var valueAxis = this.valueAxis;\n      // HORIZONTAL\n      if (value == \"horizontal\") {\n        if (!$type.hasValue(this.width)) {\n          this.width = 200;\n        }\n        this.height = undefined;\n        valueAxis.width = percent(100);\n        valueAxis.height = undefined;\n        valueAxis.tooltip.pointerOrientation = \"vertical\";\n        this.layout = \"vertical\";\n        markerContainer.width = percent(100);\n        markerContainer.height = undefined;\n        if (!(valueAxis.renderer instanceof AxisRendererX)) {\n          valueAxis.renderer = new AxisRendererX();\n        }\n      }\n      // VERTICAL\n      else {\n        if (!$type.hasValue(this.height)) {\n          this.height = 200;\n        }\n        this.width = undefined;\n        this.layout = \"horizontal\";\n        markerContainer.width = undefined;\n        markerContainer.height = percent(100);\n        valueAxis.height = percent(100);\n        valueAxis.width = undefined;\n        valueAxis.tooltip.pointerOrientation = \"horizontal\";\n        if (!(valueAxis.renderer instanceof AxisRendererY)) {\n          valueAxis.renderer = new AxisRendererY();\n        }\n        valueAxis.renderer.inside = true;\n        valueAxis.renderer.labels.template.inside = true;\n        this.markerContainer.reverseOrder = true;\n      }\n      var renderer = valueAxis.renderer;\n      renderer.grid.template.disabled = true;\n      renderer.axisFills.template.disabled = true;\n      renderer.baseGrid.disabled = true;\n      renderer.labels.template.padding(2, 3, 2, 3);\n      renderer.minHeight = undefined;\n      renderer.minWidth = undefined;\n      this.markerContainer.layout = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HeatLegend.prototype, \"valueAxis\", {\n    /**\r\n     * Returns valueAxis value.\r\n     * @return {ValueAxis}\r\n     */\n    get: function () {\n      if (!this._valueAxis) {\n        this.valueAxis = this.createChild(ValueAxis);\n        this.valueAxis.shouldClone = false;\n      }\n      return this._valueAxis;\n    },\n    /**\r\n     * Sets a value axis of heat legend. Value axis for heat legend is created automatically.\r\n     * @param {ValueAxis}\r\n     */\n    set: function (valueAxis) {\n      this._valueAxis = valueAxis;\n      valueAxis.parent = this;\n      valueAxis.strictMinMax = true;\n      this.orientation = this.orientation;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(HeatLegend.prototype, \"series\", {\n    /**\r\n     * Returns series value.\r\n     * @return {Series}\r\n     */\n    get: function () {\n      return this._series;\n    },\n    /**\r\n     * You can set series for heat legend. It will take min, max, minColor and maxColor values from this series.\r\n     * @param series\r\n     */\n    set: function (series) {\n      var _this = this;\n      this._series = series;\n      var dataField = \"value\";\n      try {\n        var dataFieldDefined = series.heatRules.getIndex(0).dataField;\n        if (dataFieldDefined) {\n          dataField = dataFieldDefined;\n        }\n      } catch (err) {}\n      this.updateMinMax(series.dataItem.values[dataField].low, series.dataItem.values[dataField].high);\n      series.dataItem.events.on(\"calculatedvaluechanged\", function (event) {\n        _this.updateMinMax(series.dataItem.values[dataField].low, series.dataItem.values[dataField].high);\n      }, undefined, false);\n      series.heatRules.events.on(\"inserted\", this.invalidate, this, false);\n      series.heatRules.events.on(\"removed\", this.invalidate, this, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates min/max of value axis.\r\n   * @ignore\r\n   */\n  HeatLegend.prototype.updateMinMax = function (min, max) {\n    var valueAxis = this.valueAxis;\n    if (!$type.isNumber(this.minValue)) {\n      valueAxis.min = min;\n      valueAxis.invalidate();\n    }\n    if (!$type.isNumber(this.maxValue)) {\n      valueAxis.max = max;\n      valueAxis.invalidate();\n    }\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n  HeatLegend.prototype.processConfig = function (config) {\n    if (config) {\n      // Set up series\n      if ($type.hasValue(config.series) && $type.isString(config.series)) {\n        if ($type.isString(config.series)) {\n          if (this.map.hasKey(config.series)) {\n            config.series = this.map.getKey(config.series);\n          } else {\n            var seriesId_1 = config.series;\n            var disposer_1 = this.map.events.on(\"insertKey\", function (ev) {\n              if (ev.key == seriesId_1) {\n                this.series = ev.newValue;\n                disposer_1.dispose();\n              }\n            }, this);\n            this._disposers.push(disposer_1);\n            delete config.series;\n          }\n        }\n      }\n    }\n    _super.prototype.processConfig.call(this, config);\n  };\n  return HeatLegend;\n}(Container);\nexport { HeatLegend };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"HeatLegend\"] = HeatLegend;","map":{"version":3,"names":["__extends","Container","LinearGradient","registry","toColor","Color","ListTemplate","ListDisposer","percent","ValueAxis","AxisRendererX","AxisRendererY","$iter","$type","$colors","RoundedRectangle","HeatLegend","_super","_this","call","className","markerContainer","createChild","shouldClone","markerCount","marker","minHeight","minWidth","interactionsEnabled","fillOpacity","cornerRadius","orientation","markers","_disposers","push","template","applyTheme","prototype","getMinFromRules","property","series","minValue_1","eachContinue","heatRules","iterator","heatRule","min","getMaxFromRules","maxValue_1","each","max","validate","valueAxis","renderer","inversed","reverseOrder","minColor","maxColor","hasValue","seriesFill","fill","minOpacity","toNumber","isNumber","maxOpacity","minStrokeOpacity","maxStrokeOpacity","minStroke","maxStroke","i","getIndex","create","parent","height","width","gradient","addColor","rotation","strokeGradient","stroke","c","color","interpolate","rgb","opacity","color_1","opacity_1","strokeOpacity","minGridDistance","measuredWidth","measuredHeight","invalidate","len","length","undefined","Object","defineProperty","get","getPropertyValue","set","value","setColorProperty","enumerable","configurable","setPropertyValue","tooltip","pointerOrientation","layout","inside","labels","grid","disabled","axisFills","baseGrid","padding","_valueAxis","strictMinMax","_series","dataField","dataFieldDefined","err","updateMinMax","dataItem","values","low","high","events","on","event","minValue","maxValue","processConfig","config","isString","map","hasKey","getKey","seriesId_1","disposer_1","ev","key","newValue","dispose","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/charts/elements/HeatLegend.js"],"sourcesContent":["/**\r\n * HeatLegend module\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../../core/Container\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { toColor, Color } from \"../../core/utils/Color\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { ValueAxis } from \"../../charts/axes/ValueAxis\";\r\nimport { AxisRendererX } from \"../../charts/axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../../charts/axes/AxisRendererY\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $colors from \"../../core/utils/Colors\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Sankey Diagram.\r\n *\r\n * @see {@link IHeatLegendEvents} for a list of available events\r\n * @see {@link IHeatLegendAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar HeatLegend = /** @class */ (function (_super) {\r\n    __extends(HeatLegend, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function HeatLegend() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"HeatLegend\";\r\n        _this.markerContainer = _this.createChild(Container);\r\n        _this.markerContainer.shouldClone = false;\r\n        _this.markerCount = 1;\r\n        // Create a template container and list for the a marker\r\n        var marker = new RoundedRectangle();\r\n        marker.minHeight = 20;\r\n        marker.minWidth = 20;\r\n        marker.interactionsEnabled = false;\r\n        marker.fillOpacity = 1;\r\n        marker.cornerRadius(0, 0, 0, 0);\r\n        _this.markerContainer.minHeight = 20;\r\n        _this.markerContainer.minWidth = 20;\r\n        _this.orientation = \"horizontal\";\r\n        _this.markers = new ListTemplate(marker);\r\n        _this._disposers.push(new ListDisposer(_this.markers));\r\n        _this._disposers.push(_this.markers.template);\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    HeatLegend.prototype.getMinFromRules = function (property) {\r\n        var series = this.series;\r\n        if (series) {\r\n            var minValue_1;\r\n            $iter.eachContinue(series.heatRules.iterator(), function (heatRule) {\r\n                if (heatRule.property == property) {\r\n                    minValue_1 = heatRule.min;\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n            return minValue_1;\r\n        }\r\n    };\r\n    HeatLegend.prototype.getMaxFromRules = function (property) {\r\n        var series = this.series;\r\n        if (series) {\r\n            var maxValue_1;\r\n            $iter.each(series.heatRules.iterator(), function (heatRule) {\r\n                if (heatRule.property == property) {\r\n                    maxValue_1 = heatRule.max;\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n            return maxValue_1;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    HeatLegend.prototype.validate = function () {\r\n        _super.prototype.validate.call(this);\r\n        this.valueAxis.renderer.inversed = this.reverseOrder;\r\n        var series = this.series;\r\n        var minColor = this.minColor;\r\n        var maxColor = this.maxColor;\r\n        if (!$type.hasValue(minColor)) {\r\n            minColor = toColor(this.getMinFromRules(\"fill\"));\r\n        }\r\n        if (!$type.hasValue(maxColor)) {\r\n            maxColor = toColor(this.getMaxFromRules(\"fill\"));\r\n        }\r\n        if (series) {\r\n            var seriesFill = series.fill;\r\n            if (!$type.hasValue(minColor) && seriesFill instanceof Color) {\r\n                minColor = seriesFill;\r\n            }\r\n            if (!$type.hasValue(maxColor) && seriesFill instanceof Color) {\r\n                maxColor = seriesFill;\r\n            }\r\n        }\r\n        if (!$type.hasValue(maxColor)) {\r\n            maxColor = toColor(this.getMaxFromRules(\"fill\"));\r\n        }\r\n        var minOpacity = $type.toNumber(this.getMinFromRules(\"fillOpacity\"));\r\n        if (!$type.isNumber(minOpacity)) {\r\n            minOpacity = 1;\r\n        }\r\n        var maxOpacity = $type.toNumber(this.getMaxFromRules(\"fillOpacity\"));\r\n        if (!$type.isNumber(maxOpacity)) {\r\n            maxOpacity = 1;\r\n        }\r\n        var minStrokeOpacity = $type.toNumber(this.getMinFromRules(\"strokeOpacity\"));\r\n        if (!$type.isNumber(minStrokeOpacity)) {\r\n            minStrokeOpacity = 1;\r\n        }\r\n        var maxStrokeOpacity = $type.toNumber(this.getMaxFromRules(\"strokeOpacity\"));\r\n        if (!$type.isNumber(maxStrokeOpacity)) {\r\n            maxStrokeOpacity = 1;\r\n        }\r\n        var minStroke = toColor(this.getMinFromRules(\"stroke\"));\r\n        var maxStroke = toColor(this.getMaxFromRules(\"stroke\"));\r\n        //if (series) {\r\n        for (var i = 0; i < this.markerCount; i++) {\r\n            var marker = this.markers.getIndex(i);\r\n            if (!marker) {\r\n                marker = this.markers.create();\r\n                marker.parent = this.markerContainer;\r\n                marker.height = percent(100);\r\n                marker.width = percent(100);\r\n            }\r\n            if (this.markerCount == 1) {\r\n                var gradient = new LinearGradient();\r\n                if (this.reverseOrder) {\r\n                    gradient.addColor(maxColor, maxOpacity);\r\n                    gradient.addColor(minColor, minOpacity);\r\n                }\r\n                else {\r\n                    gradient.addColor(minColor, minOpacity);\r\n                    gradient.addColor(maxColor, maxOpacity);\r\n                }\r\n                if (this.orientation == \"vertical\") {\r\n                    gradient.rotation = -90;\r\n                }\r\n                marker.fill = gradient;\r\n                if ($type.hasValue(minStroke) && $type.hasValue(maxStroke)) {\r\n                    var strokeGradient = new LinearGradient();\r\n                    if (this.reverseOrder) {\r\n                        strokeGradient.addColor(maxStroke, maxStrokeOpacity);\r\n                        strokeGradient.addColor(minStroke, minStrokeOpacity);\r\n                    }\r\n                    else {\r\n                        strokeGradient.addColor(minStroke, minStrokeOpacity);\r\n                        strokeGradient.addColor(maxStroke, maxStrokeOpacity);\r\n                    }\r\n                    if (this.orientation == \"vertical\") {\r\n                        strokeGradient.rotation = -90;\r\n                    }\r\n                    marker.stroke = strokeGradient;\r\n                }\r\n            }\r\n            else {\r\n                var c = i;\r\n                if (this.reverseOrder) {\r\n                    c = this.markerCount - i - 1;\r\n                }\r\n                var color = new Color($colors.interpolate(minColor.rgb, maxColor.rgb, c / this.markerCount));\r\n                marker.fill = color;\r\n                var opacity = minOpacity + (maxOpacity - minOpacity) * c / this.markerCount;\r\n                marker.fillOpacity = opacity;\r\n                if ($type.hasValue(minStroke) && $type.hasValue(maxStroke)) {\r\n                    var color_1 = new Color($colors.interpolate(minStroke.rgb, maxStroke.rgb, c / this.markerCount));\r\n                    marker.stroke = color_1;\r\n                    var opacity_1 = minStrokeOpacity + (maxStrokeOpacity - minStrokeOpacity) * c / this.markerCount;\r\n                    marker.strokeOpacity = opacity_1;\r\n                }\r\n            }\r\n        }\r\n        var renderer = this.valueAxis.renderer;\r\n        if (this.markerCount > 1) {\r\n            if (this.orientation == \"horizontal\") {\r\n                renderer.minGridDistance = this.measuredWidth / this.markerCount;\r\n            }\r\n            else {\r\n                renderer.minGridDistance = this.measuredHeight / this.markerCount;\r\n            }\r\n        }\r\n        this.valueAxis.invalidate();\r\n        for (var i = this.markerCount, len = this.markers.length; i < len; i++) {\r\n            this.markers.getIndex(i).parent = undefined;\r\n        }\r\n    };\r\n    Object.defineProperty(HeatLegend.prototype, \"minColor\", {\r\n        /**\r\n         * Returns minColor value\r\n         * @return {Color}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"minColor\");\r\n        },\r\n        /**\r\n         * Min color of a heat legend. If a series is set for the legend, minColor is taken from series.\r\n         *\r\n         * @param {Color}\r\n         */\r\n        set: function (value) {\r\n            if (!(value instanceof Color)) {\r\n                value = toColor(value);\r\n            }\r\n            this.setColorProperty(\"minColor\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(HeatLegend.prototype, \"maxColor\", {\r\n        /**\r\n         * Returns maxColor value\r\n         * @return {Color}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maxColor\");\r\n        },\r\n        /**\r\n         * Max color of a heat legend. If a series is set for the legend, maxColor is taken from series.\r\n         *\r\n         * @param {Color}\r\n         */\r\n        set: function (value) {\r\n            if (!(value instanceof Color)) {\r\n                value = toColor(value);\r\n            }\r\n            this.setColorProperty(\"maxColor\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(HeatLegend.prototype, \"markerCount\", {\r\n        /**\r\n         * Returns number of color squares (markers).\r\n         * @return {number}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"markerCount\");\r\n        },\r\n        /**\r\n         * Number of color squares (markers) in the heat legend. If only 1 marker is used, it will be filled with gradient.\r\n         *\r\n         * @param {number}\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"markerCount\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(HeatLegend.prototype, \"minValue\", {\r\n        /**\r\n         * Returns minimum value of heat legend.\r\n         * @return {number}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"minValue\");\r\n        },\r\n        /**\r\n         * Minimum value of heat legend's value axis. If a series is set for the legend, min is taken from series.\r\n         *\r\n         * @param {number}\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"minValue\", value);\r\n            this.valueAxis.min = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(HeatLegend.prototype, \"maxValue\", {\r\n        /**\r\n         * Returns maximum value of heat legend.\r\n         * @return {number}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maxValue\");\r\n        },\r\n        /**\r\n         * Maximum value of heat legend's value axis. If a series is set for the legend, max is taken from series.\r\n         *\r\n         * @param {number}\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"maxValue\", value);\r\n            this.valueAxis.max = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(HeatLegend.prototype, \"orientation\", {\r\n        /**\r\n         * Returns orientation value.\r\n         *\r\n         * @return {\"horizontal\" | \"vertical\"}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"orientation\");\r\n        },\r\n        /**\r\n        * Heat legend orientation. Note, if you change orientation of a heat legend, you must set value axis renderer properties after that, as with orientation renderer changes.\r\n        *\r\n        * @param {\"horizontal\" | \"vertical\"}\r\n        */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"orientation\", value, true);\r\n            var markerContainer = this.markerContainer;\r\n            var valueAxis = this.valueAxis;\r\n            // HORIZONTAL\r\n            if (value == \"horizontal\") {\r\n                if (!$type.hasValue(this.width)) {\r\n                    this.width = 200;\r\n                }\r\n                this.height = undefined;\r\n                valueAxis.width = percent(100);\r\n                valueAxis.height = undefined;\r\n                valueAxis.tooltip.pointerOrientation = \"vertical\";\r\n                this.layout = \"vertical\";\r\n                markerContainer.width = percent(100);\r\n                markerContainer.height = undefined;\r\n                if (!(valueAxis.renderer instanceof AxisRendererX)) {\r\n                    valueAxis.renderer = new AxisRendererX();\r\n                }\r\n            }\r\n            // VERTICAL\r\n            else {\r\n                if (!$type.hasValue(this.height)) {\r\n                    this.height = 200;\r\n                }\r\n                this.width = undefined;\r\n                this.layout = \"horizontal\";\r\n                markerContainer.width = undefined;\r\n                markerContainer.height = percent(100);\r\n                valueAxis.height = percent(100);\r\n                valueAxis.width = undefined;\r\n                valueAxis.tooltip.pointerOrientation = \"horizontal\";\r\n                if (!(valueAxis.renderer instanceof AxisRendererY)) {\r\n                    valueAxis.renderer = new AxisRendererY();\r\n                }\r\n                valueAxis.renderer.inside = true;\r\n                valueAxis.renderer.labels.template.inside = true;\r\n                this.markerContainer.reverseOrder = true;\r\n            }\r\n            var renderer = valueAxis.renderer;\r\n            renderer.grid.template.disabled = true;\r\n            renderer.axisFills.template.disabled = true;\r\n            renderer.baseGrid.disabled = true;\r\n            renderer.labels.template.padding(2, 3, 2, 3);\r\n            renderer.minHeight = undefined;\r\n            renderer.minWidth = undefined;\r\n            this.markerContainer.layout = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(HeatLegend.prototype, \"valueAxis\", {\r\n        /**\r\n         * Returns valueAxis value.\r\n         * @return {ValueAxis}\r\n         */\r\n        get: function () {\r\n            if (!this._valueAxis) {\r\n                this.valueAxis = this.createChild(ValueAxis);\r\n                this.valueAxis.shouldClone = false;\r\n            }\r\n            return this._valueAxis;\r\n        },\r\n        /**\r\n         * Sets a value axis of heat legend. Value axis for heat legend is created automatically.\r\n         * @param {ValueAxis}\r\n         */\r\n        set: function (valueAxis) {\r\n            this._valueAxis = valueAxis;\r\n            valueAxis.parent = this;\r\n            valueAxis.strictMinMax = true;\r\n            this.orientation = this.orientation;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(HeatLegend.prototype, \"series\", {\r\n        /**\r\n         * Returns series value.\r\n         * @return {Series}\r\n         */\r\n        get: function () {\r\n            return this._series;\r\n        },\r\n        /**\r\n         * You can set series for heat legend. It will take min, max, minColor and maxColor values from this series.\r\n         * @param series\r\n         */\r\n        set: function (series) {\r\n            var _this = this;\r\n            this._series = series;\r\n            var dataField = \"value\";\r\n            try {\r\n                var dataFieldDefined = series.heatRules.getIndex(0).dataField;\r\n                if (dataFieldDefined) {\r\n                    dataField = dataFieldDefined;\r\n                }\r\n            }\r\n            catch (err) {\r\n            }\r\n            this.updateMinMax(series.dataItem.values[dataField].low, series.dataItem.values[dataField].high);\r\n            series.dataItem.events.on(\"calculatedvaluechanged\", function (event) {\r\n                _this.updateMinMax(series.dataItem.values[dataField].low, series.dataItem.values[dataField].high);\r\n            }, undefined, false);\r\n            series.heatRules.events.on(\"inserted\", this.invalidate, this, false);\r\n            series.heatRules.events.on(\"removed\", this.invalidate, this, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Updates min/max of value axis.\r\n     * @ignore\r\n     */\r\n    HeatLegend.prototype.updateMinMax = function (min, max) {\r\n        var valueAxis = this.valueAxis;\r\n        if (!$type.isNumber(this.minValue)) {\r\n            valueAxis.min = min;\r\n            valueAxis.invalidate();\r\n        }\r\n        if (!$type.isNumber(this.maxValue)) {\r\n            valueAxis.max = max;\r\n            valueAxis.invalidate();\r\n        }\r\n    };\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param config  Config\r\n     */\r\n    HeatLegend.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Set up series\r\n            if ($type.hasValue(config.series) && $type.isString(config.series)) {\r\n                if ($type.isString(config.series)) {\r\n                    if (this.map.hasKey(config.series)) {\r\n                        config.series = this.map.getKey(config.series);\r\n                    }\r\n                    else {\r\n                        var seriesId_1 = config.series;\r\n                        var disposer_1 = this.map.events.on(\"insertKey\", function (ev) {\r\n                            if (ev.key == seriesId_1) {\r\n                                this.series = ev.newValue;\r\n                                disposer_1.dispose();\r\n                            }\r\n                        }, this);\r\n                        this._disposers.push(disposer_1);\r\n                        delete config.series;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    return HeatLegend;\r\n}(Container));\r\nexport { HeatLegend };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"HeatLegend\"] = HeatLegend;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}