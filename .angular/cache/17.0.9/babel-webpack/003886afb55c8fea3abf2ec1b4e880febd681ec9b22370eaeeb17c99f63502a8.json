{"ast":null,"code":"/**\r\n * Chord diagram module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { FlowDiagram, FlowDiagramDataItem } from \"./FlowDiagram\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { Container } from \"../../core/Container\";\nimport { registry } from \"../../core/Registry\";\nimport { ChordNode } from \"../elements/ChordNode\";\nimport { ChordLink } from \"../elements/ChordLink\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $utils from \"../../core/utils/Utils\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n//@todo rearange notes after dragged\n/**\r\n * Defines a [[DataItem]] for [[ChordDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar ChordDiagramDataItem = /** @class */function (_super) {\n  __extends(ChordDiagramDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function ChordDiagramDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"ChordDiagramDataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  return ChordDiagramDataItem;\n}(FlowDiagramDataItem);\nexport { ChordDiagramDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Creates a Chord Diagram chart.\r\n *\r\n * @see {@link IChordDiagramEvents} for a list of available Events\r\n * @see {@link IChordDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/chord-diagram/} for documentation\r\n * @important\r\n */\nvar ChordDiagram = /** @class */function (_super) {\n  __extends(ChordDiagram, _super);\n  /**\r\n   * Constructor\r\n   */\n  function ChordDiagram() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * [valueAngle description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n    _this.valueAngle = 0;\n    _this.className = \"ChordDiagram\";\n    _this.startAngle = -90;\n    _this.endAngle = 270;\n    _this.radius = percent(80);\n    _this.innerRadius = -15;\n    _this.nodePadding = 5;\n    var chordContainer = _this.chartContainer.createChild(Container);\n    chordContainer.align = \"center\";\n    chordContainer.valign = \"middle\";\n    chordContainer.shouldClone = false;\n    chordContainer.layout = \"absolute\";\n    _this.chordContainer = chordContainer;\n    _this.nodesContainer.parent = chordContainer;\n    _this.linksContainer.parent = chordContainer;\n    _this.chartContainer.events.on(\"maxsizechanged\", _this.invalidate, _this, false);\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Redraws the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  ChordDiagram.prototype.validate = function () {\n    var _this = this;\n    var chartContainer = this.chartContainer;\n    var endAngle = this.endAngle;\n    var startAngle = this.startAngle + this.nodePadding / 2;\n    var rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\n    var innerRect = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n    rect = $math.getCommonRectangle([rect, innerRect]);\n    var maxRadius = Math.min(chartContainer.innerWidth / rect.width, chartContainer.innerHeight / rect.height);\n    if (!$type.isNumber(maxRadius)) {\n      maxRadius = 0;\n    }\n    var radius = $utils.relativeRadiusToValue(this.radius, maxRadius);\n    var pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, radius, true);\n    var total = this.dataItem.values.value.sum;\n    var count = 0;\n    var newTotal = 0;\n    $iter.each(this._sorted, function (strNode) {\n      var node = strNode[1];\n      _this.getNodeValue(node);\n      count++;\n      var value = node.total;\n      if (node.total / total < _this.minNodeSize) {\n        value = total * _this.minNodeSize;\n      }\n      newTotal += value;\n    });\n    this.valueAngle = (endAngle - this.startAngle - this.nodePadding * count) / newTotal;\n    $iter.each(this._sorted, function (strNode) {\n      var node = strNode[1];\n      var slice = node.slice;\n      slice.radius = radius;\n      slice.innerRadius = pixelInnerRadius;\n      var value = node.total;\n      if (node.total / total < _this.minNodeSize) {\n        value = total * _this.minNodeSize;\n      }\n      node.adjustedTotal = value;\n      var arc;\n      if (_this.nonRibbon) {\n        arc = (endAngle - _this.startAngle) / count - _this.nodePadding;\n      } else {\n        arc = _this.valueAngle * value;\n      }\n      slice.arc = arc;\n      slice.startAngle = startAngle;\n      node.trueStartAngle = startAngle;\n      node.parent = _this.nodesContainer;\n      node.validate(); // otherwise flickers - nodes are already created, but not yet positioned etc.\n      startAngle += arc + _this.nodePadding;\n    });\n    this.chordContainer.definedBBox = {\n      x: radius * rect.x,\n      y: radius * rect.y,\n      width: radius * rect.width,\n      height: radius * rect.height\n    };\n    this.chordContainer.invalidateLayout();\n    _super.prototype.validate.call(this);\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n  ChordDiagram.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n    // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Chord diagram\");\n    }\n  };\n  /**\r\n   * Creates and returns a new data item.\r\n   *\r\n   * @return Data item\r\n   */\n  ChordDiagram.prototype.createDataItem = function () {\n    return new ChordDiagramDataItem();\n  };\n  Object.defineProperty(ChordDiagram.prototype, \"startAngle\", {\n    /**\r\n     * @return Start angle (degrees)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startAngle\");\n    },\n    /**\r\n     * Starting angle of the Radar face. (degrees)\r\n     *\r\n     * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n     * top center. (at -90 degrees)\r\n     *\r\n     * You can use `startAngle` to change this setting.\r\n     *\r\n     * E.g. setting this to 0 will make the radial axis start horizontally to\r\n     * the right, as opposed to vertical.\r\n     *\r\n     * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n     * needs to be 360.\r\n     *\r\n     * However, it's **not** necessary to do so. You can set those to lesser\r\n     * numbers, to create semi-circles.\r\n     *\r\n     * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n     * looks like a quarter of a circle.\r\n     *\r\n     * @default -90\r\n     * @param value  Start angle (degrees)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"startAngle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ChordDiagram.prototype, \"endAngle\", {\n    /**\r\n     * @return End angle (degrees)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endAngle\");\n    },\n    /**\r\n     * Starting angle of the Radar face. (degrees)\r\n     *\r\n     * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n     * where it has started, forming a full 360 circle. (at 270 degrees)\r\n     *\r\n     * You can use `endAngle` to end the circle somewhere else.\r\n     *\r\n     * E.g. setting this to 180 will make the radar face end at horizontal line\r\n     * to the left off the center.\r\n     *\r\n     * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n     * needs to be 360.\r\n     *\r\n     * However, it's **not** necessary to do so. You can set those to lesser\r\n     * numbers, to create semi-circles.\r\n     *\r\n     * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n     * looks like a quarter of a circle.\r\n     *\r\n     * @default -90\r\n     * @param value  End angle (degrees)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"endAngle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ChordDiagram.prototype, \"radius\", {\n    /**\r\n     * @return Outer radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n    /**\r\n     * Outer radius of the Radar face.\r\n     *\r\n     * This can either be in absolute pixel value, or relative [[Percent]].\r\n     *\r\n     * @param value  Outer radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"radius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ChordDiagram.prototype, \"innerRadius\", {\n    /**\r\n     * @return Inner radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n    /**\r\n     * Inner radius of the Chord nodes.\r\n     *\r\n     * This can either be in absolute pixel value, or relative [[Percent]].\r\n     *\r\n     * @param value  Outer radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ChordDiagram.prototype, \"nonRibbon\", {\n    /**\r\n     * @return Non-ribbon\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"nonRibbon\");\n    },\n    /**\r\n     *\r\n     * If you set this to true, all the lines will be of the same width. This is done by making middleLine of a ChordLink visible.\r\n     *\r\n     * @param value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"nonRibbon\", value, true);\n      this.links.template.middleLine.strokeOpacity = 1;\n      this.links.template.link.fillOpacity = 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n  ChordDiagram.prototype.createNode = function () {\n    var node = new ChordNode();\n    this._disposers.push(node);\n    return node;\n  };\n  /**\r\n   * @ignore\r\n   */\n  ChordDiagram.prototype.createLink = function () {\n    var link = new ChordLink();\n    this._disposers.push(link);\n    return link;\n  };\n  return ChordDiagram;\n}(FlowDiagram);\nexport { ChordDiagram };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"ChordDiagram\"] = ChordDiagram;","map":{"version":3,"names":["__extends","FlowDiagram","FlowDiagramDataItem","percent","Container","registry","ChordNode","ChordLink","$iter","$math","$type","$utils","ChordDiagramDataItem","_super","_this","call","className","applyTheme","ChordDiagram","valueAngle","startAngle","endAngle","radius","innerRadius","nodePadding","chordContainer","chartContainer","createChild","align","valign","shouldClone","layout","nodesContainer","parent","linksContainer","events","on","invalidate","prototype","validate","rect","getArcRect","innerRect","x","y","width","height","getCommonRectangle","maxRadius","Math","min","innerWidth","innerHeight","isNumber","relativeRadiusToValue","pixelInnerRadius","total","dataItem","values","value","sum","count","newTotal","each","_sorted","strNode","node","getNodeValue","minNodeSize","slice","adjustedTotal","arc","nonRibbon","trueStartAngle","definedBBox","invalidateLayout","applyInternalDefaults","hasValue","readerTitle","language","translate","createDataItem","Object","defineProperty","get","getPropertyValue","set","setPropertyValue","enumerable","configurable","setPercentProperty","links","template","middleLine","strokeOpacity","link","fillOpacity","createNode","_disposers","push","createLink","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/charts/types/ChordDiagram.js"],"sourcesContent":["/**\r\n * Chord diagram module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagram, FlowDiagramDataItem } from \"./FlowDiagram\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ChordNode } from \"../elements/ChordNode\";\r\nimport { ChordLink } from \"../elements/ChordLink\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n//@todo rearange notes after dragged\r\n/**\r\n * Defines a [[DataItem]] for [[ChordDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar ChordDiagramDataItem = /** @class */ (function (_super) {\r\n    __extends(ChordDiagramDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ChordDiagramDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ChordDiagramDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return ChordDiagramDataItem;\r\n}(FlowDiagramDataItem));\r\nexport { ChordDiagramDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a Chord Diagram chart.\r\n *\r\n * @see {@link IChordDiagramEvents} for a list of available Events\r\n * @see {@link IChordDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/chord-diagram/} for documentation\r\n * @important\r\n */\r\nvar ChordDiagram = /** @class */ (function (_super) {\r\n    __extends(ChordDiagram, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ChordDiagram() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * [valueAngle description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         */\r\n        _this.valueAngle = 0;\r\n        _this.className = \"ChordDiagram\";\r\n        _this.startAngle = -90;\r\n        _this.endAngle = 270;\r\n        _this.radius = percent(80);\r\n        _this.innerRadius = -15;\r\n        _this.nodePadding = 5;\r\n        var chordContainer = _this.chartContainer.createChild(Container);\r\n        chordContainer.align = \"center\";\r\n        chordContainer.valign = \"middle\";\r\n        chordContainer.shouldClone = false;\r\n        chordContainer.layout = \"absolute\";\r\n        _this.chordContainer = chordContainer;\r\n        _this.nodesContainer.parent = chordContainer;\r\n        _this.linksContainer.parent = chordContainer;\r\n        _this.chartContainer.events.on(\"maxsizechanged\", _this.invalidate, _this, false);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Redraws the chart.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ChordDiagram.prototype.validate = function () {\r\n        var _this = this;\r\n        var chartContainer = this.chartContainer;\r\n        var endAngle = this.endAngle;\r\n        var startAngle = this.startAngle + this.nodePadding / 2;\r\n        var rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n        var innerRect = { x: 0, y: 0, width: 0, height: 0 };\r\n        rect = $math.getCommonRectangle([rect, innerRect]);\r\n        var maxRadius = Math.min(chartContainer.innerWidth / rect.width, chartContainer.innerHeight / rect.height);\r\n        if (!$type.isNumber(maxRadius)) {\r\n            maxRadius = 0;\r\n        }\r\n        var radius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n        var pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, radius, true);\r\n        var total = this.dataItem.values.value.sum;\r\n        var count = 0;\r\n        var newTotal = 0;\r\n        $iter.each(this._sorted, function (strNode) {\r\n            var node = strNode[1];\r\n            _this.getNodeValue(node);\r\n            count++;\r\n            var value = node.total;\r\n            if (node.total / total < _this.minNodeSize) {\r\n                value = total * _this.minNodeSize;\r\n            }\r\n            newTotal += value;\r\n        });\r\n        this.valueAngle = (endAngle - this.startAngle - this.nodePadding * count) / newTotal;\r\n        $iter.each(this._sorted, function (strNode) {\r\n            var node = strNode[1];\r\n            var slice = node.slice;\r\n            slice.radius = radius;\r\n            slice.innerRadius = pixelInnerRadius;\r\n            var value = node.total;\r\n            if (node.total / total < _this.minNodeSize) {\r\n                value = total * _this.minNodeSize;\r\n            }\r\n            node.adjustedTotal = value;\r\n            var arc;\r\n            if (_this.nonRibbon) {\r\n                arc = (endAngle - _this.startAngle) / count - _this.nodePadding;\r\n            }\r\n            else {\r\n                arc = _this.valueAngle * value;\r\n            }\r\n            slice.arc = arc;\r\n            slice.startAngle = startAngle;\r\n            node.trueStartAngle = startAngle;\r\n            node.parent = _this.nodesContainer;\r\n            node.validate(); // otherwise flickers - nodes are already created, but not yet positioned etc.\r\n            startAngle += arc + _this.nodePadding;\r\n        });\r\n        this.chordContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n        this.chordContainer.invalidateLayout();\r\n        _super.prototype.validate.call(this);\r\n    };\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    ChordDiagram.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        // Add a default screen reader title for accessibility\r\n        // This will be overridden in screen reader if there are any `titles` set\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Chord diagram\");\r\n        }\r\n    };\r\n    /**\r\n     * Creates and returns a new data item.\r\n     *\r\n     * @return Data item\r\n     */\r\n    ChordDiagram.prototype.createDataItem = function () {\r\n        return new ChordDiagramDataItem();\r\n    };\r\n    Object.defineProperty(ChordDiagram.prototype, \"startAngle\", {\r\n        /**\r\n         * @return Start angle (degrees)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startAngle\");\r\n        },\r\n        /**\r\n         * Starting angle of the Radar face. (degrees)\r\n         *\r\n         * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n         * top center. (at -90 degrees)\r\n         *\r\n         * You can use `startAngle` to change this setting.\r\n         *\r\n         * E.g. setting this to 0 will make the radial axis start horizontally to\r\n         * the right, as opposed to vertical.\r\n         *\r\n         * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n         * needs to be 360.\r\n         *\r\n         * However, it's **not** necessary to do so. You can set those to lesser\r\n         * numbers, to create semi-circles.\r\n         *\r\n         * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n         * looks like a quarter of a circle.\r\n         *\r\n         * @default -90\r\n         * @param value  Start angle (degrees)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"startAngle\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ChordDiagram.prototype, \"endAngle\", {\r\n        /**\r\n         * @return End angle (degrees)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endAngle\");\r\n        },\r\n        /**\r\n         * Starting angle of the Radar face. (degrees)\r\n         *\r\n         * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n         * where it has started, forming a full 360 circle. (at 270 degrees)\r\n         *\r\n         * You can use `endAngle` to end the circle somewhere else.\r\n         *\r\n         * E.g. setting this to 180 will make the radar face end at horizontal line\r\n         * to the left off the center.\r\n         *\r\n         * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n         * needs to be 360.\r\n         *\r\n         * However, it's **not** necessary to do so. You can set those to lesser\r\n         * numbers, to create semi-circles.\r\n         *\r\n         * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n         * looks like a quarter of a circle.\r\n         *\r\n         * @default -90\r\n         * @param value  End angle (degrees)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"endAngle\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ChordDiagram.prototype, \"radius\", {\r\n        /**\r\n         * @return Outer radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Outer radius of the Radar face.\r\n         *\r\n         * This can either be in absolute pixel value, or relative [[Percent]].\r\n         *\r\n         * @param value  Outer radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ChordDiagram.prototype, \"innerRadius\", {\r\n        /**\r\n         * @return Inner radius\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"innerRadius\");\r\n        },\r\n        /**\r\n         * Inner radius of the Chord nodes.\r\n         *\r\n         * This can either be in absolute pixel value, or relative [[Percent]].\r\n         *\r\n         * @param value  Outer radius\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ChordDiagram.prototype, \"nonRibbon\", {\r\n        /**\r\n         * @return Non-ribbon\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"nonRibbon\");\r\n        },\r\n        /**\r\n         *\r\n         * If you set this to true, all the lines will be of the same width. This is done by making middleLine of a ChordLink visible.\r\n         *\r\n         * @param value\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"nonRibbon\", value, true);\r\n            this.links.template.middleLine.strokeOpacity = 1;\r\n            this.links.template.link.fillOpacity = 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    ChordDiagram.prototype.createNode = function () {\r\n        var node = new ChordNode();\r\n        this._disposers.push(node);\r\n        return node;\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    ChordDiagram.prototype.createLink = function () {\r\n        var link = new ChordLink();\r\n        this._disposers.push(link);\r\n        return link;\r\n    };\r\n    return ChordDiagram;\r\n}(FlowDiagram));\r\nexport { ChordDiagram };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordDiagram\"] = ChordDiagram;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}