{"ast":null,"code":"/**\r\n * Module that defines everything related to building Cone Columns.\r\n * It is a container which has coneColumn element which is a Cone.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Column } from \"./Column\";\nimport { Cone } from \"../../core/elements/3d/Cone\";\nimport { registry } from \"../../core/Registry\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Class used to creates ConeColumns.\r\n *\r\n * @see {@link IConeColumnEvents} for a list of available events\r\n * @see {@link IConeColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\nvar ConeColumn = /** @class */function (_super) {\n  __extends(ConeColumn, _super);\n  /**\r\n   * Constructor\r\n   */\n  function ConeColumn() {\n    var _this = _super.call(this) || this;\n    _this.className = \"ConeColumn\";\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n  ConeColumn.prototype.createAssets = function () {\n    this.coneColumn = this.createChild(Cone);\n    this.coneColumn.shouldClone = false;\n    // some dirty hack so that if user access column, it won't get error\n    this.column = this.coneColumn;\n  };\n  /**\r\n   * Copies all parameters from another [[ConeColumn]].\r\n   *\r\n   * @param source Source ConeColumn\r\n   */\n  ConeColumn.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    if (this.coneColumn) {\n      this.coneColumn.copyFrom(source.coneColumn);\n    }\n  };\n  return ConeColumn;\n}(Column);\nexport { ConeColumn };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"ConeColumn\"] = ConeColumn;","map":{"version":3,"names":["__extends","Column","Cone","registry","ConeColumn","_super","_this","call","className","prototype","createAssets","coneColumn","createChild","shouldClone","column","copyFrom","source","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/charts/elements/ConeColumn.js"],"sourcesContent":["/**\r\n * Module that defines everything related to building Cone Columns.\r\n * It is a container which has coneColumn element which is a Cone.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column } from \"./Column\";\r\nimport { Cone } from \"../../core/elements/3d/Cone\";\r\nimport { registry } from \"../../core/Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Class used to creates ConeColumns.\r\n *\r\n * @see {@link IConeColumnEvents} for a list of available events\r\n * @see {@link IConeColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nvar ConeColumn = /** @class */ (function (_super) {\r\n    __extends(ConeColumn, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ConeColumn() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ConeColumn\";\r\n        return _this;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    ConeColumn.prototype.createAssets = function () {\r\n        this.coneColumn = this.createChild(Cone);\r\n        this.coneColumn.shouldClone = false;\r\n        // some dirty hack so that if user access column, it won't get error\r\n        this.column = this.coneColumn;\r\n    };\r\n    /**\r\n     * Copies all parameters from another [[ConeColumn]].\r\n     *\r\n     * @param source Source ConeColumn\r\n     */\r\n    ConeColumn.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        if (this.coneColumn) {\r\n            this.coneColumn.copyFrom(source.coneColumn);\r\n        }\r\n    };\r\n    return ConeColumn;\r\n}(Column));\r\nexport { ConeColumn };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeColumn\"] = ConeColumn;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,SAAS,QAAQ,OAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,MAAM,QAAQ,UAAU;AACjC,SAASC,IAAI,QAAQ,6BAA6B;AAClD,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,UAAU,GAAG,aAAe,UAAUC,MAAM,EAAE;EAC9CL,SAAS,CAACI,UAAU,EAAEC,MAAM,CAAC;EAC7B;AACJ;AACA;EACI,SAASD,UAAUA,CAAA,EAAG;IAClB,IAAIE,KAAK,GAAGD,MAAM,CAACE,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI;IACrCD,KAAK,CAACE,SAAS,GAAG,YAAY;IAC9B,OAAOF,KAAK;EAChB;EACA;AACJ;AACA;EACIF,UAAU,CAACK,SAAS,CAACC,YAAY,GAAG,YAAY;IAC5C,IAAI,CAACC,UAAU,GAAG,IAAI,CAACC,WAAW,CAACV,IAAI,CAAC;IACxC,IAAI,CAACS,UAAU,CAACE,WAAW,GAAG,KAAK;IACnC;IACA,IAAI,CAACC,MAAM,GAAG,IAAI,CAACH,UAAU;EACjC,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIP,UAAU,CAACK,SAAS,CAACM,QAAQ,GAAG,UAAUC,MAAM,EAAE;IAC9CX,MAAM,CAACI,SAAS,CAACM,QAAQ,CAACR,IAAI,CAAC,IAAI,EAAES,MAAM,CAAC;IAC5C,IAAI,IAAI,CAACL,UAAU,EAAE;MACjB,IAAI,CAACA,UAAU,CAACI,QAAQ,CAACC,MAAM,CAACL,UAAU,CAAC;IAC/C;EACJ,CAAC;EACD,OAAOP,UAAU;AACrB,CAAC,CAACH,MAAM,CAAE;AACV,SAASG,UAAU;AACnB;AACA;AACA;AACA;AACA;AACA;AACAD,QAAQ,CAACc,iBAAiB,CAAC,YAAY,CAAC,GAAGb,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}