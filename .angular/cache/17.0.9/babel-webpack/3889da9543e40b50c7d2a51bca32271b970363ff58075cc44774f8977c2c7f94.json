{"ast":null,"code":"/**\r\n * Module, defining Axis Renderer for vertical axes.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { AxisRenderer } from \"./AxisRenderer\";\nimport { WavedLine } from \"../../core/elements/WavedLine\";\nimport { WavedRectangle } from \"../../core/elements/WavedRectangle\";\nimport { registry } from \"../../core/Registry\";\nimport { percent, Percent } from \"../../core/utils/Percent\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\nimport { AxisBullet } from \"./AxisBullet\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * A renderer for vertical axis.\r\n *\r\n * @see {@link IAxisRendererYEvents} for a list of available events\r\n * @see {@link IAxisRendererYAdapters} for a list of available Adapters\r\n */\nvar AxisRendererY = /** @class */function (_super) {\n  __extends(AxisRendererY, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param axis Related axis\r\n   */\n  function AxisRendererY() {\n    var _this = _super.call(this) || this;\n    _this.className = \"AxisRendererY\";\n    _this.minGridDistance = 40;\n    _this.opposite = false;\n    _this.height = percent(100);\n    _this.labels.template.verticalCenter = \"middle\";\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n  * @ignore\r\n  */\n  AxisRendererY.prototype.setAxis = function (axis) {\n    _super.prototype.setAxis.call(this, axis);\n    axis.layout = \"horizontal\";\n  };\n  /**\r\n   * @ignore\r\n   */\n  AxisRendererY.prototype.updateGridContainer = function () {\n    var axis = this.axis;\n    if (axis) {\n      var gridContainer = this.gridContainer;\n      gridContainer.y = axis.pixelY;\n      gridContainer.height = axis.axisLength;\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n  AxisRendererY.prototype.toAxisPosition = function (value) {\n    var axis = this.axis;\n    if (axis) {\n      var inversedPosition = 1 - value;\n      var relativePositionSprite = axis.relativePositionSprite;\n      var y = axis.pixelY;\n      if (relativePositionSprite) {\n        y = $utils.spritePointToSprite({\n          x: 0,\n          y: this.pixelY\n        }, this.parent, relativePositionSprite).y;\n      } else {\n        relativePositionSprite = axis.parent;\n      }\n      if (relativePositionSprite) {\n        var relativeY = y / relativePositionSprite.innerHeight;\n        var relativeHeight = axis.axisLength / relativePositionSprite.innerHeight;\n        return 1 - (inversedPosition - relativeY) / relativeHeight;\n      }\n    }\n    return value;\n  };\n  /**\r\n   * Called when rendered is attached to an Axis, as well as a property of\r\n   * Axis that might affect the appearance is updated.\r\n   *\r\n   * E.g. `axis.opposite`, `axis.inside`, etc.\r\n   *\r\n   * This method is called **before** draw, so that any related setting\r\n   * changed in this method can be changed.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n  AxisRendererY.prototype.processRenderer = function () {\n    _super.prototype.processRenderer.call(this);\n    var axis = this.axis;\n    if (axis) {\n      var title = axis.title;\n      title.valign = \"middle\";\n      if (!(axis.height instanceof Percent)) {\n        axis.height = percent(100);\n      }\n      if (this.opposite) {\n        title.rotation = 90;\n        this.line.toBack();\n        title.toFront();\n      } else {\n        title.rotation = -90;\n        title.toBack();\n        this.line.toFront();\n      }\n    }\n  };\n  /**\r\n   * Updates some of the Axis tooltip's visual properties, related to\r\n   * rendering of the Axis.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n  AxisRendererY.prototype.updateTooltip = function () {\n    var axis = this.axis;\n    if (axis) {\n      var bigNum = 2000;\n      var bbx = 0;\n      var bby = 0;\n      var bbw = bigNum;\n      var bbh = this.axisLength;\n      // right\n      if (this.opposite) {\n        if (this.inside) {\n          bbx = -bigNum;\n          bbw = bigNum;\n        }\n      }\n      // left\n      else {\n        if (!this.inside) {\n          bbx = -bigNum;\n          bbw = bigNum;\n        }\n      }\n      this.axis.updateTooltip(\"horizontal\", {\n        x: bbx,\n        y: bby,\n        width: bbw,\n        height: bbh\n      });\n    }\n  };\n  Object.defineProperty(AxisRendererY.prototype, \"axisLength\", {\n    /**\r\n     * Returns actual length of the Axis, in pixels.\r\n     *\r\n     * @return Length (px)\r\n     */\n    get: function () {\n      var axis = this.axis;\n      return axis.measuredHeight - axis.pixelPaddingTop - axis.pixelPaddingBottom || 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts relative position on axis to point coordinates.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @param position2  Position (0-1) Position on the second axis\r\n   * @return Point\r\n   */\n  AxisRendererY.prototype.positionToPoint = function (position, position2) {\n    return {\n      x: 0,\n      y: this.positionToCoordinate(position)\n    };\n  };\n  /**\r\n   * Converts a point at specific coordinates to a relative position (0-1)\r\n   * on the axis.\r\n   *\r\n   * @param point  Point\r\n   * @return Position (0-1)\r\n   */\n  AxisRendererY.prototype.pointToPosition = function (point) {\n    return this.coordinateToPosition(point.y, point.x);\n  };\n  /**\r\n   * Converts a coordinate in pixels to a relative position. (0-1)\r\n   *\r\n   * @param coordinate  Coordinate (px)\r\n   * @param coordinate2  Coordinate of a second axis, only needed for complex axes systems, like timeline (px)\r\n   * @return Position (0-1)\r\n   */\n  AxisRendererY.prototype.coordinateToPosition = function (coordinate, coordinate2) {\n    var position;\n    var axis = this.axis;\n    var axisFullLength = axis.axisFullLength;\n    if (axis.renderer.inversed) {\n      position = 1 - axis.start - coordinate / axisFullLength;\n    } else {\n      position = coordinate / axisFullLength + (1 - axis.end);\n    }\n    return $math.round(position, 5);\n  };\n  /**\r\n   * [getPositionRangePath description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param startPosition  Starting position\r\n   * @param endPosition    End position\r\n   * @return SVG path\r\n   */\n  AxisRendererY.prototype.getPositionRangePath = function (startPosition, endPosition) {\n    var y1 = $math.fitToRange(this.positionToCoordinate(startPosition), 0, this.axisLength);\n    var y2 = $math.fitToRange(this.positionToCoordinate(endPosition), 0, this.axisLength);\n    var h = Math.abs(y2 - y1);\n    var w = this.getWidth();\n    var y = Math.min(y1, y2);\n    var x = 0;\n    return $path.rectToPath({\n      x: x,\n      y: y,\n      width: w,\n      height: h\n    }, true);\n  };\n  /**\r\n   * Updates and positions a grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param grid         Grid element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n  AxisRendererY.prototype.updateGridElement = function (grid, position, endPosition) {\n    position = position + (endPosition - position) * grid.location;\n    var point = this.positionToPoint(position);\n    //\tpoint.y = $utils.spritePointToSprite({ x: 0, y: point.y }, this, this.gridContainer).y;\n    grid.path = $path.moveTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: this.getWidth(),\n      y: 0\n    });\n    this.positionItem(grid, point);\n    this.toggleVisibility(grid, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions a tick element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param tick         Tick element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n  AxisRendererY.prototype.updateTickElement = function (tick, position, endPosition) {\n    position = position + (endPosition - position) * tick.location;\n    var point = this.positionToPoint(position);\n    var tickLength = tick.length;\n    try {\n      $utils.used(this.axis.title.measuredWidth);\n    } catch (_a) {\n      // void\n    }\n    point.x = $utils.spritePointToSprite({\n      x: this.line.pixelX,\n      y: 0\n    }, this.line.parent, this.gridContainer).x;\n    if (!this.opposite) {\n      tickLength *= tick.inside ? 1 : -1;\n    } else {\n      tickLength *= tick.inside ? -1 : 1;\n    }\n    tick.path = $path.moveTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: tickLength,\n      y: 0\n    });\n    this.positionItem(tick, point);\n    this.toggleVisibility(tick, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions the axis line element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  AxisRendererY.prototype.updateAxisLine = function () {\n    this.line.path = $path.moveTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: 0,\n      y: this.axisLength\n    });\n  };\n  /**\r\n   * Updates and positions the base grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  AxisRendererY.prototype.updateBaseGridElement = function () {\n    _super.prototype.updateBaseGridElement.call(this);\n    var axis = this.axis;\n    var w = this.getWidth();\n    var h = this.axisLength;\n    var y = axis.basePoint.y;\n    var baseGrid = this.baseGrid;\n    if (y < -0.2 || y > h + 0.2) {\n      baseGrid.hide(0);\n    } else {\n      var x = $utils.spritePointToSprite({\n        x: 0,\n        y: 0\n      }, this.gridContainer, baseGrid.parent).x;\n      baseGrid.path = $path.moveTo({\n        x: 0,\n        y: 0\n      }) + $path.lineTo({\n        x: w,\n        y: 0\n      });\n      baseGrid.moveTo({\n        x: x,\n        y: y\n      });\n      baseGrid.show(0);\n    }\n  };\n  /**\r\n   * Updates and positions a label element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param label        Label element\r\n   * @param position     Starting position\r\n   * @param endPosition  Ending position\r\n   */\n  AxisRendererY.prototype.updateLabelElement = function (label, position, endPosition, location) {\n    if (!$type.hasValue(location)) {\n      location = label.location;\n    }\n    position = position + (endPosition - position) * location;\n    label.isMeasured = !label.inside;\n    var point = this.positionToPoint(position);\n    var horizontalCenter;\n    var deltaX = 0;\n    var maxWidth = this.gridContainer.maxWidth;\n    if (this.opposite) {\n      if (label.inside) {\n        horizontalCenter = \"right\";\n        if (label.align == \"left\") {\n          deltaX = -maxWidth;\n          horizontalCenter = \"left\";\n        }\n        if (label.align == \"center\") {\n          deltaX = -maxWidth / 2;\n          horizontalCenter = \"middle\";\n        }\n      } else {\n        horizontalCenter = \"left\";\n      }\n      point.x = 0 + deltaX;\n    } else {\n      if (label.inside) {\n        horizontalCenter = \"left\";\n        if (label.align == \"right\") {\n          deltaX = maxWidth;\n          horizontalCenter = \"right\";\n        }\n        if (label.align == \"center\") {\n          deltaX = maxWidth / 2;\n          horizontalCenter = \"middle\";\n        }\n      } else {\n        horizontalCenter = \"right\";\n      }\n      point.x = this.measuredWidth + deltaX;\n    }\n    if (label.rotation == 0) {\n      // Apply fuzzy logic to verticalCenter only if labels are not rotated\n      label.horizontalCenter = horizontalCenter;\n    }\n    this.positionItem(label, point);\n    this.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\n  };\n  /**\r\n   * Updates and positions an axis break element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axisBreak Break element\r\n   */\n  AxisRendererY.prototype.updateBreakElement = function (axisBreak) {\n    _super.prototype.updateBreakElement.call(this, axisBreak);\n    var startLine = axisBreak.startLine;\n    var endLine = axisBreak.endLine;\n    var fillShape = axisBreak.fillShape;\n    var startPoint = axisBreak.startPoint;\n    var endPoint = axisBreak.endPoint;\n    var x1 = axisBreak.pixelMarginLeft;\n    var x2 = this.getWidth() - axisBreak.pixelMarginLeft - axisBreak.pixelMarginRight;\n    startPoint.y = $math.fitToRange(startPoint.y, -1, this.axisLength + 1);\n    endPoint.y = $math.fitToRange(endPoint.y, -1, this.axisLength + 1);\n    if (startPoint.y == endPoint.y && (startPoint.y < 0 || startPoint.y > this.axisLength)) {\n      axisBreak.fillShape.__disabled = true;\n    } else {\n      axisBreak.fillShape.__disabled = false;\n    }\n    var w = Math.abs(x2 - x1);\n    startLine.x = x1;\n    startLine.height = 0;\n    startLine.width = w;\n    endLine.x = x1;\n    endLine.height = 0;\n    endLine.width = w;\n    fillShape.width = w;\n    fillShape.height = Math.abs(endPoint.y - startPoint.y);\n    fillShape.x = x1;\n    fillShape.y = endPoint.y;\n  };\n  /**\r\n   * Creates visual elements for and axis break.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axisBreak Axis break\r\n   */\n  AxisRendererY.prototype.createBreakSprites = function (axisBreak) {\n    axisBreak.startLine = new WavedLine();\n    axisBreak.endLine = new WavedLine();\n    var wavedRectangle = new WavedRectangle();\n    wavedRectangle.setWavedSides(true, false, true, false);\n    axisBreak.fillShape = wavedRectangle;\n  };\n  /**\r\n   * Converts a position on the axis to a coordinate in pixels.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param position  Position (0-1)\r\n   * @return Coordinate (px)\r\n   */\n  AxisRendererY.prototype.positionToCoordinate = function (position) {\n    var coordinate;\n    var axis = this.axis;\n    var axisFullLength = axis.axisFullLength;\n    if (!axis.renderer.inversed) {\n      coordinate = (axis.end - position) * axisFullLength;\n    } else {\n      coordinate = (position - axis.start) * axisFullLength;\n    }\n    return coordinate;\n  };\n  /**\r\n   * Updates and positions axis bullets.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param bullet       AxisBullet element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n  AxisRendererY.prototype.updateBullet = function (bullet, position, endPosition) {\n    var location = 0.5;\n    if (bullet instanceof AxisBullet) {\n      location = bullet.location;\n    }\n    position = position + (endPosition - position) * location;\n    var point = this.positionToPoint(position);\n    point.x = $utils.spritePointToSprite({\n      x: this.line.pixelX,\n      y: 0\n    }, this.line.parent, this.gridContainer).x;\n    this.positionItem(bullet, point);\n    this.toggleVisibility(bullet, position, 0, 1);\n  };\n  return AxisRendererY;\n}(AxisRenderer);\nexport { AxisRendererY };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"AxisRendererY\"] = AxisRendererY;\n/**\r\n * Add default responsive rules\r\n */\n/**\r\n * Put labels inside plot area.\r\n * Disable first and last labels.\r\n */\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.widthS,\n  state: function (target, stateId) {\n    if (target instanceof AxisRendererY) {\n      var state = target.states.create(stateId);\n      state.properties.inside = true;\n      state.properties.maxLabelPosition = 0.9;\n      state.properties.minLabelPosition = 0.1;\n      return state;\n    }\n    return null;\n  }\n});\n/**\r\n * Disable labels altogather on very small charts\r\n */\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.widthXS,\n  state: function (target, stateId) {\n    if (target instanceof AxisRendererY) {\n      var state = target.states.create(stateId);\n      state.properties.disabled = true;\n      return state;\n    }\n    return null;\n  }\n});","map":{"version":3,"names":["__extends","AxisRenderer","WavedLine","WavedRectangle","registry","percent","Percent","$math","$path","$utils","$type","defaultRules","ResponsiveBreakpoints","AxisBullet","AxisRendererY","_super","_this","call","className","minGridDistance","opposite","height","labels","template","verticalCenter","applyTheme","prototype","setAxis","axis","layout","updateGridContainer","gridContainer","y","pixelY","axisLength","toAxisPosition","value","inversedPosition","relativePositionSprite","spritePointToSprite","x","parent","relativeY","innerHeight","relativeHeight","processRenderer","title","valign","rotation","line","toBack","toFront","updateTooltip","bigNum","bbx","bby","bbw","bbh","inside","width","Object","defineProperty","get","measuredHeight","pixelPaddingTop","pixelPaddingBottom","enumerable","configurable","positionToPoint","position","position2","positionToCoordinate","pointToPosition","point","coordinateToPosition","coordinate","coordinate2","axisFullLength","renderer","inversed","start","end","round","getPositionRangePath","startPosition","endPosition","y1","fitToRange","y2","h","Math","abs","w","getWidth","min","rectToPath","updateGridElement","grid","location","path","moveTo","lineTo","positionItem","toggleVisibility","updateTickElement","tick","tickLength","length","used","measuredWidth","_a","pixelX","updateAxisLine","updateBaseGridElement","basePoint","baseGrid","hide","show","updateLabelElement","label","hasValue","isMeasured","horizontalCenter","deltaX","maxWidth","align","minLabelPosition","maxLabelPosition","updateBreakElement","axisBreak","startLine","endLine","fillShape","startPoint","endPoint","x1","pixelMarginLeft","x2","pixelMarginRight","__disabled","createBreakSprites","wavedRectangle","setWavedSides","updateBullet","bullet","registeredClasses","push","relevant","widthS","state","target","stateId","states","create","properties","widthXS","disabled"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/charts/axes/AxisRendererY.js"],"sourcesContent":["/**\r\n * Module, defining Axis Renderer for vertical axes.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { WavedLine } from \"../../core/elements/WavedLine\";\r\nimport { WavedRectangle } from \"../../core/elements/WavedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A renderer for vertical axis.\r\n *\r\n * @see {@link IAxisRendererYEvents} for a list of available events\r\n * @see {@link IAxisRendererYAdapters} for a list of available Adapters\r\n */\r\nvar AxisRendererY = /** @class */ (function (_super) {\r\n    __extends(AxisRendererY, _super);\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param axis Related axis\r\n     */\r\n    function AxisRendererY() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"AxisRendererY\";\r\n        _this.minGridDistance = 40;\r\n        _this.opposite = false;\r\n        _this.height = percent(100);\r\n        _this.labels.template.verticalCenter = \"middle\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n    * @ignore\r\n    */\r\n    AxisRendererY.prototype.setAxis = function (axis) {\r\n        _super.prototype.setAxis.call(this, axis);\r\n        axis.layout = \"horizontal\";\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    AxisRendererY.prototype.updateGridContainer = function () {\r\n        var axis = this.axis;\r\n        if (axis) {\r\n            var gridContainer = this.gridContainer;\r\n            gridContainer.y = axis.pixelY;\r\n            gridContainer.height = axis.axisLength;\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    AxisRendererY.prototype.toAxisPosition = function (value) {\r\n        var axis = this.axis;\r\n        if (axis) {\r\n            var inversedPosition = 1 - value;\r\n            var relativePositionSprite = axis.relativePositionSprite;\r\n            var y = axis.pixelY;\r\n            if (relativePositionSprite) {\r\n                y = $utils.spritePointToSprite({ x: 0, y: this.pixelY }, this.parent, relativePositionSprite).y;\r\n            }\r\n            else {\r\n                relativePositionSprite = axis.parent;\r\n            }\r\n            if (relativePositionSprite) {\r\n                var relativeY = y / relativePositionSprite.innerHeight;\r\n                var relativeHeight = axis.axisLength / relativePositionSprite.innerHeight;\r\n                return 1 - (inversedPosition - relativeY) / relativeHeight;\r\n            }\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * Called when rendered is attached to an Axis, as well as a property of\r\n     * Axis that might affect the appearance is updated.\r\n     *\r\n     * E.g. `axis.opposite`, `axis.inside`, etc.\r\n     *\r\n     * This method is called **before** draw, so that any related setting\r\n     * changed in this method can be changed.\r\n     *\r\n     * @todo Description (review)\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererY.prototype.processRenderer = function () {\r\n        _super.prototype.processRenderer.call(this);\r\n        var axis = this.axis;\r\n        if (axis) {\r\n            var title = axis.title;\r\n            title.valign = \"middle\";\r\n            if (!(axis.height instanceof Percent)) {\r\n                axis.height = percent(100);\r\n            }\r\n            if (this.opposite) {\r\n                title.rotation = 90;\r\n                this.line.toBack();\r\n                title.toFront();\r\n            }\r\n            else {\r\n                title.rotation = -90;\r\n                title.toBack();\r\n                this.line.toFront();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Updates some of the Axis tooltip's visual properties, related to\r\n     * rendering of the Axis.\r\n     *\r\n     * @todo Description (review)\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererY.prototype.updateTooltip = function () {\r\n        var axis = this.axis;\r\n        if (axis) {\r\n            var bigNum = 2000;\r\n            var bbx = 0;\r\n            var bby = 0;\r\n            var bbw = bigNum;\r\n            var bbh = this.axisLength;\r\n            // right\r\n            if (this.opposite) {\r\n                if (this.inside) {\r\n                    bbx = -bigNum;\r\n                    bbw = bigNum;\r\n                }\r\n            }\r\n            // left\r\n            else {\r\n                if (!this.inside) {\r\n                    bbx = -bigNum;\r\n                    bbw = bigNum;\r\n                }\r\n            }\r\n            this.axis.updateTooltip(\"horizontal\", { x: bbx, y: bby, width: bbw, height: bbh });\r\n        }\r\n    };\r\n    Object.defineProperty(AxisRendererY.prototype, \"axisLength\", {\r\n        /**\r\n         * Returns actual length of the Axis, in pixels.\r\n         *\r\n         * @return Length (px)\r\n         */\r\n        get: function () {\r\n            var axis = this.axis;\r\n            return (axis.measuredHeight - axis.pixelPaddingTop - axis.pixelPaddingBottom) || 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts relative position on axis to point coordinates.\r\n     *\r\n     * @param position  Position (0-1)\r\n     * @param position2  Position (0-1) Position on the second axis\r\n     * @return Point\r\n     */\r\n    AxisRendererY.prototype.positionToPoint = function (position, position2) {\r\n        return { x: 0, y: this.positionToCoordinate(position) };\r\n    };\r\n    /**\r\n     * Converts a point at specific coordinates to a relative position (0-1)\r\n     * on the axis.\r\n     *\r\n     * @param point  Point\r\n     * @return Position (0-1)\r\n     */\r\n    AxisRendererY.prototype.pointToPosition = function (point) {\r\n        return this.coordinateToPosition(point.y, point.x);\r\n    };\r\n    /**\r\n     * Converts a coordinate in pixels to a relative position. (0-1)\r\n     *\r\n     * @param coordinate  Coordinate (px)\r\n     * @param coordinate2  Coordinate of a second axis, only needed for complex axes systems, like timeline (px)\r\n     * @return Position (0-1)\r\n     */\r\n    AxisRendererY.prototype.coordinateToPosition = function (coordinate, coordinate2) {\r\n        var position;\r\n        var axis = this.axis;\r\n        var axisFullLength = axis.axisFullLength;\r\n        if (axis.renderer.inversed) {\r\n            position = (1 - axis.start) - coordinate / axisFullLength;\r\n        }\r\n        else {\r\n            position = coordinate / axisFullLength + (1 - axis.end);\r\n        }\r\n        return $math.round(position, 5);\r\n    };\r\n    /**\r\n     * [getPositionRangePath description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param startPosition  Starting position\r\n     * @param endPosition    End position\r\n     * @return SVG path\r\n     */\r\n    AxisRendererY.prototype.getPositionRangePath = function (startPosition, endPosition) {\r\n        var y1 = $math.fitToRange(this.positionToCoordinate(startPosition), 0, this.axisLength);\r\n        var y2 = $math.fitToRange(this.positionToCoordinate(endPosition), 0, this.axisLength);\r\n        var h = Math.abs(y2 - y1);\r\n        var w = this.getWidth();\r\n        var y = Math.min(y1, y2);\r\n        var x = 0;\r\n        return $path.rectToPath({\r\n            x: x,\r\n            y: y,\r\n            width: w,\r\n            height: h\r\n        }, true);\r\n    };\r\n    /**\r\n     * Updates and positions a grid element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param grid         Grid element\r\n     * @param position     Starting position\r\n     * @param endPosition  End position\r\n     */\r\n    AxisRendererY.prototype.updateGridElement = function (grid, position, endPosition) {\r\n        position = position + (endPosition - position) * grid.location;\r\n        var point = this.positionToPoint(position);\r\n        //\tpoint.y = $utils.spritePointToSprite({ x: 0, y: point.y }, this, this.gridContainer).y;\r\n        grid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.getWidth(), y: 0 });\r\n        this.positionItem(grid, point);\r\n        this.toggleVisibility(grid, position, 0, 1);\r\n    };\r\n    /**\r\n     * Updates and positions a tick element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param tick         Tick element\r\n     * @param position     Starting position\r\n     * @param endPosition  End position\r\n     */\r\n    AxisRendererY.prototype.updateTickElement = function (tick, position, endPosition) {\r\n        position = position + (endPosition - position) * tick.location;\r\n        var point = this.positionToPoint(position);\r\n        var tickLength = tick.length;\r\n        try {\r\n            $utils.used(this.axis.title.measuredWidth);\r\n        }\r\n        catch (_a) {\r\n            // void\r\n        }\r\n        point.x = $utils.spritePointToSprite({ x: this.line.pixelX, y: 0 }, this.line.parent, this.gridContainer).x;\r\n        if (!this.opposite) {\r\n            tickLength *= (tick.inside ? 1 : -1);\r\n        }\r\n        else {\r\n            tickLength *= (tick.inside ? -1 : 1);\r\n        }\r\n        tick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength, y: 0 });\r\n        this.positionItem(tick, point);\r\n        this.toggleVisibility(tick, position, 0, 1);\r\n    };\r\n    /**\r\n     * Updates and positions the axis line element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererY.prototype.updateAxisLine = function () {\r\n        this.line.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.axisLength });\r\n    };\r\n    /**\r\n     * Updates and positions the base grid element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererY.prototype.updateBaseGridElement = function () {\r\n        _super.prototype.updateBaseGridElement.call(this);\r\n        var axis = this.axis;\r\n        var w = this.getWidth();\r\n        var h = this.axisLength;\r\n        var y = axis.basePoint.y;\r\n        var baseGrid = this.baseGrid;\r\n        if (y < -0.2 || y > h + 0.2) {\r\n            baseGrid.hide(0);\r\n        }\r\n        else {\r\n            var x = $utils.spritePointToSprite({ x: 0, y: 0 }, this.gridContainer, baseGrid.parent).x;\r\n            baseGrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: w, y: 0 });\r\n            baseGrid.moveTo({ x: x, y: y });\r\n            baseGrid.show(0);\r\n        }\r\n    };\r\n    /**\r\n     * Updates and positions a label element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param label        Label element\r\n     * @param position     Starting position\r\n     * @param endPosition  Ending position\r\n     */\r\n    AxisRendererY.prototype.updateLabelElement = function (label, position, endPosition, location) {\r\n        if (!$type.hasValue(location)) {\r\n            location = label.location;\r\n        }\r\n        position = position + (endPosition - position) * location;\r\n        label.isMeasured = !label.inside;\r\n        var point = this.positionToPoint(position);\r\n        var horizontalCenter;\r\n        var deltaX = 0;\r\n        var maxWidth = this.gridContainer.maxWidth;\r\n        if (this.opposite) {\r\n            if (label.inside) {\r\n                horizontalCenter = \"right\";\r\n                if (label.align == \"left\") {\r\n                    deltaX = -maxWidth;\r\n                    horizontalCenter = \"left\";\r\n                }\r\n                if (label.align == \"center\") {\r\n                    deltaX = -maxWidth / 2;\r\n                    horizontalCenter = \"middle\";\r\n                }\r\n            }\r\n            else {\r\n                horizontalCenter = \"left\";\r\n            }\r\n            point.x = 0 + deltaX;\r\n        }\r\n        else {\r\n            if (label.inside) {\r\n                horizontalCenter = \"left\";\r\n                if (label.align == \"right\") {\r\n                    deltaX = maxWidth;\r\n                    horizontalCenter = \"right\";\r\n                }\r\n                if (label.align == \"center\") {\r\n                    deltaX = maxWidth / 2;\r\n                    horizontalCenter = \"middle\";\r\n                }\r\n            }\r\n            else {\r\n                horizontalCenter = \"right\";\r\n            }\r\n            point.x = this.measuredWidth + deltaX;\r\n        }\r\n        if (label.rotation == 0) {\r\n            // Apply fuzzy logic to verticalCenter only if labels are not rotated\r\n            label.horizontalCenter = horizontalCenter;\r\n        }\r\n        this.positionItem(label, point);\r\n        this.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n    };\r\n    /**\r\n     * Updates and positions an axis break element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param axisBreak Break element\r\n     */\r\n    AxisRendererY.prototype.updateBreakElement = function (axisBreak) {\r\n        _super.prototype.updateBreakElement.call(this, axisBreak);\r\n        var startLine = axisBreak.startLine;\r\n        var endLine = axisBreak.endLine;\r\n        var fillShape = axisBreak.fillShape;\r\n        var startPoint = axisBreak.startPoint;\r\n        var endPoint = axisBreak.endPoint;\r\n        var x1 = axisBreak.pixelMarginLeft;\r\n        var x2 = this.getWidth() - axisBreak.pixelMarginLeft - axisBreak.pixelMarginRight;\r\n        startPoint.y = $math.fitToRange(startPoint.y, -1, this.axisLength + 1);\r\n        endPoint.y = $math.fitToRange(endPoint.y, -1, this.axisLength + 1);\r\n        if (startPoint.y == endPoint.y && (startPoint.y < 0 || startPoint.y > this.axisLength)) {\r\n            axisBreak.fillShape.__disabled = true;\r\n        }\r\n        else {\r\n            axisBreak.fillShape.__disabled = false;\r\n        }\r\n        var w = Math.abs(x2 - x1);\r\n        startLine.x = x1;\r\n        startLine.height = 0;\r\n        startLine.width = w;\r\n        endLine.x = x1;\r\n        endLine.height = 0;\r\n        endLine.width = w;\r\n        fillShape.width = w;\r\n        fillShape.height = Math.abs(endPoint.y - startPoint.y);\r\n        fillShape.x = x1;\r\n        fillShape.y = endPoint.y;\r\n    };\r\n    /**\r\n     * Creates visual elements for and axis break.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param axisBreak Axis break\r\n     */\r\n    AxisRendererY.prototype.createBreakSprites = function (axisBreak) {\r\n        axisBreak.startLine = new WavedLine();\r\n        axisBreak.endLine = new WavedLine();\r\n        var wavedRectangle = new WavedRectangle();\r\n        wavedRectangle.setWavedSides(true, false, true, false);\r\n        axisBreak.fillShape = wavedRectangle;\r\n    };\r\n    /**\r\n     * Converts a position on the axis to a coordinate in pixels.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param position  Position (0-1)\r\n     * @return Coordinate (px)\r\n     */\r\n    AxisRendererY.prototype.positionToCoordinate = function (position) {\r\n        var coordinate;\r\n        var axis = this.axis;\r\n        var axisFullLength = axis.axisFullLength;\r\n        if (!axis.renderer.inversed) {\r\n            coordinate = (axis.end - position) * axisFullLength;\r\n        }\r\n        else {\r\n            coordinate = (position - axis.start) * axisFullLength;\r\n        }\r\n        return coordinate;\r\n    };\r\n    /**\r\n     * Updates and positions axis bullets.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param bullet       AxisBullet element\r\n     * @param position     Starting position\r\n     * @param endPosition  End position\r\n     */\r\n    AxisRendererY.prototype.updateBullet = function (bullet, position, endPosition) {\r\n        var location = 0.5;\r\n        if (bullet instanceof AxisBullet) {\r\n            location = bullet.location;\r\n        }\r\n        position = position + (endPosition - position) * location;\r\n        var point = this.positionToPoint(position);\r\n        point.x = $utils.spritePointToSprite({ x: this.line.pixelX, y: 0 }, this.line.parent, this.gridContainer).x;\r\n        this.positionItem(bullet, point);\r\n        this.toggleVisibility(bullet, position, 0, 1);\r\n    };\r\n    return AxisRendererY;\r\n}(AxisRenderer));\r\nexport { AxisRendererY };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererY\"] = AxisRendererY;\r\n/**\r\n * Add default responsive rules\r\n */\r\n/**\r\n * Put labels inside plot area.\r\n * Disable first and last labels.\r\n */\r\ndefaultRules.push({\r\n    relevant: ResponsiveBreakpoints.widthS,\r\n    state: function (target, stateId) {\r\n        if (target instanceof AxisRendererY) {\r\n            var state = target.states.create(stateId);\r\n            state.properties.inside = true;\r\n            state.properties.maxLabelPosition = 0.9;\r\n            state.properties.minLabelPosition = 0.1;\r\n            return state;\r\n        }\r\n        return null;\r\n    }\r\n});\r\n/**\r\n * Disable labels altogather on very small charts\r\n */\r\ndefaultRules.push({\r\n    relevant: ResponsiveBreakpoints.widthXS,\r\n    state: function (target, stateId) {\r\n        if (target instanceof AxisRendererY) {\r\n            var state = target.states.create(stateId);\r\n            state.properties.disabled = true;\r\n            return state;\r\n        }\r\n        return null;\r\n    }\r\n});\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,SAAS,QAAQ,OAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,SAASC,SAAS,QAAQ,+BAA+B;AACzD,SAASC,cAAc,QAAQ,oCAAoC;AACnE,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,SAASC,OAAO,EAAEC,OAAO,QAAQ,0BAA0B;AAC3D,OAAO,KAAKC,KAAK,MAAM,uBAAuB;AAC9C,OAAO,KAAKC,KAAK,MAAM,2BAA2B;AAClD,OAAO,KAAKC,MAAM,MAAM,wBAAwB;AAChD,OAAO,KAAKC,KAAK,MAAM,uBAAuB;AAC9C,SAASC,YAAY,EAAEC,qBAAqB,QAAQ,6BAA6B;AACjF,SAASC,UAAU,QAAQ,cAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,aAAa,GAAG,aAAe,UAAUC,MAAM,EAAE;EACjDf,SAAS,CAACc,aAAa,EAAEC,MAAM,CAAC;EAChC;AACJ;AACA;AACA;AACA;EACI,SAASD,aAAaA,CAAA,EAAG;IACrB,IAAIE,KAAK,GAAGD,MAAM,CAACE,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI;IACrCD,KAAK,CAACE,SAAS,GAAG,eAAe;IACjCF,KAAK,CAACG,eAAe,GAAG,EAAE;IAC1BH,KAAK,CAACI,QAAQ,GAAG,KAAK;IACtBJ,KAAK,CAACK,MAAM,GAAGhB,OAAO,CAAC,GAAG,CAAC;IAC3BW,KAAK,CAACM,MAAM,CAACC,QAAQ,CAACC,cAAc,GAAG,QAAQ;IAC/CR,KAAK,CAACS,UAAU,CAAC,CAAC;IAClB,OAAOT,KAAK;EAChB;EACA;AACJ;AACA;EACIF,aAAa,CAACY,SAAS,CAACC,OAAO,GAAG,UAAUC,IAAI,EAAE;IAC9Cb,MAAM,CAACW,SAAS,CAACC,OAAO,CAACV,IAAI,CAAC,IAAI,EAAEW,IAAI,CAAC;IACzCA,IAAI,CAACC,MAAM,GAAG,YAAY;EAC9B,CAAC;EACD;AACJ;AACA;EACIf,aAAa,CAACY,SAAS,CAACI,mBAAmB,GAAG,YAAY;IACtD,IAAIF,IAAI,GAAG,IAAI,CAACA,IAAI;IACpB,IAAIA,IAAI,EAAE;MACN,IAAIG,aAAa,GAAG,IAAI,CAACA,aAAa;MACtCA,aAAa,CAACC,CAAC,GAAGJ,IAAI,CAACK,MAAM;MAC7BF,aAAa,CAACV,MAAM,GAAGO,IAAI,CAACM,UAAU;IAC1C;EACJ,CAAC;EACD;AACJ;AACA;EACIpB,aAAa,CAACY,SAAS,CAACS,cAAc,GAAG,UAAUC,KAAK,EAAE;IACtD,IAAIR,IAAI,GAAG,IAAI,CAACA,IAAI;IACpB,IAAIA,IAAI,EAAE;MACN,IAAIS,gBAAgB,GAAG,CAAC,GAAGD,KAAK;MAChC,IAAIE,sBAAsB,GAAGV,IAAI,CAACU,sBAAsB;MACxD,IAAIN,CAAC,GAAGJ,IAAI,CAACK,MAAM;MACnB,IAAIK,sBAAsB,EAAE;QACxBN,CAAC,GAAGvB,MAAM,CAAC8B,mBAAmB,CAAC;UAAEC,CAAC,EAAE,CAAC;UAAER,CAAC,EAAE,IAAI,CAACC;QAAO,CAAC,EAAE,IAAI,CAACQ,MAAM,EAAEH,sBAAsB,CAAC,CAACN,CAAC;MACnG,CAAC,MACI;QACDM,sBAAsB,GAAGV,IAAI,CAACa,MAAM;MACxC;MACA,IAAIH,sBAAsB,EAAE;QACxB,IAAII,SAAS,GAAGV,CAAC,GAAGM,sBAAsB,CAACK,WAAW;QACtD,IAAIC,cAAc,GAAGhB,IAAI,CAACM,UAAU,GAAGI,sBAAsB,CAACK,WAAW;QACzE,OAAO,CAAC,GAAG,CAACN,gBAAgB,GAAGK,SAAS,IAAIE,cAAc;MAC9D;IACJ;IACA,OAAOR,KAAK;EAChB,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACItB,aAAa,CAACY,SAAS,CAACmB,eAAe,GAAG,YAAY;IAClD9B,MAAM,CAACW,SAAS,CAACmB,eAAe,CAAC5B,IAAI,CAAC,IAAI,CAAC;IAC3C,IAAIW,IAAI,GAAG,IAAI,CAACA,IAAI;IACpB,IAAIA,IAAI,EAAE;MACN,IAAIkB,KAAK,GAAGlB,IAAI,CAACkB,KAAK;MACtBA,KAAK,CAACC,MAAM,GAAG,QAAQ;MACvB,IAAI,EAAEnB,IAAI,CAACP,MAAM,YAAYf,OAAO,CAAC,EAAE;QACnCsB,IAAI,CAACP,MAAM,GAAGhB,OAAO,CAAC,GAAG,CAAC;MAC9B;MACA,IAAI,IAAI,CAACe,QAAQ,EAAE;QACf0B,KAAK,CAACE,QAAQ,GAAG,EAAE;QACnB,IAAI,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC;QAClBJ,KAAK,CAACK,OAAO,CAAC,CAAC;MACnB,CAAC,MACI;QACDL,KAAK,CAACE,QAAQ,GAAG,CAAC,EAAE;QACpBF,KAAK,CAACI,MAAM,CAAC,CAAC;QACd,IAAI,CAACD,IAAI,CAACE,OAAO,CAAC,CAAC;MACvB;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIrC,aAAa,CAACY,SAAS,CAAC0B,aAAa,GAAG,YAAY;IAChD,IAAIxB,IAAI,GAAG,IAAI,CAACA,IAAI;IACpB,IAAIA,IAAI,EAAE;MACN,IAAIyB,MAAM,GAAG,IAAI;MACjB,IAAIC,GAAG,GAAG,CAAC;MACX,IAAIC,GAAG,GAAG,CAAC;MACX,IAAIC,GAAG,GAAGH,MAAM;MAChB,IAAII,GAAG,GAAG,IAAI,CAACvB,UAAU;MACzB;MACA,IAAI,IAAI,CAACd,QAAQ,EAAE;QACf,IAAI,IAAI,CAACsC,MAAM,EAAE;UACbJ,GAAG,GAAG,CAACD,MAAM;UACbG,GAAG,GAAGH,MAAM;QAChB;MACJ;MACA;MAAA,KACK;QACD,IAAI,CAAC,IAAI,CAACK,MAAM,EAAE;UACdJ,GAAG,GAAG,CAACD,MAAM;UACbG,GAAG,GAAGH,MAAM;QAChB;MACJ;MACA,IAAI,CAACzB,IAAI,CAACwB,aAAa,CAAC,YAAY,EAAE;QAAEZ,CAAC,EAAEc,GAAG;QAAEtB,CAAC,EAAEuB,GAAG;QAAEI,KAAK,EAAEH,GAAG;QAAEnC,MAAM,EAAEoC;MAAI,CAAC,CAAC;IACtF;EACJ,CAAC;EACDG,MAAM,CAACC,cAAc,CAAC/C,aAAa,CAACY,SAAS,EAAE,YAAY,EAAE;IACzD;AACR;AACA;AACA;AACA;IACQoC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,IAAIlC,IAAI,GAAG,IAAI,CAACA,IAAI;MACpB,OAAQA,IAAI,CAACmC,cAAc,GAAGnC,IAAI,CAACoC,eAAe,GAAGpC,IAAI,CAACqC,kBAAkB,IAAK,CAAC;IACtF,CAAC;IACDC,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF;AACJ;AACA;AACA;AACA;AACA;AACA;EACIrD,aAAa,CAACY,SAAS,CAAC0C,eAAe,GAAG,UAAUC,QAAQ,EAAEC,SAAS,EAAE;IACrE,OAAO;MAAE9B,CAAC,EAAE,CAAC;MAAER,CAAC,EAAE,IAAI,CAACuC,oBAAoB,CAACF,QAAQ;IAAE,CAAC;EAC3D,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIvD,aAAa,CAACY,SAAS,CAAC8C,eAAe,GAAG,UAAUC,KAAK,EAAE;IACvD,OAAO,IAAI,CAACC,oBAAoB,CAACD,KAAK,CAACzC,CAAC,EAAEyC,KAAK,CAACjC,CAAC,CAAC;EACtD,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACI1B,aAAa,CAACY,SAAS,CAACgD,oBAAoB,GAAG,UAAUC,UAAU,EAAEC,WAAW,EAAE;IAC9E,IAAIP,QAAQ;IACZ,IAAIzC,IAAI,GAAG,IAAI,CAACA,IAAI;IACpB,IAAIiD,cAAc,GAAGjD,IAAI,CAACiD,cAAc;IACxC,IAAIjD,IAAI,CAACkD,QAAQ,CAACC,QAAQ,EAAE;MACxBV,QAAQ,GAAI,CAAC,GAAGzC,IAAI,CAACoD,KAAK,GAAIL,UAAU,GAAGE,cAAc;IAC7D,CAAC,MACI;MACDR,QAAQ,GAAGM,UAAU,GAAGE,cAAc,IAAI,CAAC,GAAGjD,IAAI,CAACqD,GAAG,CAAC;IAC3D;IACA,OAAO1E,KAAK,CAAC2E,KAAK,CAACb,QAAQ,EAAE,CAAC,CAAC;EACnC,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIvD,aAAa,CAACY,SAAS,CAACyD,oBAAoB,GAAG,UAAUC,aAAa,EAAEC,WAAW,EAAE;IACjF,IAAIC,EAAE,GAAG/E,KAAK,CAACgF,UAAU,CAAC,IAAI,CAAChB,oBAAoB,CAACa,aAAa,CAAC,EAAE,CAAC,EAAE,IAAI,CAAClD,UAAU,CAAC;IACvF,IAAIsD,EAAE,GAAGjF,KAAK,CAACgF,UAAU,CAAC,IAAI,CAAChB,oBAAoB,CAACc,WAAW,CAAC,EAAE,CAAC,EAAE,IAAI,CAACnD,UAAU,CAAC;IACrF,IAAIuD,CAAC,GAAGC,IAAI,CAACC,GAAG,CAACH,EAAE,GAAGF,EAAE,CAAC;IACzB,IAAIM,CAAC,GAAG,IAAI,CAACC,QAAQ,CAAC,CAAC;IACvB,IAAI7D,CAAC,GAAG0D,IAAI,CAACI,GAAG,CAACR,EAAE,EAAEE,EAAE,CAAC;IACxB,IAAIhD,CAAC,GAAG,CAAC;IACT,OAAOhC,KAAK,CAACuF,UAAU,CAAC;MACpBvD,CAAC,EAAEA,CAAC;MACJR,CAAC,EAAEA,CAAC;MACJ2B,KAAK,EAAEiC,CAAC;MACRvE,MAAM,EAAEoE;IACZ,CAAC,EAAE,IAAI,CAAC;EACZ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI3E,aAAa,CAACY,SAAS,CAACsE,iBAAiB,GAAG,UAAUC,IAAI,EAAE5B,QAAQ,EAAEgB,WAAW,EAAE;IAC/EhB,QAAQ,GAAGA,QAAQ,GAAG,CAACgB,WAAW,GAAGhB,QAAQ,IAAI4B,IAAI,CAACC,QAAQ;IAC9D,IAAIzB,KAAK,GAAG,IAAI,CAACL,eAAe,CAACC,QAAQ,CAAC;IAC1C;IACA4B,IAAI,CAACE,IAAI,GAAG3F,KAAK,CAAC4F,MAAM,CAAC;MAAE5D,CAAC,EAAE,CAAC;MAAER,CAAC,EAAE;IAAE,CAAC,CAAC,GAAGxB,KAAK,CAAC6F,MAAM,CAAC;MAAE7D,CAAC,EAAE,IAAI,CAACqD,QAAQ,CAAC,CAAC;MAAE7D,CAAC,EAAE;IAAE,CAAC,CAAC;IACrF,IAAI,CAACsE,YAAY,CAACL,IAAI,EAAExB,KAAK,CAAC;IAC9B,IAAI,CAAC8B,gBAAgB,CAACN,IAAI,EAAE5B,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC;EAC/C,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIvD,aAAa,CAACY,SAAS,CAAC8E,iBAAiB,GAAG,UAAUC,IAAI,EAAEpC,QAAQ,EAAEgB,WAAW,EAAE;IAC/EhB,QAAQ,GAAGA,QAAQ,GAAG,CAACgB,WAAW,GAAGhB,QAAQ,IAAIoC,IAAI,CAACP,QAAQ;IAC9D,IAAIzB,KAAK,GAAG,IAAI,CAACL,eAAe,CAACC,QAAQ,CAAC;IAC1C,IAAIqC,UAAU,GAAGD,IAAI,CAACE,MAAM;IAC5B,IAAI;MACAlG,MAAM,CAACmG,IAAI,CAAC,IAAI,CAAChF,IAAI,CAACkB,KAAK,CAAC+D,aAAa,CAAC;IAC9C,CAAC,CACD,OAAOC,EAAE,EAAE;MACP;IAAA;IAEJrC,KAAK,CAACjC,CAAC,GAAG/B,MAAM,CAAC8B,mBAAmB,CAAC;MAAEC,CAAC,EAAE,IAAI,CAACS,IAAI,CAAC8D,MAAM;MAAE/E,CAAC,EAAE;IAAE,CAAC,EAAE,IAAI,CAACiB,IAAI,CAACR,MAAM,EAAE,IAAI,CAACV,aAAa,CAAC,CAACS,CAAC;IAC3G,IAAI,CAAC,IAAI,CAACpB,QAAQ,EAAE;MAChBsF,UAAU,IAAKD,IAAI,CAAC/C,MAAM,GAAG,CAAC,GAAG,CAAC,CAAE;IACxC,CAAC,MACI;MACDgD,UAAU,IAAKD,IAAI,CAAC/C,MAAM,GAAG,CAAC,CAAC,GAAG,CAAE;IACxC;IACA+C,IAAI,CAACN,IAAI,GAAG3F,KAAK,CAAC4F,MAAM,CAAC;MAAE5D,CAAC,EAAE,CAAC;MAAER,CAAC,EAAE;IAAE,CAAC,CAAC,GAAGxB,KAAK,CAAC6F,MAAM,CAAC;MAAE7D,CAAC,EAAEkE,UAAU;MAAE1E,CAAC,EAAE;IAAE,CAAC,CAAC;IAChF,IAAI,CAACsE,YAAY,CAACG,IAAI,EAAEhC,KAAK,CAAC;IAC9B,IAAI,CAAC8B,gBAAgB,CAACE,IAAI,EAAEpC,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC;EAC/C,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIvD,aAAa,CAACY,SAAS,CAACsF,cAAc,GAAG,YAAY;IACjD,IAAI,CAAC/D,IAAI,CAACkD,IAAI,GAAG3F,KAAK,CAAC4F,MAAM,CAAC;MAAE5D,CAAC,EAAE,CAAC;MAAER,CAAC,EAAE;IAAE,CAAC,CAAC,GAAGxB,KAAK,CAAC6F,MAAM,CAAC;MAAE7D,CAAC,EAAE,CAAC;MAAER,CAAC,EAAE,IAAI,CAACE;IAAW,CAAC,CAAC;EAC9F,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIpB,aAAa,CAACY,SAAS,CAACuF,qBAAqB,GAAG,YAAY;IACxDlG,MAAM,CAACW,SAAS,CAACuF,qBAAqB,CAAChG,IAAI,CAAC,IAAI,CAAC;IACjD,IAAIW,IAAI,GAAG,IAAI,CAACA,IAAI;IACpB,IAAIgE,CAAC,GAAG,IAAI,CAACC,QAAQ,CAAC,CAAC;IACvB,IAAIJ,CAAC,GAAG,IAAI,CAACvD,UAAU;IACvB,IAAIF,CAAC,GAAGJ,IAAI,CAACsF,SAAS,CAAClF,CAAC;IACxB,IAAImF,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAC5B,IAAInF,CAAC,GAAG,CAAC,GAAG,IAAIA,CAAC,GAAGyD,CAAC,GAAG,GAAG,EAAE;MACzB0B,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC;IACpB,CAAC,MACI;MACD,IAAI5E,CAAC,GAAG/B,MAAM,CAAC8B,mBAAmB,CAAC;QAAEC,CAAC,EAAE,CAAC;QAAER,CAAC,EAAE;MAAE,CAAC,EAAE,IAAI,CAACD,aAAa,EAAEoF,QAAQ,CAAC1E,MAAM,CAAC,CAACD,CAAC;MACzF2E,QAAQ,CAAChB,IAAI,GAAG3F,KAAK,CAAC4F,MAAM,CAAC;QAAE5D,CAAC,EAAE,CAAC;QAAER,CAAC,EAAE;MAAE,CAAC,CAAC,GAAGxB,KAAK,CAAC6F,MAAM,CAAC;QAAE7D,CAAC,EAAEoD,CAAC;QAAE5D,CAAC,EAAE;MAAE,CAAC,CAAC;MAC3EmF,QAAQ,CAACf,MAAM,CAAC;QAAE5D,CAAC,EAAEA,CAAC;QAAER,CAAC,EAAEA;MAAE,CAAC,CAAC;MAC/BmF,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;IACpB;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIvG,aAAa,CAACY,SAAS,CAAC4F,kBAAkB,GAAG,UAAUC,KAAK,EAAElD,QAAQ,EAAEgB,WAAW,EAAEa,QAAQ,EAAE;IAC3F,IAAI,CAACxF,KAAK,CAAC8G,QAAQ,CAACtB,QAAQ,CAAC,EAAE;MAC3BA,QAAQ,GAAGqB,KAAK,CAACrB,QAAQ;IAC7B;IACA7B,QAAQ,GAAGA,QAAQ,GAAG,CAACgB,WAAW,GAAGhB,QAAQ,IAAI6B,QAAQ;IACzDqB,KAAK,CAACE,UAAU,GAAG,CAACF,KAAK,CAAC7D,MAAM;IAChC,IAAIe,KAAK,GAAG,IAAI,CAACL,eAAe,CAACC,QAAQ,CAAC;IAC1C,IAAIqD,gBAAgB;IACpB,IAAIC,MAAM,GAAG,CAAC;IACd,IAAIC,QAAQ,GAAG,IAAI,CAAC7F,aAAa,CAAC6F,QAAQ;IAC1C,IAAI,IAAI,CAACxG,QAAQ,EAAE;MACf,IAAImG,KAAK,CAAC7D,MAAM,EAAE;QACdgE,gBAAgB,GAAG,OAAO;QAC1B,IAAIH,KAAK,CAACM,KAAK,IAAI,MAAM,EAAE;UACvBF,MAAM,GAAG,CAACC,QAAQ;UAClBF,gBAAgB,GAAG,MAAM;QAC7B;QACA,IAAIH,KAAK,CAACM,KAAK,IAAI,QAAQ,EAAE;UACzBF,MAAM,GAAG,CAACC,QAAQ,GAAG,CAAC;UACtBF,gBAAgB,GAAG,QAAQ;QAC/B;MACJ,CAAC,MACI;QACDA,gBAAgB,GAAG,MAAM;MAC7B;MACAjD,KAAK,CAACjC,CAAC,GAAG,CAAC,GAAGmF,MAAM;IACxB,CAAC,MACI;MACD,IAAIJ,KAAK,CAAC7D,MAAM,EAAE;QACdgE,gBAAgB,GAAG,MAAM;QACzB,IAAIH,KAAK,CAACM,KAAK,IAAI,OAAO,EAAE;UACxBF,MAAM,GAAGC,QAAQ;UACjBF,gBAAgB,GAAG,OAAO;QAC9B;QACA,IAAIH,KAAK,CAACM,KAAK,IAAI,QAAQ,EAAE;UACzBF,MAAM,GAAGC,QAAQ,GAAG,CAAC;UACrBF,gBAAgB,GAAG,QAAQ;QAC/B;MACJ,CAAC,MACI;QACDA,gBAAgB,GAAG,OAAO;MAC9B;MACAjD,KAAK,CAACjC,CAAC,GAAG,IAAI,CAACqE,aAAa,GAAGc,MAAM;IACzC;IACA,IAAIJ,KAAK,CAACvE,QAAQ,IAAI,CAAC,EAAE;MACrB;MACAuE,KAAK,CAACG,gBAAgB,GAAGA,gBAAgB;IAC7C;IACA,IAAI,CAACpB,YAAY,CAACiB,KAAK,EAAE9C,KAAK,CAAC;IAC/B,IAAI,CAAC8B,gBAAgB,CAACgB,KAAK,EAAElD,QAAQ,EAAE,IAAI,CAACyD,gBAAgB,EAAE,IAAI,CAACC,gBAAgB,CAAC;EACxF,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIjH,aAAa,CAACY,SAAS,CAACsG,kBAAkB,GAAG,UAAUC,SAAS,EAAE;IAC9DlH,MAAM,CAACW,SAAS,CAACsG,kBAAkB,CAAC/G,IAAI,CAAC,IAAI,EAAEgH,SAAS,CAAC;IACzD,IAAIC,SAAS,GAAGD,SAAS,CAACC,SAAS;IACnC,IAAIC,OAAO,GAAGF,SAAS,CAACE,OAAO;IAC/B,IAAIC,SAAS,GAAGH,SAAS,CAACG,SAAS;IACnC,IAAIC,UAAU,GAAGJ,SAAS,CAACI,UAAU;IACrC,IAAIC,QAAQ,GAAGL,SAAS,CAACK,QAAQ;IACjC,IAAIC,EAAE,GAAGN,SAAS,CAACO,eAAe;IAClC,IAAIC,EAAE,GAAG,IAAI,CAAC5C,QAAQ,CAAC,CAAC,GAAGoC,SAAS,CAACO,eAAe,GAAGP,SAAS,CAACS,gBAAgB;IACjFL,UAAU,CAACrG,CAAC,GAAGzB,KAAK,CAACgF,UAAU,CAAC8C,UAAU,CAACrG,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAACE,UAAU,GAAG,CAAC,CAAC;IACtEoG,QAAQ,CAACtG,CAAC,GAAGzB,KAAK,CAACgF,UAAU,CAAC+C,QAAQ,CAACtG,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAACE,UAAU,GAAG,CAAC,CAAC;IAClE,IAAImG,UAAU,CAACrG,CAAC,IAAIsG,QAAQ,CAACtG,CAAC,KAAKqG,UAAU,CAACrG,CAAC,GAAG,CAAC,IAAIqG,UAAU,CAACrG,CAAC,GAAG,IAAI,CAACE,UAAU,CAAC,EAAE;MACpF+F,SAAS,CAACG,SAAS,CAACO,UAAU,GAAG,IAAI;IACzC,CAAC,MACI;MACDV,SAAS,CAACG,SAAS,CAACO,UAAU,GAAG,KAAK;IAC1C;IACA,IAAI/C,CAAC,GAAGF,IAAI,CAACC,GAAG,CAAC8C,EAAE,GAAGF,EAAE,CAAC;IACzBL,SAAS,CAAC1F,CAAC,GAAG+F,EAAE;IAChBL,SAAS,CAAC7G,MAAM,GAAG,CAAC;IACpB6G,SAAS,CAACvE,KAAK,GAAGiC,CAAC;IACnBuC,OAAO,CAAC3F,CAAC,GAAG+F,EAAE;IACdJ,OAAO,CAAC9G,MAAM,GAAG,CAAC;IAClB8G,OAAO,CAACxE,KAAK,GAAGiC,CAAC;IACjBwC,SAAS,CAACzE,KAAK,GAAGiC,CAAC;IACnBwC,SAAS,CAAC/G,MAAM,GAAGqE,IAAI,CAACC,GAAG,CAAC2C,QAAQ,CAACtG,CAAC,GAAGqG,UAAU,CAACrG,CAAC,CAAC;IACtDoG,SAAS,CAAC5F,CAAC,GAAG+F,EAAE;IAChBH,SAAS,CAACpG,CAAC,GAAGsG,QAAQ,CAACtG,CAAC;EAC5B,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIlB,aAAa,CAACY,SAAS,CAACkH,kBAAkB,GAAG,UAAUX,SAAS,EAAE;IAC9DA,SAAS,CAACC,SAAS,GAAG,IAAIhI,SAAS,CAAC,CAAC;IACrC+H,SAAS,CAACE,OAAO,GAAG,IAAIjI,SAAS,CAAC,CAAC;IACnC,IAAI2I,cAAc,GAAG,IAAI1I,cAAc,CAAC,CAAC;IACzC0I,cAAc,CAACC,aAAa,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC;IACtDb,SAAS,CAACG,SAAS,GAAGS,cAAc;EACxC,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACI/H,aAAa,CAACY,SAAS,CAAC6C,oBAAoB,GAAG,UAAUF,QAAQ,EAAE;IAC/D,IAAIM,UAAU;IACd,IAAI/C,IAAI,GAAG,IAAI,CAACA,IAAI;IACpB,IAAIiD,cAAc,GAAGjD,IAAI,CAACiD,cAAc;IACxC,IAAI,CAACjD,IAAI,CAACkD,QAAQ,CAACC,QAAQ,EAAE;MACzBJ,UAAU,GAAG,CAAC/C,IAAI,CAACqD,GAAG,GAAGZ,QAAQ,IAAIQ,cAAc;IACvD,CAAC,MACI;MACDF,UAAU,GAAG,CAACN,QAAQ,GAAGzC,IAAI,CAACoD,KAAK,IAAIH,cAAc;IACzD;IACA,OAAOF,UAAU;EACrB,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI7D,aAAa,CAACY,SAAS,CAACqH,YAAY,GAAG,UAAUC,MAAM,EAAE3E,QAAQ,EAAEgB,WAAW,EAAE;IAC5E,IAAIa,QAAQ,GAAG,GAAG;IAClB,IAAI8C,MAAM,YAAYnI,UAAU,EAAE;MAC9BqF,QAAQ,GAAG8C,MAAM,CAAC9C,QAAQ;IAC9B;IACA7B,QAAQ,GAAGA,QAAQ,GAAG,CAACgB,WAAW,GAAGhB,QAAQ,IAAI6B,QAAQ;IACzD,IAAIzB,KAAK,GAAG,IAAI,CAACL,eAAe,CAACC,QAAQ,CAAC;IAC1CI,KAAK,CAACjC,CAAC,GAAG/B,MAAM,CAAC8B,mBAAmB,CAAC;MAAEC,CAAC,EAAE,IAAI,CAACS,IAAI,CAAC8D,MAAM;MAAE/E,CAAC,EAAE;IAAE,CAAC,EAAE,IAAI,CAACiB,IAAI,CAACR,MAAM,EAAE,IAAI,CAACV,aAAa,CAAC,CAACS,CAAC;IAC3G,IAAI,CAAC8D,YAAY,CAAC0C,MAAM,EAAEvE,KAAK,CAAC;IAChC,IAAI,CAAC8B,gBAAgB,CAACyC,MAAM,EAAE3E,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC;EACjD,CAAC;EACD,OAAOvD,aAAa;AACxB,CAAC,CAACb,YAAY,CAAE;AAChB,SAASa,aAAa;AACtB;AACA;AACA;AACA;AACA;AACA;AACAV,QAAQ,CAAC6I,iBAAiB,CAAC,eAAe,CAAC,GAAGnI,aAAa;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,YAAY,CAACuI,IAAI,CAAC;EACdC,QAAQ,EAAEvI,qBAAqB,CAACwI,MAAM;EACtCC,KAAK,EAAE,SAAAA,CAAUC,MAAM,EAAEC,OAAO,EAAE;IAC9B,IAAID,MAAM,YAAYxI,aAAa,EAAE;MACjC,IAAIuI,KAAK,GAAGC,MAAM,CAACE,MAAM,CAACC,MAAM,CAACF,OAAO,CAAC;MACzCF,KAAK,CAACK,UAAU,CAAChG,MAAM,GAAG,IAAI;MAC9B2F,KAAK,CAACK,UAAU,CAAC3B,gBAAgB,GAAG,GAAG;MACvCsB,KAAK,CAACK,UAAU,CAAC5B,gBAAgB,GAAG,GAAG;MACvC,OAAOuB,KAAK;IAChB;IACA,OAAO,IAAI;EACf;AACJ,CAAC,CAAC;AACF;AACA;AACA;AACA1I,YAAY,CAACuI,IAAI,CAAC;EACdC,QAAQ,EAAEvI,qBAAqB,CAAC+I,OAAO;EACvCN,KAAK,EAAE,SAAAA,CAAUC,MAAM,EAAEC,OAAO,EAAE;IAC9B,IAAID,MAAM,YAAYxI,aAAa,EAAE;MACjC,IAAIuI,KAAK,GAAGC,MAAM,CAACE,MAAM,CAACC,MAAM,CAACF,OAAO,CAAC;MACzCF,KAAK,CAACK,UAAU,CAACE,QAAQ,GAAG,IAAI;MAChC,OAAOP,KAAK;IAChB;IACA,OAAO,IAAI;EACf;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}