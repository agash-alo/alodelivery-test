{"ast":null,"code":"/**\r\n * SankeyNode module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { FlowDiagramNode } from \"./FlowDiagramNode\";\nimport { LabelBullet } from \"./LabelBullet\";\nimport { registry } from \"../../core/Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $utils from \"../../core/utils/Utils\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Creates a node in a Sankey Diagram.\r\n *\r\n * A Sankey node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[SankeyLink]] elements.\r\n *\r\n * @see {@link ISankeyNodeEvents} for a list of available events\r\n * @see {@link ISankeyNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\nvar SankeyNode = /** @class */function (_super) {\n  __extends(SankeyNode, _super);\n  /**\r\n   * Constructor\r\n   */\n  function SankeyNode() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * [nextInCoord description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n    _this.nextInCoord = 0;\n    /**\r\n     * [nextOutCoord description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n    _this.nextOutCoord = 0;\n    _this.className = \"SankeyNode\";\n    _this.width = 10;\n    _this.height = 10;\n    var nameLabel = _this.createChild(LabelBullet);\n    nameLabel.shouldClone = false;\n    //@should we auto update these locations if position is changed?\n    nameLabel.locationX = 1;\n    nameLabel.locationY = 0.5;\n    nameLabel.label.text = \"{name}\";\n    //nameLabel.label.textElement.hideOversized = false;\n    nameLabel.width = 150;\n    nameLabel.height = 150;\n    nameLabel.label.horizontalCenter = \"left\";\n    nameLabel.label.padding(0, 5, 0, 5);\n    _this.nameLabel = nameLabel;\n    var valueLabel = _this.createChild(LabelBullet);\n    valueLabel.shouldClone = false;\n    valueLabel.label.hideOversized = false;\n    valueLabel.locationX = 0.5;\n    valueLabel.locationY = 0.5;\n    valueLabel.width = 150;\n    valueLabel.height = 150;\n    //valueLabel.label.text = \"{value}\";\n    valueLabel.label.horizontalCenter = \"middle\";\n    _this.valueLabel = valueLabel;\n    var hiddenState = _this.hiddenState;\n    hiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\n    hiddenState.properties.opacity = 0.5;\n    hiddenState.properties.visible = true;\n    _this.background.hiddenState.copyFrom(hiddenState);\n    return _this;\n  }\n  /**\r\n   * Invalidates all links, attached to this node.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  SankeyNode.prototype.invalidateLinks = function () {\n    var _this = this;\n    _super.prototype.invalidateLinks.call(this);\n    this.nextInCoord = 0;\n    this.nextOutCoord = 0;\n    var chart = this.chart;\n    if (chart) {\n      var orientation_1 = chart.orientation;\n      if (this._incomingSorted) {\n        $iter.each(this._incomingSorted, function (dataItem) {\n          var link = dataItem.link;\n          var value = dataItem.getWorkingValue(\"value\");\n          if ($type.isNumber(value)) {\n            link.parent = _this.chart.linksContainer;\n            var x = void 0;\n            var y = void 0;\n            var angle = void 0;\n            if (orientation_1 == \"horizontal\") {\n              x = _this.pixelX + _this.dx;\n              y = _this.nextInCoord + _this.pixelY + _this.dy;\n              angle = 0;\n            } else {\n              y = _this.pixelY + _this.dy;\n              x = _this.nextInCoord + _this.pixelX + _this.dx;\n              angle = 90;\n            }\n            link.endX = x;\n            link.endY = y;\n            link.startAngle = angle;\n            link.endAngle = angle;\n            link.gradient.rotation = angle;\n            link.linkWidth = value * chart.valueHeight;\n            if (!dataItem.fromNode) {\n              if (orientation_1 == \"horizontal\") {\n                link.maxWidth = 200;\n                link.startX = _this.pixelX + _this.dx - link.maxWidth;\n                link.startY = link.endY;\n              } else {\n                link.maxHeight = 200;\n                link.startX = link.endX;\n                link.startY = _this.pixelY + _this.dy - link.maxHeight;\n              }\n              // TODO is this needed ?\n              $utils.used(link.gradient);\n              link.fill = dataItem.toNode.color;\n              var stop_1 = link.gradient.stops.getIndex(0);\n              if (stop_1) {\n                if (link.colorMode == \"gradient\") {\n                  stop_1.color = _this.color;\n                }\n                stop_1.opacity = 0;\n                link.fill = link.gradient;\n                link.stroke = link.gradient;\n                link.gradient.validate();\n              }\n            }\n            //link.validate();\n            _this.nextInCoord += link.linkWidth;\n          }\n        });\n      }\n      if (this._outgoingSorted) {\n        $iter.each(this._outgoingSorted, function (dataItem) {\n          var link = dataItem.link;\n          link.parent = _this.chart.linksContainer;\n          var value = dataItem.getWorkingValue(\"value\");\n          if ($type.isNumber(value)) {\n            var x = void 0;\n            var y = void 0;\n            var angle = void 0;\n            if (orientation_1 == \"horizontal\") {\n              angle = 0;\n              x = _this.pixelX + _this.pixelWidth + _this.dx - 1;\n              y = _this.nextOutCoord + _this.pixelY + _this.dy;\n            } else {\n              angle = 90;\n              x = _this.nextOutCoord + _this.pixelX + _this.dx;\n              y = _this.pixelY + _this.pixelHeight + _this.dy - 1;\n            }\n            link.startX = x;\n            link.startY = y;\n            link.startAngle = angle;\n            link.endAngle = angle;\n            link.gradient.rotation = angle;\n            link.linkWidth = value * _this.chart.valueHeight;\n            if (!dataItem.toNode) {\n              if (orientation_1 == \"horizontal\") {\n                link.maxWidth = 200;\n                link.endX = _this.pixelX + link.maxWidth + _this.dx;\n                link.endY = link.startY;\n              } else {\n                link.maxHeight = 200;\n                link.endX = link.startX;\n                link.endY = _this.pixelY + link.maxHeight + _this.dy;\n              }\n              link.opacity = _this.opacity;\n              var stop_2 = link.gradient.stops.getIndex(1);\n              if (stop_2) {\n                if (link.colorMode == \"gradient\") {\n                  stop_2.color = _this.color;\n                }\n                stop_2.opacity = 0;\n                link.fill = link.gradient;\n                link.stroke = link.gradient;\n                link.gradient.validate();\n              }\n            }\n            //link.validate();\n            _this.nextOutCoord += link.linkWidth;\n          }\n        });\n      }\n    }\n    this.positionBullet(this.nameLabel);\n    this.positionBullet(this.valueLabel);\n  };\n  /**\r\n   * Positions the bullet so it is centered within the node element.\r\n   *\r\n   * @param bullet  Target bullet\r\n   */\n  SankeyNode.prototype.positionBullet = function (bullet) {\n    if (bullet) {\n      bullet.x = this.measuredWidth * bullet.locationX;\n      bullet.y = this.measuredHeight * bullet.locationY;\n    }\n  };\n  Object.defineProperty(SankeyNode.prototype, \"level\", {\n    /**\r\n     * @return Level\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"level\");\n    },\n    /**\r\n     * A level node is displayed at. (0 - ...)\r\n     *\r\n     * Levels are measured from left to right.\r\n     *\r\n     * The nodes in the left-most column will have `level = 0`.\r\n     *\r\n     * Nodes in second column - `level = 1`, etc.\r\n     *\r\n     * @param value  Level\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"level\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies properties and labels from another [[SankeyNode]].\r\n   *\r\n   * @param source  Source node\r\n   */\n  SankeyNode.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    this.nameLabel.copyFrom(source.nameLabel);\n    this.valueLabel.copyFrom(source.valueLabel);\n  };\n  return SankeyNode;\n}(FlowDiagramNode);\nexport { SankeyNode };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"SankeyNode\"] = SankeyNode;","map":{"version":3,"names":["__extends","FlowDiagramNode","LabelBullet","registry","InterfaceColorSet","$iter","$type","$utils","SankeyNode","_super","_this","call","nextInCoord","nextOutCoord","className","width","height","nameLabel","createChild","shouldClone","locationX","locationY","label","text","horizontalCenter","padding","valueLabel","hideOversized","hiddenState","properties","fill","getFor","opacity","visible","background","copyFrom","prototype","invalidateLinks","chart","orientation_1","orientation","_incomingSorted","each","dataItem","link","value","getWorkingValue","isNumber","parent","linksContainer","x","y","angle","pixelX","dx","pixelY","dy","endX","endY","startAngle","endAngle","gradient","rotation","linkWidth","valueHeight","fromNode","maxWidth","startX","startY","maxHeight","used","toNode","color","stop_1","stops","getIndex","colorMode","stroke","validate","_outgoingSorted","pixelWidth","pixelHeight","stop_2","positionBullet","bullet","measuredWidth","measuredHeight","Object","defineProperty","get","getPropertyValue","set","setPropertyValue","enumerable","configurable","source","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/charts/elements/SankeyNode.js"],"sourcesContent":["/**\r\n * SankeyNode module\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode } from \"./FlowDiagramNode\";\r\nimport { LabelBullet } from \"./LabelBullet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a node in a Sankey Diagram.\r\n *\r\n * A Sankey node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[SankeyLink]] elements.\r\n *\r\n * @see {@link ISankeyNodeEvents} for a list of available events\r\n * @see {@link ISankeyNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar SankeyNode = /** @class */ (function (_super) {\r\n    __extends(SankeyNode, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function SankeyNode() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * [nextInCoord description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         */\r\n        _this.nextInCoord = 0;\r\n        /**\r\n         * [nextOutCoord description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         */\r\n        _this.nextOutCoord = 0;\r\n        _this.className = \"SankeyNode\";\r\n        _this.width = 10;\r\n        _this.height = 10;\r\n        var nameLabel = _this.createChild(LabelBullet);\r\n        nameLabel.shouldClone = false;\r\n        //@should we auto update these locations if position is changed?\r\n        nameLabel.locationX = 1;\r\n        nameLabel.locationY = 0.5;\r\n        nameLabel.label.text = \"{name}\";\r\n        //nameLabel.label.textElement.hideOversized = false;\r\n        nameLabel.width = 150;\r\n        nameLabel.height = 150;\r\n        nameLabel.label.horizontalCenter = \"left\";\r\n        nameLabel.label.padding(0, 5, 0, 5);\r\n        _this.nameLabel = nameLabel;\r\n        var valueLabel = _this.createChild(LabelBullet);\r\n        valueLabel.shouldClone = false;\r\n        valueLabel.label.hideOversized = false;\r\n        valueLabel.locationX = 0.5;\r\n        valueLabel.locationY = 0.5;\r\n        valueLabel.width = 150;\r\n        valueLabel.height = 150;\r\n        //valueLabel.label.text = \"{value}\";\r\n        valueLabel.label.horizontalCenter = \"middle\";\r\n        _this.valueLabel = valueLabel;\r\n        var hiddenState = _this.hiddenState;\r\n        hiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n        hiddenState.properties.opacity = 0.5;\r\n        hiddenState.properties.visible = true;\r\n        _this.background.hiddenState.copyFrom(hiddenState);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Invalidates all links, attached to this node.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    SankeyNode.prototype.invalidateLinks = function () {\r\n        var _this = this;\r\n        _super.prototype.invalidateLinks.call(this);\r\n        this.nextInCoord = 0;\r\n        this.nextOutCoord = 0;\r\n        var chart = this.chart;\r\n        if (chart) {\r\n            var orientation_1 = chart.orientation;\r\n            if (this._incomingSorted) {\r\n                $iter.each(this._incomingSorted, function (dataItem) {\r\n                    var link = dataItem.link;\r\n                    var value = dataItem.getWorkingValue(\"value\");\r\n                    if ($type.isNumber(value)) {\r\n                        link.parent = _this.chart.linksContainer;\r\n                        var x = void 0;\r\n                        var y = void 0;\r\n                        var angle = void 0;\r\n                        if (orientation_1 == \"horizontal\") {\r\n                            x = _this.pixelX + _this.dx;\r\n                            y = _this.nextInCoord + _this.pixelY + _this.dy;\r\n                            angle = 0;\r\n                        }\r\n                        else {\r\n                            y = _this.pixelY + _this.dy;\r\n                            x = _this.nextInCoord + _this.pixelX + _this.dx;\r\n                            angle = 90;\r\n                        }\r\n                        link.endX = x;\r\n                        link.endY = y;\r\n                        link.startAngle = angle;\r\n                        link.endAngle = angle;\r\n                        link.gradient.rotation = angle;\r\n                        link.linkWidth = value * chart.valueHeight;\r\n                        if (!dataItem.fromNode) {\r\n                            if (orientation_1 == \"horizontal\") {\r\n                                link.maxWidth = 200;\r\n                                link.startX = _this.pixelX + _this.dx - link.maxWidth;\r\n                                link.startY = link.endY;\r\n                            }\r\n                            else {\r\n                                link.maxHeight = 200;\r\n                                link.startX = link.endX;\r\n                                link.startY = _this.pixelY + _this.dy - link.maxHeight;\r\n                            }\r\n                            // TODO is this needed ?\r\n                            $utils.used(link.gradient);\r\n                            link.fill = dataItem.toNode.color;\r\n                            var stop_1 = link.gradient.stops.getIndex(0);\r\n                            if (stop_1) {\r\n                                if (link.colorMode == \"gradient\") {\r\n                                    stop_1.color = _this.color;\r\n                                }\r\n                                stop_1.opacity = 0;\r\n                                link.fill = link.gradient;\r\n                                link.stroke = link.gradient;\r\n                                link.gradient.validate();\r\n                            }\r\n                        }\r\n                        //link.validate();\r\n                        _this.nextInCoord += link.linkWidth;\r\n                    }\r\n                });\r\n            }\r\n            if (this._outgoingSorted) {\r\n                $iter.each(this._outgoingSorted, function (dataItem) {\r\n                    var link = dataItem.link;\r\n                    link.parent = _this.chart.linksContainer;\r\n                    var value = dataItem.getWorkingValue(\"value\");\r\n                    if ($type.isNumber(value)) {\r\n                        var x = void 0;\r\n                        var y = void 0;\r\n                        var angle = void 0;\r\n                        if (orientation_1 == \"horizontal\") {\r\n                            angle = 0;\r\n                            x = _this.pixelX + _this.pixelWidth + _this.dx - 1;\r\n                            y = _this.nextOutCoord + _this.pixelY + _this.dy;\r\n                        }\r\n                        else {\r\n                            angle = 90;\r\n                            x = _this.nextOutCoord + _this.pixelX + _this.dx;\r\n                            y = _this.pixelY + _this.pixelHeight + _this.dy - 1;\r\n                        }\r\n                        link.startX = x;\r\n                        link.startY = y;\r\n                        link.startAngle = angle;\r\n                        link.endAngle = angle;\r\n                        link.gradient.rotation = angle;\r\n                        link.linkWidth = value * _this.chart.valueHeight;\r\n                        if (!dataItem.toNode) {\r\n                            if (orientation_1 == \"horizontal\") {\r\n                                link.maxWidth = 200;\r\n                                link.endX = _this.pixelX + link.maxWidth + _this.dx;\r\n                                link.endY = link.startY;\r\n                            }\r\n                            else {\r\n                                link.maxHeight = 200;\r\n                                link.endX = link.startX;\r\n                                link.endY = _this.pixelY + link.maxHeight + _this.dy;\r\n                            }\r\n                            link.opacity = _this.opacity;\r\n                            var stop_2 = link.gradient.stops.getIndex(1);\r\n                            if (stop_2) {\r\n                                if (link.colorMode == \"gradient\") {\r\n                                    stop_2.color = _this.color;\r\n                                }\r\n                                stop_2.opacity = 0;\r\n                                link.fill = link.gradient;\r\n                                link.stroke = link.gradient;\r\n                                link.gradient.validate();\r\n                            }\r\n                        }\r\n                        //link.validate();\r\n                        _this.nextOutCoord += link.linkWidth;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        this.positionBullet(this.nameLabel);\r\n        this.positionBullet(this.valueLabel);\r\n    };\r\n    /**\r\n     * Positions the bullet so it is centered within the node element.\r\n     *\r\n     * @param bullet  Target bullet\r\n     */\r\n    SankeyNode.prototype.positionBullet = function (bullet) {\r\n        if (bullet) {\r\n            bullet.x = this.measuredWidth * bullet.locationX;\r\n            bullet.y = this.measuredHeight * bullet.locationY;\r\n        }\r\n    };\r\n    Object.defineProperty(SankeyNode.prototype, \"level\", {\r\n        /**\r\n         * @return Level\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"level\");\r\n        },\r\n        /**\r\n         * A level node is displayed at. (0 - ...)\r\n         *\r\n         * Levels are measured from left to right.\r\n         *\r\n         * The nodes in the left-most column will have `level = 0`.\r\n         *\r\n         * Nodes in second column - `level = 1`, etc.\r\n         *\r\n         * @param value  Level\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"level\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies properties and labels from another [[SankeyNode]].\r\n     *\r\n     * @param source  Source node\r\n     */\r\n    SankeyNode.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.nameLabel.copyFrom(source.nameLabel);\r\n        this.valueLabel.copyFrom(source.valueLabel);\r\n    };\r\n    return SankeyNode;\r\n}(FlowDiagramNode));\r\nexport { SankeyNode };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyNode\"] = SankeyNode;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}