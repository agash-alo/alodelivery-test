{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Pattern } from \"./Pattern\";\nimport { registry } from \"../../Registry\";\nimport * as $path from \"../../rendering/Path\";\n;\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Line pattern.\r\n */\nvar LinePattern = /** @class */function (_super) {\n  __extends(LinePattern, _super);\n  /**\r\n   * Constructor\r\n   */\n  function LinePattern() {\n    var _this = _super.call(this) || this;\n    _this.properties[\"gap\"] = 0;\n    _this._line = _this.paper.add(\"path\");\n    _this.addElement(_this._line);\n    return _this;\n  }\n  /**\r\n   * Draws the pattern.\r\n   */\n  LinePattern.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n    if (Math.round(this.rotation / 90) != this.rotation / 90) {\n      this.properties[\"shapeRendering\"] = \"auto\";\n    }\n    if (this._line) {\n      var w = this.width;\n      var h = this.height;\n      var path = \"\";\n      if (!this.gap) {\n        if (Math.round(this.rotation / 90) != this.rotation / 90) {\n          path = $path.moveTo({\n            x: -w,\n            y: h / 2\n          }) + $path.lineTo({\n            x: w * 2,\n            y: h / 2\n          });\n          this.properties[\"rotationX\"] = this.width / 2;\n          this.properties[\"rotationY\"] = this.height / 2;\n        } else {\n          path = $path.moveTo({\n            x: 0,\n            y: 0\n          }) + $path.lineTo({\n            x: w,\n            y: 0\n          });\n        }\n      } else {\n        var step = this.gap + this.strokeWidth;\n        var count = this.height / step;\n        for (var i = -count / 2; i < count * 1.5; i++) {\n          if (Math.round(this.rotation / 90) != this.rotation / 90) {\n            path += $path.moveTo({\n              x: -w,\n              y: (i + 0.5) * step\n            }) + $path.lineTo({\n              x: w * 2,\n              y: (i + 0.5) * step\n            });\n            this.properties[\"rotationX\"] = this.width / 2;\n            this.properties[\"rotationY\"] = this.height / 2;\n          } else {\n            path += $path.moveTo({\n              x: -w,\n              y: i * step\n            }) + $path.lineTo({\n              x: w * 2,\n              y: i * step\n            });\n          }\n        }\n      }\n      this._line.attr({\n        \"d\": path\n      });\n    }\n  };\n  Object.defineProperty(LinePattern.prototype, \"gap\", {\n    /**\r\n     * @return gap\r\n     */\n    get: function () {\n      return this.properties[\"gap\"];\n    },\n    /**\r\n     * Number of pixels between pattern lines.\r\n     *\r\n     * The pattern will automatically draw required number of lines to fill\r\n     * pattern area maintaining `gap` distance between them.\r\n     *\r\n     * 0 (zero) means only single line will be drawn.\r\n     *\r\n     * @default 0\r\n     * @since 4.7.7\r\n     */\n    set: function (value) {\n      this.properties[\"gap\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return LinePattern;\n}(Pattern);\nexport { LinePattern };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"LinePattern\"] = LinePattern;","map":{"version":3,"names":["__extends","Pattern","registry","$path","LinePattern","_super","_this","call","properties","_line","paper","add","addElement","prototype","draw","Math","round","rotation","w","width","h","height","path","gap","moveTo","x","y","lineTo","step","strokeWidth","count","i","attr","Object","defineProperty","get","set","value","enumerable","configurable","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/LinePattern.js"],"sourcesContent":["import { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Pattern } from \"./Pattern\";\r\nimport { registry } from \"../../Registry\";\r\nimport * as $path from \"../../rendering/Path\";\r\n;\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Line pattern.\r\n */\r\nvar LinePattern = /** @class */ (function (_super) {\r\n    __extends(LinePattern, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function LinePattern() {\r\n        var _this = _super.call(this) || this;\r\n        _this.properties[\"gap\"] = 0;\r\n        _this._line = _this.paper.add(\"path\");\r\n        _this.addElement(_this._line);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the pattern.\r\n     */\r\n    LinePattern.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        if (Math.round(this.rotation / 90) != this.rotation / 90) {\r\n            this.properties[\"shapeRendering\"] = \"auto\";\r\n        }\r\n        if (this._line) {\r\n            var w = this.width;\r\n            var h = this.height;\r\n            var path = \"\";\r\n            if (!this.gap) {\r\n                if (Math.round(this.rotation / 90) != this.rotation / 90) {\r\n                    path = $path.moveTo({ x: -w, y: h / 2 }) + $path.lineTo({ x: w * 2, y: h / 2 });\r\n                    this.properties[\"rotationX\"] = this.width / 2;\r\n                    this.properties[\"rotationY\"] = this.height / 2;\r\n                }\r\n                else {\r\n                    path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: w, y: 0 });\r\n                }\r\n            }\r\n            else {\r\n                var step = this.gap + this.strokeWidth;\r\n                var count = this.height / step;\r\n                for (var i = -count / 2; i < count * 1.5; i++) {\r\n                    if (Math.round(this.rotation / 90) != this.rotation / 90) {\r\n                        path += $path.moveTo({ x: -w, y: (i + 0.5) * step }) + $path.lineTo({ x: w * 2, y: (i + 0.5) * step });\r\n                        this.properties[\"rotationX\"] = this.width / 2;\r\n                        this.properties[\"rotationY\"] = this.height / 2;\r\n                    }\r\n                    else {\r\n                        path += $path.moveTo({ x: -w, y: i * step }) + $path.lineTo({ x: w * 2, y: i * step });\r\n                    }\r\n                }\r\n            }\r\n            this._line.attr({ \"d\": path });\r\n        }\r\n    };\r\n    Object.defineProperty(LinePattern.prototype, \"gap\", {\r\n        /**\r\n         * @return gap\r\n         */\r\n        get: function () {\r\n            return this.properties[\"gap\"];\r\n        },\r\n        /**\r\n         * Number of pixels between pattern lines.\r\n         *\r\n         * The pattern will automatically draw required number of lines to fill\r\n         * pattern area maintaining `gap` distance between them.\r\n         *\r\n         * 0 (zero) means only single line will be drawn.\r\n         *\r\n         * @default 0\r\n         * @since 4.7.7\r\n         */\r\n        set: function (value) {\r\n            this.properties[\"gap\"] = value;\r\n            this.draw();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return LinePattern;\r\n}(Pattern));\r\nexport { LinePattern };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LinePattern\"] = LinePattern;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}