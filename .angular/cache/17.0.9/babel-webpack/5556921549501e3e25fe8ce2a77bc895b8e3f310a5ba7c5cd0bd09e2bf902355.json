{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport * as $array from \"./Array\";\nimport * as $type from \"./Type\";\n/**\r\n * A base class for disposable objects.\r\n *\r\n * @ignore Exclude from docs\r\n */\nvar Disposer = /** @class */function () {\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param dispose  Function that disposes object\r\n   */\n  function Disposer(dispose) {\n    this._disposed = false;\n    this._dispose = dispose;\n  }\n  /**\r\n   * Checks if object is disposed.\r\n   *\r\n   * @return Disposed?\r\n   */\n  Disposer.prototype.isDisposed = function () {\n    return this._disposed;\n  };\n  /**\r\n   * Disposes the object.\r\n   */\n  Disposer.prototype.dispose = function () {\n    if (!this._disposed) {\n      this._disposed = true;\n      this._dispose();\n    }\n  };\n  return Disposer;\n}();\nexport { Disposer };\n/**\r\n * A collection of related disposers that can be disposed in one go.\r\n *\r\n * @ignore Exclude from docs\r\n */\nvar MultiDisposer = /** @class */function (_super) {\n  __extends(MultiDisposer, _super);\n  function MultiDisposer(disposers) {\n    return _super.call(this, function () {\n      $array.each(disposers, function (x) {\n        x.dispose();\n      });\n    }) || this;\n  }\n  return MultiDisposer;\n}(Disposer);\nexport { MultiDisposer };\n/**\r\n * A special kind of Disposer that has attached value set.\r\n *\r\n * If a new value is set using `set()` method, the old disposer value is\r\n * disposed.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\nvar MutableValueDisposer = /** @class */function (_super) {\n  __extends(MutableValueDisposer, _super);\n  /**\r\n   * Constructor.\r\n   */\n  function MutableValueDisposer() {\n    var _this = _super.call(this, function () {\n      if ($type.hasValue(_this._disposer)) {\n        _this._disposer.dispose();\n        _this._disposer = undefined;\n      }\n    }) || this;\n    return _this;\n  }\n  /**\r\n   * Returns current value.\r\n   *\r\n   * @return Value\r\n   */\n  MutableValueDisposer.prototype.get = function () {\n    return this._value;\n  };\n  /**\r\n   * Sets value and disposes previous disposer if it was set.\r\n   *\r\n   * @param value     New value\r\n   * @param disposer  Disposer\r\n   */\n  MutableValueDisposer.prototype.set = function (value, disposer) {\n    if ($type.hasValue(this._disposer)) {\n      this._disposer.dispose();\n    }\n    this._disposer = disposer;\n    this._value = value;\n  };\n  /**\r\n   * Resets the disposer value.\r\n   */\n  MutableValueDisposer.prototype.reset = function () {\n    this.set(undefined, undefined);\n  };\n  return MutableValueDisposer;\n}(Disposer);\nexport { MutableValueDisposer };\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\nvar CounterDisposer = /** @class */function (_super) {\n  __extends(CounterDisposer, _super);\n  function CounterDisposer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * [_counter description]\r\n     *\r\n     * @todo Description\r\n     */\n    _this._counter = 0;\n    return _this;\n  }\n  /**\r\n   * [increment description]\r\n   *\r\n   * @todo Description\r\n   */\n  CounterDisposer.prototype.increment = function () {\n    var _this = this;\n    // TODO throw an error if it is disposed\n    ++this._counter;\n    // TODO make this more efficient\n    return new Disposer(function () {\n      --_this._counter;\n      if (_this._counter === 0) {\n        _this.dispose();\n      }\n    });\n  };\n  return CounterDisposer;\n}(Disposer);\nexport { CounterDisposer };","map":{"version":3,"names":["__extends","$array","$type","Disposer","dispose","_disposed","_dispose","prototype","isDisposed","MultiDisposer","_super","disposers","call","each","x","MutableValueDisposer","_this","hasValue","_disposer","undefined","get","_value","set","value","disposer","reset","CounterDisposer","apply","arguments","_counter","increment"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/utils/Disposer.js"],"sourcesContent":["import { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $array from \"./Array\";\r\nimport * as $type from \"./Type\";\r\n/**\r\n * A base class for disposable objects.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nvar Disposer = /** @class */ (function () {\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param dispose  Function that disposes object\r\n     */\r\n    function Disposer(dispose) {\r\n        this._disposed = false;\r\n        this._dispose = dispose;\r\n    }\r\n    /**\r\n     * Checks if object is disposed.\r\n     *\r\n     * @return Disposed?\r\n     */\r\n    Disposer.prototype.isDisposed = function () {\r\n        return this._disposed;\r\n    };\r\n    /**\r\n     * Disposes the object.\r\n     */\r\n    Disposer.prototype.dispose = function () {\r\n        if (!this._disposed) {\r\n            this._disposed = true;\r\n            this._dispose();\r\n        }\r\n    };\r\n    return Disposer;\r\n}());\r\nexport { Disposer };\r\n/**\r\n * A collection of related disposers that can be disposed in one go.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nvar MultiDisposer = /** @class */ (function (_super) {\r\n    __extends(MultiDisposer, _super);\r\n    function MultiDisposer(disposers) {\r\n        return _super.call(this, function () {\r\n            $array.each(disposers, function (x) {\r\n                x.dispose();\r\n            });\r\n        }) || this;\r\n    }\r\n    return MultiDisposer;\r\n}(Disposer));\r\nexport { MultiDisposer };\r\n/**\r\n * A special kind of Disposer that has attached value set.\r\n *\r\n * If a new value is set using `set()` method, the old disposer value is\r\n * disposed.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nvar MutableValueDisposer = /** @class */ (function (_super) {\r\n    __extends(MutableValueDisposer, _super);\r\n    /**\r\n     * Constructor.\r\n     */\r\n    function MutableValueDisposer() {\r\n        var _this = _super.call(this, function () {\r\n            if ($type.hasValue(_this._disposer)) {\r\n                _this._disposer.dispose();\r\n                _this._disposer = undefined;\r\n            }\r\n        }) || this;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Returns current value.\r\n     *\r\n     * @return Value\r\n     */\r\n    MutableValueDisposer.prototype.get = function () {\r\n        return this._value;\r\n    };\r\n    /**\r\n     * Sets value and disposes previous disposer if it was set.\r\n     *\r\n     * @param value     New value\r\n     * @param disposer  Disposer\r\n     */\r\n    MutableValueDisposer.prototype.set = function (value, disposer) {\r\n        if ($type.hasValue(this._disposer)) {\r\n            this._disposer.dispose();\r\n        }\r\n        this._disposer = disposer;\r\n        this._value = value;\r\n    };\r\n    /**\r\n     * Resets the disposer value.\r\n     */\r\n    MutableValueDisposer.prototype.reset = function () {\r\n        this.set(undefined, undefined);\r\n    };\r\n    return MutableValueDisposer;\r\n}(Disposer));\r\nexport { MutableValueDisposer };\r\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\r\nvar CounterDisposer = /** @class */ (function (_super) {\r\n    __extends(CounterDisposer, _super);\r\n    function CounterDisposer() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        /**\r\n         * [_counter description]\r\n         *\r\n         * @todo Description\r\n         */\r\n        _this._counter = 0;\r\n        return _this;\r\n    }\r\n    /**\r\n     * [increment description]\r\n     *\r\n     * @todo Description\r\n     */\r\n    CounterDisposer.prototype.increment = function () {\r\n        var _this = this;\r\n        // TODO throw an error if it is disposed\r\n        ++this._counter;\r\n        // TODO make this more efficient\r\n        return new Disposer(function () {\r\n            --_this._counter;\r\n            if (_this._counter === 0) {\r\n                _this.dispose();\r\n            }\r\n        });\r\n    };\r\n    return CounterDisposer;\r\n}(Disposer));\r\nexport { CounterDisposer };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}