{"ast":null,"code":"/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\nimport { registry } from \"../../core/Registry\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link IStepLineSeriesSegmentEvents} for a list of available events\r\n * @see {@link IStepLineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\nvar StepLineSeriesSegment = /** @class */function (_super) {\n  __extends(StepLineSeriesSegment, _super);\n  /**\r\n   * Constructor\r\n   */\n  function StepLineSeriesSegment() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    _this.className = \"StepLineSeriesSegment\";\n    return _this;\n  }\n  /**\r\n   * Draws the series segment.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param points       Points to connect\r\n   * @param closePoints  ?\r\n   * @param smoothnessX  Horizontal bezier setting (?)\r\n   * @param smoothnessY  Vertical bezier setting (?)\r\n   */\n  StepLineSeriesSegment.prototype.drawSegment = function (points, closePoints, smoothnessX, smoothnessY, noRisers, vertical) {\n    if (points.length > 0 && closePoints.length > 0) {\n      if (noRisers) {\n        var path = $path.moveTo(points[0]);\n        if (points.length > 0) {\n          for (var i = 1; i < points.length; i++) {\n            var point = points[i];\n            if (i / 2 == Math.round(i / 2)) {\n              path += $path.moveTo(point);\n            } else {\n              path += $path.lineTo(point);\n            }\n          }\n        }\n        this.strokeSprite.path = path;\n        if (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) {\n          // helps to avoid drawing fill object if fill is not visible\n          path = $path.moveTo(points[0]) + $path.polyline(points);\n          path += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\n          path += $path.lineTo(points[0]);\n          path += $path.closePath();\n          this.fillSprite.path = path;\n        } else {}\n      } else {\n        var path = $path.moveTo(points[0]) + $path.polyline(points);\n        this.strokeSprite.path = path;\n        if (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) {\n          // helps to avoid drawing fill object if fill is not visible\n          path += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\n          path += $path.lineTo(points[0]);\n          path += $path.closePath();\n          this.fillSprite.path = path;\n        }\n      }\n    } else {\n      this.strokeSprite.path = \"\";\n      this.fillSprite.path = \"\";\n    }\n  };\n  return StepLineSeriesSegment;\n}(LineSeriesSegment);\nexport { StepLineSeriesSegment };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"StepLineSeriesSegment\"] = StepLineSeriesSegment;","map":{"version":3,"names":["__extends","LineSeriesSegment","registry","$path","StepLineSeriesSegment","_super","_this","call","className","prototype","drawSegment","points","closePoints","smoothnessX","smoothnessY","noRisers","vertical","length","path","moveTo","i","point","Math","round","lineTo","strokeSprite","fillOpacity","fillSprite","polyline","closePath","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/charts/series/StepLineSeriesSegment.js"],"sourcesContent":["/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link IStepLineSeriesSegmentEvents} for a list of available events\r\n * @see {@link IStepLineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nvar StepLineSeriesSegment = /** @class */ (function (_super) {\r\n    __extends(StepLineSeriesSegment, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function StepLineSeriesSegment() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"StepLineSeriesSegment\";\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the series segment.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param points       Points to connect\r\n     * @param closePoints  ?\r\n     * @param smoothnessX  Horizontal bezier setting (?)\r\n     * @param smoothnessY  Vertical bezier setting (?)\r\n     */\r\n    StepLineSeriesSegment.prototype.drawSegment = function (points, closePoints, smoothnessX, smoothnessY, noRisers, vertical) {\r\n        if (points.length > 0 && closePoints.length > 0) {\r\n            if (noRisers) {\r\n                var path = $path.moveTo(points[0]);\r\n                if (points.length > 0) {\r\n                    for (var i = 1; i < points.length; i++) {\r\n                        var point = points[i];\r\n                        if (i / 2 == Math.round(i / 2)) {\r\n                            path += $path.moveTo(point);\r\n                        }\r\n                        else {\r\n                            path += $path.lineTo(point);\r\n                        }\r\n                    }\r\n                }\r\n                this.strokeSprite.path = path;\r\n                if (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n                    path = $path.moveTo(points[0]) + $path.polyline(points);\r\n                    path += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n                    path += $path.lineTo(points[0]);\r\n                    path += $path.closePath();\r\n                    this.fillSprite.path = path;\r\n                }\r\n                else {\r\n                }\r\n            }\r\n            else {\r\n                var path = $path.moveTo(points[0]) + $path.polyline(points);\r\n                this.strokeSprite.path = path;\r\n                if (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n                    path += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n                    path += $path.lineTo(points[0]);\r\n                    path += $path.closePath();\r\n                    this.fillSprite.path = path;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.strokeSprite.path = \"\";\r\n            this.fillSprite.path = \"\";\r\n        }\r\n    };\r\n    return StepLineSeriesSegment;\r\n}(LineSeriesSegment));\r\nexport { StepLineSeriesSegment };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeriesSegment\"] = StepLineSeriesSegment;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}