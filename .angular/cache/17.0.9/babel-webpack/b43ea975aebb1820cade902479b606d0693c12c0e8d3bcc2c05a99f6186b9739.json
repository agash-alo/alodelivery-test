{"ast":null,"code":"import { CdkTextareaAutosize, AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport { Directive, Input, InjectionToken, ElementRef, Optional, Self, Inject, NgZone, HostListener, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@angular/cdk/platform';\nimport { NgControl, NgForm, FormGroupDirective } from '@angular/forms';\nimport { mixinErrorState, ErrorStateMatcher, MatCommonModule } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormField, MAT_FORM_FIELD, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\nclass MatTextareaAutosize extends CdkTextareaAutosize {\n  get matAutosizeMinRows() {\n    return this.minRows;\n  }\n  set matAutosizeMinRows(value) {\n    this.minRows = value;\n  }\n  get matAutosizeMaxRows() {\n    return this.maxRows;\n  }\n  set matAutosizeMaxRows(value) {\n    this.maxRows = value;\n  }\n  get matAutosize() {\n    return this.enabled;\n  }\n  set matAutosize(value) {\n    this.enabled = value;\n  }\n  get matTextareaAutosize() {\n    return this.enabled;\n  }\n  set matTextareaAutosize(value) {\n    this.enabled = value;\n  }\n}\nMatTextareaAutosize.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n    exportAs: 'matTextareaAutosize',\n    inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n    host: {\n      'class': 'cdk-textarea-autosize mat-autosize',\n      // Textarea elements that have the directive applied should have a single row by default.\n      // Browsers normally show two rows by default and therefore this limits the minRows binding.\n      'rows': '1'\n    }\n  }]\n}];\nMatTextareaAutosize.propDecorators = {\n  matAutosizeMinRows: [{\n    type: Input\n  }],\n  matAutosizeMaxRows: [{\n    type: Input\n  }],\n  matAutosize: [{\n    type: Input,\n    args: ['mat-autosize']\n  }],\n  matTextareaAutosize: [{\n    type: Input\n  }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction getMatInputUnsupportedTypeError(type) {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = ['button', 'checkbox', 'file', 'hidden', 'image', 'radio', 'range', 'reset', 'submit'];\nlet nextUniqueId = 0;\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nclass MatInputBase {\n  constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, /** @docs-private */\n  ngControl) {\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n  }\n}\nconst _MatInputMixinBase = mixinErrorState(MatInputBase);\n/** Directive that allows a native input to work inside a `MatFormField`. */\nclass MatInput extends _MatInputMixinBase {\n  constructor(_elementRef, _platform, /** @docs-private */\n  ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone,\n  // TODO: Remove this once the legacy appearance has been removed. We only need\n  // to inject the form-field for determining whether the placeholder has been promoted.\n  _formField) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    this._elementRef = _elementRef;\n    this._platform = _platform;\n    this.ngControl = ngControl;\n    this._autofillMonitor = _autofillMonitor;\n    this._formField = _formField;\n    this._uid = `mat-input-${nextUniqueId++}`;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    this.focused = false;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    this.stateChanges = new Subject();\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    this.controlType = 'mat-input';\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    this.autofilled = false;\n    this._disabled = false;\n    this._required = false;\n    this._type = 'text';\n    this._readonly = false;\n    this._neverEmptyInputTypes = ['date', 'datetime', 'datetime-local', 'month', 'time', 'week'].filter(t => getSupportedInputTypes().has(t));\n    const element = this._elementRef.nativeElement;\n    const nodeName = element.nodeName.toLowerCase();\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n    this._previousNativeValue = this.value;\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', event => {\n          const el = event.target;\n          // Note: We specifically check for 0, rather than `!el.selectionStart`, because the two\n          // indicate different things. If the value is 0, it means that the caret is at the start\n          // of the input, whereas a value of `null` means that the input doesn't support\n          // manipulating the selection range. Inputs that don't support setting the selection range\n          // will throw an error so we want to avoid calling `setSelectionRange` on them. See:\n          // https://html.spec.whatwg.org/multipage/input.html#do-not-apply\n          if (!el.value && el.selectionStart === 0 && el.selectionEnd === 0) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = nodeName === 'select';\n    this._isTextarea = nodeName === 'textarea';\n    if (this._isNativeSelect) {\n      this.controlType = element.multiple ? 'mat-native-select-multiple' : 'mat-native-select';\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get disabled() {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id() {\n    return this._id;\n  }\n  set id(value) {\n    this._id = value || this._uid;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get required() {\n    return this._required;\n  }\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n  }\n  /** Input type of the element. */\n  get type() {\n    return this._type;\n  }\n  set type(value) {\n    this._type = value || 'text';\n    this._validateType();\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get value() {\n    return this._inputValueAccessor.value;\n  }\n  set value(value) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n  /** Whether the element is readonly. */\n  get readonly() {\n    return this._readonly;\n  }\n  set readonly(value) {\n    this._readonly = coerceBooleanProperty(value);\n  }\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n    // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n    // present or not depends on a query which is prone to \"changed after checked\" errors.\n    this._dirtyCheckPlaceholder();\n  }\n  /** Focuses the input. */\n  focus(options) {\n    this._elementRef.nativeElement.focus(options);\n  }\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  /** Callback for the cases where the focused state of the input changes. */\n  // tslint:disable:no-host-decorator-in-concrete\n  // tslint:enable:no-host-decorator-in-concrete\n  _focusChanged(isFocused) {\n    if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n  /** Does some manual dirty checking on the native input `placeholder` attribute. */\n  _dirtyCheckPlaceholder() {\n    var _a, _b;\n    // If we're hiding the native placeholder, it should also be cleared from the DOM, otherwise\n    // screen readers will read it out twice: once from the label and once from the attribute.\n    // TODO: can be removed once we get rid of the `legacy` style for the form field, because it's\n    // the only one that supports promoting the placeholder to a label.\n    const placeholder = ((_b = (_a = this._formField) === null || _a === void 0 ? void 0 : _a._hideControlPlaceholder) === null || _b === void 0 ? void 0 : _b.call(_a)) ? null : this.placeholder;\n    if (placeholder !== this._previousPlaceholder) {\n      const element = this._elementRef.nativeElement;\n      this._previousPlaceholder = placeholder;\n      placeholder ? element.setAttribute('placeholder', placeholder) : element.removeAttribute('placeholder');\n    }\n  }\n  /** Does some manual dirty checking on the native input `value` property. */\n  _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n  /** Make sure the input is a supported type. */\n  _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n  /** Checks whether the input type is one of the types that are never empty. */\n  _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n  /** Checks whether the input is invalid based on the native validation. */\n  _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = this._elementRef.nativeElement.validity;\n    return validity && validity.badInput;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty() {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() && !this.autofilled;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat() {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement;\n      const firstOption = selectElement.options[0];\n      // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n      return this.focused || selectElement.multiple || !this.empty || !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids) {\n    if (ids.length) {\n      this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n    } else {\n      this._elementRef.nativeElement.removeAttribute('aria-describedby');\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\nMatInput.decorators = [{\n  type: Directive,\n  args: [{\n    selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n    exportAs: 'matInput',\n    host: {\n      /**\n       * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n       */\n      'class': 'mat-input-element mat-form-field-autofill-control',\n      '[class.mat-input-server]': '_isServer',\n      // Native input properties that are overwritten by Angular inputs need to be synced with\n      // the native input element. Otherwise property bindings for those don't work.\n      '[attr.id]': 'id',\n      // At the time of writing, we have a lot of customer tests that look up the input based on its\n      // placeholder. Since we sometimes omit the placeholder attribute from the DOM to prevent screen\n      // readers from reading it twice, we have to keep it somewhere in the DOM for the lookup.\n      '[attr.data-placeholder]': 'placeholder',\n      '[disabled]': 'disabled',\n      '[required]': 'required',\n      '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n      // Only mark the input as invalid for assistive technology if it has a value since the\n      // state usually overlaps with `aria-required` when the input is empty and can be redundant.\n      '[attr.aria-invalid]': 'errorState && !empty',\n      '[attr.aria-required]': 'required'\n    },\n    providers: [{\n      provide: MatFormFieldControl,\n      useExisting: MatInput\n    }]\n  }]\n}];\nMatInput.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: Platform\n}, {\n  type: NgControl,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Self\n  }]\n}, {\n  type: NgForm,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: FormGroupDirective,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: ErrorStateMatcher\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Self\n  }, {\n    type: Inject,\n    args: [MAT_INPUT_VALUE_ACCESSOR]\n  }]\n}, {\n  type: AutofillMonitor\n}, {\n  type: NgZone\n}, {\n  type: MatFormField,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_FORM_FIELD]\n  }]\n}];\nMatInput.propDecorators = {\n  disabled: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  type: [{\n    type: Input\n  }],\n  errorStateMatcher: [{\n    type: Input\n  }],\n  userAriaDescribedBy: [{\n    type: Input,\n    args: ['aria-describedby']\n  }],\n  value: [{\n    type: Input\n  }],\n  readonly: [{\n    type: Input\n  }],\n  _focusChanged: [{\n    type: HostListener,\n    args: ['focus', ['true']]\n  }, {\n    type: HostListener,\n    args: ['blur', ['false']]\n  }],\n  _onInput: [{\n    type: HostListener,\n    args: ['input']\n  }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatInputModule {}\nMatInputModule.decorators = [{\n  type: NgModule,\n  args: [{\n    declarations: [MatInput, MatTextareaAutosize],\n    imports: [TextFieldModule, MatFormFieldModule, MatCommonModule],\n    exports: [TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule, MatInput, MatTextareaAutosize],\n    providers: [ErrorStateMatcher]\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, MatTextareaAutosize, getMatInputUnsupportedTypeError };","map":{"version":3,"names":["CdkTextareaAutosize","AutofillMonitor","TextFieldModule","Directive","Input","InjectionToken","ElementRef","Optional","Self","Inject","NgZone","HostListener","NgModule","coerceBooleanProperty","getSupportedInputTypes","Platform","NgControl","NgForm","FormGroupDirective","mixinErrorState","ErrorStateMatcher","MatCommonModule","MatFormFieldControl","MatFormField","MAT_FORM_FIELD","MatFormFieldModule","Subject","MatTextareaAutosize","matAutosizeMinRows","minRows","value","matAutosizeMaxRows","maxRows","matAutosize","enabled","matTextareaAutosize","decorators","type","args","selector","exportAs","inputs","host","propDecorators","getMatInputUnsupportedTypeError","Error","MAT_INPUT_VALUE_ACCESSOR","MAT_INPUT_INVALID_TYPES","nextUniqueId","MatInputBase","constructor","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatInputMixinBase","MatInput","_elementRef","_platform","inputValueAccessor","_autofillMonitor","ngZone","_formField","_uid","focused","stateChanges","controlType","autofilled","_disabled","_required","_type","_readonly","_neverEmptyInputTypes","filter","t","has","element","nativeElement","nodeName","toLowerCase","_inputValueAccessor","_previousNativeValue","id","IOS","runOutsideAngular","addEventListener","event","el","target","selectionStart","selectionEnd","setSelectionRange","_isServer","isBrowser","_isNativeSelect","_isTextarea","multiple","disabled","next","_id","required","_validateType","readonly","ngAfterViewInit","monitor","subscribe","isAutofilled","ngOnChanges","ngOnDestroy","complete","stopMonitoring","ngDoCheck","updateErrorState","_dirtyCheckNativeValue","_dirtyCheckPlaceholder","focus","options","_focusChanged","isFocused","_onInput","_a","_b","placeholder","_hideControlPlaceholder","call","_previousPlaceholder","setAttribute","removeAttribute","newValue","indexOf","ngDevMode","_isNeverEmpty","_isBadInput","validity","badInput","empty","shouldLabelFloat","selectElement","firstOption","selectedIndex","label","setDescribedByIds","ids","length","join","onContainerClick","providers","provide","useExisting","ctorParameters","undefined","errorStateMatcher","userAriaDescribedBy","MatInputModule","declarations","imports","exports"],"sources":["D:/alodelivery test/node_modules/@angular/material/fesm2015/input.js"],"sourcesContent":["import { CdkTextareaAutosize, AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport { Directive, Input, InjectionToken, ElementRef, Optional, Self, Inject, NgZone, HostListener, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@angular/cdk/platform';\nimport { NgControl, NgForm, FormGroupDirective } from '@angular/forms';\nimport { mixinErrorState, ErrorStateMatcher, MatCommonModule } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormField, MAT_FORM_FIELD, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\nclass MatTextareaAutosize extends CdkTextareaAutosize {\n    get matAutosizeMinRows() { return this.minRows; }\n    set matAutosizeMinRows(value) { this.minRows = value; }\n    get matAutosizeMaxRows() { return this.maxRows; }\n    set matAutosizeMaxRows(value) { this.maxRows = value; }\n    get matAutosize() { return this.enabled; }\n    set matAutosize(value) { this.enabled = value; }\n    get matTextareaAutosize() { return this.enabled; }\n    set matTextareaAutosize(value) { this.enabled = value; }\n}\nMatTextareaAutosize.decorators = [\n    { type: Directive, args: [{\n                selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n                exportAs: 'matTextareaAutosize',\n                inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n                host: {\n                    'class': 'cdk-textarea-autosize mat-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1',\n                },\n            },] }\n];\nMatTextareaAutosize.propDecorators = {\n    matAutosizeMinRows: [{ type: Input }],\n    matAutosizeMaxRows: [{ type: Input }],\n    matAutosize: [{ type: Input, args: ['mat-autosize',] }],\n    matTextareaAutosize: [{ type: Input }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\nlet nextUniqueId = 0;\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nclass MatInputBase {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /** @docs-private */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nconst _MatInputMixinBase = mixinErrorState(MatInputBase);\n/** Directive that allows a native input to work inside a `MatFormField`. */\nclass MatInput extends _MatInputMixinBase {\n    constructor(_elementRef, _platform, \n    /** @docs-private */\n    ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone, \n    // TODO: Remove this once the legacy appearance has been removed. We only need\n    // to inject the form-field for determining whether the placeholder has been promoted.\n    _formField) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this.ngControl = ngControl;\n        this._autofillMonitor = _autofillMonitor;\n        this._formField = _formField;\n        this._uid = `mat-input-${nextUniqueId++}`;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.focused = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-input';\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.autofilled = false;\n        this._disabled = false;\n        this._required = false;\n        this._type = 'text';\n        this._readonly = false;\n        this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week'\n        ].filter(t => getSupportedInputTypes().has(t));\n        const element = this._elementRef.nativeElement;\n        const nodeName = element.nodeName.toLowerCase();\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || element;\n        this._previousNativeValue = this.value;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (_platform.IOS) {\n            ngZone.runOutsideAngular(() => {\n                _elementRef.nativeElement.addEventListener('keyup', (event) => {\n                    const el = event.target;\n                    // Note: We specifically check for 0, rather than `!el.selectionStart`, because the two\n                    // indicate different things. If the value is 0, it means that the caret is at the start\n                    // of the input, whereas a value of `null` means that the input doesn't support\n                    // manipulating the selection range. Inputs that don't support setting the selection range\n                    // will throw an error so we want to avoid calling `setSelectionRange` on them. See:\n                    // https://html.spec.whatwg.org/multipage/input.html#do-not-apply\n                    if (!el.value && el.selectionStart === 0 && el.selectionEnd === 0) {\n                        // Note: Just setting `0, 0` doesn't fix the issue. Setting\n                        // `1, 1` fixes it for the first time that you type text and\n                        // then hold delete. Toggling to `1, 1` and then back to\n                        // `0, 0` seems to completely fix it.\n                        el.setSelectionRange(1, 1);\n                        el.setSelectionRange(0, 0);\n                    }\n                });\n            });\n        }\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeSelect = nodeName === 'select';\n        this._isTextarea = nodeName === 'textarea';\n        if (this._isNativeSelect) {\n            this.controlType = element.multiple ? 'mat-native-select-multiple' :\n                'mat-native-select';\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() { return this._id; }\n    set id(value) { this._id = value || this._uid; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() { return this._required; }\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /** Input type of the element. */\n    get type() { return this._type; }\n    set type(value) {\n        this._type = value || 'text';\n        this._validateType();\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() { return this._inputValueAccessor.value; }\n    set value(value) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n    /** Whether the element is readonly. */\n    get readonly() { return this._readonly; }\n    set readonly(value) { this._readonly = coerceBooleanProperty(value); }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n                this.autofilled = event.isAutofilled;\n                this.stateChanges.next();\n            });\n        }\n    }\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n        // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n        // present or not depends on a query which is prone to \"changed after checked\" errors.\n        this._dirtyCheckPlaceholder();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    /** Callback for the cases where the focused state of the input changes. */\n    // tslint:disable:no-host-decorator-in-concrete\n    // tslint:enable:no-host-decorator-in-concrete\n    _focusChanged(isFocused) {\n        if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /** Does some manual dirty checking on the native input `placeholder` attribute. */\n    _dirtyCheckPlaceholder() {\n        var _a, _b;\n        // If we're hiding the native placeholder, it should also be cleared from the DOM, otherwise\n        // screen readers will read it out twice: once from the label and once from the attribute.\n        // TODO: can be removed once we get rid of the `legacy` style for the form field, because it's\n        // the only one that supports promoting the placeholder to a label.\n        const placeholder = ((_b = (_a = this._formField) === null || _a === void 0 ? void 0 : _a._hideControlPlaceholder) === null || _b === void 0 ? void 0 : _b.call(_a)) ? null : this.placeholder;\n        if (placeholder !== this._previousPlaceholder) {\n            const element = this._elementRef.nativeElement;\n            this._previousPlaceholder = placeholder;\n            placeholder ?\n                element.setAttribute('placeholder', placeholder) : element.removeAttribute('placeholder');\n        }\n    }\n    /** Does some manual dirty checking on the native input `value` property. */\n    _dirtyCheckNativeValue() {\n        const newValue = this._elementRef.nativeElement.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n    /** Make sure the input is a supported type. */\n    _validateType() {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    }\n    /** Checks whether the input type is one of the types that are never empty. */\n    _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /** Checks whether the input is invalid based on the native validation. */\n    _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        let validity = this._elementRef.nativeElement.validity;\n        return validity && validity.badInput;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n            !this.autofilled;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        if (this._isNativeSelect) {\n            // For a single-selection `<select>`, the label should float when the selected option has\n            // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n            // overlapping the label with the options.\n            const selectElement = this._elementRef.nativeElement;\n            const firstOption = selectElement.options[0];\n            // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n            // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n            return this.focused || selectElement.multiple || !this.empty ||\n                !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n        }\n        else {\n            return this.focused || !this.empty;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n        if (!this.focused) {\n            this.focus();\n        }\n    }\n}\nMatInput.decorators = [\n    { type: Directive, args: [{\n                selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n                exportAs: 'matInput',\n                host: {\n                    /**\n                     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n                     */\n                    'class': 'mat-input-element mat-form-field-autofill-control',\n                    '[class.mat-input-server]': '_isServer',\n                    // Native input properties that are overwritten by Angular inputs need to be synced with\n                    // the native input element. Otherwise property bindings for those don't work.\n                    '[attr.id]': 'id',\n                    // At the time of writing, we have a lot of customer tests that look up the input based on its\n                    // placeholder. Since we sometimes omit the placeholder attribute from the DOM to prevent screen\n                    // readers from reading it twice, we have to keep it somewhere in the DOM for the lookup.\n                    '[attr.data-placeholder]': 'placeholder',\n                    '[disabled]': 'disabled',\n                    '[required]': 'required',\n                    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n                    // Only mark the input as invalid for assistive technology if it has a value since the\n                    // state usually overlaps with `aria-required` when the input is empty and can be redundant.\n                    '[attr.aria-invalid]': 'errorState && !empty',\n                    '[attr.aria-required]': 'required',\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatInput }],\n            },] }\n];\nMatInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: undefined, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [MAT_INPUT_VALUE_ACCESSOR,] }] },\n    { type: AutofillMonitor },\n    { type: NgZone },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }] }\n];\nMatInput.propDecorators = {\n    disabled: [{ type: Input }],\n    id: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    type: [{ type: Input }],\n    errorStateMatcher: [{ type: Input }],\n    userAriaDescribedBy: [{ type: Input, args: ['aria-describedby',] }],\n    value: [{ type: Input }],\n    readonly: [{ type: Input }],\n    _focusChanged: [{ type: HostListener, args: ['focus', ['true'],] }, { type: HostListener, args: ['blur', ['false'],] }],\n    _onInput: [{ type: HostListener, args: ['input',] }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatInputModule {\n}\nMatInputModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [MatInput, MatTextareaAutosize],\n                imports: [\n                    TextFieldModule,\n                    MatFormFieldModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    TextFieldModule,\n                    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n                    // be used together with `MatFormField`.\n                    MatFormFieldModule,\n                    MatInput,\n                    MatTextareaAutosize,\n                ],\n                providers: [ErrorStateMatcher],\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, MatTextareaAutosize, getMatInputUnsupportedTypeError };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}