{"ast":null,"code":"/**\r\n * FlowDiagramNode module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Container } from \"../../core/Container\";\nimport { visualProperties } from \"../../core/Sprite\";\nimport { List } from \"../../core/utils/List\";\nimport { registry } from \"../../core/Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $string from \"../../core/utils/String\";\nimport * as $order from \"../../core/utils/Order\";\nimport * as $number from \"../../core/utils/Number\";\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\nimport * as $object from \"../../core/utils/Object\";\nimport { LegendSettings } from \"../Legend\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Creates a node in a Flow Diagram.\r\n *\r\n * A Flow node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[FlowLink]] elements.\r\n *\r\n * @see {@link IFlowDiagramNodeEvents} for a list of available events\r\n * @see {@link IFlowDiagramNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\nvar FlowDiagramNode = /** @class */function (_super) {\n  __extends(FlowDiagramNode, _super);\n  /**\r\n   * Constructor\r\n   */\n  function FlowDiagramNode() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Settings for the appearance of the related legend items.\r\n     */\n    _this.legendSettings = new LegendSettings();\n    _this.className = \"FlowDiagramNode\";\n    _this.isMeasured = false;\n    // TODO can this be removed ?\n    new InterfaceColorSet();\n    _this.draggable = true;\n    _this.inert = true;\n    _this.setStateOnChildren = true;\n    _this.events.on(\"positionchanged\", _this.invalidateLinks, _this, false);\n    _this.events.on(\"sizechanged\", _this.invalidateLinks, _this, false);\n    return _this;\n    //this.events.on(\"hit\", this.handleHit, this, false);\n  }\n  /**\r\n   * @ignore\r\n   */\n  FlowDiagramNode.prototype.handleHit = function (event) {\n    if (this.isHidden || this.isHiding) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  };\n  /**\r\n   * Shows hidden node.\r\n   *\r\n   * @param duration  Duration of reveal animation (ms)\r\n   * @return Animation\r\n   */\n  FlowDiagramNode.prototype.show = function (duration) {\n    var animation = _super.prototype.show.call(this, duration);\n    this.outgoingDataItems.each(function (dataItem) {\n      if (!dataItem.toNode || dataItem.toNode && !dataItem.toNode.isHidden) {\n        dataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\n        dataItem.link.show();\n      }\n    });\n    this.incomingDataItems.each(function (dataItem) {\n      if (!dataItem.fromNode || dataItem.fromNode && !dataItem.fromNode.isHidden) {\n        dataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\n        dataItem.link.show();\n      }\n    });\n    return animation;\n  };\n  /**\r\n   * Hides node.\r\n   *\r\n   * @param duration  Duration of hiding animation (ms)\r\n   * @return Animation\r\n   */\n  FlowDiagramNode.prototype.hide = function (duration) {\n    var animation = _super.prototype.hide.call(this, duration);\n    this.outgoingDataItems.each(function (dataItem) {\n      dataItem.setWorkingValue(\"value\", 0, duration);\n      dataItem.link.hide();\n    });\n    this.incomingDataItems.each(function (dataItem) {\n      dataItem.setWorkingValue(\"value\", 0, duration);\n      dataItem.link.hide();\n    });\n    return animation;\n  };\n  /**\r\n   * Marks node as invalid, for redrawal in the next update cycle.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  FlowDiagramNode.prototype.validate = function () {\n    if (!this.isDisposed()) {\n      _super.prototype.validate.call(this);\n      this.invalidateLinks();\n    }\n  };\n  /**\r\n   * Invalidates all links, attached to this node.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  FlowDiagramNode.prototype.invalidateLinks = function () {\n    var _this = this;\n    this.outgoingDataItems.each(function (dataItem) {\n      var link = dataItem.link;\n      if (link.colorMode == \"fromNode\") {\n        link.fill = link.dataItem.fromNode.color;\n      }\n      if (link.colorMode == \"gradient\") {\n        link.fill = link.gradient;\n        link.stroke = link.gradient;\n        var stop_1 = link.gradient.stops.getIndex(0);\n        if (stop_1) {\n          stop_1.color = _this.color;\n          link.gradient.validate();\n        }\n      }\n    });\n    this.incomingDataItems.each(function (dataItem) {\n      var link = dataItem.link;\n      if (link.colorMode == \"toNode\") {\n        link.fill = link.dataItem.toNode.color;\n      }\n      if (link.colorMode == \"gradient\") {\n        link.fill = link.gradient;\n        link.stroke = link.gradient;\n        var stop_2 = link.gradient.stops.getIndex(1);\n        if (stop_2) {\n          stop_2.color = _this.color;\n          link.gradient.validate();\n        }\n      }\n    });\n  };\n  Object.defineProperty(FlowDiagramNode.prototype, \"incomingDataItems\", {\n    /**\r\n     * List of incoming items (links).\r\n     *\r\n     * @readonly\r\n     * @return Incoming items\r\n     */\n    get: function () {\n      var _this = this;\n      if (!this._incomingDataItems) {\n        var incomingDataItems = new List();\n        incomingDataItems.events.on(\"inserted\", function () {\n          if (_this.chart.sortBy == \"name\") {\n            _this._incomingSorted = $iter.sort(_this._incomingDataItems.iterator(), function (x, y) {\n              return $string.order(x.fromName, y.fromName);\n            });\n          } else if (_this.chart.sortBy == \"value\") {\n            _this._incomingSorted = $iter.sort(_this._incomingDataItems.iterator(), function (x, y) {\n              return $order.reverse($number.order(x.value, y.value));\n            });\n          } else {\n            _this._incomingSorted = _this._incomingDataItems.iterator();\n          }\n        }, undefined, false);\n        this._incomingDataItems = incomingDataItems;\n      }\n      return this._incomingDataItems;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramNode.prototype, \"outgoingDataItems\", {\n    /**\r\n     * List of outgoing items (links).\r\n     *\r\n     * @readonly\r\n     * @return Outgoing items\r\n     */\n    get: function () {\n      var _this = this;\n      if (!this._outgoingDataItems) {\n        var outgoingDataItems = new List();\n        outgoingDataItems.events.on(\"inserted\", function () {\n          if (_this.chart.sortBy == \"name\") {\n            _this._outgoingSorted = $iter.sort(_this._outgoingDataItems.iterator(), function (x, y) {\n              return $string.order(x.fromName, y.fromName);\n            });\n          } else if (_this.chart.sortBy == \"value\") {\n            _this._outgoingSorted = $iter.sort(_this._outgoingDataItems.iterator(), function (x, y) {\n              return $order.reverse($number.order(x.value, y.value));\n            });\n          } else {\n            _this._outgoingSorted = _this._outgoingDataItems.iterator();\n          }\n        }, undefined, false);\n        this._outgoingDataItems = outgoingDataItems;\n      }\n      return this._outgoingDataItems;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramNode.prototype, \"name\", {\n    /**\r\n     * @return Name\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"name\");\n    },\n    /**\r\n     * A name of the node.\r\n     *\r\n     * @param value  Name\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"name\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramNode.prototype, \"total\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"total\");\n    },\n    /**\r\n     * Sum of all incoming+outgoing link values\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"total\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramNode.prototype, \"totalIncoming\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"totalIncoming\");\n    },\n    /**\r\n     * Sum of all incomming link values.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"totalIncoming\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramNode.prototype, \"totalOutgoing\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"totalOutgoing\");\n    },\n    /**\r\n     * Sum of all outgoing link values.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"totalOutgoing\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FlowDiagramNode.prototype, \"color\", {\n    /**\r\n     * @return Color\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"color\");\n    },\n    /**\r\n     * Node's color.\r\n     *\r\n     * @param value  Color\r\n     */\n    set: function (value) {\n      this.setColorProperty(\"color\", value);\n      if (this._background) {\n        this._background.fill = value;\n      }\n      this.fill = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates elements in related legend container, that mimics the look of this\r\n   * Series.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param marker  Legend item container\r\n   */\n  FlowDiagramNode.prototype.createLegendMarker = function (marker) {\n    var w = marker.pixelWidth;\n    var h = marker.pixelHeight;\n    marker.removeChildren();\n    var column = marker.createChild(RoundedRectangle);\n    column.shouldClone = false;\n    $object.copyProperties(this, column, visualProperties);\n    column.stroke = this.fill;\n    column.copyFrom(this);\n    column.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\n    column.width = w;\n    column.height = h;\n    var legendDataItem = marker.dataItem;\n    legendDataItem.color = column.fill;\n    legendDataItem.colorOrig = column.fill;\n  };\n  Object.defineProperty(FlowDiagramNode.prototype, \"legendDataItem\", {\n    /**\r\n     * @return Data item\r\n     */\n    get: function () {\n      return this._legendDataItem;\n    },\n    /**\r\n     * Legend data item that corresponds to this series.\r\n     *\r\n     * @param value  Data item\r\n     */\n    set: function (value) {\n      this._legendDataItem = value;\n      this._legendDataItem.itemContainer.deepInvalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return FlowDiagramNode;\n}(Container);\nexport { FlowDiagramNode };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"FlowDiagramNode\"] = FlowDiagramNode;","map":{"version":3,"names":["__extends","Container","visualProperties","List","registry","InterfaceColorSet","$iter","$string","$order","$number","RoundedRectangle","$object","LegendSettings","FlowDiagramNode","_super","_this","call","legendSettings","className","isMeasured","draggable","inert","setStateOnChildren","events","on","invalidateLinks","prototype","handleHit","event","isHidden","isHiding","show","hide","duration","animation","outgoingDataItems","each","dataItem","toNode","setWorkingValue","getValue","link","incomingDataItems","fromNode","validate","isDisposed","colorMode","fill","color","gradient","stroke","stop_1","stops","getIndex","stop_2","Object","defineProperty","get","_incomingDataItems","chart","sortBy","_incomingSorted","sort","iterator","x","y","order","fromName","reverse","value","undefined","enumerable","configurable","_outgoingDataItems","_outgoingSorted","getPropertyValue","set","setPropertyValue","setColorProperty","_background","createLegendMarker","marker","w","pixelWidth","h","pixelHeight","removeChildren","column","createChild","shouldClone","copyProperties","copyFrom","padding","width","height","legendDataItem","colorOrig","_legendDataItem","itemContainer","deepInvalidate","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/charts/elements/FlowDiagramNode.js"],"sourcesContent":["/**\r\n * FlowDiagramNode module\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../../core/Container\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $string from \"../../core/utils/String\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { LegendSettings } from \"../Legend\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a node in a Flow Diagram.\r\n *\r\n * A Flow node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[FlowLink]] elements.\r\n *\r\n * @see {@link IFlowDiagramNodeEvents} for a list of available events\r\n * @see {@link IFlowDiagramNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar FlowDiagramNode = /** @class */ (function (_super) {\r\n    __extends(FlowDiagramNode, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function FlowDiagramNode() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Settings for the appearance of the related legend items.\r\n         */\r\n        _this.legendSettings = new LegendSettings();\r\n        _this.className = \"FlowDiagramNode\";\r\n        _this.isMeasured = false;\r\n        // TODO can this be removed ?\r\n        new InterfaceColorSet();\r\n        _this.draggable = true;\r\n        _this.inert = true;\r\n        _this.setStateOnChildren = true;\r\n        _this.events.on(\"positionchanged\", _this.invalidateLinks, _this, false);\r\n        _this.events.on(\"sizechanged\", _this.invalidateLinks, _this, false);\r\n        return _this;\r\n        //this.events.on(\"hit\", this.handleHit, this, false);\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    FlowDiagramNode.prototype.handleHit = function (event) {\r\n        if (this.isHidden || this.isHiding) {\r\n            this.show();\r\n        }\r\n        else {\r\n            this.hide();\r\n        }\r\n    };\r\n    /**\r\n     * Shows hidden node.\r\n     *\r\n     * @param duration  Duration of reveal animation (ms)\r\n     * @return Animation\r\n     */\r\n    FlowDiagramNode.prototype.show = function (duration) {\r\n        var animation = _super.prototype.show.call(this, duration);\r\n        this.outgoingDataItems.each(function (dataItem) {\r\n            if (!dataItem.toNode || (dataItem.toNode && !dataItem.toNode.isHidden)) {\r\n                dataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\r\n                dataItem.link.show();\r\n            }\r\n        });\r\n        this.incomingDataItems.each(function (dataItem) {\r\n            if (!dataItem.fromNode || (dataItem.fromNode && !dataItem.fromNode.isHidden)) {\r\n                dataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\r\n                dataItem.link.show();\r\n            }\r\n        });\r\n        return animation;\r\n    };\r\n    /**\r\n     * Hides node.\r\n     *\r\n     * @param duration  Duration of hiding animation (ms)\r\n     * @return Animation\r\n     */\r\n    FlowDiagramNode.prototype.hide = function (duration) {\r\n        var animation = _super.prototype.hide.call(this, duration);\r\n        this.outgoingDataItems.each(function (dataItem) {\r\n            dataItem.setWorkingValue(\"value\", 0, duration);\r\n            dataItem.link.hide();\r\n        });\r\n        this.incomingDataItems.each(function (dataItem) {\r\n            dataItem.setWorkingValue(\"value\", 0, duration);\r\n            dataItem.link.hide();\r\n        });\r\n        return animation;\r\n    };\r\n    /**\r\n     * Marks node as invalid, for redrawal in the next update cycle.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    FlowDiagramNode.prototype.validate = function () {\r\n        if (!this.isDisposed()) {\r\n            _super.prototype.validate.call(this);\r\n            this.invalidateLinks();\r\n        }\r\n    };\r\n    /**\r\n     * Invalidates all links, attached to this node.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    FlowDiagramNode.prototype.invalidateLinks = function () {\r\n        var _this = this;\r\n        this.outgoingDataItems.each(function (dataItem) {\r\n            var link = dataItem.link;\r\n            if (link.colorMode == \"fromNode\") {\r\n                link.fill = link.dataItem.fromNode.color;\r\n            }\r\n            if (link.colorMode == \"gradient\") {\r\n                link.fill = link.gradient;\r\n                link.stroke = link.gradient;\r\n                var stop_1 = link.gradient.stops.getIndex(0);\r\n                if (stop_1) {\r\n                    stop_1.color = _this.color;\r\n                    link.gradient.validate();\r\n                }\r\n            }\r\n        });\r\n        this.incomingDataItems.each(function (dataItem) {\r\n            var link = dataItem.link;\r\n            if (link.colorMode == \"toNode\") {\r\n                link.fill = link.dataItem.toNode.color;\r\n            }\r\n            if (link.colorMode == \"gradient\") {\r\n                link.fill = link.gradient;\r\n                link.stroke = link.gradient;\r\n                var stop_2 = link.gradient.stops.getIndex(1);\r\n                if (stop_2) {\r\n                    stop_2.color = _this.color;\r\n                    link.gradient.validate();\r\n                }\r\n            }\r\n        });\r\n    };\r\n    Object.defineProperty(FlowDiagramNode.prototype, \"incomingDataItems\", {\r\n        /**\r\n         * List of incoming items (links).\r\n         *\r\n         * @readonly\r\n         * @return Incoming items\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            if (!this._incomingDataItems) {\r\n                var incomingDataItems = new List();\r\n                incomingDataItems.events.on(\"inserted\", function () {\r\n                    if (_this.chart.sortBy == \"name\") {\r\n                        _this._incomingSorted = $iter.sort(_this._incomingDataItems.iterator(), function (x, y) { return $string.order(x.fromName, y.fromName); });\r\n                    }\r\n                    else if (_this.chart.sortBy == \"value\") {\r\n                        _this._incomingSorted = $iter.sort(_this._incomingDataItems.iterator(), function (x, y) { return $order.reverse($number.order(x.value, y.value)); });\r\n                    }\r\n                    else {\r\n                        _this._incomingSorted = _this._incomingDataItems.iterator();\r\n                    }\r\n                }, undefined, false);\r\n                this._incomingDataItems = incomingDataItems;\r\n            }\r\n            return this._incomingDataItems;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramNode.prototype, \"outgoingDataItems\", {\r\n        /**\r\n         * List of outgoing items (links).\r\n         *\r\n         * @readonly\r\n         * @return Outgoing items\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            if (!this._outgoingDataItems) {\r\n                var outgoingDataItems = new List();\r\n                outgoingDataItems.events.on(\"inserted\", function () {\r\n                    if (_this.chart.sortBy == \"name\") {\r\n                        _this._outgoingSorted = $iter.sort(_this._outgoingDataItems.iterator(), function (x, y) { return $string.order(x.fromName, y.fromName); });\r\n                    }\r\n                    else if (_this.chart.sortBy == \"value\") {\r\n                        _this._outgoingSorted = $iter.sort(_this._outgoingDataItems.iterator(), function (x, y) { return $order.reverse($number.order(x.value, y.value)); });\r\n                    }\r\n                    else {\r\n                        _this._outgoingSorted = _this._outgoingDataItems.iterator();\r\n                    }\r\n                }, undefined, false);\r\n                this._outgoingDataItems = outgoingDataItems;\r\n            }\r\n            return this._outgoingDataItems;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramNode.prototype, \"name\", {\r\n        /**\r\n         * @return Name\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"name\");\r\n        },\r\n        /**\r\n         * A name of the node.\r\n         *\r\n         * @param value  Name\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"name\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramNode.prototype, \"total\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"total\");\r\n        },\r\n        /**\r\n         * Sum of all incoming+outgoing link values\r\n         *\r\n         * @param value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"total\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramNode.prototype, \"totalIncoming\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"totalIncoming\");\r\n        },\r\n        /**\r\n         * Sum of all incomming link values.\r\n         *\r\n         * @param value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"totalIncoming\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramNode.prototype, \"totalOutgoing\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"totalOutgoing\");\r\n        },\r\n        /**\r\n         * Sum of all outgoing link values.\r\n         *\r\n         * @param value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"totalOutgoing\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FlowDiagramNode.prototype, \"color\", {\r\n        /**\r\n         * @return Color\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"color\");\r\n        },\r\n        /**\r\n         * Node's color.\r\n         *\r\n         * @param value  Color\r\n         */\r\n        set: function (value) {\r\n            this.setColorProperty(\"color\", value);\r\n            if (this._background) {\r\n                this._background.fill = value;\r\n            }\r\n            this.fill = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates elements in related legend container, that mimics the look of this\r\n     * Series.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param marker  Legend item container\r\n     */\r\n    FlowDiagramNode.prototype.createLegendMarker = function (marker) {\r\n        var w = marker.pixelWidth;\r\n        var h = marker.pixelHeight;\r\n        marker.removeChildren();\r\n        var column = marker.createChild(RoundedRectangle);\r\n        column.shouldClone = false;\r\n        $object.copyProperties(this, column, visualProperties);\r\n        column.stroke = this.fill;\r\n        column.copyFrom(this);\r\n        column.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n        column.width = w;\r\n        column.height = h;\r\n        var legendDataItem = marker.dataItem;\r\n        legendDataItem.color = column.fill;\r\n        legendDataItem.colorOrig = column.fill;\r\n    };\r\n    Object.defineProperty(FlowDiagramNode.prototype, \"legendDataItem\", {\r\n        /**\r\n         * @return Data item\r\n         */\r\n        get: function () {\r\n            return this._legendDataItem;\r\n        },\r\n        /**\r\n         * Legend data item that corresponds to this series.\r\n         *\r\n         * @param value  Data item\r\n         */\r\n        set: function (value) {\r\n            this._legendDataItem = value;\r\n            this._legendDataItem.itemContainer.deepInvalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return FlowDiagramNode;\r\n}(Container));\r\nexport { FlowDiagramNode };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagramNode\"] = FlowDiagramNode;\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,SAAS,QAAQ,OAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,SAAS,QAAQ,sBAAsB;AAChD,SAASC,gBAAgB,QAAQ,mBAAmB;AACpD,SAASC,IAAI,QAAQ,uBAAuB;AAC5C,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,SAASC,iBAAiB,QAAQ,oCAAoC;AACtE,OAAO,KAAKC,KAAK,MAAM,2BAA2B;AAClD,OAAO,KAAKC,OAAO,MAAM,yBAAyB;AAClD,OAAO,KAAKC,MAAM,MAAM,wBAAwB;AAChD,OAAO,KAAKC,OAAO,MAAM,yBAAyB;AAClD,SAASC,gBAAgB,QAAQ,sCAAsC;AACvE,OAAO,KAAKC,OAAO,MAAM,yBAAyB;AAClD,SAASC,cAAc,QAAQ,WAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,eAAe,GAAG,aAAe,UAAUC,MAAM,EAAE;EACnDd,SAAS,CAACa,eAAe,EAAEC,MAAM,CAAC;EAClC;AACJ;AACA;EACI,SAASD,eAAeA,CAAA,EAAG;IACvB,IAAIE,KAAK,GAAGD,MAAM,CAACE,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI;IACrC;AACR;AACA;IACQD,KAAK,CAACE,cAAc,GAAG,IAAIL,cAAc,CAAC,CAAC;IAC3CG,KAAK,CAACG,SAAS,GAAG,iBAAiB;IACnCH,KAAK,CAACI,UAAU,GAAG,KAAK;IACxB;IACA,IAAId,iBAAiB,CAAC,CAAC;IACvBU,KAAK,CAACK,SAAS,GAAG,IAAI;IACtBL,KAAK,CAACM,KAAK,GAAG,IAAI;IAClBN,KAAK,CAACO,kBAAkB,GAAG,IAAI;IAC/BP,KAAK,CAACQ,MAAM,CAACC,EAAE,CAAC,iBAAiB,EAAET,KAAK,CAACU,eAAe,EAAEV,KAAK,EAAE,KAAK,CAAC;IACvEA,KAAK,CAACQ,MAAM,CAACC,EAAE,CAAC,aAAa,EAAET,KAAK,CAACU,eAAe,EAAEV,KAAK,EAAE,KAAK,CAAC;IACnE,OAAOA,KAAK;IACZ;EACJ;EACA;AACJ;AACA;EACIF,eAAe,CAACa,SAAS,CAACC,SAAS,GAAG,UAAUC,KAAK,EAAE;IACnD,IAAI,IAAI,CAACC,QAAQ,IAAI,IAAI,CAACC,QAAQ,EAAE;MAChC,IAAI,CAACC,IAAI,CAAC,CAAC;IACf,CAAC,MACI;MACD,IAAI,CAACC,IAAI,CAAC,CAAC;IACf;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACInB,eAAe,CAACa,SAAS,CAACK,IAAI,GAAG,UAAUE,QAAQ,EAAE;IACjD,IAAIC,SAAS,GAAGpB,MAAM,CAACY,SAAS,CAACK,IAAI,CAACf,IAAI,CAAC,IAAI,EAAEiB,QAAQ,CAAC;IAC1D,IAAI,CAACE,iBAAiB,CAACC,IAAI,CAAC,UAAUC,QAAQ,EAAE;MAC5C,IAAI,CAACA,QAAQ,CAACC,MAAM,IAAKD,QAAQ,CAACC,MAAM,IAAI,CAACD,QAAQ,CAACC,MAAM,CAACT,QAAS,EAAE;QACpEQ,QAAQ,CAACE,eAAe,CAAC,OAAO,EAAEF,QAAQ,CAACG,QAAQ,CAAC,OAAO,CAAC,EAAEP,QAAQ,CAAC;QACvEI,QAAQ,CAACI,IAAI,CAACV,IAAI,CAAC,CAAC;MACxB;IACJ,CAAC,CAAC;IACF,IAAI,CAACW,iBAAiB,CAACN,IAAI,CAAC,UAAUC,QAAQ,EAAE;MAC5C,IAAI,CAACA,QAAQ,CAACM,QAAQ,IAAKN,QAAQ,CAACM,QAAQ,IAAI,CAACN,QAAQ,CAACM,QAAQ,CAACd,QAAS,EAAE;QAC1EQ,QAAQ,CAACE,eAAe,CAAC,OAAO,EAAEF,QAAQ,CAACG,QAAQ,CAAC,OAAO,CAAC,EAAEP,QAAQ,CAAC;QACvEI,QAAQ,CAACI,IAAI,CAACV,IAAI,CAAC,CAAC;MACxB;IACJ,CAAC,CAAC;IACF,OAAOG,SAAS;EACpB,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIrB,eAAe,CAACa,SAAS,CAACM,IAAI,GAAG,UAAUC,QAAQ,EAAE;IACjD,IAAIC,SAAS,GAAGpB,MAAM,CAACY,SAAS,CAACM,IAAI,CAAChB,IAAI,CAAC,IAAI,EAAEiB,QAAQ,CAAC;IAC1D,IAAI,CAACE,iBAAiB,CAACC,IAAI,CAAC,UAAUC,QAAQ,EAAE;MAC5CA,QAAQ,CAACE,eAAe,CAAC,OAAO,EAAE,CAAC,EAAEN,QAAQ,CAAC;MAC9CI,QAAQ,CAACI,IAAI,CAACT,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC;IACF,IAAI,CAACU,iBAAiB,CAACN,IAAI,CAAC,UAAUC,QAAQ,EAAE;MAC5CA,QAAQ,CAACE,eAAe,CAAC,OAAO,EAAE,CAAC,EAAEN,QAAQ,CAAC;MAC9CI,QAAQ,CAACI,IAAI,CAACT,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC;IACF,OAAOE,SAAS;EACpB,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIrB,eAAe,CAACa,SAAS,CAACkB,QAAQ,GAAG,YAAY;IAC7C,IAAI,CAAC,IAAI,CAACC,UAAU,CAAC,CAAC,EAAE;MACpB/B,MAAM,CAACY,SAAS,CAACkB,QAAQ,CAAC5B,IAAI,CAAC,IAAI,CAAC;MACpC,IAAI,CAACS,eAAe,CAAC,CAAC;IAC1B;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIZ,eAAe,CAACa,SAAS,CAACD,eAAe,GAAG,YAAY;IACpD,IAAIV,KAAK,GAAG,IAAI;IAChB,IAAI,CAACoB,iBAAiB,CAACC,IAAI,CAAC,UAAUC,QAAQ,EAAE;MAC5C,IAAII,IAAI,GAAGJ,QAAQ,CAACI,IAAI;MACxB,IAAIA,IAAI,CAACK,SAAS,IAAI,UAAU,EAAE;QAC9BL,IAAI,CAACM,IAAI,GAAGN,IAAI,CAACJ,QAAQ,CAACM,QAAQ,CAACK,KAAK;MAC5C;MACA,IAAIP,IAAI,CAACK,SAAS,IAAI,UAAU,EAAE;QAC9BL,IAAI,CAACM,IAAI,GAAGN,IAAI,CAACQ,QAAQ;QACzBR,IAAI,CAACS,MAAM,GAAGT,IAAI,CAACQ,QAAQ;QAC3B,IAAIE,MAAM,GAAGV,IAAI,CAACQ,QAAQ,CAACG,KAAK,CAACC,QAAQ,CAAC,CAAC,CAAC;QAC5C,IAAIF,MAAM,EAAE;UACRA,MAAM,CAACH,KAAK,GAAGjC,KAAK,CAACiC,KAAK;UAC1BP,IAAI,CAACQ,QAAQ,CAACL,QAAQ,CAAC,CAAC;QAC5B;MACJ;IACJ,CAAC,CAAC;IACF,IAAI,CAACF,iBAAiB,CAACN,IAAI,CAAC,UAAUC,QAAQ,EAAE;MAC5C,IAAII,IAAI,GAAGJ,QAAQ,CAACI,IAAI;MACxB,IAAIA,IAAI,CAACK,SAAS,IAAI,QAAQ,EAAE;QAC5BL,IAAI,CAACM,IAAI,GAAGN,IAAI,CAACJ,QAAQ,CAACC,MAAM,CAACU,KAAK;MAC1C;MACA,IAAIP,IAAI,CAACK,SAAS,IAAI,UAAU,EAAE;QAC9BL,IAAI,CAACM,IAAI,GAAGN,IAAI,CAACQ,QAAQ;QACzBR,IAAI,CAACS,MAAM,GAAGT,IAAI,CAACQ,QAAQ;QAC3B,IAAIK,MAAM,GAAGb,IAAI,CAACQ,QAAQ,CAACG,KAAK,CAACC,QAAQ,CAAC,CAAC,CAAC;QAC5C,IAAIC,MAAM,EAAE;UACRA,MAAM,CAACN,KAAK,GAAGjC,KAAK,CAACiC,KAAK;UAC1BP,IAAI,CAACQ,QAAQ,CAACL,QAAQ,CAAC,CAAC;QAC5B;MACJ;IACJ,CAAC,CAAC;EACN,CAAC;EACDW,MAAM,CAACC,cAAc,CAAC3C,eAAe,CAACa,SAAS,EAAE,mBAAmB,EAAE;IAClE;AACR;AACA;AACA;AACA;AACA;IACQ+B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,IAAI1C,KAAK,GAAG,IAAI;MAChB,IAAI,CAAC,IAAI,CAAC2C,kBAAkB,EAAE;QAC1B,IAAIhB,iBAAiB,GAAG,IAAIvC,IAAI,CAAC,CAAC;QAClCuC,iBAAiB,CAACnB,MAAM,CAACC,EAAE,CAAC,UAAU,EAAE,YAAY;UAChD,IAAIT,KAAK,CAAC4C,KAAK,CAACC,MAAM,IAAI,MAAM,EAAE;YAC9B7C,KAAK,CAAC8C,eAAe,GAAGvD,KAAK,CAACwD,IAAI,CAAC/C,KAAK,CAAC2C,kBAAkB,CAACK,QAAQ,CAAC,CAAC,EAAE,UAAUC,CAAC,EAAEC,CAAC,EAAE;cAAE,OAAO1D,OAAO,CAAC2D,KAAK,CAACF,CAAC,CAACG,QAAQ,EAAEF,CAAC,CAACE,QAAQ,CAAC;YAAE,CAAC,CAAC;UAC9I,CAAC,MACI,IAAIpD,KAAK,CAAC4C,KAAK,CAACC,MAAM,IAAI,OAAO,EAAE;YACpC7C,KAAK,CAAC8C,eAAe,GAAGvD,KAAK,CAACwD,IAAI,CAAC/C,KAAK,CAAC2C,kBAAkB,CAACK,QAAQ,CAAC,CAAC,EAAE,UAAUC,CAAC,EAAEC,CAAC,EAAE;cAAE,OAAOzD,MAAM,CAAC4D,OAAO,CAAC3D,OAAO,CAACyD,KAAK,CAACF,CAAC,CAACK,KAAK,EAAEJ,CAAC,CAACI,KAAK,CAAC,CAAC;YAAE,CAAC,CAAC;UACxJ,CAAC,MACI;YACDtD,KAAK,CAAC8C,eAAe,GAAG9C,KAAK,CAAC2C,kBAAkB,CAACK,QAAQ,CAAC,CAAC;UAC/D;QACJ,CAAC,EAAEO,SAAS,EAAE,KAAK,CAAC;QACpB,IAAI,CAACZ,kBAAkB,GAAGhB,iBAAiB;MAC/C;MACA,OAAO,IAAI,CAACgB,kBAAkB;IAClC,CAAC;IACDa,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFjB,MAAM,CAACC,cAAc,CAAC3C,eAAe,CAACa,SAAS,EAAE,mBAAmB,EAAE;IAClE;AACR;AACA;AACA;AACA;AACA;IACQ+B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,IAAI1C,KAAK,GAAG,IAAI;MAChB,IAAI,CAAC,IAAI,CAAC0D,kBAAkB,EAAE;QAC1B,IAAItC,iBAAiB,GAAG,IAAIhC,IAAI,CAAC,CAAC;QAClCgC,iBAAiB,CAACZ,MAAM,CAACC,EAAE,CAAC,UAAU,EAAE,YAAY;UAChD,IAAIT,KAAK,CAAC4C,KAAK,CAACC,MAAM,IAAI,MAAM,EAAE;YAC9B7C,KAAK,CAAC2D,eAAe,GAAGpE,KAAK,CAACwD,IAAI,CAAC/C,KAAK,CAAC0D,kBAAkB,CAACV,QAAQ,CAAC,CAAC,EAAE,UAAUC,CAAC,EAAEC,CAAC,EAAE;cAAE,OAAO1D,OAAO,CAAC2D,KAAK,CAACF,CAAC,CAACG,QAAQ,EAAEF,CAAC,CAACE,QAAQ,CAAC;YAAE,CAAC,CAAC;UAC9I,CAAC,MACI,IAAIpD,KAAK,CAAC4C,KAAK,CAACC,MAAM,IAAI,OAAO,EAAE;YACpC7C,KAAK,CAAC2D,eAAe,GAAGpE,KAAK,CAACwD,IAAI,CAAC/C,KAAK,CAAC0D,kBAAkB,CAACV,QAAQ,CAAC,CAAC,EAAE,UAAUC,CAAC,EAAEC,CAAC,EAAE;cAAE,OAAOzD,MAAM,CAAC4D,OAAO,CAAC3D,OAAO,CAACyD,KAAK,CAACF,CAAC,CAACK,KAAK,EAAEJ,CAAC,CAACI,KAAK,CAAC,CAAC;YAAE,CAAC,CAAC;UACxJ,CAAC,MACI;YACDtD,KAAK,CAAC2D,eAAe,GAAG3D,KAAK,CAAC0D,kBAAkB,CAACV,QAAQ,CAAC,CAAC;UAC/D;QACJ,CAAC,EAAEO,SAAS,EAAE,KAAK,CAAC;QACpB,IAAI,CAACG,kBAAkB,GAAGtC,iBAAiB;MAC/C;MACA,OAAO,IAAI,CAACsC,kBAAkB;IAClC,CAAC;IACDF,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFjB,MAAM,CAACC,cAAc,CAAC3C,eAAe,CAACa,SAAS,EAAE,MAAM,EAAE;IACrD;AACR;AACA;IACQ+B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACkB,gBAAgB,CAAC,MAAM,CAAC;IACxC,CAAC;IACD;AACR;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAUP,KAAK,EAAE;MAClB,IAAI,CAACQ,gBAAgB,CAAC,MAAM,EAAER,KAAK,EAAE,IAAI,CAAC;IAC9C,CAAC;IACDE,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFjB,MAAM,CAACC,cAAc,CAAC3C,eAAe,CAACa,SAAS,EAAE,OAAO,EAAE;IACtD;AACR;AACA;IACQ+B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACkB,gBAAgB,CAAC,OAAO,CAAC;IACzC,CAAC;IACD;AACR;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAUP,KAAK,EAAE;MAClB,IAAI,CAACQ,gBAAgB,CAAC,OAAO,EAAER,KAAK,EAAE,IAAI,CAAC;IAC/C,CAAC;IACDE,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFjB,MAAM,CAACC,cAAc,CAAC3C,eAAe,CAACa,SAAS,EAAE,eAAe,EAAE;IAC9D;AACR;AACA;IACQ+B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACkB,gBAAgB,CAAC,eAAe,CAAC;IACjD,CAAC;IACD;AACR;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAUP,KAAK,EAAE;MAClB,IAAI,CAACQ,gBAAgB,CAAC,eAAe,EAAER,KAAK,EAAE,IAAI,CAAC;IACvD,CAAC;IACDE,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFjB,MAAM,CAACC,cAAc,CAAC3C,eAAe,CAACa,SAAS,EAAE,eAAe,EAAE;IAC9D;AACR;AACA;IACQ+B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACkB,gBAAgB,CAAC,eAAe,CAAC;IACjD,CAAC;IACD;AACR;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAUP,KAAK,EAAE;MAClB,IAAI,CAACQ,gBAAgB,CAAC,eAAe,EAAER,KAAK,EAAE,IAAI,CAAC;IACvD,CAAC;IACDE,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFjB,MAAM,CAACC,cAAc,CAAC3C,eAAe,CAACa,SAAS,EAAE,OAAO,EAAE;IACtD;AACR;AACA;IACQ+B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACkB,gBAAgB,CAAC,OAAO,CAAC;IACzC,CAAC;IACD;AACR;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAUP,KAAK,EAAE;MAClB,IAAI,CAACS,gBAAgB,CAAC,OAAO,EAAET,KAAK,CAAC;MACrC,IAAI,IAAI,CAACU,WAAW,EAAE;QAClB,IAAI,CAACA,WAAW,CAAChC,IAAI,GAAGsB,KAAK;MACjC;MACA,IAAI,CAACtB,IAAI,GAAGsB,KAAK;IACrB,CAAC;IACDE,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF;AACJ;AACA;AACA;AACA;AACA;AACA;EACI3D,eAAe,CAACa,SAAS,CAACsD,kBAAkB,GAAG,UAAUC,MAAM,EAAE;IAC7D,IAAIC,CAAC,GAAGD,MAAM,CAACE,UAAU;IACzB,IAAIC,CAAC,GAAGH,MAAM,CAACI,WAAW;IAC1BJ,MAAM,CAACK,cAAc,CAAC,CAAC;IACvB,IAAIC,MAAM,GAAGN,MAAM,CAACO,WAAW,CAAC9E,gBAAgB,CAAC;IACjD6E,MAAM,CAACE,WAAW,GAAG,KAAK;IAC1B9E,OAAO,CAAC+E,cAAc,CAAC,IAAI,EAAEH,MAAM,EAAErF,gBAAgB,CAAC;IACtDqF,MAAM,CAACrC,MAAM,GAAG,IAAI,CAACH,IAAI;IACzBwC,MAAM,CAACI,QAAQ,CAAC,IAAI,CAAC;IACrBJ,MAAM,CAACK,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC5BL,MAAM,CAACM,KAAK,GAAGX,CAAC;IAChBK,MAAM,CAACO,MAAM,GAAGV,CAAC;IACjB,IAAIW,cAAc,GAAGd,MAAM,CAAC5C,QAAQ;IACpC0D,cAAc,CAAC/C,KAAK,GAAGuC,MAAM,CAACxC,IAAI;IAClCgD,cAAc,CAACC,SAAS,GAAGT,MAAM,CAACxC,IAAI;EAC1C,CAAC;EACDQ,MAAM,CAACC,cAAc,CAAC3C,eAAe,CAACa,SAAS,EAAE,gBAAgB,EAAE;IAC/D;AACR;AACA;IACQ+B,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACwC,eAAe;IAC/B,CAAC;IACD;AACR;AACA;AACA;AACA;IACQrB,GAAG,EAAE,SAAAA,CAAUP,KAAK,EAAE;MAClB,IAAI,CAAC4B,eAAe,GAAG5B,KAAK;MAC5B,IAAI,CAAC4B,eAAe,CAACC,aAAa,CAACC,cAAc,CAAC,CAAC;IACvD,CAAC;IACD5B,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF,OAAO3D,eAAe;AAC1B,CAAC,CAACZ,SAAS,CAAE;AACb,SAASY,eAAe;AACxB;AACA;AACA;AACA;AACA;AACA;AACAT,QAAQ,CAACgG,iBAAiB,CAAC,iBAAiB,CAAC,GAAGvF,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}