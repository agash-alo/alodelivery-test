{"ast":null,"code":"/**\r\n * Defines Pyramid Series.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { FunnelSeries, FunnelSeriesDataItem } from \"./FunnelSeries\";\nimport { registry } from \"../../core/Registry\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport { percent } from \"../../core/utils/Percent\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n//@todo: sequenced?\n/**\r\n * Defines a [[DataItem]] for [[PyramidSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar PyramidSeriesDataItem = /** @class */function (_super) {\n  __extends(PyramidSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function PyramidSeriesDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"PyramidSeriesDataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  return PyramidSeriesDataItem;\n}(FunnelSeriesDataItem);\nexport { PyramidSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPyramidSeriesEvents} for a list of available Events\r\n * @see {@link IPyramidSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\nvar PyramidSeries = /** @class */function (_super) {\n  __extends(PyramidSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n  function PyramidSeries() {\n    var _this = _super.call(this) || this;\n    _this.className = \"PyramidSeries\";\n    _this.topWidth = percent(0);\n    _this.bottomWidth = percent(100);\n    _this.pyramidHeight = percent(100);\n    _this.valueIs = \"area\";\n    _this.sliceLinks.template.width = 0;\n    _this.sliceLinks.template.height = 0;\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n  PyramidSeries.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Pyramid Series\");\n    }\n  };\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n  PyramidSeries.prototype.createDataItem = function () {\n    return new PyramidSeriesDataItem();\n  };\n  /**\r\n   * (Re)validates the whole series, effectively causing it to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  PyramidSeries.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n    this._nextWidth = undefined;\n  };\n  /**\r\n   * [getNextValue description]\r\n   *\r\n   * @todo Description\r\n   * @param dataItem [description]\r\n   * @return [description]\r\n   */\n  PyramidSeries.prototype.getNextValue = function (dataItem) {\n    var index = dataItem.index;\n    var nextValue = dataItem.getWorkingValue(\"value\");\n    if (index < this.dataItems.length - 1) {\n      var nextItem = this.dataItems.getIndex(index + 1);\n      nextValue = nextItem.getWorkingValue(\"value\");\n    }\n    if (nextValue == 0) {\n      nextValue = 0.000001;\n    }\n    return nextValue;\n  };\n  /**\r\n   * [validateDataElements description]\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   */\n  PyramidSeries.prototype.validateDataElements = function () {\n    var _this = this;\n    var maxWidth = this.slicesContainer.innerWidth;\n    var maxHeight = this.slicesContainer.innerHeight;\n    this.dataItems.each(function (dataItem) {\n      if (dataItem.value > 0) {\n        var relValue = dataItem.getWorkingValue(\"value\") / dataItem.value;\n        var sliceLink = dataItem.sliceLink;\n        if (_this.orientation == \"vertical\") {\n          maxHeight -= sliceLink.pixelHeight * relValue;\n        } else {\n          maxWidth -= sliceLink.pixelWidth * relValue;\n        }\n      }\n    });\n    this._pyramidHeight = $utils.relativeToValue(this.pyramidHeight, maxHeight);\n    this._pyramidWidth = $utils.relativeToValue(this.pyramidHeight, maxWidth);\n    if (this.orientation == \"vertical\") {\n      var y = (maxHeight - this._pyramidHeight) / 2;\n      this.slicesContainer.y = y;\n      this.labelsContainer.y = y;\n      this.ticksContainer.y = y;\n    } else {\n      var x = (maxWidth - this._pyramidWidth) / 2;\n      this.slicesContainer.x = x;\n      this.labelsContainer.x = x;\n      this.ticksContainer.x = x;\n    }\n    _super.prototype.validateDataElements.call(this);\n  };\n  /**\r\n   * [decorateSlice description]\r\n   *\r\n   * @todo Description\r\n   * @param dataItem [description]\r\n   */\n  PyramidSeries.prototype.decorateSlice = function (dataItem) {\n    var sum = this.dataItem.values.value.absoluteSum;\n    if (sum == 0) {\n      return;\n    }\n    var slice = dataItem.slice;\n    var sliceLink = dataItem.sliceLink;\n    var label = dataItem.label;\n    var tick = dataItem.tick;\n    // TODO can this be removed ?\n    this.getNextValue(dataItem);\n    var workingValue = Math.abs(dataItem.getWorkingValue(\"value\"));\n    var pyramidWidth = this._pyramidWidth;\n    var pyramidHeight = this._pyramidHeight;\n    var maxWidth = this.slicesContainer.innerWidth;\n    var maxHeight = this.slicesContainer.innerHeight;\n    var linkWidth = sliceLink.pixelWidth;\n    var linkHeight = sliceLink.pixelHeight;\n    if ((dataItem.value == 0 || dataItem.value == null) && this.ignoreZeroValues) {\n      dataItem.__disabled = true;\n    } else {\n      dataItem.__disabled = false;\n    }\n    if (this.orientation == \"vertical\") {\n      var topWidth = $utils.relativeToValue(this.topWidth, maxWidth);\n      if (!$type.isNumber(this._nextWidth)) {\n        this._nextWidth = topWidth;\n      }\n      var bottomWidth = $utils.relativeToValue(this.bottomWidth, maxWidth);\n      var sliceTopWidth = this._nextWidth;\n      var angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\n      var c = Math.tan(Math.PI / 2 - angle);\n      if (c == 0) {\n        c = 0.00000001;\n      }\n      var sliceHeight = void 0;\n      var sliceBottomWidth = void 0;\n      if (this.valueIs == \"area\") {\n        var totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\n        var square = totalSquare * workingValue / sum;\n        var s = Math.abs(sliceTopWidth * sliceTopWidth - 2 * square * c);\n        sliceHeight = (sliceTopWidth - Math.sqrt(s)) / c;\n        if (sliceHeight > 0) {\n          sliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\n        } else {\n          sliceBottomWidth = sliceTopWidth;\n        }\n      } else {\n        sliceHeight = pyramidHeight * workingValue / sum;\n        sliceBottomWidth = sliceTopWidth - sliceHeight * c;\n      }\n      slice.height = sliceHeight;\n      slice.width = maxWidth;\n      slice.bottomWidth = sliceBottomWidth;\n      slice.topWidth = sliceTopWidth;\n      sliceLink.topWidth = slice.bottomWidth;\n      sliceLink.bottomWidth = slice.bottomWidth;\n      slice.y = this._nextY;\n      //slice.x = maxWidth / 2;\n      if (!this.alignLabels) {\n        label.x = maxWidth / 2;\n      } else {\n        label.x = 0;\n      }\n      label.y = slice.pixelY + slice.pixelHeight * tick.locationY + slice.dy;\n      this._nextY += slice.pixelHeight + linkHeight * workingValue / Math.max(Math.abs(dataItem.value), 0.00000001);\n      sliceLink.y = this._nextY - linkHeight;\n      sliceLink.x = maxWidth / 2;\n    } else {\n      var topWidth = $utils.relativeToValue(this.topWidth, maxHeight);\n      if (!$type.isNumber(this._nextWidth)) {\n        this._nextWidth = topWidth;\n      }\n      var bottomWidth = $utils.relativeToValue(this.bottomWidth, maxHeight);\n      var sliceTopWidth = this._nextWidth;\n      var angle = Math.atan2(pyramidWidth, topWidth - bottomWidth);\n      var c = Math.tan(Math.PI / 2 - angle);\n      if (c == 0) {\n        c = 0.00000001;\n      }\n      var sliceWidth = void 0;\n      var sliceBottomWidth = void 0;\n      if (this.valueIs == \"area\") {\n        var totalSquare = (topWidth + bottomWidth) / 2 * pyramidWidth;\n        var square = totalSquare * workingValue / sum;\n        sliceWidth = (sliceTopWidth - Math.sqrt(sliceTopWidth * sliceTopWidth - 2 * square * c)) / c;\n        sliceBottomWidth = (2 * square - sliceWidth * sliceTopWidth) / sliceWidth;\n      } else {\n        sliceWidth = pyramidWidth * workingValue / sum;\n        sliceBottomWidth = sliceTopWidth - sliceWidth * c;\n      }\n      slice.width = sliceWidth;\n      slice.height = maxHeight;\n      slice.bottomWidth = sliceBottomWidth;\n      slice.topWidth = sliceTopWidth;\n      sliceLink.topWidth = slice.bottomWidth;\n      sliceLink.bottomWidth = slice.bottomWidth;\n      slice.x = this._nextY;\n      if (!this.alignLabels) {\n        label.y = maxHeight / 2;\n      } else {\n        label.y = this.labelsContainer.measuredHeight;\n      }\n      label.x = slice.pixelX + slice.pixelWidth * tick.locationX + slice.dx;\n      this._nextY += slice.pixelWidth + linkWidth * workingValue / Math.max(Math.abs(dataItem.value), 0.00000001);\n      sliceLink.x = this._nextY - linkWidth;\n      sliceLink.y = maxHeight / 2;\n    }\n    this._nextWidth = slice.bottomWidth;\n  };\n  Object.defineProperty(PyramidSeries.prototype, \"topWidth\", {\n    /**\r\n     * @return {number | Percent}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"topWidth\");\n    },\n    /**\r\n     * Width of the pyramid's tip in pixels or relative (`Percent`).\r\n     *\r\n     * `0%` (default) means the pyramid will be perfectly pointy.\r\n     * `50%` will have a cut off / blunt top that is half the width of the chart.\r\n     * `100%` will take the whole width of the chart.\r\n     *\r\n     * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n     * `100%` and `bottomWidth` to `0%`.\r\n     *\r\n     * @default 0%\r\n     * @param {number | Percent}\r\n     */\n    set: function (value) {\n      if (this.setPercentProperty(\"topWidth\", value, false, false, 10, false)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PyramidSeries.prototype, \"pyramidHeight\", {\n    /**\r\n     * @return {number | Percent}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"pyramidHeight\");\n    },\n    /**\r\n     * Height of pyramid\r\n     *\r\n     *\r\n     * @default 100%\r\n     * @param {number | Percent}\r\n     */\n    set: function (value) {\n      if (this.setPercentProperty(\"pyramidHeight\", value, false, false, 10, false)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PyramidSeries.prototype, \"bottomWidth\", {\n    /**\r\n     * @return {number | Percent}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"bottomWidth\");\n    },\n    /**\r\n     * Width of the pyramid's bottom (bsae) in pixels or relative (`Percent`).\r\n     *\r\n     * `0%` means the pyramid's botto will be pointy.\r\n     * `50%` will have a cut off / blunt bottom that is half the width of the chart.\r\n     * `100%` (default) will take the whole width of the chart.\r\n     *\r\n     * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n     * `100%` and `bottomWidth` to `0%`.\r\n     *\r\n     * @param {number | Percent}\r\n     */\n    set: function (value) {\n      if (this.setPercentProperty(\"bottomWidth\", value, false, false, 10, false)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PyramidSeries.prototype, \"valueIs\", {\n    /**\r\n     * @return {\"area\" | \"height\"}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"valueIs\");\n    },\n    /**\r\n     * Indicates how slice's value will influence its size.\r\n     *\r\n     * `\"area\"` (default) means that the whole area of the pyramid (counting in\r\n     * modifications by `topWidth` and `bottomWidth`) will be divvied up between\r\n     * slices based on their value.\r\n     *\r\n     * With this setting at `\"area\"` the area of the trapezoids of each slice\r\n     * will represent their value relatively to values of the other slices.\r\n     *\r\n     * This is a correct way to depict \"weight\" of each slice based on their\r\n     * values.\r\n     *\r\n     * `\"height\"` means whole height (as opposed to area) of the pyramid will be\r\n     * divvied up between slices. Actual slice width or area is not counted in.\r\n     *\r\n     * From the data-viz standpoint this does not make a lot of sense, since\r\n     * slices with lesser values might appear more prominent if they are placed\r\n     * towards thick end of the pyramid since their areas will be bigger.\r\n     *\r\n     * @default \"area\"\r\n     * @param {\"area\" | \"height\"}\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"valueIs\", value)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PyramidSeries;\n}(FunnelSeries);\nexport { PyramidSeries };\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"PyramidSeries\"] = PyramidSeries;\nregistry.registeredClasses[\"PyramidSeriesDataItem\"] = PyramidSeriesDataItem;","map":{"version":3,"names":["__extends","FunnelSeries","FunnelSeriesDataItem","registry","$type","$utils","percent","PyramidSeriesDataItem","_super","_this","call","className","applyTheme","PyramidSeries","topWidth","bottomWidth","pyramidHeight","valueIs","sliceLinks","template","width","height","prototype","applyInternalDefaults","hasValue","readerTitle","language","translate","createDataItem","validate","_nextWidth","undefined","getNextValue","dataItem","index","nextValue","getWorkingValue","dataItems","length","nextItem","getIndex","validateDataElements","maxWidth","slicesContainer","innerWidth","maxHeight","innerHeight","each","value","relValue","sliceLink","orientation","pixelHeight","pixelWidth","_pyramidHeight","relativeToValue","_pyramidWidth","y","labelsContainer","ticksContainer","x","decorateSlice","sum","values","absoluteSum","slice","label","tick","workingValue","Math","abs","pyramidWidth","linkWidth","linkHeight","ignoreZeroValues","__disabled","isNumber","sliceTopWidth","angle","atan2","c","tan","PI","sliceHeight","sliceBottomWidth","totalSquare","square","s","sqrt","_nextY","alignLabels","pixelY","locationY","dy","max","sliceWidth","measuredHeight","pixelX","locationX","dx","Object","defineProperty","get","getPropertyValue","set","setPercentProperty","invalidate","enumerable","configurable","setPropertyValue","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/charts/series/PyramidSeries.js"],"sourcesContent":["/**\r\n * Defines Pyramid Series.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FunnelSeries, FunnelSeriesDataItem } from \"./FunnelSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n//@todo: sequenced?\r\n/**\r\n * Defines a [[DataItem]] for [[PyramidSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar PyramidSeriesDataItem = /** @class */ (function (_super) {\r\n    __extends(PyramidSeriesDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PyramidSeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PyramidSeriesDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return PyramidSeriesDataItem;\r\n}(FunnelSeriesDataItem));\r\nexport { PyramidSeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPyramidSeriesEvents} for a list of available Events\r\n * @see {@link IPyramidSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nvar PyramidSeries = /** @class */ (function (_super) {\r\n    __extends(PyramidSeries, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PyramidSeries() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PyramidSeries\";\r\n        _this.topWidth = percent(0);\r\n        _this.bottomWidth = percent(100);\r\n        _this.pyramidHeight = percent(100);\r\n        _this.valueIs = \"area\";\r\n        _this.sliceLinks.template.width = 0;\r\n        _this.sliceLinks.template.height = 0;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    PyramidSeries.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Pyramid Series\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return Data Item\r\n     */\r\n    PyramidSeries.prototype.createDataItem = function () {\r\n        return new PyramidSeriesDataItem();\r\n    };\r\n    /**\r\n     * (Re)validates the whole series, effectively causing it to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    PyramidSeries.prototype.validate = function () {\r\n        _super.prototype.validate.call(this);\r\n        this._nextWidth = undefined;\r\n    };\r\n    /**\r\n     * [getNextValue description]\r\n     *\r\n     * @todo Description\r\n     * @param dataItem [description]\r\n     * @return [description]\r\n     */\r\n    PyramidSeries.prototype.getNextValue = function (dataItem) {\r\n        var index = dataItem.index;\r\n        var nextValue = dataItem.getWorkingValue(\"value\");\r\n        if (index < this.dataItems.length - 1) {\r\n            var nextItem = this.dataItems.getIndex(index + 1);\r\n            nextValue = nextItem.getWorkingValue(\"value\");\r\n        }\r\n        if (nextValue == 0) {\r\n            nextValue = 0.000001;\r\n        }\r\n        return nextValue;\r\n    };\r\n    /**\r\n     * [validateDataElements description]\r\n     *\r\n     * @todo Description\r\n     * @ignore Exclude from docs\r\n     */\r\n    PyramidSeries.prototype.validateDataElements = function () {\r\n        var _this = this;\r\n        var maxWidth = this.slicesContainer.innerWidth;\r\n        var maxHeight = this.slicesContainer.innerHeight;\r\n        this.dataItems.each(function (dataItem) {\r\n            if (dataItem.value > 0) {\r\n                var relValue = dataItem.getWorkingValue(\"value\") / dataItem.value;\r\n                var sliceLink = dataItem.sliceLink;\r\n                if (_this.orientation == \"vertical\") {\r\n                    maxHeight -= (sliceLink.pixelHeight * relValue);\r\n                }\r\n                else {\r\n                    maxWidth -= (sliceLink.pixelWidth * relValue);\r\n                }\r\n            }\r\n        });\r\n        this._pyramidHeight = $utils.relativeToValue(this.pyramidHeight, maxHeight);\r\n        this._pyramidWidth = $utils.relativeToValue(this.pyramidHeight, maxWidth);\r\n        if (this.orientation == \"vertical\") {\r\n            var y = (maxHeight - this._pyramidHeight) / 2;\r\n            this.slicesContainer.y = y;\r\n            this.labelsContainer.y = y;\r\n            this.ticksContainer.y = y;\r\n        }\r\n        else {\r\n            var x = (maxWidth - this._pyramidWidth) / 2;\r\n            this.slicesContainer.x = x;\r\n            this.labelsContainer.x = x;\r\n            this.ticksContainer.x = x;\r\n        }\r\n        _super.prototype.validateDataElements.call(this);\r\n    };\r\n    /**\r\n     * [decorateSlice description]\r\n     *\r\n     * @todo Description\r\n     * @param dataItem [description]\r\n     */\r\n    PyramidSeries.prototype.decorateSlice = function (dataItem) {\r\n        var sum = this.dataItem.values.value.absoluteSum;\r\n        if (sum == 0) {\r\n            return;\r\n        }\r\n        var slice = dataItem.slice;\r\n        var sliceLink = dataItem.sliceLink;\r\n        var label = dataItem.label;\r\n        var tick = dataItem.tick;\r\n        // TODO can this be removed ?\r\n        this.getNextValue(dataItem);\r\n        var workingValue = Math.abs(dataItem.getWorkingValue(\"value\"));\r\n        var pyramidWidth = this._pyramidWidth;\r\n        var pyramidHeight = this._pyramidHeight;\r\n        var maxWidth = this.slicesContainer.innerWidth;\r\n        var maxHeight = this.slicesContainer.innerHeight;\r\n        var linkWidth = sliceLink.pixelWidth;\r\n        var linkHeight = sliceLink.pixelHeight;\r\n        if ((dataItem.value == 0 || dataItem.value == null) && this.ignoreZeroValues) {\r\n            dataItem.__disabled = true;\r\n        }\r\n        else {\r\n            dataItem.__disabled = false;\r\n        }\r\n        if (this.orientation == \"vertical\") {\r\n            var topWidth = $utils.relativeToValue(this.topWidth, maxWidth);\r\n            if (!$type.isNumber(this._nextWidth)) {\r\n                this._nextWidth = topWidth;\r\n            }\r\n            var bottomWidth = $utils.relativeToValue(this.bottomWidth, maxWidth);\r\n            var sliceTopWidth = this._nextWidth;\r\n            var angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\r\n            var c = Math.tan(Math.PI / 2 - angle);\r\n            if (c == 0) {\r\n                c = 0.00000001;\r\n            }\r\n            var sliceHeight = void 0;\r\n            var sliceBottomWidth = void 0;\r\n            if (this.valueIs == \"area\") {\r\n                var totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\r\n                var square = totalSquare * workingValue / sum;\r\n                var s = Math.abs(sliceTopWidth * sliceTopWidth - 2 * square * c);\r\n                sliceHeight = (sliceTopWidth - Math.sqrt(s)) / c;\r\n                if (sliceHeight > 0) {\r\n                    sliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\r\n                }\r\n                else {\r\n                    sliceBottomWidth = sliceTopWidth;\r\n                }\r\n            }\r\n            else {\r\n                sliceHeight = pyramidHeight * workingValue / sum;\r\n                sliceBottomWidth = sliceTopWidth - sliceHeight * c;\r\n            }\r\n            slice.height = sliceHeight;\r\n            slice.width = maxWidth;\r\n            slice.bottomWidth = sliceBottomWidth;\r\n            slice.topWidth = sliceTopWidth;\r\n            sliceLink.topWidth = slice.bottomWidth;\r\n            sliceLink.bottomWidth = slice.bottomWidth;\r\n            slice.y = this._nextY;\r\n            //slice.x = maxWidth / 2;\r\n            if (!this.alignLabels) {\r\n                label.x = maxWidth / 2;\r\n            }\r\n            else {\r\n                label.x = 0;\r\n            }\r\n            label.y = slice.pixelY + slice.pixelHeight * tick.locationY + slice.dy;\r\n            this._nextY += slice.pixelHeight + linkHeight * workingValue / Math.max(Math.abs(dataItem.value), 0.00000001);\r\n            sliceLink.y = this._nextY - linkHeight;\r\n            sliceLink.x = maxWidth / 2;\r\n        }\r\n        else {\r\n            var topWidth = $utils.relativeToValue(this.topWidth, maxHeight);\r\n            if (!$type.isNumber(this._nextWidth)) {\r\n                this._nextWidth = topWidth;\r\n            }\r\n            var bottomWidth = $utils.relativeToValue(this.bottomWidth, maxHeight);\r\n            var sliceTopWidth = this._nextWidth;\r\n            var angle = Math.atan2(pyramidWidth, topWidth - bottomWidth);\r\n            var c = Math.tan(Math.PI / 2 - angle);\r\n            if (c == 0) {\r\n                c = 0.00000001;\r\n            }\r\n            var sliceWidth = void 0;\r\n            var sliceBottomWidth = void 0;\r\n            if (this.valueIs == \"area\") {\r\n                var totalSquare = (topWidth + bottomWidth) / 2 * pyramidWidth;\r\n                var square = totalSquare * workingValue / sum;\r\n                sliceWidth = (sliceTopWidth - Math.sqrt(sliceTopWidth * sliceTopWidth - 2 * square * c)) / c;\r\n                sliceBottomWidth = (2 * square - sliceWidth * sliceTopWidth) / sliceWidth;\r\n            }\r\n            else {\r\n                sliceWidth = pyramidWidth * workingValue / sum;\r\n                sliceBottomWidth = sliceTopWidth - sliceWidth * c;\r\n            }\r\n            slice.width = sliceWidth;\r\n            slice.height = maxHeight;\r\n            slice.bottomWidth = sliceBottomWidth;\r\n            slice.topWidth = sliceTopWidth;\r\n            sliceLink.topWidth = slice.bottomWidth;\r\n            sliceLink.bottomWidth = slice.bottomWidth;\r\n            slice.x = this._nextY;\r\n            if (!this.alignLabels) {\r\n                label.y = maxHeight / 2;\r\n            }\r\n            else {\r\n                label.y = this.labelsContainer.measuredHeight;\r\n            }\r\n            label.x = slice.pixelX + slice.pixelWidth * tick.locationX + slice.dx;\r\n            this._nextY += slice.pixelWidth + linkWidth * workingValue / Math.max(Math.abs(dataItem.value), 0.00000001);\r\n            sliceLink.x = this._nextY - linkWidth;\r\n            sliceLink.y = maxHeight / 2;\r\n        }\r\n        this._nextWidth = slice.bottomWidth;\r\n    };\r\n    Object.defineProperty(PyramidSeries.prototype, \"topWidth\", {\r\n        /**\r\n         * @return {number | Percent}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"topWidth\");\r\n        },\r\n        /**\r\n         * Width of the pyramid's tip in pixels or relative (`Percent`).\r\n         *\r\n         * `0%` (default) means the pyramid will be perfectly pointy.\r\n         * `50%` will have a cut off / blunt top that is half the width of the chart.\r\n         * `100%` will take the whole width of the chart.\r\n         *\r\n         * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n         * `100%` and `bottomWidth` to `0%`.\r\n         *\r\n         * @default 0%\r\n         * @param {number | Percent}\r\n         */\r\n        set: function (value) {\r\n            if (this.setPercentProperty(\"topWidth\", value, false, false, 10, false)) {\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PyramidSeries.prototype, \"pyramidHeight\", {\r\n        /**\r\n         * @return {number | Percent}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"pyramidHeight\");\r\n        },\r\n        /**\r\n         * Height of pyramid\r\n         *\r\n         *\r\n         * @default 100%\r\n         * @param {number | Percent}\r\n         */\r\n        set: function (value) {\r\n            if (this.setPercentProperty(\"pyramidHeight\", value, false, false, 10, false)) {\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PyramidSeries.prototype, \"bottomWidth\", {\r\n        /**\r\n         * @return {number | Percent}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"bottomWidth\");\r\n        },\r\n        /**\r\n         * Width of the pyramid's bottom (bsae) in pixels or relative (`Percent`).\r\n         *\r\n         * `0%` means the pyramid's botto will be pointy.\r\n         * `50%` will have a cut off / blunt bottom that is half the width of the chart.\r\n         * `100%` (default) will take the whole width of the chart.\r\n         *\r\n         * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n         * `100%` and `bottomWidth` to `0%`.\r\n         *\r\n         * @param {number | Percent}\r\n         */\r\n        set: function (value) {\r\n            if (this.setPercentProperty(\"bottomWidth\", value, false, false, 10, false)) {\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PyramidSeries.prototype, \"valueIs\", {\r\n        /**\r\n         * @return {\"area\" | \"height\"}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"valueIs\");\r\n        },\r\n        /**\r\n         * Indicates how slice's value will influence its size.\r\n         *\r\n         * `\"area\"` (default) means that the whole area of the pyramid (counting in\r\n         * modifications by `topWidth` and `bottomWidth`) will be divvied up between\r\n         * slices based on their value.\r\n         *\r\n         * With this setting at `\"area\"` the area of the trapezoids of each slice\r\n         * will represent their value relatively to values of the other slices.\r\n         *\r\n         * This is a correct way to depict \"weight\" of each slice based on their\r\n         * values.\r\n         *\r\n         * `\"height\"` means whole height (as opposed to area) of the pyramid will be\r\n         * divvied up between slices. Actual slice width or area is not counted in.\r\n         *\r\n         * From the data-viz standpoint this does not make a lot of sense, since\r\n         * slices with lesser values might appear more prominent if they are placed\r\n         * towards thick end of the pyramid since their areas will be bigger.\r\n         *\r\n         * @default \"area\"\r\n         * @param {\"area\" | \"height\"}\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"valueIs\", value)) {\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return PyramidSeries;\r\n}(FunnelSeries));\r\nexport { PyramidSeries };\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PyramidSeries\"] = PyramidSeries;\r\nregistry.registeredClasses[\"PyramidSeriesDataItem\"] = PyramidSeriesDataItem;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}