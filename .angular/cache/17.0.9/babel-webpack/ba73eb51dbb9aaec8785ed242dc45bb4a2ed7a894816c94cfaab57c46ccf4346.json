{"ast":null,"code":"/**\r\n * Data Loader is responsible for loading and parsing external data\r\n */\nimport { CSVParser } from \"./CSVParser\";\nimport { JSONParser } from \"./JSONParser\";\nimport { Adapter } from \"../utils/Adapter\";\nimport * as $net from \"../utils/Net\";\nimport * as $array from \"../utils/Array\";\n;\n/**\r\n * Data Loader is responsible for loading and parsing external data.\r\n *\r\n * There is just one instance of DataLoader per system. Unless you have a\r\n * speicific reason, do not instantiate additional instances.\r\n *\r\n * The global instance of Data Loader is accessible via:\r\n *\r\n * ```TypeScript\r\n * am4core.dataLoader;\r\n * ```\r\n * ```JavaScript\r\n * am4core.dataLoader;\r\n * ```\r\n *\r\n * A loading of specific data source is done via [[DataSource]].\r\n *\r\n     Please refer to [[DataSource]] for information how to use it.\r\n *\r\n * @see {@link IDataLoaderAdapters} for a list of available Adapters\r\n */\nvar DataLoader = /** @class */function () {\n  function DataLoader() {\n    /**\r\n     * Adapter.\r\n     */\n    this.adapter = new Adapter(this);\n  }\n  /**\r\n   * Loads a supplied [[DataSource]] or an array of data sources, then calls\r\n   * their respective `parse` methods.\r\n   *\r\n   * @param source  A single data source or an array of multiple of data sources\r\n   */\n  DataLoader.prototype.load = function (source) {\n    var sources = Array.isArray(source) ? source : [source];\n    // Add each Source to the list to be loaded simultaneously\n    var promises = $array.map(sources, function (x) {\n      // Dispatch events\n      x.dispatchImmediately(\"started\");\n      x.dispatchImmediately(\"loadstarted\");\n      return $net.load(x.url, x, x.requestOptions);\n    });\n    // Run all promises in parallel\n    Promise.all(promises).then(function (res) {\n      // Process each loaded source\n      $array.each(res, function (result) {\n        // Get Source\n        var source = result.target;\n        // Dispatch events\n        source.dispatchImmediately(\"loadended\");\n        if (result.error) {\n          if (source.events.isEnabled(\"error\")) {\n            source.events.dispatchImmediately(\"error\", {\n              type: \"error\",\n              code: result.xhr.status,\n              message: source.language.translate(\"Unable to load file: %1\", null, source.url),\n              target: source\n            });\n          }\n        } else {\n          // Initiate parsing of the loaded data\n          source.processData(result.response, result.type);\n        }\n        source.dispatchImmediately(\"ended\");\n      });\n    }).catch(function (res) {\n      if (res.target) {\n        res.target.dispatchImmediately(\"loadended\");\n        if (res.target.events.isEnabled(\"error\")) {\n          res.target.events.dispatchImmediately(\"error\", {\n            type: \"error\",\n            code: res.xhr.status,\n            message: res.target.language.translate(\"Unable to load file: %1\", null, res.target.url),\n            target: res.target\n          });\n        }\n        res.target.dispatchImmediately(\"ended\");\n      }\n    });\n  };\n  /**\r\n   * Instantiates a [[DataParser]] object based on the data type.\r\n   * Built-in parser types are as follows:\r\n   *\r\n   * * \"csv\" or \"text/csv\"\r\n   * * \"json\" or \"application/json\"\r\n   *\r\n   * @param contentType  A format type\r\n   * @return A parser object\r\n   */\n  DataLoader.prototype.getParserByType = function (contentType) {\n    // Let some plugin decide\n    var parser = this.adapter.apply(\"getParserByType\", {\n      parser: null,\n      type: contentType\n    }).parser;\n    if (parser) {\n      return parser;\n    }\n    if (contentType == \"csv\" || contentType == \"text/csv\" || contentType == \"application/vnd.ms-excel\") {\n      return new CSVParser();\n    }\n    if (contentType == \"json\" || contentType == \"application/json\") {\n      return new JSONParser();\n    }\n    return;\n  };\n  /**\r\n   * Tries to determine a parser out of content type and/or actual data.\r\n   *\r\n   * @param data         Data\r\n   * @param contentType  Content-type\r\n   * @return Parser instance\r\n   */\n  DataLoader.prototype.getParserByData = function (data, contentType) {\n    // Let some plugin decide\n    var parser = this.adapter.apply(\"getParserByData\", {\n      parser: null,\n      data: data,\n      type: contentType\n    }).parser;\n    // Check if we have parser from outside code\n    if (!parser) {\n      // No, let's try to figure it out\n      parser = this.getParserByType(contentType);\n      if (parser) {\n        // We're able to figure out parser by content-type\n        return parser;\n      } else if (JSONParser.isJSON(data)) {\n        return this.getParserByType(\"json\");\n      } else if (CSVParser.isCSV(data)) {\n        return this.getParserByType(\"csv\");\n      }\n    }\n    return parser;\n  };\n  return DataLoader;\n}();\nexport { DataLoader };\n/**\r\n * Create instance of Data Loader\r\n */\nexport var dataLoader = new DataLoader();","map":{"version":3,"names":["CSVParser","JSONParser","Adapter","$net","$array","DataLoader","adapter","prototype","load","source","sources","Array","isArray","promises","map","x","dispatchImmediately","url","requestOptions","Promise","all","then","res","each","result","target","error","events","isEnabled","type","code","xhr","status","message","language","translate","processData","response","catch","getParserByType","contentType","parser","apply","getParserByData","data","isJSON","isCSV","dataLoader"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/data/DataLoader.js"],"sourcesContent":["/**\r\n * Data Loader is responsible for loading and parsing external data\r\n */\r\nimport { CSVParser } from \"./CSVParser\";\r\nimport { JSONParser } from \"./JSONParser\";\r\nimport { Adapter } from \"../utils/Adapter\";\r\nimport * as $net from \"../utils/Net\";\r\nimport * as $array from \"../utils/Array\";\r\n;\r\n/**\r\n * Data Loader is responsible for loading and parsing external data.\r\n *\r\n * There is just one instance of DataLoader per system. Unless you have a\r\n * speicific reason, do not instantiate additional instances.\r\n *\r\n * The global instance of Data Loader is accessible via:\r\n *\r\n * ```TypeScript\r\n * am4core.dataLoader;\r\n * ```\r\n * ```JavaScript\r\n * am4core.dataLoader;\r\n * ```\r\n *\r\n * A loading of specific data source is done via [[DataSource]].\r\n *\r\n     Please refer to [[DataSource]] for information how to use it.\r\n *\r\n * @see {@link IDataLoaderAdapters} for a list of available Adapters\r\n */\r\nvar DataLoader = /** @class */ (function () {\r\n    function DataLoader() {\r\n        /**\r\n         * Adapter.\r\n         */\r\n        this.adapter = new Adapter(this);\r\n    }\r\n    /**\r\n     * Loads a supplied [[DataSource]] or an array of data sources, then calls\r\n     * their respective `parse` methods.\r\n     *\r\n     * @param source  A single data source or an array of multiple of data sources\r\n     */\r\n    DataLoader.prototype.load = function (source) {\r\n        var sources = Array.isArray(source) ? source : [source];\r\n        // Add each Source to the list to be loaded simultaneously\r\n        var promises = $array.map(sources, function (x) {\r\n            // Dispatch events\r\n            x.dispatchImmediately(\"started\");\r\n            x.dispatchImmediately(\"loadstarted\");\r\n            return $net.load(x.url, x, x.requestOptions);\r\n        });\r\n        // Run all promises in parallel\r\n        Promise.all(promises).then(function (res) {\r\n            // Process each loaded source\r\n            $array.each(res, function (result) {\r\n                // Get Source\r\n                var source = result.target;\r\n                // Dispatch events\r\n                source.dispatchImmediately(\"loadended\");\r\n                if (result.error) {\r\n                    if (source.events.isEnabled(\"error\")) {\r\n                        source.events.dispatchImmediately(\"error\", {\r\n                            type: \"error\",\r\n                            code: result.xhr.status,\r\n                            message: source.language.translate(\"Unable to load file: %1\", null, source.url),\r\n                            target: source\r\n                        });\r\n                    }\r\n                }\r\n                else {\r\n                    // Initiate parsing of the loaded data\r\n                    source.processData(result.response, result.type);\r\n                }\r\n                source.dispatchImmediately(\"ended\");\r\n            });\r\n        }).catch(function (res) {\r\n            if (res.target) {\r\n                res.target.dispatchImmediately(\"loadended\");\r\n                if (res.target.events.isEnabled(\"error\")) {\r\n                    res.target.events.dispatchImmediately(\"error\", {\r\n                        type: \"error\",\r\n                        code: res.xhr.status,\r\n                        message: res.target.language.translate(\"Unable to load file: %1\", null, res.target.url),\r\n                        target: res.target\r\n                    });\r\n                }\r\n                res.target.dispatchImmediately(\"ended\");\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Instantiates a [[DataParser]] object based on the data type.\r\n     * Built-in parser types are as follows:\r\n     *\r\n     * * \"csv\" or \"text/csv\"\r\n     * * \"json\" or \"application/json\"\r\n     *\r\n     * @param contentType  A format type\r\n     * @return A parser object\r\n     */\r\n    DataLoader.prototype.getParserByType = function (contentType) {\r\n        // Let some plugin decide\r\n        var parser = this.adapter.apply(\"getParserByType\", {\r\n            parser: null,\r\n            type: contentType\r\n        }).parser;\r\n        if (parser) {\r\n            return parser;\r\n        }\r\n        if (contentType == \"csv\" || contentType == \"text/csv\" || contentType == \"application/vnd.ms-excel\") {\r\n            return new CSVParser();\r\n        }\r\n        if (contentType == \"json\" || contentType == \"application/json\") {\r\n            return new JSONParser();\r\n        }\r\n        return;\r\n    };\r\n    /**\r\n     * Tries to determine a parser out of content type and/or actual data.\r\n     *\r\n     * @param data         Data\r\n     * @param contentType  Content-type\r\n     * @return Parser instance\r\n     */\r\n    DataLoader.prototype.getParserByData = function (data, contentType) {\r\n        // Let some plugin decide\r\n        var parser = this.adapter.apply(\"getParserByData\", {\r\n            parser: null,\r\n            data: data,\r\n            type: contentType\r\n        }).parser;\r\n        // Check if we have parser from outside code\r\n        if (!parser) {\r\n            // No, let's try to figure it out\r\n            parser = this.getParserByType(contentType);\r\n            if (parser) {\r\n                // We're able to figure out parser by content-type\r\n                return parser;\r\n            }\r\n            else if (JSONParser.isJSON(data)) {\r\n                return this.getParserByType(\"json\");\r\n            }\r\n            else if (CSVParser.isCSV(data)) {\r\n                return this.getParserByType(\"csv\");\r\n            }\r\n        }\r\n        return parser;\r\n    };\r\n    return DataLoader;\r\n}());\r\nexport { DataLoader };\r\n/**\r\n * Create instance of Data Loader\r\n */\r\nexport var dataLoader = new DataLoader();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}