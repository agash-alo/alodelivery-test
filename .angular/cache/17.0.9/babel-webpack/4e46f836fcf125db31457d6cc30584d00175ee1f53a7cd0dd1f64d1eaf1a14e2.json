{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { ColorModifier } from \"./ColorModifier\";\nimport { registry } from \"../../Registry\";\nimport * as $math from \"../../utils/Math\";\nimport * as $type from \"../../utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * This class can be used to modify linear gradient steps, changing visual\r\n * properties like lightness, brightness, opacity of each set.\r\n *\r\n * It can also set offsets for each gradient step.\r\n *\r\n * E.g. if I want to fill a columns in a column series to be a solid fill from\r\n * top to 80% of height, then gradually fades out, I can use the following\r\n * gradient modifier as a `fillModifier`:\r\n *\r\n * ```TypeScript\r\n * let fillModifier = new am4core.GradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JavaScript\r\n * var fillModifier = new am4core.GradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JSON\r\n * \"series\": [{\r\n *   \"type\": \"ColumnSeries\",\r\n *   \"columns\": {\r\n *     \"fillModifier\": {\r\n *       \"type\": \"GradientModifier\",\r\n *       \"opacities\": [1, 1, 0],\r\n *       \"offsets\": [0, 0.8, 1]\r\n *     }\r\n *   }\r\n * }]\r\n * ```\r\n */\nvar GradientModifier = /** @class */function (_super) {\n  __extends(GradientModifier, _super);\n  /**\r\n   * Constructor.\r\n   */\n  function GradientModifier() {\n    var _this = _super.call(this) || this;\n    _this.lightnesses = [];\n    _this.brightnesses = [];\n    _this.opacities = [];\n    _this.offsets = [];\n    _this.className = \"GradientModifier\";\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(GradientModifier.prototype, \"lightnesses\", {\n    /**\r\n     * @return Lightness values\r\n     */\n    get: function () {\n      return this._lightnesses;\n    },\n    /**\r\n     * An array of lightness values for each step.\r\n     *\r\n     * @param value  Lightness values\r\n     */\n    set: function (value) {\n      this._lightnesses = value;\n      this._brightnesses = [];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GradientModifier.prototype, \"brightnesses\", {\n    /**\r\n     * @return Brightness values\r\n     */\n    get: function () {\n      return this._brightnesses;\n    },\n    /**\r\n     * An array of brightness values for each step.\r\n     *\r\n     * @param value  Brightness values\r\n     */\n    set: function (value) {\n      this._brightnesses = value;\n      this._lightnesses = [];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GradientModifier.prototype, \"opacities\", {\n    /**\r\n     * @return Opacity values\r\n     */\n    get: function () {\n      return this._opacities;\n    },\n    /**\r\n     * An array of opacity values for each step.\r\n     *\r\n     * @param value  Opacity values\r\n     */\n    set: function (value) {\n      this._opacities = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GradientModifier.prototype, \"offsets\", {\n    /**\r\n     * @return Offsets\r\n     */\n    get: function () {\n      return this._offsets;\n    },\n    /**\r\n     * An array of relative position (0-1) for each step.\r\n     *\r\n     * If not set, all steps will be of equal relative length.\r\n     *\r\n     * @param value  Offsets\r\n     */\n    set: function (value) {\n      this._offsets = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Modifies the color based on step setting.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param value  Source color\r\n   * @return A gradient that matches set modification rules\r\n   */\n  GradientModifier.prototype.modify = function (value) {\n    // Clear current gradient\n    this.gradient.clear();\n    // Get step count\n    var count = 0;\n    if (this.opacities) {\n      count = $math.max(count, this.opacities.length);\n    }\n    if (this.lightnesses) {\n      count = $math.max(count, this.lightnesses.length);\n    }\n    if (this.brightnesses) {\n      count = $math.max(count, this.brightnesses.length);\n    }\n    // Init step values\n    var opacity = 1,\n      lightness,\n      brightness;\n    // Apply steps\n    for (var i = 0; i < count; i++) {\n      // Take base color\n      var color = value;\n      // Check if there are any parameters for this step\n      if (this.opacities && $type.isNumber(this.opacities[i])) {\n        opacity = this.opacities[i];\n      }\n      if (this.lightnesses && $type.isNumber(this.lightnesses[i])) {\n        lightness = this.lightnesses[i];\n        brightness = undefined;\n      }\n      if (this.brightnesses && $type.isNumber(this.brightnesses[i])) {\n        brightness = this.brightnesses[i];\n        lightness = undefined;\n      }\n      // Check if we need to brighten/lighten color\n      if ($type.isNumber(brightness)) {\n        color = value.brighten(this.brightnesses[i]);\n      } else if ($type.isNumber(lightness)) {\n        color = value.lighten(this.lightnesses[i]);\n      }\n      // Get offset (it's OK if it's undefined)\n      var offset = this.offsets[i];\n      // Apply step\n      this.gradient.addColor(color, opacity, offset);\n    }\n    return this.gradient;\n  };\n  GradientModifier.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    this._offsets = source.offsets;\n    this._brightnesses = source.brightnesses;\n    this._lightnesses = source.lightnesses;\n    this._opacities = source.opacities;\n  };\n  return GradientModifier;\n}(ColorModifier);\nexport { GradientModifier };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"GradientModifier\"] = GradientModifier;","map":{"version":3,"names":["__extends","ColorModifier","registry","$math","$type","GradientModifier","_super","_this","call","lightnesses","brightnesses","opacities","offsets","className","applyTheme","Object","defineProperty","prototype","get","_lightnesses","set","value","_brightnesses","enumerable","configurable","_opacities","_offsets","modify","gradient","clear","count","max","length","opacity","lightness","brightness","i","color","isNumber","undefined","brighten","lighten","offset","addColor","copyFrom","source","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/rendering/fills/GradientModifier.js"],"sourcesContent":["import { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColorModifier } from \"./ColorModifier\";\r\nimport { registry } from \"../../Registry\";\r\nimport * as $math from \"../../utils/Math\";\r\nimport * as $type from \"../../utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * This class can be used to modify linear gradient steps, changing visual\r\n * properties like lightness, brightness, opacity of each set.\r\n *\r\n * It can also set offsets for each gradient step.\r\n *\r\n * E.g. if I want to fill a columns in a column series to be a solid fill from\r\n * top to 80% of height, then gradually fades out, I can use the following\r\n * gradient modifier as a `fillModifier`:\r\n *\r\n * ```TypeScript\r\n * let fillModifier = new am4core.GradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JavaScript\r\n * var fillModifier = new am4core.GradientModifier();\r\n * fillModifier.opacities = [1, 1, 0];\r\n * fillModifier.offsets = [0, 0.8, 1];\r\n * columnSeries.columns.template.fillModifier = fillModifier;\r\n * ```\r\n * ```JSON\r\n * \"series\": [{\r\n *   \"type\": \"ColumnSeries\",\r\n *   \"columns\": {\r\n *     \"fillModifier\": {\r\n *       \"type\": \"GradientModifier\",\r\n *       \"opacities\": [1, 1, 0],\r\n *       \"offsets\": [0, 0.8, 1]\r\n *     }\r\n *   }\r\n * }]\r\n * ```\r\n */\r\nvar GradientModifier = /** @class */ (function (_super) {\r\n    __extends(GradientModifier, _super);\r\n    /**\r\n     * Constructor.\r\n     */\r\n    function GradientModifier() {\r\n        var _this = _super.call(this) || this;\r\n        _this.lightnesses = [];\r\n        _this.brightnesses = [];\r\n        _this.opacities = [];\r\n        _this.offsets = [];\r\n        _this.className = \"GradientModifier\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(GradientModifier.prototype, \"lightnesses\", {\r\n        /**\r\n         * @return Lightness values\r\n         */\r\n        get: function () {\r\n            return this._lightnesses;\r\n        },\r\n        /**\r\n         * An array of lightness values for each step.\r\n         *\r\n         * @param value  Lightness values\r\n         */\r\n        set: function (value) {\r\n            this._lightnesses = value;\r\n            this._brightnesses = [];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GradientModifier.prototype, \"brightnesses\", {\r\n        /**\r\n         * @return Brightness values\r\n         */\r\n        get: function () {\r\n            return this._brightnesses;\r\n        },\r\n        /**\r\n         * An array of brightness values for each step.\r\n         *\r\n         * @param value  Brightness values\r\n         */\r\n        set: function (value) {\r\n            this._brightnesses = value;\r\n            this._lightnesses = [];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GradientModifier.prototype, \"opacities\", {\r\n        /**\r\n         * @return Opacity values\r\n         */\r\n        get: function () {\r\n            return this._opacities;\r\n        },\r\n        /**\r\n         * An array of opacity values for each step.\r\n         *\r\n         * @param value  Opacity values\r\n         */\r\n        set: function (value) {\r\n            this._opacities = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(GradientModifier.prototype, \"offsets\", {\r\n        /**\r\n         * @return Offsets\r\n         */\r\n        get: function () {\r\n            return this._offsets;\r\n        },\r\n        /**\r\n         * An array of relative position (0-1) for each step.\r\n         *\r\n         * If not set, all steps will be of equal relative length.\r\n         *\r\n         * @param value  Offsets\r\n         */\r\n        set: function (value) {\r\n            this._offsets = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Modifies the color based on step setting.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Source color\r\n     * @return A gradient that matches set modification rules\r\n     */\r\n    GradientModifier.prototype.modify = function (value) {\r\n        // Clear current gradient\r\n        this.gradient.clear();\r\n        // Get step count\r\n        var count = 0;\r\n        if (this.opacities) {\r\n            count = $math.max(count, this.opacities.length);\r\n        }\r\n        if (this.lightnesses) {\r\n            count = $math.max(count, this.lightnesses.length);\r\n        }\r\n        if (this.brightnesses) {\r\n            count = $math.max(count, this.brightnesses.length);\r\n        }\r\n        // Init step values\r\n        var opacity = 1, lightness, brightness;\r\n        // Apply steps\r\n        for (var i = 0; i < count; i++) {\r\n            // Take base color\r\n            var color = value;\r\n            // Check if there are any parameters for this step\r\n            if (this.opacities && $type.isNumber(this.opacities[i])) {\r\n                opacity = this.opacities[i];\r\n            }\r\n            if (this.lightnesses && $type.isNumber(this.lightnesses[i])) {\r\n                lightness = this.lightnesses[i];\r\n                brightness = undefined;\r\n            }\r\n            if (this.brightnesses && $type.isNumber(this.brightnesses[i])) {\r\n                brightness = this.brightnesses[i];\r\n                lightness = undefined;\r\n            }\r\n            // Check if we need to brighten/lighten color\r\n            if ($type.isNumber(brightness)) {\r\n                color = value.brighten(this.brightnesses[i]);\r\n            }\r\n            else if ($type.isNumber(lightness)) {\r\n                color = value.lighten(this.lightnesses[i]);\r\n            }\r\n            // Get offset (it's OK if it's undefined)\r\n            var offset = this.offsets[i];\r\n            // Apply step\r\n            this.gradient.addColor(color, opacity, offset);\r\n        }\r\n        return this.gradient;\r\n    };\r\n    GradientModifier.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this._offsets = source.offsets;\r\n        this._brightnesses = source.brightnesses;\r\n        this._lightnesses = source.lightnesses;\r\n        this._opacities = source.opacities;\r\n    };\r\n    return GradientModifier;\r\n}(ColorModifier));\r\nexport { GradientModifier };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GradientModifier\"] = GradientModifier;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}