{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { AMElement } from \"./AMElement\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Creates an SVG `<g>` element.\r\n *\r\n * SVG groups are used for elements that need more elements just one.\r\n *\r\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Element/g} About `<g>` element\r\n */\nvar Group = /** @class */function (_super) {\n  __extends(Group, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param elementName Element type (should be \"g\")\r\n   */\n  function Group(elementName) {\n    return _super.call(this, elementName) || this;\n  }\n  /**\r\n   * Adds an element to group.\r\n   *\r\n   * This will manipulate DOM. `element` will be physically moved into group.\r\n   *\r\n   * @param element  Element\r\n   */\n  Group.prototype.add = function (element) {\n    if (element) {\n      this.node.appendChild(element.node);\n    }\n  };\n  /**\r\n   * Adds an element to group.\r\n   *\r\n   * This will manipulate DOM. `element` will be physically moved into group.\r\n   *\r\n   * @param element  Element\r\n   */\n  Group.prototype.addToBack = function (element) {\n    if (element) {\n      var first = this.node.childNodes[0];\n      if (first) {\n        if (first != element.node) {\n          this.node.insertBefore(element.node, first);\n        }\n      } else {\n        this.node.appendChild(element.node);\n      }\n    }\n  };\n  /**\r\n   * Removes the `element` from group.\r\n   *\r\n   * Please note that this will not dispose the element itself, it will just\r\n   * remove it from the group.\r\n   *\r\n   * @param element  Element\r\n   */\n  Group.prototype.removeElement = function (element) {\n    // todo: not sure about the speed, need to investigate, maybe it's faster to check if node is a child\n    if (element) {\n      try {\n        if (element.node && element.node.parentNode == this.node) {\n          this.node.removeChild(element.node);\n        }\n      } catch (err) {}\n    }\n  };\n  /**\r\n   * Checks if this group already has the child element added\r\n   *\r\n   * @param element\r\n   * @return {boolean}\r\n   */\n  Group.prototype.hasChild = function (element) {\n    for (var i = 0; i < this.node.childNodes.length; i++) {\n      if (this.node.childNodes[i] == element.node) {\n        return true;\n      }\n    }\n    return false;\n  };\n  Object.defineProperty(Group.prototype, \"content\", {\n    /**\r\n     * @return SVG markup\r\n     */\n    get: function () {\n      return this.node.innerHTML;\n    },\n    /**\r\n     * Content of the group element.\r\n     *\r\n     * Can be used to add a lot of proprietary SVG markup into group.\r\n     *\r\n     * @param value  SVG markup\r\n     */\n    set: function (value) {\n      this.node.innerHTML = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Removes all children from the group.\r\n   */\n  Group.prototype.removeChildren = function () {\n    if (this.node.childNodes) {\n      while (this.node.childNodes.length > 0) {\n        var childNode = this.node.firstChild;\n        if (childNode && childNode.parentNode) {\n          childNode.parentNode.removeChild(childNode);\n        }\n      }\n    }\n  };\n  Group.prototype.removeChildrenByTag = function (tag) {\n    if (this.node.childNodes) {\n      var remove = this.node.getElementsByTagName(tag);\n      for (var i = 0; i < remove.length; i++) {\n        this.node.removeChild(remove[i]);\n      }\n    }\n  };\n  return Group;\n}(AMElement);\nexport { Group };","map":{"version":3,"names":["__extends","AMElement","Group","_super","elementName","call","prototype","add","element","node","appendChild","addToBack","first","childNodes","insertBefore","removeElement","parentNode","removeChild","err","hasChild","i","length","Object","defineProperty","get","innerHTML","set","value","enumerable","configurable","removeChildren","childNode","firstChild","removeChildrenByTag","tag","remove","getElementsByTagName"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/rendering/Group.js"],"sourcesContent":["import { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AMElement } from \"./AMElement\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates an SVG `<g>` element.\r\n *\r\n * SVG groups are used for elements that need more elements just one.\r\n *\r\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Element/g} About `<g>` element\r\n */\r\nvar Group = /** @class */ (function (_super) {\r\n    __extends(Group, _super);\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param elementName Element type (should be \"g\")\r\n     */\r\n    function Group(elementName) {\r\n        return _super.call(this, elementName) || this;\r\n    }\r\n    /**\r\n     * Adds an element to group.\r\n     *\r\n     * This will manipulate DOM. `element` will be physically moved into group.\r\n     *\r\n     * @param element  Element\r\n     */\r\n    Group.prototype.add = function (element) {\r\n        if (element) {\r\n            this.node.appendChild(element.node);\r\n        }\r\n    };\r\n    /**\r\n     * Adds an element to group.\r\n     *\r\n     * This will manipulate DOM. `element` will be physically moved into group.\r\n     *\r\n     * @param element  Element\r\n     */\r\n    Group.prototype.addToBack = function (element) {\r\n        if (element) {\r\n            var first = this.node.childNodes[0];\r\n            if (first) {\r\n                if (first != element.node) {\r\n                    this.node.insertBefore(element.node, first);\r\n                }\r\n            }\r\n            else {\r\n                this.node.appendChild(element.node);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Removes the `element` from group.\r\n     *\r\n     * Please note that this will not dispose the element itself, it will just\r\n     * remove it from the group.\r\n     *\r\n     * @param element  Element\r\n     */\r\n    Group.prototype.removeElement = function (element) {\r\n        // todo: not sure about the speed, need to investigate, maybe it's faster to check if node is a child\r\n        if (element) {\r\n            try {\r\n                if (element.node && element.node.parentNode == this.node) {\r\n                    this.node.removeChild(element.node);\r\n                }\r\n            }\r\n            catch (err) {\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Checks if this group already has the child element added\r\n     *\r\n     * @param element\r\n     * @return {boolean}\r\n     */\r\n    Group.prototype.hasChild = function (element) {\r\n        for (var i = 0; i < this.node.childNodes.length; i++) {\r\n            if (this.node.childNodes[i] == element.node) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    Object.defineProperty(Group.prototype, \"content\", {\r\n        /**\r\n         * @return SVG markup\r\n         */\r\n        get: function () {\r\n            return this.node.innerHTML;\r\n        },\r\n        /**\r\n         * Content of the group element.\r\n         *\r\n         * Can be used to add a lot of proprietary SVG markup into group.\r\n         *\r\n         * @param value  SVG markup\r\n         */\r\n        set: function (value) {\r\n            this.node.innerHTML = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Removes all children from the group.\r\n     */\r\n    Group.prototype.removeChildren = function () {\r\n        if (this.node.childNodes) {\r\n            while (this.node.childNodes.length > 0) {\r\n                var childNode = this.node.firstChild;\r\n                if (childNode && childNode.parentNode) {\r\n                    childNode.parentNode.removeChild(childNode);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Group.prototype.removeChildrenByTag = function (tag) {\r\n        if (this.node.childNodes) {\r\n            var remove = this.node.getElementsByTagName(tag);\r\n            for (var i = 0; i < remove.length; i++) {\r\n                this.node.removeChild(remove[i]);\r\n            }\r\n        }\r\n    };\r\n    return Group;\r\n}(AMElement));\r\nexport { Group };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}