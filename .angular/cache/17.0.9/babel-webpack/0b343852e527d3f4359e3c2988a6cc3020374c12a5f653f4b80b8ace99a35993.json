{"ast":null,"code":"/**\r\n * Functionality for any series-based elements, like Line Series (graphs),\r\n * Pie slice lists, etc.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Component } from \"../../core/Component\";\nimport { Sprite } from \"../../core/Sprite\";\nimport { List, ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { Dictionary, DictionaryDisposer } from \"../../core/utils/Dictionary\";\nimport { DataItem } from \"../../core/DataItem\";\nimport { Container } from \"../../core/Container\";\nimport { Tooltip } from \"../../core/elements/Tooltip\";\nimport { Bullet } from \"../elements/Bullet\";\nimport { LegendSettings } from \"../Legend\";\nimport { options } from \"../../core/Options\";\nimport { Color } from \"../../core/utils/Color\";\nimport { registry } from \"../../core/Registry\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $ease from \"../../core/utils/Ease\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $object from \"../../core/utils/Object\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $colors from \"../../core/utils/Colors\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines a [[DataItem]] for [[Series]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar SeriesDataItem = /** @class */function (_super) {\n  __extends(SeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function SeriesDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"SeriesDataItem\";\n    //@todo Should we make `bullets` list disposable?\n    //this._disposers.push(new DictionaryDisposer(this.bullets));\n    _this.values.value = {};\n    _this.values.value = {};\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(SeriesDataItem.prototype, \"bullets\", {\n    /**\r\n     * A dictionary of data items bullets, where key is uid of a bullet template.\r\n     */\n    get: function () {\n      if (!this._bullets) {\n        this._bullets = new Dictionary();\n        this._disposers.push(new DictionaryDisposer(this._bullets));\n      }\n      return this._bullets;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Destroys this object and all related data.\r\n   */\n  SeriesDataItem.prototype.dispose = function () {\n    this.bullets.clear();\n    _super.prototype.dispose.call(this);\n  };\n  Object.defineProperty(SeriesDataItem.prototype, \"value\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      return this.values.value.value;\n    },\n    /**\r\n     * data items's numeric value.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function (value) {\n      this.setValue(\"value\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return SeriesDataItem;\n}(DataItem);\nexport { SeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines base class for any kind of serial data.\r\n *\r\n * @see {@link ISeriesEvents} for a list of available Events\r\n * @see {@link ISeriesAdapters} for a list of available Adapters\r\n * @todo Separate axis-related stuff to some other class so that MapSeries would not have unrelated stuff\r\n */\nvar Series = /** @class */function (_super) {\n  __extends(Series, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Series() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Should this series excluded from the axis scale calculations?\r\n     *\r\n     * @default false\r\n     */\n    _this._ignoreMinMax = false;\n    /**\r\n     * Should series' bullets?\r\n     *\r\n     * @default true\r\n     */\n    _this._showBullets = true;\n    /**\r\n     * Settings for the appearance of the related legend items.\r\n     */\n    _this.legendSettings = new LegendSettings();\n    /**\r\n     * Lowest overal values by type.\r\n     */\n    _this._tmin = new Dictionary();\n    /**\r\n     * Highest overal values by type.\r\n     */\n    _this._tmax = new Dictionary();\n    /**\r\n     * Lowest values in current selection by type.\r\n     */\n    _this._smin = new Dictionary();\n    /**\r\n     * Highest values in current selection by type.\r\n     */\n    _this._smax = new Dictionary();\n    /**\r\n     * [dataItemsByAxis description]\r\n     *\r\n     * Both by category and date.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n    _this.dataItemsByAxis = new Dictionary();\n    /**\r\n     * Normally series items are focusable using keyboard, so that people can\r\n     * select them with a TAB key. However, if there are a lot of data points on\r\n     * screen it might be long and useless to tab through all o fthem.\r\n     *\r\n     * This is where `skipFocusThreshold` comes in. If there are more items than\r\n     * the value set here, we will not make those focusable and rather let screen\r\n     * reader software rely on the series summary, or authors provide alternative\r\n     * detailed information display, such as HTML table.\r\n     *\r\n     * Different series might have different threshold defaults.\r\n     */\n    _this.skipFocusThreshold = 20;\n    /**\r\n     * Used to indicate if `itemReaderText` was changed \"from the outside\".\r\n     */\n    _this._itemReaderTextChanged = false;\n    /**\r\n     * Most of the series use absolute values. However sometimes various\r\n     * calculated percent values are need, e.g. item's percent representation\r\n     * across all values in series, etc.\r\n     *\r\n     * It's a resource-intensive operation, so it is disabled by default.\r\n     *\r\n     * If you need percents to be calculated, e.g. for showing them in tooltips,\r\n     * or creating 100% stacks, this setting needs to be set to `true`.\r\n     *\r\n     * NOTE: `PieChart`, which relies on slice percentages, has this\r\n     * automatically set to `true`.\r\n     *\r\n     * @default false\r\n     */\n    _this.calculatePercent = false;\n    /**\r\n     * When `calculatePercent` is enabled and data item's percent value is\r\n     * calculated, last item's real value is used instead of its working value.\r\n     *\r\n     * This is done for the animations when last item in series (e.g. slice in\r\n     * a `PieSeries`) is hidden or shown. (if we would use real value, the\r\n     * calculated percent would always be 100%).\r\n     *\r\n     * Sometimes there is a need (e.g. for drill-down Sunburst) to disable this\r\n     * hack by setting `usePercentHack` to `false`.\r\n     *\r\n     * @since 4.9.13\r\n     * @default true\r\n     */\n    _this.usePercentHack = true;\n    /**\r\n     * Specifies if series should be automatically disposed when removing from\r\n     * chart's `series` list.\r\n     *\r\n     * @default true\r\n     */\n    _this.autoDispose = true;\n    /**\r\n     * When chart/series' data is processed, all kinds of derivative values are\r\n     * calculated. E.g. sum, min, max, change, etc. This is a potentially\r\n     * time-consuming operation, especially prominent in data-heavy charts.\r\n     *\r\n     * If your chart does not need those values, and you have a lot of data,\r\n     * setting this to `true` might give a dramatic increase in initial chart\r\n     * load speed.\r\n     *\r\n     * Please note, regular column and line series usage scenarios do not\r\n     * require derivative values. Those come into play only when you do advanced\r\n     * functionality like coloring segments of charts in different colors\r\n     * depending on change between open and close values, have stacked series, or\r\n     * display any of the derived values, like percent, in tooltips or bullets.\r\n     *\r\n     * @default false\r\n     */\n    _this.simplifiedProcessing = false;\n    if (_this.constructor === Series) {\n      throw new Error(\"'Series' cannot be instantiated directly. Please use a specific series type.\");\n    }\n    _this.className = \"Series\";\n    _this.isMeasured = false;\n    _this.layout = \"none\";\n    _this.shouldClone = false;\n    _this.setPropertyValue(\"hidden\", false);\n    _this.axisRanges = new List();\n    _this.axisRanges.events.on(\"inserted\", _this.processAxisRange, _this, false);\n    _this.minBulletDistance = 0; // otherwise we'll have a lot of cases when people won't see bullets and think it's a bug\n    _this.mainContainer = _this.createChild(Container);\n    _this.mainContainer.shouldClone = false;\n    _this.mainContainer.mask = _this.createChild(Sprite);\n    _this._disposers.push(_this.mainContainer);\n    // all bullets should go on top of lines/fills. So we add a separate container for bullets and later set it's parent to chart.bulletsContainer\n    var bulletsContainer = _this.mainContainer.createChild(Container);\n    _this._shouldBeReady.push(bulletsContainer);\n    bulletsContainer.shouldClone = false;\n    bulletsContainer.layout = \"none\";\n    bulletsContainer.virtualParent = _this;\n    _this._disposers.push(bulletsContainer);\n    _this.bulletsContainer = bulletsContainer;\n    _this.tooltip = new Tooltip();\n    _this.tooltip.virtualParent = _this;\n    _this._disposers.push(_this.tooltip);\n    _this.hiddenState.transitionEasing = $ease.cubicIn;\n    // this data item holds sums, averages, etc\n    _this.dataItem = _this.createDataItem();\n    _this._disposers.push(_this.dataItem);\n    _this.dataItem.component = _this;\n    // Apply accessibility\n    _this.role = \"group\";\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * We need this here so that class names can be applied to bullets container.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Series.prototype.applyTheme = function () {\n    _super.prototype.applyTheme.call(this);\n    if (options.autoSetClassName && this.bulletsContainer) {\n      this.bulletsContainer.className = this.className + \"-bullets\";\n      this.bulletsContainer.setClassName();\n    }\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n  Series.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Series\");\n    }\n  };\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n  Series.prototype.createDataItem = function () {\n    return new SeriesDataItem();\n  };\n  Object.defineProperty(Series.prototype, \"chart\", {\n    /**\r\n     * @return Chart\r\n     */\n    get: function () {\n      return this._chart;\n    },\n    /**\r\n     * Chart series is used on.\r\n     *\r\n     * @param value  Chart\r\n     */\n    set: function (value) {\n      this._chart = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Positions bullet.\r\n   *\r\n   * @param bullet  Sprite\r\n   */\n  Series.prototype.positionBullet = function (bullet) {\n    // Placeholder method for extending classes to override.\n  };\n  /**\r\n   * Decorates newly created bullet after it has been instert into the list.\r\n   *\r\n   * @param event  List event\r\n   * @todo investigate why itemReaderText is undefined\r\n   */\n  Series.prototype.processBullet = function (event) {\n    var _this = this;\n    var bullet = event.newValue;\n    bullet.isTemplate = true;\n    // Add accessibility options to bullet\n    // If there are relatively few bullets, make them focusable\n    this.events.once(\"datavalidated\", function (ev) {\n      if (_this.itemsFocusable()) {\n        bullet.focusable = true;\n      }\n    });\n    this.invalidate();\n  };\n  /**\r\n   * removes bullets\r\n   *\r\n   * @param event  List event\r\n   */\n  Series.prototype.removeBullet = function (event) {\n    var bullet = event.oldValue;\n    this.dataItems.each(function (dataItem) {\n      var eachBullet = dataItem.bullets.getKey(bullet.uid);\n      if (eachBullet) {\n        eachBullet.dispose();\n      }\n    });\n    this.invalidate();\n  };\n  /**\r\n   * Validates data items.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Series.prototype.validateDataItems = function () {\n    _super.prototype.validateDataItems.call(this);\n    this.processValues(false);\n  };\n  /**\r\n   * Returns first value for the specific key in the series.\r\n   *\r\n   * @param key  Key\r\n   * @return Value\r\n   * @todo Description\r\n   * @todo Convert to propert object property iterator\r\n   */\n  Series.prototype.getFirstValue = function (key, startIndex) {\n    // find first\n    /*\r\n    return $iter.findMap(this.dataItems.iterator(), (dataItem) => {\r\n        for (let key in dataItem.values) {\r\n            if ($object.hasKey(dataItem.values, key)) {\r\n                let value: number = dataItem.values[key].workingValue;\r\n                if ($type.isNumber(value)) {\r\n                    return value;\r\n                }\r\n            }\r\n        }\r\n          return null;\r\n    });*/\n    //if (startIndex > 0 && startIndex < this.dataItems.length - 1) {\n    //startIndex++;\n    //}\n    for (var i = startIndex; i >= 0; i--) {\n      var dataItem = this.dataItems.getIndex(i);\n      var value = dataItem.getActualWorkingValue(key);\n      if ($type.isNumber(value)) {\n        return value;\n      }\n    }\n    return null;\n  };\n  /**\r\n   * Returns first value for the specific key in the series.\r\n   *\r\n   * @param key  Key\r\n   * @return Value\r\n   * @todo Description\r\n   * @todo Convert to propert object property iterator\r\n   */\n  Series.prototype.getAbsoluteFirstValue = function (key) {\n    for (var i = 0; i < this.dataItems.length; i++) {\n      var dataItem = this.dataItems.getIndex(i);\n      var value = dataItem.values[key].value;\n      if ($type.isNumber(value)) {\n        return value;\n      }\n    }\n    return null;\n  };\n  /**\r\n   * [rangeChangeUpdate description]\r\n   *\r\n   * @todo Description\r\n   */\n  Series.prototype.rangeChangeUpdate = function () {\n    _super.prototype.rangeChangeUpdate.call(this);\n    this.processValues(true);\n  };\n  /**\r\n   * [processValues description]\r\n   *\r\n   * @todo Description\r\n   * @todo Convert to propert object property iterator\r\n   * @param dataItems [description]\r\n   */\n  Series.prototype.processValues = function (working) {\n    var _this = this;\n    if (!this.simplifiedProcessing) {\n      var dataItems = this.dataItems;\n      var count_1 = {};\n      var sum_1 = {};\n      var absoluteSum_1 = {};\n      var low_1 = {};\n      var high_1 = {};\n      var open_1 = {};\n      var close_1 = {};\n      var previous_1 = {};\n      var first_1 = {};\n      var absoluteFirst_1 = {};\n      //let duration: number = 0; // todo: check if series uses selection.change or selection.change.percent and set duration to interpolationduration\n      var startIndex_1 = $math.max(0, this.startIndex);\n      startIndex_1 = $math.min(startIndex_1, this.dataItems.length);\n      var endIndex = $math.min(this.endIndex, this.dataItems.length);\n      if (!$type.isNumber(startIndex_1)) {\n        startIndex_1 = 0;\n      }\n      if (!$type.isNumber(endIndex)) {\n        endIndex = this.dataItems.length;\n      }\n      if (startIndex_1 > 0) {\n        var dataItem_1 = dataItems.getIndex(startIndex_1 - 1);\n        $object.each(dataItem_1.values, function (key, values) {\n          var value = dataItem_1.getActualWorkingValue(key);\n          if ($type.isNumber(value)) {\n            // save previous\n            previous_1[key] = value;\n          }\n        });\n      }\n      var _loop_1 = function (i) {\n        var dataItem_2 = dataItems.getIndex(i);\n        $object.each(dataItem_2.values, function (key, values) {\n          var value = dataItem_2.getActualWorkingValue(key);\n          //if (i >= startIndex && i <= endIndex) { // do not add to count, sum etc if it is not within start/end index\n          if ($type.isNumber(value)) {\n            // count values\n            if (!$type.isNumber(count_1[key])) {\n              count_1[key] = 0;\n            }\n            count_1[key]++;\n            // sum values\n            if (!$type.isNumber(sum_1[key])) {\n              sum_1[key] = 0;\n            }\n            sum_1[key] += value;\n            // absolute sum values\n            if (!$type.isNumber(absoluteSum_1[key])) {\n              absoluteSum_1[key] = 0;\n            }\n            absoluteSum_1[key] += Math.abs(value);\n            // open\n            if (!$type.isNumber(open_1[key])) {\n              open_1[key] = value;\n            }\n            // close\n            close_1[key] = value;\n            // low\n            if (!$type.isNumber(low_1[key])) {\n              low_1[key] = value;\n            } else {\n              if (low_1[key] > value) {\n                low_1[key] = value;\n              }\n            }\n            // high\n            if (!$type.isNumber(high_1[key])) {\n              high_1[key] = value;\n            } else {\n              if (high_1[key] < value) {\n                high_1[key] = value;\n              }\n            }\n            if (!$type.isNumber(first_1[key])) {\n              first_1[key] = _this.getFirstValue(key, startIndex_1);\n            }\n            if (!$type.isNumber(absoluteFirst_1[key])) {\n              absoluteFirst_1[key] = _this.getAbsoluteFirstValue(key);\n            }\n            // change\n            dataItem_2.setCalculatedValue(key, value - first_1[key], \"change\");\n            // change from start percent\n            // will fail if first value is 0\n            dataItem_2.setCalculatedValue(key, (value - first_1[key]) / first_1[key] * 100, \"changePercent\");\n            dataItem_2.setCalculatedValue(key, value - absoluteFirst_1[key], \"startChange\");\n            dataItem_2.setCalculatedValue(key, (value - absoluteFirst_1[key]) / absoluteFirst_1[key] * 100, \"startChangePercent\");\n            // previous change\n            var prevValue = previous_1[key];\n            if (!$type.isNumber(prevValue)) {\n              prevValue = value;\n            }\n            dataItem_2.setCalculatedValue(key, value - prevValue, \"previousChange\");\n            // previous change percent\n            dataItem_2.setCalculatedValue(key, (value - prevValue) / prevValue * 100, \"previousChangePercent\");\n            // save previous\n            previous_1[key] = value;\n          }\n        });\n      };\n      for (var i = startIndex_1; i < endIndex; i++) {\n        _loop_1(i);\n      }\n      if (this.calculatePercent) {\n        var _loop_2 = function (i) {\n          var dataItem_3 = dataItems.getIndex(i);\n          $object.each(dataItem_3.values, function (key) {\n            var ksum = absoluteSum_1[key];\n            var value = dataItem_3.getActualWorkingValue(key);\n            if ($type.isNumber(value)) {\n              if (ksum > 0) {\n                if (_this.usePercentHack) {\n                  // this hack is made in order to make it possible to animate single slice to 0\n                  // if there is only one slice left, percent value is always 100%, so it won't animate\n                  // so we use real value of a slice instead of current value\n                  if (value == ksum) {\n                    ksum = dataItem_3.values[key].value;\n                  }\n                }\n                var percent = value / ksum * 100;\n                dataItem_3.setCalculatedValue(key, percent, \"percent\");\n              } else {\n                dataItem_3.setCalculatedValue(key, 0, \"percent\");\n              }\n            }\n          });\n        };\n        for (var i = startIndex_1; i < endIndex; i++) {\n          _loop_2(i);\n        }\n      }\n      // calculate one before first (cant do that in cycle, as we don't know open yet\n      // when drawing line chart we should draw line to the invisible data point to the left, otherwise the line will always look like it starts from the selected point\n      // so we do startIndex - 1\n      if (startIndex_1 > 0) {\n        var zeroItem_1 = dataItems.getIndex(startIndex_1 - 1);\n        $object.each(zeroItem_1.values, function (key) {\n          var value = zeroItem_1.values[key].value;\n          // change\n          zeroItem_1.setCalculatedValue(key, value - open_1[key], \"change\");\n          // change percent\n          zeroItem_1.setCalculatedValue(key, (value - open_1[key]) / open_1[key] * 100, \"changePercent\");\n        });\n      }\n      // we save various data like sum, average to dataPoint of the series\n      var dataItem_4 = this.dataItem;\n      $object.each(dataItem_4.values, function (key) {\n        dataItem_4.setCalculatedValue(key, sum_1[key], \"sum\");\n        dataItem_4.setCalculatedValue(key, absoluteSum_1[key], \"absoluteSum\");\n        dataItem_4.setCalculatedValue(key, sum_1[key] / count_1[key], \"average\");\n        dataItem_4.setCalculatedValue(key, open_1[key], \"open\");\n        dataItem_4.setCalculatedValue(key, close_1[key], \"close\");\n        dataItem_4.setCalculatedValue(key, low_1[key], \"low\");\n        dataItem_4.setCalculatedValue(key, high_1[key], \"high\");\n        dataItem_4.setCalculatedValue(key, count_1[key], \"count\");\n      });\n    }\n  };\n  /**\r\n   * (Re)validates the whole series, effectively causing it to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Series.prototype.validate = function () {\n    if ($utils.isIE()) {\n      this.filters.clear();\n    }\n    $iter.each(this.axisRanges.iterator(), function (axisRange) {\n      //axisRange.contents.disposeChildren(); // not good for columns, as they are reused\n      //\t\t\taxisRange.appendChildren();\n      axisRange.validate();\n    });\n    _super.prototype.validate.call(this);\n    var bulletsContainer = this.bulletsContainer;\n    bulletsContainer.fill = this.fill;\n    bulletsContainer.stroke = this.stroke;\n    bulletsContainer.x = this.pixelX;\n    bulletsContainer.y = this.pixelY;\n    if (this.bulletsContainer.children.length > 0) {\n      if (this._showBullets) {\n        for (var i = 0; i < this.startIndex; i++) {\n          var dataItem = this.dataItems.getIndex(i);\n          if (dataItem) {\n            dataItem.bullets.each(function (key, bullet) {\n              bullet.__disabled = true;\n            });\n          }\n        }\n        for (var i = this.dataItems.length - 1; i > this.endIndex; i--) {\n          var dataItem = this.dataItems.getIndex(i);\n          if (dataItem) {\n            dataItem.bullets.each(function (key, bullet) {\n              bullet.__disabled = true;\n            });\n          }\n        }\n      } else {\n        this.bulletsContainer.children.each(function (bullet) {\n          bullet.__disabled = true;\n        });\n      }\n    }\n    this.updateTooltipBounds();\n  };\n  /**\r\n   * @ignore\r\n   */\n  Series.prototype.updateTooltipBounds = function () {\n    if (this.topParent) {\n      var x = 0;\n      var y = 0;\n      var w = this.topParent.maxWidth;\n      var h = this.topParent.maxHeight;\n      var rect = {\n        x: x,\n        y: y,\n        width: w,\n        height: h\n      };\n      this.tooltip.setBounds(rect);\n    }\n  };\n  Series.prototype.shouldCreateBullet = function (dataItem, bulletTemplate) {\n    return true;\n  };\n  /**\r\n   * Validates data item's element, effectively redrawing it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n  Series.prototype.validateDataElement = function (dataItem) {\n    var _this = this;\n    _super.prototype.validateDataElement.call(this, dataItem);\n    if (this._showBullets) {\n      if (!this.isHidden) {\n        this.bulletsContainer.visible = true;\n      }\n      this.bullets.each(function (bulletTemplate) {\n        // always better to use the same, this helps to avoid redrawing\n        var bullet = dataItem.bullets.getKey(bulletTemplate.uid);\n        if (_this.shouldCreateBullet(dataItem, bulletTemplate)) {\n          if (!bullet) {\n            var disabledField = bulletTemplate.propertyFields.disabled;\n            var dataContext = dataItem.dataContext;\n            if (disabledField && dataContext && dataContext[disabledField] === false) {\n              bulletTemplate.applyOnClones = false;\n              bulletTemplate.disabled = false;\n              bullet = bulletTemplate.clone();\n              bulletTemplate.disabled = true;\n              bulletTemplate.applyOnClones = true;\n            } else {\n              bullet = bulletTemplate.clone();\n            }\n            bullet.shouldClone = false;\n            dataItem.addSprite(bullet);\n            if (!_this.visible || _this.isHiding) {\n              bullet.hide(0);\n            }\n          }\n          var currentDataItem = bullet.dataItem;\n          if (currentDataItem != dataItem) {\n            // set to undefined in order not to reuse\n            if (currentDataItem) {\n              currentDataItem.bullets.setKey(bulletTemplate.uid, undefined);\n            }\n            var readerText_1 = _this.itemReaderText;\n            if (bullet instanceof Bullet) {\n              if (!readerText_1) {\n                readerText_1 = \"{\" + bullet.xField + \"}: {\" + bullet.yField + \"}\";\n              }\n              if (bullet.isDynamic) {\n                dataItem.events.on(\"workingvaluechanged\", bullet.deepInvalidate, bullet, false);\n                //dataItem.events.on(\"calculatedvaluechanged\", bullet.deepInvalidate, bullet, false);\n                _this.dataItem.events.on(\"workingvaluechanged\", bullet.deepInvalidate, bullet, false);\n              }\n              bullet.deepInvalidate();\n            }\n            // Add accessibility to bullet\n            if (bullet.focusable) {\n              bullet.events.on(\"focus\", function (ev) {\n                bullet.readerTitle = _this.populateString(readerText_1, bullet.dataItem);\n              }, undefined, false);\n              bullet.events.on(\"blur\", function (ev) {\n                bullet.readerTitle = \"\";\n              }, undefined, false);\n            }\n            if (bullet.hoverable) {\n              bullet.events.on(\"over\", function (ev) {\n                bullet.readerTitle = _this.populateString(readerText_1, bullet.dataItem);\n              }, undefined, false);\n              bullet.events.on(\"out\", function (ev) {\n                bullet.readerTitle = \"\";\n              }, undefined, false);\n            }\n          }\n          bullet.parent = _this.bulletsContainer;\n          dataItem.bullets.setKey(bulletTemplate.uid, bullet);\n          // pass max w/h so we'd know if we should show/hide somethings\n          bullet.maxWidth = dataItem.itemWidth;\n          bullet.maxHeight = dataItem.itemHeight;\n          bullet.__disabled = false;\n          _this.positionBullet(bullet);\n        } else {\n          if (bullet) {\n            bullet.__disabled = true;\n          }\n        }\n      });\n    } else {\n      this.bulletsContainer.visible = false;\n    }\n  };\n  /**\r\n   * [handleDataItemWorkingValueChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Series.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {\n    if (!this.dataRangeInvalid) {\n      this.invalidateProcessedData();\n    }\n  };\n  Object.defineProperty(Series.prototype, \"ignoreMinMax\", {\n    /**\r\n     * @return Exclude from calculations?\r\n     */\n    get: function () {\n      return this._ignoreMinMax;\n    },\n    /**\r\n     * Should this series excluded from the axis scale calculations?\r\n     *\r\n     * @default false\r\n     * @param value  Exclude from calculations?\r\n     */\n    set: function (value) {\n      this._ignoreMinMax = value;\n      this.invalidateDataItems();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Create a mask for the series.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Series.prototype.createMask = function () {\n    // A placeholder method for extending classes to override.\n  };\n  /**\r\n   * Process axis range after it has been added to the list.\r\n   *\r\n   * @param event  Event\r\n   */\n  Series.prototype.processAxisRange = function (event) {\n    // create container if not existing\n    if (!this.rangesContainer) {\n      this.rangesContainer = this.createChild(Container);\n      this.rangesContainer.shouldClone = false;\n      this.rangesContainer.isMeasured = false;\n    }\n    var axisRange = event.newValue;\n    if (axisRange) {\n      axisRange.contents.parent = this.rangesContainer;\n      axisRange.isRange = true;\n      axisRange.events.on(\"valuechanged\", this.invalidateDataItems, this, false);\n    }\n  };\n  /**\r\n   * [getAxisField description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param axis  [description]\r\n   * @return [description]\r\n   */\n  Series.prototype.getAxisField = function (axis) {\n    return;\n  };\n  /**\r\n   * Shows the tooltip at specific position.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param xPosition  X\r\n   * @param yPosition  Y\r\n   */\n  Series.prototype.showTooltipAtPosition = function (xPosition, yPosition) {\n    // Placeholder method for extending classes to override.\n  };\n  Object.defineProperty(Series.prototype, \"minBulletDistance\", {\n    /**\r\n     * @return Distance (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minBulletDistance\");\n    },\n    /**\r\n     * Minimal distance between data points in pixels.\r\n     *\r\n     * If distance gets smaller than this, bullets are turned off to avoid\r\n     * overlapping.\r\n     *\r\n     * `0` (zero) disables this behavior.\r\n     *\r\n     * IMPORTANT: This setting will work only when Series' base axis\r\n     * is [[CategoryAxis]] or [[DateAxis]]. If base axis is [[ValueAxis]] the\r\n     * setting will be ignored, because it would be a huge overhead to measure\r\n     * distance between each and every bullet.\r\n     *\r\n     * @default 0\r\n     * @param value  Distance (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"minBulletDistance\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Series.prototype, \"bullets\", {\n    /**\r\n     * A list of bullets that will be added to each and every items in the\r\n     * series.\r\n     *\r\n     * You can push any object that is a descendant of a [[Sprite]] here. All\r\n     * items added to this list will be copied and used as a bullet on all data\r\n     * items, including their properties, events, etc.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/bullets/} for more info about the concept of Bullets\r\n     * @return List of bullets.\r\n     */\n    get: function () {\n      if (!this._bullets) {\n        this._bullets = new ListTemplate(new Bullet());\n        this._bullets.template.virtualParent = this;\n        this._bullets.events.on(\"inserted\", this.processBullet, this, false);\n        this._bullets.events.on(\"removed\", this.removeBullet, this, false);\n        this._disposers.push(new ListDisposer(this._bullets));\n        this._disposers.push(this._bullets.template);\n      }\n      return this._bullets;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Binds related legend data item's visual settings to this series' visual\r\n   * settings.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param marker  Legend item container\r\n   */\n  Series.prototype.createLegendMarker = function (marker) {\n    // This is a placeholder method for extending classes to override.\n  };\n  Object.defineProperty(Series.prototype, \"hiddenInLegend\", {\n    /**\r\n     * @return Hidden in legend?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"hiddenInLegend\");\n    },\n    /**\r\n     * Should the series be hidden in legend?\r\n     *\r\n     * @param value Hidden in legend?\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"hiddenInLegend\", value)) {\n        if (this.chart) {\n          this.chart.feedLegend();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Series.prototype, \"name\", {\n    /**\r\n     * @return Name\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"name\");\n    },\n    /**\r\n     * Series' name.\r\n     *\r\n     * @param value  Name\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"name\", value);\n      var legendDataItem = this.legendDataItem;\n      if (legendDataItem) {\n        legendDataItem.component.invalidate();\n        legendDataItem.component.invalidateRawData();\n      }\n      this.readerTitle = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Series.prototype, \"itemReaderText\", {\n    /**\r\n     * @return Screen reader text template\r\n     */\n    get: function () {\n      // Get explicitly set reader text\n      var readerText = this._itemReaderText;\n      // Not set? Let's try something else\n      if (!readerText) {\n        // Tooltip text?\n        if (this.tooltipText) {\n          readerText = $utils.plainText(this.tooltipText);\n        } else if (this.tooltipHTML) {\n          readerText = $utils.plainText(this.tooltipHTML);\n        }\n      }\n      if (!this._adapterO) {\n        return readerText;\n      } else {\n        return this._adapterO.apply(\"itemReaderText\", readerText);\n      }\n    },\n    /**\r\n     * Screen reader text to be applied to each individual data item, such\r\n     * as bullets, columns or slices.\r\n     *\r\n     * The template can contain field reference meta codes, i.e. `{dateX}`,\r\n     * `{valueY}`, etc.\r\n     *\r\n     * Any text formatting options, e.g. `[bold]` will be ignored.\r\n     *\r\n     * @param value Screen reader text template\r\n     */\n    set: function (value) {\n      this._itemReaderText = value;\n      this._itemReaderTextChanged = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns if number of data items in the series are beyond non-focusable\r\n   * count and should not be available for TAB-through.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Items focusable?\r\n   */\n  Series.prototype.itemsFocusable = function () {\n    return this.dataItems.length >= this.skipFocusThreshold ? false : true;\n  };\n  Object.defineProperty(Series.prototype, \"legendDataItem\", {\n    /**\r\n     * @return Data item\r\n     */\n    get: function () {\n      return this._legendDataItem;\n    },\n    /**\r\n     * Legend data item that corresponds to this series.\r\n     *\r\n     * @param value  Data item\r\n     */\n    set: function (value) {\n      this._legendDataItem = value;\n      this._legendDataItem.itemContainer.deepInvalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates corresponding legend data item with current values.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n  Series.prototype.updateLegendValue = function (dataItem, notRange) {\n    // if this series has legend item\n    if (this.legendDataItem) {\n      var legendSettings = this.legendSettings;\n      var legendDataItem = this.legendDataItem;\n      var label = legendDataItem.label;\n      var valueLabel = legendDataItem.valueLabel;\n      // update legend\n      if (dataItem && !dataItem.isDisposed() || notRange) {\n        if (valueLabel) {\n          if (legendSettings.itemValueText) {\n            valueLabel.text = legendSettings.itemValueText;\n          }\n          valueLabel.dataItem = dataItem;\n        }\n        if (label) {\n          if (legendSettings.itemLabelText) {\n            label.text = legendSettings.itemLabelText;\n          }\n          label.dataItem = dataItem;\n        }\n      } else {\n        if (label) {\n          // if itemLabelText is set, means we have to reset label even if labelText is not set\n          if (legendSettings.labelText || legendSettings.itemLabelText != undefined) {\n            label.text = legendSettings.labelText;\n          }\n          label.dataItem = this.dataItem;\n        }\n        if (valueLabel) {\n          if (legendSettings.valueText || legendSettings.itemValueText != undefined) {\n            valueLabel.text = legendSettings.valueText;\n          }\n          valueLabel.dataItem = this.dataItem;\n        }\n      }\n    }\n  };\n  /**\r\n   * Copies all properties from another instance of [[Series]].\r\n   *\r\n   * @param source  Source series\r\n   */\n  Series.prototype.copyFrom = function (source) {\n    this.bullets.copyFrom(source.bullets);\n    this.bulletsContainer.copyFrom(source.bulletsContainer);\n    this.calculatePercent = source.calculatePercent;\n    this.usePercentHack = source.usePercentHack;\n    this.simplifiedProcessing = source.simplifiedProcessing;\n    _super.prototype.copyFrom.call(this, source);\n  };\n  /**\r\n   * Displays a modal or console message with error, and halts any further\r\n   * processing of this element.\r\n   *\r\n   * @param e Error\r\n   */\n  Series.prototype.raiseCriticalError = function (e) {\n    if (this._chart && this._chart.modal) {\n      this._chart.modal.content = this._chart.adapter.apply(\"criticalError\", e).message;\n      this._chart.modal.closable = false;\n      if (!options.suppressErrors) {\n        this._chart.modal.open();\n      }\n      this._chart.disabled = true;\n    }\n    if (options.verbose) {\n      console.log(e);\n    }\n  };\n  /**\r\n   * Applies filters to the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Series.prototype.applyFilters = function () {\n    var _this = this;\n    _super.prototype.applyFilters.call(this);\n    this.bulletsContainer.filters.clear();\n    // copyFrom of a list copies, does not clone\n    $iter.each(this.filters.iterator(), function (filter) {\n      _this.bulletsContainer.filters.push(filter.clone());\n    });\n  };\n  Object.defineProperty(Series.prototype, \"heatRules\", {\n    /**\r\n     * A list of heat rules to apply to series' elements based on the value\r\n     * of the data item.\r\n     *\r\n     * Heat rules can be any \"numeric\" (including `Color`) property, and can also\r\n     * be applied to child objects of series, like columns, bullets, etc.\r\n     *\r\n     * E.g.:\r\n     *\r\n     * ```TypeScript\r\n     * series.heatRules.push({\r\n     *  \"target\": series.columns.template,\r\n     *  \"property\": \"fill\",\r\n     *  \"min\": am4core.color(\"#F5DBCB\"),\r\n     *  \"max\": am4core.color(\"#ED7B84\"),\r\n     *  \"dataField\": \"valueY\"\r\n     *});\r\n     *```\r\n     * ```Javacript\r\n     * series.heatRules.push({\r\n     *  \"target\": series.columns.template,\r\n     *  \"property\": \"fill\",\r\n     *  \"min\": am4core.color(\"#F5DBCB\"),\r\n     *  \"max\": am4core.color(\"#ED7B84\"),\r\n     *  \"dataField\": \"valueY\"\r\n     *});\r\n     *```\r\n     *```JSON\r\n     *{\r\n     *  // ...\r\n     *  \"series\": [{\r\n     *    \"type\": \"ColumnSeries\",\r\n     *    \"heatRules\": [{\r\n     *      \"target\": \"columns.template\",\r\n     *      \"property\": \"fill\",\r\n     *      \"min\": \"#F5DBCB\",\r\n     *      \"max\": \"#ED7B84\",\r\n     *      \"dataField\": \"valueY\"\r\n     *    }]\r\n     *  }]\r\n     *}\r\n     *```\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/series/#Heat_maps} for more about heat rules\r\n     * @return  Heat rules\r\n     */\n    get: function () {\n      var _this = this;\n      if (!this._heatRules) {\n        this._heatRules = new List();\n        this._heatRules.events.on(\"inserted\", function (event) {\n          var heatRule = event.newValue;\n          var target = heatRule.target;\n          if (target) {\n            var dataField_1 = heatRule.dataField;\n            if (!$type.hasValue(dataField_1)) {\n              dataField_1 = \"value\";\n            }\n            var seriesDataItem_1 = _this.dataItem;\n            var property_1 = heatRule.property;\n            var minValue = $type.toNumber(heatRule.minValue);\n            var maxValue = $type.toNumber(heatRule.maxValue);\n            if (!$type.isNumber(minValue) && !$type.isNumber(maxValue)) {\n              _this.dataItem.events.on(\"calculatedvaluechanged\", function (event) {\n                if (event.property == dataField_1) {\n                  $iter.each(_this.dataItems.iterator(), function (dataItem) {\n                    var foundSprite = false;\n                    $array.each(dataItem.sprites, function (sprite) {\n                      if (sprite.clonedFrom == target) {\n                        var anySprite = sprite;\n                        anySprite[property_1] = anySprite[property_1];\n                        foundSprite = true;\n                      }\n                    });\n                    if (!foundSprite) {\n                      $array.each(dataItem.sprites, function (sprite) {\n                        if (sprite instanceof Container) {\n                          $iter.each(sprite.children.iterator(), function (child) {\n                            if (child.className == target.className) {\n                              var anyChild = child;\n                              anyChild[property_1] = anyChild[property_1];\n                            }\n                            // giveup here\n                            else if (child instanceof Container) {\n                              child.deepInvalidate();\n                            }\n                          });\n                        }\n                      });\n                    }\n                  });\n                }\n              });\n            }\n            _this.dataItems.template.events.on(\"workingvaluechanged\", function (event) {\n              if (event.property == dataField_1) {\n                var dataItem = event.target;\n                var foundSprite_1 = false;\n                $array.each(dataItem.sprites, function (sprite) {\n                  if (sprite.clonedFrom == target) {\n                    var anySprite = sprite;\n                    anySprite[property_1] = anySprite[property_1];\n                    foundSprite_1 = true;\n                  }\n                });\n                if (!foundSprite_1) {\n                  $array.each(dataItem.sprites, function (sprite) {\n                    if (sprite instanceof Container) {\n                      $iter.each(sprite.children.iterator(), function (child) {\n                        if (child.className == target.className) {\n                          var anyChild = child;\n                          anyChild[property_1] = anyChild[property_1];\n                        }\n                        // givup here\n                        else if (child instanceof Container) {\n                          child.deepInvalidate();\n                        }\n                      });\n                    }\n                  });\n                }\n              }\n            });\n            target.adapter.add(property_1, function (value, ruleTarget, property) {\n              var minValue = $type.toNumber(heatRule.minValue);\n              var maxValue = $type.toNumber(heatRule.maxValue);\n              var min = heatRule.min;\n              var max = heatRule.max;\n              if (ruleTarget instanceof Sprite) {\n                var anySprite = ruleTarget;\n                var propertyField = anySprite.propertyFields[property];\n                if (propertyField && ruleTarget.dataItem) {\n                  var dataContext = ruleTarget.dataItem.dataContext;\n                  if (dataContext && $type.hasValue(dataContext[propertyField])) {\n                    return value;\n                  }\n                }\n              }\n              var dataItem = ruleTarget.dataItem;\n              if (!$type.isNumber(minValue)) {\n                minValue = seriesDataItem_1.values[dataField_1].low;\n              }\n              if (!$type.isNumber(maxValue)) {\n                maxValue = seriesDataItem_1.values[dataField_1].high;\n              }\n              if (dataItem) {\n                var fieldValues = dataItem.values[dataField_1];\n                if (fieldValues) {\n                  var workingValue = dataItem.getActualWorkingValue(dataField_1);\n                  if ($type.hasValue(min) && $type.hasValue(max) && $type.isNumber(minValue) && $type.isNumber(maxValue) && $type.isNumber(workingValue)) {\n                    var percent = void 0;\n                    if (heatRule.logarithmic) {\n                      percent = (Math.log(workingValue) * Math.LOG10E - Math.log(minValue) * Math.LOG10E) / (Math.log(maxValue) * Math.LOG10E - Math.log(minValue) * Math.LOG10E);\n                    } else {\n                      percent = (workingValue - minValue) / (maxValue - minValue);\n                    }\n                    if ($type.isNumber(workingValue) && (!$type.isNumber(percent) || Math.abs(percent) == Infinity)) {\n                      percent = 0.5;\n                    }\n                    // fixes problems if all values are the same\n                    if ($type.isNumber(min)) {\n                      return min + (max - min) * percent;\n                    } else if (min instanceof Color) {\n                      return new Color($colors.interpolate(min.rgb, max.rgb, percent));\n                    }\n                  }\n                }\n              }\n              return value;\n            });\n          }\n        });\n      }\n      return this._heatRules;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n  Series.prototype.processConfig = function (config) {\n    var heatRules;\n    if (config) {\n      // Set up bullets\n      if ($type.hasValue(config.bullets) && $type.isArray(config.bullets)) {\n        for (var i = 0, len = config.bullets.length; i < len; i++) {\n          var bullets = config.bullets[i];\n          if (!$type.hasValue(bullets.type)) {\n            bullets.type = \"Bullet\";\n          }\n        }\n      }\n      // Let's take heatRules out of the config, so that we can process\n      // them later, when bullets are already there\n      if ($type.hasValue(config.heatRules) && $type.isArray(config.heatRules)) {\n        heatRules = config.heatRules;\n        delete config.heatRules;\n      }\n    }\n    _super.prototype.processConfig.call(this, config);\n    // Process heat rules again, when all other elements are ready\n    if (heatRules) {\n      for (var i = 0, len = heatRules.length; i < len; i++) {\n        var rule = heatRules[i];\n        // Resolve target\n        var target = this;\n        if ($type.hasValue(rule.target) && $type.isString(rule.target)) {\n          // Check if we can find this element by id\n          if (this.map.hasKey(rule.target)) {\n            target = this.map.getKey(rule.target);\n          } else {\n            var parts = rule.target.split(\".\");\n            for (var x = 0; x < parts.length; x++) {\n              if (target instanceof List) {\n                var listitem = target.getIndex($type.toNumber(parts[x]));\n                if (!listitem) {\n                  target = target[parts[x]];\n                } else {\n                  target = listitem;\n                }\n              } else {\n                var maybeIndex = parts[x].match(/^(.*)\\[([0-9]+)\\]/);\n                if (maybeIndex) {\n                  if (target[maybeIndex[1]] instanceof List) {\n                    target = target[maybeIndex[1]].getIndex($type.toNumber(maybeIndex[2]));\n                  } else {\n                    target = target[maybeIndex[1]][$type.toNumber(maybeIndex[2])];\n                  }\n                } else {\n                  target = target[parts[x]];\n                }\n              }\n            }\n          }\n        }\n        rule.target = target;\n        // Resolve colors and percents\n        if ($type.hasValue(rule.min)) {\n          rule.min = this.maybeColorOrPercent(rule.min);\n        }\n        if ($type.hasValue(rule.max)) {\n          rule.max = this.maybeColorOrPercent(rule.max);\n        }\n      }\n      _super.prototype.processConfig.call(this, {\n        heatRules: heatRules\n      });\n    }\n  };\n  /**\r\n   * Returns visibility value\r\n   * @ignore\r\n   */\n  /*\r\n      protected getVisibility(): boolean {\r\n          let hidden = this.getPropertyValue(\"hidden\");\r\n          if (hidden) {\r\n              return false;\r\n          }\r\n          else {\r\n              return super.getVisibility();\r\n          }\r\n      }*/\n  /**\r\n   * This function is used to sort element's JSON config properties, so that\r\n   * some properties that absolutely need to be processed last, can be put at\r\n   * the end.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param a  Element 1\r\n   * @param b  Element 2\r\n   * @return Sorting number\r\n   */\n  Series.prototype.configOrder = function (a, b) {\n    if (a == b) {\n      return 0;\n    }\n    // Must come last\n    else if (a == \"heatRules\") {\n      return 1;\n    } else if (b == \"heatRules\") {\n      return -1;\n    } else {\n      return _super.prototype.configOrder.call(this, a, b);\n    }\n  };\n  /**\r\n   * Sets `visibility` property:\r\n   *\r\n   * * `true` - visible\r\n   * * `false` - hidden\r\n   *\r\n   * @param value  true - visible, false - hidden\r\n   * @return Current visibility\r\n   */\n  Series.prototype.setVisibility = function (value) {\n    _super.prototype.setVisibility.call(this, value);\n    this.bulletsContainer.visible = value;\n  };\n  return Series;\n}(Component);\nexport { Series };\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Series\"] = Series;\nregistry.registeredClasses[\"SeriesDataItem\"] = SeriesDataItem;","map":{"version":3,"names":["__extends","Component","Sprite","List","ListTemplate","ListDisposer","Dictionary","DictionaryDisposer","DataItem","Container","Tooltip","Bullet","LegendSettings","options","Color","registry","$iter","$math","$ease","$utils","$object","$type","$array","$colors","SeriesDataItem","_super","_this","call","className","values","value","applyTheme","Object","defineProperty","prototype","get","_bullets","_disposers","push","enumerable","configurable","dispose","bullets","clear","set","setValue","Series","_ignoreMinMax","_showBullets","legendSettings","_tmin","_tmax","_smin","_smax","dataItemsByAxis","skipFocusThreshold","_itemReaderTextChanged","calculatePercent","usePercentHack","autoDispose","simplifiedProcessing","constructor","Error","isMeasured","layout","shouldClone","setPropertyValue","axisRanges","events","on","processAxisRange","minBulletDistance","mainContainer","createChild","mask","bulletsContainer","_shouldBeReady","virtualParent","tooltip","hiddenState","transitionEasing","cubicIn","dataItem","createDataItem","component","role","autoSetClassName","setClassName","applyInternalDefaults","hasValue","readerTitle","language","translate","_chart","positionBullet","bullet","processBullet","event","newValue","isTemplate","once","ev","itemsFocusable","focusable","invalidate","removeBullet","oldValue","dataItems","each","eachBullet","getKey","uid","validateDataItems","processValues","getFirstValue","key","startIndex","i","getIndex","getActualWorkingValue","isNumber","getAbsoluteFirstValue","length","rangeChangeUpdate","working","count_1","sum_1","absoluteSum_1","low_1","high_1","open_1","close_1","previous_1","first_1","absoluteFirst_1","startIndex_1","max","min","endIndex","dataItem_1","_loop_1","dataItem_2","Math","abs","setCalculatedValue","prevValue","_loop_2","dataItem_3","ksum","percent","zeroItem_1","dataItem_4","validate","isIE","filters","iterator","axisRange","fill","stroke","x","pixelX","y","pixelY","children","__disabled","updateTooltipBounds","topParent","w","maxWidth","h","maxHeight","rect","width","height","setBounds","shouldCreateBullet","bulletTemplate","validateDataElement","isHidden","visible","disabledField","propertyFields","disabled","dataContext","applyOnClones","clone","addSprite","isHiding","hide","currentDataItem","setKey","undefined","readerText_1","itemReaderText","xField","yField","isDynamic","deepInvalidate","populateString","hoverable","parent","itemWidth","itemHeight","handleDataItemWorkingValueChange","name","dataRangeInvalid","invalidateProcessedData","invalidateDataItems","createMask","rangesContainer","contents","isRange","getAxisField","axis","showTooltipAtPosition","xPosition","yPosition","getPropertyValue","template","createLegendMarker","marker","chart","feedLegend","legendDataItem","invalidateRawData","readerText","_itemReaderText","tooltipText","plainText","tooltipHTML","_adapterO","apply","_legendDataItem","itemContainer","updateLegendValue","notRange","label","valueLabel","isDisposed","itemValueText","text","itemLabelText","labelText","valueText","copyFrom","source","raiseCriticalError","e","modal","content","adapter","message","closable","suppressErrors","open","verbose","console","log","applyFilters","filter","_heatRules","heatRule","target","dataField_1","dataField","seriesDataItem_1","property_1","property","minValue","toNumber","maxValue","foundSprite","sprites","sprite","clonedFrom","anySprite","child","anyChild","foundSprite_1","add","ruleTarget","propertyField","low","high","fieldValues","workingValue","logarithmic","LOG10E","Infinity","interpolate","rgb","processConfig","config","heatRules","isArray","len","type","rule","isString","map","hasKey","parts","split","listitem","maybeIndex","match","maybeColorOrPercent","configOrder","a","b","setVisibility","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/charts/series/Series.js"],"sourcesContent":["/**\r\n * Functionality for any series-based elements, like Line Series (graphs),\r\n * Pie slice lists, etc.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component } from \"../../core/Component\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { List, ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Dictionary, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { LegendSettings } from \"../Legend\";\r\nimport { options } from \"../../core/Options\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $ease from \"../../core/utils/Ease\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $colors from \"../../core/utils/Colors\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[Series]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar SeriesDataItem = /** @class */ (function (_super) {\r\n    __extends(SeriesDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function SeriesDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"SeriesDataItem\";\r\n        //@todo Should we make `bullets` list disposable?\r\n        //this._disposers.push(new DictionaryDisposer(this.bullets));\r\n        _this.values.value = {};\r\n        _this.values.value = {};\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(SeriesDataItem.prototype, \"bullets\", {\r\n        /**\r\n         * A dictionary of data items bullets, where key is uid of a bullet template.\r\n         */\r\n        get: function () {\r\n            if (!this._bullets) {\r\n                this._bullets = new Dictionary();\r\n                this._disposers.push(new DictionaryDisposer(this._bullets));\r\n            }\r\n            return this._bullets;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Destroys this object and all related data.\r\n     */\r\n    SeriesDataItem.prototype.dispose = function () {\r\n        this.bullets.clear();\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    Object.defineProperty(SeriesDataItem.prototype, \"value\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            return this.values.value.value;\r\n        },\r\n        /**\r\n         * data items's numeric value.\r\n         *\r\n         * @param value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"value\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return SeriesDataItem;\r\n}(DataItem));\r\nexport { SeriesDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines base class for any kind of serial data.\r\n *\r\n * @see {@link ISeriesEvents} for a list of available Events\r\n * @see {@link ISeriesAdapters} for a list of available Adapters\r\n * @todo Separate axis-related stuff to some other class so that MapSeries would not have unrelated stuff\r\n */\r\nvar Series = /** @class */ (function (_super) {\r\n    __extends(Series, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Series() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Should this series excluded from the axis scale calculations?\r\n         *\r\n         * @default false\r\n         */\r\n        _this._ignoreMinMax = false;\r\n        /**\r\n         * Should series' bullets?\r\n         *\r\n         * @default true\r\n         */\r\n        _this._showBullets = true;\r\n        /**\r\n         * Settings for the appearance of the related legend items.\r\n         */\r\n        _this.legendSettings = new LegendSettings();\r\n        /**\r\n         * Lowest overal values by type.\r\n         */\r\n        _this._tmin = new Dictionary();\r\n        /**\r\n         * Highest overal values by type.\r\n         */\r\n        _this._tmax = new Dictionary();\r\n        /**\r\n         * Lowest values in current selection by type.\r\n         */\r\n        _this._smin = new Dictionary();\r\n        /**\r\n         * Highest values in current selection by type.\r\n         */\r\n        _this._smax = new Dictionary();\r\n        /**\r\n         * [dataItemsByAxis description]\r\n         *\r\n         * Both by category and date.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         */\r\n        _this.dataItemsByAxis = new Dictionary();\r\n        /**\r\n         * Normally series items are focusable using keyboard, so that people can\r\n         * select them with a TAB key. However, if there are a lot of data points on\r\n         * screen it might be long and useless to tab through all o fthem.\r\n         *\r\n         * This is where `skipFocusThreshold` comes in. If there are more items than\r\n         * the value set here, we will not make those focusable and rather let screen\r\n         * reader software rely on the series summary, or authors provide alternative\r\n         * detailed information display, such as HTML table.\r\n         *\r\n         * Different series might have different threshold defaults.\r\n         */\r\n        _this.skipFocusThreshold = 20;\r\n        /**\r\n         * Used to indicate if `itemReaderText` was changed \"from the outside\".\r\n         */\r\n        _this._itemReaderTextChanged = false;\r\n        /**\r\n         * Most of the series use absolute values. However sometimes various\r\n         * calculated percent values are need, e.g. item's percent representation\r\n         * across all values in series, etc.\r\n         *\r\n         * It's a resource-intensive operation, so it is disabled by default.\r\n         *\r\n         * If you need percents to be calculated, e.g. for showing them in tooltips,\r\n         * or creating 100% stacks, this setting needs to be set to `true`.\r\n         *\r\n         * NOTE: `PieChart`, which relies on slice percentages, has this\r\n         * automatically set to `true`.\r\n         *\r\n         * @default false\r\n         */\r\n        _this.calculatePercent = false;\r\n        /**\r\n         * When `calculatePercent` is enabled and data item's percent value is\r\n         * calculated, last item's real value is used instead of its working value.\r\n         *\r\n         * This is done for the animations when last item in series (e.g. slice in\r\n         * a `PieSeries`) is hidden or shown. (if we would use real value, the\r\n         * calculated percent would always be 100%).\r\n         *\r\n         * Sometimes there is a need (e.g. for drill-down Sunburst) to disable this\r\n         * hack by setting `usePercentHack` to `false`.\r\n         *\r\n         * @since 4.9.13\r\n         * @default true\r\n         */\r\n        _this.usePercentHack = true;\r\n        /**\r\n         * Specifies if series should be automatically disposed when removing from\r\n         * chart's `series` list.\r\n         *\r\n         * @default true\r\n         */\r\n        _this.autoDispose = true;\r\n        /**\r\n         * When chart/series' data is processed, all kinds of derivative values are\r\n         * calculated. E.g. sum, min, max, change, etc. This is a potentially\r\n         * time-consuming operation, especially prominent in data-heavy charts.\r\n         *\r\n         * If your chart does not need those values, and you have a lot of data,\r\n         * setting this to `true` might give a dramatic increase in initial chart\r\n         * load speed.\r\n         *\r\n         * Please note, regular column and line series usage scenarios do not\r\n         * require derivative values. Those come into play only when you do advanced\r\n         * functionality like coloring segments of charts in different colors\r\n         * depending on change between open and close values, have stacked series, or\r\n         * display any of the derived values, like percent, in tooltips or bullets.\r\n         *\r\n         * @default false\r\n         */\r\n        _this.simplifiedProcessing = false;\r\n        if (_this.constructor === Series) {\r\n            throw new Error(\"'Series' cannot be instantiated directly. Please use a specific series type.\");\r\n        }\r\n        _this.className = \"Series\";\r\n        _this.isMeasured = false;\r\n        _this.layout = \"none\";\r\n        _this.shouldClone = false;\r\n        _this.setPropertyValue(\"hidden\", false);\r\n        _this.axisRanges = new List();\r\n        _this.axisRanges.events.on(\"inserted\", _this.processAxisRange, _this, false);\r\n        _this.minBulletDistance = 0; // otherwise we'll have a lot of cases when people won't see bullets and think it's a bug\r\n        _this.mainContainer = _this.createChild(Container);\r\n        _this.mainContainer.shouldClone = false;\r\n        _this.mainContainer.mask = _this.createChild(Sprite);\r\n        _this._disposers.push(_this.mainContainer);\r\n        // all bullets should go on top of lines/fills. So we add a separate container for bullets and later set it's parent to chart.bulletsContainer\r\n        var bulletsContainer = _this.mainContainer.createChild(Container);\r\n        _this._shouldBeReady.push(bulletsContainer);\r\n        bulletsContainer.shouldClone = false;\r\n        bulletsContainer.layout = \"none\";\r\n        bulletsContainer.virtualParent = _this;\r\n        _this._disposers.push(bulletsContainer);\r\n        _this.bulletsContainer = bulletsContainer;\r\n        _this.tooltip = new Tooltip();\r\n        _this.tooltip.virtualParent = _this;\r\n        _this._disposers.push(_this.tooltip);\r\n        _this.hiddenState.transitionEasing = $ease.cubicIn;\r\n        // this data item holds sums, averages, etc\r\n        _this.dataItem = _this.createDataItem();\r\n        _this._disposers.push(_this.dataItem);\r\n        _this.dataItem.component = _this;\r\n        // Apply accessibility\r\n        _this.role = \"group\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * We need this here so that class names can be applied to bullets container.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Series.prototype.applyTheme = function () {\r\n        _super.prototype.applyTheme.call(this);\r\n        if (options.autoSetClassName && this.bulletsContainer) {\r\n            this.bulletsContainer.className = this.className + \"-bullets\";\r\n            this.bulletsContainer.setClassName();\r\n        }\r\n    };\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    Series.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Series\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return Data Item\r\n     */\r\n    Series.prototype.createDataItem = function () {\r\n        return new SeriesDataItem();\r\n    };\r\n    Object.defineProperty(Series.prototype, \"chart\", {\r\n        /**\r\n         * @return Chart\r\n         */\r\n        get: function () {\r\n            return this._chart;\r\n        },\r\n        /**\r\n         * Chart series is used on.\r\n         *\r\n         * @param value  Chart\r\n         */\r\n        set: function (value) {\r\n            this._chart = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Positions bullet.\r\n     *\r\n     * @param bullet  Sprite\r\n     */\r\n    Series.prototype.positionBullet = function (bullet) {\r\n        // Placeholder method for extending classes to override.\r\n    };\r\n    /**\r\n     * Decorates newly created bullet after it has been instert into the list.\r\n     *\r\n     * @param event  List event\r\n     * @todo investigate why itemReaderText is undefined\r\n     */\r\n    Series.prototype.processBullet = function (event) {\r\n        var _this = this;\r\n        var bullet = event.newValue;\r\n        bullet.isTemplate = true;\r\n        // Add accessibility options to bullet\r\n        // If there are relatively few bullets, make them focusable\r\n        this.events.once(\"datavalidated\", function (ev) {\r\n            if (_this.itemsFocusable()) {\r\n                bullet.focusable = true;\r\n            }\r\n        });\r\n        this.invalidate();\r\n    };\r\n    /**\r\n     * removes bullets\r\n     *\r\n     * @param event  List event\r\n     */\r\n    Series.prototype.removeBullet = function (event) {\r\n        var bullet = event.oldValue;\r\n        this.dataItems.each(function (dataItem) {\r\n            var eachBullet = dataItem.bullets.getKey(bullet.uid);\r\n            if (eachBullet) {\r\n                eachBullet.dispose();\r\n            }\r\n        });\r\n        this.invalidate();\r\n    };\r\n    /**\r\n     * Validates data items.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Series.prototype.validateDataItems = function () {\r\n        _super.prototype.validateDataItems.call(this);\r\n        this.processValues(false);\r\n    };\r\n    /**\r\n     * Returns first value for the specific key in the series.\r\n     *\r\n     * @param key  Key\r\n     * @return Value\r\n     * @todo Description\r\n     * @todo Convert to propert object property iterator\r\n     */\r\n    Series.prototype.getFirstValue = function (key, startIndex) {\r\n        // find first\r\n        /*\r\n        return $iter.findMap(this.dataItems.iterator(), (dataItem) => {\r\n            for (let key in dataItem.values) {\r\n                if ($object.hasKey(dataItem.values, key)) {\r\n                    let value: number = dataItem.values[key].workingValue;\r\n                    if ($type.isNumber(value)) {\r\n                        return value;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return null;\r\n        });*/\r\n        //if (startIndex > 0 && startIndex < this.dataItems.length - 1) {\r\n        //startIndex++;\r\n        //}\r\n        for (var i = startIndex; i >= 0; i--) {\r\n            var dataItem = this.dataItems.getIndex(i);\r\n            var value = dataItem.getActualWorkingValue(key);\r\n            if ($type.isNumber(value)) {\r\n                return value;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Returns first value for the specific key in the series.\r\n     *\r\n     * @param key  Key\r\n     * @return Value\r\n     * @todo Description\r\n     * @todo Convert to propert object property iterator\r\n     */\r\n    Series.prototype.getAbsoluteFirstValue = function (key) {\r\n        for (var i = 0; i < this.dataItems.length; i++) {\r\n            var dataItem = this.dataItems.getIndex(i);\r\n            var value = dataItem.values[key].value;\r\n            if ($type.isNumber(value)) {\r\n                return value;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * [rangeChangeUpdate description]\r\n     *\r\n     * @todo Description\r\n     */\r\n    Series.prototype.rangeChangeUpdate = function () {\r\n        _super.prototype.rangeChangeUpdate.call(this);\r\n        this.processValues(true);\r\n    };\r\n    /**\r\n     * [processValues description]\r\n     *\r\n     * @todo Description\r\n     * @todo Convert to propert object property iterator\r\n     * @param dataItems [description]\r\n     */\r\n    Series.prototype.processValues = function (working) {\r\n        var _this = this;\r\n        if (!this.simplifiedProcessing) {\r\n            var dataItems = this.dataItems;\r\n            var count_1 = {};\r\n            var sum_1 = {};\r\n            var absoluteSum_1 = {};\r\n            var low_1 = {};\r\n            var high_1 = {};\r\n            var open_1 = {};\r\n            var close_1 = {};\r\n            var previous_1 = {};\r\n            var first_1 = {};\r\n            var absoluteFirst_1 = {};\r\n            //let duration: number = 0; // todo: check if series uses selection.change or selection.change.percent and set duration to interpolationduration\r\n            var startIndex_1 = $math.max(0, this.startIndex);\r\n            startIndex_1 = $math.min(startIndex_1, this.dataItems.length);\r\n            var endIndex = $math.min(this.endIndex, this.dataItems.length);\r\n            if (!$type.isNumber(startIndex_1)) {\r\n                startIndex_1 = 0;\r\n            }\r\n            if (!$type.isNumber(endIndex)) {\r\n                endIndex = this.dataItems.length;\r\n            }\r\n            if (startIndex_1 > 0) {\r\n                var dataItem_1 = dataItems.getIndex(startIndex_1 - 1);\r\n                $object.each(dataItem_1.values, function (key, values) {\r\n                    var value = dataItem_1.getActualWorkingValue(key);\r\n                    if ($type.isNumber(value)) {\r\n                        // save previous\r\n                        previous_1[key] = value;\r\n                    }\r\n                });\r\n            }\r\n            var _loop_1 = function (i) {\r\n                var dataItem_2 = dataItems.getIndex(i);\r\n                $object.each(dataItem_2.values, function (key, values) {\r\n                    var value = dataItem_2.getActualWorkingValue(key);\r\n                    //if (i >= startIndex && i <= endIndex) { // do not add to count, sum etc if it is not within start/end index\r\n                    if ($type.isNumber(value)) {\r\n                        // count values\r\n                        if (!$type.isNumber(count_1[key])) {\r\n                            count_1[key] = 0;\r\n                        }\r\n                        count_1[key]++;\r\n                        // sum values\r\n                        if (!$type.isNumber(sum_1[key])) {\r\n                            sum_1[key] = 0;\r\n                        }\r\n                        sum_1[key] += value;\r\n                        // absolute sum values\r\n                        if (!$type.isNumber(absoluteSum_1[key])) {\r\n                            absoluteSum_1[key] = 0;\r\n                        }\r\n                        absoluteSum_1[key] += Math.abs(value);\r\n                        // open\r\n                        if (!$type.isNumber(open_1[key])) {\r\n                            open_1[key] = value;\r\n                        }\r\n                        // close\r\n                        close_1[key] = value;\r\n                        // low\r\n                        if (!$type.isNumber(low_1[key])) {\r\n                            low_1[key] = value;\r\n                        }\r\n                        else {\r\n                            if (low_1[key] > value) {\r\n                                low_1[key] = value;\r\n                            }\r\n                        }\r\n                        // high\r\n                        if (!$type.isNumber(high_1[key])) {\r\n                            high_1[key] = value;\r\n                        }\r\n                        else {\r\n                            if (high_1[key] < value) {\r\n                                high_1[key] = value;\r\n                            }\r\n                        }\r\n                        if (!$type.isNumber(first_1[key])) {\r\n                            first_1[key] = _this.getFirstValue(key, startIndex_1);\r\n                        }\r\n                        if (!$type.isNumber(absoluteFirst_1[key])) {\r\n                            absoluteFirst_1[key] = _this.getAbsoluteFirstValue(key);\r\n                        }\r\n                        // change\r\n                        dataItem_2.setCalculatedValue(key, value - first_1[key], \"change\");\r\n                        // change from start percent\r\n                        // will fail if first value is 0\r\n                        dataItem_2.setCalculatedValue(key, (value - first_1[key]) / first_1[key] * 100, \"changePercent\");\r\n                        dataItem_2.setCalculatedValue(key, (value - absoluteFirst_1[key]), \"startChange\");\r\n                        dataItem_2.setCalculatedValue(key, (value - absoluteFirst_1[key]) / absoluteFirst_1[key] * 100, \"startChangePercent\");\r\n                        // previous change\r\n                        var prevValue = previous_1[key];\r\n                        if (!$type.isNumber(prevValue)) {\r\n                            prevValue = value;\r\n                        }\r\n                        dataItem_2.setCalculatedValue(key, value - prevValue, \"previousChange\");\r\n                        // previous change percent\r\n                        dataItem_2.setCalculatedValue(key, (value - prevValue) / prevValue * 100, \"previousChangePercent\");\r\n                        // save previous\r\n                        previous_1[key] = value;\r\n                    }\r\n                });\r\n            };\r\n            for (var i = startIndex_1; i < endIndex; i++) {\r\n                _loop_1(i);\r\n            }\r\n            if (this.calculatePercent) {\r\n                var _loop_2 = function (i) {\r\n                    var dataItem_3 = dataItems.getIndex(i);\r\n                    $object.each(dataItem_3.values, function (key) {\r\n                        var ksum = absoluteSum_1[key];\r\n                        var value = dataItem_3.getActualWorkingValue(key);\r\n                        if ($type.isNumber(value)) {\r\n                            if (ksum > 0) {\r\n                                if (_this.usePercentHack) {\r\n                                    // this hack is made in order to make it possible to animate single slice to 0\r\n                                    // if there is only one slice left, percent value is always 100%, so it won't animate\r\n                                    // so we use real value of a slice instead of current value\r\n                                    if (value == ksum) {\r\n                                        ksum = dataItem_3.values[key].value;\r\n                                    }\r\n                                }\r\n                                var percent = value / ksum * 100;\r\n                                dataItem_3.setCalculatedValue(key, percent, \"percent\");\r\n                            }\r\n                            else {\r\n                                dataItem_3.setCalculatedValue(key, 0, \"percent\");\r\n                            }\r\n                        }\r\n                    });\r\n                };\r\n                for (var i = startIndex_1; i < endIndex; i++) {\r\n                    _loop_2(i);\r\n                }\r\n            }\r\n            // calculate one before first (cant do that in cycle, as we don't know open yet\r\n            // when drawing line chart we should draw line to the invisible data point to the left, otherwise the line will always look like it starts from the selected point\r\n            // so we do startIndex - 1\r\n            if (startIndex_1 > 0) {\r\n                var zeroItem_1 = dataItems.getIndex(startIndex_1 - 1);\r\n                $object.each(zeroItem_1.values, function (key) {\r\n                    var value = zeroItem_1.values[key].value;\r\n                    // change\r\n                    zeroItem_1.setCalculatedValue(key, value - open_1[key], \"change\");\r\n                    // change percent\r\n                    zeroItem_1.setCalculatedValue(key, (value - open_1[key]) / open_1[key] * 100, \"changePercent\");\r\n                });\r\n            }\r\n            // we save various data like sum, average to dataPoint of the series\r\n            var dataItem_4 = this.dataItem;\r\n            $object.each(dataItem_4.values, function (key) {\r\n                dataItem_4.setCalculatedValue(key, sum_1[key], \"sum\");\r\n                dataItem_4.setCalculatedValue(key, absoluteSum_1[key], \"absoluteSum\");\r\n                dataItem_4.setCalculatedValue(key, sum_1[key] / count_1[key], \"average\");\r\n                dataItem_4.setCalculatedValue(key, open_1[key], \"open\");\r\n                dataItem_4.setCalculatedValue(key, close_1[key], \"close\");\r\n                dataItem_4.setCalculatedValue(key, low_1[key], \"low\");\r\n                dataItem_4.setCalculatedValue(key, high_1[key], \"high\");\r\n                dataItem_4.setCalculatedValue(key, count_1[key], \"count\");\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * (Re)validates the whole series, effectively causing it to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Series.prototype.validate = function () {\r\n        if ($utils.isIE()) {\r\n            this.filters.clear();\r\n        }\r\n        $iter.each(this.axisRanges.iterator(), function (axisRange) {\r\n            //axisRange.contents.disposeChildren(); // not good for columns, as they are reused\r\n            //\t\t\taxisRange.appendChildren();\r\n            axisRange.validate();\r\n        });\r\n        _super.prototype.validate.call(this);\r\n        var bulletsContainer = this.bulletsContainer;\r\n        bulletsContainer.fill = this.fill;\r\n        bulletsContainer.stroke = this.stroke;\r\n        bulletsContainer.x = this.pixelX;\r\n        bulletsContainer.y = this.pixelY;\r\n        if (this.bulletsContainer.children.length > 0) {\r\n            if (this._showBullets) {\r\n                for (var i = 0; i < this.startIndex; i++) {\r\n                    var dataItem = this.dataItems.getIndex(i);\r\n                    if (dataItem) {\r\n                        dataItem.bullets.each(function (key, bullet) {\r\n                            bullet.__disabled = true;\r\n                        });\r\n                    }\r\n                }\r\n                for (var i = this.dataItems.length - 1; i > this.endIndex; i--) {\r\n                    var dataItem = this.dataItems.getIndex(i);\r\n                    if (dataItem) {\r\n                        dataItem.bullets.each(function (key, bullet) {\r\n                            bullet.__disabled = true;\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                this.bulletsContainer.children.each(function (bullet) {\r\n                    bullet.__disabled = true;\r\n                });\r\n            }\r\n        }\r\n        this.updateTooltipBounds();\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Series.prototype.updateTooltipBounds = function () {\r\n        if (this.topParent) {\r\n            var x = 0;\r\n            var y = 0;\r\n            var w = this.topParent.maxWidth;\r\n            var h = this.topParent.maxHeight;\r\n            var rect = { x: x, y: y, width: w, height: h };\r\n            this.tooltip.setBounds(rect);\r\n        }\r\n    };\r\n    Series.prototype.shouldCreateBullet = function (dataItem, bulletTemplate) {\r\n        return true;\r\n    };\r\n    /**\r\n     * Validates data item's element, effectively redrawing it.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param dataItem  Data item\r\n     */\r\n    Series.prototype.validateDataElement = function (dataItem) {\r\n        var _this = this;\r\n        _super.prototype.validateDataElement.call(this, dataItem);\r\n        if (this._showBullets) {\r\n            if (!this.isHidden) {\r\n                this.bulletsContainer.visible = true;\r\n            }\r\n            this.bullets.each(function (bulletTemplate) {\r\n                // always better to use the same, this helps to avoid redrawing\r\n                var bullet = dataItem.bullets.getKey(bulletTemplate.uid);\r\n                if (_this.shouldCreateBullet(dataItem, bulletTemplate)) {\r\n                    if (!bullet) {\r\n                        var disabledField = bulletTemplate.propertyFields.disabled;\r\n                        var dataContext = dataItem.dataContext;\r\n                        if (disabledField && dataContext && dataContext[disabledField] === false) {\r\n                            bulletTemplate.applyOnClones = false;\r\n                            bulletTemplate.disabled = false;\r\n                            bullet = bulletTemplate.clone();\r\n                            bulletTemplate.disabled = true;\r\n                            bulletTemplate.applyOnClones = true;\r\n                        }\r\n                        else {\r\n                            bullet = bulletTemplate.clone();\r\n                        }\r\n                        bullet.shouldClone = false;\r\n                        dataItem.addSprite(bullet);\r\n                        if (!_this.visible || _this.isHiding) {\r\n                            bullet.hide(0);\r\n                        }\r\n                    }\r\n                    var currentDataItem = bullet.dataItem;\r\n                    if (currentDataItem != dataItem) {\r\n                        // set to undefined in order not to reuse\r\n                        if (currentDataItem) {\r\n                            currentDataItem.bullets.setKey(bulletTemplate.uid, undefined);\r\n                        }\r\n                        var readerText_1 = _this.itemReaderText;\r\n                        if (bullet instanceof Bullet) {\r\n                            if (!readerText_1) {\r\n                                readerText_1 = (\"{\" + bullet.xField + \"}: {\" + bullet.yField + \"}\");\r\n                            }\r\n                            if (bullet.isDynamic) {\r\n                                dataItem.events.on(\"workingvaluechanged\", bullet.deepInvalidate, bullet, false);\r\n                                //dataItem.events.on(\"calculatedvaluechanged\", bullet.deepInvalidate, bullet, false);\r\n                                _this.dataItem.events.on(\"workingvaluechanged\", bullet.deepInvalidate, bullet, false);\r\n                            }\r\n                            bullet.deepInvalidate();\r\n                        }\r\n                        // Add accessibility to bullet\r\n                        if (bullet.focusable) {\r\n                            bullet.events.on(\"focus\", function (ev) {\r\n                                bullet.readerTitle = _this.populateString(readerText_1, bullet.dataItem);\r\n                            }, undefined, false);\r\n                            bullet.events.on(\"blur\", function (ev) {\r\n                                bullet.readerTitle = \"\";\r\n                            }, undefined, false);\r\n                        }\r\n                        if (bullet.hoverable) {\r\n                            bullet.events.on(\"over\", function (ev) {\r\n                                bullet.readerTitle = _this.populateString(readerText_1, bullet.dataItem);\r\n                            }, undefined, false);\r\n                            bullet.events.on(\"out\", function (ev) {\r\n                                bullet.readerTitle = \"\";\r\n                            }, undefined, false);\r\n                        }\r\n                    }\r\n                    bullet.parent = _this.bulletsContainer;\r\n                    dataItem.bullets.setKey(bulletTemplate.uid, bullet);\r\n                    // pass max w/h so we'd know if we should show/hide somethings\r\n                    bullet.maxWidth = dataItem.itemWidth;\r\n                    bullet.maxHeight = dataItem.itemHeight;\r\n                    bullet.__disabled = false;\r\n                    _this.positionBullet(bullet);\r\n                }\r\n                else {\r\n                    if (bullet) {\r\n                        bullet.__disabled = true;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            this.bulletsContainer.visible = false;\r\n        }\r\n    };\r\n    /**\r\n     * [handleDataItemWorkingValueChange description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Series.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {\r\n        if (!this.dataRangeInvalid) {\r\n            this.invalidateProcessedData();\r\n        }\r\n    };\r\n    Object.defineProperty(Series.prototype, \"ignoreMinMax\", {\r\n        /**\r\n         * @return Exclude from calculations?\r\n         */\r\n        get: function () {\r\n            return this._ignoreMinMax;\r\n        },\r\n        /**\r\n         * Should this series excluded from the axis scale calculations?\r\n         *\r\n         * @default false\r\n         * @param value  Exclude from calculations?\r\n         */\r\n        set: function (value) {\r\n            this._ignoreMinMax = value;\r\n            this.invalidateDataItems();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Create a mask for the series.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Series.prototype.createMask = function () {\r\n        // A placeholder method for extending classes to override.\r\n    };\r\n    /**\r\n     * Process axis range after it has been added to the list.\r\n     *\r\n     * @param event  Event\r\n     */\r\n    Series.prototype.processAxisRange = function (event) {\r\n        // create container if not existing\r\n        if (!this.rangesContainer) {\r\n            this.rangesContainer = this.createChild(Container);\r\n            this.rangesContainer.shouldClone = false;\r\n            this.rangesContainer.isMeasured = false;\r\n        }\r\n        var axisRange = event.newValue;\r\n        if (axisRange) {\r\n            axisRange.contents.parent = this.rangesContainer;\r\n            axisRange.isRange = true;\r\n            axisRange.events.on(\"valuechanged\", this.invalidateDataItems, this, false);\r\n        }\r\n    };\r\n    /**\r\n     * [getAxisField description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param axis  [description]\r\n     * @return [description]\r\n     */\r\n    Series.prototype.getAxisField = function (axis) {\r\n        return;\r\n    };\r\n    /**\r\n     * Shows the tooltip at specific position.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param xPosition  X\r\n     * @param yPosition  Y\r\n     */\r\n    Series.prototype.showTooltipAtPosition = function (xPosition, yPosition) {\r\n        // Placeholder method for extending classes to override.\r\n    };\r\n    Object.defineProperty(Series.prototype, \"minBulletDistance\", {\r\n        /**\r\n         * @return Distance (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"minBulletDistance\");\r\n        },\r\n        /**\r\n         * Minimal distance between data points in pixels.\r\n         *\r\n         * If distance gets smaller than this, bullets are turned off to avoid\r\n         * overlapping.\r\n         *\r\n         * `0` (zero) disables this behavior.\r\n         *\r\n         * IMPORTANT: This setting will work only when Series' base axis\r\n         * is [[CategoryAxis]] or [[DateAxis]]. If base axis is [[ValueAxis]] the\r\n         * setting will be ignored, because it would be a huge overhead to measure\r\n         * distance between each and every bullet.\r\n         *\r\n         * @default 0\r\n         * @param value  Distance (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"minBulletDistance\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Series.prototype, \"bullets\", {\r\n        /**\r\n         * A list of bullets that will be added to each and every items in the\r\n         * series.\r\n         *\r\n         * You can push any object that is a descendant of a [[Sprite]] here. All\r\n         * items added to this list will be copied and used as a bullet on all data\r\n         * items, including their properties, events, etc.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/bullets/} for more info about the concept of Bullets\r\n         * @return List of bullets.\r\n         */\r\n        get: function () {\r\n            if (!this._bullets) {\r\n                this._bullets = new ListTemplate(new Bullet());\r\n                this._bullets.template.virtualParent = this;\r\n                this._bullets.events.on(\"inserted\", this.processBullet, this, false);\r\n                this._bullets.events.on(\"removed\", this.removeBullet, this, false);\r\n                this._disposers.push(new ListDisposer(this._bullets));\r\n                this._disposers.push(this._bullets.template);\r\n            }\r\n            return this._bullets;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Binds related legend data item's visual settings to this series' visual\r\n     * settings.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param marker  Legend item container\r\n     */\r\n    Series.prototype.createLegendMarker = function (marker) {\r\n        // This is a placeholder method for extending classes to override.\r\n    };\r\n    Object.defineProperty(Series.prototype, \"hiddenInLegend\", {\r\n        /**\r\n         * @return Hidden in legend?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"hiddenInLegend\");\r\n        },\r\n        /**\r\n         * Should the series be hidden in legend?\r\n         *\r\n         * @param value Hidden in legend?\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"hiddenInLegend\", value)) {\r\n                if (this.chart) {\r\n                    this.chart.feedLegend();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Series.prototype, \"name\", {\r\n        /**\r\n         * @return Name\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"name\");\r\n        },\r\n        /**\r\n         * Series' name.\r\n         *\r\n         * @param value  Name\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"name\", value);\r\n            var legendDataItem = this.legendDataItem;\r\n            if (legendDataItem) {\r\n                legendDataItem.component.invalidate();\r\n                legendDataItem.component.invalidateRawData();\r\n            }\r\n            this.readerTitle = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Series.prototype, \"itemReaderText\", {\r\n        /**\r\n         * @return Screen reader text template\r\n         */\r\n        get: function () {\r\n            // Get explicitly set reader text\r\n            var readerText = this._itemReaderText;\r\n            // Not set? Let's try something else\r\n            if (!readerText) {\r\n                // Tooltip text?\r\n                if (this.tooltipText) {\r\n                    readerText = $utils.plainText(this.tooltipText);\r\n                }\r\n                else if (this.tooltipHTML) {\r\n                    readerText = $utils.plainText(this.tooltipHTML);\r\n                }\r\n            }\r\n            if (!this._adapterO) {\r\n                return readerText;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"itemReaderText\", readerText);\r\n            }\r\n        },\r\n        /**\r\n         * Screen reader text to be applied to each individual data item, such\r\n         * as bullets, columns or slices.\r\n         *\r\n         * The template can contain field reference meta codes, i.e. `{dateX}`,\r\n         * `{valueY}`, etc.\r\n         *\r\n         * Any text formatting options, e.g. `[bold]` will be ignored.\r\n         *\r\n         * @param value Screen reader text template\r\n         */\r\n        set: function (value) {\r\n            this._itemReaderText = value;\r\n            this._itemReaderTextChanged = true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns if number of data items in the series are beyond non-focusable\r\n     * count and should not be available for TAB-through.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Items focusable?\r\n     */\r\n    Series.prototype.itemsFocusable = function () {\r\n        return this.dataItems.length >= this.skipFocusThreshold ? false : true;\r\n    };\r\n    Object.defineProperty(Series.prototype, \"legendDataItem\", {\r\n        /**\r\n         * @return Data item\r\n         */\r\n        get: function () {\r\n            return this._legendDataItem;\r\n        },\r\n        /**\r\n         * Legend data item that corresponds to this series.\r\n         *\r\n         * @param value  Data item\r\n         */\r\n        set: function (value) {\r\n            this._legendDataItem = value;\r\n            this._legendDataItem.itemContainer.deepInvalidate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Updates corresponding legend data item with current values.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param dataItem  Data item\r\n     */\r\n    Series.prototype.updateLegendValue = function (dataItem, notRange) {\r\n        // if this series has legend item\r\n        if (this.legendDataItem) {\r\n            var legendSettings = this.legendSettings;\r\n            var legendDataItem = this.legendDataItem;\r\n            var label = legendDataItem.label;\r\n            var valueLabel = legendDataItem.valueLabel;\r\n            // update legend\r\n            if ((dataItem && !dataItem.isDisposed()) || notRange) {\r\n                if (valueLabel) {\r\n                    if (legendSettings.itemValueText) {\r\n                        valueLabel.text = legendSettings.itemValueText;\r\n                    }\r\n                    valueLabel.dataItem = dataItem;\r\n                }\r\n                if (label) {\r\n                    if (legendSettings.itemLabelText) {\r\n                        label.text = legendSettings.itemLabelText;\r\n                    }\r\n                    label.dataItem = dataItem;\r\n                }\r\n            }\r\n            else {\r\n                if (label) {\r\n                    // if itemLabelText is set, means we have to reset label even if labelText is not set\r\n                    if (legendSettings.labelText || legendSettings.itemLabelText != undefined) {\r\n                        label.text = legendSettings.labelText;\r\n                    }\r\n                    label.dataItem = this.dataItem;\r\n                }\r\n                if (valueLabel) {\r\n                    if (legendSettings.valueText || legendSettings.itemValueText != undefined) {\r\n                        valueLabel.text = legendSettings.valueText;\r\n                    }\r\n                    valueLabel.dataItem = this.dataItem;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Copies all properties from another instance of [[Series]].\r\n     *\r\n     * @param source  Source series\r\n     */\r\n    Series.prototype.copyFrom = function (source) {\r\n        this.bullets.copyFrom(source.bullets);\r\n        this.bulletsContainer.copyFrom(source.bulletsContainer);\r\n        this.calculatePercent = source.calculatePercent;\r\n        this.usePercentHack = source.usePercentHack;\r\n        this.simplifiedProcessing = source.simplifiedProcessing;\r\n        _super.prototype.copyFrom.call(this, source);\r\n    };\r\n    /**\r\n     * Displays a modal or console message with error, and halts any further\r\n     * processing of this element.\r\n     *\r\n     * @param e Error\r\n     */\r\n    Series.prototype.raiseCriticalError = function (e) {\r\n        if (this._chart && this._chart.modal) {\r\n            this._chart.modal.content = this._chart.adapter.apply(\"criticalError\", e).message;\r\n            this._chart.modal.closable = false;\r\n            if (!options.suppressErrors) {\r\n                this._chart.modal.open();\r\n            }\r\n            this._chart.disabled = true;\r\n        }\r\n        if (options.verbose) {\r\n            console.log(e);\r\n        }\r\n    };\r\n    /**\r\n     * Applies filters to the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Series.prototype.applyFilters = function () {\r\n        var _this = this;\r\n        _super.prototype.applyFilters.call(this);\r\n        this.bulletsContainer.filters.clear();\r\n        // copyFrom of a list copies, does not clone\r\n        $iter.each(this.filters.iterator(), function (filter) {\r\n            _this.bulletsContainer.filters.push(filter.clone());\r\n        });\r\n    };\r\n    Object.defineProperty(Series.prototype, \"heatRules\", {\r\n        /**\r\n         * A list of heat rules to apply to series' elements based on the value\r\n         * of the data item.\r\n         *\r\n         * Heat rules can be any \"numeric\" (including `Color`) property, and can also\r\n         * be applied to child objects of series, like columns, bullets, etc.\r\n         *\r\n         * E.g.:\r\n         *\r\n         * ```TypeScript\r\n         * series.heatRules.push({\r\n         *  \"target\": series.columns.template,\r\n         *  \"property\": \"fill\",\r\n         *  \"min\": am4core.color(\"#F5DBCB\"),\r\n         *  \"max\": am4core.color(\"#ED7B84\"),\r\n         *  \"dataField\": \"valueY\"\r\n         *});\r\n         *```\r\n         * ```Javacript\r\n         * series.heatRules.push({\r\n         *  \"target\": series.columns.template,\r\n         *  \"property\": \"fill\",\r\n         *  \"min\": am4core.color(\"#F5DBCB\"),\r\n         *  \"max\": am4core.color(\"#ED7B84\"),\r\n         *  \"dataField\": \"valueY\"\r\n         *});\r\n         *```\r\n         *```JSON\r\n         *{\r\n         *  // ...\r\n         *  \"series\": [{\r\n         *    \"type\": \"ColumnSeries\",\r\n         *    \"heatRules\": [{\r\n         *      \"target\": \"columns.template\",\r\n         *      \"property\": \"fill\",\r\n         *      \"min\": \"#F5DBCB\",\r\n         *      \"max\": \"#ED7B84\",\r\n         *      \"dataField\": \"valueY\"\r\n         *    }]\r\n         *  }]\r\n         *}\r\n         *```\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/series/#Heat_maps} for more about heat rules\r\n         * @return  Heat rules\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            if (!this._heatRules) {\r\n                this._heatRules = new List();\r\n                this._heatRules.events.on(\"inserted\", function (event) {\r\n                    var heatRule = event.newValue;\r\n                    var target = heatRule.target;\r\n                    if (target) {\r\n                        var dataField_1 = heatRule.dataField;\r\n                        if (!$type.hasValue(dataField_1)) {\r\n                            dataField_1 = \"value\";\r\n                        }\r\n                        var seriesDataItem_1 = _this.dataItem;\r\n                        var property_1 = heatRule.property;\r\n                        var minValue = $type.toNumber(heatRule.minValue);\r\n                        var maxValue = $type.toNumber(heatRule.maxValue);\r\n                        if (!$type.isNumber(minValue) && !$type.isNumber(maxValue)) {\r\n                            _this.dataItem.events.on(\"calculatedvaluechanged\", function (event) {\r\n                                if (event.property == dataField_1) {\r\n                                    $iter.each(_this.dataItems.iterator(), function (dataItem) {\r\n                                        var foundSprite = false;\r\n                                        $array.each(dataItem.sprites, function (sprite) {\r\n                                            if (sprite.clonedFrom == target) {\r\n                                                var anySprite = sprite;\r\n                                                anySprite[property_1] = anySprite[property_1];\r\n                                                foundSprite = true;\r\n                                            }\r\n                                        });\r\n                                        if (!foundSprite) {\r\n                                            $array.each(dataItem.sprites, function (sprite) {\r\n                                                if (sprite instanceof Container) {\r\n                                                    $iter.each(sprite.children.iterator(), function (child) {\r\n                                                        if (child.className == target.className) {\r\n                                                            var anyChild = child;\r\n                                                            anyChild[property_1] = anyChild[property_1];\r\n                                                        }\r\n                                                        // giveup here\r\n                                                        else if (child instanceof Container) {\r\n                                                            child.deepInvalidate();\r\n                                                        }\r\n                                                    });\r\n                                                }\r\n                                            });\r\n                                        }\r\n                                    });\r\n                                }\r\n                            });\r\n                        }\r\n                        _this.dataItems.template.events.on(\"workingvaluechanged\", function (event) {\r\n                            if (event.property == dataField_1) {\r\n                                var dataItem = event.target;\r\n                                var foundSprite_1 = false;\r\n                                $array.each(dataItem.sprites, function (sprite) {\r\n                                    if (sprite.clonedFrom == target) {\r\n                                        var anySprite = sprite;\r\n                                        anySprite[property_1] = anySprite[property_1];\r\n                                        foundSprite_1 = true;\r\n                                    }\r\n                                });\r\n                                if (!foundSprite_1) {\r\n                                    $array.each(dataItem.sprites, function (sprite) {\r\n                                        if (sprite instanceof Container) {\r\n                                            $iter.each(sprite.children.iterator(), function (child) {\r\n                                                if (child.className == target.className) {\r\n                                                    var anyChild = child;\r\n                                                    anyChild[property_1] = anyChild[property_1];\r\n                                                }\r\n                                                // givup here\r\n                                                else if (child instanceof Container) {\r\n                                                    child.deepInvalidate();\r\n                                                }\r\n                                            });\r\n                                        }\r\n                                    });\r\n                                }\r\n                            }\r\n                        });\r\n                        target.adapter.add(property_1, function (value, ruleTarget, property) {\r\n                            var minValue = $type.toNumber(heatRule.minValue);\r\n                            var maxValue = $type.toNumber(heatRule.maxValue);\r\n                            var min = heatRule.min;\r\n                            var max = heatRule.max;\r\n                            if (ruleTarget instanceof Sprite) {\r\n                                var anySprite = ruleTarget;\r\n                                var propertyField = anySprite.propertyFields[property];\r\n                                if (propertyField && ruleTarget.dataItem) {\r\n                                    var dataContext = ruleTarget.dataItem.dataContext;\r\n                                    if (dataContext && $type.hasValue(dataContext[propertyField])) {\r\n                                        return value;\r\n                                    }\r\n                                }\r\n                            }\r\n                            var dataItem = ruleTarget.dataItem;\r\n                            if (!$type.isNumber(minValue)) {\r\n                                minValue = seriesDataItem_1.values[dataField_1].low;\r\n                            }\r\n                            if (!$type.isNumber(maxValue)) {\r\n                                maxValue = seriesDataItem_1.values[dataField_1].high;\r\n                            }\r\n                            if (dataItem) {\r\n                                var fieldValues = dataItem.values[dataField_1];\r\n                                if (fieldValues) {\r\n                                    var workingValue = dataItem.getActualWorkingValue(dataField_1);\r\n                                    if ($type.hasValue(min) && $type.hasValue(max) && $type.isNumber(minValue) && $type.isNumber(maxValue) && $type.isNumber(workingValue)) {\r\n                                        var percent = void 0;\r\n                                        if (heatRule.logarithmic) {\r\n                                            percent = (Math.log(workingValue) * Math.LOG10E - Math.log(minValue) * Math.LOG10E) / ((Math.log(maxValue) * Math.LOG10E - Math.log(minValue) * Math.LOG10E));\r\n                                        }\r\n                                        else {\r\n                                            percent = (workingValue - minValue) / (maxValue - minValue);\r\n                                        }\r\n                                        if ($type.isNumber(workingValue) && (!$type.isNumber(percent) || Math.abs(percent) == Infinity)) {\r\n                                            percent = 0.5;\r\n                                        }\r\n                                        // fixes problems if all values are the same\r\n                                        if ($type.isNumber(min)) {\r\n                                            return min + (max - min) * percent;\r\n                                        }\r\n                                        else if (min instanceof Color) {\r\n                                            return new Color($colors.interpolate(min.rgb, max.rgb, percent));\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            return value;\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n            return this._heatRules;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param config  Config\r\n     */\r\n    Series.prototype.processConfig = function (config) {\r\n        var heatRules;\r\n        if (config) {\r\n            // Set up bullets\r\n            if ($type.hasValue(config.bullets) && $type.isArray(config.bullets)) {\r\n                for (var i = 0, len = config.bullets.length; i < len; i++) {\r\n                    var bullets = config.bullets[i];\r\n                    if (!$type.hasValue(bullets.type)) {\r\n                        bullets.type = \"Bullet\";\r\n                    }\r\n                }\r\n            }\r\n            // Let's take heatRules out of the config, so that we can process\r\n            // them later, when bullets are already there\r\n            if ($type.hasValue(config.heatRules) && $type.isArray(config.heatRules)) {\r\n                heatRules = config.heatRules;\r\n                delete config.heatRules;\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n        // Process heat rules again, when all other elements are ready\r\n        if (heatRules) {\r\n            for (var i = 0, len = heatRules.length; i < len; i++) {\r\n                var rule = heatRules[i];\r\n                // Resolve target\r\n                var target = this;\r\n                if ($type.hasValue(rule.target) && $type.isString(rule.target)) {\r\n                    // Check if we can find this element by id\r\n                    if (this.map.hasKey(rule.target)) {\r\n                        target = this.map.getKey(rule.target);\r\n                    }\r\n                    else {\r\n                        var parts = rule.target.split(\".\");\r\n                        for (var x = 0; x < parts.length; x++) {\r\n                            if (target instanceof List) {\r\n                                var listitem = target.getIndex($type.toNumber(parts[x]));\r\n                                if (!listitem) {\r\n                                    target = target[parts[x]];\r\n                                }\r\n                                else {\r\n                                    target = listitem;\r\n                                }\r\n                            }\r\n                            else {\r\n                                var maybeIndex = parts[x].match(/^(.*)\\[([0-9]+)\\]/);\r\n                                if (maybeIndex) {\r\n                                    if (target[maybeIndex[1]] instanceof List) {\r\n                                        target = target[maybeIndex[1]].getIndex($type.toNumber(maybeIndex[2]));\r\n                                    }\r\n                                    else {\r\n                                        target = target[maybeIndex[1]][$type.toNumber(maybeIndex[2])];\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    target = target[parts[x]];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                rule.target = target;\r\n                // Resolve colors and percents\r\n                if ($type.hasValue(rule.min)) {\r\n                    rule.min = this.maybeColorOrPercent(rule.min);\r\n                }\r\n                if ($type.hasValue(rule.max)) {\r\n                    rule.max = this.maybeColorOrPercent(rule.max);\r\n                }\r\n            }\r\n            _super.prototype.processConfig.call(this, {\r\n                heatRules: heatRules\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Returns visibility value\r\n     * @ignore\r\n     */\r\n    /*\r\n        protected getVisibility(): boolean {\r\n            let hidden = this.getPropertyValue(\"hidden\");\r\n            if (hidden) {\r\n                return false;\r\n            }\r\n            else {\r\n                return super.getVisibility();\r\n            }\r\n        }*/\r\n    /**\r\n     * This function is used to sort element's JSON config properties, so that\r\n     * some properties that absolutely need to be processed last, can be put at\r\n     * the end.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param a  Element 1\r\n     * @param b  Element 2\r\n     * @return Sorting number\r\n     */\r\n    Series.prototype.configOrder = function (a, b) {\r\n        if (a == b) {\r\n            return 0;\r\n        }\r\n        // Must come last\r\n        else if (a == \"heatRules\") {\r\n            return 1;\r\n        }\r\n        else if (b == \"heatRules\") {\r\n            return -1;\r\n        }\r\n        else {\r\n            return _super.prototype.configOrder.call(this, a, b);\r\n        }\r\n    };\r\n    /**\r\n     * Sets `visibility` property:\r\n     *\r\n     * * `true` - visible\r\n     * * `false` - hidden\r\n     *\r\n     * @param value  true - visible, false - hidden\r\n     * @return Current visibility\r\n     */\r\n    Series.prototype.setVisibility = function (value) {\r\n        _super.prototype.setVisibility.call(this, value);\r\n        this.bulletsContainer.visible = value;\r\n    };\r\n    return Series;\r\n}(Component));\r\nexport { Series };\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Series\"] = Series;\r\nregistry.registeredClasses[\"SeriesDataItem\"] = SeriesDataItem;\r\n"],"mappings":"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A;AACA;AACA;IACQD,KAAK,CAACqB,aAAa,GAAG,KAAK;IAC3B;AACR;AACA;AACA;AACA;IACQrB,KAAK,CAACsB,YAAY,GAAG,IAAI;IACzB;AACR;AACA;IACQtB,KAAK,CAACuB,cAAc,GAAG,IAAIrC,cAAc,CAAC,CAAC;IAC3C;AACR;AACA;IACQc,KAAK,CAACwB,KAAK,GAAG,IAAI5C,UAAU,CAAC,CAAC;IAC9B;AACR;AACA;IACQoB,KAAK,CAACyB,KAAK,GAAG,IAAI7C,UAAU,CAAC,CAAC;IAC9B;AACR;AACA;IACQoB,KAAK,CAAC0B,KAAK,GAAG,IAAI9C,UAAU,CAAC,CAAC;IAC9B;AACR;AACA;IACQoB,KAAK,CAAC2B,KAAK,GAAG,IAAI/C,UAAU,CAAC,CAAC;IAC9B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQoB,KAAK,CAAC4B,eAAe,GAAG,IAAIhD,UAAU,CAAC,CAAC;IACxC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQoB,KAAK,CAAC6B,kBAAkB,GAAG,EAAE;IAC7B;AACR;AACA;IACQ7B,KAAK,CAAC8B,sBAAsB,GAAG,KAAK;IACpC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ9B,KAAK,CAAC+B,gBAAgB,GAAG,KAAK;IAC9B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ/B,KAAK,CAACgC,cAAc,GAAG,IAAI;IAC3B;AACR;AACA;AACA;AACA;AACA;IACQhC,KAAK,CAACiC,WAAW,GAAG,IAAI;IACxB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQjC,KAAK,CAACkC,oBAAoB,GAAG,KAAK;IAClC,IAAIlC,KAAK,CAACmC,WAAW,KAAKf,MAAM,EAAE;MAC9B,MAAM,IAAIgB,KAAK,CAAC,8EAA8E,CAAC;IACnG;IACApC,KAAK,CAACE,SAAS,GAAG,QAAQ;IAC1BF,KAAK,CAACqC,UAAU,GAAG,KAAK;IACxBrC,KAAK,CAACsC,MAAM,GAAG,MAAM;IACrBtC,KAAK,CAACuC,WAAW,GAAG,KAAK;IACzBvC,KAAK,CAACwC,gBAAgB,CAAC,QAAQ,EAAE,KAAK,CAAC;IACvCxC,KAAK,CAACyC,UAAU,GAAG,IAAIhE,IAAI,CAAC,CAAC;IAC7BuB,KAAK,CAACyC,UAAU,CAACC,MAAM,CAACC,EAAE,CAAC,UAAU,EAAE3C,KAAK,CAAC4C,gBAAgB,EAAE5C,KAAK,EAAE,KAAK,CAAC;IAC5EA,KAAK,CAAC6C,iBAAiB,GAAG,CAAC,CAAC,CAAC;IAC7B7C,KAAK,CAAC8C,aAAa,GAAG9C,KAAK,CAAC+C,WAAW,CAAChE,SAAS,CAAC;IAClDiB,KAAK,CAAC8C,aAAa,CAACP,WAAW,GAAG,KAAK;IACvCvC,KAAK,CAAC8C,aAAa,CAACE,IAAI,GAAGhD,KAAK,CAAC+C,WAAW,CAACvE,MAAM,CAAC;IACpDwB,KAAK,CAACW,UAAU,CAACC,IAAI,CAACZ,KAAK,CAAC8C,aAAa,CAAC;IAC1C;IACA,IAAIG,gBAAgB,GAAGjD,KAAK,CAAC8C,aAAa,CAACC,WAAW,CAAChE,SAAS,CAAC;IACjEiB,KAAK,CAACkD,cAAc,CAACtC,IAAI,CAACqC,gBAAgB,CAAC;IAC3CA,gBAAgB,CAACV,WAAW,GAAG,KAAK;IACpCU,gBAAgB,CAACX,MAAM,GAAG,MAAM;IAChCW,gBAAgB,CAACE,aAAa,GAAGnD,KAAK;IACtCA,KAAK,CAACW,UAAU,CAACC,IAAI,CAACqC,gBAAgB,CAAC;IACvCjD,KAAK,CAACiD,gBAAgB,GAAGA,gBAAgB;IACzCjD,KAAK,CAACoD,OAAO,GAAG,IAAIpE,OAAO,CAAC,CAAC;IAC7BgB,KAAK,CAACoD,OAAO,CAACD,aAAa,GAAGnD,KAAK;IACnCA,KAAK,CAACW,UAAU,CAACC,IAAI,CAACZ,KAAK,CAACoD,OAAO,CAAC;IACpCpD,KAAK,CAACqD,WAAW,CAACC,gBAAgB,GAAG9D,KAAK,CAAC+D,OAAO;IAClD;IACAvD,KAAK,CAACwD,QAAQ,GAAGxD,KAAK,CAACyD,cAAc,CAAC,CAAC;IACvCzD,KAAK,CAACW,UAAU,CAACC,IAAI,CAACZ,KAAK,CAACwD,QAAQ,CAAC;IACrCxD,KAAK,CAACwD,QAAQ,CAACE,SAAS,GAAG1D,KAAK;IAChC;IACAA,KAAK,CAAC2D,IAAI,GAAG,OAAO;IACpB3D,KAAK,CAACK,UAAU,CAAC,CAAC;IAClB,OAAOL,KAAK;EAChB;EACA;AACJ;AACA;AACA;AACA;EACIoB,MAAM,CAACZ,SAAS,CAACH,UAAU,GAAG,YAAY;IACtCN,MAAM,CAACS,SAAS,CAACH,UAAU,CAACJ,IAAI,CAAC,IAAI,CAAC;IACtC,IAAId,OAAO,CAACyE,gBAAgB,IAAI,IAAI,CAACX,gBAAgB,EAAE;MACnD,IAAI,CAACA,gBAAgB,CAAC/C,SAAS,GAAG,IAAI,CAACA,SAAS,GAAG,UAAU;MAC7D,IAAI,CAAC+C,gBAAgB,CAACY,YAAY,CAAC,CAAC;IACxC;EACJ,CAAC;EACD;AACJ;AACA;AACA;EACIzC,MAAM,CAACZ,SAAS,CAACsD,qBAAqB,GAAG,YAAY;IACjD/D,MAAM,CAACS,SAAS,CAACsD,qBAAqB,CAAC7D,IAAI,CAAC,IAAI,CAAC;IACjD,IAAI,CAACN,KAAK,CAACoE,QAAQ,CAAC,IAAI,CAACC,WAAW,CAAC,EAAE;MACnC,IAAI,CAACA,WAAW,GAAG,IAAI,CAACC,QAAQ,CAACC,SAAS,CAAC,QAAQ,CAAC;IACxD;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACI9C,MAAM,CAACZ,SAAS,CAACiD,cAAc,GAAG,YAAY;IAC1C,OAAO,IAAI3D,cAAc,CAAC,CAAC;EAC/B,CAAC;EACDQ,MAAM,CAACC,cAAc,CAACa,MAAM,CAACZ,SAAS,EAAE,OAAO,EAAE;IAC7C;AACR;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAAC0D,MAAM;IACtB,CAAC;IACD;AACR;AACA;AACA;AACA;IACQjD,GAAG,EAAE,SAAAA,CAAUd,KAAK,EAAE;MAClB,IAAI,CAAC+D,MAAM,GAAG/D,KAAK;IACvB,CAAC;IACDS,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF;AACJ;AACA;AACA;AACA;EACIM,MAAM,CAACZ,SAAS,CAAC4D,cAAc,GAAG,UAAUC,MAAM,EAAE;IAChD;EAAA,CACH;EACD;AACJ;AACA;AACA;AACA;AACA;EACIjD,MAAM,CAACZ,SAAS,CAAC8D,aAAa,GAAG,UAAUC,KAAK,EAAE;IAC9C,IAAIvE,KAAK,GAAG,IAAI;IAChB,IAAIqE,MAAM,GAAGE,KAAK,CAACC,QAAQ;IAC3BH,MAAM,CAACI,UAAU,GAAG,IAAI;IACxB;IACA;IACA,IAAI,CAAC/B,MAAM,CAACgC,IAAI,CAAC,eAAe,EAAE,UAAUC,EAAE,EAAE;MAC5C,IAAI3E,KAAK,CAAC4E,cAAc,CAAC,CAAC,EAAE;QACxBP,MAAM,CAACQ,SAAS,GAAG,IAAI;MAC3B;IACJ,CAAC,CAAC;IACF,IAAI,CAACC,UAAU,CAAC,CAAC;EACrB,CAAC;EACD;AACJ;AACA;AACA;AACA;EACI1D,MAAM,CAACZ,SAAS,CAACuE,YAAY,GAAG,UAAUR,KAAK,EAAE;IAC7C,IAAIF,MAAM,GAAGE,KAAK,CAACS,QAAQ;IAC3B,IAAI,CAACC,SAAS,CAACC,IAAI,CAAC,UAAU1B,QAAQ,EAAE;MACpC,IAAI2B,UAAU,GAAG3B,QAAQ,CAACxC,OAAO,CAACoE,MAAM,CAACf,MAAM,CAACgB,GAAG,CAAC;MACpD,IAAIF,UAAU,EAAE;QACZA,UAAU,CAACpE,OAAO,CAAC,CAAC;MACxB;IACJ,CAAC,CAAC;IACF,IAAI,CAAC+D,UAAU,CAAC,CAAC;EACrB,CAAC;EACD;AACJ;AACA;AACA;AACA;EACI1D,MAAM,CAACZ,SAAS,CAAC8E,iBAAiB,GAAG,YAAY;IAC7CvF,MAAM,CAACS,SAAS,CAAC8E,iBAAiB,CAACrF,IAAI,CAAC,IAAI,CAAC;IAC7C,IAAI,CAACsF,aAAa,CAAC,KAAK,CAAC;EAC7B,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACInE,MAAM,CAACZ,SAAS,CAACgF,aAAa,GAAG,UAAUC,GAAG,EAAEC,UAAU,EAAE;IACxD;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAEQ;IACA;IACA;IACA,KAAK,IAAIC,CAAC,GAAGD,UAAU,EAAEC,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAClC,IAAInC,QAAQ,GAAG,IAAI,CAACyB,SAAS,CAACW,QAAQ,CAACD,CAAC,CAAC;MACzC,IAAIvF,KAAK,GAAGoD,QAAQ,CAACqC,qBAAqB,CAACJ,GAAG,CAAC;MAC/C,IAAI9F,KAAK,CAACmG,QAAQ,CAAC1F,KAAK,CAAC,EAAE;QACvB,OAAOA,KAAK;MAChB;IACJ;IACA,OAAO,IAAI;EACf,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIgB,MAAM,CAACZ,SAAS,CAACuF,qBAAqB,GAAG,UAAUN,GAAG,EAAE;IACpD,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACV,SAAS,CAACe,MAAM,EAAEL,CAAC,EAAE,EAAE;MAC5C,IAAInC,QAAQ,GAAG,IAAI,CAACyB,SAAS,CAACW,QAAQ,CAACD,CAAC,CAAC;MACzC,IAAIvF,KAAK,GAAGoD,QAAQ,CAACrD,MAAM,CAACsF,GAAG,CAAC,CAACrF,KAAK;MACtC,IAAIT,KAAK,CAACmG,QAAQ,CAAC1F,KAAK,CAAC,EAAE;QACvB,OAAOA,KAAK;MAChB;IACJ;IACA,OAAO,IAAI;EACf,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIgB,MAAM,CAACZ,SAAS,CAACyF,iBAAiB,GAAG,YAAY;IAC7ClG,MAAM,CAACS,SAAS,CAACyF,iBAAiB,CAAChG,IAAI,CAAC,IAAI,CAAC;IAC7C,IAAI,CAACsF,aAAa,CAAC,IAAI,CAAC;EAC5B,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACInE,MAAM,CAACZ,SAAS,CAAC+E,aAAa,GAAG,UAAUW,OAAO,EAAE;IAChD,IAAIlG,KAAK,GAAG,IAAI;IAChB,IAAI,CAAC,IAAI,CAACkC,oBAAoB,EAAE;MAC5B,IAAI+C,SAAS,GAAG,IAAI,CAACA,SAAS;MAC9B,IAAIkB,OAAO,GAAG,CAAC,CAAC;MAChB,IAAIC,KAAK,GAAG,CAAC,CAAC;MACd,IAAIC,aAAa,GAAG,CAAC,CAAC;MACtB,IAAIC,KAAK,GAAG,CAAC,CAAC;MACd,IAAIC,MAAM,GAAG,CAAC,CAAC;MACf,IAAIC,MAAM,GAAG,CAAC,CAAC;MACf,IAAIC,OAAO,GAAG,CAAC,CAAC;MAChB,IAAIC,UAAU,GAAG,CAAC,CAAC;MACnB,IAAIC,OAAO,GAAG,CAAC,CAAC;MAChB,IAAIC,eAAe,GAAG,CAAC,CAAC;MACxB;MACA,IAAIC,YAAY,GAAGtH,KAAK,CAACuH,GAAG,CAAC,CAAC,EAAE,IAAI,CAACpB,UAAU,CAAC;MAChDmB,YAAY,GAAGtH,KAAK,CAACwH,GAAG,CAACF,YAAY,EAAE,IAAI,CAAC5B,SAAS,CAACe,MAAM,CAAC;MAC7D,IAAIgB,QAAQ,GAAGzH,KAAK,CAACwH,GAAG,CAAC,IAAI,CAACC,QAAQ,EAAE,IAAI,CAAC/B,SAAS,CAACe,MAAM,CAAC;MAC9D,IAAI,CAACrG,KAAK,CAACmG,QAAQ,CAACe,YAAY,CAAC,EAAE;QAC/BA,YAAY,GAAG,CAAC;MACpB;MACA,IAAI,CAAClH,KAAK,CAACmG,QAAQ,CAACkB,QAAQ,CAAC,EAAE;QAC3BA,QAAQ,GAAG,IAAI,CAAC/B,SAAS,CAACe,MAAM;MACpC;MACA,IAAIa,YAAY,GAAG,CAAC,EAAE;QAClB,IAAII,UAAU,GAAGhC,SAAS,CAACW,QAAQ,CAACiB,YAAY,GAAG,CAAC,CAAC;QACrDnH,OAAO,CAACwF,IAAI,CAAC+B,UAAU,CAAC9G,MAAM,EAAE,UAAUsF,GAAG,EAAEtF,MAAM,EAAE;UACnD,IAAIC,KAAK,GAAG6G,UAAU,CAACpB,qBAAqB,CAACJ,GAAG,CAAC;UACjD,IAAI9F,KAAK,CAACmG,QAAQ,CAAC1F,KAAK,CAAC,EAAE;YACvB;YACAsG,UAAU,CAACjB,GAAG,CAAC,GAAGrF,KAAK;UAC3B;QACJ,CAAC,CAAC;MACN;MACA,IAAI8G,OAAO,GAAG,SAAAA,CAAUvB,CAAC,EAAE;QACvB,IAAIwB,UAAU,GAAGlC,SAAS,CAACW,QAAQ,CAACD,CAAC,CAAC;QACtCjG,OAAO,CAACwF,IAAI,CAACiC,UAAU,CAAChH,MAAM,EAAE,UAAUsF,GAAG,EAAEtF,MAAM,EAAE;UACnD,IAAIC,KAAK,GAAG+G,UAAU,CAACtB,qBAAqB,CAACJ,GAAG,CAAC;UACjD;UACA,IAAI9F,KAAK,CAACmG,QAAQ,CAAC1F,KAAK,CAAC,EAAE;YACvB;YACA,IAAI,CAACT,KAAK,CAACmG,QAAQ,CAACK,OAAO,CAACV,GAAG,CAAC,CAAC,EAAE;cAC/BU,OAAO,CAACV,GAAG,CAAC,GAAG,CAAC;YACpB;YACAU,OAAO,CAACV,GAAG,CAAC,EAAE;YACd;YACA,IAAI,CAAC9F,KAAK,CAACmG,QAAQ,CAACM,KAAK,CAACX,GAAG,CAAC,CAAC,EAAE;cAC7BW,KAAK,CAACX,GAAG,CAAC,GAAG,CAAC;YAClB;YACAW,KAAK,CAACX,GAAG,CAAC,IAAIrF,KAAK;YACnB;YACA,IAAI,CAACT,KAAK,CAACmG,QAAQ,CAACO,aAAa,CAACZ,GAAG,CAAC,CAAC,EAAE;cACrCY,aAAa,CAACZ,GAAG,CAAC,GAAG,CAAC;YAC1B;YACAY,aAAa,CAACZ,GAAG,CAAC,IAAI2B,IAAI,CAACC,GAAG,CAACjH,KAAK,CAAC;YACrC;YACA,IAAI,CAACT,KAAK,CAACmG,QAAQ,CAACU,MAAM,CAACf,GAAG,CAAC,CAAC,EAAE;cAC9Be,MAAM,CAACf,GAAG,CAAC,GAAGrF,KAAK;YACvB;YACA;YACAqG,OAAO,CAAChB,GAAG,CAAC,GAAGrF,KAAK;YACpB;YACA,IAAI,CAACT,KAAK,CAACmG,QAAQ,CAACQ,KAAK,CAACb,GAAG,CAAC,CAAC,EAAE;cAC7Ba,KAAK,CAACb,GAAG,CAAC,GAAGrF,KAAK;YACtB,CAAC,MACI;cACD,IAAIkG,KAAK,CAACb,GAAG,CAAC,GAAGrF,KAAK,EAAE;gBACpBkG,KAAK,CAACb,GAAG,CAAC,GAAGrF,KAAK;cACtB;YACJ;YACA;YACA,IAAI,CAACT,KAAK,CAACmG,QAAQ,CAACS,MAAM,CAACd,GAAG,CAAC,CAAC,EAAE;cAC9Bc,MAAM,CAACd,GAAG,CAAC,GAAGrF,KAAK;YACvB,CAAC,MACI;cACD,IAAImG,MAAM,CAACd,GAAG,CAAC,GAAGrF,KAAK,EAAE;gBACrBmG,MAAM,CAACd,GAAG,CAAC,GAAGrF,KAAK;cACvB;YACJ;YACA,IAAI,CAACT,KAAK,CAACmG,QAAQ,CAACa,OAAO,CAAClB,GAAG,CAAC,CAAC,EAAE;cAC/BkB,OAAO,CAAClB,GAAG,CAAC,GAAGzF,KAAK,CAACwF,aAAa,CAACC,GAAG,EAAEoB,YAAY,CAAC;YACzD;YACA,IAAI,CAAClH,KAAK,CAACmG,QAAQ,CAACc,eAAe,CAACnB,GAAG,CAAC,CAAC,EAAE;cACvCmB,eAAe,CAACnB,GAAG,CAAC,GAAGzF,KAAK,CAAC+F,qBAAqB,CAACN,GAAG,CAAC;YAC3D;YACA;YACA0B,UAAU,CAACG,kBAAkB,CAAC7B,GAAG,EAAErF,KAAK,GAAGuG,OAAO,CAAClB,GAAG,CAAC,EAAE,QAAQ,CAAC;YAClE;YACA;YACA0B,UAAU,CAACG,kBAAkB,CAAC7B,GAAG,EAAE,CAACrF,KAAK,GAAGuG,OAAO,CAAClB,GAAG,CAAC,IAAIkB,OAAO,CAAClB,GAAG,CAAC,GAAG,GAAG,EAAE,eAAe,CAAC;YAChG0B,UAAU,CAACG,kBAAkB,CAAC7B,GAAG,EAAGrF,KAAK,GAAGwG,eAAe,CAACnB,GAAG,CAAC,EAAG,aAAa,CAAC;YACjF0B,UAAU,CAACG,kBAAkB,CAAC7B,GAAG,EAAE,CAACrF,KAAK,GAAGwG,eAAe,CAACnB,GAAG,CAAC,IAAImB,eAAe,CAACnB,GAAG,CAAC,GAAG,GAAG,EAAE,oBAAoB,CAAC;YACrH;YACA,IAAI8B,SAAS,GAAGb,UAAU,CAACjB,GAAG,CAAC;YAC/B,IAAI,CAAC9F,KAAK,CAACmG,QAAQ,CAACyB,SAAS,CAAC,EAAE;cAC5BA,SAAS,GAAGnH,KAAK;YACrB;YACA+G,UAAU,CAACG,kBAAkB,CAAC7B,GAAG,EAAErF,KAAK,GAAGmH,SAAS,EAAE,gBAAgB,CAAC;YACvE;YACAJ,UAAU,CAACG,kBAAkB,CAAC7B,GAAG,EAAE,CAACrF,KAAK,GAAGmH,SAAS,IAAIA,SAAS,GAAG,GAAG,EAAE,uBAAuB,CAAC;YAClG;YACAb,UAAU,CAACjB,GAAG,CAAC,GAAGrF,KAAK;UAC3B;QACJ,CAAC,CAAC;MACN,CAAC;MACD,KAAK,IAAIuF,CAAC,GAAGkB,YAAY,EAAElB,CAAC,GAAGqB,QAAQ,EAAErB,CAAC,EAAE,EAAE;QAC1CuB,OAAO,CAACvB,CAAC,CAAC;MACd;MACA,IAAI,IAAI,CAAC5D,gBAAgB,EAAE;QACvB,IAAIyF,OAAO,GAAG,SAAAA,CAAU7B,CAAC,EAAE;UACvB,IAAI8B,UAAU,GAAGxC,SAAS,CAACW,QAAQ,CAACD,CAAC,CAAC;UACtCjG,OAAO,CAACwF,IAAI,CAACuC,UAAU,CAACtH,MAAM,EAAE,UAAUsF,GAAG,EAAE;YAC3C,IAAIiC,IAAI,GAAGrB,aAAa,CAACZ,GAAG,CAAC;YAC7B,IAAIrF,KAAK,GAAGqH,UAAU,CAAC5B,qBAAqB,CAACJ,GAAG,CAAC;YACjD,IAAI9F,KAAK,CAACmG,QAAQ,CAAC1F,KAAK,CAAC,EAAE;cACvB,IAAIsH,IAAI,GAAG,CAAC,EAAE;gBACV,IAAI1H,KAAK,CAACgC,cAAc,EAAE;kBACtB;kBACA;kBACA;kBACA,IAAI5B,KAAK,IAAIsH,IAAI,EAAE;oBACfA,IAAI,GAAGD,UAAU,CAACtH,MAAM,CAACsF,GAAG,CAAC,CAACrF,KAAK;kBACvC;gBACJ;gBACA,IAAIuH,OAAO,GAAGvH,KAAK,GAAGsH,IAAI,GAAG,GAAG;gBAChCD,UAAU,CAACH,kBAAkB,CAAC7B,GAAG,EAAEkC,OAAO,EAAE,SAAS,CAAC;cAC1D,CAAC,MACI;gBACDF,UAAU,CAACH,kBAAkB,CAAC7B,GAAG,EAAE,CAAC,EAAE,SAAS,CAAC;cACpD;YACJ;UACJ,CAAC,CAAC;QACN,CAAC;QACD,KAAK,IAAIE,CAAC,GAAGkB,YAAY,EAAElB,CAAC,GAAGqB,QAAQ,EAAErB,CAAC,EAAE,EAAE;UAC1C6B,OAAO,CAAC7B,CAAC,CAAC;QACd;MACJ;MACA;MACA;MACA;MACA,IAAIkB,YAAY,GAAG,CAAC,EAAE;QAClB,IAAIe,UAAU,GAAG3C,SAAS,CAACW,QAAQ,CAACiB,YAAY,GAAG,CAAC,CAAC;QACrDnH,OAAO,CAACwF,IAAI,CAAC0C,UAAU,CAACzH,MAAM,EAAE,UAAUsF,GAAG,EAAE;UAC3C,IAAIrF,KAAK,GAAGwH,UAAU,CAACzH,MAAM,CAACsF,GAAG,CAAC,CAACrF,KAAK;UACxC;UACAwH,UAAU,CAACN,kBAAkB,CAAC7B,GAAG,EAAErF,KAAK,GAAGoG,MAAM,CAACf,GAAG,CAAC,EAAE,QAAQ,CAAC;UACjE;UACAmC,UAAU,CAACN,kBAAkB,CAAC7B,GAAG,EAAE,CAACrF,KAAK,GAAGoG,MAAM,CAACf,GAAG,CAAC,IAAIe,MAAM,CAACf,GAAG,CAAC,GAAG,GAAG,EAAE,eAAe,CAAC;QAClG,CAAC,CAAC;MACN;MACA;MACA,IAAIoC,UAAU,GAAG,IAAI,CAACrE,QAAQ;MAC9B9D,OAAO,CAACwF,IAAI,CAAC2C,UAAU,CAAC1H,MAAM,EAAE,UAAUsF,GAAG,EAAE;QAC3CoC,UAAU,CAACP,kBAAkB,CAAC7B,GAAG,EAAEW,KAAK,CAACX,GAAG,CAAC,EAAE,KAAK,CAAC;QACrDoC,UAAU,CAACP,kBAAkB,CAAC7B,GAAG,EAAEY,aAAa,CAACZ,GAAG,CAAC,EAAE,aAAa,CAAC;QACrEoC,UAAU,CAACP,kBAAkB,CAAC7B,GAAG,EAAEW,KAAK,CAACX,GAAG,CAAC,GAAGU,OAAO,CAACV,GAAG,CAAC,EAAE,SAAS,CAAC;QACxEoC,UAAU,CAACP,kBAAkB,CAAC7B,GAAG,EAAEe,MAAM,CAACf,GAAG,CAAC,EAAE,MAAM,CAAC;QACvDoC,UAAU,CAACP,kBAAkB,CAAC7B,GAAG,EAAEgB,OAAO,CAAChB,GAAG,CAAC,EAAE,OAAO,CAAC;QACzDoC,UAAU,CAACP,kBAAkB,CAAC7B,GAAG,EAAEa,KAAK,CAACb,GAAG,CAAC,EAAE,KAAK,CAAC;QACrDoC,UAAU,CAACP,kBAAkB,CAAC7B,GAAG,EAAEc,MAAM,CAACd,GAAG,CAAC,EAAE,MAAM,CAAC;QACvDoC,UAAU,CAACP,kBAAkB,CAAC7B,GAAG,EAAEU,OAAO,CAACV,GAAG,CAAC,EAAE,OAAO,CAAC;MAC7D,CAAC,CAAC;IACN;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIrE,MAAM,CAACZ,SAAS,CAACsH,QAAQ,GAAG,YAAY;IACpC,IAAIrI,MAAM,CAACsI,IAAI,CAAC,CAAC,EAAE;MACf,IAAI,CAACC,OAAO,CAAC/G,KAAK,CAAC,CAAC;IACxB;IACA3B,KAAK,CAAC4F,IAAI,CAAC,IAAI,CAACzC,UAAU,CAACwF,QAAQ,CAAC,CAAC,EAAE,UAAUC,SAAS,EAAE;MACxD;MACA;MACAA,SAAS,CAACJ,QAAQ,CAAC,CAAC;IACxB,CAAC,CAAC;IACF/H,MAAM,CAACS,SAAS,CAACsH,QAAQ,CAAC7H,IAAI,CAAC,IAAI,CAAC;IACpC,IAAIgD,gBAAgB,GAAG,IAAI,CAACA,gBAAgB;IAC5CA,gBAAgB,CAACkF,IAAI,GAAG,IAAI,CAACA,IAAI;IACjClF,gBAAgB,CAACmF,MAAM,GAAG,IAAI,CAACA,MAAM;IACrCnF,gBAAgB,CAACoF,CAAC,GAAG,IAAI,CAACC,MAAM;IAChCrF,gBAAgB,CAACsF,CAAC,GAAG,IAAI,CAACC,MAAM;IAChC,IAAI,IAAI,CAACvF,gBAAgB,CAACwF,QAAQ,CAACzC,MAAM,GAAG,CAAC,EAAE;MAC3C,IAAI,IAAI,CAAC1E,YAAY,EAAE;QACnB,KAAK,IAAIqE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACD,UAAU,EAAEC,CAAC,EAAE,EAAE;UACtC,IAAInC,QAAQ,GAAG,IAAI,CAACyB,SAAS,CAACW,QAAQ,CAACD,CAAC,CAAC;UACzC,IAAInC,QAAQ,EAAE;YACVA,QAAQ,CAACxC,OAAO,CAACkE,IAAI,CAAC,UAAUO,GAAG,EAAEpB,MAAM,EAAE;cACzCA,MAAM,CAACqE,UAAU,GAAG,IAAI;YAC5B,CAAC,CAAC;UACN;QACJ;QACA,KAAK,IAAI/C,CAAC,GAAG,IAAI,CAACV,SAAS,CAACe,MAAM,GAAG,CAAC,EAAEL,CAAC,GAAG,IAAI,CAACqB,QAAQ,EAAErB,CAAC,EAAE,EAAE;UAC5D,IAAInC,QAAQ,GAAG,IAAI,CAACyB,SAAS,CAACW,QAAQ,CAACD,CAAC,CAAC;UACzC,IAAInC,QAAQ,EAAE;YACVA,QAAQ,CAACxC,OAAO,CAACkE,IAAI,CAAC,UAAUO,GAAG,EAAEpB,MAAM,EAAE;cACzCA,MAAM,CAACqE,UAAU,GAAG,IAAI;YAC5B,CAAC,CAAC;UACN;QACJ;MACJ,CAAC,MACI;QACD,IAAI,CAACzF,gBAAgB,CAACwF,QAAQ,CAACvD,IAAI,CAAC,UAAUb,MAAM,EAAE;UAClDA,MAAM,CAACqE,UAAU,GAAG,IAAI;QAC5B,CAAC,CAAC;MACN;IACJ;IACA,IAAI,CAACC,mBAAmB,CAAC,CAAC;EAC9B,CAAC;EACD;AACJ;AACA;EACIvH,MAAM,CAACZ,SAAS,CAACmI,mBAAmB,GAAG,YAAY;IAC/C,IAAI,IAAI,CAACC,SAAS,EAAE;MAChB,IAAIP,CAAC,GAAG,CAAC;MACT,IAAIE,CAAC,GAAG,CAAC;MACT,IAAIM,CAAC,GAAG,IAAI,CAACD,SAAS,CAACE,QAAQ;MAC/B,IAAIC,CAAC,GAAG,IAAI,CAACH,SAAS,CAACI,SAAS;MAChC,IAAIC,IAAI,GAAG;QAAEZ,CAAC,EAAEA,CAAC;QAAEE,CAAC,EAAEA,CAAC;QAAEW,KAAK,EAAEL,CAAC;QAAEM,MAAM,EAAEJ;MAAE,CAAC;MAC9C,IAAI,CAAC3F,OAAO,CAACgG,SAAS,CAACH,IAAI,CAAC;IAChC;EACJ,CAAC;EACD7H,MAAM,CAACZ,SAAS,CAAC6I,kBAAkB,GAAG,UAAU7F,QAAQ,EAAE8F,cAAc,EAAE;IACtE,OAAO,IAAI;EACf,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIlI,MAAM,CAACZ,SAAS,CAAC+I,mBAAmB,GAAG,UAAU/F,QAAQ,EAAE;IACvD,IAAIxD,KAAK,GAAG,IAAI;IAChBD,MAAM,CAACS,SAAS,CAAC+I,mBAAmB,CAACtJ,IAAI,CAAC,IAAI,EAAEuD,QAAQ,CAAC;IACzD,IAAI,IAAI,CAAClC,YAAY,EAAE;MACnB,IAAI,CAAC,IAAI,CAACkI,QAAQ,EAAE;QAChB,IAAI,CAACvG,gBAAgB,CAACwG,OAAO,GAAG,IAAI;MACxC;MACA,IAAI,CAACzI,OAAO,CAACkE,IAAI,CAAC,UAAUoE,cAAc,EAAE;QACxC;QACA,IAAIjF,MAAM,GAAGb,QAAQ,CAACxC,OAAO,CAACoE,MAAM,CAACkE,cAAc,CAACjE,GAAG,CAAC;QACxD,IAAIrF,KAAK,CAACqJ,kBAAkB,CAAC7F,QAAQ,EAAE8F,cAAc,CAAC,EAAE;UACpD,IAAI,CAACjF,MAAM,EAAE;YACT,IAAIqF,aAAa,GAAGJ,cAAc,CAACK,cAAc,CAACC,QAAQ;YAC1D,IAAIC,WAAW,GAAGrG,QAAQ,CAACqG,WAAW;YACtC,IAAIH,aAAa,IAAIG,WAAW,IAAIA,WAAW,CAACH,aAAa,CAAC,KAAK,KAAK,EAAE;cACtEJ,cAAc,CAACQ,aAAa,GAAG,KAAK;cACpCR,cAAc,CAACM,QAAQ,GAAG,KAAK;cAC/BvF,MAAM,GAAGiF,cAAc,CAACS,KAAK,CAAC,CAAC;cAC/BT,cAAc,CAACM,QAAQ,GAAG,IAAI;cAC9BN,cAAc,CAACQ,aAAa,GAAG,IAAI;YACvC,CAAC,MACI;cACDzF,MAAM,GAAGiF,cAAc,CAACS,KAAK,CAAC,CAAC;YACnC;YACA1F,MAAM,CAAC9B,WAAW,GAAG,KAAK;YAC1BiB,QAAQ,CAACwG,SAAS,CAAC3F,MAAM,CAAC;YAC1B,IAAI,CAACrE,KAAK,CAACyJ,OAAO,IAAIzJ,KAAK,CAACiK,QAAQ,EAAE;cAClC5F,MAAM,CAAC6F,IAAI,CAAC,CAAC,CAAC;YAClB;UACJ;UACA,IAAIC,eAAe,GAAG9F,MAAM,CAACb,QAAQ;UACrC,IAAI2G,eAAe,IAAI3G,QAAQ,EAAE;YAC7B;YACA,IAAI2G,eAAe,EAAE;cACjBA,eAAe,CAACnJ,OAAO,CAACoJ,MAAM,CAACd,cAAc,CAACjE,GAAG,EAAEgF,SAAS,CAAC;YACjE;YACA,IAAIC,YAAY,GAAGtK,KAAK,CAACuK,cAAc;YACvC,IAAIlG,MAAM,YAAYpF,MAAM,EAAE;cAC1B,IAAI,CAACqL,YAAY,EAAE;gBACfA,YAAY,GAAI,GAAG,GAAGjG,MAAM,CAACmG,MAAM,GAAG,MAAM,GAAGnG,MAAM,CAACoG,MAAM,GAAG,GAAI;cACvE;cACA,IAAIpG,MAAM,CAACqG,SAAS,EAAE;gBAClBlH,QAAQ,CAACd,MAAM,CAACC,EAAE,CAAC,qBAAqB,EAAE0B,MAAM,CAACsG,cAAc,EAAEtG,MAAM,EAAE,KAAK,CAAC;gBAC/E;gBACArE,KAAK,CAACwD,QAAQ,CAACd,MAAM,CAACC,EAAE,CAAC,qBAAqB,EAAE0B,MAAM,CAACsG,cAAc,EAAEtG,MAAM,EAAE,KAAK,CAAC;cACzF;cACAA,MAAM,CAACsG,cAAc,CAAC,CAAC;YAC3B;YACA;YACA,IAAItG,MAAM,CAACQ,SAAS,EAAE;cAClBR,MAAM,CAAC3B,MAAM,CAACC,EAAE,CAAC,OAAO,EAAE,UAAUgC,EAAE,EAAE;gBACpCN,MAAM,CAACL,WAAW,GAAGhE,KAAK,CAAC4K,cAAc,CAACN,YAAY,EAAEjG,MAAM,CAACb,QAAQ,CAAC;cAC5E,CAAC,EAAE6G,SAAS,EAAE,KAAK,CAAC;cACpBhG,MAAM,CAAC3B,MAAM,CAACC,EAAE,CAAC,MAAM,EAAE,UAAUgC,EAAE,EAAE;gBACnCN,MAAM,CAACL,WAAW,GAAG,EAAE;cAC3B,CAAC,EAAEqG,SAAS,EAAE,KAAK,CAAC;YACxB;YACA,IAAIhG,MAAM,CAACwG,SAAS,EAAE;cAClBxG,MAAM,CAAC3B,MAAM,CAACC,EAAE,CAAC,MAAM,EAAE,UAAUgC,EAAE,EAAE;gBACnCN,MAAM,CAACL,WAAW,GAAGhE,KAAK,CAAC4K,cAAc,CAACN,YAAY,EAAEjG,MAAM,CAACb,QAAQ,CAAC;cAC5E,CAAC,EAAE6G,SAAS,EAAE,KAAK,CAAC;cACpBhG,MAAM,CAAC3B,MAAM,CAACC,EAAE,CAAC,KAAK,EAAE,UAAUgC,EAAE,EAAE;gBAClCN,MAAM,CAACL,WAAW,GAAG,EAAE;cAC3B,CAAC,EAAEqG,SAAS,EAAE,KAAK,CAAC;YACxB;UACJ;UACAhG,MAAM,CAACyG,MAAM,GAAG9K,KAAK,CAACiD,gBAAgB;UACtCO,QAAQ,CAACxC,OAAO,CAACoJ,MAAM,CAACd,cAAc,CAACjE,GAAG,EAAEhB,MAAM,CAAC;UACnD;UACAA,MAAM,CAACyE,QAAQ,GAAGtF,QAAQ,CAACuH,SAAS;UACpC1G,MAAM,CAAC2E,SAAS,GAAGxF,QAAQ,CAACwH,UAAU;UACtC3G,MAAM,CAACqE,UAAU,GAAG,KAAK;UACzB1I,KAAK,CAACoE,cAAc,CAACC,MAAM,CAAC;QAChC,CAAC,MACI;UACD,IAAIA,MAAM,EAAE;YACRA,MAAM,CAACqE,UAAU,GAAG,IAAI;UAC5B;QACJ;MACJ,CAAC,CAAC;IACN,CAAC,MACI;MACD,IAAI,CAACzF,gBAAgB,CAACwG,OAAO,GAAG,KAAK;IACzC;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIrI,MAAM,CAACZ,SAAS,CAACyK,gCAAgC,GAAG,UAAUzH,QAAQ,EAAE0H,IAAI,EAAE;IAC1E,IAAI,CAAC,IAAI,CAACC,gBAAgB,EAAE;MACxB,IAAI,CAACC,uBAAuB,CAAC,CAAC;IAClC;EACJ,CAAC;EACD9K,MAAM,CAACC,cAAc,CAACa,MAAM,CAACZ,SAAS,EAAE,cAAc,EAAE;IACpD;AACR;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACY,aAAa;IAC7B,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;IACQH,GAAG,EAAE,SAAAA,CAAUd,KAAK,EAAE;MAClB,IAAI,CAACiB,aAAa,GAAGjB,KAAK;MAC1B,IAAI,CAACiL,mBAAmB,CAAC,CAAC;IAC9B,CAAC;IACDxK,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF;AACJ;AACA;AACA;AACA;EACIM,MAAM,CAACZ,SAAS,CAAC8K,UAAU,GAAG,YAAY;IACtC;EAAA,CACH;EACD;AACJ;AACA;AACA;AACA;EACIlK,MAAM,CAACZ,SAAS,CAACoC,gBAAgB,GAAG,UAAU2B,KAAK,EAAE;IACjD;IACA,IAAI,CAAC,IAAI,CAACgH,eAAe,EAAE;MACvB,IAAI,CAACA,eAAe,GAAG,IAAI,CAACxI,WAAW,CAAChE,SAAS,CAAC;MAClD,IAAI,CAACwM,eAAe,CAAChJ,WAAW,GAAG,KAAK;MACxC,IAAI,CAACgJ,eAAe,CAAClJ,UAAU,GAAG,KAAK;IAC3C;IACA,IAAI6F,SAAS,GAAG3D,KAAK,CAACC,QAAQ;IAC9B,IAAI0D,SAAS,EAAE;MACXA,SAAS,CAACsD,QAAQ,CAACV,MAAM,GAAG,IAAI,CAACS,eAAe;MAChDrD,SAAS,CAACuD,OAAO,GAAG,IAAI;MACxBvD,SAAS,CAACxF,MAAM,CAACC,EAAE,CAAC,cAAc,EAAE,IAAI,CAAC0I,mBAAmB,EAAE,IAAI,EAAE,KAAK,CAAC;IAC9E;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIjK,MAAM,CAACZ,SAAS,CAACkL,YAAY,GAAG,UAAUC,IAAI,EAAE;IAC5C;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIvK,MAAM,CAACZ,SAAS,CAACoL,qBAAqB,GAAG,UAAUC,SAAS,EAAEC,SAAS,EAAE;IACrE;EAAA,CACH;EACDxL,MAAM,CAACC,cAAc,CAACa,MAAM,CAACZ,SAAS,EAAE,mBAAmB,EAAE;IACzD;AACR;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACsL,gBAAgB,CAAC,mBAAmB,CAAC;IACrD,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ7K,GAAG,EAAE,SAAAA,CAAUd,KAAK,EAAE;MAClB,IAAI,CAACoC,gBAAgB,CAAC,mBAAmB,EAAEpC,KAAK,EAAE,IAAI,CAAC;IAC3D,CAAC;IACDS,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFR,MAAM,CAACC,cAAc,CAACa,MAAM,CAACZ,SAAS,EAAE,SAAS,EAAE;IAC/C;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,IAAI,CAAC,IAAI,CAACC,QAAQ,EAAE;QAChB,IAAI,CAACA,QAAQ,GAAG,IAAIhC,YAAY,CAAC,IAAIO,MAAM,CAAC,CAAC,CAAC;QAC9C,IAAI,CAACyB,QAAQ,CAACsL,QAAQ,CAAC7I,aAAa,GAAG,IAAI;QAC3C,IAAI,CAACzC,QAAQ,CAACgC,MAAM,CAACC,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC2B,aAAa,EAAE,IAAI,EAAE,KAAK,CAAC;QACpE,IAAI,CAAC5D,QAAQ,CAACgC,MAAM,CAACC,EAAE,CAAC,SAAS,EAAE,IAAI,CAACoC,YAAY,EAAE,IAAI,EAAE,KAAK,CAAC;QAClE,IAAI,CAACpE,UAAU,CAACC,IAAI,CAAC,IAAIjC,YAAY,CAAC,IAAI,CAAC+B,QAAQ,CAAC,CAAC;QACrD,IAAI,CAACC,UAAU,CAACC,IAAI,CAAC,IAAI,CAACF,QAAQ,CAACsL,QAAQ,CAAC;MAChD;MACA,OAAO,IAAI,CAACtL,QAAQ;IACxB,CAAC;IACDG,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF;AACJ;AACA;AACA;AACA;AACA;AACA;EACIM,MAAM,CAACZ,SAAS,CAACyL,kBAAkB,GAAG,UAAUC,MAAM,EAAE;IACpD;EAAA,CACH;EACD5L,MAAM,CAACC,cAAc,CAACa,MAAM,CAACZ,SAAS,EAAE,gBAAgB,EAAE;IACtD;AACR;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACsL,gBAAgB,CAAC,gBAAgB,CAAC;IAClD,CAAC;IACD;AACR;AACA;AACA;AACA;IACQ7K,GAAG,EAAE,SAAAA,CAAUd,KAAK,EAAE;MAClB,IAAI,IAAI,CAACoC,gBAAgB,CAAC,gBAAgB,EAAEpC,KAAK,CAAC,EAAE;QAChD,IAAI,IAAI,CAAC+L,KAAK,EAAE;UACZ,IAAI,CAACA,KAAK,CAACC,UAAU,CAAC,CAAC;QAC3B;MACJ;IACJ,CAAC;IACDvL,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFR,MAAM,CAACC,cAAc,CAACa,MAAM,CAACZ,SAAS,EAAE,MAAM,EAAE;IAC5C;AACR;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACsL,gBAAgB,CAAC,MAAM,CAAC;IACxC,CAAC;IACD;AACR;AACA;AACA;AACA;IACQ7K,GAAG,EAAE,SAAAA,CAAUd,KAAK,EAAE;MAClB,IAAI,CAACoC,gBAAgB,CAAC,MAAM,EAAEpC,KAAK,CAAC;MACpC,IAAIiM,cAAc,GAAG,IAAI,CAACA,cAAc;MACxC,IAAIA,cAAc,EAAE;QAChBA,cAAc,CAAC3I,SAAS,CAACoB,UAAU,CAAC,CAAC;QACrCuH,cAAc,CAAC3I,SAAS,CAAC4I,iBAAiB,CAAC,CAAC;MAChD;MACA,IAAI,CAACtI,WAAW,GAAG5D,KAAK;IAC5B,CAAC;IACDS,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFR,MAAM,CAACC,cAAc,CAACa,MAAM,CAACZ,SAAS,EAAE,gBAAgB,EAAE;IACtD;AACR;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb;MACA,IAAI8L,UAAU,GAAG,IAAI,CAACC,eAAe;MACrC;MACA,IAAI,CAACD,UAAU,EAAE;QACb;QACA,IAAI,IAAI,CAACE,WAAW,EAAE;UAClBF,UAAU,GAAG9M,MAAM,CAACiN,SAAS,CAAC,IAAI,CAACD,WAAW,CAAC;QACnD,CAAC,MACI,IAAI,IAAI,CAACE,WAAW,EAAE;UACvBJ,UAAU,GAAG9M,MAAM,CAACiN,SAAS,CAAC,IAAI,CAACC,WAAW,CAAC;QACnD;MACJ;MACA,IAAI,CAAC,IAAI,CAACC,SAAS,EAAE;QACjB,OAAOL,UAAU;MACrB,CAAC,MACI;QACD,OAAO,IAAI,CAACK,SAAS,CAACC,KAAK,CAAC,gBAAgB,EAAEN,UAAU,CAAC;MAC7D;IACJ,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQrL,GAAG,EAAE,SAAAA,CAAUd,KAAK,EAAE;MAClB,IAAI,CAACoM,eAAe,GAAGpM,KAAK;MAC5B,IAAI,CAAC0B,sBAAsB,GAAG,IAAI;IACtC,CAAC;IACDjB,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF;AACJ;AACA;AACA;AACA;AACA;AACA;EACIM,MAAM,CAACZ,SAAS,CAACoE,cAAc,GAAG,YAAY;IAC1C,OAAO,IAAI,CAACK,SAAS,CAACe,MAAM,IAAI,IAAI,CAACnE,kBAAkB,GAAG,KAAK,GAAG,IAAI;EAC1E,CAAC;EACDvB,MAAM,CAACC,cAAc,CAACa,MAAM,CAACZ,SAAS,EAAE,gBAAgB,EAAE;IACtD;AACR;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACqM,eAAe;IAC/B,CAAC;IACD;AACR;AACA;AACA;AACA;IACQ5L,GAAG,EAAE,SAAAA,CAAUd,KAAK,EAAE;MAClB,IAAI,CAAC0M,eAAe,GAAG1M,KAAK;MAC5B,IAAI,CAAC0M,eAAe,CAACC,aAAa,CAACpC,cAAc,CAAC,CAAC;IACvD,CAAC;IACD9J,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF;AACJ;AACA;AACA;AACA;AACA;EACIM,MAAM,CAACZ,SAAS,CAACwM,iBAAiB,GAAG,UAAUxJ,QAAQ,EAAEyJ,QAAQ,EAAE;IAC/D;IACA,IAAI,IAAI,CAACZ,cAAc,EAAE;MACrB,IAAI9K,cAAc,GAAG,IAAI,CAACA,cAAc;MACxC,IAAI8K,cAAc,GAAG,IAAI,CAACA,cAAc;MACxC,IAAIa,KAAK,GAAGb,cAAc,CAACa,KAAK;MAChC,IAAIC,UAAU,GAAGd,cAAc,CAACc,UAAU;MAC1C;MACA,IAAK3J,QAAQ,IAAI,CAACA,QAAQ,CAAC4J,UAAU,CAAC,CAAC,IAAKH,QAAQ,EAAE;QAClD,IAAIE,UAAU,EAAE;UACZ,IAAI5L,cAAc,CAAC8L,aAAa,EAAE;YAC9BF,UAAU,CAACG,IAAI,GAAG/L,cAAc,CAAC8L,aAAa;UAClD;UACAF,UAAU,CAAC3J,QAAQ,GAAGA,QAAQ;QAClC;QACA,IAAI0J,KAAK,EAAE;UACP,IAAI3L,cAAc,CAACgM,aAAa,EAAE;YAC9BL,KAAK,CAACI,IAAI,GAAG/L,cAAc,CAACgM,aAAa;UAC7C;UACAL,KAAK,CAAC1J,QAAQ,GAAGA,QAAQ;QAC7B;MACJ,CAAC,MACI;QACD,IAAI0J,KAAK,EAAE;UACP;UACA,IAAI3L,cAAc,CAACiM,SAAS,IAAIjM,cAAc,CAACgM,aAAa,IAAIlD,SAAS,EAAE;YACvE6C,KAAK,CAACI,IAAI,GAAG/L,cAAc,CAACiM,SAAS;UACzC;UACAN,KAAK,CAAC1J,QAAQ,GAAG,IAAI,CAACA,QAAQ;QAClC;QACA,IAAI2J,UAAU,EAAE;UACZ,IAAI5L,cAAc,CAACkM,SAAS,IAAIlM,cAAc,CAAC8L,aAAa,IAAIhD,SAAS,EAAE;YACvE8C,UAAU,CAACG,IAAI,GAAG/L,cAAc,CAACkM,SAAS;UAC9C;UACAN,UAAU,CAAC3J,QAAQ,GAAG,IAAI,CAACA,QAAQ;QACvC;MACJ;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIpC,MAAM,CAACZ,SAAS,CAACkN,QAAQ,GAAG,UAAUC,MAAM,EAAE;IAC1C,IAAI,CAAC3M,OAAO,CAAC0M,QAAQ,CAACC,MAAM,CAAC3M,OAAO,CAAC;IACrC,IAAI,CAACiC,gBAAgB,CAACyK,QAAQ,CAACC,MAAM,CAAC1K,gBAAgB,CAAC;IACvD,IAAI,CAAClB,gBAAgB,GAAG4L,MAAM,CAAC5L,gBAAgB;IAC/C,IAAI,CAACC,cAAc,GAAG2L,MAAM,CAAC3L,cAAc;IAC3C,IAAI,CAACE,oBAAoB,GAAGyL,MAAM,CAACzL,oBAAoB;IACvDnC,MAAM,CAACS,SAAS,CAACkN,QAAQ,CAACzN,IAAI,CAAC,IAAI,EAAE0N,MAAM,CAAC;EAChD,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIvM,MAAM,CAACZ,SAAS,CAACoN,kBAAkB,GAAG,UAAUC,CAAC,EAAE;IAC/C,IAAI,IAAI,CAAC1J,MAAM,IAAI,IAAI,CAACA,MAAM,CAAC2J,KAAK,EAAE;MAClC,IAAI,CAAC3J,MAAM,CAAC2J,KAAK,CAACC,OAAO,GAAG,IAAI,CAAC5J,MAAM,CAAC6J,OAAO,CAACnB,KAAK,CAAC,eAAe,EAAEgB,CAAC,CAAC,CAACI,OAAO;MACjF,IAAI,CAAC9J,MAAM,CAAC2J,KAAK,CAACI,QAAQ,GAAG,KAAK;MAClC,IAAI,CAAC/O,OAAO,CAACgP,cAAc,EAAE;QACzB,IAAI,CAAChK,MAAM,CAAC2J,KAAK,CAACM,IAAI,CAAC,CAAC;MAC5B;MACA,IAAI,CAACjK,MAAM,CAACyF,QAAQ,GAAG,IAAI;IAC/B;IACA,IAAIzK,OAAO,CAACkP,OAAO,EAAE;MACjBC,OAAO,CAACC,GAAG,CAACV,CAAC,CAAC;IAClB;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIzM,MAAM,CAACZ,SAAS,CAACgO,YAAY,GAAG,YAAY;IACxC,IAAIxO,KAAK,GAAG,IAAI;IAChBD,MAAM,CAACS,SAAS,CAACgO,YAAY,CAACvO,IAAI,CAAC,IAAI,CAAC;IACxC,IAAI,CAACgD,gBAAgB,CAAC+E,OAAO,CAAC/G,KAAK,CAAC,CAAC;IACrC;IACA3B,KAAK,CAAC4F,IAAI,CAAC,IAAI,CAAC8C,OAAO,CAACC,QAAQ,CAAC,CAAC,EAAE,UAAUwG,MAAM,EAAE;MAClDzO,KAAK,CAACiD,gBAAgB,CAAC+E,OAAO,CAACpH,IAAI,CAAC6N,MAAM,CAAC1E,KAAK,CAAC,CAAC,CAAC;IACvD,CAAC,CAAC;EACN,CAAC;EACDzJ,MAAM,CAACC,cAAc,CAACa,MAAM,CAACZ,SAAS,EAAE,WAAW,EAAE;IACjD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,IAAIT,KAAK,GAAG,IAAI;MAChB,IAAI,CAAC,IAAI,CAAC0O,UAAU,EAAE;QAClB,IAAI,CAACA,UAAU,GAAG,IAAIjQ,IAAI,CAAC,CAAC;QAC5B,IAAI,CAACiQ,UAAU,CAAChM,MAAM,CAACC,EAAE,CAAC,UAAU,EAAE,UAAU4B,KAAK,EAAE;UACnD,IAAIoK,QAAQ,GAAGpK,KAAK,CAACC,QAAQ;UAC7B,IAAIoK,MAAM,GAAGD,QAAQ,CAACC,MAAM;UAC5B,IAAIA,MAAM,EAAE;YACR,IAAIC,WAAW,GAAGF,QAAQ,CAACG,SAAS;YACpC,IAAI,CAACnP,KAAK,CAACoE,QAAQ,CAAC8K,WAAW,CAAC,EAAE;cAC9BA,WAAW,GAAG,OAAO;YACzB;YACA,IAAIE,gBAAgB,GAAG/O,KAAK,CAACwD,QAAQ;YACrC,IAAIwL,UAAU,GAAGL,QAAQ,CAACM,QAAQ;YAClC,IAAIC,QAAQ,GAAGvP,KAAK,CAACwP,QAAQ,CAACR,QAAQ,CAACO,QAAQ,CAAC;YAChD,IAAIE,QAAQ,GAAGzP,KAAK,CAACwP,QAAQ,CAACR,QAAQ,CAACS,QAAQ,CAAC;YAChD,IAAI,CAACzP,KAAK,CAACmG,QAAQ,CAACoJ,QAAQ,CAAC,IAAI,CAACvP,KAAK,CAACmG,QAAQ,CAACsJ,QAAQ,CAAC,EAAE;cACxDpP,KAAK,CAACwD,QAAQ,CAACd,MAAM,CAACC,EAAE,CAAC,wBAAwB,EAAE,UAAU4B,KAAK,EAAE;gBAChE,IAAIA,KAAK,CAAC0K,QAAQ,IAAIJ,WAAW,EAAE;kBAC/BvP,KAAK,CAAC4F,IAAI,CAAClF,KAAK,CAACiF,SAAS,CAACgD,QAAQ,CAAC,CAAC,EAAE,UAAUzE,QAAQ,EAAE;oBACvD,IAAI6L,WAAW,GAAG,KAAK;oBACvBzP,MAAM,CAACsF,IAAI,CAAC1B,QAAQ,CAAC8L,OAAO,EAAE,UAAUC,MAAM,EAAE;sBAC5C,IAAIA,MAAM,CAACC,UAAU,IAAIZ,MAAM,EAAE;wBAC7B,IAAIa,SAAS,GAAGF,MAAM;wBACtBE,SAAS,CAACT,UAAU,CAAC,GAAGS,SAAS,CAACT,UAAU,CAAC;wBAC7CK,WAAW,GAAG,IAAI;sBACtB;oBACJ,CAAC,CAAC;oBACF,IAAI,CAACA,WAAW,EAAE;sBACdzP,MAAM,CAACsF,IAAI,CAAC1B,QAAQ,CAAC8L,OAAO,EAAE,UAAUC,MAAM,EAAE;wBAC5C,IAAIA,MAAM,YAAYxQ,SAAS,EAAE;0BAC7BO,KAAK,CAAC4F,IAAI,CAACqK,MAAM,CAAC9G,QAAQ,CAACR,QAAQ,CAAC,CAAC,EAAE,UAAUyH,KAAK,EAAE;4BACpD,IAAIA,KAAK,CAACxP,SAAS,IAAI0O,MAAM,CAAC1O,SAAS,EAAE;8BACrC,IAAIyP,QAAQ,GAAGD,KAAK;8BACpBC,QAAQ,CAACX,UAAU,CAAC,GAAGW,QAAQ,CAACX,UAAU,CAAC;4BAC/C;4BACA;4BAAA,KACK,IAAIU,KAAK,YAAY3Q,SAAS,EAAE;8BACjC2Q,KAAK,CAAC/E,cAAc,CAAC,CAAC;4BAC1B;0BACJ,CAAC,CAAC;wBACN;sBACJ,CAAC,CAAC;oBACN;kBACJ,CAAC,CAAC;gBACN;cACJ,CAAC,CAAC;YACN;YACA3K,KAAK,CAACiF,SAAS,CAAC+G,QAAQ,CAACtJ,MAAM,CAACC,EAAE,CAAC,qBAAqB,EAAE,UAAU4B,KAAK,EAAE;cACvE,IAAIA,KAAK,CAAC0K,QAAQ,IAAIJ,WAAW,EAAE;gBAC/B,IAAIrL,QAAQ,GAAGe,KAAK,CAACqK,MAAM;gBAC3B,IAAIgB,aAAa,GAAG,KAAK;gBACzBhQ,MAAM,CAACsF,IAAI,CAAC1B,QAAQ,CAAC8L,OAAO,EAAE,UAAUC,MAAM,EAAE;kBAC5C,IAAIA,MAAM,CAACC,UAAU,IAAIZ,MAAM,EAAE;oBAC7B,IAAIa,SAAS,GAAGF,MAAM;oBACtBE,SAAS,CAACT,UAAU,CAAC,GAAGS,SAAS,CAACT,UAAU,CAAC;oBAC7CY,aAAa,GAAG,IAAI;kBACxB;gBACJ,CAAC,CAAC;gBACF,IAAI,CAACA,aAAa,EAAE;kBAChBhQ,MAAM,CAACsF,IAAI,CAAC1B,QAAQ,CAAC8L,OAAO,EAAE,UAAUC,MAAM,EAAE;oBAC5C,IAAIA,MAAM,YAAYxQ,SAAS,EAAE;sBAC7BO,KAAK,CAAC4F,IAAI,CAACqK,MAAM,CAAC9G,QAAQ,CAACR,QAAQ,CAAC,CAAC,EAAE,UAAUyH,KAAK,EAAE;wBACpD,IAAIA,KAAK,CAACxP,SAAS,IAAI0O,MAAM,CAAC1O,SAAS,EAAE;0BACrC,IAAIyP,QAAQ,GAAGD,KAAK;0BACpBC,QAAQ,CAACX,UAAU,CAAC,GAAGW,QAAQ,CAACX,UAAU,CAAC;wBAC/C;wBACA;wBAAA,KACK,IAAIU,KAAK,YAAY3Q,SAAS,EAAE;0BACjC2Q,KAAK,CAAC/E,cAAc,CAAC,CAAC;wBAC1B;sBACJ,CAAC,CAAC;oBACN;kBACJ,CAAC,CAAC;gBACN;cACJ;YACJ,CAAC,CAAC;YACFiE,MAAM,CAACZ,OAAO,CAAC6B,GAAG,CAACb,UAAU,EAAE,UAAU5O,KAAK,EAAE0P,UAAU,EAAEb,QAAQ,EAAE;cAClE,IAAIC,QAAQ,GAAGvP,KAAK,CAACwP,QAAQ,CAACR,QAAQ,CAACO,QAAQ,CAAC;cAChD,IAAIE,QAAQ,GAAGzP,KAAK,CAACwP,QAAQ,CAACR,QAAQ,CAACS,QAAQ,CAAC;cAChD,IAAIrI,GAAG,GAAG4H,QAAQ,CAAC5H,GAAG;cACtB,IAAID,GAAG,GAAG6H,QAAQ,CAAC7H,GAAG;cACtB,IAAIgJ,UAAU,YAAYtR,MAAM,EAAE;gBAC9B,IAAIiR,SAAS,GAAGK,UAAU;gBAC1B,IAAIC,aAAa,GAAGN,SAAS,CAAC9F,cAAc,CAACsF,QAAQ,CAAC;gBACtD,IAAIc,aAAa,IAAID,UAAU,CAACtM,QAAQ,EAAE;kBACtC,IAAIqG,WAAW,GAAGiG,UAAU,CAACtM,QAAQ,CAACqG,WAAW;kBACjD,IAAIA,WAAW,IAAIlK,KAAK,CAACoE,QAAQ,CAAC8F,WAAW,CAACkG,aAAa,CAAC,CAAC,EAAE;oBAC3D,OAAO3P,KAAK;kBAChB;gBACJ;cACJ;cACA,IAAIoD,QAAQ,GAAGsM,UAAU,CAACtM,QAAQ;cAClC,IAAI,CAAC7D,KAAK,CAACmG,QAAQ,CAACoJ,QAAQ,CAAC,EAAE;gBAC3BA,QAAQ,GAAGH,gBAAgB,CAAC5O,MAAM,CAAC0O,WAAW,CAAC,CAACmB,GAAG;cACvD;cACA,IAAI,CAACrQ,KAAK,CAACmG,QAAQ,CAACsJ,QAAQ,CAAC,EAAE;gBAC3BA,QAAQ,GAAGL,gBAAgB,CAAC5O,MAAM,CAAC0O,WAAW,CAAC,CAACoB,IAAI;cACxD;cACA,IAAIzM,QAAQ,EAAE;gBACV,IAAI0M,WAAW,GAAG1M,QAAQ,CAACrD,MAAM,CAAC0O,WAAW,CAAC;gBAC9C,IAAIqB,WAAW,EAAE;kBACb,IAAIC,YAAY,GAAG3M,QAAQ,CAACqC,qBAAqB,CAACgJ,WAAW,CAAC;kBAC9D,IAAIlP,KAAK,CAACoE,QAAQ,CAACgD,GAAG,CAAC,IAAIpH,KAAK,CAACoE,QAAQ,CAAC+C,GAAG,CAAC,IAAInH,KAAK,CAACmG,QAAQ,CAACoJ,QAAQ,CAAC,IAAIvP,KAAK,CAACmG,QAAQ,CAACsJ,QAAQ,CAAC,IAAIzP,KAAK,CAACmG,QAAQ,CAACqK,YAAY,CAAC,EAAE;oBACpI,IAAIxI,OAAO,GAAG,KAAK,CAAC;oBACpB,IAAIgH,QAAQ,CAACyB,WAAW,EAAE;sBACtBzI,OAAO,GAAG,CAACP,IAAI,CAACmH,GAAG,CAAC4B,YAAY,CAAC,GAAG/I,IAAI,CAACiJ,MAAM,GAAGjJ,IAAI,CAACmH,GAAG,CAACW,QAAQ,CAAC,GAAG9H,IAAI,CAACiJ,MAAM,KAAMjJ,IAAI,CAACmH,GAAG,CAACa,QAAQ,CAAC,GAAGhI,IAAI,CAACiJ,MAAM,GAAGjJ,IAAI,CAACmH,GAAG,CAACW,QAAQ,CAAC,GAAG9H,IAAI,CAACiJ,MAAM,CAAE;oBACjK,CAAC,MACI;sBACD1I,OAAO,GAAG,CAACwI,YAAY,GAAGjB,QAAQ,KAAKE,QAAQ,GAAGF,QAAQ,CAAC;oBAC/D;oBACA,IAAIvP,KAAK,CAACmG,QAAQ,CAACqK,YAAY,CAAC,KAAK,CAACxQ,KAAK,CAACmG,QAAQ,CAAC6B,OAAO,CAAC,IAAIP,IAAI,CAACC,GAAG,CAACM,OAAO,CAAC,IAAI2I,QAAQ,CAAC,EAAE;sBAC7F3I,OAAO,GAAG,GAAG;oBACjB;oBACA;oBACA,IAAIhI,KAAK,CAACmG,QAAQ,CAACiB,GAAG,CAAC,EAAE;sBACrB,OAAOA,GAAG,GAAG,CAACD,GAAG,GAAGC,GAAG,IAAIY,OAAO;oBACtC,CAAC,MACI,IAAIZ,GAAG,YAAY3H,KAAK,EAAE;sBAC3B,OAAO,IAAIA,KAAK,CAACS,OAAO,CAAC0Q,WAAW,CAACxJ,GAAG,CAACyJ,GAAG,EAAE1J,GAAG,CAAC0J,GAAG,EAAE7I,OAAO,CAAC,CAAC;oBACpE;kBACJ;gBACJ;cACJ;cACA,OAAOvH,KAAK;YAChB,CAAC,CAAC;UACN;QACJ,CAAC,CAAC;MACN;MACA,OAAO,IAAI,CAACsO,UAAU;IAC1B,CAAC;IACD7N,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF;AACJ;AACA;AACA;AACA;AACA;EACIM,MAAM,CAACZ,SAAS,CAACiQ,aAAa,GAAG,UAAUC,MAAM,EAAE;IAC/C,IAAIC,SAAS;IACb,IAAID,MAAM,EAAE;MACR;MACA,IAAI/Q,KAAK,CAACoE,QAAQ,CAAC2M,MAAM,CAAC1P,OAAO,CAAC,IAAIrB,KAAK,CAACiR,OAAO,CAACF,MAAM,CAAC1P,OAAO,CAAC,EAAE;QACjE,KAAK,IAAI2E,CAAC,GAAG,CAAC,EAAEkL,GAAG,GAAGH,MAAM,CAAC1P,OAAO,CAACgF,MAAM,EAAEL,CAAC,GAAGkL,GAAG,EAAElL,CAAC,EAAE,EAAE;UACvD,IAAI3E,OAAO,GAAG0P,MAAM,CAAC1P,OAAO,CAAC2E,CAAC,CAAC;UAC/B,IAAI,CAAChG,KAAK,CAACoE,QAAQ,CAAC/C,OAAO,CAAC8P,IAAI,CAAC,EAAE;YAC/B9P,OAAO,CAAC8P,IAAI,GAAG,QAAQ;UAC3B;QACJ;MACJ;MACA;MACA;MACA,IAAInR,KAAK,CAACoE,QAAQ,CAAC2M,MAAM,CAACC,SAAS,CAAC,IAAIhR,KAAK,CAACiR,OAAO,CAACF,MAAM,CAACC,SAAS,CAAC,EAAE;QACrEA,SAAS,GAAGD,MAAM,CAACC,SAAS;QAC5B,OAAOD,MAAM,CAACC,SAAS;MAC3B;IACJ;IACA5Q,MAAM,CAACS,SAAS,CAACiQ,aAAa,CAACxQ,IAAI,CAAC,IAAI,EAAEyQ,MAAM,CAAC;IACjD;IACA,IAAIC,SAAS,EAAE;MACX,KAAK,IAAIhL,CAAC,GAAG,CAAC,EAAEkL,GAAG,GAAGF,SAAS,CAAC3K,MAAM,EAAEL,CAAC,GAAGkL,GAAG,EAAElL,CAAC,EAAE,EAAE;QAClD,IAAIoL,IAAI,GAAGJ,SAAS,CAAChL,CAAC,CAAC;QACvB;QACA,IAAIiJ,MAAM,GAAG,IAAI;QACjB,IAAIjP,KAAK,CAACoE,QAAQ,CAACgN,IAAI,CAACnC,MAAM,CAAC,IAAIjP,KAAK,CAACqR,QAAQ,CAACD,IAAI,CAACnC,MAAM,CAAC,EAAE;UAC5D;UACA,IAAI,IAAI,CAACqC,GAAG,CAACC,MAAM,CAACH,IAAI,CAACnC,MAAM,CAAC,EAAE;YAC9BA,MAAM,GAAG,IAAI,CAACqC,GAAG,CAAC7L,MAAM,CAAC2L,IAAI,CAACnC,MAAM,CAAC;UACzC,CAAC,MACI;YACD,IAAIuC,KAAK,GAAGJ,IAAI,CAACnC,MAAM,CAACwC,KAAK,CAAC,GAAG,CAAC;YAClC,KAAK,IAAI/I,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8I,KAAK,CAACnL,MAAM,EAAEqC,CAAC,EAAE,EAAE;cACnC,IAAIuG,MAAM,YAAYnQ,IAAI,EAAE;gBACxB,IAAI4S,QAAQ,GAAGzC,MAAM,CAAChJ,QAAQ,CAACjG,KAAK,CAACwP,QAAQ,CAACgC,KAAK,CAAC9I,CAAC,CAAC,CAAC,CAAC;gBACxD,IAAI,CAACgJ,QAAQ,EAAE;kBACXzC,MAAM,GAAGA,MAAM,CAACuC,KAAK,CAAC9I,CAAC,CAAC,CAAC;gBAC7B,CAAC,MACI;kBACDuG,MAAM,GAAGyC,QAAQ;gBACrB;cACJ,CAAC,MACI;gBACD,IAAIC,UAAU,GAAGH,KAAK,CAAC9I,CAAC,CAAC,CAACkJ,KAAK,CAAC,mBAAmB,CAAC;gBACpD,IAAID,UAAU,EAAE;kBACZ,IAAI1C,MAAM,CAAC0C,UAAU,CAAC,CAAC,CAAC,CAAC,YAAY7S,IAAI,EAAE;oBACvCmQ,MAAM,GAAGA,MAAM,CAAC0C,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC1L,QAAQ,CAACjG,KAAK,CAACwP,QAAQ,CAACmC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;kBAC1E,CAAC,MACI;oBACD1C,MAAM,GAAGA,MAAM,CAAC0C,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC3R,KAAK,CAACwP,QAAQ,CAACmC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;kBACjE;gBACJ,CAAC,MACI;kBACD1C,MAAM,GAAGA,MAAM,CAACuC,KAAK,CAAC9I,CAAC,CAAC,CAAC;gBAC7B;cACJ;YACJ;UACJ;QACJ;QACA0I,IAAI,CAACnC,MAAM,GAAGA,MAAM;QACpB;QACA,IAAIjP,KAAK,CAACoE,QAAQ,CAACgN,IAAI,CAAChK,GAAG,CAAC,EAAE;UAC1BgK,IAAI,CAAChK,GAAG,GAAG,IAAI,CAACyK,mBAAmB,CAACT,IAAI,CAAChK,GAAG,CAAC;QACjD;QACA,IAAIpH,KAAK,CAACoE,QAAQ,CAACgN,IAAI,CAACjK,GAAG,CAAC,EAAE;UAC1BiK,IAAI,CAACjK,GAAG,GAAG,IAAI,CAAC0K,mBAAmB,CAACT,IAAI,CAACjK,GAAG,CAAC;QACjD;MACJ;MACA/G,MAAM,CAACS,SAAS,CAACiQ,aAAa,CAACxQ,IAAI,CAAC,IAAI,EAAE;QACtC0Q,SAAS,EAAEA;MACf,CAAC,CAAC;IACN;EACJ,CAAC;EACD;AACJ;AACA;AACA;EACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIvP,MAAM,CAACZ,SAAS,CAACiR,WAAW,GAAG,UAAUC,CAAC,EAAEC,CAAC,EAAE;IAC3C,IAAID,CAAC,IAAIC,CAAC,EAAE;MACR,OAAO,CAAC;IACZ;IACA;IAAA,KACK,IAAID,CAAC,IAAI,WAAW,EAAE;MACvB,OAAO,CAAC;IACZ,CAAC,MACI,IAAIC,CAAC,IAAI,WAAW,EAAE;MACvB,OAAO,CAAC,CAAC;IACb,CAAC,MACI;MACD,OAAO5R,MAAM,CAACS,SAAS,CAACiR,WAAW,CAACxR,IAAI,CAAC,IAAI,EAAEyR,CAAC,EAAEC,CAAC,CAAC;IACxD;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIvQ,MAAM,CAACZ,SAAS,CAACoR,aAAa,GAAG,UAAUxR,KAAK,EAAE;IAC9CL,MAAM,CAACS,SAAS,CAACoR,aAAa,CAAC3R,IAAI,CAAC,IAAI,EAAEG,KAAK,CAAC;IAChD,IAAI,CAAC6C,gBAAgB,CAACwG,OAAO,GAAGrJ,KAAK;EACzC,CAAC;EACD,OAAOgB,MAAM;AACjB,CAAC,CAAC7C,SAAS,CAAE;AACb,SAAS6C,MAAM;AACf;AACA;AACA;AACA;AACA;AACA;AACA/B,QAAQ,CAACwS,iBAAiB,CAAC,QAAQ,CAAC,GAAGzQ,MAAM;AAC7C/B,QAAQ,CAACwS,iBAAiB,CAAC,gBAAgB,CAAC,GAAG/R,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}