{"ast":null,"code":"/**\r\n * This module contains ColorSet object definition\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { BaseObject } from \"../Base\";\nimport { Color, color } from \"./Color\";\nimport { registry } from \"../Registry\";\nimport * as $colors from \"./Colors\";\nimport * as $type from \"./Type\";\nimport * as $utils from \"./Utils\";\nimport * as $math from \"./Math\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Represents a set of colors. Can also generate colors according to set rules.\r\n *\r\n * @important\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info\r\n */\nvar ColorSet = /** @class */function (_super) {\n  __extends(ColorSet, _super);\n  /**\r\n   * Constructor\r\n   */\n  function ColorSet() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Holds the list of the colors in this set. (preset or auto-generated)\r\n     */\n    _this._list = [];\n    /**\r\n     * Current step in a color generator's cycle.\r\n     */\n    _this._currentStep = 0;\n    /**\r\n     * If set to non-zero value, the ColorSet will start iterating colors from\r\n     * that particular index, not the first color in the list.\r\n     */\n    _this._startIndex = 0;\n    /**\r\n     * Current pass in the color generator's cycle. Normally a generator would\r\n     * cycle through all available hue range, then repeat it, alternating other\r\n     * color properties, to generate distinctive colors.\r\n     */\n    _this._currentPass = 0;\n    /**\r\n     * A base color. If there are no colors pre-set in the color list, ColorSet\r\n     * will use this color as a base when generating new ones, applying\r\n     * `stepOptions` and `passOptions` to this base color.\r\n     */\n    _this.baseColor = new Color({\n      r: 103,\n      g: 183,\n      b: 220\n    });\n    /**\r\n     * Modifications to apply with each new generated color.\r\n     */\n    _this.stepOptions = {};\n    /**\r\n     * Modifications to apply on top of `stepOptions` for each \"pass\" of the\r\n     * color generation.\r\n     *\r\n     * A \"pass\" is when ColorSet generates `minColors` number of colors.\r\n     */\n    _this.passOptions = {\n      brighten: -0.2\n    };\n    /**\r\n     * An index increment to use when iterating through color list.\r\n     *\r\n     * Default is 1, which means returning each and every color.\r\n     *\r\n     * Setting it to a bigger number will make ColorSet `next()` iterator skip\r\n     * some colors.\r\n     *\r\n     * E.g. setting to 2, will return every second color in the list.\r\n     *\r\n     * This is useful, when the color list has colors that are too close each\r\n     * other for contrast.\r\n     *\r\n     * However, having bigger number will mean that `next()` iterator will go\r\n     * through the list quicker, and the generator will kick sooner.\r\n     */\n    _this.step = 1;\n    /**\r\n     * A number of colors to generate in one \"pass\".\r\n     *\r\n     * This setting can be automatically overridden, if ColorSet has a list of\r\n     * pre-set colors. In such case ColorSet will generate exactly the same\r\n     * number of colors with each pass as there were colors in original set.\r\n     */\n    _this.minColors = 20;\n    /**\r\n     * Do not let the \"lightness\" of generated color to fall below this\r\n     * threshold.\r\n     */\n    _this.minLightness = 0.2;\n    /**\r\n     * Do not let the \"lightness\" of generated color to get above this threshold.\r\n     */\n    _this.maxLightness = 0.9;\n    /**\r\n     * Randomly shuffle generated colors.\r\n     */\n    _this.shuffle = false;\n    /**\r\n     * When colors are generated, based on `stepOptions`, each generated color\r\n     * gets either lighter or darker.\r\n     *\r\n     * If this is set to `true`, color generator will switch to opposing spectrum\r\n     * when reaching `minLightness` or `maxLightness`.\r\n     *\r\n     * E.g. if we start off with a red color, then gradually generate lighter\r\n     * colors through rose shades, then switch back to dark red and gradually\r\n     * increase the lightness of it until it reaches the starting red.\r\n     *\r\n     * If set to `false` it will stop there and cap lightness at whatever level\r\n     * we hit `minLightness` or `maxLightness`, which may result in a number of\r\n     * the same colors.\r\n     */\n    _this.wrap = true;\n    /**\r\n     * Re-use same colors in the pre-set list, when ColorSet runs out of colors,\r\n     * rather than start generating new ones.\r\n     */\n    _this.reuse = false;\n    /**\r\n     * Saturation of colors. This will change saturation of all colors of color\r\n     * set.\r\n     *\r\n     * It is recommended to set this in theme, as changing it at run time won't\r\n     * make the items to redraw and change color.\r\n     */\n    _this.saturation = 1;\n    _this.className = \"ColorSet\";\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(ColorSet.prototype, \"list\", {\n    /**\r\n     * Returns current list of colors.\r\n     *\r\n     * If there are none, a new list of colors is generated, based on various\r\n     * ColorSet settings.\r\n     *\r\n     * @return Color list\r\n     */\n    get: function () {\n      if (!this._list) {\n        this.generate(this.minColors);\n      }\n      return this._list;\n    },\n    /**\r\n     * Sets a list of pre-defined colors to use for the iterator.\r\n     *\r\n     * @param value Color list\r\n     */\n    set: function (value) {\n      this._list = value;\n      this.reset();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Gets reusable color.\r\n   *\r\n   * @param   index  Index of color\r\n   * @return         Color\r\n   */\n  ColorSet.prototype.getReusableColor = function (index) {\n    if (this._list.length == 0) {\n      this.generate(1);\n      return this.list[0];\n    } else {\n      var tmpstep = index - Math.floor(index / this._list.length) * this.list.length;\n      return this.list[tmpstep];\n    }\n  };\n  /**\r\n   * Returns next color in the list using internal iterator counter.\r\n   *\r\n   * If `step` is set to something other than 1, it may return other color than\r\n   * exact next one in the list.\r\n   *\r\n   * @return Color\r\n   */\n  ColorSet.prototype.next = function () {\n    var color;\n    if (this.list.length <= this._currentStep) {\n      if (this.reuse) {\n        color = this.getReusableColor(this._currentStep);\n      } else {\n        this.generate($math.max(this.minColors, this._currentStep + 1));\n        color = this.list[this._currentStep];\n      }\n    } else {\n      color = this.list[this._currentStep];\n    }\n    this._currentStep += this.step;\n    return color.saturate(this.saturation);\n  };\n  /**\r\n   * Returns a color at specific index in the list.\r\n   *\r\n   * @param i  Index\r\n   * @return Color\r\n   */\n  ColorSet.prototype.getIndex = function (i) {\n    var color;\n    if (this.list.length <= i) {\n      if (this.reuse) {\n        color = this.getReusableColor(i);\n      } else {\n        this.generate(this.minColors);\n        color = this.getIndex(i);\n      }\n    } else {\n      color = this.list[i];\n    }\n    return color.saturate(this.saturation);\n  };\n  /**\r\n   * Resets internal iterator.\r\n   *\r\n   * Calling `next()` after this will return the very first color in the color\r\n   * list, even if it was already returned before.\r\n   */\n  ColorSet.prototype.reset = function () {\n    this._currentStep = this._startIndex;\n  };\n  Object.defineProperty(ColorSet.prototype, \"currentStep\", {\n    /**\r\n     * @return Step\r\n     */\n    get: function () {\n      return this._currentStep;\n    },\n    /**\r\n     * Sets current color iteration. You can use this property to skip some\r\n     * colors from iteration. E.g. setting it to `10` will skip first ten\r\n     * colors.\r\n     *\r\n     * Please note that the number is zero-based.\r\n     *\r\n     * @param value  Step\r\n     */\n    set: function (value) {\n      this._currentStep = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ColorSet.prototype, \"startIndex\", {\n    /**\r\n     * @return Index\r\n     */\n    get: function () {\n      return this._startIndex;\n    },\n    /**\r\n     * If set to non-zero value, the ColorSet will start iterating colors from\r\n     * that particular index, not the first color in the list.\r\n     *\r\n     * @default 0\r\n     * @since 4.4.9\r\n     * @param  value  Index\r\n     */\n    set: function (value) {\n      this._startIndex = value;\n      this.reset();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Generates colors based on the various ColorSet settings.\r\n   *\r\n   * @param count Number of colors to generate\r\n   */\n  ColorSet.prototype.generate = function (count) {\n    // Init\n    var curColor = this.currentColor;\n    var hsl = $colors.rgbToHsl($type.getValue(curColor.rgb));\n    var hueStep = $type.hasValue(this.stepOptions.hue) ? this.stepOptions.hue : 1 / count;\n    var mods = {\n      brighten: 0,\n      lighten: 0,\n      hue: hsl.h,\n      lightness: hsl.l,\n      saturation: hsl.s\n    };\n    // Generate list of hues, and shuffle them\n    var hues = [];\n    var startIndex = this.list.length == 0 ? 0 : 1;\n    if (this.reuse) {\n      for (var i = startIndex; i <= count; i++) {\n        hues.push($colors.rgbToHsl($type.getValue(this._list[i].rgb)).h);\n      }\n    } else {\n      for (var i = startIndex; i <= count; i++) {\n        var h = hsl.h + hueStep * i;\n        if (this.wrap && h > 1) {\n          h -= 1;\n        }\n        hues.push(h);\n      }\n    }\n    // Shuffle colors randomly\n    if (this.shuffle) {\n      hues.sort(function (a, b) {\n        return Math.random() - 0.5;\n      });\n    }\n    // Generate colors by rotating hue\n    for (var i = 0; i < count; i++) {\n      // Update hue\n      if (this.reuse) {\n        hsl = $colors.rgbToHsl($type.getValue(this._list[i].rgb));\n      } else {\n        hsl.h = hues.shift();\n      }\n      // Apply HSL mods\n      this.applyStepOptions(hsl, mods, i, this._currentPass);\n      // Convert back to Color\n      var c = color($colors.hslToRgb(hsl));\n      // Apply regular color mods\n      var brighten = (this.stepOptions.brighten || 0) * i + (this.passOptions.brighten || 0) * this._currentPass;\n      if (brighten != 0) {\n        if (this.wrap) {\n          brighten = $utils.fitNumberRelative(brighten, this.minLightness, this.maxLightness);\n        } else {\n          brighten = $utils.fitNumber(brighten, this.minLightness, this.maxLightness);\n        }\n        c = c.brighten(brighten);\n      }\n      var lighten = (this.stepOptions.lighten || 0) * i + (this.passOptions.lighten || 0) * this._currentPass;\n      if (lighten != 0) {\n        if (this.wrap) {\n          lighten = $utils.fitNumberRelative(lighten, this.minLightness, this.maxLightness);\n        } else {\n          lighten = $utils.fitNumber(lighten, this.minLightness, this.maxLightness);\n        }\n        c = c.lighten(lighten);\n      }\n      this._list.push(c);\n    }\n    this._currentPass++;\n  };\n  Object.defineProperty(ColorSet.prototype, \"currentColor\", {\n    /**\r\n     * Returns current last color. It's either the last color in the list of\r\n     * colors, or `baseColor` if list is empty.\r\n     *\r\n     * @return Color\r\n     */\n    get: function () {\n      if (this._list.length == 0) {\n        return this.baseColor.saturate(this.saturation);\n      } else {\n        return this._list[this._list.length - 1].saturate(this.saturation);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Generates modifiers for color, based on what step and pass.\r\n   *\r\n   * @param hsl   Curren HSL value of the color to modify\r\n   * @param base  The modifiers that were before modification to use as a base\r\n   * @param step  Current step\r\n   * @param pass  Current pass\r\n   */\n  ColorSet.prototype.applyStepOptions = function (hsl, base, step, pass) {\n    // Process lightness\n    hsl.l = base.lightness + (this.stepOptions.lightness || 0) * step + (this.passOptions.lightness || 0) * pass;\n    if (this.wrap) {\n      if (hsl.l > 1) {\n        hsl.l = hsl.l - Math.floor(hsl.l);\n      } else if (hsl.l < 0) {\n        hsl.l = -(hsl.l - Math.floor(hsl.l));\n      }\n      hsl.l = $utils.fitNumberRelative(hsl.l, this.minLightness, this.maxLightness);\n    } else {\n      if (hsl.l > 1) {\n        hsl.l = 1;\n      } else if (hsl.l < 0) {\n        hsl.l = 0;\n      }\n      hsl.l = $utils.fitNumber(hsl.l, this.minLightness, this.maxLightness);\n    }\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n  ColorSet.prototype.processConfig = function (config) {\n    if (config) {\n      // Cast colors\n      if ($type.hasValue(config.list) && $type.isArray(config.list)) {\n        for (var i = 0, len = config.list.length; i < len; i++) {\n          if (!(config.list[i] instanceof Color)) {\n            config.list[i] = color(config.list[i]);\n          }\n        }\n      }\n      if ($type.hasValue(config.baseColor) && !(config.baseColor instanceof Color)) {\n        config.baseColor = color(config.baseColor);\n      }\n    }\n    _super.prototype.processConfig.call(this, config);\n  };\n  return ColorSet;\n}(BaseObject);\nexport { ColorSet };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"ColorSet\"] = ColorSet;","map":{"version":3,"names":["__extends","BaseObject","Color","color","registry","$colors","$type","$utils","$math","ColorSet","_super","_this","call","_list","_currentStep","_startIndex","_currentPass","baseColor","r","g","b","stepOptions","passOptions","brighten","step","minColors","minLightness","maxLightness","shuffle","wrap","reuse","saturation","className","applyTheme","Object","defineProperty","prototype","get","generate","set","value","reset","enumerable","configurable","getReusableColor","index","length","list","tmpstep","Math","floor","next","max","saturate","getIndex","i","count","curColor","currentColor","hsl","rgbToHsl","getValue","rgb","hueStep","hasValue","hue","mods","lighten","h","lightness","l","s","hues","startIndex","push","sort","a","random","shift","applyStepOptions","c","hslToRgb","fitNumberRelative","fitNumber","base","pass","processConfig","config","isArray","len","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/utils/ColorSet.js"],"sourcesContent":["/**\r\n * This module contains ColorSet object definition\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../Base\";\r\nimport { Color, color } from \"./Color\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $colors from \"./Colors\";\r\nimport * as $type from \"./Type\";\r\nimport * as $utils from \"./Utils\";\r\nimport * as $math from \"./Math\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Represents a set of colors. Can also generate colors according to set rules.\r\n *\r\n * @important\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info\r\n */\r\nvar ColorSet = /** @class */ (function (_super) {\r\n    __extends(ColorSet, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ColorSet() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Holds the list of the colors in this set. (preset or auto-generated)\r\n         */\r\n        _this._list = [];\r\n        /**\r\n         * Current step in a color generator's cycle.\r\n         */\r\n        _this._currentStep = 0;\r\n        /**\r\n         * If set to non-zero value, the ColorSet will start iterating colors from\r\n         * that particular index, not the first color in the list.\r\n         */\r\n        _this._startIndex = 0;\r\n        /**\r\n         * Current pass in the color generator's cycle. Normally a generator would\r\n         * cycle through all available hue range, then repeat it, alternating other\r\n         * color properties, to generate distinctive colors.\r\n         */\r\n        _this._currentPass = 0;\r\n        /**\r\n         * A base color. If there are no colors pre-set in the color list, ColorSet\r\n         * will use this color as a base when generating new ones, applying\r\n         * `stepOptions` and `passOptions` to this base color.\r\n         */\r\n        _this.baseColor = new Color({\r\n            r: 103,\r\n            g: 183,\r\n            b: 220\r\n        });\r\n        /**\r\n         * Modifications to apply with each new generated color.\r\n         */\r\n        _this.stepOptions = {};\r\n        /**\r\n         * Modifications to apply on top of `stepOptions` for each \"pass\" of the\r\n         * color generation.\r\n         *\r\n         * A \"pass\" is when ColorSet generates `minColors` number of colors.\r\n         */\r\n        _this.passOptions = {\r\n            brighten: -0.2\r\n        };\r\n        /**\r\n         * An index increment to use when iterating through color list.\r\n         *\r\n         * Default is 1, which means returning each and every color.\r\n         *\r\n         * Setting it to a bigger number will make ColorSet `next()` iterator skip\r\n         * some colors.\r\n         *\r\n         * E.g. setting to 2, will return every second color in the list.\r\n         *\r\n         * This is useful, when the color list has colors that are too close each\r\n         * other for contrast.\r\n         *\r\n         * However, having bigger number will mean that `next()` iterator will go\r\n         * through the list quicker, and the generator will kick sooner.\r\n         */\r\n        _this.step = 1;\r\n        /**\r\n         * A number of colors to generate in one \"pass\".\r\n         *\r\n         * This setting can be automatically overridden, if ColorSet has a list of\r\n         * pre-set colors. In such case ColorSet will generate exactly the same\r\n         * number of colors with each pass as there were colors in original set.\r\n         */\r\n        _this.minColors = 20;\r\n        /**\r\n         * Do not let the \"lightness\" of generated color to fall below this\r\n         * threshold.\r\n         */\r\n        _this.minLightness = 0.2;\r\n        /**\r\n         * Do not let the \"lightness\" of generated color to get above this threshold.\r\n         */\r\n        _this.maxLightness = 0.9;\r\n        /**\r\n         * Randomly shuffle generated colors.\r\n         */\r\n        _this.shuffle = false;\r\n        /**\r\n         * When colors are generated, based on `stepOptions`, each generated color\r\n         * gets either lighter or darker.\r\n         *\r\n         * If this is set to `true`, color generator will switch to opposing spectrum\r\n         * when reaching `minLightness` or `maxLightness`.\r\n         *\r\n         * E.g. if we start off with a red color, then gradually generate lighter\r\n         * colors through rose shades, then switch back to dark red and gradually\r\n         * increase the lightness of it until it reaches the starting red.\r\n         *\r\n         * If set to `false` it will stop there and cap lightness at whatever level\r\n         * we hit `minLightness` or `maxLightness`, which may result in a number of\r\n         * the same colors.\r\n         */\r\n        _this.wrap = true;\r\n        /**\r\n         * Re-use same colors in the pre-set list, when ColorSet runs out of colors,\r\n         * rather than start generating new ones.\r\n         */\r\n        _this.reuse = false;\r\n        /**\r\n         * Saturation of colors. This will change saturation of all colors of color\r\n         * set.\r\n         *\r\n         * It is recommended to set this in theme, as changing it at run time won't\r\n         * make the items to redraw and change color.\r\n         */\r\n        _this.saturation = 1;\r\n        _this.className = \"ColorSet\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ColorSet.prototype, \"list\", {\r\n        /**\r\n         * Returns current list of colors.\r\n         *\r\n         * If there are none, a new list of colors is generated, based on various\r\n         * ColorSet settings.\r\n         *\r\n         * @return Color list\r\n         */\r\n        get: function () {\r\n            if (!this._list) {\r\n                this.generate(this.minColors);\r\n            }\r\n            return this._list;\r\n        },\r\n        /**\r\n         * Sets a list of pre-defined colors to use for the iterator.\r\n         *\r\n         * @param value Color list\r\n         */\r\n        set: function (value) {\r\n            this._list = value;\r\n            this.reset();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Gets reusable color.\r\n     *\r\n     * @param   index  Index of color\r\n     * @return         Color\r\n     */\r\n    ColorSet.prototype.getReusableColor = function (index) {\r\n        if (this._list.length == 0) {\r\n            this.generate(1);\r\n            return this.list[0];\r\n        }\r\n        else {\r\n            var tmpstep = index - (Math.floor(index / this._list.length) * this.list.length);\r\n            return this.list[tmpstep];\r\n        }\r\n    };\r\n    /**\r\n     * Returns next color in the list using internal iterator counter.\r\n     *\r\n     * If `step` is set to something other than 1, it may return other color than\r\n     * exact next one in the list.\r\n     *\r\n     * @return Color\r\n     */\r\n    ColorSet.prototype.next = function () {\r\n        var color;\r\n        if (this.list.length <= this._currentStep) {\r\n            if (this.reuse) {\r\n                color = this.getReusableColor(this._currentStep);\r\n            }\r\n            else {\r\n                this.generate($math.max(this.minColors, this._currentStep + 1));\r\n                color = this.list[this._currentStep];\r\n            }\r\n        }\r\n        else {\r\n            color = this.list[this._currentStep];\r\n        }\r\n        this._currentStep += this.step;\r\n        return color.saturate(this.saturation);\r\n    };\r\n    /**\r\n     * Returns a color at specific index in the list.\r\n     *\r\n     * @param i  Index\r\n     * @return Color\r\n     */\r\n    ColorSet.prototype.getIndex = function (i) {\r\n        var color;\r\n        if (this.list.length <= i) {\r\n            if (this.reuse) {\r\n                color = this.getReusableColor(i);\r\n            }\r\n            else {\r\n                this.generate(this.minColors);\r\n                color = this.getIndex(i);\r\n            }\r\n        }\r\n        else {\r\n            color = this.list[i];\r\n        }\r\n        return color.saturate(this.saturation);\r\n    };\r\n    /**\r\n     * Resets internal iterator.\r\n     *\r\n     * Calling `next()` after this will return the very first color in the color\r\n     * list, even if it was already returned before.\r\n     */\r\n    ColorSet.prototype.reset = function () {\r\n        this._currentStep = this._startIndex;\r\n    };\r\n    Object.defineProperty(ColorSet.prototype, \"currentStep\", {\r\n        /**\r\n         * @return Step\r\n         */\r\n        get: function () {\r\n            return this._currentStep;\r\n        },\r\n        /**\r\n         * Sets current color iteration. You can use this property to skip some\r\n         * colors from iteration. E.g. setting it to `10` will skip first ten\r\n         * colors.\r\n         *\r\n         * Please note that the number is zero-based.\r\n         *\r\n         * @param value  Step\r\n         */\r\n        set: function (value) {\r\n            this._currentStep = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ColorSet.prototype, \"startIndex\", {\r\n        /**\r\n         * @return Index\r\n         */\r\n        get: function () {\r\n            return this._startIndex;\r\n        },\r\n        /**\r\n         * If set to non-zero value, the ColorSet will start iterating colors from\r\n         * that particular index, not the first color in the list.\r\n         *\r\n         * @default 0\r\n         * @since 4.4.9\r\n         * @param  value  Index\r\n         */\r\n        set: function (value) {\r\n            this._startIndex = value;\r\n            this.reset();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Generates colors based on the various ColorSet settings.\r\n     *\r\n     * @param count Number of colors to generate\r\n     */\r\n    ColorSet.prototype.generate = function (count) {\r\n        // Init\r\n        var curColor = this.currentColor;\r\n        var hsl = $colors.rgbToHsl($type.getValue(curColor.rgb));\r\n        var hueStep = $type.hasValue(this.stepOptions.hue) ? this.stepOptions.hue : 1 / count;\r\n        var mods = {\r\n            brighten: 0,\r\n            lighten: 0,\r\n            hue: hsl.h,\r\n            lightness: hsl.l,\r\n            saturation: hsl.s\r\n        };\r\n        // Generate list of hues, and shuffle them\r\n        var hues = [];\r\n        var startIndex = this.list.length == 0 ? 0 : 1;\r\n        if (this.reuse) {\r\n            for (var i = startIndex; i <= count; i++) {\r\n                hues.push($colors.rgbToHsl($type.getValue(this._list[i].rgb)).h);\r\n            }\r\n        }\r\n        else {\r\n            for (var i = startIndex; i <= count; i++) {\r\n                var h = hsl.h + hueStep * i;\r\n                if (this.wrap && (h > 1)) {\r\n                    h -= 1;\r\n                }\r\n                hues.push(h);\r\n            }\r\n        }\r\n        // Shuffle colors randomly\r\n        if (this.shuffle) {\r\n            hues.sort(function (a, b) {\r\n                return Math.random() - 0.5;\r\n            });\r\n        }\r\n        // Generate colors by rotating hue\r\n        for (var i = 0; i < count; i++) {\r\n            // Update hue\r\n            if (this.reuse) {\r\n                hsl = $colors.rgbToHsl($type.getValue(this._list[i].rgb));\r\n            }\r\n            else {\r\n                hsl.h = hues.shift();\r\n            }\r\n            // Apply HSL mods\r\n            this.applyStepOptions(hsl, mods, i, this._currentPass);\r\n            // Convert back to Color\r\n            var c = color($colors.hslToRgb(hsl));\r\n            // Apply regular color mods\r\n            var brighten = (this.stepOptions.brighten || 0) * i + (this.passOptions.brighten || 0) * this._currentPass;\r\n            if (brighten != 0) {\r\n                if (this.wrap) {\r\n                    brighten = $utils.fitNumberRelative(brighten, this.minLightness, this.maxLightness);\r\n                }\r\n                else {\r\n                    brighten = $utils.fitNumber(brighten, this.minLightness, this.maxLightness);\r\n                }\r\n                c = c.brighten(brighten);\r\n            }\r\n            var lighten = (this.stepOptions.lighten || 0) * i + (this.passOptions.lighten || 0) * this._currentPass;\r\n            if (lighten != 0) {\r\n                if (this.wrap) {\r\n                    lighten = $utils.fitNumberRelative(lighten, this.minLightness, this.maxLightness);\r\n                }\r\n                else {\r\n                    lighten = $utils.fitNumber(lighten, this.minLightness, this.maxLightness);\r\n                }\r\n                c = c.lighten(lighten);\r\n            }\r\n            this._list.push(c);\r\n        }\r\n        this._currentPass++;\r\n    };\r\n    Object.defineProperty(ColorSet.prototype, \"currentColor\", {\r\n        /**\r\n         * Returns current last color. It's either the last color in the list of\r\n         * colors, or `baseColor` if list is empty.\r\n         *\r\n         * @return Color\r\n         */\r\n        get: function () {\r\n            if (this._list.length == 0) {\r\n                return this.baseColor.saturate(this.saturation);\r\n            }\r\n            else {\r\n                return this._list[this._list.length - 1].saturate(this.saturation);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Generates modifiers for color, based on what step and pass.\r\n     *\r\n     * @param hsl   Curren HSL value of the color to modify\r\n     * @param base  The modifiers that were before modification to use as a base\r\n     * @param step  Current step\r\n     * @param pass  Current pass\r\n     */\r\n    ColorSet.prototype.applyStepOptions = function (hsl, base, step, pass) {\r\n        // Process lightness\r\n        hsl.l = base.lightness + (this.stepOptions.lightness || 0) * step + (this.passOptions.lightness || 0) * pass;\r\n        if (this.wrap) {\r\n            if (hsl.l > 1) {\r\n                hsl.l = hsl.l - Math.floor(hsl.l);\r\n            }\r\n            else if (hsl.l < 0) {\r\n                hsl.l = -(hsl.l - Math.floor(hsl.l));\r\n            }\r\n            hsl.l = $utils.fitNumberRelative(hsl.l, this.minLightness, this.maxLightness);\r\n        }\r\n        else {\r\n            if (hsl.l > 1) {\r\n                hsl.l = 1;\r\n            }\r\n            else if (hsl.l < 0) {\r\n                hsl.l = 0;\r\n            }\r\n            hsl.l = $utils.fitNumber(hsl.l, this.minLightness, this.maxLightness);\r\n        }\r\n    };\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param config  Config\r\n     */\r\n    ColorSet.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Cast colors\r\n            if ($type.hasValue(config.list) && $type.isArray(config.list)) {\r\n                for (var i = 0, len = config.list.length; i < len; i++) {\r\n                    if (!(config.list[i] instanceof Color)) {\r\n                        config.list[i] = color(config.list[i]);\r\n                    }\r\n                }\r\n            }\r\n            if ($type.hasValue(config.baseColor) && !(config.baseColor instanceof Color)) {\r\n                config.baseColor = color(config.baseColor);\r\n            }\r\n        }\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    return ColorSet;\r\n}(BaseObject));\r\nexport { ColorSet };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColorSet\"] = ColorSet;\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,SAAS,QAAQ,OAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,UAAU,QAAQ,SAAS;AACpC,SAASC,KAAK,EAAEC,KAAK,QAAQ,SAAS;AACtC,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAO,KAAKC,OAAO,MAAM,UAAU;AACnC,OAAO,KAAKC,KAAK,MAAM,QAAQ;AAC/B,OAAO,KAAKC,MAAM,MAAM,SAAS;AACjC,OAAO,KAAKC,KAAK,MAAM,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,QAAQ,GAAG,aAAe,UAAUC,MAAM,EAAE;EAC5CV,SAAS,CAACS,QAAQ,EAAEC,MAAM,CAAC;EAC3B;AACJ;AACA;EACI,SAASD,QAAQA,CAAA,EAAG;IAChB,IAAIE,KAAK,GAAGD,MAAM,CAACE,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI;IACrC;AACR;AACA;IACQD,KAAK,CAACE,KAAK,GAAG,EAAE;IAChB;AACR;AACA;IACQF,KAAK,CAACG,YAAY,GAAG,CAAC;IACtB;AACR;AACA;AACA;IACQH,KAAK,CAACI,WAAW,GAAG,CAAC;IACrB;AACR;AACA;AACA;AACA;IACQJ,KAAK,CAACK,YAAY,GAAG,CAAC;IACtB;AACR;AACA;AACA;AACA;IACQL,KAAK,CAACM,SAAS,GAAG,IAAIf,KAAK,CAAC;MACxBgB,CAAC,EAAE,GAAG;MACNC,CAAC,EAAE,GAAG;MACNC,CAAC,EAAE;IACP,CAAC,CAAC;IACF;AACR;AACA;IACQT,KAAK,CAACU,WAAW,GAAG,CAAC,CAAC;IACtB;AACR;AACA;AACA;AACA;AACA;IACQV,KAAK,CAACW,WAAW,GAAG;MAChBC,QAAQ,EAAE,CAAC;IACf,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQZ,KAAK,CAACa,IAAI,GAAG,CAAC;IACd;AACR;AACA;AACA;AACA;AACA;AACA;IACQb,KAAK,CAACc,SAAS,GAAG,EAAE;IACpB;AACR;AACA;AACA;IACQd,KAAK,CAACe,YAAY,GAAG,GAAG;IACxB;AACR;AACA;IACQf,KAAK,CAACgB,YAAY,GAAG,GAAG;IACxB;AACR;AACA;IACQhB,KAAK,CAACiB,OAAO,GAAG,KAAK;IACrB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQjB,KAAK,CAACkB,IAAI,GAAG,IAAI;IACjB;AACR;AACA;AACA;IACQlB,KAAK,CAACmB,KAAK,GAAG,KAAK;IACnB;AACR;AACA;AACA;AACA;AACA;AACA;IACQnB,KAAK,CAACoB,UAAU,GAAG,CAAC;IACpBpB,KAAK,CAACqB,SAAS,GAAG,UAAU;IAC5BrB,KAAK,CAACsB,UAAU,CAAC,CAAC;IAClB,OAAOtB,KAAK;EAChB;EACAuB,MAAM,CAACC,cAAc,CAAC1B,QAAQ,CAAC2B,SAAS,EAAE,MAAM,EAAE;IAC9C;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,IAAI,CAAC,IAAI,CAACxB,KAAK,EAAE;QACb,IAAI,CAACyB,QAAQ,CAAC,IAAI,CAACb,SAAS,CAAC;MACjC;MACA,OAAO,IAAI,CAACZ,KAAK;IACrB,CAAC;IACD;AACR;AACA;AACA;AACA;IACQ0B,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAAC3B,KAAK,GAAG2B,KAAK;MAClB,IAAI,CAACC,KAAK,CAAC,CAAC;IAChB,CAAC;IACDC,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF;AACJ;AACA;AACA;AACA;AACA;EACIlC,QAAQ,CAAC2B,SAAS,CAACQ,gBAAgB,GAAG,UAAUC,KAAK,EAAE;IACnD,IAAI,IAAI,CAAChC,KAAK,CAACiC,MAAM,IAAI,CAAC,EAAE;MACxB,IAAI,CAACR,QAAQ,CAAC,CAAC,CAAC;MAChB,OAAO,IAAI,CAACS,IAAI,CAAC,CAAC,CAAC;IACvB,CAAC,MACI;MACD,IAAIC,OAAO,GAAGH,KAAK,GAAII,IAAI,CAACC,KAAK,CAACL,KAAK,GAAG,IAAI,CAAChC,KAAK,CAACiC,MAAM,CAAC,GAAG,IAAI,CAACC,IAAI,CAACD,MAAO;MAChF,OAAO,IAAI,CAACC,IAAI,CAACC,OAAO,CAAC;IAC7B;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIvC,QAAQ,CAAC2B,SAAS,CAACe,IAAI,GAAG,YAAY;IAClC,IAAIhD,KAAK;IACT,IAAI,IAAI,CAAC4C,IAAI,CAACD,MAAM,IAAI,IAAI,CAAChC,YAAY,EAAE;MACvC,IAAI,IAAI,CAACgB,KAAK,EAAE;QACZ3B,KAAK,GAAG,IAAI,CAACyC,gBAAgB,CAAC,IAAI,CAAC9B,YAAY,CAAC;MACpD,CAAC,MACI;QACD,IAAI,CAACwB,QAAQ,CAAC9B,KAAK,CAAC4C,GAAG,CAAC,IAAI,CAAC3B,SAAS,EAAE,IAAI,CAACX,YAAY,GAAG,CAAC,CAAC,CAAC;QAC/DX,KAAK,GAAG,IAAI,CAAC4C,IAAI,CAAC,IAAI,CAACjC,YAAY,CAAC;MACxC;IACJ,CAAC,MACI;MACDX,KAAK,GAAG,IAAI,CAAC4C,IAAI,CAAC,IAAI,CAACjC,YAAY,CAAC;IACxC;IACA,IAAI,CAACA,YAAY,IAAI,IAAI,CAACU,IAAI;IAC9B,OAAOrB,KAAK,CAACkD,QAAQ,CAAC,IAAI,CAACtB,UAAU,CAAC;EAC1C,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACItB,QAAQ,CAAC2B,SAAS,CAACkB,QAAQ,GAAG,UAAUC,CAAC,EAAE;IACvC,IAAIpD,KAAK;IACT,IAAI,IAAI,CAAC4C,IAAI,CAACD,MAAM,IAAIS,CAAC,EAAE;MACvB,IAAI,IAAI,CAACzB,KAAK,EAAE;QACZ3B,KAAK,GAAG,IAAI,CAACyC,gBAAgB,CAACW,CAAC,CAAC;MACpC,CAAC,MACI;QACD,IAAI,CAACjB,QAAQ,CAAC,IAAI,CAACb,SAAS,CAAC;QAC7BtB,KAAK,GAAG,IAAI,CAACmD,QAAQ,CAACC,CAAC,CAAC;MAC5B;IACJ,CAAC,MACI;MACDpD,KAAK,GAAG,IAAI,CAAC4C,IAAI,CAACQ,CAAC,CAAC;IACxB;IACA,OAAOpD,KAAK,CAACkD,QAAQ,CAAC,IAAI,CAACtB,UAAU,CAAC;EAC1C,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACItB,QAAQ,CAAC2B,SAAS,CAACK,KAAK,GAAG,YAAY;IACnC,IAAI,CAAC3B,YAAY,GAAG,IAAI,CAACC,WAAW;EACxC,CAAC;EACDmB,MAAM,CAACC,cAAc,CAAC1B,QAAQ,CAAC2B,SAAS,EAAE,aAAa,EAAE;IACrD;AACR;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACvB,YAAY;IAC5B,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQyB,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAAC1B,YAAY,GAAG0B,KAAK;IAC7B,CAAC;IACDE,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFT,MAAM,CAACC,cAAc,CAAC1B,QAAQ,CAAC2B,SAAS,EAAE,YAAY,EAAE;IACpD;AACR;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACtB,WAAW;IAC3B,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQwB,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAACzB,WAAW,GAAGyB,KAAK;MACxB,IAAI,CAACC,KAAK,CAAC,CAAC;IAChB,CAAC;IACDC,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF;AACJ;AACA;AACA;AACA;EACIlC,QAAQ,CAAC2B,SAAS,CAACE,QAAQ,GAAG,UAAUkB,KAAK,EAAE;IAC3C;IACA,IAAIC,QAAQ,GAAG,IAAI,CAACC,YAAY;IAChC,IAAIC,GAAG,GAAGtD,OAAO,CAACuD,QAAQ,CAACtD,KAAK,CAACuD,QAAQ,CAACJ,QAAQ,CAACK,GAAG,CAAC,CAAC;IACxD,IAAIC,OAAO,GAAGzD,KAAK,CAAC0D,QAAQ,CAAC,IAAI,CAAC3C,WAAW,CAAC4C,GAAG,CAAC,GAAG,IAAI,CAAC5C,WAAW,CAAC4C,GAAG,GAAG,CAAC,GAAGT,KAAK;IACrF,IAAIU,IAAI,GAAG;MACP3C,QAAQ,EAAE,CAAC;MACX4C,OAAO,EAAE,CAAC;MACVF,GAAG,EAAEN,GAAG,CAACS,CAAC;MACVC,SAAS,EAAEV,GAAG,CAACW,CAAC;MAChBvC,UAAU,EAAE4B,GAAG,CAACY;IACpB,CAAC;IACD;IACA,IAAIC,IAAI,GAAG,EAAE;IACb,IAAIC,UAAU,GAAG,IAAI,CAAC1B,IAAI,CAACD,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;IAC9C,IAAI,IAAI,CAAChB,KAAK,EAAE;MACZ,KAAK,IAAIyB,CAAC,GAAGkB,UAAU,EAAElB,CAAC,IAAIC,KAAK,EAAED,CAAC,EAAE,EAAE;QACtCiB,IAAI,CAACE,IAAI,CAACrE,OAAO,CAACuD,QAAQ,CAACtD,KAAK,CAACuD,QAAQ,CAAC,IAAI,CAAChD,KAAK,CAAC0C,CAAC,CAAC,CAACO,GAAG,CAAC,CAAC,CAACM,CAAC,CAAC;MACpE;IACJ,CAAC,MACI;MACD,KAAK,IAAIb,CAAC,GAAGkB,UAAU,EAAElB,CAAC,IAAIC,KAAK,EAAED,CAAC,EAAE,EAAE;QACtC,IAAIa,CAAC,GAAGT,GAAG,CAACS,CAAC,GAAGL,OAAO,GAAGR,CAAC;QAC3B,IAAI,IAAI,CAAC1B,IAAI,IAAKuC,CAAC,GAAG,CAAE,EAAE;UACtBA,CAAC,IAAI,CAAC;QACV;QACAI,IAAI,CAACE,IAAI,CAACN,CAAC,CAAC;MAChB;IACJ;IACA;IACA,IAAI,IAAI,CAACxC,OAAO,EAAE;MACd4C,IAAI,CAACG,IAAI,CAAC,UAAUC,CAAC,EAAExD,CAAC,EAAE;QACtB,OAAO6B,IAAI,CAAC4B,MAAM,CAAC,CAAC,GAAG,GAAG;MAC9B,CAAC,CAAC;IACN;IACA;IACA,KAAK,IAAItB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,KAAK,EAAED,CAAC,EAAE,EAAE;MAC5B;MACA,IAAI,IAAI,CAACzB,KAAK,EAAE;QACZ6B,GAAG,GAAGtD,OAAO,CAACuD,QAAQ,CAACtD,KAAK,CAACuD,QAAQ,CAAC,IAAI,CAAChD,KAAK,CAAC0C,CAAC,CAAC,CAACO,GAAG,CAAC,CAAC;MAC7D,CAAC,MACI;QACDH,GAAG,CAACS,CAAC,GAAGI,IAAI,CAACM,KAAK,CAAC,CAAC;MACxB;MACA;MACA,IAAI,CAACC,gBAAgB,CAACpB,GAAG,EAAEO,IAAI,EAAEX,CAAC,EAAE,IAAI,CAACvC,YAAY,CAAC;MACtD;MACA,IAAIgE,CAAC,GAAG7E,KAAK,CAACE,OAAO,CAAC4E,QAAQ,CAACtB,GAAG,CAAC,CAAC;MACpC;MACA,IAAIpC,QAAQ,GAAG,CAAC,IAAI,CAACF,WAAW,CAACE,QAAQ,IAAI,CAAC,IAAIgC,CAAC,GAAG,CAAC,IAAI,CAACjC,WAAW,CAACC,QAAQ,IAAI,CAAC,IAAI,IAAI,CAACP,YAAY;MAC1G,IAAIO,QAAQ,IAAI,CAAC,EAAE;QACf,IAAI,IAAI,CAACM,IAAI,EAAE;UACXN,QAAQ,GAAGhB,MAAM,CAAC2E,iBAAiB,CAAC3D,QAAQ,EAAE,IAAI,CAACG,YAAY,EAAE,IAAI,CAACC,YAAY,CAAC;QACvF,CAAC,MACI;UACDJ,QAAQ,GAAGhB,MAAM,CAAC4E,SAAS,CAAC5D,QAAQ,EAAE,IAAI,CAACG,YAAY,EAAE,IAAI,CAACC,YAAY,CAAC;QAC/E;QACAqD,CAAC,GAAGA,CAAC,CAACzD,QAAQ,CAACA,QAAQ,CAAC;MAC5B;MACA,IAAI4C,OAAO,GAAG,CAAC,IAAI,CAAC9C,WAAW,CAAC8C,OAAO,IAAI,CAAC,IAAIZ,CAAC,GAAG,CAAC,IAAI,CAACjC,WAAW,CAAC6C,OAAO,IAAI,CAAC,IAAI,IAAI,CAACnD,YAAY;MACvG,IAAImD,OAAO,IAAI,CAAC,EAAE;QACd,IAAI,IAAI,CAACtC,IAAI,EAAE;UACXsC,OAAO,GAAG5D,MAAM,CAAC2E,iBAAiB,CAACf,OAAO,EAAE,IAAI,CAACzC,YAAY,EAAE,IAAI,CAACC,YAAY,CAAC;QACrF,CAAC,MACI;UACDwC,OAAO,GAAG5D,MAAM,CAAC4E,SAAS,CAAChB,OAAO,EAAE,IAAI,CAACzC,YAAY,EAAE,IAAI,CAACC,YAAY,CAAC;QAC7E;QACAqD,CAAC,GAAGA,CAAC,CAACb,OAAO,CAACA,OAAO,CAAC;MAC1B;MACA,IAAI,CAACtD,KAAK,CAAC6D,IAAI,CAACM,CAAC,CAAC;IACtB;IACA,IAAI,CAAChE,YAAY,EAAE;EACvB,CAAC;EACDkB,MAAM,CAACC,cAAc,CAAC1B,QAAQ,CAAC2B,SAAS,EAAE,cAAc,EAAE;IACtD;AACR;AACA;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,IAAI,IAAI,CAACxB,KAAK,CAACiC,MAAM,IAAI,CAAC,EAAE;QACxB,OAAO,IAAI,CAAC7B,SAAS,CAACoC,QAAQ,CAAC,IAAI,CAACtB,UAAU,CAAC;MACnD,CAAC,MACI;QACD,OAAO,IAAI,CAAClB,KAAK,CAAC,IAAI,CAACA,KAAK,CAACiC,MAAM,GAAG,CAAC,CAAC,CAACO,QAAQ,CAAC,IAAI,CAACtB,UAAU,CAAC;MACtE;IACJ,CAAC;IACDW,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIlC,QAAQ,CAAC2B,SAAS,CAAC2C,gBAAgB,GAAG,UAAUpB,GAAG,EAAEyB,IAAI,EAAE5D,IAAI,EAAE6D,IAAI,EAAE;IACnE;IACA1B,GAAG,CAACW,CAAC,GAAGc,IAAI,CAACf,SAAS,GAAG,CAAC,IAAI,CAAChD,WAAW,CAACgD,SAAS,IAAI,CAAC,IAAI7C,IAAI,GAAG,CAAC,IAAI,CAACF,WAAW,CAAC+C,SAAS,IAAI,CAAC,IAAIgB,IAAI;IAC5G,IAAI,IAAI,CAACxD,IAAI,EAAE;MACX,IAAI8B,GAAG,CAACW,CAAC,GAAG,CAAC,EAAE;QACXX,GAAG,CAACW,CAAC,GAAGX,GAAG,CAACW,CAAC,GAAGrB,IAAI,CAACC,KAAK,CAACS,GAAG,CAACW,CAAC,CAAC;MACrC,CAAC,MACI,IAAIX,GAAG,CAACW,CAAC,GAAG,CAAC,EAAE;QAChBX,GAAG,CAACW,CAAC,GAAG,EAAEX,GAAG,CAACW,CAAC,GAAGrB,IAAI,CAACC,KAAK,CAACS,GAAG,CAACW,CAAC,CAAC,CAAC;MACxC;MACAX,GAAG,CAACW,CAAC,GAAG/D,MAAM,CAAC2E,iBAAiB,CAACvB,GAAG,CAACW,CAAC,EAAE,IAAI,CAAC5C,YAAY,EAAE,IAAI,CAACC,YAAY,CAAC;IACjF,CAAC,MACI;MACD,IAAIgC,GAAG,CAACW,CAAC,GAAG,CAAC,EAAE;QACXX,GAAG,CAACW,CAAC,GAAG,CAAC;MACb,CAAC,MACI,IAAIX,GAAG,CAACW,CAAC,GAAG,CAAC,EAAE;QAChBX,GAAG,CAACW,CAAC,GAAG,CAAC;MACb;MACAX,GAAG,CAACW,CAAC,GAAG/D,MAAM,CAAC4E,SAAS,CAACxB,GAAG,CAACW,CAAC,EAAE,IAAI,CAAC5C,YAAY,EAAE,IAAI,CAACC,YAAY,CAAC;IACzE;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIlB,QAAQ,CAAC2B,SAAS,CAACkD,aAAa,GAAG,UAAUC,MAAM,EAAE;IACjD,IAAIA,MAAM,EAAE;MACR;MACA,IAAIjF,KAAK,CAAC0D,QAAQ,CAACuB,MAAM,CAACxC,IAAI,CAAC,IAAIzC,KAAK,CAACkF,OAAO,CAACD,MAAM,CAACxC,IAAI,CAAC,EAAE;QAC3D,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEkC,GAAG,GAAGF,MAAM,CAACxC,IAAI,CAACD,MAAM,EAAES,CAAC,GAAGkC,GAAG,EAAElC,CAAC,EAAE,EAAE;UACpD,IAAI,EAAEgC,MAAM,CAACxC,IAAI,CAACQ,CAAC,CAAC,YAAYrD,KAAK,CAAC,EAAE;YACpCqF,MAAM,CAACxC,IAAI,CAACQ,CAAC,CAAC,GAAGpD,KAAK,CAACoF,MAAM,CAACxC,IAAI,CAACQ,CAAC,CAAC,CAAC;UAC1C;QACJ;MACJ;MACA,IAAIjD,KAAK,CAAC0D,QAAQ,CAACuB,MAAM,CAACtE,SAAS,CAAC,IAAI,EAAEsE,MAAM,CAACtE,SAAS,YAAYf,KAAK,CAAC,EAAE;QAC1EqF,MAAM,CAACtE,SAAS,GAAGd,KAAK,CAACoF,MAAM,CAACtE,SAAS,CAAC;MAC9C;IACJ;IACAP,MAAM,CAAC0B,SAAS,CAACkD,aAAa,CAAC1E,IAAI,CAAC,IAAI,EAAE2E,MAAM,CAAC;EACrD,CAAC;EACD,OAAO9E,QAAQ;AACnB,CAAC,CAACR,UAAU,CAAE;AACd,SAASQ,QAAQ;AACjB;AACA;AACA;AACA;AACA;AACA;AACAL,QAAQ,CAACsF,iBAAiB,CAAC,UAAU,CAAC,GAAGjF,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}