{"ast":null,"code":"import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceStringArray } from '@angular/cdk/coercion';\nimport { Platform, _getShadowRoot } from '@angular/cdk/platform';\nimport { InjectionToken, EventEmitter, Directive, ChangeDetectorRef, ElementRef, Inject, ViewChild, TemplateRef, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, forwardRef, ViewContainerRef, NgZone, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MAT_OPTGROUP, MatOption, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ESCAPE, hasModifierKey, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField, MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { take, switchMap, filter, map, tap, delay } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\nclass MatAutocompleteSelectedEvent {\n  constructor( /** Reference to the autocomplete panel that emitted the event. */\n  source, /** Option that was selected. */\n  option) {\n    this.source = source;\n    this.option = option;\n  }\n}\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nclass MatAutocompleteBase {}\nconst _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n  providedIn: 'root',\n  factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    autoActiveFirstOption: false\n  };\n}\n/** Base class with all of the `MatAutocomplete` functionality. */\nclass _MatAutocompleteBase extends _MatAutocompleteMixinBase {\n  constructor(_changeDetectorRef, _elementRef, defaults, platform) {\n    super();\n    this._changeDetectorRef = _changeDetectorRef;\n    this._elementRef = _elementRef;\n    this._activeOptionChanges = Subscription.EMPTY;\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n    this.showPanel = false;\n    this._isOpen = false;\n    /** Function that maps an option's control value to its display value in the trigger. */\n    this.displayWith = null;\n    /** Event that is emitted whenever an option from the list is selected. */\n    this.optionSelected = new EventEmitter();\n    /** Event that is emitted when the autocomplete panel is opened. */\n    this.opened = new EventEmitter();\n    /** Event that is emitted when the autocomplete panel is closed. */\n    this.closed = new EventEmitter();\n    /** Emits whenever an option is activated using the keyboard. */\n    this.optionActivated = new EventEmitter();\n    this._classList = {};\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n    this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n    // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n    // Safari using VoiceOver. We should occasionally check back to see whether the bug\n    // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n    // option altogether.\n    this.inertGroups = (platform === null || platform === void 0 ? void 0 : platform.SAFARI) || false;\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n  /** Whether the autocomplete panel is open. */\n  get isOpen() {\n    return this._isOpen && this.showPanel;\n  }\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  get autoActiveFirstOption() {\n    return this._autoActiveFirstOption;\n  }\n  set autoActiveFirstOption(value) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  set classList(value) {\n    if (value && value.length) {\n      this._classList = coerceStringArray(value).reduce((classList, className) => {\n        classList[className] = true;\n        return classList;\n      }, {});\n    } else {\n      this._classList = {};\n    }\n    this._setVisibilityClasses(this._classList);\n    this._elementRef.nativeElement.className = '';\n  }\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n    this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n      this.optionActivated.emit({\n        source: this,\n        option: this.options.toArray()[index] || null\n      });\n    });\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n  ngOnDestroy() {\n    this._activeOptionChanges.unsubscribe();\n  }\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop) {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n  /** Returns the panel's scrollTop. */\n  _getScrollTop() {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._setVisibilityClasses(this._classList);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** Emits the `select` event. */\n  _emitSelectEvent(option) {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n  /** Gets the aria-labelledby for the autocomplete panel. */\n  _getPanelAriaLabelledby(labelId) {\n    if (this.ariaLabel) {\n      return null;\n    }\n    const labelExpression = labelId ? labelId + ' ' : '';\n    return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n  }\n  /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n  _setVisibilityClasses(classList) {\n    classList[this._visibleClass] = this.showPanel;\n    classList[this._hiddenClass] = !this.showPanel;\n  }\n}\n_MatAutocompleteBase.decorators = [{\n  type: Directive\n}];\n_MatAutocompleteBase.ctorParameters = () => [{\n  type: ChangeDetectorRef\n}, {\n  type: ElementRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n  }]\n}, {\n  type: Platform\n}];\n_MatAutocompleteBase.propDecorators = {\n  template: [{\n    type: ViewChild,\n    args: [TemplateRef, {\n      static: true\n    }]\n  }],\n  panel: [{\n    type: ViewChild,\n    args: ['panel']\n  }],\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  displayWith: [{\n    type: Input\n  }],\n  autoActiveFirstOption: [{\n    type: Input\n  }],\n  panelWidth: [{\n    type: Input\n  }],\n  optionSelected: [{\n    type: Output\n  }],\n  opened: [{\n    type: Output\n  }],\n  closed: [{\n    type: Output\n  }],\n  optionActivated: [{\n    type: Output\n  }],\n  classList: [{\n    type: Input,\n    args: ['class']\n  }]\n};\nclass MatAutocomplete extends _MatAutocompleteBase {\n  constructor() {\n    super(...arguments);\n    this._visibleClass = 'mat-autocomplete-visible';\n    this._hiddenClass = 'mat-autocomplete-hidden';\n  }\n}\nMatAutocomplete.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-autocomplete',\n    template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div class=\\\"mat-autocomplete-panel\\\"\\n       role=\\\"listbox\\\"\\n       [id]=\\\"id\\\"\\n       [attr.aria-label]=\\\"ariaLabel || null\\\"\\n       [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n       [ngClass]=\\\"_classList\\\"\\n       #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\",\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'matAutocomplete',\n    inputs: ['disableRipple'],\n    host: {\n      'class': 'mat-autocomplete'\n    },\n    providers: [{\n      provide: MAT_OPTION_PARENT_COMPONENT,\n      useExisting: MatAutocomplete\n    }],\n    styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"]\n  }]\n}];\nMatAutocomplete.propDecorators = {\n  optionGroups: [{\n    type: ContentChildren,\n    args: [MAT_OPTGROUP, {\n      descendants: true\n    }]\n  }],\n  options: [{\n    type: ContentChildren,\n    args: [MatOption, {\n      descendants: true\n    }]\n  }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Base class containing all of the functionality for `MatAutocompleteOrigin`. */\nclass _MatAutocompleteOriginBase {\n  constructor( /** Reference to the element on which the directive is applied. */\n  elementRef) {\n    this.elementRef = elementRef;\n  }\n}\n_MatAutocompleteOriginBase.decorators = [{\n  type: Directive\n}];\n_MatAutocompleteOriginBase.ctorParameters = () => [{\n  type: ElementRef\n}];\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin extends _MatAutocompleteOriginBase {}\nMatAutocompleteOrigin.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matAutocompleteOrigin]',\n    exportAs: 'matAutocompleteOrigin'\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nfunction getMatAutocompleteMissingPanelError() {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' + 'Make sure that the id passed to the `matAutocomplete` is correct and that ' + 'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\nclass _MatAutocompleteTriggerBase {\n  constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler, _defaults) {\n    this._element = _element;\n    this._overlay = _overlay;\n    this._viewContainerRef = _viewContainerRef;\n    this._zone = _zone;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dir = _dir;\n    this._formField = _formField;\n    this._document = _document;\n    this._viewportRuler = _viewportRuler;\n    this._defaults = _defaults;\n    this._componentDestroyed = false;\n    this._autocompleteDisabled = false;\n    /** Whether or not the label state is being overridden. */\n    this._manuallyFloatingLabel = false;\n    /** Subscription to viewport size changes. */\n    this._viewportSubscription = Subscription.EMPTY;\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n    this._canOpenOnNextFocus = true;\n    /** Stream of keyboard events that can close the panel. */\n    this._closeKeyEventStream = new Subject();\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n    this._windowBlurHandler = () => {\n      // If the user blurred the window while the autocomplete is focused, it means that it'll be\n      // refocused when they come back. In this case we want to skip the first focus event, if the\n      // pane was closed, in order to avoid reopening it unintentionally.\n      this._canOpenOnNextFocus = this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n    };\n    /** `View -> model callback called when value changes` */\n    this._onChange = () => {};\n    /** `View -> model callback called when autocomplete has been touched` */\n    this._onTouched = () => {};\n    /**\n     * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n     * will render the panel underneath the trigger if there is enough space for it to fit in\n     * the viewport, otherwise the panel will be shown above it. If the position is set to\n     * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n     * whether it fits completely in the viewport.\n     */\n    this.position = 'auto';\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * @docs-private\n     */\n    this.autocompleteAttribute = 'off';\n    this._overlayAttached = false;\n    /** Stream of autocomplete option selections. */\n    this.optionSelections = defer(() => {\n      if (this.autocomplete && this.autocomplete.options) {\n        return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n      }\n      // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n      // Return a stream that we'll replace with the real one once everything is in place.\n      return this._zone.onStable.pipe(take(1), switchMap(() => this.optionSelections));\n    });\n    this._scrollStrategy = scrollStrategy;\n  }\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  get autocompleteDisabled() {\n    return this._autocompleteDisabled;\n  }\n  set autocompleteDisabled(value) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n  ngAfterViewInit() {\n    const window = this._getWindow();\n    if (typeof window !== 'undefined') {\n      this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n    }\n  }\n  ngOnChanges(changes) {\n    if (changes['position'] && this._positionStrategy) {\n      this._setStrategyPositions(this._positionStrategy);\n      if (this.panelOpen) {\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n  ngOnDestroy() {\n    const window = this._getWindow();\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen() {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  /** Opens the autocomplete suggestion panel. */\n  openPanel() {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n  /** Closes the autocomplete suggestion panel. */\n  closePanel() {\n    this._resetLabel();\n    if (!this._overlayAttached) {\n      return;\n    }\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n    this.autocomplete._isOpen = this._overlayAttached = false;\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition() {\n    if (this._overlayAttached) {\n      this._overlayRef.updatePosition();\n    }\n  }\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions() {\n    return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ? this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) : of()).pipe(\n    // Normalize the output so we return a consistent type.\n    map(event => event instanceof MatOptionSelectionChange ? event : null));\n  }\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption() {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n    return null;\n  }\n  /** Stream of clicks outside of the autocomplete panel. */\n  _getOutsideClickStream() {\n    return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend')).pipe(filter(event => {\n      // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n      // fall back to check the first element in the path of the click event.\n      const clickTarget = this._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] : event.target;\n      const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n      const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n      return this._overlayAttached && clickTarget !== this._element.nativeElement && (!formField || !formField.contains(clickTarget)) && (!customOrigin || !customOrigin.contains(clickTarget)) && !!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget);\n    }));\n  }\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value) {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n  _handleKeydown(event) {\n    const keyCode = event.keyCode;\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE && !hasModifierKey(event)) {\n      event.preventDefault();\n    }\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n      }\n    }\n  }\n  _handleInput(event) {\n    let target = event.target;\n    let value = target.value;\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n      this._onChange(value);\n      if (this._canOpen() && this._document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n  _handleFocus() {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  _floatLabel(shouldAnimate = false) {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n      this._manuallyFloatingLabel = true;\n    }\n  }\n  /** If the label has been manually elevated, return it to its normal state. */\n  _resetLabel() {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  _subscribeToClosingActions() {\n    const firstStable = this._zone.onStable.pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()),\n    // Defer emitting to the stream until the next tick, because changing\n    // bindings in here will cause \"changed after checked\" errors.\n    delay(0));\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges).pipe(\n    // create a new stream of panelClosingActions, replacing any previous streams\n    // that were created, and flatten it so our stream only emits closing events...\n    switchMap(() => {\n      const wasOpen = this.panelOpen;\n      this._resetActiveItem();\n      this.autocomplete._setVisibility();\n      if (this.panelOpen) {\n        this._overlayRef.updatePosition();\n        // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n        // event, because we may not have emitted it when the panel was attached. This\n        // can happen if the users opens the panel and there are no options, but the\n        // options come in slightly later or as a result of the value changing.\n        if (wasOpen !== this.panelOpen) {\n          this.autocomplete.opened.emit();\n        }\n      }\n      return this.panelClosingActions;\n    }),\n    // when the first closing event occurs...\n    take(1))\n    // set the value, close the panel, and complete.\n    .subscribe(event => this._setValueAndClose(event));\n  }\n  /** Destroys the autocomplete suggestion panel. */\n  _destroyPanel() {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n  _setTriggerValue(value) {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value;\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n    this._previousValue = inputValue;\n  }\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  _setValueAndClose(event) {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n    this.closePanel();\n  }\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  _clearPreviousSelectedOption(skip) {\n    this.autocomplete.options.forEach(option => {\n      if (option !== skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n  _attachOverlay() {\n    var _a;\n    if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n    // We want to resolve this once, as late as possible so that we can be\n    // sure that the element has been moved into its final place in the DOM.\n    if (this._isInsideShadowRoot == null) {\n      this._isInsideShadowRoot = !!_getShadowRoot(this._element.nativeElement);\n    }\n    let overlayRef = this._overlayRef;\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, {\n        id: (_a = this._formField) === null || _a === void 0 ? void 0 : _a.getLabelId()\n      });\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef;\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE && !hasModifierKey(event) || event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey')) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n          // We need to stop propagation, otherwise the event will eventually\n          // reach the input itself and cause the overlay to be reopened.\n          event.stopPropagation();\n          event.preventDefault();\n        }\n      });\n      this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n        if (this.panelOpen && overlayRef) {\n          overlayRef.updateSize({\n            width: this._getPanelWidth()\n          });\n        }\n      });\n    } else {\n      // Update the trigger, panel width and direction, in case anything has changed.\n      this._positionStrategy.setOrigin(this._getConnectedElement());\n      overlayRef.updateSize({\n        width: this._getPanelWidth()\n      });\n    }\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n    const wasOpen = this.panelOpen;\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n  _getOverlayConfig() {\n    var _a;\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir,\n      panelClass: (_a = this._defaults) === null || _a === void 0 ? void 0 : _a.overlayPanelClass\n    });\n  }\n  _getOverlayPosition() {\n    const strategy = this._overlay.position().flexibleConnectedTo(this._getConnectedElement()).withFlexibleDimensions(false).withPush(false);\n    this._setStrategyPositions(strategy);\n    this._positionStrategy = strategy;\n    return strategy;\n  }\n  /** Sets the positions on a position strategy based on the directive's input state. */\n  _setStrategyPositions(positionStrategy) {\n    // Note that we provide horizontal fallback positions, even though by default the dropdown\n    // width matches the input, because consumers can override the width. See #18854.\n    const belowPositions = [{\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top'\n    }, {\n      originX: 'end',\n      originY: 'bottom',\n      overlayX: 'end',\n      overlayY: 'top'\n    }];\n    // The overlay edge connected to the trigger should have squared corners, while\n    // the opposite end has rounded corners. We apply a CSS class to swap the\n    // border-radius based on the overlay position.\n    const panelClass = this._aboveClass;\n    const abovePositions = [{\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom',\n      panelClass\n    }, {\n      originX: 'end',\n      originY: 'top',\n      overlayX: 'end',\n      overlayY: 'bottom',\n      panelClass\n    }];\n    let positions;\n    if (this.position === 'above') {\n      positions = abovePositions;\n    } else if (this.position === 'below') {\n      positions = belowPositions;\n    } else {\n      positions = [...belowPositions, ...abovePositions];\n    }\n    positionStrategy.withPositions(positions);\n  }\n  _getConnectedElement() {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n  _getPanelWidth() {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n  /** Returns the width of the input element, so the panel width can match it. */\n  _getHostWidth() {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  _resetActiveItem() {\n    const autocomplete = this.autocomplete;\n    if (autocomplete.autoActiveFirstOption) {\n      // Note that we go through `setFirstItemActive`, rather than `setActiveItem(0)`, because\n      // the former will find the next enabled option, if the first one is disabled.\n      autocomplete._keyManager.setFirstItemActive();\n    } else {\n      autocomplete._keyManager.setActiveItem(-1);\n    }\n  }\n  /** Determines whether the panel can be opened. */\n  _canOpen() {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  _getWindow() {\n    var _a;\n    return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.defaultView) || window;\n  }\n  /** Scrolls to a particular option in the list. */\n  _scrollToOption(index) {\n    // Given that we are not actually focusing active options, we must manually adjust scroll\n    // to reveal options below the fold. First, we find the offset of the option from the top\n    // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n    // the panel height + the option height, so the active option will be just visible at the\n    // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n    // will become the offset. If that offset is visible within the panel already, the scrollTop is\n    // not adjusted.\n    const autocomplete = this.autocomplete;\n    const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n    if (index === 0 && labelCount === 1) {\n      // If we've got one group label before the option and we're at the top option,\n      // scroll the list to the top. This is better UX than scrolling the list to the\n      // top of the option, because it allows the user to read the top group's label.\n      autocomplete._setScrollTop(0);\n    } else if (autocomplete.panel) {\n      const option = autocomplete.options.toArray()[index];\n      if (option) {\n        const element = option._getHostElement();\n        const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n        autocomplete._setScrollTop(newScrollPosition);\n      }\n    }\n  }\n}\n_MatAutocompleteTriggerBase.decorators = [{\n  type: Directive\n}];\n_MatAutocompleteTriggerBase.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: Overlay\n}, {\n  type: ViewContainerRef\n}, {\n  type: NgZone\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: MatFormField,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_FORM_FIELD]\n  }, {\n    type: Host\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: ViewportRuler\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n  }]\n}];\n_MatAutocompleteTriggerBase.propDecorators = {\n  autocomplete: [{\n    type: Input,\n    args: ['matAutocomplete']\n  }],\n  position: [{\n    type: Input,\n    args: ['matAutocompletePosition']\n  }],\n  connectedTo: [{\n    type: Input,\n    args: ['matAutocompleteConnectedTo']\n  }],\n  autocompleteAttribute: [{\n    type: Input,\n    args: ['autocomplete']\n  }],\n  autocompleteDisabled: [{\n    type: Input,\n    args: ['matAutocompleteDisabled']\n  }]\n};\nclass MatAutocompleteTrigger extends _MatAutocompleteTriggerBase {\n  constructor() {\n    super(...arguments);\n    this._aboveClass = 'mat-autocomplete-panel-above';\n  }\n}\nMatAutocompleteTrigger.decorators = [{\n  type: Directive,\n  args: [{\n    selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n    host: {\n      'class': 'mat-autocomplete-trigger',\n      '[attr.autocomplete]': 'autocompleteAttribute',\n      '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n      '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n      '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n      '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n      '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n      '[attr.aria-haspopup]': '!autocompleteDisabled',\n      // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n      // a little earlier. This avoids issues where IE delays the focusing of the input.\n      '(focusin)': '_handleFocus()',\n      '(blur)': '_onTouched()',\n      '(input)': '_handleInput($event)',\n      '(keydown)': '_handleKeydown($event)'\n    },\n    exportAs: 'matAutocompleteTrigger',\n    providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatAutocompleteModule {}\nMatAutocompleteModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule],\n    exports: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin, CdkScrollableModule, MatOptionModule, MatCommonModule],\n    declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n    providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, _MatAutocompleteBase, _MatAutocompleteOriginBase, _MatAutocompleteTriggerBase, getMatAutocompleteMissingPanelError };","map":{"version":3,"names":["ActiveDescendantKeyManager","coerceBooleanProperty","coerceStringArray","Platform","_getShadowRoot","InjectionToken","EventEmitter","Directive","ChangeDetectorRef","ElementRef","Inject","ViewChild","TemplateRef","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","ContentChildren","forwardRef","ViewContainerRef","NgZone","Optional","Host","NgModule","mixinDisableRipple","MAT_OPTION_PARENT_COMPONENT","MAT_OPTGROUP","MatOption","MatOptionSelectionChange","_countGroupLabelsBeforeOption","_getOptionScrollPosition","MatOptionModule","MatCommonModule","Subscription","Subject","defer","merge","of","fromEvent","DOCUMENT","CommonModule","Overlay","OverlayConfig","OverlayModule","ViewportRuler","CdkScrollableModule","Directionality","ESCAPE","hasModifierKey","ENTER","UP_ARROW","DOWN_ARROW","TAB","TemplatePortal","NG_VALUE_ACCESSOR","MatFormField","MAT_FORM_FIELD","take","switchMap","filter","map","tap","delay","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","constructor","source","option","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","providedIn","factory","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","_MatAutocompleteBase","_changeDetectorRef","_elementRef","defaults","platform","_activeOptionChanges","EMPTY","showPanel","_isOpen","displayWith","optionSelected","opened","closed","optionActivated","_classList","id","inertGroups","SAFARI","_autoActiveFirstOption","isOpen","value","classList","length","reduce","className","_setVisibilityClasses","nativeElement","ngAfterContentInit","_keyManager","options","withWrap","change","subscribe","index","emit","toArray","_setVisibility","ngOnDestroy","unsubscribe","_setScrollTop","scrollTop","panel","_getScrollTop","markForCheck","_emitSelectEvent","event","_getPanelAriaLabelledby","labelId","ariaLabel","labelExpression","ariaLabelledby","_visibleClass","_hiddenClass","decorators","type","ctorParameters","undefined","args","propDecorators","template","static","panelWidth","MatAutocomplete","arguments","selector","encapsulation","None","changeDetection","OnPush","exportAs","inputs","host","providers","provide","useExisting","styles","optionGroups","descendants","_MatAutocompleteOriginBase","elementRef","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","multi","getMatAutocompleteMissingPanelError","Error","_MatAutocompleteTriggerBase","_element","_overlay","_viewContainerRef","_zone","scrollStrategy","_dir","_formField","_document","_viewportRuler","_defaults","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","activeElement","panelOpen","_onChange","_onTouched","position","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","onSelectionChange","onStable","pipe","_scrollStrategy","autocompleteDisabled","ngAfterViewInit","window","_getWindow","runOutsideAngular","addEventListener","ngOnChanges","changes","_positionStrategy","_setStrategyPositions","_overlayRef","updatePosition","removeEventListener","_destroyPanel","complete","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","hasAttached","detach","_closingActionsSubscription","detectChanges","panelClosingActions","tabOut","_getOutsideClickStream","detachments","activeOption","activeItem","clickTarget","_isInsideShadowRoot","composedPath","target","formField","customOrigin","connectedTo","contains","overlayElement","writeValue","Promise","resolve","then","_setTriggerValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","_handleKeydown","keyCode","preventDefault","_selectViaInteraction","_resetActiveItem","prevActiveItem","isArrowKey","onKeydown","_canOpen","_scrollToOption","activeItemIndex","_handleInput","parseFloat","_previousValue","_handleFocus","shouldAnimate","floatLabel","_animateAndLockLabel","_subscribeToClosingActions","firstStable","optionChanges","reapplyLastPosition","wasOpen","_setValueAndClose","dispose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","focus","skip","forEach","selected","deselect","_a","ngDevMode","overlayRef","_portal","getLabelId","create","_getOverlayConfig","keydownEvents","next","stopPropagation","updateSize","width","_getPanelWidth","setOrigin","_getConnectedElement","attach","positionStrategy","_getOverlayPosition","direction","panelClass","overlayPanelClass","strategy","flexibleConnectedTo","withFlexibleDimensions","withPush","belowPositions","originX","originY","overlayX","overlayY","_aboveClass","abovePositions","positions","withPositions","getConnectedOverlayOrigin","_getHostWidth","getBoundingClientRect","setFirstItemActive","setActiveItem","element","readOnly","defaultView","labelCount","_getHostElement","newScrollPosition","offsetTop","offsetHeight","MatAutocompleteModule","imports","exports","declarations"],"sources":["D:/alodelivery test/node_modules/@angular/material/fesm2015/autocomplete.js"],"sourcesContent":["import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceStringArray } from '@angular/cdk/coercion';\nimport { Platform, _getShadowRoot } from '@angular/cdk/platform';\nimport { InjectionToken, EventEmitter, Directive, ChangeDetectorRef, ElementRef, Inject, ViewChild, TemplateRef, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, forwardRef, ViewContainerRef, NgZone, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MAT_OPTGROUP, MatOption, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ESCAPE, hasModifierKey, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField, MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { take, switchMap, filter, map, tap, delay } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\nclass MatAutocompleteSelectedEvent {\n    constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    source, \n    /** Option that was selected. */\n    option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nclass MatAutocompleteBase {\n}\nconst _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return { autoActiveFirstOption: false };\n}\n/** Base class with all of the `MatAutocomplete` functionality. */\nclass _MatAutocompleteBase extends _MatAutocompleteMixinBase {\n    constructor(_changeDetectorRef, _elementRef, defaults, platform) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._activeOptionChanges = Subscription.EMPTY;\n        /** Whether the autocomplete panel should be visible, depending on option length. */\n        this.showPanel = false;\n        this._isOpen = false;\n        /** Function that maps an option's control value to its display value in the trigger. */\n        this.displayWith = null;\n        /** Event that is emitted whenever an option from the list is selected. */\n        this.optionSelected = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is opened. */\n        this.opened = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is closed. */\n        this.closed = new EventEmitter();\n        /** Emits whenever an option is activated using the keyboard. */\n        this.optionActivated = new EventEmitter();\n        this._classList = {};\n        /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n        // Safari using VoiceOver. We should occasionally check back to see whether the bug\n        // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n        // option altogether.\n        this.inertGroups = (platform === null || platform === void 0 ? void 0 : platform.SAFARI) || false;\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n    /** Whether the autocomplete panel is open. */\n    get isOpen() { return this._isOpen && this.showPanel; }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    get autoActiveFirstOption() { return this._autoActiveFirstOption; }\n    set autoActiveFirstOption(value) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    set classList(value) {\n        if (value && value.length) {\n            this._classList = coerceStringArray(value).reduce((classList, className) => {\n                classList[className] = true;\n                return classList;\n            }, {});\n        }\n        else {\n            this._classList = {};\n        }\n        this._setVisibilityClasses(this._classList);\n        this._elementRef.nativeElement.className = '';\n    }\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n        this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n            this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });\n        });\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    ngOnDestroy() {\n        this._activeOptionChanges.unsubscribe();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /** Returns the panel's scrollTop. */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /** Panel should hide itself when the option list is empty. */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._setVisibilityClasses(this._classList);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits the `select` event. */\n    _emitSelectEvent(option) {\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /** Gets the aria-labelledby for the autocomplete panel. */\n    _getPanelAriaLabelledby(labelId) {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n    _setVisibilityClasses(classList) {\n        classList[this._visibleClass] = this.showPanel;\n        classList[this._hiddenClass] = !this.showPanel;\n    }\n}\n_MatAutocompleteBase.decorators = [\n    { type: Directive }\n];\n_MatAutocompleteBase.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] },\n    { type: Platform }\n];\n_MatAutocompleteBase.propDecorators = {\n    template: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    displayWith: [{ type: Input }],\n    autoActiveFirstOption: [{ type: Input }],\n    panelWidth: [{ type: Input }],\n    optionSelected: [{ type: Output }],\n    opened: [{ type: Output }],\n    closed: [{ type: Output }],\n    optionActivated: [{ type: Output }],\n    classList: [{ type: Input, args: ['class',] }]\n};\nclass MatAutocomplete extends _MatAutocompleteBase {\n    constructor() {\n        super(...arguments);\n        this._visibleClass = 'mat-autocomplete-visible';\n        this._hiddenClass = 'mat-autocomplete-hidden';\n    }\n}\nMatAutocomplete.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-autocomplete',\n                template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div class=\\\"mat-autocomplete-panel\\\"\\n       role=\\\"listbox\\\"\\n       [id]=\\\"id\\\"\\n       [attr.aria-label]=\\\"ariaLabel || null\\\"\\n       [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n       [ngClass]=\\\"_classList\\\"\\n       #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                exportAs: 'matAutocomplete',\n                inputs: ['disableRipple'],\n                host: {\n                    'class': 'mat-autocomplete'\n                },\n                providers: [\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n                ],\n                styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"]\n            },] }\n];\nMatAutocomplete.propDecorators = {\n    optionGroups: [{ type: ContentChildren, args: [MAT_OPTGROUP, { descendants: true },] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Base class containing all of the functionality for `MatAutocompleteOrigin`. */\nclass _MatAutocompleteOriginBase {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\n_MatAutocompleteOriginBase.decorators = [\n    { type: Directive }\n];\n_MatAutocompleteOriginBase.ctorParameters = () => [\n    { type: ElementRef }\n];\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin extends _MatAutocompleteOriginBase {\n}\nMatAutocompleteOrigin.decorators = [\n    { type: Directive, args: [{\n                selector: '[matAutocompleteOrigin]',\n                exportAs: 'matAutocompleteOrigin',\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatAutocompleteTrigger),\n    multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\nclass _MatAutocompleteTriggerBase {\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler, _defaults) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._defaults = _defaults;\n        this._componentDestroyed = false;\n        this._autocompleteDisabled = false;\n        /** Whether or not the label state is being overridden. */\n        this._manuallyFloatingLabel = false;\n        /** Subscription to viewport size changes. */\n        this._viewportSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /** Stream of keyboard events that can close the panel. */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n        };\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when autocomplete has been touched` */\n        this._onTouched = () => { };\n        /**\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n         * will render the panel underneath the trigger if there is enough space for it to fit in\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n         * whether it fits completely in the viewport.\n         */\n        this.position = 'auto';\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * @docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        this._overlayAttached = false;\n        /** Stream of autocomplete option selections. */\n        this.optionSelections = defer(() => {\n            if (this.autocomplete && this.autocomplete.options) {\n                return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable\n                .pipe(take(1), switchMap(() => this.optionSelections));\n        });\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    get autocompleteDisabled() { return this._autocompleteDisabled; }\n    set autocompleteDisabled(value) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n    ngAfterViewInit() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    ngOnDestroy() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n    }\n    /** Whether or not the autocomplete panel is open. */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /** Opens the autocomplete suggestion panel. */\n    openPanel() {\n        this._attachOverlay();\n        this._floatLabel();\n    }\n    /** Closes the autocomplete suggestion panel. */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            this.autocomplete.closed.emit();\n        }\n        this.autocomplete._isOpen = this._overlayAttached = false;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            this._overlayRef.updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ?\n            this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n            of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map(event => event instanceof MatOptionSelectionChange ? event : null));\n    }\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /** Stream of clicks outside of the autocomplete panel. */\n    _getOutsideClickStream() {\n        return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend'))\n            .pipe(filter(event => {\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n            // fall back to check the first element in the path of the click event.\n            const clickTarget = (this._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] :\n                event.target);\n            const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n            const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n            return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!customOrigin || !customOrigin.contains(clickTarget)) &&\n                (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        Promise.resolve(null).then(() => this._setTriggerValue(value));\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE && !hasModifierKey(event)) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n            }\n        }\n    }\n    _handleInput(event) {\n        let target = event.target;\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._onChange(value);\n            if (this._canOpen() && this._document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay();\n            this._floatLabel(true);\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /** If the label has been manually elevated, return it to its normal state. */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            this._formField.floatLabel = 'auto';\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    _subscribeToClosingActions() {\n        const firstStable = this._zone.onStable.pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n            const wasOpen = this.panelOpen;\n            this._resetActiveItem();\n            this.autocomplete._setVisibility();\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                    this.autocomplete.opened.emit();\n                }\n            }\n            return this.panelClosingActions;\n        }), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe(event => this._setValueAndClose(event));\n    }\n    /** Destroys the autocomplete suggestion panel. */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    _setTriggerValue(value) {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        const inputValue = toDisplay != null ? toDisplay : '';\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = inputValue;\n        }\n        else {\n            this._element.nativeElement.value = inputValue;\n        }\n        this._previousValue = inputValue;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    _setValueAndClose(event) {\n        if (event && event.source) {\n            this._clearPreviousSelectedOption(event.source);\n            this._setTriggerValue(event.source.value);\n            this._onChange(event.source.value);\n            this._element.nativeElement.focus();\n            this.autocomplete._emitSelectEvent(event.source);\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n    _clearPreviousSelectedOption(skip) {\n        this.autocomplete.options.forEach(option => {\n            if (option !== skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n    _attachOverlay() {\n        var _a;\n        if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        // We want to resolve this once, as late as possible so that we can be\n        // sure that the element has been moved into its final place in the DOM.\n        if (this._isInsideShadowRoot == null) {\n            this._isInsideShadowRoot = !!_getShadowRoot(this._element.nativeElement);\n        }\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, { id: (_a = this._formField) === null || _a === void 0 ? void 0 : _a.getLabelId() });\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe(event => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                if ((event.keyCode === ESCAPE && !hasModifierKey(event)) ||\n                    (event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey'))) {\n                    this._resetActiveItem();\n                    this._closeKeyEventStream.next();\n                    // We need to stop propagation, otherwise the event will eventually\n                    // reach the input itself and cause the overlay to be reopened.\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n            });\n            this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n                if (this.panelOpen && overlayRef) {\n                    overlayRef.updateSize({ width: this._getPanelWidth() });\n                }\n            });\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        const wasOpen = this.panelOpen;\n        this.autocomplete._setVisibility();\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n    _getOverlayConfig() {\n        var _a;\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir,\n            panelClass: (_a = this._defaults) === null || _a === void 0 ? void 0 : _a.overlayPanelClass,\n        });\n    }\n    _getOverlayPosition() {\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /** Sets the positions on a position strategy based on the directive's input state. */\n    _setStrategyPositions(positionStrategy) {\n        // Note that we provide horizontal fallback positions, even though by default the dropdown\n        // width matches the input, because consumers can override the width. See #18854.\n        const belowPositions = [\n            { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n            { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' }\n        ];\n        // The overlay edge connected to the trigger should have squared corners, while\n        // the opposite end has rounded corners. We apply a CSS class to swap the\n        // border-radius based on the overlay position.\n        const panelClass = this._aboveClass;\n        const abovePositions = [\n            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass },\n            { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass }\n        ];\n        let positions;\n        if (this.position === 'above') {\n            positions = abovePositions;\n        }\n        else if (this.position === 'below') {\n            positions = belowPositions;\n        }\n        else {\n            positions = [...belowPositions, ...abovePositions];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /** Returns the width of the input element, so the panel width can match it. */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n    _resetActiveItem() {\n        const autocomplete = this.autocomplete;\n        if (autocomplete.autoActiveFirstOption) {\n            // Note that we go through `setFirstItemActive`, rather than `setActiveItem(0)`, because\n            // the former will find the next enabled option, if the first one is disabled.\n            autocomplete._keyManager.setFirstItemActive();\n        }\n        else {\n            autocomplete._keyManager.setActiveItem(-1);\n        }\n    }\n    /** Determines whether the panel can be opened. */\n    _canOpen() {\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        var _a;\n        return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.defaultView) || window;\n    }\n    /** Scrolls to a particular option in the list. */\n    _scrollToOption(index) {\n        // Given that we are not actually focusing active options, we must manually adjust scroll\n        // to reveal options below the fold. First, we find the offset of the option from the top\n        // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n        // the panel height + the option height, so the active option will be just visible at the\n        // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n        // will become the offset. If that offset is visible within the panel already, the scrollTop is\n        // not adjusted.\n        const autocomplete = this.autocomplete;\n        const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            autocomplete._setScrollTop(0);\n        }\n        else if (autocomplete.panel) {\n            const option = autocomplete.options.toArray()[index];\n            if (option) {\n                const element = option._getHostElement();\n                const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n                autocomplete._setScrollTop(newScrollPosition);\n            }\n        }\n    }\n}\n_MatAutocompleteTriggerBase.decorators = [\n    { type: Directive }\n];\n_MatAutocompleteTriggerBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Overlay },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }, { type: Host }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] }\n];\n_MatAutocompleteTriggerBase.propDecorators = {\n    autocomplete: [{ type: Input, args: ['matAutocomplete',] }],\n    position: [{ type: Input, args: ['matAutocompletePosition',] }],\n    connectedTo: [{ type: Input, args: ['matAutocompleteConnectedTo',] }],\n    autocompleteAttribute: [{ type: Input, args: ['autocomplete',] }],\n    autocompleteDisabled: [{ type: Input, args: ['matAutocompleteDisabled',] }]\n};\nclass MatAutocompleteTrigger extends _MatAutocompleteTriggerBase {\n    constructor() {\n        super(...arguments);\n        this._aboveClass = 'mat-autocomplete-panel-above';\n    }\n}\nMatAutocompleteTrigger.decorators = [\n    { type: Directive, args: [{\n                selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                host: {\n                    'class': 'mat-autocomplete-trigger',\n                    '[attr.autocomplete]': 'autocompleteAttribute',\n                    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                    '[attr.aria-haspopup]': '!autocompleteDisabled',\n                    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                    // a little earlier. This avoids issues where IE delays the focusing of the input.\n                    '(focusin)': '_handleFocus()',\n                    '(blur)': '_onTouched()',\n                    '(input)': '_handleInput($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                },\n                exportAs: 'matAutocompleteTrigger',\n                providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatAutocompleteModule {\n}\nMatAutocompleteModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    OverlayModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                    CommonModule\n                ],\n                exports: [\n                    MatAutocomplete,\n                    MatAutocompleteTrigger,\n                    MatAutocompleteOrigin,\n                    CdkScrollableModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                ],\n                declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, _MatAutocompleteBase, _MatAutocompleteOriginBase, _MatAutocompleteTriggerBase, getMatAutocompleteMissingPanelError };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}