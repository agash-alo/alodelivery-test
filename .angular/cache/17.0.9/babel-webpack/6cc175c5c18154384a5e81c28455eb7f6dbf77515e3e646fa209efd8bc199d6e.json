{"ast":null,"code":"/**\r\n * Module, defining Axis Renderer for vertical axes.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { AxisRenderer } from \"./AxisRenderer\";\nimport { AxisBullet } from \"./AxisBullet\";\nimport { WavedLine } from \"../../core/elements/WavedLine\";\nimport { WavedRectangle } from \"../../core/elements/WavedRectangle\";\nimport { registry } from \"../../core/Registry\";\nimport { percent, Percent } from \"../../core/utils/Percent\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * A renderer for horizontal axis.\r\n *\r\n * @see {@link IAxisRendererEvents} for a list of available events\r\n * @see {@link IAxisRendererAdapters} for a list of available Adapters\r\n */\nvar AxisRendererX = /** @class */function (_super) {\n  __extends(AxisRendererX, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param axis Related axis\r\n   */\n  function AxisRendererX() {\n    var _this = _super.call(this) || this;\n    _this.className = \"AxisRendererX\";\n    _this.minGridDistance = 120;\n    _this.opposite = false;\n    _this.rotation = 0;\n    _this.width = percent(100);\n    _this.labels.template.horizontalCenter = \"middle\";\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n  * @ignore\r\n  */\n  AxisRendererX.prototype.setAxis = function (axis) {\n    _super.prototype.setAxis.call(this, axis);\n    axis.layout = \"vertical\";\n  };\n  /**\r\n   * @ignore\r\n   */\n  AxisRendererX.prototype.updateGridContainer = function () {\n    var axis = this.axis;\n    if (axis) {\n      var gridContainer = this.gridContainer;\n      gridContainer.x = axis.pixelX;\n      gridContainer.width = axis.axisLength;\n    }\n  };\n  /**\r\n   * Called when rendered is attached to an Axis, as well as a property of\r\n   * Axis that might affect the appearance is updated.\r\n   *\r\n   * E.g. `axis.opposite`, `axis.inside`, etc.\r\n   *\r\n   * This method is called **before** draw, so that any related setting\r\n   * changed in this method can be changed.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n  AxisRendererX.prototype.processRenderer = function () {\n    _super.prototype.processRenderer.call(this);\n    // can not do this in init, as axis is set later\n    var axis = this.axis;\n    if (axis) {\n      if (!(axis.width instanceof Percent)) {\n        axis.width = percent(100);\n      }\n      // @todo Is thi sneeded?\n      $utils.used(this.line);\n      var title = axis.title;\n      title.rotation = 0;\n      title.align = \"center\";\n      if (this.opposite) {\n        this.line.toFront();\n        title.toBack();\n      } else {\n        title.toFront();\n        this.toBack();\n        this.line.toBack();\n      }\n    }\n  };\n  /**\r\n   * Updates some of the Axis tooltip's visual properties, related to\r\n   * rendering of the Axis.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n  AxisRendererX.prototype.updateTooltip = function () {\n    var axis = this.axis;\n    if (axis) {\n      var bigNum = 1000;\n      var bbx = this.line.pixelX;\n      var bby = this.line.pixelY;\n      var bbw = this.axisLength;\n      var bbh = bigNum;\n      // top\n      if (this.opposite) {\n        if (!this.inside) {\n          bby = -bigNum;\n          bbh = bigNum;\n        }\n      }\n      // bottom\n      else {\n        if (this.inside) {\n          bby = -bigNum;\n          bbh = bigNum;\n        }\n      }\n      this.axis.updateTooltip(\"vertical\", {\n        x: bbx,\n        y: bby,\n        width: bbw,\n        height: bbh\n      });\n    }\n  };\n  /**\r\n   * Updates and positions a label element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param label        Label element\r\n   * @param position     Starting position\r\n   * @param endPosition  Ending position\r\n   */\n  AxisRendererX.prototype.updateLabelElement = function (label, position, endPosition, location) {\n    if (!$type.hasValue(location)) {\n      location = label.location;\n    }\n    position = position + (endPosition - position) * location;\n    var point = this.positionToPoint(position);\n    label.isMeasured = !label.inside;\n    var deltaY = 0;\n    var verticalCenter;\n    var maxHeight = this.gridContainer.maxHeight;\n    if (this.opposite) {\n      if (label.inside) {\n        verticalCenter = \"top\";\n        if (label.valign == \"bottom\") {\n          deltaY = maxHeight;\n          verticalCenter = \"bottom\";\n        }\n        if (label.valign == \"middle\") {\n          deltaY = maxHeight / 2;\n          verticalCenter = \"middle\";\n        }\n      } else {\n        verticalCenter = \"bottom\";\n      }\n      point.y = deltaY;\n    } else {\n      if (label.inside) {\n        verticalCenter = \"bottom\";\n        if (label.valign == \"top\") {\n          deltaY = -maxHeight;\n          verticalCenter = \"top\";\n        }\n        if (label.valign == \"middle\") {\n          deltaY = -maxHeight / 2;\n          verticalCenter = \"middle\";\n        }\n      } else {\n        verticalCenter = \"top\";\n      }\n      point.y += deltaY;\n    }\n    if (label.rotation == 0) {\n      // Apply fuzzy logic to verticalCenter only if labels are not rotated\n      label.verticalCenter = verticalCenter;\n    }\n    this.positionItem(label, point);\n    this.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\n  };\n  Object.defineProperty(AxisRendererX.prototype, \"axisLength\", {\n    /**\r\n     * Returns actual length of the Axis, in pixels.\r\n     *\r\n     * @return Length (px)\r\n     */\n    get: function () {\n      var axis = this.axis;\n      return axis.measuredWidth - axis.pixelPaddingRight - axis.pixelPaddingLeft || 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts relative position on axis to point coordinates.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @param position2  Position (0-1) Position on the second axis\r\n   * @return Point\r\n   */\n  AxisRendererX.prototype.positionToPoint = function (position, position2) {\n    return {\n      x: this.positionToCoordinate(position),\n      y: 0\n    };\n  };\n  /**\r\n   * Converts a point at specific coordinates to a relative position (0-1)\r\n   * on the axis.\r\n   *\r\n   * @param point  Point\r\n   * @return Position (0-1)\r\n   */\n  AxisRendererX.prototype.pointToPosition = function (point) {\n    return this.coordinateToPosition(point.x, point.y);\n  };\n  /**\r\n   * [getPositionRangePath description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param startPosition  Starting position\r\n   * @param endPosition    End position\r\n   * @return SVG path\r\n   */\n  AxisRendererX.prototype.getPositionRangePath = function (startPosition, endPosition) {\n    var x1 = $math.fitToRange(this.positionToCoordinate(startPosition), 0, this.axisLength);\n    var x2 = $math.fitToRange(this.positionToCoordinate(endPosition), 0, this.axisLength);\n    var w = Math.abs(x2 - x1);\n    var h = this.getHeight();\n    var x = Math.min(x1, x2);\n    var y = 0;\n    return $path.rectToPath({\n      x: x,\n      y: y,\n      width: w,\n      height: h\n    }, true);\n  };\n  /**\r\n   * Updates and positions an axis break element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axisBreak Break element\r\n   */\n  AxisRendererX.prototype.updateBreakElement = function (axisBreak) {\n    _super.prototype.updateBreakElement.call(this, axisBreak);\n    var startLine = axisBreak.startLine;\n    var endLine = axisBreak.endLine;\n    var fillShape = axisBreak.fillShape;\n    var startPoint = axisBreak.startPoint;\n    var endPoint = axisBreak.endPoint;\n    var y1 = axisBreak.pixelMarginLeft;\n    var y2 = this.getHeight() - axisBreak.pixelMarginTop - axisBreak.pixelMarginBottom;\n    startPoint.x = $math.fitToRange(startPoint.x, -1, this.axisLength + 1);\n    endPoint.x = $math.fitToRange(endPoint.x, -1, this.axisLength + 1);\n    if (startPoint.x == endPoint.x && (startPoint.x < 0 || startPoint.x > this.axisLength)) {\n      axisBreak.fillShape.__disabled = true;\n    } else {\n      axisBreak.fillShape.__disabled = false;\n    }\n    startLine.y = y1;\n    startLine.width = 0;\n    startLine.height = y2;\n    endLine.y = y1;\n    endLine.width = 0;\n    endLine.height = y2;\n    fillShape.height = y2;\n    fillShape.width = Math.abs(endPoint.x - startPoint.x);\n    fillShape.y = y1;\n    fillShape.x = startPoint.x;\n  };\n  /**\r\n   * Updates and positions a grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param grid         Grid element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n  AxisRendererX.prototype.updateGridElement = function (grid, position, endPosition) {\n    position = position + (endPosition - position) * grid.location;\n    var point = this.positionToPoint(position);\n    //point.x = $utils.spritePointToSprite({x:point.x, y:0}, this, this.gridContainer).x;\n    grid.path = $path.moveTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: 0,\n      y: this.getHeight()\n    });\n    this.positionItem(grid, point);\n    this.toggleVisibility(grid, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions a tick element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param tick         Tick element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n  AxisRendererX.prototype.updateTickElement = function (tick, position, endPosition) {\n    position = position + (endPosition - position) * tick.location;\n    var point = this.positionToPoint(position);\n    var tickLength = tick.length;\n    point.y = $utils.spritePointToSprite({\n      x: 0,\n      y: this.line.pixelY\n    }, this.line.parent, this.gridContainer).y;\n    if (this.opposite) {\n      tickLength *= tick.inside ? 1 : -1;\n    } else {\n      tickLength *= tick.inside ? -1 : 1;\n    }\n    tick.path = $path.moveTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: 0,\n      y: tickLength\n    });\n    this.positionItem(tick, point);\n    this.toggleVisibility(tick, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions the axis line element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  AxisRendererX.prototype.updateAxisLine = function () {\n    this.line.path = $path.moveTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: this.axisLength,\n      y: 0\n    });\n  };\n  /**\r\n   * Updates and positions the base grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  AxisRendererX.prototype.updateBaseGridElement = function () {\n    _super.prototype.updateBaseGridElement.call(this);\n    var axis = this.axis;\n    var h = this.getHeight();\n    var w = this.axisLength;\n    var baseGrid = this.baseGrid;\n    var x = axis.basePoint.x;\n    if (x < -0.2 || x > w + 0.2) {\n      baseGrid.hide(0);\n    } else {\n      var y = $utils.spritePointToSprite({\n        x: 0,\n        y: 0\n      }, this.gridContainer, baseGrid.parent).y;\n      baseGrid.path = $path.moveTo({\n        x: 0,\n        y: 0\n      }) + $path.lineTo({\n        x: 0,\n        y: h\n      });\n      baseGrid.moveTo({\n        x: x,\n        y: y\n      });\n      baseGrid.show(0);\n    }\n  };\n  /**\r\n   * Creates visual elements for and axis break.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axisBreak Axis break\r\n   */\n  AxisRendererX.prototype.createBreakSprites = function (axisBreak) {\n    axisBreak.startLine = new WavedLine();\n    axisBreak.endLine = new WavedLine();\n    var wavedRectangle = new WavedRectangle();\n    wavedRectangle.setWavedSides(false, true, false, true);\n    axisBreak.fillShape = wavedRectangle;\n  };\n  /**\r\n   * @ignore\r\n   */\n  AxisRendererX.prototype.toAxisPosition = function (value) {\n    var inversedPosition = value;\n    var axis = this.axis;\n    if (axis) {\n      var relativePositionSprite = axis.relativePositionSprite;\n      var x = axis.pixelX;\n      if (relativePositionSprite) {\n        x = $utils.spritePointToSprite({\n          x: this.pixelX,\n          y: 0\n        }, this.parent, relativePositionSprite).x;\n      } else {\n        relativePositionSprite = axis.parent;\n      }\n      if (relativePositionSprite) {\n        var relativeX = x / relativePositionSprite.innerWidth;\n        var relativeWidth = axis.axisLength / relativePositionSprite.innerWidth;\n        return (inversedPosition - relativeX) / relativeWidth;\n      }\n    }\n    return value;\n  };\n  /**\r\n   * Updates and positions axis bullets.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param bullet       AxisBullet element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n  AxisRendererX.prototype.updateBullet = function (bullet, position, endPosition) {\n    var location = 0.5;\n    if (bullet instanceof AxisBullet) {\n      location = bullet.location;\n    }\n    position = position + (endPosition - position) * location;\n    var point = this.positionToPoint(position);\n    point.y = $utils.spritePointToSprite({\n      x: 0,\n      y: this.line.pixelY\n    }, this.line.parent, this.gridContainer).y;\n    this.positionItem(bullet, point);\n    this.toggleVisibility(bullet, position, 0, 1);\n  };\n  return AxisRendererX;\n}(AxisRenderer);\nexport { AxisRendererX };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"AxisRendererX\"] = AxisRendererX;\n/**\r\n * Add default responsive rules\r\n */\n/**\r\n * Put labels inside plot area.\r\n * Disable first and last labels.\r\n */\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.heightXS,\n  state: function (target, stateId) {\n    if (target instanceof AxisRendererX) {\n      var state = target.states.create(stateId);\n      state.properties.inside = true;\n      state.properties.maxLabelPosition = 0.9;\n      state.properties.minLabelPosition = 0.1;\n      return state;\n    }\n    return null;\n  }\n});\n/**\r\n * Disable labels altogather on very small charts\r\n */\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.heightXXS,\n  state: function (target, stateId) {\n    if (target instanceof AxisRendererX) {\n      var state = target.states.create(stateId);\n      state.properties.disabled = true;\n      return state;\n    }\n    return null;\n  }\n});","map":{"version":3,"names":["__extends","AxisRenderer","AxisBullet","WavedLine","WavedRectangle","registry","percent","Percent","$math","$path","$utils","$type","defaultRules","ResponsiveBreakpoints","AxisRendererX","_super","_this","call","className","minGridDistance","opposite","rotation","width","labels","template","horizontalCenter","applyTheme","prototype","setAxis","axis","layout","updateGridContainer","gridContainer","x","pixelX","axisLength","processRenderer","used","line","title","align","toFront","toBack","updateTooltip","bigNum","bbx","bby","pixelY","bbw","bbh","inside","y","height","updateLabelElement","label","position","endPosition","location","hasValue","point","positionToPoint","isMeasured","deltaY","verticalCenter","maxHeight","valign","positionItem","toggleVisibility","minLabelPosition","maxLabelPosition","Object","defineProperty","get","measuredWidth","pixelPaddingRight","pixelPaddingLeft","enumerable","configurable","position2","positionToCoordinate","pointToPosition","coordinateToPosition","getPositionRangePath","startPosition","x1","fitToRange","x2","w","Math","abs","h","getHeight","min","rectToPath","updateBreakElement","axisBreak","startLine","endLine","fillShape","startPoint","endPoint","y1","pixelMarginLeft","y2","pixelMarginTop","pixelMarginBottom","__disabled","updateGridElement","grid","path","moveTo","lineTo","updateTickElement","tick","tickLength","length","spritePointToSprite","parent","updateAxisLine","updateBaseGridElement","baseGrid","basePoint","hide","show","createBreakSprites","wavedRectangle","setWavedSides","toAxisPosition","value","inversedPosition","relativePositionSprite","relativeX","innerWidth","relativeWidth","updateBullet","bullet","registeredClasses","push","relevant","heightXS","state","target","stateId","states","create","properties","heightXXS","disabled"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/charts/axes/AxisRendererX.js"],"sourcesContent":["/**\r\n * Module, defining Axis Renderer for vertical axes.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\nimport { WavedLine } from \"../../core/elements/WavedLine\";\r\nimport { WavedRectangle } from \"../../core/elements/WavedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A renderer for horizontal axis.\r\n *\r\n * @see {@link IAxisRendererEvents} for a list of available events\r\n * @see {@link IAxisRendererAdapters} for a list of available Adapters\r\n */\r\nvar AxisRendererX = /** @class */ (function (_super) {\r\n    __extends(AxisRendererX, _super);\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param axis Related axis\r\n     */\r\n    function AxisRendererX() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"AxisRendererX\";\r\n        _this.minGridDistance = 120;\r\n        _this.opposite = false;\r\n        _this.rotation = 0;\r\n        _this.width = percent(100);\r\n        _this.labels.template.horizontalCenter = \"middle\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n    * @ignore\r\n    */\r\n    AxisRendererX.prototype.setAxis = function (axis) {\r\n        _super.prototype.setAxis.call(this, axis);\r\n        axis.layout = \"vertical\";\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    AxisRendererX.prototype.updateGridContainer = function () {\r\n        var axis = this.axis;\r\n        if (axis) {\r\n            var gridContainer = this.gridContainer;\r\n            gridContainer.x = axis.pixelX;\r\n            gridContainer.width = axis.axisLength;\r\n        }\r\n    };\r\n    /**\r\n     * Called when rendered is attached to an Axis, as well as a property of\r\n     * Axis that might affect the appearance is updated.\r\n     *\r\n     * E.g. `axis.opposite`, `axis.inside`, etc.\r\n     *\r\n     * This method is called **before** draw, so that any related setting\r\n     * changed in this method can be changed.\r\n     *\r\n     * @todo Description (review)\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererX.prototype.processRenderer = function () {\r\n        _super.prototype.processRenderer.call(this);\r\n        // can not do this in init, as axis is set later\r\n        var axis = this.axis;\r\n        if (axis) {\r\n            if (!(axis.width instanceof Percent)) {\r\n                axis.width = percent(100);\r\n            }\r\n            // @todo Is thi sneeded?\r\n            $utils.used(this.line);\r\n            var title = axis.title;\r\n            title.rotation = 0;\r\n            title.align = \"center\";\r\n            if (this.opposite) {\r\n                this.line.toFront();\r\n                title.toBack();\r\n            }\r\n            else {\r\n                title.toFront();\r\n                this.toBack();\r\n                this.line.toBack();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Updates some of the Axis tooltip's visual properties, related to\r\n     * rendering of the Axis.\r\n     *\r\n     * @todo Description (review)\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererX.prototype.updateTooltip = function () {\r\n        var axis = this.axis;\r\n        if (axis) {\r\n            var bigNum = 1000;\r\n            var bbx = this.line.pixelX;\r\n            var bby = this.line.pixelY;\r\n            var bbw = this.axisLength;\r\n            var bbh = bigNum;\r\n            // top\r\n            if (this.opposite) {\r\n                if (!this.inside) {\r\n                    bby = -bigNum;\r\n                    bbh = bigNum;\r\n                }\r\n            }\r\n            // bottom\r\n            else {\r\n                if (this.inside) {\r\n                    bby = -bigNum;\r\n                    bbh = bigNum;\r\n                }\r\n            }\r\n            this.axis.updateTooltip(\"vertical\", { x: bbx, y: bby, width: bbw, height: bbh });\r\n        }\r\n    };\r\n    /**\r\n     * Updates and positions a label element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param label        Label element\r\n     * @param position     Starting position\r\n     * @param endPosition  Ending position\r\n     */\r\n    AxisRendererX.prototype.updateLabelElement = function (label, position, endPosition, location) {\r\n        if (!$type.hasValue(location)) {\r\n            location = label.location;\r\n        }\r\n        position = position + (endPosition - position) * location;\r\n        var point = this.positionToPoint(position);\r\n        label.isMeasured = !label.inside;\r\n        var deltaY = 0;\r\n        var verticalCenter;\r\n        var maxHeight = this.gridContainer.maxHeight;\r\n        if (this.opposite) {\r\n            if (label.inside) {\r\n                verticalCenter = \"top\";\r\n                if (label.valign == \"bottom\") {\r\n                    deltaY = maxHeight;\r\n                    verticalCenter = \"bottom\";\r\n                }\r\n                if (label.valign == \"middle\") {\r\n                    deltaY = maxHeight / 2;\r\n                    verticalCenter = \"middle\";\r\n                }\r\n            }\r\n            else {\r\n                verticalCenter = \"bottom\";\r\n            }\r\n            point.y = deltaY;\r\n        }\r\n        else {\r\n            if (label.inside) {\r\n                verticalCenter = \"bottom\";\r\n                if (label.valign == \"top\") {\r\n                    deltaY = -maxHeight;\r\n                    verticalCenter = \"top\";\r\n                }\r\n                if (label.valign == \"middle\") {\r\n                    deltaY = -maxHeight / 2;\r\n                    verticalCenter = \"middle\";\r\n                }\r\n            }\r\n            else {\r\n                verticalCenter = \"top\";\r\n            }\r\n            point.y += deltaY;\r\n        }\r\n        if (label.rotation == 0) {\r\n            // Apply fuzzy logic to verticalCenter only if labels are not rotated\r\n            label.verticalCenter = verticalCenter;\r\n        }\r\n        this.positionItem(label, point);\r\n        this.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n    };\r\n    Object.defineProperty(AxisRendererX.prototype, \"axisLength\", {\r\n        /**\r\n         * Returns actual length of the Axis, in pixels.\r\n         *\r\n         * @return Length (px)\r\n         */\r\n        get: function () {\r\n            var axis = this.axis;\r\n            return (axis.measuredWidth - axis.pixelPaddingRight - axis.pixelPaddingLeft) || 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts relative position on axis to point coordinates.\r\n     *\r\n     * @param position  Position (0-1)\r\n     * @param position2  Position (0-1) Position on the second axis\r\n     * @return Point\r\n     */\r\n    AxisRendererX.prototype.positionToPoint = function (position, position2) {\r\n        return { x: this.positionToCoordinate(position), y: 0 };\r\n    };\r\n    /**\r\n     * Converts a point at specific coordinates to a relative position (0-1)\r\n     * on the axis.\r\n     *\r\n     * @param point  Point\r\n     * @return Position (0-1)\r\n     */\r\n    AxisRendererX.prototype.pointToPosition = function (point) {\r\n        return this.coordinateToPosition(point.x, point.y);\r\n    };\r\n    /**\r\n     * [getPositionRangePath description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param startPosition  Starting position\r\n     * @param endPosition    End position\r\n     * @return SVG path\r\n     */\r\n    AxisRendererX.prototype.getPositionRangePath = function (startPosition, endPosition) {\r\n        var x1 = $math.fitToRange(this.positionToCoordinate(startPosition), 0, this.axisLength);\r\n        var x2 = $math.fitToRange(this.positionToCoordinate(endPosition), 0, this.axisLength);\r\n        var w = Math.abs(x2 - x1);\r\n        var h = this.getHeight();\r\n        var x = Math.min(x1, x2);\r\n        var y = 0;\r\n        return $path.rectToPath({\r\n            x: x,\r\n            y: y,\r\n            width: w,\r\n            height: h\r\n        }, true);\r\n    };\r\n    /**\r\n     * Updates and positions an axis break element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param axisBreak Break element\r\n     */\r\n    AxisRendererX.prototype.updateBreakElement = function (axisBreak) {\r\n        _super.prototype.updateBreakElement.call(this, axisBreak);\r\n        var startLine = axisBreak.startLine;\r\n        var endLine = axisBreak.endLine;\r\n        var fillShape = axisBreak.fillShape;\r\n        var startPoint = axisBreak.startPoint;\r\n        var endPoint = axisBreak.endPoint;\r\n        var y1 = axisBreak.pixelMarginLeft;\r\n        var y2 = this.getHeight() - axisBreak.pixelMarginTop - axisBreak.pixelMarginBottom;\r\n        startPoint.x = $math.fitToRange(startPoint.x, -1, this.axisLength + 1);\r\n        endPoint.x = $math.fitToRange(endPoint.x, -1, this.axisLength + 1);\r\n        if (startPoint.x == endPoint.x && (startPoint.x < 0 || startPoint.x > this.axisLength)) {\r\n            axisBreak.fillShape.__disabled = true;\r\n        }\r\n        else {\r\n            axisBreak.fillShape.__disabled = false;\r\n        }\r\n        startLine.y = y1;\r\n        startLine.width = 0;\r\n        startLine.height = y2;\r\n        endLine.y = y1;\r\n        endLine.width = 0;\r\n        endLine.height = y2;\r\n        fillShape.height = y2;\r\n        fillShape.width = Math.abs(endPoint.x - startPoint.x);\r\n        fillShape.y = y1;\r\n        fillShape.x = startPoint.x;\r\n    };\r\n    /**\r\n     * Updates and positions a grid element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param grid         Grid element\r\n     * @param position     Starting position\r\n     * @param endPosition  End position\r\n     */\r\n    AxisRendererX.prototype.updateGridElement = function (grid, position, endPosition) {\r\n        position = position + (endPosition - position) * grid.location;\r\n        var point = this.positionToPoint(position);\r\n        //point.x = $utils.spritePointToSprite({x:point.x, y:0}, this, this.gridContainer).x;\r\n        grid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.getHeight() });\r\n        this.positionItem(grid, point);\r\n        this.toggleVisibility(grid, position, 0, 1);\r\n    };\r\n    /**\r\n     * Updates and positions a tick element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param tick         Tick element\r\n     * @param position     Starting position\r\n     * @param endPosition  End position\r\n     */\r\n    AxisRendererX.prototype.updateTickElement = function (tick, position, endPosition) {\r\n        position = position + (endPosition - position) * tick.location;\r\n        var point = this.positionToPoint(position);\r\n        var tickLength = tick.length;\r\n        point.y = $utils.spritePointToSprite({ x: 0, y: this.line.pixelY }, this.line.parent, this.gridContainer).y;\r\n        if (this.opposite) {\r\n            tickLength *= (tick.inside ? 1 : -1);\r\n        }\r\n        else {\r\n            tickLength *= (tick.inside ? -1 : 1);\r\n        }\r\n        tick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: tickLength });\r\n        this.positionItem(tick, point);\r\n        this.toggleVisibility(tick, position, 0, 1);\r\n    };\r\n    /**\r\n     * Updates and positions the axis line element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererX.prototype.updateAxisLine = function () {\r\n        this.line.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.axisLength, y: 0 });\r\n    };\r\n    /**\r\n     * Updates and positions the base grid element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisRendererX.prototype.updateBaseGridElement = function () {\r\n        _super.prototype.updateBaseGridElement.call(this);\r\n        var axis = this.axis;\r\n        var h = this.getHeight();\r\n        var w = this.axisLength;\r\n        var baseGrid = this.baseGrid;\r\n        var x = axis.basePoint.x;\r\n        if (x < -0.2 || x > w + 0.2) {\r\n            baseGrid.hide(0);\r\n        }\r\n        else {\r\n            var y = $utils.spritePointToSprite({ x: 0, y: 0 }, this.gridContainer, baseGrid.parent).y;\r\n            baseGrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: h });\r\n            baseGrid.moveTo({ x: x, y: y });\r\n            baseGrid.show(0);\r\n        }\r\n    };\r\n    /**\r\n     * Creates visual elements for and axis break.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param axisBreak Axis break\r\n     */\r\n    AxisRendererX.prototype.createBreakSprites = function (axisBreak) {\r\n        axisBreak.startLine = new WavedLine();\r\n        axisBreak.endLine = new WavedLine();\r\n        var wavedRectangle = new WavedRectangle();\r\n        wavedRectangle.setWavedSides(false, true, false, true);\r\n        axisBreak.fillShape = wavedRectangle;\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    AxisRendererX.prototype.toAxisPosition = function (value) {\r\n        var inversedPosition = value;\r\n        var axis = this.axis;\r\n        if (axis) {\r\n            var relativePositionSprite = axis.relativePositionSprite;\r\n            var x = axis.pixelX;\r\n            if (relativePositionSprite) {\r\n                x = $utils.spritePointToSprite({ x: this.pixelX, y: 0 }, this.parent, relativePositionSprite).x;\r\n            }\r\n            else {\r\n                relativePositionSprite = axis.parent;\r\n            }\r\n            if (relativePositionSprite) {\r\n                var relativeX = x / relativePositionSprite.innerWidth;\r\n                var relativeWidth = axis.axisLength / relativePositionSprite.innerWidth;\r\n                return (inversedPosition - relativeX) / relativeWidth;\r\n            }\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * Updates and positions axis bullets.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param bullet       AxisBullet element\r\n     * @param position     Starting position\r\n     * @param endPosition  End position\r\n     */\r\n    AxisRendererX.prototype.updateBullet = function (bullet, position, endPosition) {\r\n        var location = 0.5;\r\n        if (bullet instanceof AxisBullet) {\r\n            location = bullet.location;\r\n        }\r\n        position = position + (endPosition - position) * location;\r\n        var point = this.positionToPoint(position);\r\n        point.y = $utils.spritePointToSprite({ x: 0, y: this.line.pixelY }, this.line.parent, this.gridContainer).y;\r\n        this.positionItem(bullet, point);\r\n        this.toggleVisibility(bullet, position, 0, 1);\r\n    };\r\n    return AxisRendererX;\r\n}(AxisRenderer));\r\nexport { AxisRendererX };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX\"] = AxisRendererX;\r\n/**\r\n * Add default responsive rules\r\n */\r\n/**\r\n * Put labels inside plot area.\r\n * Disable first and last labels.\r\n */\r\ndefaultRules.push({\r\n    relevant: ResponsiveBreakpoints.heightXS,\r\n    state: function (target, stateId) {\r\n        if (target instanceof AxisRendererX) {\r\n            var state = target.states.create(stateId);\r\n            state.properties.inside = true;\r\n            state.properties.maxLabelPosition = 0.9;\r\n            state.properties.minLabelPosition = 0.1;\r\n            return state;\r\n        }\r\n        return null;\r\n    }\r\n});\r\n/**\r\n * Disable labels altogather on very small charts\r\n */\r\ndefaultRules.push({\r\n    relevant: ResponsiveBreakpoints.heightXXS,\r\n    state: function (target, stateId) {\r\n        if (target instanceof AxisRendererX) {\r\n            var state = target.states.create(stateId);\r\n            state.properties.disabled = true;\r\n            return state;\r\n        }\r\n        return null;\r\n    }\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}