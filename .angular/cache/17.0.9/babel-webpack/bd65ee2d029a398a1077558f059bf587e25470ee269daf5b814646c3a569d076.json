{"ast":null,"code":"/**\r\n * Module that defines everything related to building 3D Columns.\r\n * It is a container which has column3D element which is a Rectangle3D.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Column } from \"./Column\";\nimport { Rectangle3D } from \"../../core/elements/3d/Rectangle3D\";\nimport { registry } from \"../../core/Registry\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Class used to creates Column3Ds.\r\n *\r\n * @see {@link IColumn3DEvents} for a list of available events\r\n * @see {@link IColumn3DAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\nvar Column3D = /** @class */function (_super) {\n  __extends(Column3D, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Column3D() {\n    var _this = _super.call(this) || this;\n    _this.className = \"Column3D\";\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n  Column3D.prototype.createAssets = function () {\n    this.column3D = this.createChild(Rectangle3D);\n    this.column3D.shouldClone = false;\n    this.column3D.strokeOpacity = 0;\n    // some dirty hack so that if user access column, it won't get error\n    this.column = this.column3D;\n  };\n  /**\r\n   * @ignore Exclude from docs\r\n   */\n  Column3D.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n    if (this.column3D) {\n      this.column3D.width = this.pixelWidth;\n      this.column3D.height = this.pixelHeight;\n      if (this.column3D.invalid) {\n        this.column3D.validate();\n      }\n    }\n  };\n  /**\r\n   * Copies all parameters from another [[Column3D]].\r\n   *\r\n   * @param source Source Column3D\r\n   */\n  Column3D.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    if (this.column3D) {\n      this.column3D.copyFrom(source.column3D);\n    }\n  };\n  /**\r\n   * Sets actual `fill` property on the SVG element, including applicable color\r\n   * modifiers.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param value  Fill\r\n   */\n  Column3D.prototype.setFill = function (value) {\n    _super.prototype.setFill.call(this, value);\n    this.column.fill = value;\n  };\n  return Column3D;\n}(Column);\nexport { Column3D };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Column3D\"] = Column3D;","map":{"version":3,"names":["__extends","Column","Rectangle3D","registry","Column3D","_super","_this","call","className","prototype","createAssets","column3D","createChild","shouldClone","strokeOpacity","column","validate","width","pixelWidth","height","pixelHeight","invalid","copyFrom","source","setFill","value","fill","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/charts/elements/Column3D.js"],"sourcesContent":["/**\r\n * Module that defines everything related to building 3D Columns.\r\n * It is a container which has column3D element which is a Rectangle3D.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column } from \"./Column\";\r\nimport { Rectangle3D } from \"../../core/elements/3d/Rectangle3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Class used to creates Column3Ds.\r\n *\r\n * @see {@link IColumn3DEvents} for a list of available events\r\n * @see {@link IColumn3DAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nvar Column3D = /** @class */ (function (_super) {\r\n    __extends(Column3D, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Column3D() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Column3D\";\r\n        return _this;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    Column3D.prototype.createAssets = function () {\r\n        this.column3D = this.createChild(Rectangle3D);\r\n        this.column3D.shouldClone = false;\r\n        this.column3D.strokeOpacity = 0;\r\n        // some dirty hack so that if user access column, it won't get error\r\n        this.column = this.column3D;\r\n    };\r\n    /**\r\n     * @ignore Exclude from docs\r\n     */\r\n    Column3D.prototype.validate = function () {\r\n        _super.prototype.validate.call(this);\r\n        if (this.column3D) {\r\n            this.column3D.width = this.pixelWidth;\r\n            this.column3D.height = this.pixelHeight;\r\n            if (this.column3D.invalid) {\r\n                this.column3D.validate();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Copies all parameters from another [[Column3D]].\r\n     *\r\n     * @param source Source Column3D\r\n     */\r\n    Column3D.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        if (this.column3D) {\r\n            this.column3D.copyFrom(source.column3D);\r\n        }\r\n    };\r\n    /**\r\n     * Sets actual `fill` property on the SVG element, including applicable color\r\n     * modifiers.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Fill\r\n     */\r\n    Column3D.prototype.setFill = function (value) {\r\n        _super.prototype.setFill.call(this, value);\r\n        this.column.fill = value;\r\n    };\r\n    return Column3D;\r\n}(Column));\r\nexport { Column3D };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column3D\"] = Column3D;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,SAAS,QAAQ,OAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,MAAM,QAAQ,UAAU;AACjC,SAASC,WAAW,QAAQ,oCAAoC;AAChE,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,QAAQ,GAAG,aAAe,UAAUC,MAAM,EAAE;EAC5CL,SAAS,CAACI,QAAQ,EAAEC,MAAM,CAAC;EAC3B;AACJ;AACA;EACI,SAASD,QAAQA,CAAA,EAAG;IAChB,IAAIE,KAAK,GAAGD,MAAM,CAACE,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI;IACrCD,KAAK,CAACE,SAAS,GAAG,UAAU;IAC5B,OAAOF,KAAK;EAChB;EACA;AACJ;AACA;EACIF,QAAQ,CAACK,SAAS,CAACC,YAAY,GAAG,YAAY;IAC1C,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACC,WAAW,CAACV,WAAW,CAAC;IAC7C,IAAI,CAACS,QAAQ,CAACE,WAAW,GAAG,KAAK;IACjC,IAAI,CAACF,QAAQ,CAACG,aAAa,GAAG,CAAC;IAC/B;IACA,IAAI,CAACC,MAAM,GAAG,IAAI,CAACJ,QAAQ;EAC/B,CAAC;EACD;AACJ;AACA;EACIP,QAAQ,CAACK,SAAS,CAACO,QAAQ,GAAG,YAAY;IACtCX,MAAM,CAACI,SAAS,CAACO,QAAQ,CAACT,IAAI,CAAC,IAAI,CAAC;IACpC,IAAI,IAAI,CAACI,QAAQ,EAAE;MACf,IAAI,CAACA,QAAQ,CAACM,KAAK,GAAG,IAAI,CAACC,UAAU;MACrC,IAAI,CAACP,QAAQ,CAACQ,MAAM,GAAG,IAAI,CAACC,WAAW;MACvC,IAAI,IAAI,CAACT,QAAQ,CAACU,OAAO,EAAE;QACvB,IAAI,CAACV,QAAQ,CAACK,QAAQ,CAAC,CAAC;MAC5B;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIZ,QAAQ,CAACK,SAAS,CAACa,QAAQ,GAAG,UAAUC,MAAM,EAAE;IAC5ClB,MAAM,CAACI,SAAS,CAACa,QAAQ,CAACf,IAAI,CAAC,IAAI,EAAEgB,MAAM,CAAC;IAC5C,IAAI,IAAI,CAACZ,QAAQ,EAAE;MACf,IAAI,CAACA,QAAQ,CAACW,QAAQ,CAACC,MAAM,CAACZ,QAAQ,CAAC;IAC3C;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIP,QAAQ,CAACK,SAAS,CAACe,OAAO,GAAG,UAAUC,KAAK,EAAE;IAC1CpB,MAAM,CAACI,SAAS,CAACe,OAAO,CAACjB,IAAI,CAAC,IAAI,EAAEkB,KAAK,CAAC;IAC1C,IAAI,CAACV,MAAM,CAACW,IAAI,GAAGD,KAAK;EAC5B,CAAC;EACD,OAAOrB,QAAQ;AACnB,CAAC,CAACH,MAAM,CAAE;AACV,SAASG,QAAQ;AACjB;AACA;AACA;AACA;AACA;AACA;AACAD,QAAQ,CAACwB,iBAAiB,CAAC,UAAU,CAAC,GAAGvB,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}