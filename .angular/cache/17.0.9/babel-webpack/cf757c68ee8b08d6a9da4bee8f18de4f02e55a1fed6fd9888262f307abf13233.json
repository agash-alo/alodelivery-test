{"ast":null,"code":"import { __extends, __generator } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { EventDispatcher } from \"./EventDispatcher\";\nimport * as $array from \"./Array\";\nimport * as $iter from \"./Iterator\";\nimport * as $type from \"./Type\";\n/**\r\n * Ordered list contains values of any type in an indexed array.\r\n */\nvar OrderedList = /** @class */function () {\n  /**\r\n   * Constructor\r\n   *\r\n   * @param initial  Inital list of values to add to list\r\n   */\n  function OrderedList(initial) {\n    /**\r\n     * Holds list values.\r\n     */\n    this._values = [];\n    /**\r\n     * Event dispatcher.\r\n     */\n    this.events = new EventDispatcher();\n    if (initial != null) {\n      this.setAll(initial);\n    }\n  }\n  Object.defineProperty(OrderedList.prototype, \"values\", {\n    /**\r\n     * All items of the list.\r\n     *\r\n     * Do not modify the list directly. Rather use `insert()` and `remove()`\r\n     * methods.\r\n     *\r\n     * @return List values\r\n     */\n    get: function () {\n      return this._values;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Inserts a value into list item array.\r\n   *\r\n   * @param value  Value\r\n   */\n  OrderedList.prototype._insert = function (value) {\n    this._values.push(value);\n    return this._values.length - 1;\n  };\n  Object.defineProperty(OrderedList.prototype, \"length\", {\n    /**\r\n     * Number of items in the list.\r\n     *\r\n     * @readonly\r\n     * @return Length\r\n     */\n    get: function () {\n      return this._values.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns the index of the specific `value`.\r\n   *\r\n   * -1 if not found.\r\n   *\r\n   * @param value  Value\r\n   * @return Index\r\n   */\n  OrderedList.prototype.indexOf = function (value) {\n    return $array.indexOf(this._values, value);\n  };\n  /**\r\n   * Checks if list contains the `value`.\r\n   *\r\n   * @param value  Value\r\n   * @return In the list?\r\n   */\n  OrderedList.prototype.contains = function (value) {\n    return this.indexOf(value) !== -1;\n  };\n  /**\r\n   * Returns an item at specific `index`.\r\n   *\r\n   * @param index  Index\r\n   * @return Item\r\n   */\n  OrderedList.prototype.getIndex = function (index) {\n    return this._values[index];\n  };\n  Object.defineProperty(OrderedList.prototype, \"first\", {\n    /**\r\n     * First item in the list.\r\n     *\r\n     * @return Item\r\n     */\n    get: function () {\n      return this._values[0];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(OrderedList.prototype, \"last\", {\n    /**\r\n     * Last item in the list.\r\n     *\r\n     * @return Item\r\n     */\n    get: function () {\n      return this._values[this._values.length - 1];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Inserts a value into list.\r\n   *\r\n   * @param value  Value\r\n   */\n  OrderedList.prototype.insert = function (value) {\n    var index = this._insert(value);\n    if (this.events.isEnabled(\"inserted\")) {\n      this.events.dispatchImmediately(\"inserted\", {\n        type: \"inserted\",\n        target: this,\n        index: index,\n        newValue: value\n      });\n    }\n  };\n  /**\r\n   * Removes an item with the `value` from the list.\r\n   *\r\n   * @param value  Value\r\n   */\n  OrderedList.prototype.remove = function (value) {\n    var index = this.indexOf(value);\n    if (index !== -1) {\n      var oldValue = this._values[index];\n      $array.removeIndex(this._values, index);\n      if (this.events.isEnabled(\"removed\")) {\n        this.events.dispatchImmediately(\"removed\", {\n          type: \"removed\",\n          target: this,\n          index: index,\n          oldValue: oldValue\n        });\n      }\n    }\n  };\n  /**\r\n   * Sets multiple items to the list.\r\n   *\r\n   * All current items are removed.\r\n   *\r\n   * @param newArray  New items\r\n   */\n  OrderedList.prototype.setAll = function (newArray) {\n    var _this = this;\n    $array.eachReverse(this._values, function (x, i) {\n      _this._values.pop();\n      if (_this.events.isEnabled(\"removed\")) {\n        _this.events.dispatchImmediately(\"removed\", {\n          type: \"removed\",\n          target: _this,\n          index: i,\n          oldValue: x\n        });\n      }\n    });\n    $array.each(newArray, function (value) {\n      _this.insert(value);\n    });\n  };\n  /**\r\n   * Removes all items from the list.\r\n   */\n  OrderedList.prototype.clear = function () {\n    this.setAll([]);\n  };\n  /**\r\n   * Returns part of the list between `start` and `end` indexes, as a new\r\n   * [[OrderedList]].\r\n   *\r\n   * @param start  Start index\r\n   * @param end    End index\r\n   * @return Items in range\r\n   */\n  OrderedList.prototype.slice = function (start, end) {\n    var out = new OrderedList();\n    out._values = this._values.slice(start, end);\n    return out;\n  };\n  /**\r\n   * Finds a closest available index to the `value` in specified direction.\r\n   *\r\n   * @ignore exclude from docs\r\n   * @param value      value to search for\r\n   * @param fn         A callback function that returns value of the item\r\n   * @param direction  Direciton\r\n   * @return Index\r\n   */\n  OrderedList.prototype.findClosestIndex = function (value, fn, direction) {\n    if (direction === void 0) {\n      direction = \"any\";\n    }\n    // Init temporary values\n    var closestIndex = -1;\n    var closestValue;\n    var closestDifference;\n    var i = 0;\n    $iter.eachContinue(this.iterator(), function (element) {\n      var item = fn(element);\n      // Calc difference\n      if (direction === \"any\") {\n        // Exact match?\n        if (item === value) {\n          // Found exact value - don't bother searching further\n          closestIndex = i;\n          return false;\n        }\n        var difference = Math.abs(value - item);\n        if (!$type.hasValue(closestDifference) || closestDifference > difference) {\n          closestIndex = i;\n          closestValue = item;\n          closestDifference = difference;\n        }\n      } else if (direction === \"left\" && item < value) {\n        if (!$type.hasValue(closestValue) || closestValue < item) {\n          closestIndex = i;\n          closestValue = item;\n        }\n      } else if (direction === \"right\" && item >= value) {\n        if (!$type.hasValue(closestValue) || closestValue >= item) {\n          closestIndex = i;\n          closestValue = item;\n        }\n      }\n      ++i;\n      return true;\n    });\n    // Found nothing?\n    if (closestIndex === -1) {\n      if (direction === \"left\") {\n        // Use First one\n        closestIndex = 0;\n      } else if (direction === \"right\") {\n        // Use last item\n        closestIndex = this.length - 1;\n      }\n    }\n    return closestIndex;\n  };\n  /**\r\n   * Returns a list iterator.\r\n   *\r\n   * @return Iterator\r\n   */\n  OrderedList.prototype.iterator = function () {\n    return $iter.fromArray(this._values);\n  };\n  /**\r\n   * Returns an ES6 iterator for the list.\r\n   */\n  OrderedList.prototype[Symbol.iterator] = function () {\n    var length, i;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          length = this._values.length;\n          i = 0;\n          _a.label = 1;\n        case 1:\n          if (!(i < length)) return [3 /*break*/, 4];\n          return [4 /*yield*/, this._values[i]];\n        case 2:\n          _a.sent();\n          _a.label = 3;\n        case 3:\n          ++i;\n          return [3 /*break*/, 1];\n        case 4:\n          return [2 /*return*/];\n      }\n    });\n  };\n  /**\r\n   * Calls `f` for each element in the list.\r\n   */\n  OrderedList.prototype.each = function (f) {\n    $array.each(this._values, f);\n  };\n  return OrderedList;\n}();\nexport { OrderedList };\n/**\r\n * A list where all items are ordered according to specific ordering function,\r\n * which is passed in via constructor parameter, when creating an instance of\r\n * [[SortedList]].\r\n */\nvar SortedList = /** @class */function (_super) {\n  __extends(SortedList, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param sort  Ordering function\r\n   */\n  function SortedList(sort) {\n    var _this = _super.call(this) || this;\n    _this._ordering = sort;\n    return _this;\n  }\n  /**\r\n   * Inserts item into the list.\r\n   *\r\n   * @param value  Item\r\n   */\n  SortedList.prototype._insert = function (value) {\n    var index = $array.getSortedIndex(this._values, this._ordering, value).index;\n    $array.insertIndex(this._values, index, value);\n    return index;\n  };\n  /**\r\n   * Returns index of the item in list if found.\r\n   *\r\n   * -1 if item is not in the list.\r\n   *\r\n   * @param value  Item to search for\r\n   * @return Index\r\n   */\n  SortedList.prototype.indexOf = function (value) {\n    var _a = $array.getSortedIndex(this._values, this._ordering, value),\n      found = _a.found,\n      index = _a.index;\n    if (found) {\n      return index;\n    } else {\n      return -1;\n    }\n  };\n  /**\r\n   * [udpate description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param value [description]\r\n   */\n  SortedList.prototype.update = function (value) {\n    // @todo test this\n    var index = $array.indexOf(this._values, value);\n    // @todo throw an error if it doesn't exist ?\n    if (index !== -1) {\n      var last = this._values.length - 1;\n      // Check if the current ordering is correct\n      if (!((index === 0 || this._ordering(this._values[index - 1], value) < 0) && (index === last || this._ordering(value, this._values[index + 1]) < 0))) {\n        // TODO send remove/insert/move events\n        $array.removeIndex(this._values, index);\n        this._insert(value);\n      }\n    }\n  };\n  return SortedList;\n}(OrderedList);\nexport { SortedList };\n/**\r\n * A version of a [[OrderedList]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\nvar OrderedListTemplate = /** @class */function (_super) {\n  __extends(OrderedListTemplate, _super);\n  /**\r\n   * Constructor\r\n   *\r\n   * @param t Template object\r\n   */\n  function OrderedListTemplate(t) {\n    var _this = _super.call(this) || this;\n    _this.template = t;\n    return _this;\n  }\n  Object.defineProperty(OrderedListTemplate.prototype, \"template\", {\n    /**\r\n     * @return Template object\r\n     */\n    get: function () {\n      return this._template;\n    },\n    /**\r\n     * A \"template\" object to copy all properties from when creating new list\r\n     * items.\r\n     *\r\n     * @param v  Template object\r\n     */\n    set: function (v) {\n      v.isTemplate = true;\n      this._template = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all elements from other list.\r\n   *\r\n   * @param source  Source list\r\n   */\n  OrderedListTemplate.prototype.copyFrom = function (source) {\n    var _this = this;\n    $iter.each(source.iterator(), function (value) {\n      _this.insert(value.clone());\n    });\n  };\n  /**\r\n   * Returns part of the list, starting at `start` and ending at `end` indexes,\r\n   * as a new [[OrderedListTemplate]].\r\n   *\r\n   * @param start  Start index\r\n   * @param end    End index\r\n   * @return New list\r\n   */\n  OrderedListTemplate.prototype.slice = function (start, end) {\n    var out = new OrderedListTemplate(this.template);\n    out._values = this._values.slice(start, end);\n    return out;\n  };\n  OrderedListTemplate.prototype.create = function (make) {\n    var clone = make != null ? new make() : this.template.clone();\n    this.insert(clone);\n    return clone;\n  };\n  return OrderedListTemplate;\n}(OrderedList);\nexport { OrderedListTemplate };\n/**\r\n * A version of a [[SortedList]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\nvar SortedListTemplate = /** @class */function (_super) {\n  __extends(SortedListTemplate, _super);\n  /**\r\n   * Constructor\r\n   *\r\n   * @param t     Template object\r\n   * @param sort  Ordering function\r\n   */\n  function SortedListTemplate(t, sort) {\n    var _this = _super.call(this, sort) || this;\n    _this.template = t;\n    return _this;\n  }\n  Object.defineProperty(SortedListTemplate.prototype, \"template\", {\n    /**\r\n     * @return Template object\r\n     */\n    get: function () {\n      return this._template;\n    },\n    /**\r\n     * A \"template\" object to copy all properties from when creating new list\r\n     * items.\r\n     *\r\n     * @param v  Template object\r\n     */\n    set: function (v) {\n      v.isTemplate = true;\n      this._template = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all elements from other list.\r\n   *\r\n   * @param source  Source list\r\n   */\n  SortedListTemplate.prototype.copyFrom = function (source) {\n    var _this = this;\n    $iter.each(source.iterator(), function (value) {\n      _this.insert(value.clone());\n    });\n  };\n  SortedListTemplate.prototype.create = function (make) {\n    var clone = make != null ? new make() : this.template.clone();\n    this.insert(clone);\n    return clone;\n  };\n  return SortedListTemplate;\n}(SortedList);\nexport { SortedListTemplate };","map":{"version":3,"names":["__extends","__generator","EventDispatcher","$array","$iter","$type","OrderedList","initial","_values","events","setAll","Object","defineProperty","prototype","get","enumerable","configurable","_insert","value","push","length","indexOf","contains","getIndex","index","insert","isEnabled","dispatchImmediately","type","target","newValue","remove","oldValue","removeIndex","newArray","_this","eachReverse","x","i","pop","each","clear","slice","start","end","out","findClosestIndex","fn","direction","closestIndex","closestValue","closestDifference","eachContinue","iterator","element","item","difference","Math","abs","hasValue","fromArray","Symbol","_a","label","sent","f","SortedList","_super","sort","call","_ordering","getSortedIndex","insertIndex","found","update","last","OrderedListTemplate","t","template","_template","set","v","isTemplate","copyFrom","source","clone","create","make","SortedListTemplate"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/utils/SortedList.js"],"sourcesContent":["import { __extends, __generator } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { EventDispatcher } from \"./EventDispatcher\";\r\nimport * as $array from \"./Array\";\r\nimport * as $iter from \"./Iterator\";\r\nimport * as $type from \"./Type\";\r\n/**\r\n * Ordered list contains values of any type in an indexed array.\r\n */\r\nvar OrderedList = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param initial  Inital list of values to add to list\r\n     */\r\n    function OrderedList(initial) {\r\n        /**\r\n         * Holds list values.\r\n         */\r\n        this._values = [];\r\n        /**\r\n         * Event dispatcher.\r\n         */\r\n        this.events = new EventDispatcher();\r\n        if (initial != null) {\r\n            this.setAll(initial);\r\n        }\r\n    }\r\n    Object.defineProperty(OrderedList.prototype, \"values\", {\r\n        /**\r\n         * All items of the list.\r\n         *\r\n         * Do not modify the list directly. Rather use `insert()` and `remove()`\r\n         * methods.\r\n         *\r\n         * @return List values\r\n         */\r\n        get: function () {\r\n            return this._values;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Inserts a value into list item array.\r\n     *\r\n     * @param value  Value\r\n     */\r\n    OrderedList.prototype._insert = function (value) {\r\n        this._values.push(value);\r\n        return this._values.length - 1;\r\n    };\r\n    Object.defineProperty(OrderedList.prototype, \"length\", {\r\n        /**\r\n         * Number of items in the list.\r\n         *\r\n         * @readonly\r\n         * @return Length\r\n         */\r\n        get: function () {\r\n            return this._values.length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns the index of the specific `value`.\r\n     *\r\n     * -1 if not found.\r\n     *\r\n     * @param value  Value\r\n     * @return Index\r\n     */\r\n    OrderedList.prototype.indexOf = function (value) {\r\n        return $array.indexOf(this._values, value);\r\n    };\r\n    /**\r\n     * Checks if list contains the `value`.\r\n     *\r\n     * @param value  Value\r\n     * @return In the list?\r\n     */\r\n    OrderedList.prototype.contains = function (value) {\r\n        return this.indexOf(value) !== -1;\r\n    };\r\n    /**\r\n     * Returns an item at specific `index`.\r\n     *\r\n     * @param index  Index\r\n     * @return Item\r\n     */\r\n    OrderedList.prototype.getIndex = function (index) {\r\n        return this._values[index];\r\n    };\r\n    Object.defineProperty(OrderedList.prototype, \"first\", {\r\n        /**\r\n         * First item in the list.\r\n         *\r\n         * @return Item\r\n         */\r\n        get: function () {\r\n            return this._values[0];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(OrderedList.prototype, \"last\", {\r\n        /**\r\n         * Last item in the list.\r\n         *\r\n         * @return Item\r\n         */\r\n        get: function () {\r\n            return this._values[this._values.length - 1];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Inserts a value into list.\r\n     *\r\n     * @param value  Value\r\n     */\r\n    OrderedList.prototype.insert = function (value) {\r\n        var index = this._insert(value);\r\n        if (this.events.isEnabled(\"inserted\")) {\r\n            this.events.dispatchImmediately(\"inserted\", {\r\n                type: \"inserted\",\r\n                target: this,\r\n                index: index,\r\n                newValue: value\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Removes an item with the `value` from the list.\r\n     *\r\n     * @param value  Value\r\n     */\r\n    OrderedList.prototype.remove = function (value) {\r\n        var index = this.indexOf(value);\r\n        if (index !== -1) {\r\n            var oldValue = this._values[index];\r\n            $array.removeIndex(this._values, index);\r\n            if (this.events.isEnabled(\"removed\")) {\r\n                this.events.dispatchImmediately(\"removed\", {\r\n                    type: \"removed\",\r\n                    target: this,\r\n                    index: index,\r\n                    oldValue: oldValue,\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets multiple items to the list.\r\n     *\r\n     * All current items are removed.\r\n     *\r\n     * @param newArray  New items\r\n     */\r\n    OrderedList.prototype.setAll = function (newArray) {\r\n        var _this = this;\r\n        $array.eachReverse(this._values, function (x, i) {\r\n            _this._values.pop();\r\n            if (_this.events.isEnabled(\"removed\")) {\r\n                _this.events.dispatchImmediately(\"removed\", {\r\n                    type: \"removed\",\r\n                    target: _this,\r\n                    index: i,\r\n                    oldValue: x\r\n                });\r\n            }\r\n        });\r\n        $array.each(newArray, function (value) {\r\n            _this.insert(value);\r\n        });\r\n    };\r\n    /**\r\n     * Removes all items from the list.\r\n     */\r\n    OrderedList.prototype.clear = function () {\r\n        this.setAll([]);\r\n    };\r\n    /**\r\n     * Returns part of the list between `start` and `end` indexes, as a new\r\n     * [[OrderedList]].\r\n     *\r\n     * @param start  Start index\r\n     * @param end    End index\r\n     * @return Items in range\r\n     */\r\n    OrderedList.prototype.slice = function (start, end) {\r\n        var out = new OrderedList();\r\n        out._values = this._values.slice(start, end);\r\n        return out;\r\n    };\r\n    /**\r\n     * Finds a closest available index to the `value` in specified direction.\r\n     *\r\n     * @ignore exclude from docs\r\n     * @param value      value to search for\r\n     * @param fn         A callback function that returns value of the item\r\n     * @param direction  Direciton\r\n     * @return Index\r\n     */\r\n    OrderedList.prototype.findClosestIndex = function (value, fn, direction) {\r\n        if (direction === void 0) { direction = \"any\"; }\r\n        // Init temporary values\r\n        var closestIndex = -1;\r\n        var closestValue;\r\n        var closestDifference;\r\n        var i = 0;\r\n        $iter.eachContinue(this.iterator(), function (element) {\r\n            var item = fn(element);\r\n            // Calc difference\r\n            if (direction === \"any\") {\r\n                // Exact match?\r\n                if (item === value) {\r\n                    // Found exact value - don't bother searching further\r\n                    closestIndex = i;\r\n                    return false;\r\n                }\r\n                var difference = Math.abs(value - item);\r\n                if (!$type.hasValue(closestDifference) || (closestDifference > difference)) {\r\n                    closestIndex = i;\r\n                    closestValue = item;\r\n                    closestDifference = difference;\r\n                }\r\n            }\r\n            else if (direction === \"left\" && (item < value)) {\r\n                if (!$type.hasValue(closestValue) || (closestValue < item)) {\r\n                    closestIndex = i;\r\n                    closestValue = item;\r\n                }\r\n            }\r\n            else if (direction === \"right\" && (item >= value)) {\r\n                if (!$type.hasValue(closestValue) || (closestValue >= item)) {\r\n                    closestIndex = i;\r\n                    closestValue = item;\r\n                }\r\n            }\r\n            ++i;\r\n            return true;\r\n        });\r\n        // Found nothing?\r\n        if (closestIndex === -1) {\r\n            if (direction === \"left\") {\r\n                // Use First one\r\n                closestIndex = 0;\r\n            }\r\n            else if (direction === \"right\") {\r\n                // Use last item\r\n                closestIndex = this.length - 1;\r\n            }\r\n        }\r\n        return closestIndex;\r\n    };\r\n    /**\r\n     * Returns a list iterator.\r\n     *\r\n     * @return Iterator\r\n     */\r\n    OrderedList.prototype.iterator = function () {\r\n        return $iter.fromArray(this._values);\r\n    };\r\n    /**\r\n     * Returns an ES6 iterator for the list.\r\n     */\r\n    OrderedList.prototype[Symbol.iterator] = function () {\r\n        var length, i;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    length = this._values.length;\r\n                    i = 0;\r\n                    _a.label = 1;\r\n                case 1:\r\n                    if (!(i < length)) return [3 /*break*/, 4];\r\n                    return [4 /*yield*/, this._values[i]];\r\n                case 2:\r\n                    _a.sent();\r\n                    _a.label = 3;\r\n                case 3:\r\n                    ++i;\r\n                    return [3 /*break*/, 1];\r\n                case 4: return [2 /*return*/];\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Calls `f` for each element in the list.\r\n     */\r\n    OrderedList.prototype.each = function (f) {\r\n        $array.each(this._values, f);\r\n    };\r\n    return OrderedList;\r\n}());\r\nexport { OrderedList };\r\n/**\r\n * A list where all items are ordered according to specific ordering function,\r\n * which is passed in via constructor parameter, when creating an instance of\r\n * [[SortedList]].\r\n */\r\nvar SortedList = /** @class */ (function (_super) {\r\n    __extends(SortedList, _super);\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param sort  Ordering function\r\n     */\r\n    function SortedList(sort) {\r\n        var _this = _super.call(this) || this;\r\n        _this._ordering = sort;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Inserts item into the list.\r\n     *\r\n     * @param value  Item\r\n     */\r\n    SortedList.prototype._insert = function (value) {\r\n        var index = $array.getSortedIndex(this._values, this._ordering, value).index;\r\n        $array.insertIndex(this._values, index, value);\r\n        return index;\r\n    };\r\n    /**\r\n     * Returns index of the item in list if found.\r\n     *\r\n     * -1 if item is not in the list.\r\n     *\r\n     * @param value  Item to search for\r\n     * @return Index\r\n     */\r\n    SortedList.prototype.indexOf = function (value) {\r\n        var _a = $array.getSortedIndex(this._values, this._ordering, value), found = _a.found, index = _a.index;\r\n        if (found) {\r\n            return index;\r\n        }\r\n        else {\r\n            return -1;\r\n        }\r\n    };\r\n    /**\r\n     * [udpate description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param value [description]\r\n     */\r\n    SortedList.prototype.update = function (value) {\r\n        // @todo test this\r\n        var index = $array.indexOf(this._values, value);\r\n        // @todo throw an error if it doesn't exist ?\r\n        if (index !== -1) {\r\n            var last = this._values.length - 1;\r\n            // Check if the current ordering is correct\r\n            if (!((index === 0 || this._ordering(this._values[index - 1], value) < 0) &&\r\n                (index === last || this._ordering(value, this._values[index + 1]) < 0))) {\r\n                // TODO send remove/insert/move events\r\n                $array.removeIndex(this._values, index);\r\n                this._insert(value);\r\n            }\r\n        }\r\n    };\r\n    return SortedList;\r\n}(OrderedList));\r\nexport { SortedList };\r\n/**\r\n * A version of a [[OrderedList]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\r\nvar OrderedListTemplate = /** @class */ (function (_super) {\r\n    __extends(OrderedListTemplate, _super);\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param t Template object\r\n     */\r\n    function OrderedListTemplate(t) {\r\n        var _this = _super.call(this) || this;\r\n        _this.template = t;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(OrderedListTemplate.prototype, \"template\", {\r\n        /**\r\n         * @return Template object\r\n         */\r\n        get: function () {\r\n            return this._template;\r\n        },\r\n        /**\r\n         * A \"template\" object to copy all properties from when creating new list\r\n         * items.\r\n         *\r\n         * @param v  Template object\r\n         */\r\n        set: function (v) {\r\n            v.isTemplate = true;\r\n            this._template = v;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies all elements from other list.\r\n     *\r\n     * @param source  Source list\r\n     */\r\n    OrderedListTemplate.prototype.copyFrom = function (source) {\r\n        var _this = this;\r\n        $iter.each(source.iterator(), function (value) {\r\n            _this.insert(value.clone());\r\n        });\r\n    };\r\n    /**\r\n     * Returns part of the list, starting at `start` and ending at `end` indexes,\r\n     * as a new [[OrderedListTemplate]].\r\n     *\r\n     * @param start  Start index\r\n     * @param end    End index\r\n     * @return New list\r\n     */\r\n    OrderedListTemplate.prototype.slice = function (start, end) {\r\n        var out = new OrderedListTemplate(this.template);\r\n        out._values = this._values.slice(start, end);\r\n        return out;\r\n    };\r\n    OrderedListTemplate.prototype.create = function (make) {\r\n        var clone = (make != null\r\n            ? new make()\r\n            : this.template.clone());\r\n        this.insert(clone);\r\n        return clone;\r\n    };\r\n    return OrderedListTemplate;\r\n}(OrderedList));\r\nexport { OrderedListTemplate };\r\n/**\r\n * A version of a [[SortedList]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\r\nvar SortedListTemplate = /** @class */ (function (_super) {\r\n    __extends(SortedListTemplate, _super);\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param t     Template object\r\n     * @param sort  Ordering function\r\n     */\r\n    function SortedListTemplate(t, sort) {\r\n        var _this = _super.call(this, sort) || this;\r\n        _this.template = t;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(SortedListTemplate.prototype, \"template\", {\r\n        /**\r\n         * @return Template object\r\n         */\r\n        get: function () {\r\n            return this._template;\r\n        },\r\n        /**\r\n         * A \"template\" object to copy all properties from when creating new list\r\n         * items.\r\n         *\r\n         * @param v  Template object\r\n         */\r\n        set: function (v) {\r\n            v.isTemplate = true;\r\n            this._template = v;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies all elements from other list.\r\n     *\r\n     * @param source  Source list\r\n     */\r\n    SortedListTemplate.prototype.copyFrom = function (source) {\r\n        var _this = this;\r\n        $iter.each(source.iterator(), function (value) {\r\n            _this.insert(value.clone());\r\n        });\r\n    };\r\n    SortedListTemplate.prototype.create = function (make) {\r\n        var clone = (make != null\r\n            ? new make()\r\n            : this.template.clone());\r\n        this.insert(clone);\r\n        return clone;\r\n    };\r\n    return SortedListTemplate;\r\n}(SortedList));\r\nexport { SortedListTemplate };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}