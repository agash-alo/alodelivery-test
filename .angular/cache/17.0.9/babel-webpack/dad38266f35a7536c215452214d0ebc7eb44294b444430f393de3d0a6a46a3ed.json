{"ast":null,"code":"/**\r\n * Axis Label module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { AxisLabel } from \"./AxisLabel\";\nimport { registry } from \"../../core/Registry\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport { Percent } from \"../../core/utils/Percent\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Use to create labels on circular axis.\r\n *\r\n * @see {@link IAxisLabelCircularEvents} for a list of available events\r\n * @see {@link IAxisLabelCircularAdapters} for a list of available Adapters\r\n */\nvar AxisLabelCircular = /** @class */function (_super) {\n  __extends(AxisLabelCircular, _super);\n  /**\r\n   * Constructor\r\n   */\n  function AxisLabelCircular() {\n    var _this = _super.call(this) || this;\n    /**\r\n     *\r\n     * @ignore\r\n     */\n    _this.fdx = 0;\n    /**\r\n     *\r\n     * @ignore\r\n     */\n    _this.fdy = 0;\n    _this.className = \"AxisLabelCircular\";\n    _this.padding(0, 0, 0, 0);\n    _this.location = 0.5;\n    _this.locationOnPath = 0.5;\n    _this.radius = 0;\n    _this.isMeasured = false;\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(AxisLabelCircular.prototype, \"relativeRotation\", {\n    /**\r\n     * @return Rotation angle\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"relativeRotation\");\n    },\n    /**\r\n     * Relative rotation of the label.\r\n     *\r\n     * It is an angle to circle. In case 90, labels will be positioned like rays\r\n     * of light, if 0 - positioned along the circle.\r\n     *\r\n     * @param value Rotation angle\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"relativeRotation\", value, true);\n      if (!$type.hasValue(value)) {\n        this.rotation = undefined;\n        var dataItem = this.dataItem;\n        if (dataItem && dataItem.component) {\n          dataItem.component.invalidateDataItems();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisLabelCircular.prototype, \"radius\", {\n    /**\r\n     * @return Distance (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n    /**\r\n     * Distance from axis circle to label in pixels or percent.\r\n     *\r\n     * @param value Distance (px or percent)\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"radius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisLabelCircular.prototype, \"bent\", {\n    /**\r\n     * @return Bent?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"bent\");\n    },\n    /**\r\n     * Specifies if label should be bent along the circle.\r\n     *\r\n     * IMPORTANT: Use this with caution, since it is quite CPU-greedy.\r\n     *\r\n     * @since 4.1.2\r\n     * @default false\r\n     * @param  value  Bent?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"bent\", value, true);\n      this.setPropertyValue(\"wrap\", false);\n      this.setPropertyValue(\"horizontalCenter\", \"none\");\n      this.setPropertyValue(\"verticalCenter\", \"none\");\n      if (value) {\n        this.setPropertyValue(\"dx\", 0);\n        this.setPropertyValue(\"dy\", 0);\n        this.setPropertyValue(\"x\", 0);\n        this.setPropertyValue(\"y\", 0);\n        this.setPropertyValue(\"rotation\", 0);\n        //this.setPropertyValue(\"relativeRotation\", undefined);\n        this.fdx = 0;\n        this.fdy = 0;\n        this.textAlign = \"middle\";\n      } else {\n        if (this.textPathElement) {\n          this.textPathElement.dispose();\n          this.textPathElement = undefined;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns label radius in pixels.\r\n   *\r\n   * @param   axisRadius  Radius\r\n   * @return              Pixel radius\r\n   */\n  AxisLabelCircular.prototype.pixelRadius = function (axisRadius) {\n    var sign = 1;\n    if (this.inside) {\n      sign = -1;\n    }\n    return $utils.relativeToValue(this.radius, axisRadius) * sign;\n  };\n  /**\r\n   * Returns label horizontal radius in pixels.\r\n   *\r\n   * @param   axisRadius   Radius\r\n   * @param   axisRadiusY  Vertical radius\r\n   * @return               Radius\r\n   */\n  AxisLabelCircular.prototype.pixelRadiusY = function (axisRadius, axisRadiusY) {\n    var sign = 1;\n    if (this.inside) {\n      sign = -1;\n    }\n    var radius = this.radius;\n    if ($type.isNumber(radius)) {\n      radius *= axisRadiusY / axisRadius;\n      return $utils.relativeToValue(radius, axisRadius) * sign;\n    } else {\n      return $utils.relativeToValue(radius, axisRadiusY) * sign;\n    }\n  };\n  /**\r\n   * [fixPosition description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param point       Label affixation point\r\n   * @param axisRadius  Distance from point (px)\r\n   */\n  AxisLabelCircular.prototype.fixPosition = function (angle, axisRadius, axisRadiusY, dx, dy) {\n    if (!$type.isNumber(axisRadiusY)) {\n      axisRadiusY = axisRadius;\n    }\n    if (!$type.isNumber(dx)) {\n      dx = 0;\n    }\n    if (!$type.isNumber(dy)) {\n      dy = 0;\n    }\n    var point = {\n      x: axisRadius * $math.cos(angle),\n      y: axisRadiusY * $math.sin(angle)\n    };\n    if (this.invalid) {\n      this.validate(); //@todo\" check if we need this\n    }\n\n    var isNegative = false;\n    var realRadius = this.radius;\n    if (realRadius instanceof Percent && realRadius.value < 0) {\n      isNegative = true;\n    } else if (realRadius < 0) {\n      isNegative = true;\n    }\n    var relativeRotation = this.relativeRotation;\n    var labelRadius = this.pixelRadius(axisRadius);\n    if (this.bent) {\n      var point_1 = {\n        x: (axisRadius + labelRadius) * $math.cos(angle + 180),\n        y: (axisRadiusY + labelRadius * axisRadiusY / axisRadius) * $math.sin(angle + 180)\n      };\n      this.path = $path.moveTo(point_1) + $path.arcTo(angle + 180, 360, axisRadius + labelRadius, axisRadiusY + labelRadius * axisRadiusY / axisRadius);\n      if (this.textPathElement) {\n        this.textPathElement.attr({\n          \"startOffset\": this.locationOnPath * 100 + \"%\"\n        });\n      }\n      return;\n    }\n    // WHEN ROTATED\n    if ($type.isNumber(relativeRotation)) {\n      this.horizontalCenter = \"none\";\n      this.verticalCenter = \"none\";\n      angle = $math.fitAngleToRange(angle, -180, 180);\n      var pixelWidth = this.bbox.width;\n      var pixelHeight = this.bbox.height;\n      var pixelPaddingBottom = this.pixelPaddingBottom;\n      var pixelPaddingTop = this.pixelPaddingTop;\n      var pixelPaddingLeft = this.pixelPaddingLeft;\n      var pixelPaddingRight = this.pixelPaddingRight;\n      if (angle > 90 || angle < -90) {\n        if (relativeRotation == -90) {\n          relativeRotation = 90;\n          pixelWidth = 0;\n        }\n      } else {\n        if (relativeRotation == -90) {\n          pixelHeight = -pixelHeight;\n        }\n        if (relativeRotation == 90) {\n          relativeRotation = -90;\n          pixelWidth = -pixelPaddingLeft - pixelPaddingRight;\n          pixelHeight = -pixelHeight - pixelPaddingTop - pixelPaddingBottom;\n        }\n      }\n      this.rotation = relativeRotation + angle + 90;\n      var dH = $math.sin(relativeRotation) / 2;\n      var dW = $math.cos(relativeRotation) / 2;\n      var rotation = this.rotation;\n      this.dx = pixelHeight * dH * $math.sin(rotation) - pixelWidth * dW * $math.cos(rotation);\n      this.dy = -pixelHeight * dH * $math.cos(rotation) - pixelWidth * dW * $math.sin(rotation);\n      if (!this.inside) {\n        labelRadius += (pixelHeight + pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelWidth + pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\n      } else {\n        if (angle > 90 || angle < -90) {\n          labelRadius -= (pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\n        } else {\n          labelRadius += (pixelPaddingBottom + this.bbox.height + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight + this.bbox.width) * $math.sin(relativeRotation);\n        }\n      }\n      point.x += $math.cos(angle) * labelRadius;\n      point.y += $math.sin(angle) * labelRadius * axisRadiusY / axisRadius;\n    } else {\n      // END OF ROTATED\n      this.horizontalCenter = \"middle\";\n      this.verticalCenter = \"middle\";\n      if (isNegative) {\n        this.dx = 0;\n        this.dy = 0;\n        point.x = (axisRadius + labelRadius) * $math.cos(angle);\n        point.y = (axisRadiusY + labelRadius * axisRadiusY / axisRadius) * $math.sin(angle);\n      } else {\n        // we don't use valign for labels because then they would jump while animating. instead we modify dy depending on a y position\n        // this math makes dy to be 1 at the top of the circle, 0.5 at the middle and 1 at the bottom\n        // @todo with this math doesn't work well with inside = true\n        this.dy = this._measuredHeight / 2 * $math.sin(angle); //(1 - (point.y + axisRadiusY) / (2 * axisRadiusY));\n        // simmilar with dx\n        this.dx = this._measuredWidth / 2 * $math.cos(angle); //(1 - (point.x + axisRadius) / (2 * axisRadius));\n        point.x += $math.cos(angle) * labelRadius;\n        point.y += $math.sin(angle) * labelRadius * axisRadiusY / axisRadius;\n      }\n    }\n    point.x += dx;\n    point.y += dy;\n    this.fdx = this.dx;\n    this.fdy = this.dy;\n    this.moveTo(point);\n  };\n  return AxisLabelCircular;\n}(AxisLabel);\nexport { AxisLabelCircular };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"AxisLabelCircular\"] = AxisLabelCircular;","map":{"version":3,"names":["__extends","AxisLabel","registry","$math","$type","$path","$utils","Percent","AxisLabelCircular","_super","_this","call","fdx","fdy","className","padding","location","locationOnPath","radius","isMeasured","applyTheme","Object","defineProperty","prototype","get","getPropertyValue","set","value","setPropertyValue","hasValue","rotation","undefined","dataItem","component","invalidateDataItems","enumerable","configurable","setPercentProperty","textAlign","textPathElement","dispose","pixelRadius","axisRadius","sign","inside","relativeToValue","pixelRadiusY","axisRadiusY","isNumber","fixPosition","angle","dx","dy","point","x","cos","y","sin","invalid","validate","isNegative","realRadius","relativeRotation","labelRadius","bent","point_1","path","moveTo","arcTo","attr","horizontalCenter","verticalCenter","fitAngleToRange","pixelWidth","bbox","width","pixelHeight","height","pixelPaddingBottom","pixelPaddingTop","pixelPaddingLeft","pixelPaddingRight","dH","dW","_measuredHeight","_measuredWidth","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/charts/axes/AxisLabelCircular.js"],"sourcesContent":["/**\r\n * Axis Label module\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Use to create labels on circular axis.\r\n *\r\n * @see {@link IAxisLabelCircularEvents} for a list of available events\r\n * @see {@link IAxisLabelCircularAdapters} for a list of available Adapters\r\n */\r\nvar AxisLabelCircular = /** @class */ (function (_super) {\r\n    __extends(AxisLabelCircular, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function AxisLabelCircular() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         *\r\n         * @ignore\r\n         */\r\n        _this.fdx = 0;\r\n        /**\r\n         *\r\n         * @ignore\r\n         */\r\n        _this.fdy = 0;\r\n        _this.className = \"AxisLabelCircular\";\r\n        _this.padding(0, 0, 0, 0);\r\n        _this.location = 0.5;\r\n        _this.locationOnPath = 0.5;\r\n        _this.radius = 0;\r\n        _this.isMeasured = false;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(AxisLabelCircular.prototype, \"relativeRotation\", {\r\n        /**\r\n         * @return Rotation angle\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"relativeRotation\");\r\n        },\r\n        /**\r\n         * Relative rotation of the label.\r\n         *\r\n         * It is an angle to circle. In case 90, labels will be positioned like rays\r\n         * of light, if 0 - positioned along the circle.\r\n         *\r\n         * @param value Rotation angle\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"relativeRotation\", value, true);\r\n            if (!$type.hasValue(value)) {\r\n                this.rotation = undefined;\r\n                var dataItem = this.dataItem;\r\n                if (dataItem && dataItem.component) {\r\n                    dataItem.component.invalidateDataItems();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisLabelCircular.prototype, \"radius\", {\r\n        /**\r\n         * @return Distance (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Distance from axis circle to label in pixels or percent.\r\n         *\r\n         * @param value Distance (px or percent)\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisLabelCircular.prototype, \"bent\", {\r\n        /**\r\n         * @return Bent?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"bent\");\r\n        },\r\n        /**\r\n         * Specifies if label should be bent along the circle.\r\n         *\r\n         * IMPORTANT: Use this with caution, since it is quite CPU-greedy.\r\n         *\r\n         * @since 4.1.2\r\n         * @default false\r\n         * @param  value  Bent?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"bent\", value, true);\r\n            this.setPropertyValue(\"wrap\", false);\r\n            this.setPropertyValue(\"horizontalCenter\", \"none\");\r\n            this.setPropertyValue(\"verticalCenter\", \"none\");\r\n            if (value) {\r\n                this.setPropertyValue(\"dx\", 0);\r\n                this.setPropertyValue(\"dy\", 0);\r\n                this.setPropertyValue(\"x\", 0);\r\n                this.setPropertyValue(\"y\", 0);\r\n                this.setPropertyValue(\"rotation\", 0);\r\n                //this.setPropertyValue(\"relativeRotation\", undefined);\r\n                this.fdx = 0;\r\n                this.fdy = 0;\r\n                this.textAlign = \"middle\";\r\n            }\r\n            else {\r\n                if (this.textPathElement) {\r\n                    this.textPathElement.dispose();\r\n                    this.textPathElement = undefined;\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns label radius in pixels.\r\n     *\r\n     * @param   axisRadius  Radius\r\n     * @return              Pixel radius\r\n     */\r\n    AxisLabelCircular.prototype.pixelRadius = function (axisRadius) {\r\n        var sign = 1;\r\n        if (this.inside) {\r\n            sign = -1;\r\n        }\r\n        return $utils.relativeToValue(this.radius, axisRadius) * sign;\r\n    };\r\n    /**\r\n     * Returns label horizontal radius in pixels.\r\n     *\r\n     * @param   axisRadius   Radius\r\n     * @param   axisRadiusY  Vertical radius\r\n     * @return               Radius\r\n     */\r\n    AxisLabelCircular.prototype.pixelRadiusY = function (axisRadius, axisRadiusY) {\r\n        var sign = 1;\r\n        if (this.inside) {\r\n            sign = -1;\r\n        }\r\n        var radius = this.radius;\r\n        if ($type.isNumber(radius)) {\r\n            radius *= axisRadiusY / axisRadius;\r\n            return $utils.relativeToValue(radius, axisRadius) * sign;\r\n        }\r\n        else {\r\n            return $utils.relativeToValue(radius, axisRadiusY) * sign;\r\n        }\r\n    };\r\n    /**\r\n     * [fixPosition description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param point       Label affixation point\r\n     * @param axisRadius  Distance from point (px)\r\n     */\r\n    AxisLabelCircular.prototype.fixPosition = function (angle, axisRadius, axisRadiusY, dx, dy) {\r\n        if (!$type.isNumber(axisRadiusY)) {\r\n            axisRadiusY = axisRadius;\r\n        }\r\n        if (!$type.isNumber(dx)) {\r\n            dx = 0;\r\n        }\r\n        if (!$type.isNumber(dy)) {\r\n            dy = 0;\r\n        }\r\n        var point = { x: axisRadius * $math.cos(angle), y: axisRadiusY * $math.sin(angle) };\r\n        if (this.invalid) {\r\n            this.validate(); //@todo\" check if we need this\r\n        }\r\n        var isNegative = false;\r\n        var realRadius = this.radius;\r\n        if (realRadius instanceof Percent && realRadius.value < 0) {\r\n            isNegative = true;\r\n        }\r\n        else if (realRadius < 0) {\r\n            isNegative = true;\r\n        }\r\n        var relativeRotation = this.relativeRotation;\r\n        var labelRadius = this.pixelRadius(axisRadius);\r\n        if (this.bent) {\r\n            var point_1 = { x: (axisRadius + labelRadius) * $math.cos(angle + 180), y: (axisRadiusY + labelRadius * axisRadiusY / axisRadius) * $math.sin(angle + 180) };\r\n            this.path = $path.moveTo(point_1) + $path.arcTo(angle + 180, 360, axisRadius + labelRadius, axisRadiusY + labelRadius * axisRadiusY / axisRadius);\r\n            if (this.textPathElement) {\r\n                this.textPathElement.attr({ \"startOffset\": (this.locationOnPath * 100) + \"%\" });\r\n            }\r\n            return;\r\n        }\r\n        // WHEN ROTATED\r\n        if ($type.isNumber(relativeRotation)) {\r\n            this.horizontalCenter = \"none\";\r\n            this.verticalCenter = \"none\";\r\n            angle = $math.fitAngleToRange(angle, -180, 180);\r\n            var pixelWidth = this.bbox.width;\r\n            var pixelHeight = this.bbox.height;\r\n            var pixelPaddingBottom = this.pixelPaddingBottom;\r\n            var pixelPaddingTop = this.pixelPaddingTop;\r\n            var pixelPaddingLeft = this.pixelPaddingLeft;\r\n            var pixelPaddingRight = this.pixelPaddingRight;\r\n            if (angle > 90 || angle < -90) {\r\n                if (relativeRotation == -90) {\r\n                    relativeRotation = 90;\r\n                    pixelWidth = 0;\r\n                }\r\n            }\r\n            else {\r\n                if (relativeRotation == -90) {\r\n                    pixelHeight = -pixelHeight;\r\n                }\r\n                if (relativeRotation == 90) {\r\n                    relativeRotation = -90;\r\n                    pixelWidth = -pixelPaddingLeft - pixelPaddingRight;\r\n                    pixelHeight = -pixelHeight - pixelPaddingTop - pixelPaddingBottom;\r\n                }\r\n            }\r\n            this.rotation = relativeRotation + angle + 90;\r\n            var dH = $math.sin(relativeRotation) / 2;\r\n            var dW = $math.cos(relativeRotation) / 2;\r\n            var rotation = this.rotation;\r\n            this.dx = pixelHeight * dH * $math.sin(rotation) - pixelWidth * dW * $math.cos(rotation);\r\n            this.dy = -pixelHeight * dH * $math.cos(rotation) - pixelWidth * dW * $math.sin(rotation);\r\n            if (!this.inside) {\r\n                labelRadius += (pixelHeight + pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelWidth + pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n            }\r\n            else {\r\n                if (angle > 90 || angle < -90) {\r\n                    labelRadius -= (pixelPaddingBottom + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight) * $math.sin(relativeRotation);\r\n                }\r\n                else {\r\n                    labelRadius += (pixelPaddingBottom + this.bbox.height + pixelPaddingTop) * $math.cos(relativeRotation) + (pixelPaddingLeft + pixelPaddingRight + this.bbox.width) * $math.sin(relativeRotation);\r\n                }\r\n            }\r\n            point.x += $math.cos(angle) * labelRadius;\r\n            point.y += $math.sin(angle) * labelRadius * axisRadiusY / axisRadius;\r\n        }\r\n        else {\r\n            // END OF ROTATED\r\n            this.horizontalCenter = \"middle\";\r\n            this.verticalCenter = \"middle\";\r\n            if (isNegative) {\r\n                this.dx = 0;\r\n                this.dy = 0;\r\n                point.x = (axisRadius + labelRadius) * $math.cos(angle);\r\n                point.y = (axisRadiusY + labelRadius * axisRadiusY / axisRadius) * $math.sin(angle);\r\n            }\r\n            else {\r\n                // we don't use valign for labels because then they would jump while animating. instead we modify dy depending on a y position\r\n                // this math makes dy to be 1 at the top of the circle, 0.5 at the middle and 1 at the bottom\r\n                // @todo with this math doesn't work well with inside = true\r\n                this.dy = this._measuredHeight / 2 * $math.sin(angle); //(1 - (point.y + axisRadiusY) / (2 * axisRadiusY));\r\n                // simmilar with dx\r\n                this.dx = this._measuredWidth / 2 * $math.cos(angle); //(1 - (point.x + axisRadius) / (2 * axisRadius));\r\n                point.x += $math.cos(angle) * labelRadius;\r\n                point.y += $math.sin(angle) * labelRadius * axisRadiusY / axisRadius;\r\n            }\r\n        }\r\n        point.x += dx;\r\n        point.y += dy;\r\n        this.fdx = this.dx;\r\n        this.fdy = this.dy;\r\n        this.moveTo(point);\r\n    };\r\n    return AxisLabelCircular;\r\n}(AxisLabel));\r\nexport { AxisLabelCircular };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisLabelCircular\"] = AxisLabelCircular;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}