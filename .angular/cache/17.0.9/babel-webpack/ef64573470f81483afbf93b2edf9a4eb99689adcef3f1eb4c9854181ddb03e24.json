{"ast":null,"code":"import * as i1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig, Overlay } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, NgZone, ElementRef, ChangeDetectorRef, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport { Platform } from '@angular/cdk/platform';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i2 from '@angular/cdk/a11y';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/layout';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n  constructor() {\n    /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n    this.politeness = 'assertive';\n    /**\n     * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n     * component or template, the announcement message will default to the specified message.\n     */\n    this.announcementMessage = '';\n    /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n    this.duration = 0;\n    /** Data being injected into the child component. */\n    this.data = null;\n    /** The horizontal position to place the snack bar. */\n    this.horizontalPosition = 'center';\n    /** The vertical position to place the snack bar. */\n    this.verticalPosition = 'bottom';\n  }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n  constructor(containerInstance, _overlayRef) {\n    this._overlayRef = _overlayRef;\n    /** Subject for notifying the user that the snack bar has been dismissed. */\n    this._afterDismissed = new Subject();\n    /** Subject for notifying the user that the snack bar has opened and appeared. */\n    this._afterOpened = new Subject();\n    /** Subject for notifying the user that the snack bar action was called. */\n    this._onAction = new Subject();\n    /** Whether the snack bar was dismissed using the action button. */\n    this._dismissedByAction = false;\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n  /** Dismisses the snack bar. */\n  dismiss() {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n  /** Marks the snackbar action clicked. */\n  dismissWithAction() {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction() {\n    this.dismissWithAction();\n  }\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration) {\n    // Note that we need to cap the duration to the maximum value for setTimeout, because\n    // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n  }\n  /** Marks the snackbar as opened */\n  _open() {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n  /** Cleans up the DOM after closing. */\n  _finishDismiss() {\n    this._overlayRef.dispose();\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n    this._afterDismissed.next({\n      dismissedByAction: this._dismissedByAction\n    });\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed() {\n    return this._afterDismissed;\n  }\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened() {\n    return this.containerInstance._onEnter;\n  }\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction() {\n    return this._onAction;\n  }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n  constructor(snackBarRef, data) {\n    this.snackBarRef = snackBarRef;\n    this.data = data;\n  }\n  /** Performs the action on the snack bar. */\n  action() {\n    this.snackBarRef.dismissWithAction();\n  }\n  /** If the action button should be shown. */\n  get hasAction() {\n    return !!this.data.action;\n  }\n}\nSimpleSnackBar.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'simple-snack-bar',\n    template: \"<span>{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\",\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n      'class': 'mat-simple-snackbar'\n    },\n    styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"]\n  }]\n}];\nSimpleSnackBar.ctorParameters = () => [{\n  type: MatSnackBarRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_SNACK_BAR_DATA]\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [state('void, hidden', style({\n    transform: 'scale(0.8)',\n    opacity: 0\n  })), state('visible', style({\n    transform: 'scale(1)',\n    opacity: 1\n  })), transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')), transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n    opacity: 0\n  })))])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n  constructor(_ngZone, _elementRef, _changeDetectorRef, _platform, /** The snack bar configuration. */\n  snackBarConfig) {\n    super();\n    this._ngZone = _ngZone;\n    this._elementRef = _elementRef;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._platform = _platform;\n    this.snackBarConfig = snackBarConfig;\n    /** The number of milliseconds to wait before announcing the snack bar's content. */\n    this._announceDelay = 150;\n    /** Whether the component has been destroyed. */\n    this._destroyed = false;\n    /** Subject for notifying that the snack bar has announced to screen readers. */\n    this._onAnnounce = new Subject();\n    /** Subject for notifying that the snack bar has exited from view. */\n    this._onExit = new Subject();\n    /** Subject for notifying that the snack bar has finished entering the view. */\n    this._onEnter = new Subject();\n    /** The state of the snack bar animations. */\n    this._animationState = 'void';\n    /**\n     * Attaches a DOM portal to the snack bar container.\n     * @deprecated To be turned into a method.\n     * @breaking-change 10.0.0\n     */\n    this.attachDomPortal = portal => {\n      this._assertNotAttached();\n      this._applySnackBarClasses();\n      return this._portalOutlet.attachDomPortal(portal);\n    };\n    // Use aria-live rather than a live role like 'alert' or 'status'\n    // because NVDA and JAWS have show inconsistent behavior with live roles.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._live = 'assertive';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._live = 'off';\n    } else {\n      this._live = 'polite';\n    }\n    // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n    // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n    if (this._platform.FIREFOX) {\n      if (this._live === 'polite') {\n        this._role = 'status';\n      }\n      if (this._live === 'assertive') {\n        this._role = 'alert';\n      }\n    }\n  }\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal(portal) {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal(portal) {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event) {\n    const {\n      fromState,\n      toState\n    } = event;\n    if (toState === 'void' && fromState !== 'void' || toState === 'hidden') {\n      this._completeExit();\n    }\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n  /** Begin animation of snack bar entrance into view. */\n  enter() {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n      this._screenReaderAnnounce();\n    }\n  }\n  /** Begin animation of the snack bar exiting from view. */\n  exit() {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    // Mark this element with an 'exit' attribute to indicate that the snackbar has\n    // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n    // test harness.\n    this._elementRef.nativeElement.setAttribute('mat-exit', '');\n    // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n    // long enough to visually read it either, so clear the timeout for announcing.\n    clearTimeout(this._announceTimeoutId);\n    return this._onExit;\n  }\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  _completeExit() {\n    this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  _applySnackBarClasses() {\n    const element = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n  /** Asserts that no content is already attached to the container. */\n  _assertNotAttached() {\n    if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n  /**\n   * Starts a timeout to move the snack bar content to the live region so screen readers will\n   * announce it.\n   */\n  _screenReaderAnnounce() {\n    if (!this._announceTimeoutId) {\n      this._ngZone.runOutsideAngular(() => {\n        this._announceTimeoutId = setTimeout(() => {\n          const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n          const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n          if (inertElement && liveElement) {\n            // If an element in the snack bar content is focused before being moved\n            // track it and restore focus after moving to the live region.\n            let focusedElement = null;\n            if (this._platform.isBrowser && document.activeElement instanceof HTMLElement && inertElement.contains(document.activeElement)) {\n              focusedElement = document.activeElement;\n            }\n            inertElement.removeAttribute('aria-hidden');\n            liveElement.appendChild(inertElement);\n            focusedElement === null || focusedElement === void 0 ? void 0 : focusedElement.focus();\n            this._onAnnounce.next();\n            this._onAnnounce.complete();\n          }\n        }, this._announceDelay);\n      });\n    }\n  }\n}\nMatSnackBarContainer.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'snack-bar-container',\n    template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\",\n    // In Ivy embedded views will be change detected from their declaration place, rather than\n    // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n    // because it might cause snack bars that were opened from a template not to be out of date.\n    // tslint:disable-next-line:validate-decorators\n    changeDetection: ChangeDetectionStrategy.Default,\n    encapsulation: ViewEncapsulation.None,\n    animations: [matSnackBarAnimations.snackBarState],\n    host: {\n      'class': 'mat-snack-bar-container',\n      '[@state]': '_animationState',\n      '(@state.done)': 'onAnimationEnd($event)'\n    },\n    styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"]\n  }]\n}];\nMatSnackBarContainer.ctorParameters = () => [{\n  type: NgZone\n}, {\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: Platform\n}, {\n  type: MatSnackBarConfig\n}];\nMatSnackBarContainer.propDecorators = {\n  _portalOutlet: [{\n    type: ViewChild,\n    args: [CdkPortalOutlet, {\n      static: true\n    }]\n  }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSnackBarModule {}\nMatSnackBarModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n    exports: [MatSnackBarContainer, MatCommonModule],\n    declarations: [MatSnackBarContainer, SimpleSnackBar],\n    entryComponents: [MatSnackBarContainer, SimpleSnackBar]\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n  providedIn: 'root',\n  factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n  return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar {\n  constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n    this._overlay = _overlay;\n    this._live = _live;\n    this._injector = _injector;\n    this._breakpointObserver = _breakpointObserver;\n    this._parentSnackBar = _parentSnackBar;\n    this._defaultConfig = _defaultConfig;\n    /**\n     * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n     * If there is a parent snack-bar service, all operations should delegate to that parent\n     * via `_openedSnackBarRef`.\n     */\n    this._snackBarRefAtThisLevel = null;\n    /** The component that should be rendered as the snack bar's simple component. */\n    this.simpleSnackBarComponent = SimpleSnackBar;\n    /** The container component that attaches the provided template or component. */\n    this.snackBarContainerComponent = MatSnackBarContainer;\n    /** The CSS class to apply for handset mode. */\n    this.handsetCssClass = 'mat-snack-bar-handset';\n  }\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef() {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n  set _openedSnackBarRef(value) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent(component, config) {\n    return this._attach(component, config);\n  }\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template, config) {\n    return this._attach(template, config);\n  }\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message, action = '', config) {\n    const _config = Object.assign(Object.assign({}, this._defaultConfig), config);\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {\n      message,\n      action\n    };\n    // Since the snack bar has `role=\"alert\"`, we don't\n    // want to announce the same message twice.\n    if (_config.announcementMessage === message) {\n      _config.announcementMessage = undefined;\n    }\n    return this.openFromComponent(this.simpleSnackBarComponent, _config);\n  }\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss() {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  _attachSnackBarContainer(overlayRef, config) {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = Injector.create({\n      parent: userInjector || this._injector,\n      providers: [{\n        provide: MatSnackBarConfig,\n        useValue: config\n      }]\n    });\n    const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n    const containerRef = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  _attach(content, userConfig) {\n    const config = Object.assign(Object.assign(Object.assign({}, new MatSnackBarConfig()), this._defaultConfig), userConfig);\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef(container, overlayRef);\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null, {\n        $implicit: config.data,\n        snackBarRef\n      });\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal(portal);\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe(state => {\n      const classList = overlayRef.overlayElement.classList;\n      state.matches ? classList.add(this.handsetCssClass) : classList.remove(this.handsetCssClass);\n    });\n    if (config.announcementMessage) {\n      // Wait until the snack bar contents have been announced then deliver this message.\n      container._onAnnounce.subscribe(() => {\n        this._live.announce(config.announcementMessage, config.politeness);\n      });\n    }\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n  /** Animates the old snack bar out and the new one in. */\n  _animateSnackBar(snackBarRef, config) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n    }\n  }\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  _createOverlay(config) {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = config.horizontalPosition === 'left' || config.horizontalPosition === 'start' && !isRtl || config.horizontalPosition === 'end' && isRtl;\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  _createInjector(config, snackBarRef) {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    return Injector.create({\n      parent: userInjector || this._injector,\n      providers: [{\n        provide: MatSnackBarRef,\n        useValue: snackBarRef\n      }, {\n        provide: MAT_SNACK_BAR_DATA,\n        useValue: config.data\n      }]\n    });\n  }\n}\nMatSnackBar.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function MatSnackBar_Factory() {\n    return new MatSnackBar(i0.ɵɵinject(i1.Overlay), i0.ɵɵinject(i2.LiveAnnouncer), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i3.BreakpointObserver), i0.ɵɵinject(MatSnackBar, 12), i0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS));\n  },\n  token: MatSnackBar,\n  providedIn: MatSnackBarModule\n});\nMatSnackBar.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: MatSnackBarModule\n  }]\n}];\nMatSnackBar.ctorParameters = () => [{\n  type: Overlay\n}, {\n  type: LiveAnnouncer\n}, {\n  type: Injector\n}, {\n  type: BreakpointObserver\n}, {\n  type: MatSnackBar,\n  decorators: [{\n    type: Optional\n  }, {\n    type: SkipSelf\n  }]\n}, {\n  type: MatSnackBarConfig,\n  decorators: [{\n    type: Inject,\n    args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };","map":{"version":3,"names":["i1","OverlayModule","OverlayConfig","Overlay","BasePortalOutlet","CdkPortalOutlet","PortalModule","ComponentPortal","TemplatePortal","CommonModule","i0","InjectionToken","Component","ViewEncapsulation","ChangeDetectionStrategy","Inject","NgZone","ElementRef","ChangeDetectorRef","ViewChild","NgModule","Injector","TemplateRef","Injectable","Optional","SkipSelf","MatCommonModule","MatButtonModule","Subject","Platform","take","takeUntil","trigger","state","style","transition","animate","i2","LiveAnnouncer","i3","Breakpoints","BreakpointObserver","MAT_SNACK_BAR_DATA","MatSnackBarConfig","constructor","politeness","announcementMessage","duration","data","horizontalPosition","verticalPosition","MAX_TIMEOUT","Math","pow","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","subscribe","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","next","complete","closeWithAction","_dismissAfter","setTimeout","min","_open","dispose","dismissedByAction","afterDismissed","afterOpened","_onEnter","SimpleSnackBar","snackBarRef","action","hasAction","decorators","type","args","selector","template","encapsulation","None","changeDetection","OnPush","host","styles","ctorParameters","undefined","matSnackBarAnimations","snackBarState","transform","opacity","MatSnackBarContainer","_ngZone","_elementRef","_changeDetectorRef","_platform","snackBarConfig","_announceDelay","_destroyed","_onAnnounce","_animationState","attachDomPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","_live","FIREFOX","_role","attachComponentPortal","attachTemplatePortal","onAnimationEnd","event","fromState","toState","_completeExit","onEnter","run","enter","detectChanges","_screenReaderAnnounce","nativeElement","setAttribute","_announceTimeoutId","ngOnDestroy","onMicrotaskEmpty","pipe","element","panelClasses","panelClass","Array","isArray","forEach","cssClass","classList","add","hasAttached","ngDevMode","Error","runOutsideAngular","inertElement","querySelector","liveElement","focusedElement","isBrowser","document","activeElement","HTMLElement","contains","removeAttribute","appendChild","focus","Default","animations","propDecorators","static","MatSnackBarModule","imports","exports","declarations","entryComponents","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","factory","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","simpleSnackBarComponent","snackBarContainerComponent","handsetCssClass","_openedSnackBarRef","parent","value","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","Object","assign","_attachSnackBarContainer","overlayRef","userInjector","viewContainerRef","injector","create","providers","provide","useValue","containerPortal","containerRef","attach","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","HandsetPortrait","detachments","overlayElement","matches","remove","announce","_animateSnackBar","clear","overlayConfig","direction","positionStrategy","position","global","isRtl","isLeft","isRight","left","right","centerHorizontally","top","bottom","ɵprov","ɵɵdefineInjectable","MatSnackBar_Factory","ɵɵinject","INJECTOR","token"],"sources":["D:/alodelivery test/node_modules/@angular/material/fesm2015/snack-bar.js"],"sourcesContent":["import * as i1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig, Overlay } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, NgZone, ElementRef, ChangeDetectorRef, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport { Platform } from '@angular/cdk/platform';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i2 from '@angular/cdk/a11y';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/layout';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** The horizontal position to place the snack bar. */\n        this.horizontalPosition = 'center';\n        /** The vertical position to place the snack bar. */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the snack bar has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the snack bar action was called. */\n        this._onAction = new Subject();\n        /** Whether the snack bar was dismissed using the action button. */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe(() => this.dismiss());\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /** Dismisses the snack bar. */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /** Cleans up the DOM after closing. */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction() {\n        return this._onAction;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.decorators = [\n    { type: Component, args: [{\n                selector: 'simple-snack-bar',\n                template: \"<span>{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'class': 'mat-simple-snackbar',\n                },\n                styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"]\n            },] }\n];\nSimpleSnackBar.ctorParameters = () => [\n    { type: MatSnackBarRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DATA,] }] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0\n        }))),\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, _platform, \n    /** The snack bar configuration. */\n    snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._platform = _platform;\n        this.snackBarConfig = snackBarConfig;\n        /** The number of milliseconds to wait before announcing the snack bar's content. */\n        this._announceDelay = 150;\n        /** Whether the component has been destroyed. */\n        this._destroyed = false;\n        /** Subject for notifying that the snack bar has announced to screen readers. */\n        this._onAnnounce = new Subject();\n        /** Subject for notifying that the snack bar has exited from view. */\n        this._onExit = new Subject();\n        /** Subject for notifying that the snack bar has finished entering the view. */\n        this._onEnter = new Subject();\n        /** The state of the snack bar animations. */\n        this._animationState = 'void';\n        /**\n         * Attaches a DOM portal to the snack bar container.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            this._assertNotAttached();\n            this._applySnackBarClasses();\n            return this._portalOutlet.attachDomPortal(portal);\n        };\n        // Use aria-live rather than a live role like 'alert' or 'status'\n        // because NVDA and JAWS have show inconsistent behavior with live roles.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._live = 'assertive';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._live = 'off';\n        }\n        else {\n            this._live = 'polite';\n        }\n        // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n        // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n        if (this._platform.FIREFOX) {\n            if (this._live === 'polite') {\n                this._role = 'status';\n            }\n            if (this._live === 'assertive') {\n                this._role = 'alert';\n            }\n        }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n            this._screenReaderAnnounce();\n        }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n        // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n        // `MatSnackBar.open`).\n        this._animationState = 'hidden';\n        // Mark this element with an 'exit' attribute to indicate that the snackbar has\n        // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n        // test harness.\n        this._elementRef.nativeElement.setAttribute('mat-exit', '');\n        // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n        // long enough to visually read it either, so clear the timeout for announcing.\n        clearTimeout(this._announceTimeoutId);\n        return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n            this._onExit.next();\n            this._onExit.complete();\n        });\n    }\n    /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n    _applySnackBarClasses() {\n        const element = this._elementRef.nativeElement;\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n    _screenReaderAnnounce() {\n        if (!this._announceTimeoutId) {\n            this._ngZone.runOutsideAngular(() => {\n                this._announceTimeoutId = setTimeout(() => {\n                    const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n                    const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n                    if (inertElement && liveElement) {\n                        // If an element in the snack bar content is focused before being moved\n                        // track it and restore focus after moving to the live region.\n                        let focusedElement = null;\n                        if (this._platform.isBrowser &&\n                            document.activeElement instanceof HTMLElement &&\n                            inertElement.contains(document.activeElement)) {\n                            focusedElement = document.activeElement;\n                        }\n                        inertElement.removeAttribute('aria-hidden');\n                        liveElement.appendChild(inertElement);\n                        focusedElement === null || focusedElement === void 0 ? void 0 : focusedElement.focus();\n                        this._onAnnounce.next();\n                        this._onAnnounce.complete();\n                    }\n                }, this._announceDelay);\n            });\n        }\n    }\n}\nMatSnackBarContainer.decorators = [\n    { type: Component, args: [{\n                selector: 'snack-bar-container',\n                template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\",\n                // In Ivy embedded views will be change detected from their declaration place, rather than\n                // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n                // because it might cause snack bars that were opened from a template not to be out of date.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                animations: [matSnackBarAnimations.snackBarState],\n                host: {\n                    'class': 'mat-snack-bar-container',\n                    '[@state]': '_animationState',\n                    '(@state.done)': 'onAnimationEnd($event)'\n                },\n                styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"]\n            },] }\n];\nMatSnackBarContainer.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: Platform },\n    { type: MatSnackBarConfig }\n];\nMatSnackBarContainer.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    CommonModule,\n                    MatButtonModule,\n                    MatCommonModule,\n                ],\n                exports: [MatSnackBarContainer, MatCommonModule],\n                declarations: [MatSnackBarContainer, SimpleSnackBar],\n                entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar {\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n        /** The component that should be rendered as the snack bar's simple component. */\n        this.simpleSnackBarComponent = SimpleSnackBar;\n        /** The container component that attaches the provided template or component. */\n        this.snackBarContainerComponent = MatSnackBarContainer;\n        /** The CSS class to apply for handset mode. */\n        this.handsetCssClass = 'mat-snack-bar-handset';\n    }\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n        return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n        const _config = Object.assign(Object.assign({}, this._defaultConfig), config);\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        // Since the snack bar has `role=\"alert\"`, we don't\n        // want to announce the same message twice.\n        if (_config.announcementMessage === message) {\n            _config.announcementMessage = undefined;\n        }\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatSnackBarConfig, useValue: config }]\n        });\n        const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n        const config = Object.assign(Object.assign(Object.assign({}, new MatSnackBarConfig()), this._defaultConfig), userConfig);\n        const overlayRef = this._createOverlay(config);\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            const portal = new TemplatePortal(content, null, {\n                $implicit: config.data,\n                snackBarRef\n            });\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            const injector = this._createInjector(config, snackBarRef);\n            const portal = new ComponentPortal(content, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe(state => {\n            const classList = overlayRef.overlayElement.classList;\n            state.matches ? classList.add(this.handsetCssClass) : classList.remove(this.handsetCssClass);\n        });\n        if (config.announcementMessage) {\n            // Wait until the snack bar contents have been announced then deliver this message.\n            container._onAnnounce.subscribe(() => {\n                this._live.announce(config.announcementMessage, config.politeness);\n            });\n        }\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        const isRtl = config.direction === 'rtl';\n        const isLeft = (config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl));\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return Injector.create({\n            parent: userInjector || this._injector,\n            providers: [\n                { provide: MatSnackBarRef, useValue: snackBarRef },\n                { provide: MAT_SNACK_BAR_DATA, useValue: config.data }\n            ]\n        });\n    }\n}\nMatSnackBar.ɵprov = i0.ɵɵdefineInjectable({ factory: function MatSnackBar_Factory() { return new MatSnackBar(i0.ɵɵinject(i1.Overlay), i0.ɵɵinject(i2.LiveAnnouncer), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i3.BreakpointObserver), i0.ɵɵinject(MatSnackBar, 12), i0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: MatSnackBar, providedIn: MatSnackBarModule });\nMatSnackBar.decorators = [\n    { type: Injectable, args: [{ providedIn: MatSnackBarModule },] }\n];\nMatSnackBar.ctorParameters = () => [\n    { type: Overlay },\n    { type: LiveAnnouncer },\n    { type: Injector },\n    { type: BreakpointObserver },\n    { type: MatSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: MatSnackBarConfig, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] }] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}