{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Dictionary } from \"./utils/Dictionary\";\nimport { TargetedEventDispatcher } from \"./utils/EventDispatcher\";\nimport { MultiDisposer, CounterDisposer } from \"./utils/Disposer\";\nimport * as $utils from \"./utils/Utils\";\nimport * as $object from \"./utils/Object\";\n/**\r\n * An [[EventDispatcher]] for [[Sprite]].\r\n *\r\n * @important\r\n */\nvar SpriteEventDispatcher = /** @class */function (_super) {\n  __extends(SpriteEventDispatcher, _super);\n  function SpriteEventDispatcher() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * [_interactionEvents description]\r\n     *\r\n     * @todo Description\r\n     */\n    _this._interactionEvents = new Dictionary();\n    return _this;\n  }\n  /**\r\n   * [_dispatchSpriteEvent description]\r\n   *\r\n   * @todo Description\r\n   */\n  SpriteEventDispatcher.prototype._dispatchSpriteEvent = function (ev) {\n    if (this.target.disabled || this.target.isTemplate) {\n      return;\n    }\n    // TODO remove this <any> later\n    if (this.target.events.isEnabled(ev.type)) {\n      var imev = $object.merge(ev, {\n        target: this.target\n      });\n      this.target.events.dispatchImmediately(imev.type, imev);\n    }\n  };\n  /**\r\n   * [_dispatchSpritePointEvent description]\r\n   *\r\n   * @todo Description\r\n   */\n  SpriteEventDispatcher.prototype._dispatchSpritePointEvent = function (ev) {\n    if (this.target.disabled || this.target.isTemplate) {\n      return;\n    }\n    // TODO remove this <any> later\n    if (this.target.events.isEnabled(ev.type)) {\n      var imev = $object.merge(ev, {\n        target: this.target,\n        spritePoint: ev.point ? $utils.documentPointToSprite(ev.point, this.target) : undefined,\n        svgPoint: this.target.getSvgPoint(ev.point)\n      });\n      this.target.events.dispatchImmediately(imev.type, imev);\n    }\n  };\n  /**\r\n   * [_addInteractionObjectEvent description]\r\n   *\r\n   * @todo Description\r\n   */\n  SpriteEventDispatcher.prototype._addInteractionObjectEvent = function (type, callback, context, shouldClone) {\n    var _this = this;\n    var key = shouldClone + \"-\" + type;\n    var counter = this._interactionEvents.insertKeyIfEmpty(key, function () {\n      var disposer = _this.target.interactions.events.on(type, callback, context, shouldClone);\n      return new CounterDisposer(function () {\n        _this._interactionEvents.removeKey(key);\n        disposer.dispose();\n      });\n    });\n    return counter.increment();\n  };\n  /**\r\n   * [_on description]\r\n   *\r\n   * @todo Description\r\n   */\n  SpriteEventDispatcher.prototype._on = function (once, type, callback, context, shouldClone, dispatch) {\n    var info = _super.prototype._on.call(this, once, type, callback, context, shouldClone, dispatch);\n    var disposers = [info.disposer];\n    /**\r\n     * Catching Sprite-related events, converting them to [[SpriteEvent]] and\r\n     * triggering them on sprite\r\n     */\n    switch (type) {\n      case \"hit\":\n      case \"track\":\n      case \"doublehit\":\n      case \"wheel\":\n      case \"wheelup\":\n      case \"wheeldown\":\n      case \"wheelleft\":\n      case \"wheelright\":\n        disposers.push(this._addInteractionObjectEvent(type, this._dispatchSpritePointEvent, this, shouldClone));\n        break;\n      case \"rightclick\":\n      case \"down\":\n      //case \"hold\":\n      case \"up\":\n      case \"drag\":\n      case \"dragged\":\n      case \"dragstart\":\n      case \"dragstop\":\n      case \"over\":\n      case \"out\":\n      case \"swipe\":\n      case \"swipeleft\":\n      case \"swiperight\":\n      case \"resize\":\n      //case \"rotate\":\n      case \"focus\":\n      case \"blur\":\n      case \"toggled\":\n        disposers.push(this._addInteractionObjectEvent(type, this._dispatchSpriteEvent, this, shouldClone));\n        break;\n    }\n    /**\r\n     * Set functional properties based on events. For example if we add a\r\n     * \"drag\" event handler, we want to make the Sprite draggable, even if we\r\n     * don't explicitly set \"draggable\"\r\n     */\n    switch (type) {\n      case \"hit\":\n      case \"doublehit\":\n      case \"rightclick\":\n      case \"down\":\n      case \"up\":\n        this.target.clickable = true;\n        break;\n      case \"toggled\":\n        this.target.togglable = true;\n        break;\n      case \"drag\":\n      case \"dragstart\":\n      case \"dragstop\":\n        this.target.draggable = true;\n        break;\n      case \"track\":\n        this.target.trackable = true;\n        break;\n      case \"resize\":\n        this.target.resizable = true;\n        break;\n      case \"swipe\":\n      case \"swipeleft\":\n      case \"swiperight\":\n        this.target.swipeable = true;\n        break;\n      case \"wheel\":\n      case \"wheelup\":\n      case \"wheeldown\":\n      case \"wheelleft\":\n      case \"wheelright\":\n        this.target.wheelable = true;\n        break;\n      case \"over\":\n        this.target.hoverable = true;\n      case \"out\":\n        this.target.hoverable = true;\n        break;\n      case \"focus\":\n      case \"blur\":\n        this.target.focusable = true;\n        break;\n    }\n    info.disposer = new MultiDisposer(disposers);\n    return info;\n  };\n  return SpriteEventDispatcher;\n}(TargetedEventDispatcher);\nexport { SpriteEventDispatcher };","map":{"version":3,"names":["__extends","Dictionary","TargetedEventDispatcher","MultiDisposer","CounterDisposer","$utils","$object","SpriteEventDispatcher","_super","_this","apply","arguments","_interactionEvents","prototype","_dispatchSpriteEvent","ev","target","disabled","isTemplate","events","isEnabled","type","imev","merge","dispatchImmediately","_dispatchSpritePointEvent","spritePoint","point","documentPointToSprite","undefined","svgPoint","getSvgPoint","_addInteractionObjectEvent","callback","context","shouldClone","key","counter","insertKeyIfEmpty","disposer","interactions","on","removeKey","dispose","increment","_on","once","dispatch","info","call","disposers","push","clickable","togglable","draggable","trackable","resizable","swipeable","wheelable","hoverable","focusable"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/SpriteEvents.js"],"sourcesContent":["import { __extends } from \"tslib\";\r\nimport { Dictionary } from \"./utils/Dictionary\";\r\nimport { TargetedEventDispatcher } from \"./utils/EventDispatcher\";\r\nimport { MultiDisposer, CounterDisposer } from \"./utils/Disposer\";\r\nimport * as $utils from \"./utils/Utils\";\r\nimport * as $object from \"./utils/Object\";\r\n/**\r\n * An [[EventDispatcher]] for [[Sprite]].\r\n *\r\n * @important\r\n */\r\nvar SpriteEventDispatcher = /** @class */ (function (_super) {\r\n    __extends(SpriteEventDispatcher, _super);\r\n    function SpriteEventDispatcher() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        /**\r\n         * [_interactionEvents description]\r\n         *\r\n         * @todo Description\r\n         */\r\n        _this._interactionEvents = new Dictionary();\r\n        return _this;\r\n    }\r\n    /**\r\n     * [_dispatchSpriteEvent description]\r\n     *\r\n     * @todo Description\r\n     */\r\n    SpriteEventDispatcher.prototype._dispatchSpriteEvent = function (ev) {\r\n        if (this.target.disabled || this.target.isTemplate) {\r\n            return;\r\n        }\r\n        // TODO remove this <any> later\r\n        if (this.target.events.isEnabled(ev.type)) {\r\n            var imev = $object.merge(ev, {\r\n                target: this.target\r\n            });\r\n            this.target.events.dispatchImmediately(imev.type, imev);\r\n        }\r\n    };\r\n    /**\r\n     * [_dispatchSpritePointEvent description]\r\n     *\r\n     * @todo Description\r\n     */\r\n    SpriteEventDispatcher.prototype._dispatchSpritePointEvent = function (ev) {\r\n        if (this.target.disabled || this.target.isTemplate) {\r\n            return;\r\n        }\r\n        // TODO remove this <any> later\r\n        if (this.target.events.isEnabled(ev.type)) {\r\n            var imev = $object.merge(ev, {\r\n                target: this.target,\r\n                spritePoint: ev.point ? $utils.documentPointToSprite(ev.point, this.target) : undefined,\r\n                svgPoint: this.target.getSvgPoint(ev.point)\r\n            });\r\n            this.target.events.dispatchImmediately(imev.type, imev);\r\n        }\r\n    };\r\n    /**\r\n     * [_addInteractionObjectEvent description]\r\n     *\r\n     * @todo Description\r\n     */\r\n    SpriteEventDispatcher.prototype._addInteractionObjectEvent = function (type, callback, context, shouldClone) {\r\n        var _this = this;\r\n        var key = shouldClone + \"-\" + type;\r\n        var counter = this._interactionEvents.insertKeyIfEmpty(key, function () {\r\n            var disposer = _this.target.interactions.events.on(type, callback, context, shouldClone);\r\n            return new CounterDisposer(function () {\r\n                _this._interactionEvents.removeKey(key);\r\n                disposer.dispose();\r\n            });\r\n        });\r\n        return counter.increment();\r\n    };\r\n    /**\r\n     * [_on description]\r\n     *\r\n     * @todo Description\r\n     */\r\n    SpriteEventDispatcher.prototype._on = function (once, type, callback, context, shouldClone, dispatch) {\r\n        var info = _super.prototype._on.call(this, once, type, callback, context, shouldClone, dispatch);\r\n        var disposers = [info.disposer];\r\n        /**\r\n         * Catching Sprite-related events, converting them to [[SpriteEvent]] and\r\n         * triggering them on sprite\r\n         */\r\n        switch (type) {\r\n            case \"hit\":\r\n            case \"track\":\r\n            case \"doublehit\":\r\n            case \"wheel\":\r\n            case \"wheelup\":\r\n            case \"wheeldown\":\r\n            case \"wheelleft\":\r\n            case \"wheelright\":\r\n                disposers.push(this._addInteractionObjectEvent(type, this._dispatchSpritePointEvent, this, shouldClone));\r\n                break;\r\n            case \"rightclick\":\r\n            case \"down\":\r\n            //case \"hold\":\r\n            case \"up\":\r\n            case \"drag\":\r\n            case \"dragged\":\r\n            case \"dragstart\":\r\n            case \"dragstop\":\r\n            case \"over\":\r\n            case \"out\":\r\n            case \"swipe\":\r\n            case \"swipeleft\":\r\n            case \"swiperight\":\r\n            case \"resize\":\r\n            //case \"rotate\":\r\n            case \"focus\":\r\n            case \"blur\":\r\n            case \"toggled\":\r\n                disposers.push(this._addInteractionObjectEvent(type, this._dispatchSpriteEvent, this, shouldClone));\r\n                break;\r\n        }\r\n        /**\r\n         * Set functional properties based on events. For example if we add a\r\n         * \"drag\" event handler, we want to make the Sprite draggable, even if we\r\n         * don't explicitly set \"draggable\"\r\n         */\r\n        switch (type) {\r\n            case \"hit\":\r\n            case \"doublehit\":\r\n            case \"rightclick\":\r\n            case \"down\":\r\n            case \"up\":\r\n                this.target.clickable = true;\r\n                break;\r\n            case \"toggled\":\r\n                this.target.togglable = true;\r\n                break;\r\n            case \"drag\":\r\n            case \"dragstart\":\r\n            case \"dragstop\":\r\n                this.target.draggable = true;\r\n                break;\r\n            case \"track\":\r\n                this.target.trackable = true;\r\n                break;\r\n            case \"resize\":\r\n                this.target.resizable = true;\r\n                break;\r\n            case \"swipe\":\r\n            case \"swipeleft\":\r\n            case \"swiperight\":\r\n                this.target.swipeable = true;\r\n                break;\r\n            case \"wheel\":\r\n            case \"wheelup\":\r\n            case \"wheeldown\":\r\n            case \"wheelleft\":\r\n            case \"wheelright\":\r\n                this.target.wheelable = true;\r\n                break;\r\n            case \"over\":\r\n                this.target.hoverable = true;\r\n            case \"out\":\r\n                this.target.hoverable = true;\r\n                break;\r\n            case \"focus\":\r\n            case \"blur\":\r\n                this.target.focusable = true;\r\n                break;\r\n        }\r\n        info.disposer = new MultiDisposer(disposers);\r\n        return info;\r\n    };\r\n    return SpriteEventDispatcher;\r\n}(TargetedEventDispatcher));\r\nexport { SpriteEventDispatcher };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}