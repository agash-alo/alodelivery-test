{"ast":null,"code":"/**\r\n * [[AMElement]] represents any SVG element and related functionality.\r\n */\nimport * as $dom from \"../utils/DOM\";\nimport * as $object from \"../utils/Object\";\nimport * as $type from \"../utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * A base class for all SVG elements. Provides low-level DOM functionality.\r\n *\r\n * All visual elements extend this class.\r\n */\nvar AMElement = /** @class */function () {\n  /**\r\n   * Constructor creates a new element or uses the one that was passed in.\r\n   *\r\n   * @param element Element reference node type\r\n   */\n  function AMElement(element) {\n    /**\r\n     * Indicates if the element was already disposed.\r\n     */\n    this._isDisposed = false;\n    /**\r\n     * Current X coordinate.\r\n     */\n    this._x = 0;\n    /**\r\n     * Current Y coordinate.\r\n     */\n    this._y = 0;\n    /**\r\n     *\r\n     */\n    this._rotationY = 0;\n    /**\r\n     *\r\n     */\n    this._rotationX = 0;\n    /**\r\n     * Current rotation.\r\n     */\n    this._rotation = 0;\n    /**\r\n     * Current scale.\r\n     */\n    this._scale = 1;\n    if (typeof element === \"string\") {\n      this.node = document.createElementNS($dom.SVGNS, element);\n    } else {\n      this.node = element;\n    }\n  }\n  /**\r\n   * Removes element's node from DOM.\r\n   */\n  AMElement.prototype.removeNode = function () {\n    if (this.node) {\n      if (this.node.parentNode) {\n        this.node.parentNode.removeChild(this.node);\n      }\n    }\n  };\n  Object.defineProperty(AMElement.prototype, \"transformString\", {\n    /**\r\n     * Returns `transform` attribute of the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Transform attribute value\r\n     */\n    get: function () {\n      if (this.node) {\n        return this._transformString;\n        /*\r\n        const value = this.node.getAttribute(\"transform\");\r\n              if (value !== null) {\r\n            return value;\r\n        }*/\n      }\n    },\n\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Appply position, rotation and scale properties via elemen's `transform`\r\n   * property\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  AMElement.prototype.transform = function () {\n    var transfromString = \"translate(\" + this._x + \",\" + this._y + \")\";\n    if (this._scale != 1) {\n      transfromString += (transfromString ? \" \" : \"\") + \"scale(\" + this._scale + \")\";\n    }\n    if (this._rotation != 0) {\n      var rotateString = \"rotate(\" + this._rotation + \")\";\n      if (this._rotationX && this._rotationY) {\n        rotateString = \"rotate(\" + this._rotation + \" \" + this._rotationX + \" \" + this._rotationY + \")\";\n      }\n      transfromString += (transfromString ? \" \" : \"\") + rotateString;\n    }\n    this._transformString = transfromString;\n    this.node.setAttribute(\"transform\", transfromString);\n  };\n  /**\r\n   * Returns bounding box of the element.\r\n   *\r\n   * ATTENTION: Bounding box calculations are extremely costly so should be\r\n   * used sparingly and cached whenever possible.\r\n   *\r\n   * @return Bounding rectangle\r\n   */\n  AMElement.prototype.getBBox = function () {\n    var bbox = {\n      width: 0,\n      height: 0,\n      x: 0,\n      y: 0\n    };\n    // FF would fail if getBBox() is called without node added to parent\n    if (this.node && this.node.parentNode) {\n      try {\n        // again for ff. TODO: check if this doesn't slow down\n        var svgbbox = this.node.getBBox();\n        bbox.x = svgbbox.x;\n        bbox.y = svgbbox.y;\n        bbox.width = svgbbox.width;\n        bbox.height = svgbbox.height;\n      } catch (err) {}\n    }\n    return bbox;\n  };\n  /**\r\n   * Moves the element to new coordinates.\r\n   *\r\n   * @param x  Target X\r\n   * @param y  Target Y\r\n   */\n  AMElement.prototype.moveTo = function (point) {\n    if (point) {\n      var x = point.x;\n      var y = point.y;\n      if (this._x != x || this._y != y) {\n        this._x = x;\n        this._y = y;\n        this.transform();\n      }\n    }\n  };\n  Object.defineProperty(AMElement.prototype, \"content\", {\n    /**\r\n     * Returns element's contents as SVG markup.\r\n     *\r\n     * @return Contents\r\n     */\n    get: function () {\n      // @todo Do not use `innerHTML` as this is not reliable and will not work on all browsers\n      return this.node.innerHTML || \"\";\n    },\n    /**\r\n     * Element's SVG contents.\r\n     *\r\n     * @param value Contents\r\n     */\n    set: function (value) {\n      // @todo Do not use `innerHTML` as this is not reliable and will not work on all browsers\n      this.node.innerHTML = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AMElement.prototype, \"textContent\", {\n    /**\r\n     * @return Text contents\r\n     */\n    get: function () {\n      return this.node.textContent || \"\";\n    },\n    /**\r\n     * Text contents of the SVG element.\r\n     *\r\n     * @param value Text contents\r\n     */\n    set: function (value) {\n      this.node.textContent = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AMElement.prototype, \"x\", {\n    /**\r\n     * @return X coordinate (px)\r\n     */\n    get: function () {\n      return this._x;\n    },\n    /**\r\n     * Element's X position in pixels.\r\n     *\r\n     * @param value  X coordinate (px)\r\n     */\n    set: function (value) {\n      if (this._x != value) {\n        this._x = value;\n        this.transform();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AMElement.prototype, \"y\", {\n    /**\r\n     * @return Y coordinate (px)\r\n     */\n    get: function () {\n      return this._y;\n    },\n    /**\r\n     * Element's Y position in pixels.\r\n     *\r\n     * @param value Y coordinate (px)\r\n     */\n    set: function (value) {\n      if (this._y != value) {\n        this._y = value;\n        this.transform();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AMElement.prototype, \"rotation\", {\n    /**\r\n     * @return Rotation\r\n     */\n    get: function () {\n      return this._rotation;\n    },\n    /**\r\n     * Element's rotation in degrees.\r\n     *\r\n     * @param value Rotation\r\n     */\n    set: function (angle) {\n      if (this._rotation != angle) {\n        this._rotation = angle;\n        this.transform();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AMElement.prototype, \"rotationX\", {\n    /**\r\n     * @ignore\r\n     */\n    get: function () {\n      return this._rotationX;\n    },\n    /**\r\n     * @ignore\r\n     */\n    set: function (x) {\n      if (this._rotationX != x) {\n        this._rotationX = x;\n        this.transform();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AMElement.prototype, \"rotationY\", {\n    /**\r\n     * @ignore\r\n     */\n    get: function () {\n      return this._rotationY;\n    },\n    /**\r\n     * @ignore\r\n     */\n    set: function (y) {\n      if (this._rotationY != y) {\n        this._rotationY = y;\n        this.transform();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AMElement.prototype, \"scale\", {\n    /**\r\n     * @return Scale\r\n     */\n    get: function () {\n      return this._scale;\n    },\n    /**\r\n     * Element's scale where 1 is original size.\r\n     *\r\n     * Setting to 0.5 will reduce element's size by 50%, 2 will make element\r\n     * twice as large, etc.\r\n     *\r\n     * @param value Scale\r\n     */\n    set: function (value) {\n      if (this._scale != value) {\n        this._scale = value;\n        this.transform();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Removes an attribute from element.\r\n   *\r\n   * @param attribute  Attribute to remove\r\n   */\n  AMElement.prototype.removeAttr = function (attribute) {\n    this.node.removeAttribute(attribute);\n  };\n  /**\r\n   * Sets a set of attributes on a element.\r\n   *\r\n   * @param attributes  An object with attribute names (key) and values\r\n   * @return The same element\r\n   */\n  AMElement.prototype.attr = function (attributes) {\n    var _this = this;\n    $object.each(attributes, function (attributeName, attributeValue) {\n      if (!$type.hasValue(attributeValue)) {\n        _this.node.removeAttribute(attributeName);\n      } else {\n        // this is for performance testing\n        //if(attributeValue == this.node.getAttribute(attributeName)){\n        //\tconsole.log(attributeName, attributeValue)\n        //}\n        _this.node.setAttribute(attributeName, attributeValue);\n      }\n    });\n    return this;\n  };\n  /**\r\n   * Returns a value of a node attribute.\r\n   *\r\n   * @param attribute  Attribute name\r\n   * @return Attribute value\r\n   */\n  AMElement.prototype.getAttr = function (attribute) {\n    return this.node.getAttribute(attribute);\n  };\n  /**\r\n   * Sets a single attribute of the element's node using namesspace.\r\n   *\r\n   * @param ns         Namespace\r\n   * @param attribute  Attribute\r\n   * @param value      Value\r\n   * @return The same element\r\n   */\n  AMElement.prototype.attrNS = function (ns, attribute, value) {\n    this.node.setAttributeNS(ns, attribute, value);\n    return this;\n  };\n  /**\r\n   * Returns a namespaced attribute value from node.\r\n   *\r\n   * @param ns         Namespace\r\n   * @param attribute  Attribute\r\n   * @return Attribute value\r\n   */\n  AMElement.prototype.getAttrNS = function (ns, attribute) {\n    return this.node.getAttributeNS(ns, attribute);\n  };\n  /**\r\n   * Removes `style` attribute from node.\r\n   *\r\n   * @param attribute  Attribute to remove\r\n   */\n  AMElement.prototype.removeStyle = function (attribute) {\n    // @todo Review because it's a bit messy and maybe not needed (pratically not used)\n    this.node.style[attribute] = null;\n    delete this.node.style[attribute];\n  };\n  /**\r\n   * Returns style attribute value.\r\n   *\r\n   * @param attribute  Style attribute value\r\n   * @return Attribute value\r\n   */\n  AMElement.prototype.getStyle = function (attribute) {\n    // @todo Review because it's a bit messy and maybe not needed (pratically not used)\n    return this.node.style[attribute];\n  };\n  /**\r\n   * Adds style attributes to element's node.\r\n   *\r\n   * @param attributes  Object containing attribute: value pairs\r\n   * @return The same element\r\n   */\n  AMElement.prototype.addStyle = function (attributes) {\n    var _this = this;\n    // @todo Review because it's a bit messy and maybe not needed (pratically not used)\n    $object.each(attributes, function (attributeName, attributeValue) {\n      if (!$type.hasValue(attributeValue)) {\n        _this.removeStyle(attributeName);\n      } else {\n        _this.node.style[attributeName] = attributeValue;\n      }\n    });\n    return this;\n  };\n  /**\r\n   * Adds a class to element.\r\n   *\r\n   * @param name  Class name\r\n   */\n  AMElement.prototype.addClass = function (name) {\n    $dom.addClass(this.node, name);\n  };\n  /**\r\n   * Removes a class from element.\r\n   *\r\n   * @param name Class name\r\n   */\n  AMElement.prototype.removeClass = function (name) {\n    $dom.removeClass(this.node, name);\n  };\n  /**\r\n   * Sets a class name on element.\r\n   *\r\n   * @param name  Class name\r\n   */\n  AMElement.prototype.setClass = function (name) {\n    this.node.setAttribute(\"class\", name);\n  };\n  /**\r\n   * Removes all element's child nodes, basically leaving it empty.\r\n   */\n  AMElement.prototype.removeChildNodes = function () {\n    // remove all children\n    while (this.node.childNodes.length > 0) {\n      this.node.removeChild(this.node.firstChild);\n    }\n  };\n  /**\r\n   * Was this element already been disposed?\r\n   *\r\n   * @return Disposed?\r\n   */\n  AMElement.prototype.isDisposed = function () {\n    return this._isDisposed;\n  };\n  /**\r\n   * Disposes element.\r\n   */\n  AMElement.prototype.dispose = function () {\n    this.removeNode();\n  };\n  return AMElement;\n}();\nexport { AMElement };","map":{"version":3,"names":["$dom","$object","$type","AMElement","element","_isDisposed","_x","_y","_rotationY","_rotationX","_rotation","_scale","node","document","createElementNS","SVGNS","prototype","removeNode","parentNode","removeChild","Object","defineProperty","get","_transformString","enumerable","configurable","transform","transfromString","rotateString","setAttribute","getBBox","bbox","width","height","x","y","svgbbox","err","moveTo","point","innerHTML","set","value","textContent","angle","removeAttr","attribute","removeAttribute","attr","attributes","_this","each","attributeName","attributeValue","hasValue","getAttr","getAttribute","attrNS","ns","setAttributeNS","getAttrNS","getAttributeNS","removeStyle","style","getStyle","addStyle","addClass","name","removeClass","setClass","removeChildNodes","childNodes","length","firstChild","isDisposed","dispose"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/rendering/AMElement.js"],"sourcesContent":["/**\r\n * [[AMElement]] represents any SVG element and related functionality.\r\n */\r\nimport * as $dom from \"../utils/DOM\";\r\nimport * as $object from \"../utils/Object\";\r\nimport * as $type from \"../utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A base class for all SVG elements. Provides low-level DOM functionality.\r\n *\r\n * All visual elements extend this class.\r\n */\r\nvar AMElement = /** @class */ (function () {\r\n    /**\r\n     * Constructor creates a new element or uses the one that was passed in.\r\n     *\r\n     * @param element Element reference node type\r\n     */\r\n    function AMElement(element) {\r\n        /**\r\n         * Indicates if the element was already disposed.\r\n         */\r\n        this._isDisposed = false;\r\n        /**\r\n         * Current X coordinate.\r\n         */\r\n        this._x = 0;\r\n        /**\r\n         * Current Y coordinate.\r\n         */\r\n        this._y = 0;\r\n        /**\r\n         *\r\n         */\r\n        this._rotationY = 0;\r\n        /**\r\n         *\r\n         */\r\n        this._rotationX = 0;\r\n        /**\r\n         * Current rotation.\r\n         */\r\n        this._rotation = 0;\r\n        /**\r\n         * Current scale.\r\n         */\r\n        this._scale = 1;\r\n        if (typeof element === \"string\") {\r\n            this.node = document.createElementNS($dom.SVGNS, element);\r\n        }\r\n        else {\r\n            this.node = element;\r\n        }\r\n    }\r\n    /**\r\n     * Removes element's node from DOM.\r\n     */\r\n    AMElement.prototype.removeNode = function () {\r\n        if (this.node) {\r\n            if (this.node.parentNode) {\r\n                this.node.parentNode.removeChild(this.node);\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(AMElement.prototype, \"transformString\", {\r\n        /**\r\n         * Returns `transform` attribute of the element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return Transform attribute value\r\n         */\r\n        get: function () {\r\n            if (this.node) {\r\n                return this._transformString;\r\n                /*\r\n                const value = this.node.getAttribute(\"transform\");\r\n    \r\n                if (value !== null) {\r\n                    return value;\r\n                }*/\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Appply position, rotation and scale properties via elemen's `transform`\r\n     * property\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AMElement.prototype.transform = function () {\r\n        var transfromString = \"translate(\" + this._x + \",\" + this._y + \")\";\r\n        if (this._scale != 1) {\r\n            transfromString += ((transfromString ? \" \" : \"\") + \"scale(\" + this._scale + \")\");\r\n        }\r\n        if (this._rotation != 0) {\r\n            var rotateString = \"rotate(\" + this._rotation + \")\";\r\n            if (this._rotationX && this._rotationY) {\r\n                rotateString = \"rotate(\" + this._rotation + \" \" + this._rotationX + \" \" + this._rotationY + \")\";\r\n            }\r\n            transfromString += ((transfromString ? \" \" : \"\") + rotateString);\r\n        }\r\n        this._transformString = transfromString;\r\n        this.node.setAttribute(\"transform\", transfromString);\r\n    };\r\n    /**\r\n     * Returns bounding box of the element.\r\n     *\r\n     * ATTENTION: Bounding box calculations are extremely costly so should be\r\n     * used sparingly and cached whenever possible.\r\n     *\r\n     * @return Bounding rectangle\r\n     */\r\n    AMElement.prototype.getBBox = function () {\r\n        var bbox = {\r\n            width: 0,\r\n            height: 0,\r\n            x: 0,\r\n            y: 0\r\n        };\r\n        // FF would fail if getBBox() is called without node added to parent\r\n        if (this.node && this.node.parentNode) {\r\n            try { // again for ff. TODO: check if this doesn't slow down\r\n                var svgbbox = this.node.getBBox();\r\n                bbox.x = svgbbox.x;\r\n                bbox.y = svgbbox.y;\r\n                bbox.width = svgbbox.width;\r\n                bbox.height = svgbbox.height;\r\n            }\r\n            catch (err) { }\r\n        }\r\n        return bbox;\r\n    };\r\n    /**\r\n     * Moves the element to new coordinates.\r\n     *\r\n     * @param x  Target X\r\n     * @param y  Target Y\r\n     */\r\n    AMElement.prototype.moveTo = function (point) {\r\n        if (point) {\r\n            var x = point.x;\r\n            var y = point.y;\r\n            if (this._x != x || this._y != y) {\r\n                this._x = x;\r\n                this._y = y;\r\n                this.transform();\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(AMElement.prototype, \"content\", {\r\n        /**\r\n         * Returns element's contents as SVG markup.\r\n         *\r\n         * @return Contents\r\n         */\r\n        get: function () {\r\n            // @todo Do not use `innerHTML` as this is not reliable and will not work on all browsers\r\n            return this.node.innerHTML || \"\";\r\n        },\r\n        /**\r\n         * Element's SVG contents.\r\n         *\r\n         * @param value Contents\r\n         */\r\n        set: function (value) {\r\n            // @todo Do not use `innerHTML` as this is not reliable and will not work on all browsers\r\n            this.node.innerHTML = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AMElement.prototype, \"textContent\", {\r\n        /**\r\n         * @return Text contents\r\n         */\r\n        get: function () {\r\n            return this.node.textContent || \"\";\r\n        },\r\n        /**\r\n         * Text contents of the SVG element.\r\n         *\r\n         * @param value Text contents\r\n         */\r\n        set: function (value) {\r\n            this.node.textContent = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AMElement.prototype, \"x\", {\r\n        /**\r\n         * @return X coordinate (px)\r\n         */\r\n        get: function () {\r\n            return this._x;\r\n        },\r\n        /**\r\n         * Element's X position in pixels.\r\n         *\r\n         * @param value  X coordinate (px)\r\n         */\r\n        set: function (value) {\r\n            if (this._x != value) {\r\n                this._x = value;\r\n                this.transform();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AMElement.prototype, \"y\", {\r\n        /**\r\n         * @return Y coordinate (px)\r\n         */\r\n        get: function () {\r\n            return this._y;\r\n        },\r\n        /**\r\n         * Element's Y position in pixels.\r\n         *\r\n         * @param value Y coordinate (px)\r\n         */\r\n        set: function (value) {\r\n            if (this._y != value) {\r\n                this._y = value;\r\n                this.transform();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AMElement.prototype, \"rotation\", {\r\n        /**\r\n         * @return Rotation\r\n         */\r\n        get: function () {\r\n            return this._rotation;\r\n        },\r\n        /**\r\n         * Element's rotation in degrees.\r\n         *\r\n         * @param value Rotation\r\n         */\r\n        set: function (angle) {\r\n            if (this._rotation != angle) {\r\n                this._rotation = angle;\r\n                this.transform();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AMElement.prototype, \"rotationX\", {\r\n        /**\r\n         * @ignore\r\n         */\r\n        get: function () {\r\n            return this._rotationX;\r\n        },\r\n        /**\r\n         * @ignore\r\n         */\r\n        set: function (x) {\r\n            if (this._rotationX != x) {\r\n                this._rotationX = x;\r\n                this.transform();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AMElement.prototype, \"rotationY\", {\r\n        /**\r\n         * @ignore\r\n         */\r\n        get: function () {\r\n            return this._rotationY;\r\n        },\r\n        /**\r\n         * @ignore\r\n         */\r\n        set: function (y) {\r\n            if (this._rotationY != y) {\r\n                this._rotationY = y;\r\n                this.transform();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AMElement.prototype, \"scale\", {\r\n        /**\r\n         * @return Scale\r\n         */\r\n        get: function () {\r\n            return this._scale;\r\n        },\r\n        /**\r\n         * Element's scale where 1 is original size.\r\n         *\r\n         * Setting to 0.5 will reduce element's size by 50%, 2 will make element\r\n         * twice as large, etc.\r\n         *\r\n         * @param value Scale\r\n         */\r\n        set: function (value) {\r\n            if (this._scale != value) {\r\n                this._scale = value;\r\n                this.transform();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Removes an attribute from element.\r\n     *\r\n     * @param attribute  Attribute to remove\r\n     */\r\n    AMElement.prototype.removeAttr = function (attribute) {\r\n        this.node.removeAttribute(attribute);\r\n    };\r\n    /**\r\n     * Sets a set of attributes on a element.\r\n     *\r\n     * @param attributes  An object with attribute names (key) and values\r\n     * @return The same element\r\n     */\r\n    AMElement.prototype.attr = function (attributes) {\r\n        var _this = this;\r\n        $object.each(attributes, function (attributeName, attributeValue) {\r\n            if (!$type.hasValue(attributeValue)) {\r\n                _this.node.removeAttribute(attributeName);\r\n            }\r\n            else {\r\n                // this is for performance testing\r\n                //if(attributeValue == this.node.getAttribute(attributeName)){\r\n                //\tconsole.log(attributeName, attributeValue)\r\n                //}\r\n                _this.node.setAttribute(attributeName, attributeValue);\r\n            }\r\n        });\r\n        return this;\r\n    };\r\n    /**\r\n     * Returns a value of a node attribute.\r\n     *\r\n     * @param attribute  Attribute name\r\n     * @return Attribute value\r\n     */\r\n    AMElement.prototype.getAttr = function (attribute) {\r\n        return this.node.getAttribute(attribute);\r\n    };\r\n    /**\r\n     * Sets a single attribute of the element's node using namesspace.\r\n     *\r\n     * @param ns         Namespace\r\n     * @param attribute  Attribute\r\n     * @param value      Value\r\n     * @return The same element\r\n     */\r\n    AMElement.prototype.attrNS = function (ns, attribute, value) {\r\n        this.node.setAttributeNS(ns, attribute, value);\r\n        return this;\r\n    };\r\n    /**\r\n     * Returns a namespaced attribute value from node.\r\n     *\r\n     * @param ns         Namespace\r\n     * @param attribute  Attribute\r\n     * @return Attribute value\r\n     */\r\n    AMElement.prototype.getAttrNS = function (ns, attribute) {\r\n        return this.node.getAttributeNS(ns, attribute);\r\n    };\r\n    /**\r\n     * Removes `style` attribute from node.\r\n     *\r\n     * @param attribute  Attribute to remove\r\n     */\r\n    AMElement.prototype.removeStyle = function (attribute) {\r\n        // @todo Review because it's a bit messy and maybe not needed (pratically not used)\r\n        this.node.style[attribute] = null;\r\n        delete this.node.style[attribute];\r\n    };\r\n    /**\r\n     * Returns style attribute value.\r\n     *\r\n     * @param attribute  Style attribute value\r\n     * @return Attribute value\r\n     */\r\n    AMElement.prototype.getStyle = function (attribute) {\r\n        // @todo Review because it's a bit messy and maybe not needed (pratically not used)\r\n        return this.node.style[attribute];\r\n    };\r\n    /**\r\n     * Adds style attributes to element's node.\r\n     *\r\n     * @param attributes  Object containing attribute: value pairs\r\n     * @return The same element\r\n     */\r\n    AMElement.prototype.addStyle = function (attributes) {\r\n        var _this = this;\r\n        // @todo Review because it's a bit messy and maybe not needed (pratically not used)\r\n        $object.each(attributes, function (attributeName, attributeValue) {\r\n            if (!$type.hasValue(attributeValue)) {\r\n                _this.removeStyle(attributeName);\r\n            }\r\n            else {\r\n                _this.node.style[attributeName] = attributeValue;\r\n            }\r\n        });\r\n        return this;\r\n    };\r\n    /**\r\n     * Adds a class to element.\r\n     *\r\n     * @param name  Class name\r\n     */\r\n    AMElement.prototype.addClass = function (name) {\r\n        $dom.addClass(this.node, name);\r\n    };\r\n    /**\r\n     * Removes a class from element.\r\n     *\r\n     * @param name Class name\r\n     */\r\n    AMElement.prototype.removeClass = function (name) {\r\n        $dom.removeClass(this.node, name);\r\n    };\r\n    /**\r\n     * Sets a class name on element.\r\n     *\r\n     * @param name  Class name\r\n     */\r\n    AMElement.prototype.setClass = function (name) {\r\n        this.node.setAttribute(\"class\", name);\r\n    };\r\n    /**\r\n     * Removes all element's child nodes, basically leaving it empty.\r\n     */\r\n    AMElement.prototype.removeChildNodes = function () {\r\n        // remove all children\r\n        while (this.node.childNodes.length > 0) {\r\n            this.node.removeChild(this.node.firstChild);\r\n        }\r\n    };\r\n    /**\r\n     * Was this element already been disposed?\r\n     *\r\n     * @return Disposed?\r\n     */\r\n    AMElement.prototype.isDisposed = function () {\r\n        return this._isDisposed;\r\n    };\r\n    /**\r\n     * Disposes element.\r\n     */\r\n    AMElement.prototype.dispose = function () {\r\n        this.removeNode();\r\n    };\r\n    return AMElement;\r\n}());\r\nexport { AMElement };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}