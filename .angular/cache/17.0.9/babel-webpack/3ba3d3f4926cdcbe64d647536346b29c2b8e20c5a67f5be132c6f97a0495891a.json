{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Sprite } from \"../../core/Sprite\";\nimport { registry } from \"../../core/Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * AxisFill is a base class used to defines fill shapes for various\r\n * type-specific Axes.\r\n *\r\n * Axis fills are used to add fills to specific ranges of those axes.\r\n *\r\n * @see {@link IAxisFillEvents} for a list of available events\r\n * @see {@link IAxisFillAdapters} for a list of available Adapters\r\n * @important\r\n */\nvar AxisFill = /** @class */function (_super) {\n  __extends(AxisFill, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param axis Axis\r\n   */\n  function AxisFill(axis) {\n    var _this = _super.call(this) || this;\n    _this.axis = axis;\n    _this.element = _this.paper.add(\"path\");\n    _this.className = \"AxisFill\";\n    _this.isMeasured = false;\n    _this.location = 0;\n    _this.above = false;\n    var interfaceColors = new InterfaceColorSet();\n    _this.fill = interfaceColors.getFor(\"alternativeBackground\");\n    _this.fillOpacity = 0;\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * @ignore\r\n   */\n  AxisFill.prototype.setDisabled = function (value) {\n    var changed = _super.prototype.setDisabled.call(this, value);\n    if (this.axis) {\n      this.axis.invalidateDataItems();\n    }\n    return changed;\n  };\n  /**\r\n   * Draws the fill element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  AxisFill.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n    if (this.__disabled || this.disabled) {\n      return;\n    }\n    if (this.axis && $type.isNumber(this.startPosition) && $type.isNumber(this.endPosition)) {\n      this.fillPath = this.axis.getPositionRangePath(this.startPosition, this.endPosition);\n      this.path = this.fillPath;\n      if (this.isMeasured) {\n        this.measure();\n      }\n    }\n  };\n  Object.defineProperty(AxisFill.prototype, \"startPosition\", {\n    /**\r\n     * @return Start position\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startPosition\");\n    },\n    /**\r\n     * An actual starting position of the fill.\r\n     *\r\n     * @param value  Starting position\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"startPosition\", value);\n      this.invalidate(); // this is needed as relative position might not change when zooming\n    },\n\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisFill.prototype, \"endPosition\", {\n    /**\r\n     * @return End position\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endPosition\");\n    },\n    /**\r\n     * An actual end position of the fill.\r\n     *\r\n     * @param value End position\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"endPosition\", value);\n      this.invalidate(); // this is needed as relative position might not change when zooming\n    },\n\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisFill.prototype, \"location\", {\n    /**\r\n     * @return Location (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"location\");\n    },\n    /**\r\n     * Relative location of the fill. (0-1)\r\n     *\r\n     * @param value Location (0-1)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"location\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n  AxisFill.prototype.setPath = function (value) {\n    if (this.setPropertyValue(\"path\", value)) {\n      this.element.attr({\n        \"d\": value\n      });\n      return true;\n    }\n    return false;\n  };\n  Object.defineProperty(AxisFill.prototype, \"above\", {\n    /**\r\n     * @return Draw above series?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"above\");\n    },\n    /**\r\n     * Normally fill goes below series. Set this to `true` to go above.\r\n     *\r\n     * @default false\r\n     * @since 4.5.9\r\n     * @param  value  Draw above series?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"above\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return AxisFill;\n}(Sprite);\nexport { AxisFill };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"AxisFill\"] = AxisFill;","map":{"version":3,"names":["__extends","Sprite","registry","InterfaceColorSet","$type","AxisFill","_super","axis","_this","call","element","paper","add","className","isMeasured","location","above","interfaceColors","fill","getFor","fillOpacity","applyTheme","prototype","setDisabled","value","changed","invalidateDataItems","draw","__disabled","disabled","isNumber","startPosition","endPosition","fillPath","getPositionRangePath","path","measure","Object","defineProperty","get","getPropertyValue","set","setPropertyValue","invalidate","enumerable","configurable","setPath","attr","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/charts/axes/AxisFill.js"],"sourcesContent":["import { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * AxisFill is a base class used to defines fill shapes for various\r\n * type-specific Axes.\r\n *\r\n * Axis fills are used to add fills to specific ranges of those axes.\r\n *\r\n * @see {@link IAxisFillEvents} for a list of available events\r\n * @see {@link IAxisFillAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar AxisFill = /** @class */ (function (_super) {\r\n    __extends(AxisFill, _super);\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param axis Axis\r\n     */\r\n    function AxisFill(axis) {\r\n        var _this = _super.call(this) || this;\r\n        _this.axis = axis;\r\n        _this.element = _this.paper.add(\"path\");\r\n        _this.className = \"AxisFill\";\r\n        _this.isMeasured = false;\r\n        _this.location = 0;\r\n        _this.above = false;\r\n        var interfaceColors = new InterfaceColorSet();\r\n        _this.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n        _this.fillOpacity = 0;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    AxisFill.prototype.setDisabled = function (value) {\r\n        var changed = _super.prototype.setDisabled.call(this, value);\r\n        if (this.axis) {\r\n            this.axis.invalidateDataItems();\r\n        }\r\n        return changed;\r\n    };\r\n    /**\r\n     * Draws the fill element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisFill.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        if (this.__disabled || this.disabled) {\r\n            return;\r\n        }\r\n        if (this.axis && $type.isNumber(this.startPosition) && $type.isNumber(this.endPosition)) {\r\n            this.fillPath = this.axis.getPositionRangePath(this.startPosition, this.endPosition);\r\n            this.path = this.fillPath;\r\n            if (this.isMeasured) {\r\n                this.measure();\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(AxisFill.prototype, \"startPosition\", {\r\n        /**\r\n         * @return Start position\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startPosition\");\r\n        },\r\n        /**\r\n         * An actual starting position of the fill.\r\n         *\r\n         * @param value  Starting position\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"startPosition\", value);\r\n            this.invalidate(); // this is needed as relative position might not change when zooming\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisFill.prototype, \"endPosition\", {\r\n        /**\r\n         * @return End position\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endPosition\");\r\n        },\r\n        /**\r\n         * An actual end position of the fill.\r\n         *\r\n         * @param value End position\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"endPosition\", value);\r\n            this.invalidate(); // this is needed as relative position might not change when zooming\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisFill.prototype, \"location\", {\r\n        /**\r\n         * @return Location (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"location\");\r\n        },\r\n        /**\r\n         * Relative location of the fill. (0-1)\r\n         *\r\n         * @param value Location (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"location\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    AxisFill.prototype.setPath = function (value) {\r\n        if (this.setPropertyValue(\"path\", value)) {\r\n            this.element.attr({ \"d\": value });\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    Object.defineProperty(AxisFill.prototype, \"above\", {\r\n        /**\r\n         * @return Draw above series?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"above\");\r\n        },\r\n        /**\r\n         * Normally fill goes below series. Set this to `true` to go above.\r\n         *\r\n         * @default false\r\n         * @since 4.5.9\r\n         * @param  value  Draw above series?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"above\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return AxisFill;\r\n}(Sprite));\r\nexport { AxisFill };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFill\"] = AxisFill;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}