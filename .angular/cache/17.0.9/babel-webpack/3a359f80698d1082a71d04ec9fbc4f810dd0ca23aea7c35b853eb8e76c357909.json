{"ast":null,"code":"/**\r\n * Sankey diagram module.\r\n */\nimport { __extends, __read, __spread } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { FlowDiagram, FlowDiagramDataItem } from \"./FlowDiagram\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../../core/Registry\";\nimport { SankeyNode } from \"../elements/SankeyNode\";\nimport { SankeyLink } from \"../elements/SankeyLink\";\nimport { Animation } from \"../../core/utils/Animation\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $object from \"../../core/utils/Object\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n//@todo rearange notes after dragged\n/**\r\n * Defines a [[DataItem]] for [[SankeyDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar SankeyDiagramDataItem = /** @class */function (_super) {\n  __extends(SankeyDiagramDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function SankeyDiagramDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"SankeyDiagramDataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  return SankeyDiagramDataItem;\n}(FlowDiagramDataItem);\nexport { SankeyDiagramDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Creates a Sankey Diagram chart.\r\n *\r\n * @see {@link ISankeyDiagramEvents} for a list of available Events\r\n * @see {@link ISankeyDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sankey-diagram/} for documentation\r\n * @important\r\n */\nvar SankeyDiagram = /** @class */function (_super) {\n  __extends(SankeyDiagram, _super);\n  /**\r\n   * Constructor\r\n   */\n  function SankeyDiagram() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    _this.className = \"SankeyDiagram\";\n    _this.orientation = \"horizontal\";\n    _this.nodeAlign = \"middle\";\n    _this.nodesContainer.width = percent(100);\n    _this.nodesContainer.height = percent(100);\n    _this.linksContainer.width = percent(100);\n    _this.linksContainer.height = percent(100);\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * (Re)validates chart's data, effectively causing the chart to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  SankeyDiagram.prototype.validateData = function () {\n    var _this = this;\n    this._valueHeight = undefined;\n    _super.prototype.validateData.call(this);\n    this._levelCount = 0;\n    this.nodes.each(function (key, node) {\n      node.level = undefined;\n    });\n    this.nodes.each(function (key, node) {\n      node.level = _this.getNodeLevel(node, 0);\n      _this._levelCount = $math.max(_this._levelCount, node.level);\n    });\n  };\n  /**\r\n   * Returns node's highest level.\r\n   *\r\n   * @param node   Node\r\n   * @param level  Current level\r\n   * @return New level\r\n   */\n  SankeyDiagram.prototype.getNodeLevel = function (node, level) {\n    var _this = this;\n    var levels = [level];\n    $iter.each(node.incomingDataItems.iterator(), function (link) {\n      if (link.fromNode) {\n        if ($type.isNumber(link.fromNode.level)) {\n          levels.push(link.fromNode.level + 1);\n        } else {\n          _this._counter = 0;\n          _this.checkLoop(link.fromNode);\n          if (_this._counter < _this.dataItems.length) {\n            levels.push(_this.getNodeLevel(link.fromNode, level + 1));\n          }\n        }\n      }\n    });\n    return Math.max.apply(Math, __spread(levels));\n  };\n  /**\r\n   * Checks if there's no loop in the ancestor chain.\r\n   *\r\n   * @param  node  Node\r\n   */\n  SankeyDiagram.prototype.checkLoop = function (node) {\n    var _this = this;\n    this._counter++;\n    if (this._counter > this.dataItems.length) {\n      return;\n    }\n    $iter.each(node.incomingDataItems.iterator(), function (link) {\n      _this.checkLoop(link.fromNode);\n    });\n  };\n  /**\r\n   * Calculates relation between pixel height and total value.\r\n   *\r\n   * In Sankey the actual thickness of links and height of nodes will depend\r\n   * on their values.\r\n   */\n  SankeyDiagram.prototype.calculateValueHeight = function () {\n    var _this = this;\n    // calculate sums of each level\n    this._levelSum = {};\n    this._levelNodesCount = {};\n    this.maxSum = 0;\n    var total = this.dataItem.values.value.sum;\n    $iter.each(this._sorted, function (strNode) {\n      var node = strNode[1];\n      _this.getNodeValue(node);\n    });\n    this.nodes.each(function (key, node) {\n      var level = node.level;\n      var value = Math.max(node.totalIncoming, node.totalOutgoing);\n      if (value / total < _this.minNodeSize) {\n        value = total * _this.minNodeSize;\n      }\n      if ($type.isNumber(_this._levelSum[level])) {\n        _this._levelSum[level] += value;\n      } else {\n        _this._levelSum[level] = value;\n      }\n      if ($type.isNumber(_this._levelNodesCount[level])) {\n        _this._levelNodesCount[level]++;\n      } else {\n        _this._levelNodesCount[level] = 1;\n      }\n    });\n    var availableHeight;\n    if (this.orientation == \"horizontal\") {\n      availableHeight = this.chartContainer.maxHeight - 1;\n    } else {\n      availableHeight = this.chartContainer.maxWidth - 1;\n    }\n    var maxSumLevel;\n    var minHeight;\n    $object.each(this._levelSum, function (key, value) {\n      var realValue = value;\n      var levelNodeCount = _this._levelNodesCount[key];\n      var valueHeight = (availableHeight - (levelNodeCount - 1) * _this.nodePadding) / realValue;\n      if (valueHeight == Infinity) {\n        valueHeight = 0;\n      }\n      if (minHeight > valueHeight || !$type.isNumber(minHeight)) {\n        minHeight = valueHeight;\n        _this.maxSum = realValue;\n        maxSumLevel = $type.toNumber(key);\n      }\n    });\n    this._maxSumLevel = maxSumLevel;\n    var maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\n    var valueHeight = (availableHeight - (maxSumLevelNodeCount - 1) * this.nodePadding) / this.maxSum;\n    if (valueHeight == Infinity) {\n      valueHeight = 0;\n    }\n    if (!$type.isNumber(this.valueHeight)) {\n      this.valueHeight = valueHeight;\n    } else {\n      var finalHeight = void 0;\n      try {\n        finalHeight = this._heightAnimation.animationOptions[0].to;\n      } catch (err) {}\n      // without animations it will be non-smooth as maxValue jumps from one column to another\n      if (finalHeight != valueHeight) {\n        var duration = this.interpolationDuration;\n        try {\n          duration = this.nodes.template.states.getKey(\"active\").transitionDuration;\n        } catch (err) {}\n        this._heightAnimation = new Animation(this, {\n          property: \"valueHeight\",\n          from: this.valueHeight,\n          to: valueHeight\n        }, duration, this.interpolationEasing).start();\n        this._disposers.push(this._heightAnimation);\n      }\n    }\n  };\n  /**\r\n   * Redraws the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  SankeyDiagram.prototype.validate = function () {\n    var _this = this;\n    _super.prototype.validate.call(this);\n    this.calculateValueHeight();\n    var container = this.nodesContainer;\n    var nextCoordinate = {};\n    var maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\n    var total = this.dataItem.values.value.sum;\n    var availableHeight;\n    if (this.orientation == \"horizontal\") {\n      availableHeight = this.chartContainer.maxHeight - 1;\n    } else {\n      availableHeight = this.chartContainer.maxWidth - 1;\n    }\n    $iter.each(this._sorted, function (strNode) {\n      var node = strNode[1];\n      var level = node.level;\n      var levelCoordinate = 0;\n      var nodeCount = _this._levelNodesCount[level];\n      switch (_this.nodeAlign) {\n        case \"bottom\":\n          levelCoordinate = (_this.maxSum - _this._levelSum[level]) * _this.valueHeight - (nodeCount - maxSumLevelNodeCount) * _this.nodePadding;\n          break;\n        case \"middle\":\n          levelCoordinate = (_this.maxSum - _this._levelSum[level]) * _this.valueHeight / 2 - (nodeCount - maxSumLevelNodeCount) * _this.nodePadding / 2;\n          break;\n      }\n      if (_this.maxSum == 0) {\n        switch (_this.nodeAlign) {\n          case \"bottom\":\n            levelCoordinate = availableHeight - nodeCount * (_this.minNodeSize * availableHeight + _this.nodePadding);\n            break;\n          case \"middle\":\n            levelCoordinate = availableHeight / 2 - nodeCount / 2 * (_this.minNodeSize * availableHeight + _this.nodePadding);\n            break;\n        }\n      }\n      node.parent = container;\n      var delta;\n      var x;\n      var y;\n      var value = Math.max(node.totalIncoming, node.totalOutgoing);\n      if (value / total < _this.minNodeSize) {\n        value = total * _this.minNodeSize;\n      }\n      if (_this.orientation == \"horizontal\") {\n        delta = (_this.innerWidth - node.pixelWidth) / _this._levelCount;\n        x = delta * node.level;\n        y = nextCoordinate[level] || levelCoordinate;\n        var h = value * _this.valueHeight;\n        if (total == 0 && h == 0) {\n          h = _this.minNodeSize * availableHeight;\n        }\n        node.height = h;\n        node.minX = x;\n        node.maxX = x;\n        nextCoordinate[level] = y + h + _this.nodePadding;\n      } else {\n        delta = (_this.innerHeight - node.pixelHeight) / _this._levelCount;\n        x = nextCoordinate[level] || levelCoordinate;\n        y = delta * node.level;\n        var w = value * _this.valueHeight;\n        if (total == 0 && w == 0) {\n          w = _this.minNodeSize * availableHeight;\n        }\n        node.width = w;\n        node.minY = y;\n        node.maxY = y;\n        nextCoordinate[level] = x + w + _this.nodePadding;\n      }\n      node.x = x;\n      node.y = y;\n    });\n  };\n  /**\r\n   * Performs actual operations to reveal this element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param duration Fade in duration (ms)\r\n   * @return Fade in duration (ms)\r\n   */\n  SankeyDiagram.prototype.showReal = function (duration) {\n    var _this = this;\n    if (this.preventShow) {\n      return;\n    }\n    if (this.interpolationDuration > 0) {\n      var container_1 = this.nodesContainer;\n      var i_1 = 0;\n      $iter.each(this.links.iterator(), function (link) {\n        link.hide(0);\n      });\n      $iter.each(this._sorted, function (strNode) {\n        var node = strNode[1];\n        var property;\n        if (_this.orientation == \"horizontal\") {\n          node.dx = -(container_1.pixelWidth - node.pixelWidth) / Math.max(_this._levelCount, 1);\n          property = \"dx\";\n        } else {\n          node.dy = -(container_1.pixelHeight - node.pixelHeight) / Math.max(_this._levelCount, 1);\n          property = \"dy\";\n        }\n        var delay = 0;\n        var duration = _this.interpolationDuration;\n        if (_this.sequencedInterpolation) {\n          delay = _this.sequencedInterpolationDelay * i_1 + duration * i_1 / $iter.length(_this.nodes.iterator());\n        }\n        node.opacity = 0;\n        node.invalidateLinks();\n        node.animate([{\n          property: \"opacity\",\n          from: 0,\n          to: 1\n        }, {\n          property: property,\n          to: 0\n        }], _this.interpolationDuration, _this.interpolationEasing).delay(delay);\n        $iter.each(node.outgoingDataItems.iterator(), function (dataItem) {\n          var animation = dataItem.link.show(_this.interpolationDuration);\n          if (animation && !animation.isFinished()) {\n            animation.delay(delay);\n          }\n        });\n        $iter.each(node.incomingDataItems.iterator(), function (dataItem) {\n          if (!dataItem.fromNode) {\n            var animation = dataItem.link.show(_this.interpolationDuration);\n            if (animation && !animation.isFinished()) {\n              animation.delay(delay);\n            }\n          }\n        });\n        i_1++;\n      });\n    }\n    return _super.prototype.showReal.call(this);\n  };\n  /**\r\n   * Changes the sort type of the nodes.\r\n   *\r\n   * This will actually reshuffle nodes using nice animation.\r\n   */\n  SankeyDiagram.prototype.changeSorting = function () {\n    var _this = this;\n    this.sortNodes();\n    var nextCoordinate = {};\n    $iter.each(this._sorted, function (strNode) {\n      var node = strNode[1];\n      var level = node.level;\n      var levelCoordinate = (_this.maxSum - _this._levelSum[level]) * _this.valueHeight / 2;\n      var property;\n      var nodeHeight;\n      if (_this.orientation == \"horizontal\") {\n        property = \"y\";\n        nodeHeight = node.pixelHeight;\n      } else {\n        property = \"x\";\n        nodeHeight = node.pixelWidth;\n      }\n      node.animate({\n        property: property,\n        to: nextCoordinate[level] || levelCoordinate\n      }, _this.interpolationDuration, _this.interpolationEasing);\n      nextCoordinate[level] = (nextCoordinate[level] || levelCoordinate) + nodeHeight + _this.nodePadding;\n      node.invalidateLinks();\n    });\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n  SankeyDiagram.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n    // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Sankey diagram\");\n    }\n  };\n  /**\r\n   * Creates and returns a new data item.\r\n   *\r\n   * @return Data item\r\n   */\n  SankeyDiagram.prototype.createDataItem = function () {\n    return new SankeyDiagramDataItem();\n  };\n  Object.defineProperty(SankeyDiagram.prototype, \"nodeAlign\", {\n    /**\r\n     * @returns Returns nodeAlign value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"nodeAlign\");\n    },\n    /**\r\n     * How to align nodes. In case layout is vertical, top means left and bottom means right\r\n     *\r\n     * @param value  Node sorting\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"nodeAlign\", value);\n      this.changeSorting();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SankeyDiagram.prototype, \"orientation\", {\n    /**\r\n     * @return Orientation\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"orientation\");\n    },\n    /**\r\n     * Orientation of the chart: \"horizontal\" or \"vertical\";\r\n     *\r\n     * @param value Orientation\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"orientation\", value, true);\n      var nameLabel = this.nodes.template.nameLabel;\n      if (value == \"vertical\") {\n        this.nodes.template.width = undefined;\n        nameLabel.label.horizontalCenter = \"middle\";\n        nameLabel.locationX = 0.5;\n      } else {\n        this.nodes.template.height = undefined;\n        nameLabel.label.horizontalCenter = \"left\";\n        nameLabel.locationX = 1;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n  SankeyDiagram.prototype.createNode = function () {\n    var node = new SankeyNode();\n    this._disposers.push(node);\n    return node;\n  };\n  /**\r\n   * @ignore\r\n   */\n  SankeyDiagram.prototype.createLink = function () {\n    var link = new SankeyLink();\n    this._disposers.push(link);\n    return link;\n  };\n  Object.defineProperty(SankeyDiagram.prototype, \"valueHeight\", {\n    /**\r\n     * @ignore\r\n     */\n    get: function () {\n      return this._valueHeight;\n    },\n    /**\r\n     * @ignore\r\n     */\n    set: function (value) {\n      if (value != this._valueHeight) {\n        this._valueHeight = value;\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n  SankeyDiagram.prototype.disposeData = function () {\n    _super.prototype.disposeData.call(this);\n    this._sorted = this.nodes.iterator();\n  };\n  return SankeyDiagram;\n}(FlowDiagram);\nexport { SankeyDiagram };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"SankeyDiagram\"] = SankeyDiagram;","map":{"version":3,"names":["__extends","__read","__spread","FlowDiagram","FlowDiagramDataItem","percent","registry","SankeyNode","SankeyLink","Animation","$iter","$math","$type","$object","SankeyDiagramDataItem","_super","_this","call","className","applyTheme","SankeyDiagram","orientation","nodeAlign","nodesContainer","width","height","linksContainer","prototype","validateData","_valueHeight","undefined","_levelCount","nodes","each","key","node","level","getNodeLevel","max","levels","incomingDataItems","iterator","link","fromNode","isNumber","push","_counter","checkLoop","dataItems","length","Math","apply","calculateValueHeight","_levelSum","_levelNodesCount","maxSum","total","dataItem","values","value","sum","_sorted","strNode","getNodeValue","totalIncoming","totalOutgoing","minNodeSize","availableHeight","chartContainer","maxHeight","maxWidth","maxSumLevel","minHeight","realValue","levelNodeCount","valueHeight","nodePadding","Infinity","toNumber","_maxSumLevel","maxSumLevelNodeCount","finalHeight","_heightAnimation","animationOptions","to","err","duration","interpolationDuration","template","states","getKey","transitionDuration","property","from","interpolationEasing","start","_disposers","validate","container","nextCoordinate","levelCoordinate","nodeCount","parent","delta","x","y","innerWidth","pixelWidth","h","minX","maxX","innerHeight","pixelHeight","w","minY","maxY","showReal","preventShow","container_1","i_1","links","hide","dx","dy","delay","sequencedInterpolation","sequencedInterpolationDelay","opacity","invalidateLinks","animate","outgoingDataItems","animation","show","isFinished","changeSorting","sortNodes","nodeHeight","applyInternalDefaults","hasValue","readerTitle","language","translate","createDataItem","Object","defineProperty","get","getPropertyValue","set","setPropertyValue","enumerable","configurable","nameLabel","label","horizontalCenter","locationX","createNode","createLink","invalidate","disposeData","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/charts/types/SankeyDiagram.js"],"sourcesContent":["/**\r\n * Sankey diagram module.\r\n */\r\nimport { __extends, __read, __spread } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagram, FlowDiagramDataItem } from \"./FlowDiagram\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { SankeyNode } from \"../elements/SankeyNode\";\r\nimport { SankeyLink } from \"../elements/SankeyLink\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n//@todo rearange notes after dragged\r\n/**\r\n * Defines a [[DataItem]] for [[SankeyDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar SankeyDiagramDataItem = /** @class */ (function (_super) {\r\n    __extends(SankeyDiagramDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function SankeyDiagramDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"SankeyDiagramDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return SankeyDiagramDataItem;\r\n}(FlowDiagramDataItem));\r\nexport { SankeyDiagramDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a Sankey Diagram chart.\r\n *\r\n * @see {@link ISankeyDiagramEvents} for a list of available Events\r\n * @see {@link ISankeyDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sankey-diagram/} for documentation\r\n * @important\r\n */\r\nvar SankeyDiagram = /** @class */ (function (_super) {\r\n    __extends(SankeyDiagram, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function SankeyDiagram() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"SankeyDiagram\";\r\n        _this.orientation = \"horizontal\";\r\n        _this.nodeAlign = \"middle\";\r\n        _this.nodesContainer.width = percent(100);\r\n        _this.nodesContainer.height = percent(100);\r\n        _this.linksContainer.width = percent(100);\r\n        _this.linksContainer.height = percent(100);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * (Re)validates chart's data, effectively causing the chart to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    SankeyDiagram.prototype.validateData = function () {\r\n        var _this = this;\r\n        this._valueHeight = undefined;\r\n        _super.prototype.validateData.call(this);\r\n        this._levelCount = 0;\r\n        this.nodes.each(function (key, node) {\r\n            node.level = undefined;\r\n        });\r\n        this.nodes.each(function (key, node) {\r\n            node.level = _this.getNodeLevel(node, 0);\r\n            _this._levelCount = $math.max(_this._levelCount, node.level);\r\n        });\r\n    };\r\n    /**\r\n     * Returns node's highest level.\r\n     *\r\n     * @param node   Node\r\n     * @param level  Current level\r\n     * @return New level\r\n     */\r\n    SankeyDiagram.prototype.getNodeLevel = function (node, level) {\r\n        var _this = this;\r\n        var levels = [level];\r\n        $iter.each(node.incomingDataItems.iterator(), function (link) {\r\n            if (link.fromNode) {\r\n                if ($type.isNumber(link.fromNode.level)) {\r\n                    levels.push(link.fromNode.level + 1);\r\n                }\r\n                else {\r\n                    _this._counter = 0;\r\n                    _this.checkLoop(link.fromNode);\r\n                    if (_this._counter < _this.dataItems.length) {\r\n                        levels.push(_this.getNodeLevel(link.fromNode, level + 1));\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return Math.max.apply(Math, __spread(levels));\r\n    };\r\n    /**\r\n     * Checks if there's no loop in the ancestor chain.\r\n     *\r\n     * @param  node  Node\r\n     */\r\n    SankeyDiagram.prototype.checkLoop = function (node) {\r\n        var _this = this;\r\n        this._counter++;\r\n        if (this._counter > this.dataItems.length) {\r\n            return;\r\n        }\r\n        $iter.each(node.incomingDataItems.iterator(), function (link) {\r\n            _this.checkLoop(link.fromNode);\r\n        });\r\n    };\r\n    /**\r\n     * Calculates relation between pixel height and total value.\r\n     *\r\n     * In Sankey the actual thickness of links and height of nodes will depend\r\n     * on their values.\r\n     */\r\n    SankeyDiagram.prototype.calculateValueHeight = function () {\r\n        var _this = this;\r\n        // calculate sums of each level\r\n        this._levelSum = {};\r\n        this._levelNodesCount = {};\r\n        this.maxSum = 0;\r\n        var total = this.dataItem.values.value.sum;\r\n        $iter.each(this._sorted, function (strNode) {\r\n            var node = strNode[1];\r\n            _this.getNodeValue(node);\r\n        });\r\n        this.nodes.each(function (key, node) {\r\n            var level = node.level;\r\n            var value = Math.max(node.totalIncoming, node.totalOutgoing);\r\n            if (value / total < _this.minNodeSize) {\r\n                value = total * _this.minNodeSize;\r\n            }\r\n            if ($type.isNumber(_this._levelSum[level])) {\r\n                _this._levelSum[level] += value;\r\n            }\r\n            else {\r\n                _this._levelSum[level] = value;\r\n            }\r\n            if ($type.isNumber(_this._levelNodesCount[level])) {\r\n                _this._levelNodesCount[level]++;\r\n            }\r\n            else {\r\n                _this._levelNodesCount[level] = 1;\r\n            }\r\n        });\r\n        var availableHeight;\r\n        if (this.orientation == \"horizontal\") {\r\n            availableHeight = this.chartContainer.maxHeight - 1;\r\n        }\r\n        else {\r\n            availableHeight = this.chartContainer.maxWidth - 1;\r\n        }\r\n        var maxSumLevel;\r\n        var minHeight;\r\n        $object.each(this._levelSum, function (key, value) {\r\n            var realValue = value;\r\n            var levelNodeCount = _this._levelNodesCount[key];\r\n            var valueHeight = (availableHeight - (levelNodeCount - 1) * _this.nodePadding) / realValue;\r\n            if (valueHeight == Infinity) {\r\n                valueHeight = 0;\r\n            }\r\n            if (minHeight > valueHeight || !$type.isNumber(minHeight)) {\r\n                minHeight = valueHeight;\r\n                _this.maxSum = realValue;\r\n                maxSumLevel = $type.toNumber(key);\r\n            }\r\n        });\r\n        this._maxSumLevel = maxSumLevel;\r\n        var maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\r\n        var valueHeight = (availableHeight - (maxSumLevelNodeCount - 1) * this.nodePadding) / this.maxSum;\r\n        if (valueHeight == Infinity) {\r\n            valueHeight = 0;\r\n        }\r\n        if (!$type.isNumber(this.valueHeight)) {\r\n            this.valueHeight = valueHeight;\r\n        }\r\n        else {\r\n            var finalHeight = void 0;\r\n            try {\r\n                finalHeight = this._heightAnimation.animationOptions[0].to;\r\n            }\r\n            catch (err) {\r\n            }\r\n            // without animations it will be non-smooth as maxValue jumps from one column to another\r\n            if (finalHeight != valueHeight) {\r\n                var duration = this.interpolationDuration;\r\n                try {\r\n                    duration = this.nodes.template.states.getKey(\"active\").transitionDuration;\r\n                }\r\n                catch (err) {\r\n                }\r\n                this._heightAnimation = new Animation(this, { property: \"valueHeight\", from: this.valueHeight, to: valueHeight }, duration, this.interpolationEasing).start();\r\n                this._disposers.push(this._heightAnimation);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Redraws the chart.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    SankeyDiagram.prototype.validate = function () {\r\n        var _this = this;\r\n        _super.prototype.validate.call(this);\r\n        this.calculateValueHeight();\r\n        var container = this.nodesContainer;\r\n        var nextCoordinate = {};\r\n        var maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\r\n        var total = this.dataItem.values.value.sum;\r\n        var availableHeight;\r\n        if (this.orientation == \"horizontal\") {\r\n            availableHeight = this.chartContainer.maxHeight - 1;\r\n        }\r\n        else {\r\n            availableHeight = this.chartContainer.maxWidth - 1;\r\n        }\r\n        $iter.each(this._sorted, function (strNode) {\r\n            var node = strNode[1];\r\n            var level = node.level;\r\n            var levelCoordinate = 0;\r\n            var nodeCount = _this._levelNodesCount[level];\r\n            switch (_this.nodeAlign) {\r\n                case \"bottom\":\r\n                    levelCoordinate = (_this.maxSum - _this._levelSum[level]) * _this.valueHeight - (nodeCount - maxSumLevelNodeCount) * _this.nodePadding;\r\n                    break;\r\n                case \"middle\":\r\n                    levelCoordinate = (_this.maxSum - _this._levelSum[level]) * _this.valueHeight / 2 - (nodeCount - maxSumLevelNodeCount) * _this.nodePadding / 2;\r\n                    break;\r\n            }\r\n            if (_this.maxSum == 0) {\r\n                switch (_this.nodeAlign) {\r\n                    case \"bottom\":\r\n                        levelCoordinate = availableHeight - nodeCount * (_this.minNodeSize * availableHeight + _this.nodePadding);\r\n                        break;\r\n                    case \"middle\":\r\n                        levelCoordinate = availableHeight / 2 - nodeCount / 2 * (_this.minNodeSize * availableHeight + _this.nodePadding);\r\n                        break;\r\n                }\r\n            }\r\n            node.parent = container;\r\n            var delta;\r\n            var x;\r\n            var y;\r\n            var value = Math.max(node.totalIncoming, node.totalOutgoing);\r\n            if (value / total < _this.minNodeSize) {\r\n                value = total * _this.minNodeSize;\r\n            }\r\n            if (_this.orientation == \"horizontal\") {\r\n                delta = (_this.innerWidth - node.pixelWidth) / _this._levelCount;\r\n                x = delta * node.level;\r\n                y = nextCoordinate[level] || levelCoordinate;\r\n                var h = value * _this.valueHeight;\r\n                if (total == 0 && h == 0) {\r\n                    h = _this.minNodeSize * availableHeight;\r\n                }\r\n                node.height = h;\r\n                node.minX = x;\r\n                node.maxX = x;\r\n                nextCoordinate[level] = y + h + _this.nodePadding;\r\n            }\r\n            else {\r\n                delta = (_this.innerHeight - node.pixelHeight) / _this._levelCount;\r\n                x = nextCoordinate[level] || levelCoordinate;\r\n                y = delta * node.level;\r\n                var w = value * _this.valueHeight;\r\n                if (total == 0 && w == 0) {\r\n                    w = _this.minNodeSize * availableHeight;\r\n                }\r\n                node.width = w;\r\n                node.minY = y;\r\n                node.maxY = y;\r\n                nextCoordinate[level] = x + w + _this.nodePadding;\r\n            }\r\n            node.x = x;\r\n            node.y = y;\r\n        });\r\n    };\r\n    /**\r\n     * Performs actual operations to reveal this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param duration Fade in duration (ms)\r\n     * @return Fade in duration (ms)\r\n     */\r\n    SankeyDiagram.prototype.showReal = function (duration) {\r\n        var _this = this;\r\n        if (this.preventShow) {\r\n            return;\r\n        }\r\n        if (this.interpolationDuration > 0) {\r\n            var container_1 = this.nodesContainer;\r\n            var i_1 = 0;\r\n            $iter.each(this.links.iterator(), function (link) {\r\n                link.hide(0);\r\n            });\r\n            $iter.each(this._sorted, function (strNode) {\r\n                var node = strNode[1];\r\n                var property;\r\n                if (_this.orientation == \"horizontal\") {\r\n                    node.dx = -(container_1.pixelWidth - node.pixelWidth) / Math.max(_this._levelCount, 1);\r\n                    property = \"dx\";\r\n                }\r\n                else {\r\n                    node.dy = -(container_1.pixelHeight - node.pixelHeight) / Math.max(_this._levelCount, 1);\r\n                    property = \"dy\";\r\n                }\r\n                var delay = 0;\r\n                var duration = _this.interpolationDuration;\r\n                if (_this.sequencedInterpolation) {\r\n                    delay = _this.sequencedInterpolationDelay * i_1 + duration * i_1 / $iter.length(_this.nodes.iterator());\r\n                }\r\n                node.opacity = 0;\r\n                node.invalidateLinks();\r\n                node.animate([{ property: \"opacity\", from: 0, to: 1 }, { property: property, to: 0 }], _this.interpolationDuration, _this.interpolationEasing).delay(delay);\r\n                $iter.each(node.outgoingDataItems.iterator(), function (dataItem) {\r\n                    var animation = dataItem.link.show(_this.interpolationDuration);\r\n                    if (animation && !animation.isFinished()) {\r\n                        animation.delay(delay);\r\n                    }\r\n                });\r\n                $iter.each(node.incomingDataItems.iterator(), function (dataItem) {\r\n                    if (!dataItem.fromNode) {\r\n                        var animation = dataItem.link.show(_this.interpolationDuration);\r\n                        if (animation && !animation.isFinished()) {\r\n                            animation.delay(delay);\r\n                        }\r\n                    }\r\n                });\r\n                i_1++;\r\n            });\r\n        }\r\n        return _super.prototype.showReal.call(this);\r\n    };\r\n    /**\r\n     * Changes the sort type of the nodes.\r\n     *\r\n     * This will actually reshuffle nodes using nice animation.\r\n     */\r\n    SankeyDiagram.prototype.changeSorting = function () {\r\n        var _this = this;\r\n        this.sortNodes();\r\n        var nextCoordinate = {};\r\n        $iter.each(this._sorted, function (strNode) {\r\n            var node = strNode[1];\r\n            var level = node.level;\r\n            var levelCoordinate = (_this.maxSum - _this._levelSum[level]) * _this.valueHeight / 2;\r\n            var property;\r\n            var nodeHeight;\r\n            if (_this.orientation == \"horizontal\") {\r\n                property = \"y\";\r\n                nodeHeight = node.pixelHeight;\r\n            }\r\n            else {\r\n                property = \"x\";\r\n                nodeHeight = node.pixelWidth;\r\n            }\r\n            node.animate({ property: property, to: nextCoordinate[level] || levelCoordinate }, _this.interpolationDuration, _this.interpolationEasing);\r\n            nextCoordinate[level] = (nextCoordinate[level] || levelCoordinate) + nodeHeight + _this.nodePadding;\r\n            node.invalidateLinks();\r\n        });\r\n    };\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    SankeyDiagram.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        // Add a default screen reader title for accessibility\r\n        // This will be overridden in screen reader if there are any `titles` set\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Sankey diagram\");\r\n        }\r\n    };\r\n    /**\r\n     * Creates and returns a new data item.\r\n     *\r\n     * @return Data item\r\n     */\r\n    SankeyDiagram.prototype.createDataItem = function () {\r\n        return new SankeyDiagramDataItem();\r\n    };\r\n    Object.defineProperty(SankeyDiagram.prototype, \"nodeAlign\", {\r\n        /**\r\n         * @returns Returns nodeAlign value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"nodeAlign\");\r\n        },\r\n        /**\r\n         * How to align nodes. In case layout is vertical, top means left and bottom means right\r\n         *\r\n         * @param value  Node sorting\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"nodeAlign\", value);\r\n            this.changeSorting();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SankeyDiagram.prototype, \"orientation\", {\r\n        /**\r\n         * @return Orientation\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"orientation\");\r\n        },\r\n        /**\r\n         * Orientation of the chart: \"horizontal\" or \"vertical\";\r\n         *\r\n         * @param value Orientation\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"orientation\", value, true);\r\n            var nameLabel = this.nodes.template.nameLabel;\r\n            if (value == \"vertical\") {\r\n                this.nodes.template.width = undefined;\r\n                nameLabel.label.horizontalCenter = \"middle\";\r\n                nameLabel.locationX = 0.5;\r\n            }\r\n            else {\r\n                this.nodes.template.height = undefined;\r\n                nameLabel.label.horizontalCenter = \"left\";\r\n                nameLabel.locationX = 1;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    SankeyDiagram.prototype.createNode = function () {\r\n        var node = new SankeyNode();\r\n        this._disposers.push(node);\r\n        return node;\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    SankeyDiagram.prototype.createLink = function () {\r\n        var link = new SankeyLink();\r\n        this._disposers.push(link);\r\n        return link;\r\n    };\r\n    Object.defineProperty(SankeyDiagram.prototype, \"valueHeight\", {\r\n        /**\r\n         * @ignore\r\n         */\r\n        get: function () {\r\n            return this._valueHeight;\r\n        },\r\n        /**\r\n         * @ignore\r\n         */\r\n        set: function (value) {\r\n            if (value != this._valueHeight) {\r\n                this._valueHeight = value;\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    SankeyDiagram.prototype.disposeData = function () {\r\n        _super.prototype.disposeData.call(this);\r\n        this._sorted = this.nodes.iterator();\r\n    };\r\n    return SankeyDiagram;\r\n}(FlowDiagram));\r\nexport { SankeyDiagram };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyDiagram\"] = SankeyDiagram;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}