{"ast":null,"code":"import { CdkAccordionItem, CdkAccordion, CdkAccordionModule } from '@angular/cdk/accordion';\nimport { TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, TemplateRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, SkipSelf, Inject, ChangeDetectorRef, ViewContainerRef, Input, Output, ContentChild, ViewChild, Host, ElementRef, QueryList, ContentChildren, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { FocusMonitor, FocusKeyManager } from '@angular/cdk/a11y';\nimport { distinctUntilChanged, startWith, filter, take } from 'rxjs/operators';\nimport { ENTER, hasModifierKey, SPACE } from '@angular/cdk/keycodes';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, Subscription, EMPTY, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nconst MAT_ACCORDION = new InjectionToken('MAT_ACCORDION');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time and timing curve for expansion panel animations. */\n// Note: Keep this in sync with the Sass variable for the panel header animation.\nconst EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nconst matExpansionAnimations = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [state('collapsed, void', style({\n    transform: 'rotate(0deg)'\n  })), state('expanded', style({\n    transform: 'rotate(180deg)'\n  })), transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING))]),\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [state('collapsed, void', style({\n    height: '0px',\n    visibility: 'hidden'\n  })), state('expanded', style({\n    height: '*',\n    visibility: 'visible'\n  })), transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING))])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\nclass MatExpansionPanelContent {\n  constructor(_template) {\n    this._template = _template;\n  }\n}\nMatExpansionPanelContent.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'ng-template[matExpansionPanelContent]'\n  }]\n}];\nMatExpansionPanelContent.ctorParameters = () => [{\n  type: TemplateRef\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nconst MAT_EXPANSION_PANEL_DEFAULT_OPTIONS = new InjectionToken('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\nconst Éµ0 = undefined;\n/**\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\nclass MatExpansionPanel extends CdkAccordionItem {\n  constructor(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, _document, _animationMode, defaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this._viewContainerRef = _viewContainerRef;\n    this._animationMode = _animationMode;\n    this._hideToggle = false;\n    /** An event emitted after the body's expansion animation happens. */\n    this.afterExpand = new EventEmitter();\n    /** An event emitted after the body's collapse animation happens. */\n    this.afterCollapse = new EventEmitter();\n    /** Stream that emits for changes in `@Input` properties. */\n    this._inputChanges = new Subject();\n    /** ID for the associated header element. Used for a11y labelling. */\n    this._headerId = `mat-expansion-panel-header-${uniqueId++}`;\n    /** Stream of body animation done events. */\n    this._bodyAnimationDone = new Subject();\n    this.accordion = accordion;\n    this._document = _document;\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n  /** Whether the toggle indicator should be hidden. */\n  get hideToggle() {\n    return this._hideToggle || this.accordion && this.accordion.hideToggle;\n  }\n  set hideToggle(value) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  /** The position of the expansion indicator. */\n  get togglePosition() {\n    return this._togglePosition || this.accordion && this.accordion.togglePosition;\n  }\n  set togglePosition(value) {\n    this._togglePosition = value;\n  }\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing() {\n    if (this.accordion) {\n      return this.expanded && this.accordion.displayMode === 'default';\n    }\n    return false;\n  }\n  /** Gets the expanded state string. */\n  _getExpandedState() {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n  /** Toggles the expanded state of the expansion panel. */\n  toggle() {\n    this.expanded = !this.expanded;\n  }\n  /** Sets the expanded state of the expansion panel to false. */\n  close() {\n    this.expanded = false;\n  }\n  /** Sets the expanded state of the expansion panel to true. */\n  open() {\n    this.expanded = true;\n  }\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(startWith(null), filter(() => this.expanded && !this._portal), take(1)).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n  ngOnChanges(changes) {\n    this._inputChanges.next(changes);\n  }\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus() {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n    return false;\n  }\n}\nMatExpansionPanel.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-expansion-panel',\n    exportAs: 'matExpansionPanel',\n    template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content>\\n<div class=\\\"mat-expansion-panel-content\\\"\\n     role=\\\"region\\\"\\n     [@bodyExpansion]=\\\"_getExpandedState()\\\"\\n     (@bodyExpansion.done)=\\\"_bodyAnimationDone.next($event)\\\"\\n     [attr.aria-labelledby]=\\\"_headerId\\\"\\n     [id]=\\\"id\\\"\\n     #body>\\n  <div class=\\\"mat-expansion-panel-body\\\">\\n    <ng-content></ng-content>\\n    <ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template>\\n  </div>\\n  <ng-content select=\\\"mat-action-row\\\"></ng-content>\\n</div>\\n\",\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled', 'expanded'],\n    outputs: ['opened', 'closed', 'expandedChange'],\n    animations: [matExpansionAnimations.bodyExpansion],\n    providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {\n      provide: MAT_ACCORDION,\n      useValue: Éµ0\n    }],\n    host: {\n      'class': 'mat-expansion-panel',\n      '[class.mat-expanded]': 'expanded',\n      '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n      '[class.mat-expansion-panel-spacing]': '_hasSpacing()'\n    },\n    styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button-base,.mat-action-row button.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button-base,[dir=rtl] .mat-action-row button.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"]\n  }]\n}];\nMatExpansionPanel.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: SkipSelf\n  }, {\n    type: Inject,\n    args: [MAT_ACCORDION]\n  }]\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: UniqueSelectionDispatcher\n}, {\n  type: ViewContainerRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n  }, {\n    type: Optional\n  }]\n}];\nMatExpansionPanel.propDecorators = {\n  hideToggle: [{\n    type: Input\n  }],\n  togglePosition: [{\n    type: Input\n  }],\n  afterExpand: [{\n    type: Output\n  }],\n  afterCollapse: [{\n    type: Output\n  }],\n  _lazyContent: [{\n    type: ContentChild,\n    args: [MatExpansionPanelContent]\n  }],\n  _body: [{\n    type: ViewChild,\n    args: ['body']\n  }]\n};\n/**\n * Actions of a `<mat-expansion-panel>`.\n */\nclass MatExpansionPanelActionRow {}\nMatExpansionPanelActionRow.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-action-row',\n    host: {\n      class: 'mat-action-row'\n    }\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Header element of a `<mat-expansion-panel>`.\n */\nclass MatExpansionPanelHeader {\n  constructor(panel, _element, _focusMonitor, _changeDetectorRef, defaultOptions, _animationMode) {\n    this.panel = panel;\n    this._element = _element;\n    this._focusMonitor = _focusMonitor;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._animationMode = _animationMode;\n    this._parentChangeSubscription = Subscription.EMPTY;\n    const accordionHideToggleChange = panel.accordion ? panel.accordion._stateChanges.pipe(filter(changes => !!(changes['hideToggle'] || changes['togglePosition']))) : EMPTY;\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(panel.opened, panel.closed, accordionHideToggleChange, panel._inputChanges.pipe(filter(changes => {\n      return !!(changes['hideToggle'] || changes['disabled'] || changes['togglePosition']);\n    }))).subscribe(() => this._changeDetectorRef.markForCheck());\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed.pipe(filter(() => panel._containsFocus())).subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n  /** Toggles the expanded state of the panel. */\n  _toggle() {\n    if (!this.disabled) {\n      this.panel.toggle();\n    }\n  }\n  /** Gets whether the panel is expanded. */\n  _isExpanded() {\n    return this.panel.expanded;\n  }\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState() {\n    return this.panel._getExpandedState();\n  }\n  /** Gets the panel id. */\n  _getPanelId() {\n    return this.panel.id;\n  }\n  /** Gets the toggle position for the header. */\n  _getTogglePosition() {\n    return this.panel.togglePosition;\n  }\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle() {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n  /**\n   * Gets the current height of the header. Null if no custom height has been\n   * specified, and if the default height from the stylesheet should be used.\n   */\n  _getHeaderHeight() {\n    const isExpanded = this._isExpanded();\n    if (isExpanded && this.expandedHeight) {\n      return this.expandedHeight;\n    } else if (!isExpanded && this.collapsedHeight) {\n      return this.collapsedHeight;\n    }\n    return null;\n  }\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n        return;\n    }\n  }\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin, options) {\n    if (origin) {\n      this._focusMonitor.focusVia(this._element, origin, options);\n    } else {\n      this._element.nativeElement.focus(options);\n    }\n  }\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._element).subscribe(origin => {\n      if (origin && this.panel.accordion) {\n        this.panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\nMatExpansionPanelHeader.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-expansion-panel-header',\n    template: \"<span class=\\\"mat-content\\\">\\n  <ng-content select=\\\"mat-panel-title\\\"></ng-content>\\n  <ng-content select=\\\"mat-panel-description\\\"></ng-content>\\n  <ng-content></ng-content>\\n</span>\\n<span [@indicatorRotate]=\\\"_getExpandedState()\\\" *ngIf=\\\"_showToggle()\\\"\\n      class=\\\"mat-expansion-indicator\\\"></span>\\n\",\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [matExpansionAnimations.indicatorRotate],\n    host: {\n      'class': 'mat-expansion-panel-header mat-focus-indicator',\n      'role': 'button',\n      '[attr.id]': 'panel._headerId',\n      '[attr.tabindex]': 'disabled ? -1 : 0',\n      '[attr.aria-controls]': '_getPanelId()',\n      '[attr.aria-expanded]': '_isExpanded()',\n      '[attr.aria-disabled]': 'panel.disabled',\n      '[class.mat-expanded]': '_isExpanded()',\n      '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n      '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n      '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n      '[style.height]': '_getHeaderHeight()',\n      '(click)': '_toggle()',\n      '(keydown)': '_keydown($event)'\n    },\n    styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-keyboard-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-program-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:hover:not([aria-disabled=true])::before{top:0;left:0;right:0;bottom:0;position:absolute;box-sizing:border-box;pointer-events:none;border:3px solid;border-radius:4px;content:\\\"\\\"}\\n\"]\n  }]\n}];\nMatExpansionPanelHeader.ctorParameters = () => [{\n  type: MatExpansionPanel,\n  decorators: [{\n    type: Host\n  }]\n}, {\n  type: ElementRef\n}, {\n  type: FocusMonitor\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n  }, {\n    type: Optional\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}];\nMatExpansionPanelHeader.propDecorators = {\n  expandedHeight: [{\n    type: Input\n  }],\n  collapsedHeight: [{\n    type: Input\n  }]\n};\n/**\n * Description element of a `<mat-expansion-panel-header>`.\n */\nclass MatExpansionPanelDescription {}\nMatExpansionPanelDescription.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-panel-description',\n    host: {\n      class: 'mat-expansion-panel-header-description'\n    }\n  }]\n}];\n/**\n * Title element of a `<mat-expansion-panel-header>`.\n */\nclass MatExpansionPanelTitle {}\nMatExpansionPanelTitle.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-panel-title',\n    host: {\n      class: 'mat-expansion-panel-header-title'\n    }\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive for a Material Design Accordion.\n */\nclass MatAccordion extends CdkAccordion {\n  constructor() {\n    super(...arguments);\n    /** Headers belonging to this accordion. */\n    this._ownHeaders = new QueryList();\n    this._hideToggle = false;\n    /**\n     * Display mode used for all expansion panels in the accordion. Currently two display\n     * modes exist:\n     *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n     *     panel at a different elevation from the rest of the accordion.\n     *  flat - no spacing is placed around expanded panels, showing all panels at the same\n     *     elevation.\n     */\n    this.displayMode = 'default';\n    /** The position of the expansion indicator. */\n    this.togglePosition = 'after';\n  }\n  /** Whether the expansion indicator should be hidden. */\n  get hideToggle() {\n    return this._hideToggle;\n  }\n  set hideToggle(show) {\n    this._hideToggle = coerceBooleanProperty(show);\n  }\n  ngAfterContentInit() {\n    this._headers.changes.pipe(startWith(this._headers)).subscribe(headers => {\n      this._ownHeaders.reset(headers.filter(header => header.panel.accordion === this));\n      this._ownHeaders.notifyOnChanges();\n    });\n    this._keyManager = new FocusKeyManager(this._ownHeaders).withWrap().withHomeAndEnd();\n  }\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event) {\n    this._keyManager.onKeydown(event);\n  }\n  _handleHeaderFocus(header) {\n    this._keyManager.updateActiveItem(header);\n  }\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._ownHeaders.destroy();\n  }\n}\nMatAccordion.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-accordion',\n    exportAs: 'matAccordion',\n    inputs: ['multi'],\n    providers: [{\n      provide: MAT_ACCORDION,\n      useExisting: MatAccordion\n    }],\n    host: {\n      class: 'mat-accordion',\n      // Class binding which is only used by the test harness as there is no other\n      // way for the harness to detect if multiple panel support is enabled.\n      '[class.mat-accordion-multi]': 'this.multi'\n    }\n  }]\n}];\nMatAccordion.propDecorators = {\n  _headers: [{\n    type: ContentChildren,\n    args: [MatExpansionPanelHeader, {\n      descendants: true\n    }]\n  }],\n  hideToggle: [{\n    type: Input\n  }],\n  displayMode: [{\n    type: Input\n  }],\n  togglePosition: [{\n    type: Input\n  }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatExpansionModule {}\nMatExpansionModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule, MatCommonModule, CdkAccordionModule, PortalModule],\n    exports: [MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelTitle, MatExpansionPanelDescription, MatExpansionPanelContent],\n    declarations: [MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelTitle, MatExpansionPanelDescription, MatExpansionPanelContent]\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { EXPANSION_PANEL_ANIMATION_TIMING, MAT_ACCORDION, MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, MatAccordion, MatExpansionModule, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelContent, MatExpansionPanelDescription, MatExpansionPanelHeader, MatExpansionPanelTitle, matExpansionAnimations, Éµ0 };","map":{"version":3,"names":["CdkAccordionItem","CdkAccordion","CdkAccordionModule","TemplatePortal","PortalModule","DOCUMENT","CommonModule","InjectionToken","Directive","TemplateRef","EventEmitter","Component","ViewEncapsulation","ChangeDetectionStrategy","Optional","SkipSelf","Inject","ChangeDetectorRef","ViewContainerRef","Input","Output","ContentChild","ViewChild","Host","ElementRef","QueryList","ContentChildren","NgModule","MatCommonModule","coerceBooleanProperty","FocusMonitor","FocusKeyManager","distinctUntilChanged","startWith","filter","take","ENTER","hasModifierKey","SPACE","ANIMATION_MODULE_TYPE","Subject","Subscription","EMPTY","merge","trigger","state","style","transition","animate","UniqueSelectionDispatcher","MAT_ACCORDION","EXPANSION_PANEL_ANIMATION_TIMING","matExpansionAnimations","indicatorRotate","transform","bodyExpansion","height","visibility","MatExpansionPanelContent","constructor","_template","decorators","type","args","selector","ctorParameters","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","Éµ0","undefined","MatExpansionPanel","accordion","_changeDetectorRef","_uniqueSelectionDispatcher","_viewContainerRef","_document","_animationMode","defaultOptions","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","pipe","x","y","fromState","toState","subscribe","event","emit","hideToggle","value","togglePosition","_togglePosition","_hasSpacing","expanded","displayMode","_getExpandedState","toggle","close","open","ngAfterContentInit","_lazyContent","opened","_portal","ngOnChanges","changes","next","ngOnDestroy","complete","_containsFocus","_body","focusedElement","activeElement","bodyElement","nativeElement","contains","exportAs","template","encapsulation","None","changeDetection","OnPush","inputs","outputs","animations","providers","provide","useValue","host","styles","String","propDecorators","MatExpansionPanelActionRow","class","MatExpansionPanelHeader","panel","_element","_focusMonitor","_parentChangeSubscription","accordionHideToggleChange","_stateChanges","closed","markForCheck","focusVia","expandedHeight","collapsedHeight","disabled","_toggle","_isExpanded","_getPanelId","id","_getTogglePosition","_showToggle","_getHeaderHeight","isExpanded","_keydown","keyCode","preventDefault","_handleHeaderKeydown","focus","origin","options","ngAfterViewInit","monitor","_handleHeaderFocus","unsubscribe","stopMonitoring","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","arguments","_ownHeaders","show","_headers","headers","reset","header","notifyOnChanges","_keyManager","withWrap","withHomeAndEnd","onKeydown","updateActiveItem","destroy","useExisting","descendants","MatExpansionModule","imports","exports","declarations"],"sources":["D:/alodelivery test/node_modules/@angular/material/fesm2015/expansion.js"],"sourcesContent":["import { CdkAccordionItem, CdkAccordion, CdkAccordionModule } from '@angular/cdk/accordion';\nimport { TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, TemplateRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, SkipSelf, Inject, ChangeDetectorRef, ViewContainerRef, Input, Output, ContentChild, ViewChild, Host, ElementRef, QueryList, ContentChildren, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { FocusMonitor, FocusKeyManager } from '@angular/cdk/a11y';\nimport { distinctUntilChanged, startWith, filter, take } from 'rxjs/operators';\nimport { ENTER, hasModifierKey, SPACE } from '@angular/cdk/keycodes';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, Subscription, EMPTY, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nconst MAT_ACCORDION = new InjectionToken('MAT_ACCORDION');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time and timing curve for expansion panel animations. */\n// Note: Keep this in sync with the Sass variable for the panel header animation.\nconst EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nconst matExpansionAnimations = {\n    /** Animation that rotates the indicator arrow. */\n    indicatorRotate: trigger('indicatorRotate', [\n        state('collapsed, void', style({ transform: 'rotate(0deg)' })),\n        state('expanded', style({ transform: 'rotate(180deg)' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    /** Animation that expands and collapses the panel content. */\n    bodyExpansion: trigger('bodyExpansion', [\n        state('collapsed, void', style({ height: '0px', visibility: 'hidden' })),\n        state('expanded', style({ height: '*', visibility: 'visible' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\nclass MatExpansionPanelContent {\n    constructor(_template) {\n        this._template = _template;\n    }\n}\nMatExpansionPanelContent.decorators = [\n    { type: Directive, args: [{\n                selector: 'ng-template[matExpansionPanelContent]'\n            },] }\n];\nMatExpansionPanelContent.ctorParameters = () => [\n    { type: TemplateRef }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nconst MAT_EXPANSION_PANEL_DEFAULT_OPTIONS = new InjectionToken('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\nconst Éµ0 = undefined;\n/**\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\nclass MatExpansionPanel extends CdkAccordionItem {\n    constructor(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, _document, _animationMode, defaultOptions) {\n        super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n        this._viewContainerRef = _viewContainerRef;\n        this._animationMode = _animationMode;\n        this._hideToggle = false;\n        /** An event emitted after the body's expansion animation happens. */\n        this.afterExpand = new EventEmitter();\n        /** An event emitted after the body's collapse animation happens. */\n        this.afterCollapse = new EventEmitter();\n        /** Stream that emits for changes in `@Input` properties. */\n        this._inputChanges = new Subject();\n        /** ID for the associated header element. Used for a11y labelling. */\n        this._headerId = `mat-expansion-panel-header-${uniqueId++}`;\n        /** Stream of body animation done events. */\n        this._bodyAnimationDone = new Subject();\n        this.accordion = accordion;\n        this._document = _document;\n        // We need a Subject with distinctUntilChanged, because the `done` event\n        // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n        this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n            return x.fromState === y.fromState && x.toState === y.toState;\n        })).subscribe(event => {\n            if (event.fromState !== 'void') {\n                if (event.toState === 'expanded') {\n                    this.afterExpand.emit();\n                }\n                else if (event.toState === 'collapsed') {\n                    this.afterCollapse.emit();\n                }\n            }\n        });\n        if (defaultOptions) {\n            this.hideToggle = defaultOptions.hideToggle;\n        }\n    }\n    /** Whether the toggle indicator should be hidden. */\n    get hideToggle() {\n        return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n    }\n    set hideToggle(value) {\n        this._hideToggle = coerceBooleanProperty(value);\n    }\n    /** The position of the expansion indicator. */\n    get togglePosition() {\n        return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n    }\n    set togglePosition(value) {\n        this._togglePosition = value;\n    }\n    /** Determines whether the expansion panel should have spacing between it and its siblings. */\n    _hasSpacing() {\n        if (this.accordion) {\n            return this.expanded && this.accordion.displayMode === 'default';\n        }\n        return false;\n    }\n    /** Gets the expanded state string. */\n    _getExpandedState() {\n        return this.expanded ? 'expanded' : 'collapsed';\n    }\n    /** Toggles the expanded state of the expansion panel. */\n    toggle() {\n        this.expanded = !this.expanded;\n    }\n    /** Sets the expanded state of the expansion panel to false. */\n    close() {\n        this.expanded = false;\n    }\n    /** Sets the expanded state of the expansion panel to true. */\n    open() {\n        this.expanded = true;\n    }\n    ngAfterContentInit() {\n        if (this._lazyContent) {\n            // Render the content as soon as the panel becomes open.\n            this.opened.pipe(startWith(null), filter(() => this.expanded && !this._portal), take(1)).subscribe(() => {\n                this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n            });\n        }\n    }\n    ngOnChanges(changes) {\n        this._inputChanges.next(changes);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._bodyAnimationDone.complete();\n        this._inputChanges.complete();\n    }\n    /** Checks whether the expansion panel's content contains the currently-focused element. */\n    _containsFocus() {\n        if (this._body) {\n            const focusedElement = this._document.activeElement;\n            const bodyElement = this._body.nativeElement;\n            return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n        }\n        return false;\n    }\n}\nMatExpansionPanel.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-expansion-panel',\n                exportAs: 'matExpansionPanel',\n                template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content>\\n<div class=\\\"mat-expansion-panel-content\\\"\\n     role=\\\"region\\\"\\n     [@bodyExpansion]=\\\"_getExpandedState()\\\"\\n     (@bodyExpansion.done)=\\\"_bodyAnimationDone.next($event)\\\"\\n     [attr.aria-labelledby]=\\\"_headerId\\\"\\n     [id]=\\\"id\\\"\\n     #body>\\n  <div class=\\\"mat-expansion-panel-body\\\">\\n    <ng-content></ng-content>\\n    <ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template>\\n  </div>\\n  <ng-content select=\\\"mat-action-row\\\"></ng-content>\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disabled', 'expanded'],\n                outputs: ['opened', 'closed', 'expandedChange'],\n                animations: [matExpansionAnimations.bodyExpansion],\n                providers: [\n                    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n                    // to the same accordion.\n                    { provide: MAT_ACCORDION, useValue: Éµ0 },\n                ],\n                host: {\n                    'class': 'mat-expansion-panel',\n                    '[class.mat-expanded]': 'expanded',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n                },\n                styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button-base,.mat-action-row button.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button-base,[dir=rtl] .mat-action-row button.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"]\n            },] }\n];\nMatExpansionPanel.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [MAT_ACCORDION,] }] },\n    { type: ChangeDetectorRef },\n    { type: UniqueSelectionDispatcher },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,] }, { type: Optional }] }\n];\nMatExpansionPanel.propDecorators = {\n    hideToggle: [{ type: Input }],\n    togglePosition: [{ type: Input }],\n    afterExpand: [{ type: Output }],\n    afterCollapse: [{ type: Output }],\n    _lazyContent: [{ type: ContentChild, args: [MatExpansionPanelContent,] }],\n    _body: [{ type: ViewChild, args: ['body',] }]\n};\n/**\n * Actions of a `<mat-expansion-panel>`.\n */\nclass MatExpansionPanelActionRow {\n}\nMatExpansionPanelActionRow.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-action-row',\n                host: {\n                    class: 'mat-action-row'\n                }\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Header element of a `<mat-expansion-panel>`.\n */\nclass MatExpansionPanelHeader {\n    constructor(panel, _element, _focusMonitor, _changeDetectorRef, defaultOptions, _animationMode) {\n        this.panel = panel;\n        this._element = _element;\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._animationMode = _animationMode;\n        this._parentChangeSubscription = Subscription.EMPTY;\n        const accordionHideToggleChange = panel.accordion ?\n            panel.accordion._stateChanges.pipe(filter(changes => !!(changes['hideToggle'] || changes['togglePosition']))) :\n            EMPTY;\n        // Since the toggle state depends on an @Input on the panel, we\n        // need to subscribe and trigger change detection manually.\n        this._parentChangeSubscription =\n            merge(panel.opened, panel.closed, accordionHideToggleChange, panel._inputChanges.pipe(filter(changes => {\n                return !!(changes['hideToggle'] ||\n                    changes['disabled'] ||\n                    changes['togglePosition']);\n            })))\n                .subscribe(() => this._changeDetectorRef.markForCheck());\n        // Avoids focus being lost if the panel contained the focused element and was closed.\n        panel.closed\n            .pipe(filter(() => panel._containsFocus()))\n            .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n        if (defaultOptions) {\n            this.expandedHeight = defaultOptions.expandedHeight;\n            this.collapsedHeight = defaultOptions.collapsedHeight;\n        }\n    }\n    /**\n     * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n     * @docs-private\n     */\n    get disabled() {\n        return this.panel.disabled;\n    }\n    /** Toggles the expanded state of the panel. */\n    _toggle() {\n        if (!this.disabled) {\n            this.panel.toggle();\n        }\n    }\n    /** Gets whether the panel is expanded. */\n    _isExpanded() {\n        return this.panel.expanded;\n    }\n    /** Gets the expanded state string of the panel. */\n    _getExpandedState() {\n        return this.panel._getExpandedState();\n    }\n    /** Gets the panel id. */\n    _getPanelId() {\n        return this.panel.id;\n    }\n    /** Gets the toggle position for the header. */\n    _getTogglePosition() {\n        return this.panel.togglePosition;\n    }\n    /** Gets whether the expand indicator should be shown. */\n    _showToggle() {\n        return !this.panel.hideToggle && !this.panel.disabled;\n    }\n    /**\n     * Gets the current height of the header. Null if no custom height has been\n     * specified, and if the default height from the stylesheet should be used.\n     */\n    _getHeaderHeight() {\n        const isExpanded = this._isExpanded();\n        if (isExpanded && this.expandedHeight) {\n            return this.expandedHeight;\n        }\n        else if (!isExpanded && this.collapsedHeight) {\n            return this.collapsedHeight;\n        }\n        return null;\n    }\n    /** Handle keydown event calling to toggle() if appropriate. */\n    _keydown(event) {\n        switch (event.keyCode) {\n            // Toggle for space and enter keys.\n            case SPACE:\n            case ENTER:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this._toggle();\n                }\n                break;\n            default:\n                if (this.panel.accordion) {\n                    this.panel.accordion._handleHeaderKeydown(event);\n                }\n                return;\n        }\n    }\n    /**\n     * Focuses the panel header. Implemented as a part of `FocusableOption`.\n     * @param origin Origin of the action that triggered the focus.\n     * @docs-private\n     */\n    focus(origin, options) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._element, origin, options);\n        }\n        else {\n            this._element.nativeElement.focus(options);\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._element).subscribe(origin => {\n            if (origin && this.panel.accordion) {\n                this.panel.accordion._handleHeaderFocus(this);\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._parentChangeSubscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this._element);\n    }\n}\nMatExpansionPanelHeader.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-expansion-panel-header',\n                template: \"<span class=\\\"mat-content\\\">\\n  <ng-content select=\\\"mat-panel-title\\\"></ng-content>\\n  <ng-content select=\\\"mat-panel-description\\\"></ng-content>\\n  <ng-content></ng-content>\\n</span>\\n<span [@indicatorRotate]=\\\"_getExpandedState()\\\" *ngIf=\\\"_showToggle()\\\"\\n      class=\\\"mat-expansion-indicator\\\"></span>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                animations: [\n                    matExpansionAnimations.indicatorRotate,\n                ],\n                host: {\n                    'class': 'mat-expansion-panel-header mat-focus-indicator',\n                    'role': 'button',\n                    '[attr.id]': 'panel._headerId',\n                    '[attr.tabindex]': 'disabled ? -1 : 0',\n                    '[attr.aria-controls]': '_getPanelId()',\n                    '[attr.aria-expanded]': '_isExpanded()',\n                    '[attr.aria-disabled]': 'panel.disabled',\n                    '[class.mat-expanded]': '_isExpanded()',\n                    '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n                    '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    '[style.height]': '_getHeaderHeight()',\n                    '(click)': '_toggle()',\n                    '(keydown)': '_keydown($event)',\n                },\n                styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-keyboard-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-program-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:hover:not([aria-disabled=true])::before{top:0;left:0;right:0;bottom:0;position:absolute;box-sizing:border-box;pointer-events:none;border:3px solid;border-radius:4px;content:\\\"\\\"}\\n\"]\n            },] }\n];\nMatExpansionPanelHeader.ctorParameters = () => [\n    { type: MatExpansionPanel, decorators: [{ type: Host }] },\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,] }, { type: Optional }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatExpansionPanelHeader.propDecorators = {\n    expandedHeight: [{ type: Input }],\n    collapsedHeight: [{ type: Input }]\n};\n/**\n * Description element of a `<mat-expansion-panel-header>`.\n */\nclass MatExpansionPanelDescription {\n}\nMatExpansionPanelDescription.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-panel-description',\n                host: {\n                    class: 'mat-expansion-panel-header-description'\n                }\n            },] }\n];\n/**\n * Title element of a `<mat-expansion-panel-header>`.\n */\nclass MatExpansionPanelTitle {\n}\nMatExpansionPanelTitle.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-panel-title',\n                host: {\n                    class: 'mat-expansion-panel-header-title'\n                }\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive for a Material Design Accordion.\n */\nclass MatAccordion extends CdkAccordion {\n    constructor() {\n        super(...arguments);\n        /** Headers belonging to this accordion. */\n        this._ownHeaders = new QueryList();\n        this._hideToggle = false;\n        /**\n         * Display mode used for all expansion panels in the accordion. Currently two display\n         * modes exist:\n         *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n         *     panel at a different elevation from the rest of the accordion.\n         *  flat - no spacing is placed around expanded panels, showing all panels at the same\n         *     elevation.\n         */\n        this.displayMode = 'default';\n        /** The position of the expansion indicator. */\n        this.togglePosition = 'after';\n    }\n    /** Whether the expansion indicator should be hidden. */\n    get hideToggle() { return this._hideToggle; }\n    set hideToggle(show) { this._hideToggle = coerceBooleanProperty(show); }\n    ngAfterContentInit() {\n        this._headers.changes\n            .pipe(startWith(this._headers))\n            .subscribe((headers) => {\n            this._ownHeaders.reset(headers.filter(header => header.panel.accordion === this));\n            this._ownHeaders.notifyOnChanges();\n        });\n        this._keyManager = new FocusKeyManager(this._ownHeaders).withWrap().withHomeAndEnd();\n    }\n    /** Handles keyboard events coming in from the panel headers. */\n    _handleHeaderKeydown(event) {\n        this._keyManager.onKeydown(event);\n    }\n    _handleHeaderFocus(header) {\n        this._keyManager.updateActiveItem(header);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._ownHeaders.destroy();\n    }\n}\nMatAccordion.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-accordion',\n                exportAs: 'matAccordion',\n                inputs: ['multi'],\n                providers: [{\n                        provide: MAT_ACCORDION,\n                        useExisting: MatAccordion\n                    }],\n                host: {\n                    class: 'mat-accordion',\n                    // Class binding which is only used by the test harness as there is no other\n                    // way for the harness to detect if multiple panel support is enabled.\n                    '[class.mat-accordion-multi]': 'this.multi',\n                }\n            },] }\n];\nMatAccordion.propDecorators = {\n    _headers: [{ type: ContentChildren, args: [MatExpansionPanelHeader, { descendants: true },] }],\n    hideToggle: [{ type: Input }],\n    displayMode: [{ type: Input }],\n    togglePosition: [{ type: Input }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatExpansionModule {\n}\nMatExpansionModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule, MatCommonModule, CdkAccordionModule, PortalModule],\n                exports: [\n                    MatAccordion,\n                    MatExpansionPanel,\n                    MatExpansionPanelActionRow,\n                    MatExpansionPanelHeader,\n                    MatExpansionPanelTitle,\n                    MatExpansionPanelDescription,\n                    MatExpansionPanelContent,\n                ],\n                declarations: [\n                    MatAccordion,\n                    MatExpansionPanel,\n                    MatExpansionPanelActionRow,\n                    MatExpansionPanelHeader,\n                    MatExpansionPanelTitle,\n                    MatExpansionPanelDescription,\n                    MatExpansionPanelContent,\n                ],\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { EXPANSION_PANEL_ANIMATION_TIMING, MAT_ACCORDION, MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, MatAccordion, MatExpansionModule, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelContent, MatExpansionPanelDescription, MatExpansionPanelHeader, MatExpansionPanelTitle, matExpansionAnimations, Éµ0 };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}