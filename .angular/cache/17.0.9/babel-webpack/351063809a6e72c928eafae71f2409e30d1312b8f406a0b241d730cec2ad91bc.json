{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Container } from \"./Container\";\nimport { List, ListDisposer } from \"./utils/List\";\nimport { OrderedListTemplate } from \"./utils/SortedList\";\nimport { Dictionary } from \"./utils/Dictionary\";\nimport { Disposer, MultiDisposer } from \"./utils/Disposer\";\nimport { DataSource } from \"./data/DataSource\";\nimport { Responsive } from \"./utils/Responsive\";\nimport { system } from \"./System\";\nimport { DataItem } from \"./DataItem\";\nimport { registry } from \"./Registry\";\nimport * as $math from \"./utils/Math\";\nimport * as $array from \"./utils/Array\";\nimport * as $ease from \"./utils/Ease\";\nimport * as $utils from \"./utils/Utils\";\nimport * as $iter from \"./utils/Iterator\";\nimport * as $object from \"./utils/Object\";\nimport * as $type from \"./utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * A Component represents an independent functional element or control, that\r\n * can have it's own behavior, children, data, etc.\r\n *\r\n * A few examples of a Component: [[Legend]], [[Series]], [[Scrollbar]].\r\n *\r\n * @see {@link IComponentEvents} for a list of available events\r\n * @see {@link IComponentAdapters} for a list of available Adapters\r\n * @important\r\n */\nvar Component = /** @class */function (_super) {\n  __extends(Component, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Component() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * Holds data field names.\r\n     *\r\n     * Data fields define connection beween [[DataItem]] and actual properties\r\n     * in raw data.\r\n     */\n    _this.dataFields = {};\n    /**\r\n     * A list of [[DataSource]] definitions of external data source.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._dataSources = {};\n    /**\r\n     * This is used when only new data is invalidated (if added using `addData`\r\n     * method).\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._parseDataFrom = 0;\n    /**\r\n     * Holds the disposers for the dataItems and dataUsers\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._dataDisposers = [];\n    /**\r\n     * Currently selected \"data set\".\r\n     *\r\n     * If it's set to `\"\"`, main data set (unaggregated data) is used.\r\n     */\n    _this._currentDataSetId = \"\";\n    /**\r\n     * [_start description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._start = 0;\n    /**\r\n     * [_end description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._end = 1;\n    /**\r\n     * If set to `true`, changing data range in element will not trigger\r\n     * `daterangechanged` event.\r\n     */\n    _this.skipRangeEvent = false;\n    /**\r\n     * Whenever selected scope changes (chart is zoomed or panned), for example\r\n     * by interaction from a Scrollbar, or API, a chart needs to reposition\r\n     * its contents.\r\n     *\r\n     * `rangeChangeDuration` influences how this is performed.\r\n     *\r\n     * If set to zero (0), the change will happen instantenously.\r\n     *\r\n     * If set to non-zero value, the chart will gradually animate into new\r\n     * position for the set amount of milliseconds.\r\n     *\r\n     * @default 0\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n     */\n    _this.rangeChangeDuration = 0;\n    /**\r\n     * An easing function to use for range change animation.\r\n     *\r\n     * @see {@link Ease}\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n     */\n    _this.rangeChangeEasing = $ease.cubicOut;\n    /**\r\n     * A duration (ms) of each data parsing step. A Component parses its data in\r\n     * chunks in order to avoid completely freezing the machine when large data\r\n     * sets are used. This setting will control how many milliseconds should pass\r\n     * when parsing data until parser stops for a brief moment to let other\r\n     * processes catch up.\r\n     */\n    _this.parsingStepDuration = 50;\n    /**\r\n     * [dataInvalid description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n    _this.dataInvalid = false;\n    /**\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this.rawDataInvalid = false;\n    /**\r\n     * [dataRangeInvalid description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n    _this.dataRangeInvalid = false;\n    /**\r\n     * [dataItemsInvalid description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n    _this.dataItemsInvalid = false;\n    /**\r\n     * If set to a non-zero number the element will \"animate\" data values of its\r\n     * children.\r\n     *\r\n     * This will happen on first load and whenever data values change.\r\n     *\r\n     * Enabling interpolation will mean that elements will transit smoothly into\r\n     * new values rather than updating instantly.\r\n     *\r\n     * @default 0\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n     */\n    _this.interpolationDuration = 0;\n    /**\r\n     * An easing function to use for interpolating values when transiting from\r\n     * one source value to another.\r\n     *\r\n     * @default cubicOut\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n     * @see {@link Ease}\r\n     */\n    _this.interpolationEasing = $ease.cubicOut;\n    /**\r\n     * Indicates whether transition between data item's values should start and\r\n     * play out all at once, or with a small delay (as defined by\r\n     * `sequencedInterpolationDelay`) for each subsequent data item.\r\n     *\r\n     * @default true\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n     */\n    _this.sequencedInterpolation = true;\n    /**\r\n     * A delay (ms) to wait between animating each subsequent data item's\r\n     * interpolation animation.\r\n     *\r\n     * Relative only if `sequencedInterpolation = true`.\r\n     *\r\n     * @default 0\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n     */\n    _this.sequencedInterpolationDelay = 0;\n    /**\r\n     * A progress (0-1) for the data validation process.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this.dataValidationProgress = 0;\n    _this._addAllDataItems = true;\n    _this._usesData = true;\n    _this.className = \"Component\";\n    _this.minZoomCount = 1;\n    _this.maxZoomCount = 0;\n    _this._dataItems = new OrderedListTemplate(_this.createDataItem());\n    _this._dataItems.events.on(\"inserted\", _this.handleDataItemAdded, _this, false);\n    _this._dataItems.events.on(\"removed\", _this.handleDataItemRemoved, _this, false);\n    _this._disposers.push(new ListDisposer(_this._dataItems));\n    _this._disposers.push(_this._dataItems.template);\n    _this.invalidateData();\n    // TODO what about remove ?\n    _this.dataUsers.events.on(\"inserted\", _this.handleDataUserAdded, _this, false);\n    // Set up disposers\n    _this._disposers.push(new MultiDisposer(_this._dataDisposers));\n    _this._start = 0;\n    _this._end = 1;\n    _this.maxZoomDeclination = 1;\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n  Component.prototype.createDataItem = function () {\n    return new DataItem();\n  };\n  /**\r\n   * [handleDataUserAdded description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param event Event object\r\n   */\n  Component.prototype.handleDataUserAdded = function (event) {\n    var dataUser = event.newValue;\n    dataUser.dataProvider = this;\n  };\n  /**\r\n   * [handleDataItemValueChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n  Component.prototype.handleDataItemValueChange = function (dataItem, name) {\n    if (!this.dataItemsInvalid) {\n      this.invalidateDataItems();\n    }\n  };\n  /**\r\n   * [handleDataItemWorkingValueChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {};\n  /**\r\n   * [handleDataItemWorkingLocationChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype.handleDataItemWorkingLocationChange = function (dataItem, name) {};\n  /**\r\n   * [handleDataItemCalculatedValueChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype.handleDataItemCalculatedValueChange = function (dataItem, name) {};\n  /**\r\n   * [handleDataItemPropertyChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype.handleDataItemPropertyChange = function (dataItem, name) {};\n  /**\r\n   * Populates a [[DataItem]] width data from data source.\r\n   *\r\n   * Loops through all the fields and if such a field is found in raw data\r\n   * object, a corresponding value on passed in `dataItem` is set.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param item\r\n   */\n  Component.prototype.processDataItem = function (dataItem, dataContext) {\n    var _this = this;\n    if (dataItem) {\n      if (!dataContext) {\n        dataContext = {};\n      }\n      // store reference to original data item\n      dataItem.dataContext = dataContext;\n      var hasSomeValues_1 = false;\n      $object.each(this.dataFields, function (key, fieldValue) {\n        var fieldName = key;\n        var value = dataContext[fieldValue];\n        // Apply adapters to a retrieved value\n        if (_this._adapterO) {\n          if (_this._adapterO.isEnabled(\"dataContextValue\")) {\n            value = _this._adapterO.apply(\"dataContextValue\", {\n              field: fieldName,\n              value: value,\n              dataItem: dataItem\n            }).value;\n          }\n        }\n        if ($type.hasValue(value)) {\n          hasSomeValues_1 = true;\n          if (dataItem.hasChildren[fieldName]) {\n            var template = _this.createDataItem();\n            template.copyFrom(_this.mainDataSet.template);\n            var children = new OrderedListTemplate(template);\n            children.events.on(\"inserted\", _this.handleDataItemAdded, _this, false);\n            children.events.on(\"removed\", _this.handleDataItemRemoved, _this, false);\n            _this._dataDisposers.push(new ListDisposer(children));\n            var count = value.length;\n            for (var i = 0; i < count; i++) {\n              var rawDataItem = value[i];\n              var childDataItem = children.create();\n              childDataItem.parent = dataItem;\n              _this.processDataItem(childDataItem, rawDataItem);\n            }\n            var anyDataItem = dataItem;\n            anyDataItem[fieldName] = children;\n          } else {\n            // data is converted to numbers/dates in each dataItem\n            dataItem[fieldName] = value;\n          }\n        }\n      });\n      $object.each(this.propertyFields, function (key, fieldValue) {\n        var f = key;\n        var value = dataContext[fieldValue];\n        if ($type.hasValue(value)) {\n          hasSomeValues_1 = true;\n          dataItem.setProperty(f, value);\n        }\n      });\n      // @todo we might need some flag which would tell whether we should create empty data items or not.\n      if (!this._addAllDataItems && !hasSomeValues_1) {\n        this.mainDataSet.remove(dataItem);\n      }\n    }\n  };\n  /**\r\n   *\r\n   * When validating raw data, instead of processing data item, we update it\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param item\r\n   */\n  Component.prototype.updateDataItem = function (dataItem) {\n    var _this = this;\n    if (dataItem) {\n      var dataContext_1 = dataItem.dataContext;\n      $object.each(this.dataFields, function (key, fieldValue) {\n        var fieldName = key;\n        var value = dataContext_1[fieldValue];\n        // Apply adapters to a retrieved value\n        if (_this._adapterO) {\n          value = _this._adapterO.apply(\"dataContextValue\", {\n            field: fieldName,\n            value: value,\n            dataItem: dataItem\n          }).value;\n        }\n        if ($type.hasValue(value)) {\n          if (dataItem.hasChildren[fieldName]) {\n            var anyDataItem = dataItem;\n            var children = anyDataItem[fieldName];\n            children.each(function (child) {\n              _this.updateDataItem(child);\n            });\n          } else {\n            // data is converted to numbers/dates in each dataItem\t\t\t\t\t\n            dataItem[fieldName] = value;\n          }\n        }\n      });\n      $object.each(this.propertyFields, function (key, fieldValue) {\n        var f = key;\n        var value = dataContext_1[fieldValue];\n        if ($type.hasValue(value)) {\n          dataItem.setProperty(f, value);\n        }\n      });\n    }\n  };\n  /**\r\n   * [validateDataElements description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n  Component.prototype.validateDataElements = function () {\n    var count = this.endIndex;\n    for (var i = this.startIndex; i < count; i++) {\n      var dataItem = this.dataItems.getIndex(i);\n      // TODO is this correct\n      if (dataItem) {\n        this.validateDataElement(dataItem);\n      }\n    }\n  };\n  /**\r\n   * Validates this element and its related elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype.validate = function () {\n    this.validateDataElements();\n    _super.prototype.validate.call(this);\n  };\n  /**\r\n   * [validateDataElement description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem [description]\r\n   */\n  Component.prototype.validateDataElement = function (dataItem) {};\n  /**\r\n   * Adds one or several (array) of data items to the existing data.\r\n   *\r\n   * @param rawDataItem One or many raw data item objects\r\n   */\n  Component.prototype.addData = function (rawDataItem, removeCount, skipRaw) {\n    var _this = this;\n    // need to check if data is invalid, as addData might be called multiple times\n    if (!this.dataInvalid && this.inited) {\n      this._parseDataFrom = this.data.length; // save length of parsed data\n    }\n\n    if (!skipRaw) {\n      if (rawDataItem instanceof Array) {\n        // can't use concat because new array is returned\n        $array.each(rawDataItem, function (dataItem) {\n          _this.data.push(dataItem);\n        });\n      } else {\n        this.data.push(rawDataItem); // add to raw data array\n      }\n    }\n\n    if (this.inited) {\n      this.removeData(removeCount, skipRaw);\n    } else {\n      if ($type.isNumber(removeCount)) {\n        while (removeCount > 0) {\n          this.data.shift();\n          removeCount--;\n        }\n      }\n    }\n    this.invalidateData();\n  };\n  /**\r\n   * Removes elements from the beginning of data\r\n   *\r\n   * @param count number of elements to remove\r\n   */\n  Component.prototype.removeData = function (count, skipRaw) {\n    if ($type.isNumber(count) && count > 0) {\n      while (count > 0) {\n        var dataItem = this.mainDataSet.getIndex(0);\n        if (dataItem) {\n          this.mainDataSet.remove(dataItem);\n        }\n        this.dataUsers.each(function (dataUser) {\n          if (!dataUser.data || dataUser.data.length == 0) {\n            var dataItem_1 = dataUser.mainDataSet.getIndex(0);\n            if (dataItem_1) {\n              dataUser.mainDataSet.remove(dataItem_1);\n            }\n          }\n        });\n        if (!skipRaw) {\n          this.data.shift();\n        }\n        if (this._parseDataFrom > 0) {\n          this._parseDataFrom--;\n        }\n        count--;\n      }\n      // changed from invalidateData since 4.7.19 to solve #51551\n      this.invalidateDataItems();\n    }\n  };\n  /**\r\n   * Triggers a data (re)parsing.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype.invalidateData = function () {\n    if (this.disabled || this.isTemplate) {\n      return;\n    }\n    //if(!this.dataInvalid){\n    registry.addToInvalidComponents(this);\n    system.requestFrame();\n    this.dataInvalid = true;\n    $iter.each(this.dataUsers.iterator(), function (x) {\n      x.invalidateDataItems();\n    });\n    //}\n  };\n  /**\r\n   * [invalidateDataUsers description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n  Component.prototype.invalidateDataUsers = function () {\n    $iter.each(this.dataUsers.iterator(), function (x) {\n      x.invalidate();\n    });\n  };\n  /**\r\n   * Invalidates data values. When data array is not changed, but values within\r\n   * it changes, we invalidate data so that component would process changes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype.invalidateDataItems = function () {\n    if (this.disabled || this.isTemplate) {\n      return;\n    }\n    //if(!this.dataItemsInvalid){\n    $array.move(registry.invalidDataItems, this);\n    system.requestFrame();\n    this.dataItemsInvalid = true;\n    $iter.each(this.dataUsers.iterator(), function (x) {\n      x.invalidateDataItems();\n    });\n    //}\n  };\n  /**\r\n   * Invalidates data range. This is done when data which must be shown\r\n   * changes (chart is zoomed for example).\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype.invalidateDataRange = function () {\n    if (this.disabled || this.isTemplate) {\n      return;\n    }\n    //if(!this.dataRangeInvalid){\n    this.dataRangeInvalid = true;\n    $array.move(registry.invalidDataRange, this);\n    system.requestFrame();\n    //}\n  };\n  /**\r\n   * Processes data range.\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype.validateDataRange = function () {\n    $array.remove(registry.invalidDataRange, this);\n    this.dataRangeInvalid = false;\n    if (this.startIndex != this._prevStartIndex || this.endIndex != this._prevEndIndex) {\n      this.rangeChangeUpdate();\n      this.appendDataItems();\n      this.invalidate();\n      this.dispatchImmediately(\"datarangechanged\");\n    }\n  };\n  /**\r\n   * [sliceData description]\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype.sliceData = function () {\n    this._workingStartIndex = this.startIndex;\n    this._workingEndIndex = this.endIndex;\n  };\n  /**\r\n   * [rangeChangeUpdate description]\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype.rangeChangeUpdate = function () {\n    this.sliceData();\n    this._prevStartIndex = this.startIndex;\n    this._prevEndIndex = this.endIndex;\n  };\n  /**\r\n   * [appendDataItems description]\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype.appendDataItems = function () {\n    // TODO use an iterator instead\n    var count = this.endIndex;\n    for (var i = this.startIndex; i < count; i++) {\n      // data item\n      var dataItem = this.dataItems.getIndex(i);\n      if (dataItem) {\n        dataItem.__disabled = false;\n      }\n    }\n    for (var i = 0; i < this.startIndex; i++) {\n      var dataItem = this.dataItems.getIndex(i);\n      if (dataItem) {\n        dataItem.__disabled = true;\n      }\n    }\n    for (var i = this.endIndex; i < this.dataItems.length; i++) {\n      var dataItem = this.dataItems.getIndex(i);\n      if (dataItem) {\n        dataItem.__disabled = true;\n      }\n    }\n  };\n  /**\r\n   * If you want to have a smooth transition from one data values to another, you change your raw data and then you must call this method.\r\n   * then instead of redrawing everything, the chart will check raw data and smoothly transit from previous to new data\r\n   */\n  Component.prototype.invalidateRawData = function () {\n    if (this.disabled || this.isTemplate) {\n      return;\n    }\n    //if(!this.rawDataInvalid){\n    $array.move(registry.invalidRawDatas, this);\n    system.requestFrame();\n    this.rawDataInvalid = true;\n    $iter.each(this.dataUsers.iterator(), function (x) {\n      x.invalidateRawData();\n    });\n    //}\n  };\n  /**\r\n   * @ignore\r\n   */\n  Component.prototype.validateRawData = function () {\n    var _this = this;\n    $array.remove(registry.invalidRawDatas, this);\n    $iter.each(this.mainDataSet.iterator(), function (dataItem) {\n      if (dataItem) {\n        _this.updateDataItem(dataItem);\n      }\n    });\n  };\n  /**\r\n   * Destroys this object and all related data.\r\n   */\n  Component.prototype.dispose = function () {\n    var _this = this;\n    this.mainDataSet.template.clones.clear();\n    $object.each(this._dataSources, function (key, source) {\n      _this.removeDispose(source);\n    });\n    this.disposeData();\n    _super.prototype.dispose.call(this);\n  };\n  /**\r\n   * @ignore\r\n   */\n  Component.prototype.disposeData = function () {\n    this.mainDataSet.template.clones.clear();\n    $array.each(this._dataDisposers, function (x) {\n      x.dispose();\n    });\n    // and for all components\n    $iter.each(this.dataUsers.iterator(), function (dataUser) {\n      dataUser.disposeData();\n    });\n    this._dataDisposers.length = 0;\n    this._startIndex = undefined;\n    this._endIndex = undefined;\n    // dispose old\n    this.mainDataSet.clear();\n    this.mainDataSet.template.clones.clear();\n    if (this._dataSets) {\n      this._dataSets.clear();\n    }\n  };\n  Component.prototype.getDataItem = function (dataContext) {\n    return this.mainDataSet.create();\n  };\n  /**\r\n   * Validates (processes) data.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype.validateData = function () {\n    this.dispatchImmediately(\"beforedatavalidated\");\n    this.dataInvalid = false;\n    registry.removeFromInvalidComponents(this);\n    if (this.__disabled) {\n      return;\n    }\n    this.dataValidationProgress = 0;\n    // need this to slice new data\n    this._prevStartIndex = undefined;\n    this._prevEndIndex = undefined;\n    // todo: this needs some overthinking, maybe some extra settings like zoomOotonDataupdate like in v3 or so. some charts like pie chart probably should act like this always\n    this._startIndex = undefined;\n    this._endIndex = undefined;\n    if (this.dataFields.data && this.dataItem) {\n      var dataContext = this.dataItem.dataContext;\n      this._data = dataContext[this.dataFields.data];\n    }\n    // data items array is reset only if all data is validated, if _parseDataFrom is not 0, we append new data only\n    // check heatmap demo if uncommented\n    // fixed both issues by adding && this.data.length > 0\n    // check adding series example if changed\n    if (this._parseDataFrom === 0 && this.data.length > 0) {\n      this.disposeData();\n    }\n    if (this.data.length > 0) {\n      var preloader = this.preloader;\n      // and for all components\n      $iter.each(this.dataUsers.iterator(), function (dataUser) {\n        // todo: this needs some overthinking, maybe some extra settings like zoomOUtonDataupdate like in v3 or so. some charts like pie chart probably should act like this always\n        dataUser._startIndex = undefined;\n        dataUser._endIndex = undefined;\n      });\n      var counter = 0;\n      var startTime = Date.now();\n      // parse data\n      var i = this._parseDataFrom;\n      var n = this.data.length;\n      var _loop_1 = function () {\n        var rawDataItem = this_1.data[i];\n        if (this_1._usesData) {\n          var dataItem = this_1.getDataItem(rawDataItem);\n          this_1.processDataItem(dataItem, rawDataItem);\n        }\n        this_1.dataUsers.each(function (dataUser) {\n          if (dataUser.data.length == 0) {\n            // checking if data is not set directly\n            var dataUserDataItem = dataUser.getDataItem(rawDataItem);\n            dataUser.processDataItem(dataUserDataItem, rawDataItem);\n          }\n        });\n        counter++;\n        // show preloader if this takes too many time\n        if (counter == 100) {\n          // no need to check it on each data item\n          counter = 0;\n          var elapsed = Date.now() - startTime;\n          if (elapsed > this_1.parsingStepDuration) {\n            if (i < this_1.data.length - 10) {\n              this_1._parseDataFrom = i + 1;\n              // update preloader\n              if (preloader) {\n                if (i / this_1.data.length > 0.5 && !preloader.visible) {\n                  // do not start showing\n                } else {\n                  preloader.progress = i / this_1.data.length;\n                }\n              }\n              this_1.dataValidationProgress = i / this_1.data.length;\n              i = this_1.data.length; // stops cycle\n              this_1.invalidateData();\n              return {\n                value: void 0\n              };\n            }\n          }\n        }\n      };\n      var this_1 = this;\n      for (i; i < n; i++) {\n        var state_1 = _loop_1();\n        if (typeof state_1 === \"object\") return state_1.value;\n      }\n      if (preloader) {\n        preloader.progress = 1;\n      }\n      this.dataUsers.each(function (dataUser) {\n        if (dataUser.hidden || dataUser.appeared && !dataUser.visible && dataUser.stacked) {\n          dataUser.hide(0);\n        }\n      });\n    }\n    this.dataValidationProgress = 1;\n    this._parseDataFrom = 0; // reset this index, it is set to dataItems.length if addData() method was used.\n    this.invalidateDataItems();\n    if (!this._internalDefaultsApplied) {\n      this.applyInternalDefaults();\n    }\n    this.dispatch(\"datavalidated\"); // can't zoom chart if dispatched immediately\n  };\n  /**\r\n   * Validates (processes) data items.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype.validateDataItems = function () {\n    $array.remove(registry.invalidDataItems, this);\n    this.dataItemsInvalid = false;\n    this.invalidateDataRange();\n    this.invalidate();\n    this.dispatch(\"dataitemsvalidated\");\n  };\n  Object.defineProperty(Component.prototype, \"data\", {\n    /**\r\n     * Returns element's source (raw) data.\r\n     *\r\n     * @return Data\r\n     */\n    get: function () {\n      if (!this._data) {\n        this._data = [];\n      }\n      if (!this._adapterO) {\n        return this._data;\n      } else {\n        return this._adapterO.apply(\"data\", this._data);\n      }\n    },\n    /**\r\n     * Sets source (raw) data for the element. The \"data\" is always an `Array`\r\n     * of objects.\r\n     *\r\n     * IMPORTANT: The order of data items in `data` array is important as it\r\n     * might affect chart look and behavior. [More details](https://www.amcharts.com/docs/v4/concepts/data/#Order_of_data_items).\r\n     *\r\n     * @param value Data\r\n     */\n    set: function (value) {\n      this.setData(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Component.prototype.setData = function (value) {\n    // array might be the same, but there might be items added\n    // todo: check if array changed, toString maybe?\n    if (!this.isDisposed()) {\n      this._parseDataFrom = 0;\n      this.disposeData();\n      this._data = value;\n      if (value && value.length > 0) {\n        this.invalidateData();\n      } else {\n        this.dispatchImmediately(\"beforedatavalidated\");\n        this.dispatch(\"datavalidated\");\n      }\n    }\n  };\n  /**\r\n   * Returns (creates if necessary) a [[DataSource]] bound to any specific\r\n   * property.\r\n   *\r\n   * For example if I want to bind `data` to an external JSON file, I'd create\r\n   * a DataSource for it.\r\n   *\r\n   * @param property  Property to bind external data to\r\n   * @return A DataSource for property\r\n   */\n  Component.prototype.getDataSource = function (property) {\n    var _this = this;\n    if (!$type.hasValue(this._dataSources[property])) {\n      this._dataSources[property] = new DataSource();\n      this._dataSources[property].component = this;\n      this.setDataSourceEvents(this._dataSources[property], property);\n      this._dataSources[property].adapter.add(\"dateFields\", function (val) {\n        return _this.dataSourceDateFields(val);\n      });\n      this._dataSources[property].adapter.add(\"numberFields\", function (val) {\n        return _this.dataSourceNumberFields(val);\n      });\n      this.events.on(\"inited\", function () {\n        _this.loadData(property);\n      }, this, false);\n    }\n    return this._dataSources[property];\n  };\n  Object.defineProperty(Component.prototype, \"dataSource\", {\n    /**\r\n     * @return Data source\r\n     */\n    get: function () {\n      if (!this._dataSources[\"data\"]) {\n        this.getDataSource(\"data\");\n      }\n      return this._dataSources[\"data\"];\n    },\n    /**\r\n     *A [[DataSource]] to be used for loading Component's data.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/loading-external-data/} for more on loading external data\r\n     * @param value  Data source\r\n     */\n    set: function (value) {\n      var _this = this;\n      if (this._dataSources[\"data\"]) {\n        this.removeDispose(this._dataSources[\"data\"]);\n      }\n      this._dataSources[\"data\"] = value;\n      this._dataSources[\"data\"].component = this;\n      this.events.on(\"inited\", function () {\n        _this.loadData(\"data\");\n      }, this, false);\n      this.setDataSourceEvents(value, \"data\");\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Initiates loading of the external data via [[DataSource]].\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype.loadData = function (property) {\n    this._dataSources[property].load();\n  };\n  /**\r\n   * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n   * so that particular chart types can popuplate this setting with their\r\n   * own type-specific data fields so they are parsed properly.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param value  Array of date fields\r\n   * @return Array of date fields populated with chart's date fields\r\n   */\n  Component.prototype.dataSourceDateFields = function (value) {\n    return value;\n  };\n  /**\r\n   * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n   * so that particular chart types can popuplate this setting with their\r\n   * own type-specific data fields so they are parsed properly.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param value  Array of number fields\r\n   * @return Array of number fields populated with chart's number fields\r\n   */\n  Component.prototype.dataSourceNumberFields = function (value) {\n    return value;\n  };\n  /**\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param list        [description]\r\n   * @param dataFields  [description]\r\n   * @param targetList  [description]\r\n   * @return [description]\r\n   */\n  Component.prototype.populateDataSourceFields = function (list, dataFields, targetList) {\n    $array.each(targetList, function (value) {\n      if (dataFields[value] && $array.indexOf(list, dataFields[value]) === -1) {\n        list.push(dataFields[value]);\n      }\n    });\n    return list;\n  };\n  /**\r\n   * Sets events on a [[DataSource]].\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype.setDataSourceEvents = function (ds, property) {\n    var _this = this;\n    ds.events.on(\"started\", function (ev) {\n      var preloader = _this.preloader;\n      if (preloader) {\n        preloader.progress = 0;\n        //preloader.label.text = this.language.translate(\"Loading\");\n      }\n    }, undefined, false);\n    ds.events.on(\"loadstarted\", function (ev) {\n      var preloader = _this.preloader;\n      if (preloader) {\n        preloader.progress = 0.25;\n      }\n    }, undefined, false);\n    ds.events.on(\"loadended\", function (ev) {\n      var preloader = _this.preloader;\n      if (preloader) {\n        preloader.progress = 0.5;\n      }\n    }, undefined, false);\n    ds.events.on(\"parseended\", function (ev) {\n      var preloader = _this.preloader;\n      if (preloader) {\n        preloader.progress = 0.75;\n      }\n    }, undefined, false);\n    ds.events.on(\"ended\", function (ev) {\n      var preloader = _this.preloader;\n      if (preloader) {\n        preloader.progress = 1;\n      }\n    }, undefined, false);\n    ds.events.on(\"error\", function (ev) {\n      var preloader = _this.preloader;\n      if (preloader) {\n        preloader.progress = 1;\n      }\n      _this.openModal(ev.message);\n    }, undefined, false);\n    if (property) {\n      ds.events.on(\"done\", function (ev) {\n        var preloader = _this.preloader;\n        if (preloader) {\n          preloader.progress = 1;\n        }\n        if (property == \"data\" && !$type.isArray(ev.data)) {\n          ev.data = [ev.data];\n        }\n        if (ds.incremental && property == \"data\" && _this.data.length) {\n          _this.addData(ev.data, ds.keepCount ? ev.data.length : 0);\n        } else if (ds.updateCurrentData && property == \"data\" && _this.data.length) {\n          // cycle through existing data items\n          $array.each(_this.data, function (item, index) {\n            if ($type.hasValue(ev.data[index])) {\n              $object.each(item, function (key, val) {\n                if ($type.hasValue(ev.data[index][key])) {\n                  item[key] = ev.data[index][key];\n                }\n              });\n            }\n          });\n          _this.invalidateRawData();\n        } else {\n          _this[property] = ev.data;\n        }\n      });\n    }\n  };\n  Object.defineProperty(Component.prototype, \"responsive\", {\n    /**\r\n     * @return Responsive rules handler\r\n     */\n    get: function () {\n      if (!this._responsive) {\n        this._responsive = new Responsive();\n        this._responsive.component = this;\n      }\n      return this._responsive;\n    },\n    /**\r\n     * A [[Responsive]] instance to be used when applying conditional\r\n     * property values.\r\n     *\r\n     * NOTE: Responsive features are currently in development and may not work\r\n     * as expected, if at all.\r\n     *\r\n     * @param value  Responsive rules handler\r\n     */\n    set: function (value) {\n      this._responsive = value;\n      this._responsive.component = this;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets current zoom.\r\n   *\r\n   * The range uses relative values from 0 to 1, with 0 marking beginning and 1\r\n   * marking end of the available data range.\r\n   *\r\n   * This method will not have any effect when called on a chart object.\r\n   * Since the chart can have a number of axes and series, each with its own\r\n   * data, the meaning of \"range\" is very ambiguous.\r\n   *\r\n   * To zoom the chart use `zoom*` methods on its respective axes.\r\n   *\r\n   * @param range          Range\r\n   * @param skipRangeEvent Should rangechanged event not be triggered?\r\n   * @param instantly      Do not animate?\r\n   * @return Actual modidied range (taking `maxZoomFactor` into account)\r\n   */\n  Component.prototype.zoom = function (range, skipRangeEvent, instantly, declination) {\n    var _this = this;\n    if (skipRangeEvent === void 0) {\n      skipRangeEvent = false;\n    }\n    if (instantly === void 0) {\n      instantly = false;\n    }\n    var start = range.start;\n    var end = range.end;\n    var priority = range.priority;\n    if (range.start == range.end) {\n      range.start = range.start - 0.5 / this.maxZoomFactor;\n      range.end = range.end + 0.5 / this.maxZoomFactor;\n    }\n    if (priority == \"end\" && end == 1 && start != 0) {\n      if (start < this.start) {\n        priority = \"start\";\n      }\n    }\n    if (priority == \"start\" && start == 0) {\n      if (end > this.end) {\n        priority = \"end\";\n      }\n    }\n    if (!$type.isNumber(declination)) {\n      declination = this.maxZoomDeclination;\n    }\n    if (!$type.isNumber(start) || !$type.isNumber(end)) {\n      return {\n        start: this.start,\n        end: this.end\n      };\n    }\n    if (this._finalStart != start || this._finalEnd != end) {\n      var maxZoomFactor = this.maxZoomFactor / this.minZoomCount;\n      var minZoomFactor = this.maxZoomFactor / this.maxZoomCount;\n      // most likely we are dragging left scrollbar grip here, so we tend to modify end\n      if (priority == \"start\") {\n        if (this.maxZoomCount > 0) {\n          // add to the end\n          if (1 / (end - start) < minZoomFactor) {\n            end = start + 1 / minZoomFactor;\n          }\n        }\n        // add to the end\n        if (1 / (end - start) > maxZoomFactor) {\n          end = start + 1 / maxZoomFactor;\n        }\n        //unless end is > 0\n        if (end > 1 && end - start < 1 / maxZoomFactor) {\n          //end = 1;\n          start = end - 1 / maxZoomFactor;\n        }\n      }\n      // most likely we are dragging right, so we modify left\n      else {\n        if (this.maxZoomCount > 0) {\n          // add to the end\n          if (1 / (end - start) < minZoomFactor) {\n            start = end - 1 / minZoomFactor;\n          }\n        }\n        // remove from start\n        if (1 / (end - start) > maxZoomFactor) {\n          if (start <= 0) {\n            end = start + 1 / maxZoomFactor;\n          } else {\n            start = end - 1 / maxZoomFactor;\n          }\n        }\n        if (start < 0 && end - start < 1 / maxZoomFactor) {\n          //start = 0;\n          end = start + 1 / maxZoomFactor;\n        }\n      }\n      if (start < -declination) {\n        start = -declination;\n      }\n      if (1 / (end - start) > maxZoomFactor) {\n        end = start + 1 / maxZoomFactor;\n      }\n      if (end > 1 + declination) {\n        end = 1 + declination;\n      }\n      if (1 / (end - start) > maxZoomFactor) {\n        start = end - 1 / maxZoomFactor;\n      }\n      this._finalEnd = end;\n      this._finalStart = start;\n      this.skipRangeEvent = skipRangeEvent;\n      this.dispatchImmediately(\"rangechangestarted\");\n      if (this.rangeChangeDuration > 0 && !instantly) {\n        // todo: maybe move this to Animation\n        var rangeChangeAnimation = this.rangeChangeAnimation;\n        if (rangeChangeAnimation && rangeChangeAnimation.progress < 1) {\n          var options = rangeChangeAnimation.animationOptions;\n          if (options.length > 1) {\n            if (options[0].to == start && options[1].to == end) {\n              return {\n                start: start,\n                end: end\n              };\n            } else {\n              if (!rangeChangeAnimation.isDisposed()) {\n                rangeChangeAnimation.stop();\n              }\n            }\n          }\n        }\n        if (this.rangeChangeAnimation) {\n          this.rangeChangeAnimation.kill();\n        }\n        rangeChangeAnimation = this.animate([{\n          property: \"start\",\n          to: start\n        }, {\n          property: \"end\",\n          to: end\n        }], this.rangeChangeDuration, this.rangeChangeEasing);\n        this.rangeChangeAnimation = rangeChangeAnimation;\n        if (rangeChangeAnimation && !rangeChangeAnimation.isFinished()) {\n          rangeChangeAnimation.events.on(\"animationended\", function () {\n            _this.dispatchImmediately(\"rangechangeended\");\n          });\n        } else {\n          this.dispatchImmediately(\"rangechangeended\");\n        }\n      } else {\n        this.start = start;\n        this.end = end;\n        this.dispatch(\"rangechangeended\");\n      }\n    }\n    return {\n      start: start,\n      end: end\n    };\n  };\n  /**\r\n   * Zooms to specific data items using their index in data.\r\n   *\r\n   * This method will not have any effect when called on a chart object.\r\n   * Since the chart can have a number of axes and series, each with its own\r\n   * data, the meaning of \"index\" is very ambiguous.\r\n   *\r\n   * To zoom the chart use `zoom*` methods on its respective axes.\r\n   *\r\n   * @param startIndex     Index of the starting data item\r\n   * @param endIndex       Index of the ending data item\r\n   * @param skipRangeEvent Should rangechanged event not be triggered?\r\n   * @param instantly      Do not animate?\r\n   */\n  Component.prototype.zoomToIndexes = function (startIndex, endIndex, skipRangeEvent, instantly) {\n    if (!$type.isNumber(startIndex) || !$type.isNumber(endIndex)) {\n      return;\n    }\n    var start = startIndex / this.dataItems.length;\n    var end = endIndex / this.dataItems.length;\n    this.zoom({\n      start: start,\n      end: end\n    }, skipRangeEvent, instantly);\n  };\n  Object.defineProperty(Component.prototype, \"zoomFactor\", {\n    /**\r\n     * A current zoom factor (0-1). 1 meaning fully zoomed out. (showing all of\r\n     * the available data)\r\n     *\r\n     * @return Zoom factor\r\n     */\n    get: function () {\n      return $math.fitToRange(1 / (this.end - this.start), 1, this.maxZoomFactor);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"maxZoomFactor\", {\n    /**\r\n     * @return Maximum zoomFactor\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxZoomFactor\");\n    },\n    /**\r\n     * Max available `zoomFactor`.\r\n     *\r\n     * The element will not allow zoom to occur beyond this factor.\r\n     *\r\n     * [[DateAxis]] and [[CategoryAxis]] calculate this atutomatically so that\r\n     * category axis could be zoomed to one category and date axis allows to be\r\n     * zoomed up to one base interval.\r\n     *\r\n     * In case you want to restrict category or date axis to be zoomed to more\r\n     * than one category or more than one base interval, use `minZoomCount`\r\n     * property (set it to `> 1`).\r\n     *\r\n     * Default value of [[ValueAxis]]'s `maxZoomFactor` is `1000`.\r\n     *\r\n     * Feel free to modify it to allow bigger zoom or to restrict zooming.\r\n     *\r\n     * @param value  Maximum zoomFactor\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"maxZoomFactor\", value)) {\n        if (value == 1) {\n          this.maxZoomDeclination = 0;\n        }\n        this.invalidateDataRange();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"maxZoomDeclination\", {\n    /**\r\n     * @ignore\r\n     * @return Maximum zoom declination\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxZoomDeclination\");\n    },\n    /**\r\n     * Max zoom declination.\r\n     *\r\n     * @ignore\r\n     * @default 1\r\n     * @param value  Maximum zoom declination\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"maxZoomDeclination\", value)) {\n        this.invalidateDataRange();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"startIndex\", {\n    /**\r\n     * Current starting index.\r\n     *\r\n     * @return Start index\r\n     */\n    get: function () {\n      if (!$type.isNumber(this._startIndex)) {\n        this._startIndex = 0;\n      }\n      return this._startIndex;\n    },\n    /**\r\n     * Sets current starting index.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Start index\r\n     */\n    set: function (value) {\n      this._startIndex = $math.fitToRange(Math.round(value), 0, this.dataItems.length);\n      //this._workingStartIndex = this._startIndex; // not good, breaks adjusted working start index of line series\n      this.start = this.indexToPosition(this._startIndex);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   * @todo:review description\r\n   * returns item's relative position by the index of the item\r\n   * @param index\r\n   */\n  Component.prototype.indexToPosition = function (index) {\n    return index / this.dataItems.length;\n  };\n  Object.defineProperty(Component.prototype, \"endIndex\", {\n    /**\r\n     * Current ending index.\r\n     *\r\n     * @return End index\r\n     */\n    get: function () {\n      var count = this.dataItems.length;\n      if (!$type.isNumber(this._endIndex) || this._endIndex > count) {\n        this._endIndex = count;\n      }\n      return this._endIndex;\n    },\n    /**\r\n     * Sets current ending index.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value End index\r\n     */\n    set: function (value) {\n      this._endIndex = $math.fitToRange(Math.round(value), 0, this.dataItems.length);\n      //this._workingEndIndex = this._endIndex; // not good, breaks adjusted workingend index of line series\n      this.end = this.indexToPosition(this._endIndex);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"start\", {\n    /**\r\n     * @return Start (0-1)\r\n     */\n    get: function () {\n      if (!this._adapterO) {\n        return this._start;\n      } else {\n        return this._adapterO.apply(\"start\", this._start);\n      }\n    },\n    /**\r\n     * Start of the current data range (zoom).\r\n     *\r\n     * These are relative values from 0 (beginning) to 1 (end).\r\n     *\r\n     * @param value Start (0-1)\r\n     */\n    set: function (value) {\n      // value = $math.round(value, 10); not good\n      //if (1 / (this.end - value) > this.maxZoomFactor) {\n      //\tvalue = this.end - 1 / this.maxZoomFactor;\n      //}\n      if (this._start != value) {\n        this._start = value;\n        var startIndex = Math.max(0, Math.floor(this.dataItems.length * value) || 0);\n        this._startIndex = Math.min(startIndex, this.dataItems.length);\n        this.invalidateDataRange();\n        this.invalidate();\n        this.dispatchImmediately(\"startchanged\");\n        this.dispatch(\"startendchanged\");\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"end\", {\n    /**\r\n     * @return End (0-1)\r\n     */\n    get: function () {\n      if (!this._adapterO) {\n        return this._end;\n      } else {\n        return this._adapterO.apply(\"end\", this._end);\n      }\n    },\n    /**\r\n     * End of the current data range (zoom).\r\n     *\r\n     * These are relative values from 0 (beginning) to 1 (end).\r\n     *\r\n     * @param value End (0-1)\r\n     */\n    set: function (value) {\n      // value = $math.round(value, 10); // not good\n      //if (1 / (value - this.start) > this.maxZoomFactor) {\n      //\tvalue = 1 / this.maxZoomFactor + this.start;\n      //}\n      if (this._end != value) {\n        this._end = value;\n        this._endIndex = Math.min(this.dataItems.length, Math.ceil(this.dataItems.length * value) || 0);\n        this.invalidateDataRange();\n        this.invalidate();\n        this.dispatchImmediately(\"endchanged\");\n        this.dispatch(\"startendchanged\");\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * [removeFromInvalids description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n  Component.prototype.removeFromInvalids = function () {\n    _super.prototype.removeFromInvalids.call(this);\n    registry.removeFromInvalidComponents(this);\n    $array.remove(registry.invalidDataItems, this);\n    $array.remove(registry.invalidDataRange, this);\n    $array.remove(registry.invalidRawDatas, this);\n  };\n  Object.defineProperty(Component.prototype, \"dataItems\", {\n    /**\r\n     * Returns a list of source [[DataItem]] objects currently used in the chart.\r\n     *\r\n     * @return List of data items\r\n     */\n    get: function () {\n      if (this._currentDataSetId != \"\") {\n        var dataItems = this.dataSets.getKey(this._currentDataSetId);\n        if (dataItems) {\n          return dataItems;\n        }\n      }\n      return this._dataItems;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"dataSets\", {\n    /**\r\n     * Holds data items for data sets (usually aggregated data).\r\n     *\r\n     * @ignore\r\n     * @since 4.7.0\r\n     * @return  Data sets\r\n     */\n    get: function () {\n      if (!this._dataSets) {\n        this._dataSets = new Dictionary();\n      }\n      return this._dataSets;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Makes the chart use particular data set.\r\n   *\r\n   * If `id` is not provided or there is no such data set, main data will be\r\n   * used.\r\n   *\r\n   * @ignore\r\n   * @since 4.7.0\r\n   * @param  id  Data set id\r\n   */\n  Component.prototype.setDataSet = function (id) {\n    if (this._currentDataSetId != id) {\n      var dataSet = this.dataSets.getKey(id);\n      if (!dataSet) {\n        if (this._currentDataSetId != \"\") {\n          this.dataItems.each(function (dataItem) {\n            dataItem.__disabled = true;\n          });\n          this._currentDataSetId = \"\";\n          this.invalidateDataRange();\n          this._prevStartIndex = undefined;\n          this.dataItems.each(function (dataItem) {\n            dataItem.__disabled = false;\n          });\n          return true;\n        }\n      } else {\n        this.dataItems.each(function (dataItem) {\n          dataItem.__disabled = true;\n        });\n        this._currentDataSetId = id;\n        this.invalidateDataRange();\n        this._prevStartIndex = undefined;\n        this.dataItems.each(function (dataItem) {\n          dataItem.__disabled = false;\n        });\n        return true;\n      }\n    }\n    return false;\n  };\n  Object.defineProperty(Component.prototype, \"currentDataSetId\", {\n    /**\r\n     * Returns id of the currently used data set, or `undefined` if main data set\r\n     * is in use.\r\n     *\r\n     * @since 4.7.0\r\n     * @return Current data set id\r\n     */\n    get: function () {\n      return this._currentDataSetId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"mainDataSet\", {\n    /**\r\n     * Returns reference to \"main\" data set (unaggregated data as it was supplied\r\n     * in `data`).\r\n     *\r\n     * @since 4.7.0\r\n     * @return Main data set\r\n     */\n    get: function () {\n      return this._dataItems;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates the indexes for the dataItems\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype._updateDataItemIndexes = function (startIndex) {\n    var dataItems = this.mainDataSet.values;\n    var length = dataItems.length;\n    for (var i = startIndex; i < length; ++i) {\n      dataItems[i]._index = i;\n    }\n  };\n  /**\r\n   * Processes newly added [[DataItem]] as well as triggers data re-validation.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event [description]\r\n   */\n  Component.prototype.handleDataItemAdded = function (event) {\n    event.newValue.component = this;\n    this._updateDataItemIndexes(event.index);\n    if (!this.dataItemsInvalid) {\n      this.invalidateDataItems();\n    }\n  };\n  /**\r\n   * removes [[DataItem]] as well as triggers data re-validation.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event [description]\r\n   */\n  Component.prototype.handleDataItemRemoved = function (event) {\n    //\t\tevent.oldValue.component = undefined; // not good, as some items might be not removed from component lists\n    this._updateDataItemIndexes(event.index);\n    if (!this.dataItemsInvalid) {\n      this.invalidateDataItems();\n    }\n  };\n  /**\r\n   * Binds a data element's field to a specific field in raw data.\r\n   * For example, for the very basic column chart you'd want to bind a `value`\r\n   * field to a field in data, such as `price`.\r\n   *\r\n   * Some more advanced Components, like [[CandlestickSeries]] need several\r\n   * data fields bound to data, such as ones for open, high, low and close\r\n   * values.\r\n   *\r\n   * @todo Example\r\n   * @param field  Field name\r\n   * @param value  Field name in data\r\n   */\n  Component.prototype.bindDataField = function (field, value) {\n    this.dataFields[field] = value;\n    this.invalidateDataRange();\n  };\n  /**\r\n   * Invalidates processed data.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype.invalidateProcessedData = function () {\n    this.resetProcessedRange();\n    this.invalidateDataRange();\n  };\n  /**\r\n   * [resetProcessedRange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n  Component.prototype.resetProcessedRange = function () {\n    this._prevEndIndex = null;\n    this._prevStartIndex = null;\n  };\n  Object.defineProperty(Component.prototype, \"dataUsers\", {\n    /**\r\n     * Returns all other [[Component]] objects that are using this element's\r\n     * data.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @return [description]\r\n     */\n    get: function () {\n      var _this = this;\n      if (!this._dataUsers) {\n        this._dataUsers = new List();\n        //this._disposers.push(new ListDisposer(this._dataUsers));\n        // TODO better way of handling this? e.g. move into another module ?\n        this._disposers.push(new Disposer(function () {\n          // TODO clear the list ?\n          $iter.each(_this._dataUsers.iterator(), function (x) {\n            x.dispose();\n          });\n        }));\n      }\n      return this._dataUsers;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a clone of this element.\r\n   *\r\n   * @return Clone\r\n   */\n  Component.prototype.clone = function () {\n    var component = _super.prototype.clone.call(this);\n    component.dataFields = $utils.copyProperties(this.dataFields, {});\n    return component;\n  };\n  /**\r\n   * Copies all parameters from another [[Component]].\r\n   *\r\n   * @param source Source Component\r\n   */\n  Component.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    this.data = source.data;\n    this.sequencedInterpolation = source.sequencedInterpolation;\n    this.sequencedInterpolationDelay = source.sequencedInterpolationDelay;\n    this.interpolationDuration = source.interpolationDuration;\n    this.interpolationEasing = source.interpolationEasing;\n  };\n  /**\r\n   * Invalidates the whole element, including all its children, causing\r\n   * complete re-parsing of data and redraw.\r\n   *\r\n   * Use sparingly!\r\n   */\n  Component.prototype.reinit = function () {\n    this._inited = false;\n    this.deepInvalidate();\n  };\n  /**\r\n   * Add an adapter for data.\r\n   *\r\n   * @return Exporting\r\n   */\n  Component.prototype.getExporting = function () {\n    var _export = _super.prototype.getExporting.call(this);\n    if (!_export.adapter.has(\"data\", this._exportData, -1, this)) {\n      _export.adapter.add(\"data\", this._exportData, -1, this);\n      this.events.on(\"datavalidated\", function (ev) {\n        _export.handleDataUpdated();\n      });\n    }\n    return _export;\n  };\n  Component.prototype._exportData = function (arg) {\n    arg.data = this.data;\n    return arg;\n  };\n  Component.prototype.setDisabled = function (value) {\n    var changed = _super.prototype.setDisabled.call(this, value);\n    if (changed) {\n      this.invalidateData();\n    }\n    return changed;\n  };\n  /**\r\n   * @ignore\r\n   */\n  Component.prototype.setShowOnInit = function (value) {\n    if (value != this.getPropertyValue(\"showOnInit\")) {\n      if (value && !this.inited && !this.hidden) {\n        this._showOnInitDisposer2 = this.events.once(\"dataitemsvalidated\", this.hideInitially, this, false);\n        this._disposers.push(this._showOnInitDisposer2);\n      } else {\n        if (this._showOnInitDisposer2) {\n          this.removeDispose(this._showOnInitDisposer2);\n        }\n      }\n    }\n    // important order here\n    _super.prototype.setShowOnInit.call(this, value);\n  };\n  Component.prototype.setBaseId = function (value) {\n    if (value != this._baseId) {\n      if (this.dataInvalid) {\n        this.dataInvalid = false;\n        registry.removeFromInvalidComponents(this);\n        this._baseId = value;\n        this.invalidateData();\n      }\n    }\n    _super.prototype.setBaseId.call(this, value);\n  };\n  Object.defineProperty(Component.prototype, \"minZoomCount\", {\n    /**\r\n     * @return Min zoom count\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minZoomCount\");\n    },\n    /**\r\n     * Use this for [[CategoryAxis]] or [[DateAxis]].\r\n     *\r\n     * Allows restricting zoom in beyond certain number of categories or base\r\n     * intervals.\r\n     *\r\n     * @default 1\r\n     * @param value  Min zoom count\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"minZoomCount\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"maxZoomCount\", {\n    /**\r\n     * @return Max zoom count\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxZoomCount\");\n    },\n    /**\r\n     * Use this for [[CategoryAxis]] or [[DateAxis]].\r\n     *\r\n     * Limits how many categories or base intervals can be shown at the same\r\n     * time.\r\n     *\r\n     * If there are more items in the chart, the chart will auto-zoom.\r\n     *\r\n     * @default 0 (no limit)\r\n     * @since 4.6.2\r\n     * @param value  Max zoom count\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"maxZoomCount\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Called during the System.update method\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Component.prototype._systemCheckIfValidate = function () {\n    if (this.dataInvalid || this.dataProvider && this.dataProvider.dataInvalid) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n  /**\r\n   * Adds easing functions to \"function\" fields.\r\n   *\r\n   * @param field  Field name\r\n   * @return Assign as function?\r\n   */\n  Component.prototype.asFunction = function (field) {\n    return field == \"interpolationEasing\" || field == \"rangeChangeEasing\" || _super.prototype.asIs.call(this, field);\n  };\n  return Component;\n}(Container);\nexport { Component };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Component\"] = Component;","map":{"version":3,"names":["__extends","Container","List","ListDisposer","OrderedListTemplate","Dictionary","Disposer","MultiDisposer","DataSource","Responsive","system","DataItem","registry","$math","$array","$ease","$utils","$iter","$object","$type","Component","_super","_this","call","dataFields","_dataSources","_parseDataFrom","_dataDisposers","_currentDataSetId","_start","_end","skipRangeEvent","rangeChangeDuration","rangeChangeEasing","cubicOut","parsingStepDuration","dataInvalid","rawDataInvalid","dataRangeInvalid","dataItemsInvalid","interpolationDuration","interpolationEasing","sequencedInterpolation","sequencedInterpolationDelay","dataValidationProgress","_addAllDataItems","_usesData","className","minZoomCount","maxZoomCount","_dataItems","createDataItem","events","on","handleDataItemAdded","handleDataItemRemoved","_disposers","push","template","invalidateData","dataUsers","handleDataUserAdded","maxZoomDeclination","applyTheme","prototype","event","dataUser","newValue","dataProvider","handleDataItemValueChange","dataItem","name","invalidateDataItems","handleDataItemWorkingValueChange","handleDataItemWorkingLocationChange","handleDataItemCalculatedValueChange","handleDataItemPropertyChange","processDataItem","dataContext","hasSomeValues_1","each","key","fieldValue","fieldName","value","_adapterO","isEnabled","apply","field","hasValue","hasChildren","copyFrom","mainDataSet","children","count","length","i","rawDataItem","childDataItem","create","parent","anyDataItem","propertyFields","f","setProperty","remove","updateDataItem","dataContext_1","child","validateDataElements","endIndex","startIndex","dataItems","getIndex","validateDataElement","validate","addData","removeCount","skipRaw","inited","data","Array","removeData","isNumber","shift","dataItem_1","disabled","isTemplate","addToInvalidComponents","requestFrame","iterator","x","invalidateDataUsers","invalidate","move","invalidDataItems","invalidateDataRange","invalidDataRange","validateDataRange","_prevStartIndex","_prevEndIndex","rangeChangeUpdate","appendDataItems","dispatchImmediately","sliceData","_workingStartIndex","_workingEndIndex","__disabled","invalidateRawData","invalidRawDatas","validateRawData","dispose","clones","clear","source","removeDispose","disposeData","_startIndex","undefined","_endIndex","_dataSets","getDataItem","validateData","removeFromInvalidComponents","_data","preloader","counter","startTime","Date","now","n","_loop_1","this_1","dataUserDataItem","elapsed","visible","progress","state_1","hidden","appeared","stacked","hide","_internalDefaultsApplied","applyInternalDefaults","dispatch","validateDataItems","Object","defineProperty","get","set","setData","enumerable","configurable","isDisposed","getDataSource","property","component","setDataSourceEvents","adapter","add","val","dataSourceDateFields","dataSourceNumberFields","loadData","load","populateDataSourceFields","list","targetList","indexOf","ds","ev","openModal","message","isArray","incremental","keepCount","updateCurrentData","item","index","_responsive","zoom","range","instantly","declination","start","end","priority","maxZoomFactor","_finalStart","_finalEnd","minZoomFactor","rangeChangeAnimation","options","animationOptions","to","stop","kill","animate","isFinished","zoomToIndexes","fitToRange","getPropertyValue","setPropertyValue","Math","round","indexToPosition","max","floor","min","ceil","removeFromInvalids","dataSets","getKey","setDataSet","id","dataSet","_updateDataItemIndexes","values","_index","bindDataField","invalidateProcessedData","resetProcessedRange","_dataUsers","clone","copyProperties","reinit","_inited","deepInvalidate","getExporting","_export","has","_exportData","handleDataUpdated","arg","setDisabled","changed","setShowOnInit","_showOnInitDisposer2","once","hideInitially","setBaseId","_baseId","_systemCheckIfValidate","asFunction","asIs","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/Component.js"],"sourcesContent":["import { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"./Container\";\r\nimport { List, ListDisposer } from \"./utils/List\";\r\nimport { OrderedListTemplate } from \"./utils/SortedList\";\r\nimport { Dictionary } from \"./utils/Dictionary\";\r\nimport { Disposer, MultiDisposer } from \"./utils/Disposer\";\r\nimport { DataSource } from \"./data/DataSource\";\r\nimport { Responsive } from \"./utils/Responsive\";\r\nimport { system } from \"./System\";\r\nimport { DataItem } from \"./DataItem\";\r\nimport { registry } from \"./Registry\";\r\nimport * as $math from \"./utils/Math\";\r\nimport * as $array from \"./utils/Array\";\r\nimport * as $ease from \"./utils/Ease\";\r\nimport * as $utils from \"./utils/Utils\";\r\nimport * as $iter from \"./utils/Iterator\";\r\nimport * as $object from \"./utils/Object\";\r\nimport * as $type from \"./utils/Type\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * A Component represents an independent functional element or control, that\r\n * can have it's own behavior, children, data, etc.\r\n *\r\n * A few examples of a Component: [[Legend]], [[Series]], [[Scrollbar]].\r\n *\r\n * @see {@link IComponentEvents} for a list of available events\r\n * @see {@link IComponentAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar Component = /** @class */ (function (_super) {\r\n    __extends(Component, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Component() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Holds data field names.\r\n         *\r\n         * Data fields define connection beween [[DataItem]] and actual properties\r\n         * in raw data.\r\n         */\r\n        _this.dataFields = {};\r\n        /**\r\n         * A list of [[DataSource]] definitions of external data source.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._dataSources = {};\r\n        /**\r\n         * This is used when only new data is invalidated (if added using `addData`\r\n         * method).\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._parseDataFrom = 0;\r\n        /**\r\n         * Holds the disposers for the dataItems and dataUsers\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._dataDisposers = [];\r\n        /**\r\n         * Currently selected \"data set\".\r\n         *\r\n         * If it's set to `\"\"`, main data set (unaggregated data) is used.\r\n         */\r\n        _this._currentDataSetId = \"\";\r\n        /**\r\n         * [_start description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._start = 0;\r\n        /**\r\n         * [_end description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._end = 1;\r\n        /**\r\n         * If set to `true`, changing data range in element will not trigger\r\n         * `daterangechanged` event.\r\n         */\r\n        _this.skipRangeEvent = false;\r\n        /**\r\n         * Whenever selected scope changes (chart is zoomed or panned), for example\r\n         * by interaction from a Scrollbar, or API, a chart needs to reposition\r\n         * its contents.\r\n         *\r\n         * `rangeChangeDuration` influences how this is performed.\r\n         *\r\n         * If set to zero (0), the change will happen instantenously.\r\n         *\r\n         * If set to non-zero value, the chart will gradually animate into new\r\n         * position for the set amount of milliseconds.\r\n         *\r\n         * @default 0\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n         */\r\n        _this.rangeChangeDuration = 0;\r\n        /**\r\n         * An easing function to use for range change animation.\r\n         *\r\n         * @see {@link Ease}\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n         */\r\n        _this.rangeChangeEasing = $ease.cubicOut;\r\n        /**\r\n         * A duration (ms) of each data parsing step. A Component parses its data in\r\n         * chunks in order to avoid completely freezing the machine when large data\r\n         * sets are used. This setting will control how many milliseconds should pass\r\n         * when parsing data until parser stops for a brief moment to let other\r\n         * processes catch up.\r\n         */\r\n        _this.parsingStepDuration = 50;\r\n        /**\r\n         * [dataInvalid description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         */\r\n        _this.dataInvalid = false;\r\n        /**\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this.rawDataInvalid = false;\r\n        /**\r\n         * [dataRangeInvalid description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         */\r\n        _this.dataRangeInvalid = false;\r\n        /**\r\n         * [dataItemsInvalid description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         */\r\n        _this.dataItemsInvalid = false;\r\n        /**\r\n         * If set to a non-zero number the element will \"animate\" data values of its\r\n         * children.\r\n         *\r\n         * This will happen on first load and whenever data values change.\r\n         *\r\n         * Enabling interpolation will mean that elements will transit smoothly into\r\n         * new values rather than updating instantly.\r\n         *\r\n         * @default 0\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n         */\r\n        _this.interpolationDuration = 0;\r\n        /**\r\n         * An easing function to use for interpolating values when transiting from\r\n         * one source value to another.\r\n         *\r\n         * @default cubicOut\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n         * @see {@link Ease}\r\n         */\r\n        _this.interpolationEasing = $ease.cubicOut;\r\n        /**\r\n         * Indicates whether transition between data item's values should start and\r\n         * play out all at once, or with a small delay (as defined by\r\n         * `sequencedInterpolationDelay`) for each subsequent data item.\r\n         *\r\n         * @default true\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n         */\r\n        _this.sequencedInterpolation = true;\r\n        /**\r\n         * A delay (ms) to wait between animating each subsequent data item's\r\n         * interpolation animation.\r\n         *\r\n         * Relative only if `sequencedInterpolation = true`.\r\n         *\r\n         * @default 0\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n         */\r\n        _this.sequencedInterpolationDelay = 0;\r\n        /**\r\n         * A progress (0-1) for the data validation process.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this.dataValidationProgress = 0;\r\n        _this._addAllDataItems = true;\r\n        _this._usesData = true;\r\n        _this.className = \"Component\";\r\n        _this.minZoomCount = 1;\r\n        _this.maxZoomCount = 0;\r\n        _this._dataItems = new OrderedListTemplate(_this.createDataItem());\r\n        _this._dataItems.events.on(\"inserted\", _this.handleDataItemAdded, _this, false);\r\n        _this._dataItems.events.on(\"removed\", _this.handleDataItemRemoved, _this, false);\r\n        _this._disposers.push(new ListDisposer(_this._dataItems));\r\n        _this._disposers.push(_this._dataItems.template);\r\n        _this.invalidateData();\r\n        // TODO what about remove ?\r\n        _this.dataUsers.events.on(\"inserted\", _this.handleDataUserAdded, _this, false);\r\n        // Set up disposers\r\n        _this._disposers.push(new MultiDisposer(_this._dataDisposers));\r\n        _this._start = 0;\r\n        _this._end = 1;\r\n        _this.maxZoomDeclination = 1;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return Data Item\r\n     */\r\n    Component.prototype.createDataItem = function () {\r\n        return new DataItem();\r\n    };\r\n    /**\r\n     * [handleDataUserAdded description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param event Event object\r\n     */\r\n    Component.prototype.handleDataUserAdded = function (event) {\r\n        var dataUser = event.newValue;\r\n        dataUser.dataProvider = this;\r\n    };\r\n    /**\r\n     * [handleDataItemValueChange description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    Component.prototype.handleDataItemValueChange = function (dataItem, name) {\r\n        if (!this.dataItemsInvalid) {\r\n            this.invalidateDataItems();\r\n        }\r\n    };\r\n    /**\r\n     * [handleDataItemWorkingValueChange description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {\r\n    };\r\n    /**\r\n     * [handleDataItemWorkingLocationChange description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.handleDataItemWorkingLocationChange = function (dataItem, name) {\r\n    };\r\n    /**\r\n     * [handleDataItemCalculatedValueChange description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.handleDataItemCalculatedValueChange = function (dataItem, name) {\r\n    };\r\n    /**\r\n     * [handleDataItemPropertyChange description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.handleDataItemPropertyChange = function (dataItem, name) {\r\n    };\r\n    /**\r\n     * Populates a [[DataItem]] width data from data source.\r\n     *\r\n     * Loops through all the fields and if such a field is found in raw data\r\n     * object, a corresponding value on passed in `dataItem` is set.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param item\r\n     */\r\n    Component.prototype.processDataItem = function (dataItem, dataContext) {\r\n        var _this = this;\r\n        if (dataItem) {\r\n            if (!dataContext) {\r\n                dataContext = {};\r\n            }\r\n            // store reference to original data item\r\n            dataItem.dataContext = dataContext;\r\n            var hasSomeValues_1 = false;\r\n            $object.each(this.dataFields, function (key, fieldValue) {\r\n                var fieldName = key;\r\n                var value = dataContext[fieldValue];\r\n                // Apply adapters to a retrieved value\r\n                if (_this._adapterO) {\r\n                    if (_this._adapterO.isEnabled(\"dataContextValue\")) {\r\n                        value = _this._adapterO.apply(\"dataContextValue\", {\r\n                            field: fieldName,\r\n                            value: value,\r\n                            dataItem: dataItem\r\n                        }).value;\r\n                    }\r\n                }\r\n                if ($type.hasValue(value)) {\r\n                    hasSomeValues_1 = true;\r\n                    if (dataItem.hasChildren[fieldName]) {\r\n                        var template = _this.createDataItem();\r\n                        template.copyFrom(_this.mainDataSet.template);\r\n                        var children = new OrderedListTemplate(template);\r\n                        children.events.on(\"inserted\", _this.handleDataItemAdded, _this, false);\r\n                        children.events.on(\"removed\", _this.handleDataItemRemoved, _this, false);\r\n                        _this._dataDisposers.push(new ListDisposer(children));\r\n                        var count = value.length;\r\n                        for (var i = 0; i < count; i++) {\r\n                            var rawDataItem = value[i];\r\n                            var childDataItem = children.create();\r\n                            childDataItem.parent = dataItem;\r\n                            _this.processDataItem(childDataItem, rawDataItem);\r\n                        }\r\n                        var anyDataItem = dataItem;\r\n                        anyDataItem[fieldName] = children;\r\n                    }\r\n                    else {\r\n                        // data is converted to numbers/dates in each dataItem\r\n                        dataItem[fieldName] = value;\r\n                    }\r\n                }\r\n            });\r\n            $object.each(this.propertyFields, function (key, fieldValue) {\r\n                var f = key;\r\n                var value = dataContext[fieldValue];\r\n                if ($type.hasValue(value)) {\r\n                    hasSomeValues_1 = true;\r\n                    dataItem.setProperty(f, value);\r\n                }\r\n            });\r\n            // @todo we might need some flag which would tell whether we should create empty data items or not.\r\n            if (!this._addAllDataItems && !hasSomeValues_1) {\r\n                this.mainDataSet.remove(dataItem);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * When validating raw data, instead of processing data item, we update it\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param item\r\n     */\r\n    Component.prototype.updateDataItem = function (dataItem) {\r\n        var _this = this;\r\n        if (dataItem) {\r\n            var dataContext_1 = dataItem.dataContext;\r\n            $object.each(this.dataFields, function (key, fieldValue) {\r\n                var fieldName = key;\r\n                var value = dataContext_1[fieldValue];\r\n                // Apply adapters to a retrieved value\r\n                if (_this._adapterO) {\r\n                    value = _this._adapterO.apply(\"dataContextValue\", {\r\n                        field: fieldName,\r\n                        value: value,\r\n                        dataItem: dataItem\r\n                    }).value;\r\n                }\r\n                if ($type.hasValue(value)) {\r\n                    if (dataItem.hasChildren[fieldName]) {\r\n                        var anyDataItem = dataItem;\r\n                        var children = (anyDataItem[fieldName]);\r\n                        children.each(function (child) {\r\n                            _this.updateDataItem(child);\r\n                        });\r\n                    }\r\n                    else {\r\n                        // data is converted to numbers/dates in each dataItem\t\t\t\t\t\r\n                        dataItem[fieldName] = value;\r\n                    }\r\n                }\r\n            });\r\n            $object.each(this.propertyFields, function (key, fieldValue) {\r\n                var f = key;\r\n                var value = dataContext_1[fieldValue];\r\n                if ($type.hasValue(value)) {\r\n                    dataItem.setProperty(f, value);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * [validateDataElements description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    Component.prototype.validateDataElements = function () {\r\n        var count = this.endIndex;\r\n        for (var i = this.startIndex; i < count; i++) {\r\n            var dataItem = this.dataItems.getIndex(i);\r\n            // TODO is this correct\r\n            if (dataItem) {\r\n                this.validateDataElement(dataItem);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Validates this element and its related elements.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.validate = function () {\r\n        this.validateDataElements();\r\n        _super.prototype.validate.call(this);\r\n    };\r\n    /**\r\n     * [validateDataElement description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param dataItem [description]\r\n     */\r\n    Component.prototype.validateDataElement = function (dataItem) {\r\n    };\r\n    /**\r\n     * Adds one or several (array) of data items to the existing data.\r\n     *\r\n     * @param rawDataItem One or many raw data item objects\r\n     */\r\n    Component.prototype.addData = function (rawDataItem, removeCount, skipRaw) {\r\n        var _this = this;\r\n        // need to check if data is invalid, as addData might be called multiple times\r\n        if (!this.dataInvalid && this.inited) {\r\n            this._parseDataFrom = this.data.length; // save length of parsed data\r\n        }\r\n        if (!skipRaw) {\r\n            if (rawDataItem instanceof Array) {\r\n                // can't use concat because new array is returned\r\n                $array.each(rawDataItem, function (dataItem) {\r\n                    _this.data.push(dataItem);\r\n                });\r\n            }\r\n            else {\r\n                this.data.push(rawDataItem); // add to raw data array\r\n            }\r\n        }\r\n        if (this.inited) {\r\n            this.removeData(removeCount, skipRaw);\r\n        }\r\n        else {\r\n            if ($type.isNumber(removeCount)) {\r\n                while (removeCount > 0) {\r\n                    this.data.shift();\r\n                    removeCount--;\r\n                }\r\n            }\r\n        }\r\n        this.invalidateData();\r\n    };\r\n    /**\r\n     * Removes elements from the beginning of data\r\n     *\r\n     * @param count number of elements to remove\r\n     */\r\n    Component.prototype.removeData = function (count, skipRaw) {\r\n        if ($type.isNumber(count) && count > 0) {\r\n            while (count > 0) {\r\n                var dataItem = this.mainDataSet.getIndex(0);\r\n                if (dataItem) {\r\n                    this.mainDataSet.remove(dataItem);\r\n                }\r\n                this.dataUsers.each(function (dataUser) {\r\n                    if (!dataUser.data || dataUser.data.length == 0) {\r\n                        var dataItem_1 = dataUser.mainDataSet.getIndex(0);\r\n                        if (dataItem_1) {\r\n                            dataUser.mainDataSet.remove(dataItem_1);\r\n                        }\r\n                    }\r\n                });\r\n                if (!skipRaw) {\r\n                    this.data.shift();\r\n                }\r\n                if (this._parseDataFrom > 0) {\r\n                    this._parseDataFrom--;\r\n                }\r\n                count--;\r\n            }\r\n            // changed from invalidateData since 4.7.19 to solve #51551\r\n            this.invalidateDataItems();\r\n        }\r\n    };\r\n    /**\r\n     * Triggers a data (re)parsing.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.invalidateData = function () {\r\n        if (this.disabled || this.isTemplate) {\r\n            return;\r\n        }\r\n        //if(!this.dataInvalid){\r\n        registry.addToInvalidComponents(this);\r\n        system.requestFrame();\r\n        this.dataInvalid = true;\r\n        $iter.each(this.dataUsers.iterator(), function (x) {\r\n            x.invalidateDataItems();\r\n        });\r\n        //}\r\n    };\r\n    /**\r\n     * [invalidateDataUsers description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    Component.prototype.invalidateDataUsers = function () {\r\n        $iter.each(this.dataUsers.iterator(), function (x) {\r\n            x.invalidate();\r\n        });\r\n    };\r\n    /**\r\n     * Invalidates data values. When data array is not changed, but values within\r\n     * it changes, we invalidate data so that component would process changes.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.invalidateDataItems = function () {\r\n        if (this.disabled || this.isTemplate) {\r\n            return;\r\n        }\r\n        //if(!this.dataItemsInvalid){\r\n        $array.move(registry.invalidDataItems, this);\r\n        system.requestFrame();\r\n        this.dataItemsInvalid = true;\r\n        $iter.each(this.dataUsers.iterator(), function (x) {\r\n            x.invalidateDataItems();\r\n        });\r\n        //}\r\n    };\r\n    /**\r\n     * Invalidates data range. This is done when data which must be shown\r\n     * changes (chart is zoomed for example).\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.invalidateDataRange = function () {\r\n        if (this.disabled || this.isTemplate) {\r\n            return;\r\n        }\r\n        //if(!this.dataRangeInvalid){\r\n        this.dataRangeInvalid = true;\r\n        $array.move(registry.invalidDataRange, this);\r\n        system.requestFrame();\r\n        //}\r\n    };\r\n    /**\r\n     * Processes data range.\r\n     *\r\n     * @todo Description\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.validateDataRange = function () {\r\n        $array.remove(registry.invalidDataRange, this);\r\n        this.dataRangeInvalid = false;\r\n        if (this.startIndex != this._prevStartIndex || this.endIndex != this._prevEndIndex) {\r\n            this.rangeChangeUpdate();\r\n            this.appendDataItems();\r\n            this.invalidate();\r\n            this.dispatchImmediately(\"datarangechanged\");\r\n        }\r\n    };\r\n    /**\r\n     * [sliceData description]\r\n     *\r\n     * @todo Description\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.sliceData = function () {\r\n        this._workingStartIndex = this.startIndex;\r\n        this._workingEndIndex = this.endIndex;\r\n    };\r\n    /**\r\n     * [rangeChangeUpdate description]\r\n     *\r\n     * @todo Description\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.rangeChangeUpdate = function () {\r\n        this.sliceData();\r\n        this._prevStartIndex = this.startIndex;\r\n        this._prevEndIndex = this.endIndex;\r\n    };\r\n    /**\r\n     * [appendDataItems description]\r\n     *\r\n     * @todo Description\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.appendDataItems = function () {\r\n        // TODO use an iterator instead\r\n        var count = this.endIndex;\r\n        for (var i = this.startIndex; i < count; i++) {\r\n            // data item\r\n            var dataItem = this.dataItems.getIndex(i);\r\n            if (dataItem) {\r\n                dataItem.__disabled = false;\r\n            }\r\n        }\r\n        for (var i = 0; i < this.startIndex; i++) {\r\n            var dataItem = this.dataItems.getIndex(i);\r\n            if (dataItem) {\r\n                dataItem.__disabled = true;\r\n            }\r\n        }\r\n        for (var i = this.endIndex; i < this.dataItems.length; i++) {\r\n            var dataItem = this.dataItems.getIndex(i);\r\n            if (dataItem) {\r\n                dataItem.__disabled = true;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * If you want to have a smooth transition from one data values to another, you change your raw data and then you must call this method.\r\n     * then instead of redrawing everything, the chart will check raw data and smoothly transit from previous to new data\r\n     */\r\n    Component.prototype.invalidateRawData = function () {\r\n        if (this.disabled || this.isTemplate) {\r\n            return;\r\n        }\r\n        //if(!this.rawDataInvalid){\r\n        $array.move(registry.invalidRawDatas, this);\r\n        system.requestFrame();\r\n        this.rawDataInvalid = true;\r\n        $iter.each(this.dataUsers.iterator(), function (x) {\r\n            x.invalidateRawData();\r\n        });\r\n        //}\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Component.prototype.validateRawData = function () {\r\n        var _this = this;\r\n        $array.remove(registry.invalidRawDatas, this);\r\n        $iter.each(this.mainDataSet.iterator(), function (dataItem) {\r\n            if (dataItem) {\r\n                _this.updateDataItem(dataItem);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Destroys this object and all related data.\r\n     */\r\n    Component.prototype.dispose = function () {\r\n        var _this = this;\r\n        this.mainDataSet.template.clones.clear();\r\n        $object.each(this._dataSources, function (key, source) {\r\n            _this.removeDispose(source);\r\n        });\r\n        this.disposeData();\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Component.prototype.disposeData = function () {\r\n        this.mainDataSet.template.clones.clear();\r\n        $array.each(this._dataDisposers, function (x) {\r\n            x.dispose();\r\n        });\r\n        // and for all components\r\n        $iter.each(this.dataUsers.iterator(), function (dataUser) {\r\n            dataUser.disposeData();\r\n        });\r\n        this._dataDisposers.length = 0;\r\n        this._startIndex = undefined;\r\n        this._endIndex = undefined;\r\n        // dispose old\r\n        this.mainDataSet.clear();\r\n        this.mainDataSet.template.clones.clear();\r\n        if (this._dataSets) {\r\n            this._dataSets.clear();\r\n        }\r\n    };\r\n    Component.prototype.getDataItem = function (dataContext) {\r\n        return this.mainDataSet.create();\r\n    };\r\n    /**\r\n     * Validates (processes) data.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.validateData = function () {\r\n        this.dispatchImmediately(\"beforedatavalidated\");\r\n        this.dataInvalid = false;\r\n        registry.removeFromInvalidComponents(this);\r\n        if (this.__disabled) {\r\n            return;\r\n        }\r\n        this.dataValidationProgress = 0;\r\n        // need this to slice new data\r\n        this._prevStartIndex = undefined;\r\n        this._prevEndIndex = undefined;\r\n        // todo: this needs some overthinking, maybe some extra settings like zoomOotonDataupdate like in v3 or so. some charts like pie chart probably should act like this always\r\n        this._startIndex = undefined;\r\n        this._endIndex = undefined;\r\n        if (this.dataFields.data && this.dataItem) {\r\n            var dataContext = this.dataItem.dataContext;\r\n            this._data = dataContext[this.dataFields.data];\r\n        }\r\n        // data items array is reset only if all data is validated, if _parseDataFrom is not 0, we append new data only\r\n        // check heatmap demo if uncommented\r\n        // fixed both issues by adding && this.data.length > 0\r\n        // check adding series example if changed\r\n        if (this._parseDataFrom === 0 && this.data.length > 0) {\r\n            this.disposeData();\r\n        }\r\n        if (this.data.length > 0) {\r\n            var preloader = this.preloader;\r\n            // and for all components\r\n            $iter.each(this.dataUsers.iterator(), function (dataUser) {\r\n                // todo: this needs some overthinking, maybe some extra settings like zoomOUtonDataupdate like in v3 or so. some charts like pie chart probably should act like this always\r\n                dataUser._startIndex = undefined;\r\n                dataUser._endIndex = undefined;\r\n            });\r\n            var counter = 0;\r\n            var startTime = Date.now();\r\n            // parse data\r\n            var i = this._parseDataFrom;\r\n            var n = this.data.length;\r\n            var _loop_1 = function () {\r\n                var rawDataItem = this_1.data[i];\r\n                if (this_1._usesData) {\r\n                    var dataItem = this_1.getDataItem(rawDataItem);\r\n                    this_1.processDataItem(dataItem, rawDataItem);\r\n                }\r\n                this_1.dataUsers.each(function (dataUser) {\r\n                    if (dataUser.data.length == 0) { // checking if data is not set directly\r\n                        var dataUserDataItem = dataUser.getDataItem(rawDataItem);\r\n                        dataUser.processDataItem(dataUserDataItem, rawDataItem);\r\n                    }\r\n                });\r\n                counter++;\r\n                // show preloader if this takes too many time\r\n                if (counter == 100) { // no need to check it on each data item\r\n                    counter = 0;\r\n                    var elapsed = Date.now() - startTime;\r\n                    if (elapsed > this_1.parsingStepDuration) {\r\n                        if (i < this_1.data.length - 10) {\r\n                            this_1._parseDataFrom = i + 1;\r\n                            // update preloader\r\n                            if (preloader) {\r\n                                if (i / this_1.data.length > 0.5 && !preloader.visible) {\r\n                                    // do not start showing\r\n                                }\r\n                                else {\r\n                                    preloader.progress = i / this_1.data.length;\r\n                                }\r\n                            }\r\n                            this_1.dataValidationProgress = i / this_1.data.length;\r\n                            i = this_1.data.length; // stops cycle\r\n                            this_1.invalidateData();\r\n                            return { value: void 0 };\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            var this_1 = this;\r\n            for (i; i < n; i++) {\r\n                var state_1 = _loop_1();\r\n                if (typeof state_1 === \"object\")\r\n                    return state_1.value;\r\n            }\r\n            if (preloader) {\r\n                preloader.progress = 1;\r\n            }\r\n            this.dataUsers.each(function (dataUser) {\r\n                if (dataUser.hidden || (dataUser.appeared && !dataUser.visible && dataUser.stacked)) {\r\n                    dataUser.hide(0);\r\n                }\r\n            });\r\n        }\r\n        this.dataValidationProgress = 1;\r\n        this._parseDataFrom = 0; // reset this index, it is set to dataItems.length if addData() method was used.\r\n        this.invalidateDataItems();\r\n        if (!this._internalDefaultsApplied) {\r\n            this.applyInternalDefaults();\r\n        }\r\n        this.dispatch(\"datavalidated\"); // can't zoom chart if dispatched immediately\r\n    };\r\n    /**\r\n     * Validates (processes) data items.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.validateDataItems = function () {\r\n        $array.remove(registry.invalidDataItems, this);\r\n        this.dataItemsInvalid = false;\r\n        this.invalidateDataRange();\r\n        this.invalidate();\r\n        this.dispatch(\"dataitemsvalidated\");\r\n    };\r\n    Object.defineProperty(Component.prototype, \"data\", {\r\n        /**\r\n         * Returns element's source (raw) data.\r\n         *\r\n         * @return Data\r\n         */\r\n        get: function () {\r\n            if (!this._data) {\r\n                this._data = [];\r\n            }\r\n            if (!this._adapterO) {\r\n                return this._data;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"data\", this._data);\r\n            }\r\n        },\r\n        /**\r\n         * Sets source (raw) data for the element. The \"data\" is always an `Array`\r\n         * of objects.\r\n         *\r\n         * IMPORTANT: The order of data items in `data` array is important as it\r\n         * might affect chart look and behavior. [More details](https://www.amcharts.com/docs/v4/concepts/data/#Order_of_data_items).\r\n         *\r\n         * @param value Data\r\n         */\r\n        set: function (value) {\r\n            this.setData(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Component.prototype.setData = function (value) {\r\n        // array might be the same, but there might be items added\r\n        // todo: check if array changed, toString maybe?\r\n        if (!this.isDisposed()) {\r\n            this._parseDataFrom = 0;\r\n            this.disposeData();\r\n            this._data = value;\r\n            if (value && value.length > 0) {\r\n                this.invalidateData();\r\n            }\r\n            else {\r\n                this.dispatchImmediately(\"beforedatavalidated\");\r\n                this.dispatch(\"datavalidated\");\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns (creates if necessary) a [[DataSource]] bound to any specific\r\n     * property.\r\n     *\r\n     * For example if I want to bind `data` to an external JSON file, I'd create\r\n     * a DataSource for it.\r\n     *\r\n     * @param property  Property to bind external data to\r\n     * @return A DataSource for property\r\n     */\r\n    Component.prototype.getDataSource = function (property) {\r\n        var _this = this;\r\n        if (!$type.hasValue(this._dataSources[property])) {\r\n            this._dataSources[property] = new DataSource();\r\n            this._dataSources[property].component = this;\r\n            this.setDataSourceEvents(this._dataSources[property], property);\r\n            this._dataSources[property].adapter.add(\"dateFields\", function (val) {\r\n                return _this.dataSourceDateFields(val);\r\n            });\r\n            this._dataSources[property].adapter.add(\"numberFields\", function (val) {\r\n                return _this.dataSourceNumberFields(val);\r\n            });\r\n            this.events.on(\"inited\", function () {\r\n                _this.loadData(property);\r\n            }, this, false);\r\n        }\r\n        return this._dataSources[property];\r\n    };\r\n    Object.defineProperty(Component.prototype, \"dataSource\", {\r\n        /**\r\n         * @return Data source\r\n         */\r\n        get: function () {\r\n            if (!this._dataSources[\"data\"]) {\r\n                this.getDataSource(\"data\");\r\n            }\r\n            return this._dataSources[\"data\"];\r\n        },\r\n        /**\r\n         *A [[DataSource]] to be used for loading Component's data.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/loading-external-data/} for more on loading external data\r\n         * @param value  Data source\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            if (this._dataSources[\"data\"]) {\r\n                this.removeDispose(this._dataSources[\"data\"]);\r\n            }\r\n            this._dataSources[\"data\"] = value;\r\n            this._dataSources[\"data\"].component = this;\r\n            this.events.on(\"inited\", function () {\r\n                _this.loadData(\"data\");\r\n            }, this, false);\r\n            this.setDataSourceEvents(value, \"data\");\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Initiates loading of the external data via [[DataSource]].\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.loadData = function (property) {\r\n        this._dataSources[property].load();\r\n    };\r\n    /**\r\n     * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n     * so that particular chart types can popuplate this setting with their\r\n     * own type-specific data fields so they are parsed properly.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Array of date fields\r\n     * @return Array of date fields populated with chart's date fields\r\n     */\r\n    Component.prototype.dataSourceDateFields = function (value) {\r\n        return value;\r\n    };\r\n    /**\r\n     * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n     * so that particular chart types can popuplate this setting with their\r\n     * own type-specific data fields so they are parsed properly.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Array of number fields\r\n     * @return Array of number fields populated with chart's number fields\r\n     */\r\n    Component.prototype.dataSourceNumberFields = function (value) {\r\n        return value;\r\n    };\r\n    /**\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param list        [description]\r\n     * @param dataFields  [description]\r\n     * @param targetList  [description]\r\n     * @return [description]\r\n     */\r\n    Component.prototype.populateDataSourceFields = function (list, dataFields, targetList) {\r\n        $array.each(targetList, function (value) {\r\n            if (dataFields[value] && $array.indexOf(list, dataFields[value]) === -1) {\r\n                list.push(dataFields[value]);\r\n            }\r\n        });\r\n        return list;\r\n    };\r\n    /**\r\n     * Sets events on a [[DataSource]].\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.setDataSourceEvents = function (ds, property) {\r\n        var _this = this;\r\n        ds.events.on(\"started\", function (ev) {\r\n            var preloader = _this.preloader;\r\n            if (preloader) {\r\n                preloader.progress = 0;\r\n                //preloader.label.text = this.language.translate(\"Loading\");\r\n            }\r\n        }, undefined, false);\r\n        ds.events.on(\"loadstarted\", function (ev) {\r\n            var preloader = _this.preloader;\r\n            if (preloader) {\r\n                preloader.progress = 0.25;\r\n            }\r\n        }, undefined, false);\r\n        ds.events.on(\"loadended\", function (ev) {\r\n            var preloader = _this.preloader;\r\n            if (preloader) {\r\n                preloader.progress = 0.5;\r\n            }\r\n        }, undefined, false);\r\n        ds.events.on(\"parseended\", function (ev) {\r\n            var preloader = _this.preloader;\r\n            if (preloader) {\r\n                preloader.progress = 0.75;\r\n            }\r\n        }, undefined, false);\r\n        ds.events.on(\"ended\", function (ev) {\r\n            var preloader = _this.preloader;\r\n            if (preloader) {\r\n                preloader.progress = 1;\r\n            }\r\n        }, undefined, false);\r\n        ds.events.on(\"error\", function (ev) {\r\n            var preloader = _this.preloader;\r\n            if (preloader) {\r\n                preloader.progress = 1;\r\n            }\r\n            _this.openModal(ev.message);\r\n        }, undefined, false);\r\n        if (property) {\r\n            ds.events.on(\"done\", function (ev) {\r\n                var preloader = _this.preloader;\r\n                if (preloader) {\r\n                    preloader.progress = 1;\r\n                }\r\n                if (property == \"data\" && !$type.isArray(ev.data)) {\r\n                    ev.data = [ev.data];\r\n                }\r\n                if (ds.incremental && property == \"data\" && _this.data.length) {\r\n                    _this.addData(ev.data, ds.keepCount ? ev.data.length : 0);\r\n                }\r\n                else if (ds.updateCurrentData && property == \"data\" && _this.data.length) {\r\n                    // cycle through existing data items\r\n                    $array.each(_this.data, function (item, index) {\r\n                        if ($type.hasValue(ev.data[index])) {\r\n                            $object.each(item, function (key, val) {\r\n                                if ($type.hasValue(ev.data[index][key])) {\r\n                                    item[key] = ev.data[index][key];\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                    _this.invalidateRawData();\r\n                }\r\n                else {\r\n                    _this[property] = ev.data;\r\n                }\r\n            });\r\n        }\r\n    };\r\n    Object.defineProperty(Component.prototype, \"responsive\", {\r\n        /**\r\n         * @return Responsive rules handler\r\n         */\r\n        get: function () {\r\n            if (!this._responsive) {\r\n                this._responsive = new Responsive();\r\n                this._responsive.component = this;\r\n            }\r\n            return this._responsive;\r\n        },\r\n        /**\r\n         * A [[Responsive]] instance to be used when applying conditional\r\n         * property values.\r\n         *\r\n         * NOTE: Responsive features are currently in development and may not work\r\n         * as expected, if at all.\r\n         *\r\n         * @param value  Responsive rules handler\r\n         */\r\n        set: function (value) {\r\n            this._responsive = value;\r\n            this._responsive.component = this;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets current zoom.\r\n     *\r\n     * The range uses relative values from 0 to 1, with 0 marking beginning and 1\r\n     * marking end of the available data range.\r\n     *\r\n     * This method will not have any effect when called on a chart object.\r\n     * Since the chart can have a number of axes and series, each with its own\r\n     * data, the meaning of \"range\" is very ambiguous.\r\n     *\r\n     * To zoom the chart use `zoom*` methods on its respective axes.\r\n     *\r\n     * @param range          Range\r\n     * @param skipRangeEvent Should rangechanged event not be triggered?\r\n     * @param instantly      Do not animate?\r\n     * @return Actual modidied range (taking `maxZoomFactor` into account)\r\n     */\r\n    Component.prototype.zoom = function (range, skipRangeEvent, instantly, declination) {\r\n        var _this = this;\r\n        if (skipRangeEvent === void 0) { skipRangeEvent = false; }\r\n        if (instantly === void 0) { instantly = false; }\r\n        var start = range.start;\r\n        var end = range.end;\r\n        var priority = range.priority;\r\n        if (range.start == range.end) {\r\n            range.start = range.start - 0.5 / this.maxZoomFactor;\r\n            range.end = range.end + 0.5 / this.maxZoomFactor;\r\n        }\r\n        if (priority == \"end\" && end == 1 && start != 0) {\r\n            if (start < this.start) {\r\n                priority = \"start\";\r\n            }\r\n        }\r\n        if (priority == \"start\" && start == 0) {\r\n            if (end > this.end) {\r\n                priority = \"end\";\r\n            }\r\n        }\r\n        if (!$type.isNumber(declination)) {\r\n            declination = this.maxZoomDeclination;\r\n        }\r\n        if (!$type.isNumber(start) || !$type.isNumber(end)) {\r\n            return { start: this.start, end: this.end };\r\n        }\r\n        if (this._finalStart != start || this._finalEnd != end) {\r\n            var maxZoomFactor = this.maxZoomFactor / this.minZoomCount;\r\n            var minZoomFactor = this.maxZoomFactor / this.maxZoomCount;\r\n            // most likely we are dragging left scrollbar grip here, so we tend to modify end\r\n            if (priority == \"start\") {\r\n                if (this.maxZoomCount > 0) {\r\n                    // add to the end\r\n                    if (1 / (end - start) < minZoomFactor) {\r\n                        end = start + 1 / minZoomFactor;\r\n                    }\r\n                }\r\n                // add to the end\r\n                if (1 / (end - start) > maxZoomFactor) {\r\n                    end = start + 1 / maxZoomFactor;\r\n                }\r\n                //unless end is > 0\r\n                if (end > 1 && end - start < 1 / maxZoomFactor) {\r\n                    //end = 1;\r\n                    start = end - 1 / maxZoomFactor;\r\n                }\r\n            }\r\n            // most likely we are dragging right, so we modify left\r\n            else {\r\n                if (this.maxZoomCount > 0) {\r\n                    // add to the end\r\n                    if (1 / (end - start) < minZoomFactor) {\r\n                        start = end - 1 / minZoomFactor;\r\n                    }\r\n                }\r\n                // remove from start\r\n                if (1 / (end - start) > maxZoomFactor) {\r\n                    if (start <= 0) {\r\n                        end = start + 1 / maxZoomFactor;\r\n                    }\r\n                    else {\r\n                        start = end - 1 / maxZoomFactor;\r\n                    }\r\n                }\r\n                if (start < 0 && end - start < 1 / maxZoomFactor) {\r\n                    //start = 0;\r\n                    end = start + 1 / maxZoomFactor;\r\n                }\r\n            }\r\n            if (start < -declination) {\r\n                start = -declination;\r\n            }\r\n            if (1 / (end - start) > maxZoomFactor) {\r\n                end = start + 1 / maxZoomFactor;\r\n            }\r\n            if (end > 1 + declination) {\r\n                end = 1 + declination;\r\n            }\r\n            if (1 / (end - start) > maxZoomFactor) {\r\n                start = end - 1 / maxZoomFactor;\r\n            }\r\n            this._finalEnd = end;\r\n            this._finalStart = start;\r\n            this.skipRangeEvent = skipRangeEvent;\r\n            this.dispatchImmediately(\"rangechangestarted\");\r\n            if (this.rangeChangeDuration > 0 && !instantly) {\r\n                // todo: maybe move this to Animation\r\n                var rangeChangeAnimation = this.rangeChangeAnimation;\r\n                if (rangeChangeAnimation && rangeChangeAnimation.progress < 1) {\r\n                    var options = rangeChangeAnimation.animationOptions;\r\n                    if (options.length > 1) {\r\n                        if (options[0].to == start && options[1].to == end) {\r\n                            return { start: start, end: end };\r\n                        }\r\n                        else {\r\n                            if (!rangeChangeAnimation.isDisposed()) {\r\n                                rangeChangeAnimation.stop();\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (this.rangeChangeAnimation) {\r\n                    this.rangeChangeAnimation.kill();\r\n                }\r\n                rangeChangeAnimation = this.animate([{ property: \"start\", to: start }, { property: \"end\", to: end }], this.rangeChangeDuration, this.rangeChangeEasing);\r\n                this.rangeChangeAnimation = rangeChangeAnimation;\r\n                if (rangeChangeAnimation && !rangeChangeAnimation.isFinished()) {\r\n                    rangeChangeAnimation.events.on(\"animationended\", function () {\r\n                        _this.dispatchImmediately(\"rangechangeended\");\r\n                    });\r\n                }\r\n                else {\r\n                    this.dispatchImmediately(\"rangechangeended\");\r\n                }\r\n            }\r\n            else {\r\n                this.start = start;\r\n                this.end = end;\r\n                this.dispatch(\"rangechangeended\");\r\n            }\r\n        }\r\n        return { start: start, end: end };\r\n    };\r\n    /**\r\n     * Zooms to specific data items using their index in data.\r\n     *\r\n     * This method will not have any effect when called on a chart object.\r\n     * Since the chart can have a number of axes and series, each with its own\r\n     * data, the meaning of \"index\" is very ambiguous.\r\n     *\r\n     * To zoom the chart use `zoom*` methods on its respective axes.\r\n     *\r\n     * @param startIndex     Index of the starting data item\r\n     * @param endIndex       Index of the ending data item\r\n     * @param skipRangeEvent Should rangechanged event not be triggered?\r\n     * @param instantly      Do not animate?\r\n     */\r\n    Component.prototype.zoomToIndexes = function (startIndex, endIndex, skipRangeEvent, instantly) {\r\n        if (!$type.isNumber(startIndex) || !$type.isNumber(endIndex)) {\r\n            return;\r\n        }\r\n        var start = startIndex / this.dataItems.length;\r\n        var end = endIndex / this.dataItems.length;\r\n        this.zoom({ start: start, end: end }, skipRangeEvent, instantly);\r\n    };\r\n    Object.defineProperty(Component.prototype, \"zoomFactor\", {\r\n        /**\r\n         * A current zoom factor (0-1). 1 meaning fully zoomed out. (showing all of\r\n         * the available data)\r\n         *\r\n         * @return Zoom factor\r\n         */\r\n        get: function () {\r\n            return $math.fitToRange(1 / (this.end - this.start), 1, this.maxZoomFactor);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Component.prototype, \"maxZoomFactor\", {\r\n        /**\r\n         * @return Maximum zoomFactor\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maxZoomFactor\");\r\n        },\r\n        /**\r\n         * Max available `zoomFactor`.\r\n         *\r\n         * The element will not allow zoom to occur beyond this factor.\r\n         *\r\n         * [[DateAxis]] and [[CategoryAxis]] calculate this atutomatically so that\r\n         * category axis could be zoomed to one category and date axis allows to be\r\n         * zoomed up to one base interval.\r\n         *\r\n         * In case you want to restrict category or date axis to be zoomed to more\r\n         * than one category or more than one base interval, use `minZoomCount`\r\n         * property (set it to `> 1`).\r\n         *\r\n         * Default value of [[ValueAxis]]'s `maxZoomFactor` is `1000`.\r\n         *\r\n         * Feel free to modify it to allow bigger zoom or to restrict zooming.\r\n         *\r\n         * @param value  Maximum zoomFactor\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"maxZoomFactor\", value)) {\r\n                if (value == 1) {\r\n                    this.maxZoomDeclination = 0;\r\n                }\r\n                this.invalidateDataRange();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Component.prototype, \"maxZoomDeclination\", {\r\n        /**\r\n         * @ignore\r\n         * @return Maximum zoom declination\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maxZoomDeclination\");\r\n        },\r\n        /**\r\n         * Max zoom declination.\r\n         *\r\n         * @ignore\r\n         * @default 1\r\n         * @param value  Maximum zoom declination\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"maxZoomDeclination\", value)) {\r\n                this.invalidateDataRange();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Component.prototype, \"startIndex\", {\r\n        /**\r\n         * Current starting index.\r\n         *\r\n         * @return Start index\r\n         */\r\n        get: function () {\r\n            if (!$type.isNumber(this._startIndex)) {\r\n                this._startIndex = 0;\r\n            }\r\n            return this._startIndex;\r\n        },\r\n        /**\r\n         * Sets current starting index.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value Start index\r\n         */\r\n        set: function (value) {\r\n            this._startIndex = $math.fitToRange(Math.round(value), 0, this.dataItems.length);\r\n            //this._workingStartIndex = this._startIndex; // not good, breaks adjusted working start index of line series\r\n            this.start = this.indexToPosition(this._startIndex);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     * @todo:review description\r\n     * returns item's relative position by the index of the item\r\n     * @param index\r\n     */\r\n    Component.prototype.indexToPosition = function (index) {\r\n        return index / this.dataItems.length;\r\n    };\r\n    Object.defineProperty(Component.prototype, \"endIndex\", {\r\n        /**\r\n         * Current ending index.\r\n         *\r\n         * @return End index\r\n         */\r\n        get: function () {\r\n            var count = this.dataItems.length;\r\n            if (!$type.isNumber(this._endIndex) || this._endIndex > count) {\r\n                this._endIndex = count;\r\n            }\r\n            return this._endIndex;\r\n        },\r\n        /**\r\n         * Sets current ending index.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value End index\r\n         */\r\n        set: function (value) {\r\n            this._endIndex = $math.fitToRange(Math.round(value), 0, this.dataItems.length);\r\n            //this._workingEndIndex = this._endIndex; // not good, breaks adjusted workingend index of line series\r\n            this.end = this.indexToPosition(this._endIndex);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Component.prototype, \"start\", {\r\n        /**\r\n         * @return Start (0-1)\r\n         */\r\n        get: function () {\r\n            if (!this._adapterO) {\r\n                return this._start;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"start\", this._start);\r\n            }\r\n        },\r\n        /**\r\n         * Start of the current data range (zoom).\r\n         *\r\n         * These are relative values from 0 (beginning) to 1 (end).\r\n         *\r\n         * @param value Start (0-1)\r\n         */\r\n        set: function (value) {\r\n            // value = $math.round(value, 10); not good\r\n            //if (1 / (this.end - value) > this.maxZoomFactor) {\r\n            //\tvalue = this.end - 1 / this.maxZoomFactor;\r\n            //}\r\n            if (this._start != value) {\r\n                this._start = value;\r\n                var startIndex = Math.max(0, Math.floor(this.dataItems.length * value) || 0);\r\n                this._startIndex = Math.min(startIndex, this.dataItems.length);\r\n                this.invalidateDataRange();\r\n                this.invalidate();\r\n                this.dispatchImmediately(\"startchanged\");\r\n                this.dispatch(\"startendchanged\");\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Component.prototype, \"end\", {\r\n        /**\r\n         * @return End (0-1)\r\n         */\r\n        get: function () {\r\n            if (!this._adapterO) {\r\n                return this._end;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"end\", this._end);\r\n            }\r\n        },\r\n        /**\r\n         * End of the current data range (zoom).\r\n         *\r\n         * These are relative values from 0 (beginning) to 1 (end).\r\n         *\r\n         * @param value End (0-1)\r\n         */\r\n        set: function (value) {\r\n            // value = $math.round(value, 10); // not good\r\n            //if (1 / (value - this.start) > this.maxZoomFactor) {\r\n            //\tvalue = 1 / this.maxZoomFactor + this.start;\r\n            //}\r\n            if (this._end != value) {\r\n                this._end = value;\r\n                this._endIndex = Math.min(this.dataItems.length, Math.ceil(this.dataItems.length * value) || 0);\r\n                this.invalidateDataRange();\r\n                this.invalidate();\r\n                this.dispatchImmediately(\"endchanged\");\r\n                this.dispatch(\"startendchanged\");\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * [removeFromInvalids description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    Component.prototype.removeFromInvalids = function () {\r\n        _super.prototype.removeFromInvalids.call(this);\r\n        registry.removeFromInvalidComponents(this);\r\n        $array.remove(registry.invalidDataItems, this);\r\n        $array.remove(registry.invalidDataRange, this);\r\n        $array.remove(registry.invalidRawDatas, this);\r\n    };\r\n    Object.defineProperty(Component.prototype, \"dataItems\", {\r\n        /**\r\n         * Returns a list of source [[DataItem]] objects currently used in the chart.\r\n         *\r\n         * @return List of data items\r\n         */\r\n        get: function () {\r\n            if (this._currentDataSetId != \"\") {\r\n                var dataItems = this.dataSets.getKey(this._currentDataSetId);\r\n                if (dataItems) {\r\n                    return dataItems;\r\n                }\r\n            }\r\n            return this._dataItems;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Component.prototype, \"dataSets\", {\r\n        /**\r\n         * Holds data items for data sets (usually aggregated data).\r\n         *\r\n         * @ignore\r\n         * @since 4.7.0\r\n         * @return  Data sets\r\n         */\r\n        get: function () {\r\n            if (!this._dataSets) {\r\n                this._dataSets = new Dictionary();\r\n            }\r\n            return this._dataSets;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Makes the chart use particular data set.\r\n     *\r\n     * If `id` is not provided or there is no such data set, main data will be\r\n     * used.\r\n     *\r\n     * @ignore\r\n     * @since 4.7.0\r\n     * @param  id  Data set id\r\n     */\r\n    Component.prototype.setDataSet = function (id) {\r\n        if (this._currentDataSetId != id) {\r\n            var dataSet = this.dataSets.getKey(id);\r\n            if (!dataSet) {\r\n                if (this._currentDataSetId != \"\") {\r\n                    this.dataItems.each(function (dataItem) {\r\n                        dataItem.__disabled = true;\r\n                    });\r\n                    this._currentDataSetId = \"\";\r\n                    this.invalidateDataRange();\r\n                    this._prevStartIndex = undefined;\r\n                    this.dataItems.each(function (dataItem) {\r\n                        dataItem.__disabled = false;\r\n                    });\r\n                    return true;\r\n                }\r\n            }\r\n            else {\r\n                this.dataItems.each(function (dataItem) {\r\n                    dataItem.__disabled = true;\r\n                });\r\n                this._currentDataSetId = id;\r\n                this.invalidateDataRange();\r\n                this._prevStartIndex = undefined;\r\n                this.dataItems.each(function (dataItem) {\r\n                    dataItem.__disabled = false;\r\n                });\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    Object.defineProperty(Component.prototype, \"currentDataSetId\", {\r\n        /**\r\n         * Returns id of the currently used data set, or `undefined` if main data set\r\n         * is in use.\r\n         *\r\n         * @since 4.7.0\r\n         * @return Current data set id\r\n         */\r\n        get: function () {\r\n            return this._currentDataSetId;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Component.prototype, \"mainDataSet\", {\r\n        /**\r\n         * Returns reference to \"main\" data set (unaggregated data as it was supplied\r\n         * in `data`).\r\n         *\r\n         * @since 4.7.0\r\n         * @return Main data set\r\n         */\r\n        get: function () {\r\n            return this._dataItems;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Updates the indexes for the dataItems\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype._updateDataItemIndexes = function (startIndex) {\r\n        var dataItems = this.mainDataSet.values;\r\n        var length = dataItems.length;\r\n        for (var i = startIndex; i < length; ++i) {\r\n            dataItems[i]._index = i;\r\n        }\r\n    };\r\n    /**\r\n     * Processes newly added [[DataItem]] as well as triggers data re-validation.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event [description]\r\n     */\r\n    Component.prototype.handleDataItemAdded = function (event) {\r\n        event.newValue.component = this;\r\n        this._updateDataItemIndexes(event.index);\r\n        if (!this.dataItemsInvalid) {\r\n            this.invalidateDataItems();\r\n        }\r\n    };\r\n    /**\r\n     * removes [[DataItem]] as well as triggers data re-validation.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event [description]\r\n     */\r\n    Component.prototype.handleDataItemRemoved = function (event) {\r\n        //\t\tevent.oldValue.component = undefined; // not good, as some items might be not removed from component lists\r\n        this._updateDataItemIndexes(event.index);\r\n        if (!this.dataItemsInvalid) {\r\n            this.invalidateDataItems();\r\n        }\r\n    };\r\n    /**\r\n     * Binds a data element's field to a specific field in raw data.\r\n     * For example, for the very basic column chart you'd want to bind a `value`\r\n     * field to a field in data, such as `price`.\r\n     *\r\n     * Some more advanced Components, like [[CandlestickSeries]] need several\r\n     * data fields bound to data, such as ones for open, high, low and close\r\n     * values.\r\n     *\r\n     * @todo Example\r\n     * @param field  Field name\r\n     * @param value  Field name in data\r\n     */\r\n    Component.prototype.bindDataField = function (field, value) {\r\n        this.dataFields[field] = value;\r\n        this.invalidateDataRange();\r\n    };\r\n    /**\r\n     * Invalidates processed data.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype.invalidateProcessedData = function () {\r\n        this.resetProcessedRange();\r\n        this.invalidateDataRange();\r\n    };\r\n    /**\r\n     * [resetProcessedRange description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    Component.prototype.resetProcessedRange = function () {\r\n        this._prevEndIndex = null;\r\n        this._prevStartIndex = null;\r\n    };\r\n    Object.defineProperty(Component.prototype, \"dataUsers\", {\r\n        /**\r\n         * Returns all other [[Component]] objects that are using this element's\r\n         * data.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description (review)\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            if (!this._dataUsers) {\r\n                this._dataUsers = new List();\r\n                //this._disposers.push(new ListDisposer(this._dataUsers));\r\n                // TODO better way of handling this? e.g. move into another module ?\r\n                this._disposers.push(new Disposer(function () {\r\n                    // TODO clear the list ?\r\n                    $iter.each(_this._dataUsers.iterator(), function (x) {\r\n                        x.dispose();\r\n                    });\r\n                }));\r\n            }\r\n            return this._dataUsers;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a clone of this element.\r\n     *\r\n     * @return Clone\r\n     */\r\n    Component.prototype.clone = function () {\r\n        var component = _super.prototype.clone.call(this);\r\n        component.dataFields = $utils.copyProperties(this.dataFields, {});\r\n        return component;\r\n    };\r\n    /**\r\n     * Copies all parameters from another [[Component]].\r\n     *\r\n     * @param source Source Component\r\n     */\r\n    Component.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.data = source.data;\r\n        this.sequencedInterpolation = source.sequencedInterpolation;\r\n        this.sequencedInterpolationDelay = source.sequencedInterpolationDelay;\r\n        this.interpolationDuration = source.interpolationDuration;\r\n        this.interpolationEasing = source.interpolationEasing;\r\n    };\r\n    /**\r\n     * Invalidates the whole element, including all its children, causing\r\n     * complete re-parsing of data and redraw.\r\n     *\r\n     * Use sparingly!\r\n     */\r\n    Component.prototype.reinit = function () {\r\n        this._inited = false;\r\n        this.deepInvalidate();\r\n    };\r\n    /**\r\n     * Add an adapter for data.\r\n     *\r\n     * @return Exporting\r\n     */\r\n    Component.prototype.getExporting = function () {\r\n        var _export = _super.prototype.getExporting.call(this);\r\n        if (!_export.adapter.has(\"data\", this._exportData, -1, this)) {\r\n            _export.adapter.add(\"data\", this._exportData, -1, this);\r\n            this.events.on(\"datavalidated\", function (ev) {\r\n                _export.handleDataUpdated();\r\n            });\r\n        }\r\n        return _export;\r\n    };\r\n    Component.prototype._exportData = function (arg) {\r\n        arg.data = this.data;\r\n        return arg;\r\n    };\r\n    Component.prototype.setDisabled = function (value) {\r\n        var changed = _super.prototype.setDisabled.call(this, value);\r\n        if (changed) {\r\n            this.invalidateData();\r\n        }\r\n        return changed;\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Component.prototype.setShowOnInit = function (value) {\r\n        if (value != this.getPropertyValue(\"showOnInit\")) {\r\n            if (value && !this.inited && !this.hidden) {\r\n                this._showOnInitDisposer2 = this.events.once(\"dataitemsvalidated\", this.hideInitially, this, false);\r\n                this._disposers.push(this._showOnInitDisposer2);\r\n            }\r\n            else {\r\n                if (this._showOnInitDisposer2) {\r\n                    this.removeDispose(this._showOnInitDisposer2);\r\n                }\r\n            }\r\n        }\r\n        // important order here\r\n        _super.prototype.setShowOnInit.call(this, value);\r\n    };\r\n    Component.prototype.setBaseId = function (value) {\r\n        if (value != this._baseId) {\r\n            if (this.dataInvalid) {\r\n                this.dataInvalid = false;\r\n                registry.removeFromInvalidComponents(this);\r\n                this._baseId = value;\r\n                this.invalidateData();\r\n            }\r\n        }\r\n        _super.prototype.setBaseId.call(this, value);\r\n    };\r\n    Object.defineProperty(Component.prototype, \"minZoomCount\", {\r\n        /**\r\n         * @return Min zoom count\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"minZoomCount\");\r\n        },\r\n        /**\r\n         * Use this for [[CategoryAxis]] or [[DateAxis]].\r\n         *\r\n         * Allows restricting zoom in beyond certain number of categories or base\r\n         * intervals.\r\n         *\r\n         * @default 1\r\n         * @param value  Min zoom count\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"minZoomCount\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Component.prototype, \"maxZoomCount\", {\r\n        /**\r\n         * @return Max zoom count\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maxZoomCount\");\r\n        },\r\n        /**\r\n         * Use this for [[CategoryAxis]] or [[DateAxis]].\r\n         *\r\n         * Limits how many categories or base intervals can be shown at the same\r\n         * time.\r\n         *\r\n         * If there are more items in the chart, the chart will auto-zoom.\r\n         *\r\n         * @default 0 (no limit)\r\n         * @since 4.6.2\r\n         * @param value  Max zoom count\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"maxZoomCount\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Called during the System.update method\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Component.prototype._systemCheckIfValidate = function () {\r\n        if (this.dataInvalid || (this.dataProvider && this.dataProvider.dataInvalid)) {\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    };\r\n    /**\r\n     * Adds easing functions to \"function\" fields.\r\n     *\r\n     * @param field  Field name\r\n     * @return Assign as function?\r\n     */\r\n    Component.prototype.asFunction = function (field) {\r\n        return field == \"interpolationEasing\" || field == \"rangeChangeEasing\" || _super.prototype.asIs.call(this, field);\r\n    };\r\n    return Component;\r\n}(Container));\r\nexport { Component };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Component\"] = Component;\r\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,IAAI,EAAEC,YAAY,QAAQ,cAAc;AACjD,SAASC,mBAAmB,QAAQ,oBAAoB;AACxD,SAASC,UAAU,QAAQ,oBAAoB;AAC/C,SAASC,QAAQ,EAAEC,aAAa,QAAQ,kBAAkB;AAC1D,SAASC,UAAU,QAAQ,mBAAmB;AAC9C,SAASC,UAAU,QAAQ,oBAAoB;AAC/C,SAASC,MAAM,QAAQ,UAAU;AACjC,SAASC,QAAQ,QAAQ,YAAY;AACrC,SAASC,QAAQ,QAAQ,YAAY;AACrC,OAAO,KAAKC,KAAK,MAAM,cAAc;AACrC,OAAO,KAAKC,MAAM,MAAM,eAAe;AACvC,OAAO,KAAKC,KAAK,MAAM,cAAc;AACrC,OAAO,KAAKC,MAAM,MAAM,eAAe;AACvC,OAAO,KAAKC,KAAK,MAAM,kBAAkB;AACzC,OAAO,KAAKC,OAAO,MAAM,gBAAgB;AACzC,OAAO,KAAKC,KAAK,MAAM,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,SAAS,GAAG,aAAe,UAAUC,MAAM,EAAE;EAC7CrB,SAAS,CAACoB,SAAS,EAAEC,MAAM,CAAC;EAC5B;AACJ;AACA;EACI,SAASD,SAASA,CAAA,EAAG;IACjB,IAAIE,KAAK;IACT;IACAD,MAAM,CAACE,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI;IACzB;AACR;AACA;AACA;AACA;AACA;IACQD,KAAK,CAACE,UAAU,GAAG,CAAC,CAAC;IACrB;AACR;AACA;AACA;AACA;IACQF,KAAK,CAACG,YAAY,GAAG,CAAC,CAAC;IACvB;AACR;AACA;AACA;AACA;AACA;IACQH,KAAK,CAACI,cAAc,GAAG,CAAC;IACxB;AACR;AACA;AACA;AACA;IACQJ,KAAK,CAACK,cAAc,GAAG,EAAE;IACzB;AACR;AACA;AACA;AACA;IACQL,KAAK,CAACM,iBAAiB,GAAG,EAAE;IAC5B;AACR;AACA;AACA;AACA;IACQN,KAAK,CAACO,MAAM,GAAG,CAAC;IAChB;AACR;AACA;AACA;AACA;IACQP,KAAK,CAACQ,IAAI,GAAG,CAAC;IACd;AACR;AACA;AACA;IACQR,KAAK,CAACS,cAAc,GAAG,KAAK;IAC5B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQT,KAAK,CAACU,mBAAmB,GAAG,CAAC;IAC7B;AACR;AACA;AACA;AACA;AACA;IACQV,KAAK,CAACW,iBAAiB,GAAGlB,KAAK,CAACmB,QAAQ;IACxC;AACR;AACA;AACA;AACA;AACA;AACA;IACQZ,KAAK,CAACa,mBAAmB,GAAG,EAAE;IAC9B;AACR;AACA;AACA;AACA;AACA;IACQb,KAAK,CAACc,WAAW,GAAG,KAAK;IACzB;AACR;AACA;AACA;IACQd,KAAK,CAACe,cAAc,GAAG,KAAK;IAC5B;AACR;AACA;AACA;AACA;AACA;IACQf,KAAK,CAACgB,gBAAgB,GAAG,KAAK;IAC9B;AACR;AACA;AACA;AACA;AACA;IACQhB,KAAK,CAACiB,gBAAgB,GAAG,KAAK;IAC9B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQjB,KAAK,CAACkB,qBAAqB,GAAG,CAAC;IAC/B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQlB,KAAK,CAACmB,mBAAmB,GAAG1B,KAAK,CAACmB,QAAQ;IAC1C;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQZ,KAAK,CAACoB,sBAAsB,GAAG,IAAI;IACnC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQpB,KAAK,CAACqB,2BAA2B,GAAG,CAAC;IACrC;AACR;AACA;AACA;AACA;IACQrB,KAAK,CAACsB,sBAAsB,GAAG,CAAC;IAChCtB,KAAK,CAACuB,gBAAgB,GAAG,IAAI;IAC7BvB,KAAK,CAACwB,SAAS,GAAG,IAAI;IACtBxB,KAAK,CAACyB,SAAS,GAAG,WAAW;IAC7BzB,KAAK,CAAC0B,YAAY,GAAG,CAA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}