{"ast":null,"code":"/**\r\n * Percent chart module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { SerialChart, SerialChartDataItem } from \"./SerialChart\";\nimport { PercentSeries } from \"../series/PercentSeries\";\nimport { registry } from \"../../core/Registry\";\nimport * as $iter from \"../../core/utils/Iterator\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines a [[DataItem]] for [[PercentChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar PercentChartDataItem = /** @class */function (_super) {\n  __extends(PercentChartDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function PercentChartDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"PercentChartDataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  return PercentChartDataItem;\n}(SerialChartDataItem);\nexport { PercentChartDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * This is a base class for \"percent-based\" chart types like Pie and Funnel.\r\n *\r\n * @see {@link IPercentChartEvents} for a list of available Events\r\n * @see {@link IPercentChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for Pie chart documentation\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for Sliced chart documentation\r\n */\nvar PercentChart = /** @class */function (_super) {\n  __extends(PercentChart, _super);\n  /**\r\n   * Constructor\r\n   */\n  function PercentChart() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    _this.className = \"PercentChart\";\n    _this.align = \"none\";\n    _this.valign = \"none\";\n    // so that the chart is always drawn, even the legend wants all the space\n    _this.chartContainer.minHeight = 50;\n    _this.chartContainer.minWidth = 50;\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * (Re)validates chart data.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  PercentChart.prototype.validateData = function () {\n    _super.prototype.validateData.call(this);\n    this.feedLegend();\n  };\n  /**\r\n   * Setups the legend to use the chart's data.\r\n   * @ignore\r\n   */\n  PercentChart.prototype.feedLegend = function () {\n    var legend = this.legend;\n    if (legend) {\n      var legendData_1 = [];\n      $iter.each(this.series.iterator(), function (series) {\n        if (!series.hiddenInLegend) {\n          $iter.each(series.dataItems.iterator(), function (dataItem) {\n            if (!dataItem.hiddenInLegend) {\n              legendData_1.push(dataItem);\n              if (!dataItem.legendSettings) {\n                dataItem.legendSettings = series.legendSettings;\n              }\n            }\n          });\n        }\n      });\n      legend.data = legendData_1;\n      legend.dataFields.name = \"category\";\n    }\n  };\n  /**\r\n   * Creates a new [[PercentSeries]].\r\n   *\r\n   * @return New series\r\n   */\n  PercentChart.prototype.createSeries = function () {\n    return new PercentSeries();\n  };\n  /**\r\n   * @ignore\r\n   */\n  PercentChart.prototype.setLegend = function (legend) {\n    _super.prototype.setLegend.call(this, legend);\n    if (legend) {\n      legend.labels.template.text = \"{category}\";\n      legend.valueLabels.template.text = \"{value.percent.formatNumber('#.0p')}\";\n      legend.itemContainers.template.events.on(\"over\", function (event) {\n        var percentSeriesDataItem = event.target.dataItem.dataContext;\n        if (percentSeriesDataItem.visible && !percentSeriesDataItem.isHiding) {\n          var slice = percentSeriesDataItem.slice;\n          slice.dispatchImmediately(\"over\");\n          slice.isHover = true;\n          slice.interactions.isRealHover = true;\n        }\n      });\n      legend.itemContainers.template.events.on(\"out\", function (event) {\n        var percentSeriesDataItem = event.target.dataItem.dataContext;\n        var slice = percentSeriesDataItem.slice;\n        slice.dispatchImmediately(\"out\");\n        slice.isHover = false;\n      });\n    }\n  };\n  return PercentChart;\n}(SerialChart);\nexport { PercentChart };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @hidden\r\n */\nregistry.registeredClasses[\"PercentChart\"] = PercentChart;\nregistry.registeredClasses[\"PercentChartDataItem\"] = PercentChartDataItem;","map":{"version":3,"names":["__extends","SerialChart","SerialChartDataItem","PercentSeries","registry","$iter","PercentChartDataItem","_super","_this","call","className","applyTheme","PercentChart","align","valign","chartContainer","minHeight","minWidth","prototype","validateData","feedLegend","legend","legendData_1","each","series","iterator","hiddenInLegend","dataItems","dataItem","push","legendSettings","data","dataFields","name","createSeries","setLegend","labels","template","text","valueLabels","itemContainers","events","on","event","percentSeriesDataItem","target","dataContext","visible","isHiding","slice","dispatchImmediately","isHover","interactions","isRealHover","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/charts/types/PercentChart.js"],"sourcesContent":["/**\r\n * Percent chart module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, SerialChartDataItem } from \"./SerialChart\";\r\nimport { PercentSeries } from \"../series/PercentSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[PercentChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar PercentChartDataItem = /** @class */ (function (_super) {\r\n    __extends(PercentChartDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PercentChartDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PercentChartDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return PercentChartDataItem;\r\n}(SerialChartDataItem));\r\nexport { PercentChartDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * This is a base class for \"percent-based\" chart types like Pie and Funnel.\r\n *\r\n * @see {@link IPercentChartEvents} for a list of available Events\r\n * @see {@link IPercentChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for Pie chart documentation\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for Sliced chart documentation\r\n */\r\nvar PercentChart = /** @class */ (function (_super) {\r\n    __extends(PercentChart, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PercentChart() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"PercentChart\";\r\n        _this.align = \"none\";\r\n        _this.valign = \"none\";\r\n        // so that the chart is always drawn, even the legend wants all the space\r\n        _this.chartContainer.minHeight = 50;\r\n        _this.chartContainer.minWidth = 50;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * (Re)validates chart data.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    PercentChart.prototype.validateData = function () {\r\n        _super.prototype.validateData.call(this);\r\n        this.feedLegend();\r\n    };\r\n    /**\r\n     * Setups the legend to use the chart's data.\r\n     * @ignore\r\n     */\r\n    PercentChart.prototype.feedLegend = function () {\r\n        var legend = this.legend;\r\n        if (legend) {\r\n            var legendData_1 = [];\r\n            $iter.each(this.series.iterator(), function (series) {\r\n                if (!series.hiddenInLegend) {\r\n                    $iter.each(series.dataItems.iterator(), function (dataItem) {\r\n                        if (!dataItem.hiddenInLegend) {\r\n                            legendData_1.push(dataItem);\r\n                            if (!dataItem.legendSettings) {\r\n                                dataItem.legendSettings = series.legendSettings;\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n            legend.data = legendData_1;\r\n            legend.dataFields.name = \"category\";\r\n        }\r\n    };\r\n    /**\r\n     * Creates a new [[PercentSeries]].\r\n     *\r\n     * @return New series\r\n     */\r\n    PercentChart.prototype.createSeries = function () {\r\n        return new PercentSeries();\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    PercentChart.prototype.setLegend = function (legend) {\r\n        _super.prototype.setLegend.call(this, legend);\r\n        if (legend) {\r\n            legend.labels.template.text = \"{category}\";\r\n            legend.valueLabels.template.text = \"{value.percent.formatNumber('#.0p')}\";\r\n            legend.itemContainers.template.events.on(\"over\", function (event) {\r\n                var percentSeriesDataItem = event.target.dataItem.dataContext;\r\n                if (percentSeriesDataItem.visible && !percentSeriesDataItem.isHiding) {\r\n                    var slice = percentSeriesDataItem.slice;\r\n                    slice.dispatchImmediately(\"over\");\r\n                    slice.isHover = true;\r\n                    slice.interactions.isRealHover = true;\r\n                }\r\n            });\r\n            legend.itemContainers.template.events.on(\"out\", function (event) {\r\n                var percentSeriesDataItem = event.target.dataItem.dataContext;\r\n                var slice = percentSeriesDataItem.slice;\r\n                slice.dispatchImmediately(\"out\");\r\n                slice.isHover = false;\r\n            });\r\n        }\r\n    };\r\n    return PercentChart;\r\n}(SerialChart));\r\nexport { PercentChart };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @hidden\r\n */\r\nregistry.registeredClasses[\"PercentChart\"] = PercentChart;\r\nregistry.registeredClasses[\"PercentChartDataItem\"] = PercentChartDataItem;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}