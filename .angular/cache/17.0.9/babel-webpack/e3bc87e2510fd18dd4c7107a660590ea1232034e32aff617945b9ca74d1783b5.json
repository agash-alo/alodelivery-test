{"ast":null,"code":"/**\r\n * Number formatting-related functionality.\r\n */\nimport { __extends } from \"tslib\";\nimport { Language } from \"../utils/Language\";\nimport { BaseObject } from \"../Base\";\nimport { getTextFormatter } from \"../formatters/TextFormatter\";\nimport { registry } from \"../Registry\";\nimport * as $strings from \"../utils/Strings\";\nimport * as $object from \"../utils/Object\";\nimport * as $utils from \"../utils/Utils\";\nimport * as $type from \"../utils/Type\";\nimport * as $math from \"../utils/Math\";\n/**\r\n * NumberFormatter class. Formats numbers according to specified formats.\r\n *\r\n * @todo Apply translations to suffixes/prefixes\r\n */\nvar NumberFormatter = /** @class */function (_super) {\n  __extends(NumberFormatter, _super);\n  /**\r\n   * Constructor\r\n   */\n  function NumberFormatter() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * A base value for negative numbers. Will treat all numbers below this value\r\n     * as negative numbers.\r\n     */\n    _this._negativeBase = 0;\n    /**\r\n     * Holds number format.\r\n     *\r\n     * @default #,###.#####\r\n     */\n    _this._numberFormat = \"#,###.#####\";\n    /**\r\n     * Output format to produce. If the format calls for applying color to the\r\n     * formatted value, this setting will determine what markup to use: SVG or\r\n     * HTML.\r\n     *\r\n     * Available options: svg, html.\r\n     *\r\n     * @default \"svg\"\r\n     */\n    _this._outputFormat = \"svg\";\n    /**\r\n     * Any number smaller than this will be considered \"small\" number, which will\r\n     * trigger special formatting if \"a\" format modifier is used.\r\n     */\n    _this._smallNumberThreshold = 1.00;\n    _this._forceLTR = false;\n    _this.className = \"NumberFormatter\";\n    _this.applyTheme();\n    return _this;\n  }\n  NumberFormatter.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n    if (this.language) {\n      this.language.dispose();\n    }\n  };\n  Object.defineProperty(NumberFormatter.prototype, \"language\", {\n    /**\r\n     * @return Language\r\n     */\n    get: function () {\n      if (!this._language) {\n        if (this.sprite) {\n          this._language = this.sprite.language;\n        } else {\n          this._language = new Language();\n        }\n      }\n      return this._language;\n    },\n    /**\r\n     * A reference to [[Language]] instance.\r\n     *\r\n     * Formatter will use language to translate various items, like number\r\n     * suffixes, etc.\r\n     *\r\n     * @param value  Language\r\n     */\n    set: function (value) {\n      this._language = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Formats the number according to specific format.\r\n   *\r\n   * @param value   Value to format\r\n   * @param format  Format to apply\r\n   * @return Formatted number\r\n   */\n  NumberFormatter.prototype.format = function (value, format, precision) {\n    // no format passed in or \"Number\"\n    if (typeof format === \"undefined\" || $type.isString(format) && format.toLowerCase() === \"number\") {\n      format = this._numberFormat;\n    }\n    // Init return value\n    var formatted;\n    // Cast to number just in case\n    // TODO: maybe use better casting\n    var source = Number(value);\n    // Is it a built-in format or Intl.NumberFormatOptions\n    if ($type.isObject(format)) {\n      try {\n        if (this.intlLocales) {\n          return new Intl.NumberFormat(this.intlLocales, format).format(source);\n        } else {\n          return new Intl.NumberFormat(undefined, format).format(source);\n        }\n      } catch (e) {\n        return \"Invalid\";\n      }\n    } else {\n      // Clean format\n      format = $utils.cleanFormat(format);\n      // Get format info (it will also deal with parser caching)\n      var info = this.parseFormat(format, this.language);\n      // format and replace the number\n      var details = void 0;\n      if (source > this._negativeBase) {\n        details = info.positive;\n      } else if (source < this._negativeBase) {\n        details = info.negative;\n      } else {\n        details = info.zero;\n      }\n      // Adjust precision\n      if ($type.hasValue(precision) && !details.mod) {\n        details = $object.clone(details);\n        details.decimals.active = source == 0 ? 0 : precision;\n      }\n      // Format\n      formatted = details.template.split($strings.PLACEHOLDER).join(this.applyFormat(source, details));\n    }\n    if (this.forceLTR) {\n      formatted = \"‎\" + formatted;\n    }\n    return formatted;\n  };\n  /**\r\n   * Parses supplied format into structured object which can be used to format\r\n   * the number.\r\n   *\r\n   * @param format Format string, i.e. \"#,###.00\"\r\n   * @param language Language\r\n   */\n  NumberFormatter.prototype.parseFormat = function (format, language) {\n    var _this = this;\n    // Check cache\n    var cached = this.getCache(format);\n    if ($type.hasValue(cached)) {\n      return cached;\n    }\n    // init format parse info holder\n    var info = {\n      \"positive\": {\n        \"thousands\": {\n          \"active\": -1,\n          \"passive\": -1,\n          \"interval\": -1,\n          \"separator\": language.translateEmpty(\"_thousandSeparator\")\n        },\n        \"decimals\": {\n          \"active\": -1,\n          \"passive\": -1,\n          \"separator\": language.translateEmpty(\"_decimalSeparator\")\n        },\n        \"template\": \"\",\n        \"source\": \"\",\n        \"parsed\": false\n      },\n      \"negative\": {\n        \"thousands\": {\n          \"active\": -1,\n          \"passive\": -1,\n          \"interval\": -1,\n          \"separator\": language.translateEmpty(\"_thousandSeparator\")\n        },\n        \"decimals\": {\n          \"active\": -1,\n          \"passive\": -1,\n          \"separator\": language.translateEmpty(\"_decimalSeparator\")\n        },\n        \"template\": \"\",\n        \"source\": \"\",\n        \"parsed\": false\n      },\n      \"zero\": {\n        \"thousands\": {\n          \"active\": -1,\n          \"passive\": -1,\n          \"interval\": -1,\n          \"separator\": language.translateEmpty(\"_thousandSeparator\")\n        },\n        \"decimals\": {\n          \"active\": -1,\n          \"passive\": -1,\n          \"separator\": language.translateEmpty(\"_decimalSeparator\")\n        },\n        \"template\": \"\",\n        \"source\": \"\",\n        \"parsed\": false\n      }\n    };\n    // Escape double vertical bars (that mean display one vertical bar)\n    format = format.replace(\"||\", $strings.PLACEHOLDER2);\n    // Split it up and deal with different formats\n    var parts = format.split(\"|\");\n    info.positive.source = parts[0];\n    if (typeof parts[2] === \"undefined\") {\n      info.zero = info.positive;\n    } else {\n      info.zero.source = parts[2];\n    }\n    if (typeof parts[1] === \"undefined\") {\n      info.negative = info.positive;\n    } else {\n      info.negative.source = parts[1];\n    }\n    // Parse each\n    $object.each(info, function (part, item) {\n      // Already parsed\n      if (item.parsed) {\n        return;\n      }\n      // Check cached\n      if (typeof _this.getCache(item.source) !== \"undefined\") {\n        info[part] = _this.getCache(item.source);\n        return;\n      }\n      // Begin parsing\n      var partFormat = item.source;\n      // Just \"Number\"?\n      if (partFormat.toLowerCase() === \"number\") {\n        partFormat = $type.isString(_this._numberFormat) ? _this._numberFormat : \"#,###.#####\";\n      }\n      // Let TextFormatter split into chunks\n      var chunks = getTextFormatter().chunk(partFormat, true);\n      for (var i = 0; i < chunks.length; i++) {\n        var chunk = chunks[i];\n        // replace back double vertical bar\n        chunk.text = chunk.text.replace($strings.PLACEHOLDER2, \"|\");\n        if (chunk.type === \"value\") {\n          // Parse format\n          // Look for codes\n          var matches = chunk.text.match(/[#0.,]+[ ]?[abespABESP%!]?[abespABESP‰!]?/);\n          if (matches) {\n            if (matches === null || matches[0] === \"\") {\n              // no codes here - assume string\n              // nothing to do here\n              item.template += chunk.text;\n            } else {\n              // look for the format modifiers at the end\n              var mods = matches[0].match(/[abespABESP%‰!]{2}|[abespABESP%‰]{1}$/);\n              if (mods) {\n                item.mod = mods[0].toLowerCase();\n                item.modSpacing = matches[0].match(/[ ]{1}[abespABESP%‰!]{1}$/) ? true : false;\n              }\n              // break the format up\n              var a = matches[0].split(\".\");\n              // Deal with thousands\n              if (a[0] === \"\") {\n                // No directives for thousands\n                // Leave default settings (no formatting)\n              } else {\n                // Counts\n                item.thousands.active = (a[0].match(/0/g) || []).length;\n                item.thousands.passive = (a[0].match(/\\#/g) || []).length + item.thousands.active;\n                // Separator interval\n                var b = a[0].split(\",\");\n                if (b.length === 1) {\n                  // No thousands separators\n                  // Do nothing\n                } else {\n                  // Use length fo the last chunk as thousands length\n                  item.thousands.interval = $type.getValue(b.pop()).length;\n                  if (item.thousands.interval === 0) {\n                    item.thousands.interval = -1;\n                  }\n                }\n              }\n              // Deal with decimals\n              if (typeof a[1] === \"undefined\") {\n                // No directives for decimals\n                // Leave at defaults (no formatting)\n              } else {\n                // Counts\n                item.decimals.active = (a[1].match(/0/g) || []).length;\n                item.decimals.passive = (a[1].match(/\\#/g) || []).length + item.decimals.active;\n              }\n              // Add special code to template\n              item.template += chunk.text.split(matches[0]).join($strings.PLACEHOLDER);\n            }\n          }\n        } else {\n          // Quoted string - take it as it is\n          item.template += chunk.text;\n        }\n      }\n      // Apply style formatting\n      //item.template = getTextFormatter().format(item.template, this.outputFormat);\n      // Save cache\n      _this.setCache(item.source, item);\n      // Mark this as parsed\n      item.parsed = true;\n    });\n    // Save cache (the whole thing)\n    this.setCache(format, info);\n    return info;\n  };\n  /**\r\n   * Applies parsed format to a numeric value.\r\n   *\r\n   * @param value    Value\r\n   * @param details  Parsed format as returned by parseFormat()\r\n   * @return Formatted number\r\n   */\n  NumberFormatter.prototype.applyFormat = function (value, details) {\n    // Use absolute values\n    var negative = value < 0;\n    value = Math.abs(value);\n    // Recalculate according to modifier\n    var prefix = \"\",\n      suffix = \"\";\n    var mods = details.mod ? details.mod.split(\"\") : [];\n    if (mods.indexOf(\"b\") !== -1) {\n      var a_1 = this.applyPrefix(value, this.bytePrefixes, mods.indexOf(\"!\") !== -1);\n      value = a_1[0];\n      prefix = a_1[1];\n      suffix = a_1[2];\n      if (details.modSpacing) {\n        suffix = \" \" + suffix;\n      }\n    } else if (mods.indexOf(\"a\") !== -1) {\n      var a_2 = this.applyPrefix(value, value < this.smallNumberThreshold ? this.smallNumberPrefixes : this.bigNumberPrefixes, mods.indexOf(\"!\") !== -1);\n      value = a_2[0];\n      prefix = a_2[1];\n      suffix = a_2[2];\n      if (details.modSpacing) {\n        suffix = \" \" + suffix;\n      }\n    } else if (mods.indexOf(\"p\") !== -1) {\n      var ol = Math.min(value.toString().length + 2, 21);\n      //value *= 100;\n      value = parseFloat(value.toPrecision(ol));\n      prefix = this.language.translate(\"_percentPrefix\") || \"\";\n      suffix = this.language.translate(\"_percentSuffix\") || \"\";\n      if (prefix == \"\" && suffix == \"\") {\n        suffix = \"%\";\n      }\n    } else if (mods.indexOf(\"%\") !== -1) {\n      var ol = $math.min(value.toString().length + 2, 21);\n      value *= 100;\n      value = parseFloat(value.toPrecision(ol));\n      suffix = \"%\";\n    } else if (mods.indexOf(\"‰\") !== -1) {\n      var ol = $math.min(value.toString().length + 3, 21);\n      value *= 1000;\n      value = parseFloat(value.toPrecision(ol));\n      suffix = \"‰\";\n    }\n    // Round to passive\n    if (mods.indexOf(\"e\") !== -1) {\n      // convert the value to exponential\n      var exp = void 0;\n      if (details.decimals.passive >= 0) {\n        exp = value.toExponential(details.decimals.passive).split(\"e\");\n      } else {\n        exp = value.toExponential().split(\"e\");\n      }\n      value = Number(exp[0]);\n      suffix = \"e\" + exp[1];\n      if (details.modSpacing) {\n        suffix = \" \" + suffix;\n      }\n    } else if (details.decimals.passive === 0) {\n      value = Math.round(value);\n    } else if (details.decimals.passive > 0) {\n      var d = Math.pow(10, details.decimals.passive);\n      value = Math.round(value * d) / d;\n    }\n    // Init return value\n    var res = \"\";\n    // Calc integer and decimal parts\n    var a = $utils.numberToString(value).split(\".\");\n    // Format integers\n    var ints = a[0];\n    // Pad integers to active length\n    if (ints.length < details.thousands.active) {\n      ints = Array(details.thousands.active - ints.length + 1).join(\"0\") + ints;\n    }\n    // Insert thousands separators\n    if (details.thousands.interval > 0) {\n      var ip = [];\n      var intsr = ints.split(\"\").reverse().join(\"\");\n      for (var i = 0, len = ints.length; i <= len; i += details.thousands.interval) {\n        var c = intsr.substr(i, details.thousands.interval).split(\"\").reverse().join(\"\");\n        if (c !== \"\") {\n          ip.unshift(c);\n        }\n      }\n      ints = ip.join(details.thousands.separator);\n    }\n    // Add integers\n    res += ints;\n    // Add decimals\n    if (a.length === 1) {\n      a.push(\"\");\n    }\n    var decs = a[1];\n    // Fill zeros?\n    if (decs.length < details.decimals.active) {\n      decs += Array(details.decimals.active - decs.length + 1).join(\"0\");\n    }\n    if (decs !== \"\") {\n      res += details.decimals.separator + decs;\n    }\n    // Can't have empty return value\n    if (res === \"\") {\n      res = \"0\";\n    }\n    // Add minus sign back\n    if (value !== 0 && negative && mods.indexOf(\"s\") === -1) {\n      res = \"-\" + res;\n    }\n    // Add suffixes/prefixes\n    if (prefix) {\n      res = prefix + res;\n    }\n    if (suffix) {\n      res += suffix;\n    }\n    return res;\n  };\n  /**\r\n   * Chooses appropriate prefix and suffix based on the passed in rules.\r\n   *\r\n   * @param  value     Value\r\n   * @param  prefixes  Prefix array\r\n   * @param  force     Force application of a first prefix (@sice 4.5.4)\r\n   * @return Result\r\n   */\n  NumberFormatter.prototype.applyPrefix = function (value, prefixes, force) {\n    if (force === void 0) {\n      force = false;\n    }\n    var newvalue = value;\n    var prefix = \"\";\n    var suffix = \"\";\n    var applied = false;\n    var k = 1;\n    for (var i = 0, len = prefixes.length; i < len; i++) {\n      if (prefixes[i].number <= value) {\n        if (prefixes[i].number === 0) {\n          newvalue = 0;\n        } else {\n          newvalue = value / prefixes[i].number;\n          k = prefixes[i].number;\n        }\n        prefix = prefixes[i].prefix;\n        suffix = prefixes[i].suffix;\n        applied = true;\n      }\n    }\n    if (!applied && force && prefixes.length && value != 0) {\n      // Prefix was not applied. Use the first prefix.\n      newvalue = value / prefixes[0].number;\n      prefix = prefixes[0].prefix;\n      suffix = prefixes[0].suffix;\n      applied = true;\n    }\n    if (applied) {\n      newvalue = parseFloat(newvalue.toPrecision($math.min(k.toString().length + Math.floor(newvalue).toString().replace(/[^0-9]*/g, \"\").length, 21)));\n    }\n    return [newvalue, prefix, suffix];\n  };\n  /**\r\n   * Invalidates the parent [[Sprite]] object.\r\n   */\n  NumberFormatter.prototype.invalidateSprite = function () {\n    if (this.sprite) {\n      this.sprite.invalidate();\n    }\n  };\n  Object.defineProperty(NumberFormatter.prototype, \"numberFormat\", {\n    /**\r\n     * @return A format to use for number formatting\r\n     */\n    get: function () {\n      return this._numberFormat;\n    },\n    /**\r\n     * Number format.\r\n     *\r\n     * @default \"#,###.#####\"\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting\r\n     * @param format  A format to use for number formatting\r\n     */\n    set: function (format) {\n      this._numberFormat = format;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NumberFormatter.prototype, \"intlLocales\", {\n    /**\r\n     * @return Date format\r\n     */\n    get: function () {\n      return this._intlLocales;\n    },\n    /**\r\n     * Locales if you are using date formats in `Intl.NumberFormatOptions` syntax.\r\n     *\r\n     * @see (@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat) about using Intl for number formatting\r\n     * @param value Locales\r\n     */\n    set: function (value) {\n      this._intlLocales = value;\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NumberFormatter.prototype, \"negativeBase\", {\n    /**\r\n     * @return A format to use for number formatting\r\n     */\n    get: function () {\n      return this._negativeBase;\n    },\n    /**\r\n     * Negative base for negative numbers.\r\n     *\r\n     * @default 0\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting\r\n     * @param format  A format to use for number formatting\r\n     */\n    set: function (value) {\n      this._negativeBase = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NumberFormatter.prototype, \"bigNumberPrefixes\", {\n    /**\r\n     * @return Prefixes for big numbers\r\n     */\n    get: function () {\n      if (!$type.hasValue(this._bigNumberPrefixes)) {\n        this._bigNumberPrefixes = [{\n          \"number\": 1e+3,\n          \"suffix\": this.language.translate(\"_big_number_suffix_3\")\n        }, {\n          \"number\": 1e+6,\n          \"suffix\": this.language.translate(\"_big_number_suffix_6\")\n        }, {\n          \"number\": 1e+9,\n          \"suffix\": this.language.translate(\"_big_number_suffix_9\")\n        }, {\n          \"number\": 1e+12,\n          \"suffix\": this.language.translate(\"_big_number_suffix_12\")\n        }, {\n          \"number\": 1e+15,\n          \"suffix\": this.language.translate(\"_big_number_suffix_15\")\n        }, {\n          \"number\": 1e+18,\n          \"suffix\": this.language.translate(\"_big_number_suffix_18\")\n        }, {\n          \"number\": 1e+21,\n          \"suffix\": this.language.translate(\"_big_number_suffix_21\")\n        }, {\n          \"number\": 1e+24,\n          \"suffix\": this.language.translate(\"_big_number_suffix_24\")\n        }];\n      }\n      return this._bigNumberPrefixes;\n    },\n    /**\r\n     * Prefixes for big numbers.\r\n     *\r\n     * It's an array of objects of number/prefix pairs.\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   { \"number\": 1e+3, \"suffix\": \"K\" },\r\n     *   { \"number\": 1e+6, \"suffix\": \"M\" },\r\n     *   { \"number\": 1e+9, \"suffix\": \"G\" },\r\n     *   { \"number\": 1e+12, \"suffix\": \"T\" },\r\n     *   { \"number\": 1e+15, \"suffix\": \"P\" },\r\n     *   { \"number\": 1e+18, \"suffix\": \"E\" },\r\n     *   { \"number\": 1e+21, \"suffix\": \"Z\" },\r\n     *   { \"number\": 1e+24, \"suffix\": \"Y\" }\r\n     * ]\r\n     * ```\r\n     *\r\n     * If the number is bigger than the `number` ir will be converted to the\r\n     * appropriate bigger number with prefix.\r\n     *\r\n     * E.g. as per above `1500` will be converted to `1.5K`.\r\n     *\r\n     * Please note that for this transformation to be enabled, you need to\r\n     * enable it specific modifier in your format setting.\r\n     *\r\n     * The modifier for big/small number modification is \"a\":\r\n     *\r\n     * ```Text\r\n     * {myfield.formatNumber(\"#,###.00a\")}\r\n     * ```\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting\r\n     * @param prefixes  Prefixes for big numbers\r\n     */\n    set: function (prefixes) {\n      this._bigNumberPrefixes = prefixes;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NumberFormatter.prototype, \"smallNumberPrefixes\", {\n    /**\r\n     * @return Prefixes for small numbers\r\n     */\n    get: function () {\n      if (!$type.hasValue(this._smallNumberPrefixes)) {\n        this._smallNumberPrefixes = [{\n          \"number\": 1e-24,\n          \"suffix\": this.language.translate(\"_small_number_suffix_24\")\n        }, {\n          \"number\": 1e-21,\n          \"suffix\": this.language.translate(\"_small_number_suffix_21\")\n        }, {\n          \"number\": 1e-18,\n          \"suffix\": this.language.translate(\"_small_number_suffix_18\")\n        }, {\n          \"number\": 1e-15,\n          \"suffix\": this.language.translate(\"_small_number_suffix_15\")\n        }, {\n          \"number\": 1e-12,\n          \"suffix\": this.language.translate(\"_small_number_suffix_12\")\n        }, {\n          \"number\": 1e-9,\n          \"suffix\": this.language.translate(\"_small_number_suffix_9\")\n        }, {\n          \"number\": 1e-6,\n          \"suffix\": this.language.translate(\"_small_number_suffix_6\")\n        }, {\n          \"number\": 1e-3,\n          \"suffix\": this.language.translate(\"_small_number_suffix_3\")\n        }];\n      }\n      return this._smallNumberPrefixes;\n    },\n    /**\r\n     * Prefixes for big numbers.\r\n     *\r\n     * It's an array of objects of number/prefix pairs.\r\n     *\r\n     * ```JSON\r\n     * [\r\n     *   { \"number\": 1e-24, \"suffix\": \"y\" },\r\n     *   { \"number\": 1e-21, \"suffix\": \"z\" },\r\n     *   { \"number\": 1e-18, \"suffix\": \"a\" },\r\n     *   { \"number\": 1e-15, \"suffix\": \"f\" },\r\n     *   { \"number\": 1e-12, \"suffix\": \"p\" },\r\n     *   { \"number\": 1e-9, \"suffix\": \"n\" },\r\n     *   { \"number\": 1e-6, \"suffix\": \"μ\" },\r\n     *   { \"number\": 1e-3, \"suffix\": \"m\" }\r\n     * ]\r\n     * ```\r\n     *\r\n     * If the number is smaller than the `number` ir will be converted to the\r\n     * appropriate smaller number with prefix.\r\n     *\r\n     * E.g. as per above `0.0015` will be converted to `1.5m`.\r\n     *\r\n     * Please note that for this transformation to be enabled, you need to\r\n     * enable it specific modifier in your format setting.\r\n     *\r\n     * The modifier for big/small number modification is \"a\":\r\n     *\r\n     * ```Text\r\n     * {myfield.formatNumber(\"#,###.00a\")}\r\n     * ```\r\n     *\r\n     * IMPORTANT: The order of the suffixes is important. The list must start\r\n     * from the smallest number and work towards bigger ones.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting\r\n     * @param prefixes  Prefixes for small numbers\r\n     */\n    set: function (prefixes) {\n      this._smallNumberPrefixes = prefixes;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NumberFormatter.prototype, \"smallNumberThreshold\", {\n    /**\r\n     * @return Small number threshold\r\n     */\n    get: function () {\n      return this._smallNumberThreshold;\n    },\n    /**\r\n     * Any number smaller than this will be considered \"small\" number, which will\r\n     * trigger special formatting if \"a\" format modifier is used.\r\n     *\r\n     * @since 4.6.8\r\n     * @param  value  Small number threshold\r\n     */\n    set: function (value) {\n      this._smallNumberThreshold = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NumberFormatter.prototype, \"bytePrefixes\", {\n    /**\r\n     * @return Prefixes for byte-size formatting\r\n     */\n    get: function () {\n      if (!$type.hasValue(this._bytePrefixes)) {\n        this._bytePrefixes = [{\n          \"number\": 1,\n          suffix: this.language.translate(\"_byte_suffix_B\")\n        }, {\n          \"number\": 1024,\n          suffix: this.language.translate(\"_byte_suffix_KB\")\n        }, {\n          \"number\": 1048576,\n          suffix: this.language.translate(\"_byte_suffix_MB\")\n        }, {\n          \"number\": 1073741824,\n          suffix: this.language.translate(\"_byte_suffix_GB\")\n        }, {\n          \"number\": 1099511627776,\n          suffix: this.language.translate(\"_byte_suffix_TB\")\n        }, {\n          \"number\": 1125899906842624,\n          suffix: this.language.translate(\"_byte_suffix_PB\")\n        }];\n      }\n      return this._bytePrefixes;\n    },\n    /**\r\n     * Basically the same as `bigNumberPrefixes`, except base for calculation\r\n     * is not thousand but byte (1024).\r\n     *\r\n     * The modifier is \"b\".\r\n     *\r\n     *  ```Text\r\n     * {myfield.formatNumber(\"#,###.00b\")}\r\n     * ```\r\n     *\r\n     * The above `2048` will change to `2K`.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting\r\n     * @param prefixes  Prefixes for byte-size formatting\r\n     */\n    set: function (prefixes) {\n      this._bytePrefixes = prefixes;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NumberFormatter.prototype, \"outputFormat\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Output format\r\n     */\n    get: function () {\n      return this._outputFormat;\n    },\n    /**\r\n     * Ooutput format: \"svg\" or \"html\".\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Output format\r\n     */\n    set: function (outputFormat) {\n      this._outputFormat = outputFormat.toLowerCase();\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(NumberFormatter.prototype, \"forceLTR\", {\n    get: function () {\n      return this._forceLTR;\n    },\n    set: function (value) {\n      this._forceLTR = value;\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Replaces brackets with temporary placeholders.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text  Input text\r\n   * @return Escaped text\r\n   */\n  NumberFormatter.prototype.escape = function (text) {\n    return text.replace(\"||\", $strings.PLACEHOLDER2);\n  };\n  /**\r\n   * Replaces placeholders back to brackets.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param text  Escaped text\r\n   * @return Unescaped text\r\n   */\n  NumberFormatter.prototype.unescape = function (text) {\n    return text.replace($strings.PLACEHOLDER2, \"|\");\n  };\n  return NumberFormatter;\n}(BaseObject);\nexport { NumberFormatter };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"NumberFormatter\"] = NumberFormatter;","map":{"version":3,"names":["__extends","Language","BaseObject","getTextFormatter","registry","$strings","$object","$utils","$type","$math","NumberFormatter","_super","_this","call","_negativeBase","_numberFormat","_outputFormat","_smallNumberThreshold","_forceLTR","className","applyTheme","prototype","dispose","language","Object","defineProperty","get","_language","sprite","set","value","enumerable","configurable","format","precision","isString","toLowerCase","formatted","source","Number","isObject","intlLocales","Intl","NumberFormat","undefined","e","cleanFormat","info","parseFormat","details","positive","negative","zero","hasValue","mod","clone","decimals","active","template","split","PLACEHOLDER","join","applyFormat","forceLTR","cached","getCache","translateEmpty","replace","PLACEHOLDER2","parts","each","part","item","parsed","partFormat","chunks","chunk","i","length","text","type","matches","match","mods","modSpacing","a","thousands","passive","b","interval","getValue","pop","setCache","Math","abs","prefix","suffix","indexOf","a_1","applyPrefix","bytePrefixes","a_2","smallNumberThreshold","smallNumberPrefixes","bigNumberPrefixes","ol","min","toString","parseFloat","toPrecision","translate","exp","toExponential","round","d","pow","res","numberToString","ints","Array","ip","intsr","reverse","len","c","substr","unshift","separator","push","decs","prefixes","force","newvalue","applied","k","number","floor","invalidateSprite","invalidate","_intlLocales","_bigNumberPrefixes","_smallNumberPrefixes","_bytePrefixes","outputFormat","escape","unescape","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/formatters/NumberFormatter.js"],"sourcesContent":["/**\r\n * Number formatting-related functionality.\r\n */\r\nimport { __extends } from \"tslib\";\r\nimport { Language } from \"../utils/Language\";\r\nimport { BaseObject } from \"../Base\";\r\nimport { getTextFormatter } from \"../formatters/TextFormatter\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $strings from \"../utils/Strings\";\r\nimport * as $object from \"../utils/Object\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $math from \"../utils/Math\";\r\n/**\r\n * NumberFormatter class. Formats numbers according to specified formats.\r\n *\r\n * @todo Apply translations to suffixes/prefixes\r\n */\r\nvar NumberFormatter = /** @class */ (function (_super) {\r\n    __extends(NumberFormatter, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function NumberFormatter() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * A base value for negative numbers. Will treat all numbers below this value\r\n         * as negative numbers.\r\n         */\r\n        _this._negativeBase = 0;\r\n        /**\r\n         * Holds number format.\r\n         *\r\n         * @default #,###.#####\r\n         */\r\n        _this._numberFormat = \"#,###.#####\";\r\n        /**\r\n         * Output format to produce. If the format calls for applying color to the\r\n         * formatted value, this setting will determine what markup to use: SVG or\r\n         * HTML.\r\n         *\r\n         * Available options: svg, html.\r\n         *\r\n         * @default \"svg\"\r\n         */\r\n        _this._outputFormat = \"svg\";\r\n        /**\r\n         * Any number smaller than this will be considered \"small\" number, which will\r\n         * trigger special formatting if \"a\" format modifier is used.\r\n         */\r\n        _this._smallNumberThreshold = 1.00;\r\n        _this._forceLTR = false;\r\n        _this.className = \"NumberFormatter\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    NumberFormatter.prototype.dispose = function () {\r\n        _super.prototype.dispose.call(this);\r\n        if (this.language) {\r\n            this.language.dispose();\r\n        }\r\n    };\r\n    Object.defineProperty(NumberFormatter.prototype, \"language\", {\r\n        /**\r\n         * @return Language\r\n         */\r\n        get: function () {\r\n            if (!this._language) {\r\n                if (this.sprite) {\r\n                    this._language = this.sprite.language;\r\n                }\r\n                else {\r\n                    this._language = new Language;\r\n                }\r\n            }\r\n            return this._language;\r\n        },\r\n        /**\r\n         * A reference to [[Language]] instance.\r\n         *\r\n         * Formatter will use language to translate various items, like number\r\n         * suffixes, etc.\r\n         *\r\n         * @param value  Language\r\n         */\r\n        set: function (value) {\r\n            this._language = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Formats the number according to specific format.\r\n     *\r\n     * @param value   Value to format\r\n     * @param format  Format to apply\r\n     * @return Formatted number\r\n     */\r\n    NumberFormatter.prototype.format = function (value, format, precision) {\r\n        // no format passed in or \"Number\"\r\n        if (typeof format === \"undefined\" || ($type.isString(format) && format.toLowerCase() === \"number\")) {\r\n            format = this._numberFormat;\r\n        }\r\n        // Init return value\r\n        var formatted;\r\n        // Cast to number just in case\r\n        // TODO: maybe use better casting\r\n        var source = Number(value);\r\n        // Is it a built-in format or Intl.NumberFormatOptions\r\n        if ($type.isObject(format)) {\r\n            try {\r\n                if (this.intlLocales) {\r\n                    return new Intl.NumberFormat(this.intlLocales, format).format(source);\r\n                }\r\n                else {\r\n                    return new Intl.NumberFormat(undefined, format).format(source);\r\n                }\r\n            }\r\n            catch (e) {\r\n                return \"Invalid\";\r\n            }\r\n        }\r\n        else {\r\n            // Clean format\r\n            format = $utils.cleanFormat(format);\r\n            // Get format info (it will also deal with parser caching)\r\n            var info = this.parseFormat(format, this.language);\r\n            // format and replace the number\r\n            var details = void 0;\r\n            if (source > this._negativeBase) {\r\n                details = info.positive;\r\n            }\r\n            else if (source < this._negativeBase) {\r\n                details = info.negative;\r\n            }\r\n            else {\r\n                details = info.zero;\r\n            }\r\n            // Adjust precision\r\n            if ($type.hasValue(precision) && !details.mod) {\r\n                details = $object.clone(details);\r\n                details.decimals.active = source == 0 ? 0 : precision;\r\n            }\r\n            // Format\r\n            formatted = details.template.split($strings.PLACEHOLDER).join(this.applyFormat(source, details));\r\n        }\r\n        if (this.forceLTR) {\r\n            formatted = \"‎\" + formatted;\r\n        }\r\n        return formatted;\r\n    };\r\n    /**\r\n     * Parses supplied format into structured object which can be used to format\r\n     * the number.\r\n     *\r\n     * @param format Format string, i.e. \"#,###.00\"\r\n     * @param language Language\r\n     */\r\n    NumberFormatter.prototype.parseFormat = function (format, language) {\r\n        var _this = this;\r\n        // Check cache\r\n        var cached = this.getCache(format);\r\n        if ($type.hasValue(cached)) {\r\n            return cached;\r\n        }\r\n        // init format parse info holder\r\n        var info = {\r\n            \"positive\": {\r\n                \"thousands\": {\r\n                    \"active\": -1,\r\n                    \"passive\": -1,\r\n                    \"interval\": -1,\r\n                    \"separator\": language.translateEmpty(\"_thousandSeparator\")\r\n                },\r\n                \"decimals\": {\r\n                    \"active\": -1,\r\n                    \"passive\": -1,\r\n                    \"separator\": language.translateEmpty(\"_decimalSeparator\")\r\n                },\r\n                \"template\": \"\",\r\n                \"source\": \"\",\r\n                \"parsed\": false\r\n            },\r\n            \"negative\": {\r\n                \"thousands\": {\r\n                    \"active\": -1,\r\n                    \"passive\": -1,\r\n                    \"interval\": -1,\r\n                    \"separator\": language.translateEmpty(\"_thousandSeparator\")\r\n                },\r\n                \"decimals\": {\r\n                    \"active\": -1,\r\n                    \"passive\": -1,\r\n                    \"separator\": language.translateEmpty(\"_decimalSeparator\")\r\n                },\r\n                \"template\": \"\",\r\n                \"source\": \"\",\r\n                \"parsed\": false\r\n            },\r\n            \"zero\": {\r\n                \"thousands\": {\r\n                    \"active\": -1,\r\n                    \"passive\": -1,\r\n                    \"interval\": -1,\r\n                    \"separator\": language.translateEmpty(\"_thousandSeparator\")\r\n                },\r\n                \"decimals\": {\r\n                    \"active\": -1,\r\n                    \"passive\": -1,\r\n                    \"separator\": language.translateEmpty(\"_decimalSeparator\")\r\n                },\r\n                \"template\": \"\",\r\n                \"source\": \"\",\r\n                \"parsed\": false\r\n            }\r\n        };\r\n        // Escape double vertical bars (that mean display one vertical bar)\r\n        format = format.replace(\"||\", $strings.PLACEHOLDER2);\r\n        // Split it up and deal with different formats\r\n        var parts = format.split(\"|\");\r\n        info.positive.source = parts[0];\r\n        if (typeof parts[2] === \"undefined\") {\r\n            info.zero = info.positive;\r\n        }\r\n        else {\r\n            info.zero.source = parts[2];\r\n        }\r\n        if (typeof parts[1] === \"undefined\") {\r\n            info.negative = info.positive;\r\n        }\r\n        else {\r\n            info.negative.source = parts[1];\r\n        }\r\n        // Parse each\r\n        $object.each(info, function (part, item) {\r\n            // Already parsed\r\n            if (item.parsed) {\r\n                return;\r\n            }\r\n            // Check cached\r\n            if (typeof _this.getCache(item.source) !== \"undefined\") {\r\n                info[part] = _this.getCache(item.source);\r\n                return;\r\n            }\r\n            // Begin parsing\r\n            var partFormat = item.source;\r\n            // Just \"Number\"?\r\n            if (partFormat.toLowerCase() === \"number\") {\r\n                partFormat = $type.isString(_this._numberFormat) ? _this._numberFormat : \"#,###.#####\";\r\n            }\r\n            // Let TextFormatter split into chunks\r\n            var chunks = getTextFormatter().chunk(partFormat, true);\r\n            for (var i = 0; i < chunks.length; i++) {\r\n                var chunk = chunks[i];\r\n                // replace back double vertical bar\r\n                chunk.text = chunk.text.replace($strings.PLACEHOLDER2, \"|\");\r\n                if (chunk.type === \"value\") {\r\n                    // Parse format\r\n                    // Look for codes\r\n                    var matches = chunk.text.match(/[#0.,]+[ ]?[abespABESP%!]?[abespABESP‰!]?/);\r\n                    if (matches) {\r\n                        if (matches === null || matches[0] === \"\") {\r\n                            // no codes here - assume string\r\n                            // nothing to do here\r\n                            item.template += chunk.text;\r\n                        }\r\n                        else {\r\n                            // look for the format modifiers at the end\r\n                            var mods = matches[0].match(/[abespABESP%‰!]{2}|[abespABESP%‰]{1}$/);\r\n                            if (mods) {\r\n                                item.mod = mods[0].toLowerCase();\r\n                                item.modSpacing = matches[0].match(/[ ]{1}[abespABESP%‰!]{1}$/) ? true : false;\r\n                            }\r\n                            // break the format up\r\n                            var a = matches[0].split(\".\");\r\n                            // Deal with thousands\r\n                            if (a[0] === \"\") {\r\n                                // No directives for thousands\r\n                                // Leave default settings (no formatting)\r\n                            }\r\n                            else {\r\n                                // Counts\r\n                                item.thousands.active = (a[0].match(/0/g) || []).length;\r\n                                item.thousands.passive = (a[0].match(/\\#/g) || []).length + item.thousands.active;\r\n                                // Separator interval\r\n                                var b = a[0].split(\",\");\r\n                                if (b.length === 1) {\r\n                                    // No thousands separators\r\n                                    // Do nothing\r\n                                }\r\n                                else {\r\n                                    // Use length fo the last chunk as thousands length\r\n                                    item.thousands.interval = $type.getValue(b.pop()).length;\r\n                                    if (item.thousands.interval === 0) {\r\n                                        item.thousands.interval = -1;\r\n                                    }\r\n                                }\r\n                            }\r\n                            // Deal with decimals\r\n                            if (typeof (a[1]) === \"undefined\") {\r\n                                // No directives for decimals\r\n                                // Leave at defaults (no formatting)\r\n                            }\r\n                            else {\r\n                                // Counts\r\n                                item.decimals.active = (a[1].match(/0/g) || []).length;\r\n                                item.decimals.passive = (a[1].match(/\\#/g) || []).length + item.decimals.active;\r\n                            }\r\n                            // Add special code to template\r\n                            item.template += chunk.text.split(matches[0]).join($strings.PLACEHOLDER);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    // Quoted string - take it as it is\r\n                    item.template += chunk.text;\r\n                }\r\n            }\r\n            // Apply style formatting\r\n            //item.template = getTextFormatter().format(item.template, this.outputFormat);\r\n            // Save cache\r\n            _this.setCache(item.source, item);\r\n            // Mark this as parsed\r\n            item.parsed = true;\r\n        });\r\n        // Save cache (the whole thing)\r\n        this.setCache(format, info);\r\n        return info;\r\n    };\r\n    /**\r\n     * Applies parsed format to a numeric value.\r\n     *\r\n     * @param value    Value\r\n     * @param details  Parsed format as returned by parseFormat()\r\n     * @return Formatted number\r\n     */\r\n    NumberFormatter.prototype.applyFormat = function (value, details) {\r\n        // Use absolute values\r\n        var negative = value < 0;\r\n        value = Math.abs(value);\r\n        // Recalculate according to modifier\r\n        var prefix = \"\", suffix = \"\";\r\n        var mods = details.mod ? details.mod.split(\"\") : [];\r\n        if (mods.indexOf(\"b\") !== -1) {\r\n            var a_1 = this.applyPrefix(value, this.bytePrefixes, mods.indexOf(\"!\") !== -1);\r\n            value = a_1[0];\r\n            prefix = a_1[1];\r\n            suffix = a_1[2];\r\n            if (details.modSpacing) {\r\n                suffix = \" \" + suffix;\r\n            }\r\n        }\r\n        else if (mods.indexOf(\"a\") !== -1) {\r\n            var a_2 = this.applyPrefix(value, value < this.smallNumberThreshold ? this.smallNumberPrefixes : this.bigNumberPrefixes, mods.indexOf(\"!\") !== -1);\r\n            value = a_2[0];\r\n            prefix = a_2[1];\r\n            suffix = a_2[2];\r\n            if (details.modSpacing) {\r\n                suffix = \" \" + suffix;\r\n            }\r\n        }\r\n        else if (mods.indexOf(\"p\") !== -1) {\r\n            var ol = Math.min(value.toString().length + 2, 21);\r\n            //value *= 100;\r\n            value = parseFloat(value.toPrecision(ol));\r\n            prefix = this.language.translate(\"_percentPrefix\") || \"\";\r\n            suffix = this.language.translate(\"_percentSuffix\") || \"\";\r\n            if (prefix == \"\" && suffix == \"\") {\r\n                suffix = \"%\";\r\n            }\r\n        }\r\n        else if (mods.indexOf(\"%\") !== -1) {\r\n            var ol = $math.min(value.toString().length + 2, 21);\r\n            value *= 100;\r\n            value = parseFloat(value.toPrecision(ol));\r\n            suffix = \"%\";\r\n        }\r\n        else if (mods.indexOf(\"‰\") !== -1) {\r\n            var ol = $math.min(value.toString().length + 3, 21);\r\n            value *= 1000;\r\n            value = parseFloat(value.toPrecision(ol));\r\n            suffix = \"‰\";\r\n        }\r\n        // Round to passive\r\n        if (mods.indexOf(\"e\") !== -1) {\r\n            // convert the value to exponential\r\n            var exp = void 0;\r\n            if (details.decimals.passive >= 0) {\r\n                exp = value.toExponential(details.decimals.passive).split(\"e\");\r\n            }\r\n            else {\r\n                exp = value.toExponential().split(\"e\");\r\n            }\r\n            value = Number(exp[0]);\r\n            suffix = \"e\" + exp[1];\r\n            if (details.modSpacing) {\r\n                suffix = \" \" + suffix;\r\n            }\r\n        }\r\n        else if (details.decimals.passive === 0) {\r\n            value = Math.round(value);\r\n        }\r\n        else if (details.decimals.passive > 0) {\r\n            var d = Math.pow(10, details.decimals.passive);\r\n            value = Math.round(value * d) / d;\r\n        }\r\n        // Init return value\r\n        var res = \"\";\r\n        // Calc integer and decimal parts\r\n        var a = $utils.numberToString(value).split(\".\");\r\n        // Format integers\r\n        var ints = a[0];\r\n        // Pad integers to active length\r\n        if (ints.length < details.thousands.active) {\r\n            ints = Array(details.thousands.active - ints.length + 1).join(\"0\") + ints;\r\n        }\r\n        // Insert thousands separators\r\n        if (details.thousands.interval > 0) {\r\n            var ip = [];\r\n            var intsr = ints.split(\"\").reverse().join(\"\");\r\n            for (var i = 0, len = ints.length; i <= len; i += details.thousands.interval) {\r\n                var c = intsr.substr(i, details.thousands.interval).split(\"\").reverse().join(\"\");\r\n                if (c !== \"\") {\r\n                    ip.unshift(c);\r\n                }\r\n            }\r\n            ints = ip.join(details.thousands.separator);\r\n        }\r\n        // Add integers\r\n        res += ints;\r\n        // Add decimals\r\n        if (a.length === 1) {\r\n            a.push(\"\");\r\n        }\r\n        var decs = a[1];\r\n        // Fill zeros?\r\n        if (decs.length < details.decimals.active) {\r\n            decs += Array(details.decimals.active - decs.length + 1).join(\"0\");\r\n        }\r\n        if (decs !== \"\") {\r\n            res += details.decimals.separator + decs;\r\n        }\r\n        // Can't have empty return value\r\n        if (res === \"\") {\r\n            res = \"0\";\r\n        }\r\n        // Add minus sign back\r\n        if (value !== 0 && negative && (mods.indexOf(\"s\") === -1)) {\r\n            res = \"-\" + res;\r\n        }\r\n        // Add suffixes/prefixes\r\n        if (prefix) {\r\n            res = prefix + res;\r\n        }\r\n        if (suffix) {\r\n            res += suffix;\r\n        }\r\n        return res;\r\n    };\r\n    /**\r\n     * Chooses appropriate prefix and suffix based on the passed in rules.\r\n     *\r\n     * @param  value     Value\r\n     * @param  prefixes  Prefix array\r\n     * @param  force     Force application of a first prefix (@sice 4.5.4)\r\n     * @return Result\r\n     */\r\n    NumberFormatter.prototype.applyPrefix = function (value, prefixes, force) {\r\n        if (force === void 0) { force = false; }\r\n        var newvalue = value;\r\n        var prefix = \"\";\r\n        var suffix = \"\";\r\n        var applied = false;\r\n        var k = 1;\r\n        for (var i = 0, len = prefixes.length; i < len; i++) {\r\n            if (prefixes[i].number <= value) {\r\n                if (prefixes[i].number === 0) {\r\n                    newvalue = 0;\r\n                }\r\n                else {\r\n                    newvalue = value / prefixes[i].number;\r\n                    k = prefixes[i].number;\r\n                }\r\n                prefix = prefixes[i].prefix;\r\n                suffix = prefixes[i].suffix;\r\n                applied = true;\r\n            }\r\n        }\r\n        if (!applied && force && prefixes.length && value != 0) {\r\n            // Prefix was not applied. Use the first prefix.\r\n            newvalue = value / prefixes[0].number;\r\n            prefix = prefixes[0].prefix;\r\n            suffix = prefixes[0].suffix;\r\n            applied = true;\r\n        }\r\n        if (applied) {\r\n            newvalue = parseFloat(newvalue.toPrecision($math.min(k.toString().length + Math.floor(newvalue).toString().replace(/[^0-9]*/g, \"\").length, 21)));\r\n        }\r\n        return [newvalue, prefix, suffix];\r\n    };\r\n    /**\r\n     * Invalidates the parent [[Sprite]] object.\r\n     */\r\n    NumberFormatter.prototype.invalidateSprite = function () {\r\n        if (this.sprite) {\r\n            this.sprite.invalidate();\r\n        }\r\n    };\r\n    Object.defineProperty(NumberFormatter.prototype, \"numberFormat\", {\r\n        /**\r\n         * @return A format to use for number formatting\r\n         */\r\n        get: function () {\r\n            return this._numberFormat;\r\n        },\r\n        /**\r\n         * Number format.\r\n         *\r\n         * @default \"#,###.#####\"\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting\r\n         * @param format  A format to use for number formatting\r\n         */\r\n        set: function (format) {\r\n            this._numberFormat = format;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NumberFormatter.prototype, \"intlLocales\", {\r\n        /**\r\n         * @return Date format\r\n         */\r\n        get: function () {\r\n            return this._intlLocales;\r\n        },\r\n        /**\r\n         * Locales if you are using date formats in `Intl.NumberFormatOptions` syntax.\r\n         *\r\n         * @see (@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat) about using Intl for number formatting\r\n         * @param value Locales\r\n         */\r\n        set: function (value) {\r\n            this._intlLocales = value;\r\n            this.invalidateSprite();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NumberFormatter.prototype, \"negativeBase\", {\r\n        /**\r\n         * @return A format to use for number formatting\r\n         */\r\n        get: function () {\r\n            return this._negativeBase;\r\n        },\r\n        /**\r\n         * Negative base for negative numbers.\r\n         *\r\n         * @default 0\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting\r\n         * @param format  A format to use for number formatting\r\n         */\r\n        set: function (value) {\r\n            this._negativeBase = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NumberFormatter.prototype, \"bigNumberPrefixes\", {\r\n        /**\r\n         * @return Prefixes for big numbers\r\n         */\r\n        get: function () {\r\n            if (!$type.hasValue(this._bigNumberPrefixes)) {\r\n                this._bigNumberPrefixes = [\r\n                    { \"number\": 1e+3, \"suffix\": this.language.translate(\"_big_number_suffix_3\") },\r\n                    { \"number\": 1e+6, \"suffix\": this.language.translate(\"_big_number_suffix_6\") },\r\n                    { \"number\": 1e+9, \"suffix\": this.language.translate(\"_big_number_suffix_9\") },\r\n                    { \"number\": 1e+12, \"suffix\": this.language.translate(\"_big_number_suffix_12\") },\r\n                    { \"number\": 1e+15, \"suffix\": this.language.translate(\"_big_number_suffix_15\") },\r\n                    { \"number\": 1e+18, \"suffix\": this.language.translate(\"_big_number_suffix_18\") },\r\n                    { \"number\": 1e+21, \"suffix\": this.language.translate(\"_big_number_suffix_21\") },\r\n                    { \"number\": 1e+24, \"suffix\": this.language.translate(\"_big_number_suffix_24\") }\r\n                ];\r\n            }\r\n            return this._bigNumberPrefixes;\r\n        },\r\n        /**\r\n         * Prefixes for big numbers.\r\n         *\r\n         * It's an array of objects of number/prefix pairs.\r\n         *\r\n         * ```JSON\r\n         * [\r\n         *   { \"number\": 1e+3, \"suffix\": \"K\" },\r\n         *   { \"number\": 1e+6, \"suffix\": \"M\" },\r\n         *   { \"number\": 1e+9, \"suffix\": \"G\" },\r\n         *   { \"number\": 1e+12, \"suffix\": \"T\" },\r\n         *   { \"number\": 1e+15, \"suffix\": \"P\" },\r\n         *   { \"number\": 1e+18, \"suffix\": \"E\" },\r\n         *   { \"number\": 1e+21, \"suffix\": \"Z\" },\r\n         *   { \"number\": 1e+24, \"suffix\": \"Y\" }\r\n         * ]\r\n         * ```\r\n         *\r\n         * If the number is bigger than the `number` ir will be converted to the\r\n         * appropriate bigger number with prefix.\r\n         *\r\n         * E.g. as per above `1500` will be converted to `1.5K`.\r\n         *\r\n         * Please note that for this transformation to be enabled, you need to\r\n         * enable it specific modifier in your format setting.\r\n         *\r\n         * The modifier for big/small number modification is \"a\":\r\n         *\r\n         * ```Text\r\n         * {myfield.formatNumber(\"#,###.00a\")}\r\n         * ```\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting\r\n         * @param prefixes  Prefixes for big numbers\r\n         */\r\n        set: function (prefixes) {\r\n            this._bigNumberPrefixes = prefixes;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NumberFormatter.prototype, \"smallNumberPrefixes\", {\r\n        /**\r\n         * @return Prefixes for small numbers\r\n         */\r\n        get: function () {\r\n            if (!$type.hasValue(this._smallNumberPrefixes)) {\r\n                this._smallNumberPrefixes = [\r\n                    { \"number\": 1e-24, \"suffix\": this.language.translate(\"_small_number_suffix_24\") },\r\n                    { \"number\": 1e-21, \"suffix\": this.language.translate(\"_small_number_suffix_21\") },\r\n                    { \"number\": 1e-18, \"suffix\": this.language.translate(\"_small_number_suffix_18\") },\r\n                    { \"number\": 1e-15, \"suffix\": this.language.translate(\"_small_number_suffix_15\") },\r\n                    { \"number\": 1e-12, \"suffix\": this.language.translate(\"_small_number_suffix_12\") },\r\n                    { \"number\": 1e-9, \"suffix\": this.language.translate(\"_small_number_suffix_9\") },\r\n                    { \"number\": 1e-6, \"suffix\": this.language.translate(\"_small_number_suffix_6\") },\r\n                    { \"number\": 1e-3, \"suffix\": this.language.translate(\"_small_number_suffix_3\") }\r\n                ];\r\n            }\r\n            return this._smallNumberPrefixes;\r\n        },\r\n        /**\r\n         * Prefixes for big numbers.\r\n         *\r\n         * It's an array of objects of number/prefix pairs.\r\n         *\r\n         * ```JSON\r\n         * [\r\n         *   { \"number\": 1e-24, \"suffix\": \"y\" },\r\n         *   { \"number\": 1e-21, \"suffix\": \"z\" },\r\n         *   { \"number\": 1e-18, \"suffix\": \"a\" },\r\n         *   { \"number\": 1e-15, \"suffix\": \"f\" },\r\n         *   { \"number\": 1e-12, \"suffix\": \"p\" },\r\n         *   { \"number\": 1e-9, \"suffix\": \"n\" },\r\n         *   { \"number\": 1e-6, \"suffix\": \"μ\" },\r\n         *   { \"number\": 1e-3, \"suffix\": \"m\" }\r\n         * ]\r\n         * ```\r\n         *\r\n         * If the number is smaller than the `number` ir will be converted to the\r\n         * appropriate smaller number with prefix.\r\n         *\r\n         * E.g. as per above `0.0015` will be converted to `1.5m`.\r\n         *\r\n         * Please note that for this transformation to be enabled, you need to\r\n         * enable it specific modifier in your format setting.\r\n         *\r\n         * The modifier for big/small number modification is \"a\":\r\n         *\r\n         * ```Text\r\n         * {myfield.formatNumber(\"#,###.00a\")}\r\n         * ```\r\n         *\r\n         * IMPORTANT: The order of the suffixes is important. The list must start\r\n         * from the smallest number and work towards bigger ones.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting\r\n         * @param prefixes  Prefixes for small numbers\r\n         */\r\n        set: function (prefixes) {\r\n            this._smallNumberPrefixes = prefixes;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NumberFormatter.prototype, \"smallNumberThreshold\", {\r\n        /**\r\n         * @return Small number threshold\r\n         */\r\n        get: function () {\r\n            return this._smallNumberThreshold;\r\n        },\r\n        /**\r\n         * Any number smaller than this will be considered \"small\" number, which will\r\n         * trigger special formatting if \"a\" format modifier is used.\r\n         *\r\n         * @since 4.6.8\r\n         * @param  value  Small number threshold\r\n         */\r\n        set: function (value) {\r\n            this._smallNumberThreshold = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NumberFormatter.prototype, \"bytePrefixes\", {\r\n        /**\r\n         * @return Prefixes for byte-size formatting\r\n         */\r\n        get: function () {\r\n            if (!$type.hasValue(this._bytePrefixes)) {\r\n                this._bytePrefixes = [\r\n                    { \"number\": 1, suffix: this.language.translate(\"_byte_suffix_B\") },\r\n                    { \"number\": 1024, suffix: this.language.translate(\"_byte_suffix_KB\") },\r\n                    { \"number\": 1048576, suffix: this.language.translate(\"_byte_suffix_MB\") },\r\n                    { \"number\": 1073741824, suffix: this.language.translate(\"_byte_suffix_GB\") },\r\n                    { \"number\": 1099511627776, suffix: this.language.translate(\"_byte_suffix_TB\") },\r\n                    { \"number\": 1125899906842624, suffix: this.language.translate(\"_byte_suffix_PB\") }\r\n                ];\r\n            }\r\n            return this._bytePrefixes;\r\n        },\r\n        /**\r\n         * Basically the same as `bigNumberPrefixes`, except base for calculation\r\n         * is not thousand but byte (1024).\r\n         *\r\n         * The modifier is \"b\".\r\n         *\r\n         *  ```Text\r\n         * {myfield.formatNumber(\"#,###.00b\")}\r\n         * ```\r\n         *\r\n         * The above `2048` will change to `2K`.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-numbers/} Tutorial on number formatting\r\n         * @param prefixes  Prefixes for byte-size formatting\r\n         */\r\n        set: function (prefixes) {\r\n            this._bytePrefixes = prefixes;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NumberFormatter.prototype, \"outputFormat\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Output format\r\n         */\r\n        get: function () {\r\n            return this._outputFormat;\r\n        },\r\n        /**\r\n         * Ooutput format: \"svg\" or \"html\".\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value  Output format\r\n         */\r\n        set: function (outputFormat) {\r\n            this._outputFormat = outputFormat.toLowerCase();\r\n            this.invalidateSprite();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NumberFormatter.prototype, \"forceLTR\", {\r\n        get: function () {\r\n            return this._forceLTR;\r\n        },\r\n        set: function (value) {\r\n            this._forceLTR = value;\r\n            this.invalidateSprite();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Replaces brackets with temporary placeholders.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param text  Input text\r\n     * @return Escaped text\r\n     */\r\n    NumberFormatter.prototype.escape = function (text) {\r\n        return text.replace(\"||\", $strings.PLACEHOLDER2);\r\n    };\r\n    /**\r\n     * Replaces placeholders back to brackets.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param text  Escaped text\r\n     * @return Unescaped text\r\n     */\r\n    NumberFormatter.prototype.unescape = function (text) {\r\n        return text.replace($strings.PLACEHOLDER2, \"|\");\r\n    };\r\n    return NumberFormatter;\r\n}(BaseObject));\r\nexport { NumberFormatter };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"NumberFormatter\"] = NumberFormatter;\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,SAASC,UAAU,QAAQ,SAAS;AACpC,SAASC,gBAAgB,QAAQ,6BAA6B;AAC9D,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAO,KAAKC,QAAQ,MAAM,kBAAkB;AAC5C,OAAO,KAAKC,OAAO,MAAM,iBAAiB;AAC1C,OAAO,KAAKC,MAAM,MAAM,gBAAgB;AACxC,OAAO,KAAKC,KAAK,MAAM,eAAe;AACtC,OAAO,KAAKC,KAAK,MAAM,eAAe;AACtC;AACA;AACA;AACA;AACA;AACA,IAAIC,eAAe,GAAG,aAAe,UAAUC,MAAM,EAAE;EACnDX,SAAS,CAACU,eAAe,EAAEC,MAAM,CAAC;EAClC;AACJ;AACA;EACI,SAASD,eAAeA,CAAA,EAAG;IACvB,IAAIE,KAAK,GAAGD,MAAM,CAACE,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI;IACrC;AACR;AACA;AACA;IACQD,KAAK,CAACE,aAAa,GAAG,CAAC;IACvB;AACR;AACA;AACA;AACA;IACQF,KAAK,CAACG,aAAa,GAAG,aAAa;IACnC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQH,KAAK,CAACI,aAAa,GAAG,KAAK;IAC3B;AACR;AACA;AACA;IACQJ,KAAK,CAACK,qBAAqB,GAAG,IAAI;IAClCL,KAAK,CAACM,SAAS,GAAG,KAAK;IACvBN,KAAK,CAACO,SAAS,GAAG,iBAAiB;IACnCP,KAAK,CAACQ,UAAU,CAAC,CAAC;IAClB,OAAOR,KAAK;EAChB;EACAF,eAAe,CAACW,SAAS,CAACC,OAAO,GAAG,YAAY;IAC5CX,MAAM,CAACU,SAAS,CAACC,OAAO,CAACT,IAAI,CAAC,IAAI,CAAC;IACnC,IAAI,IAAI,CAACU,QAAQ,EAAE;MACf,IAAI,CAACA,QAAQ,CAACD,OAAO,CAAC,CAAC;IAC3B;EACJ,CAAC;EACDE,MAAM,CAACC,cAAc,CAACf,eAAe,CAACW,SAAS,EAAE,UAAU,EAAE;IACzD;AACR;AACA;IACQK,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,IAAI,CAAC,IAAI,CAACC,SAAS,EAAE;QACjB,IAAI,IAAI,CAACC,MAAM,EAAE;UACb,IAAI,CAACD,SAAS,GAAG,IAAI,CAACC,MAAM,CAACL,QAAQ;QACzC,CAAC,MACI;UACD,IAAI,CAACI,SAAS,GAAG,IAAI1B,QAAQ,CAAD,CAAC;QACjC;MACJ;MACA,OAAO,IAAI,CAAC0B,SAAS;IACzB,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQE,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAACH,SAAS,GAAGG,KAAK;IAC1B,CAAC;IACDC,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF;AACJ;AACA;AACA;AACA;AACA;AACA;EACItB,eAAe,CAACW,SAAS,CAACY,MAAM,GAAG,UAAUH,KAAK,EAAEG,MAAM,EAAEC,SAAS,EAAE;IACnE;IACA,IAAI,OAAOD,MAAM,KAAK,WAAW,IAAKzB,KAAK,CAAC2B,QAAQ,CAACF,MAAM,CAAC,IAAIA,MAAM,CAACG,WAAW,CAAC,CAAC,KAAK,QAAS,EAAE;MAChGH,MAAM,GAAG,IAAI,CAAClB,aAAa;IAC/B;IACA;IACA,IAAIsB,SAAS;IACb;IACA;IACA,IAAIC,MAAM,GAAGC,MAAM,CAACT,KAAK,CAAC;IAC1B;IACA,IAAItB,KAAK,CAACgC,QAAQ,CAACP,MAAM,CAAC,EAAE;MACxB,IAAI;QACA,IAAI,IAAI,CAACQ,WAAW,EAAE;UAClB,OAAO,IAAIC,IAAI,CAACC,YAAY,CAAC,IAAI,CAACF,WAAW,EAAER,MAAM,CAAC,CAACA,MAAM,CAACK,MAAM,CAAC;QACzE,CAAC,MACI;UACD,OAAO,IAAII,IAAI,CAACC,YAAY,CAACC,SAAS,EAAEX,MAAM,CAAC,CAACA,MAAM,CAACK,MAAM,CAAC;QAClE;MACJ,CAAC,CACD,OAAOO,CAAC,EAAE;QACN,OAAO,SAAS;MACpB;IACJ,CAAC,MACI;MACD;MACAZ,MAAM,GAAG1B,MAAM,CAACuC,WAAW,CAACb,MAAM,CAAC;MACnC;MACA,IAAIc,IAAI,GAAG,IAAI,CAACC,WAAW,CAACf,MAAM,EAAE,IAAI,CAACV,QAAQ,CAAC;MAClD;MACA,IAAI0B,OAAO,GAAG,KAAK,CAAC;MACpB,IAAIX,MAAM,GAAG,IAAI,CAACxB,aAAa,EAAE;QAC7BmC,OAAO,GAAGF,IAAI,CAACG,QAAQ;MAC3B,CAAC,MACI,IAAIZ,MAAM,GAAG,IAAI,CAACxB,aAAa,EAAE;QAClCmC,OAAO,GAAGF,IAAI,CAACI,QAAQ;MAC3B,CAAC,MACI;QACDF,OAAO,GAAGF,IAAI,CAACK,IAAI;MACvB;MACA;MACA,IAAI5C,KAAK,CAAC6C,QAAQ,CAACnB,SAAS,CAAC,IAAI,CAACe,OAAO,CAACK,GAAG,EAAE;QAC3CL,OAAO,GAAG3C,OAAO,CAACiD,KAAK,CAACN,OAAO,CAAC;QAChCA,OAAO,CAACO,QAAQ,CAACC,MAAM,GAAGnB,MAAM,IAAI,CAAC,GAAG,CAAC,GAAGJ,SAAS;MACzD;MACA;MACAG,SAAS,GAAGY,OAAO,CAACS,QAAQ,CAACC,KAAK,CAACtD,QAAQ,CAACuD,WAAW,CAAC,CAACC,IAAI,CAAC,IAAI,CAACC,WAAW,CAACxB,MAAM,EAAEW,OAAO,CAAC,CAAC;IACpG;IACA,IAAI,IAAI,CAACc,QAAQ,EAAE;MACf1B,SAAS,GAAG,GAAG,GAAGA,SAAS;IAC/B;IACA,OAAOA,SAAS;EACpB,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACI3B,eAAe,CAACW,SAAS,CAAC2B,WAAW,GAAG,UAAUf,MAAM,EAAEV,QAAQ,EAAE;IAChE,IAAIX,KAAK,GAAG,IAAI;IAChB;IACA,IAAIoD,MAAM,GAAG,IAAI,CAACC,QAAQ,CAAChC,MAAM,CAAC;IAClC,IAAIzB,KAAK,CAAC6C,QAAQ,CAACW,MAAM,CAAC,EAAE;MACxB,OAAOA,MAAM;IACjB;IACA;IACA,IAAIjB,IAAI,GAAG;MACP,UAAU,EAAE;QACR,WAAW,EAAE;UACT,QAAQ,EAAE,CAAC,CAAC;UACZ,SAAS,EAAE,CAAC,CAAC;UACb,UAAU,EAAE,CAAC,CAAC;UACd,WAAW,EAAExB,QAAQ,CAAC2C,cAAc,CAAC,oBAAoB;QAC7D,CAAC;QACD,UAAU,EAAE;UACR,QAAQ,EAAE,CAAC,CAAC;UACZ,SAAS,EAAE,CAAC,CAAC;UACb,WAAW,EAAE3C,QAAQ,CAAC2C,cAAc,CAAC,mBAAmB;QAC5D,CAAC;QACD,UAAU,EAAE,EAAE;QACd,QAAQ,EAAE,EAAE;QACZ,QAAQ,EAAE;MACd,CAAC;MACD,UAAU,EAAE;QACR,WAAW,EAAE;UACT,QAAQ,EAAE,CAAC,CAAC;UACZ,SAAS,EAAE,CAAC,CAAC;UACb,UAAU,EAAE,CAAC,CAAC;UACd,WAAW,EAAE3C,QAAQ,CAAC2C,cAAc,CAAC,oBAAoB;QAC7D,CAAC;QACD,UAAU,EAAE;UACR,QAAQ,EAAE,CAAC,CAAC;UACZ,SAAS,EAAE,CAAC,CAAC;UACb,WAAW,EAAE3C,QAAQ,CAAC2C,cAAc,CAAC,mBAAmB;QAC5D,CAAC;QACD,UAAU,EAAE,EAAE;QACd,QAAQ,EAAE,EAAE;QACZ,QAAQ,EAAE;MACd,CAAC;MACD,MAAM,EAAE;QACJ,WAAW,EAAE;UACT,QAAQ,EAAE,CAAC,CAAC;UACZ,SAAS,EAAE,CAAC,CAAC;UACb,UAAU,EAAE,CAAC,CAAC;UACd,WAAW,EAAE3C,QAAQ,CAAC2C,cAAc,CAAC,oBAAoB;QAC7D,CAAC;QACD,UAAU,EAAE;UACR,QAAQ,EAAE,CAAC,CAAC;UACZ,SAAS,EAAE,CAAC,CAAC;UACb,WAAW,EAAE3C,QAAQ,CAAC2C,cAAc,CAAC,mBAAmB;QAC5D,CAAC;QACD,UAAU,EAAE,EAAE;QACd,QAAQ,EAAE,EAAE;QACZ,QAAQ,EAAE;MACd;IACJ,CAAC;IACD;IACAjC,MAAM,GAAGA,MAAM,CAACkC,OAAO,CAAC,IAAI,EAAE9D,QAAQ,CAAC+D,YAAY,CAAC;IACpD;IACA,IAAIC,KAAK,GAAGpC,MAAM,CAAC0B,KAAK,CAAC,GAAG,CAAC;IAC7BZ,IAAI,CAACG,QAAQ,CAACZ,MAAM,GAAG+B,KAAK,CAAC,CAAC,CAAC;IAC/B,IAAI,OAAOA,KAAK,CAAC,CAAC,CAAC,KAAK,WAAW,EAAE;MACjCtB,IAAI,CAACK,IAAI,GAAGL,IAAI,CAACG,QAAQ;IAC7B,CAAC,MACI;MACDH,IAAI,CAACK,IAAI,CAACd,MAAM,GAAG+B,KAAK,CAAC,CAAC,CAAC;IAC/B;IACA,IAAI,OAAOA,KAAK,CAAC,CAAC,CAAC,KAAK,WAAW,EAAE;MACjCtB,IAAI,CAACI,QAAQ,GAAGJ,IAAI,CAACG,QAAQ;IACjC,CAAC,MACI;MACDH,IAAI,CAACI,QAAQ,CAACb,MAAM,GAAG+B,KAAK,CAAC,CAAC,CAAC;IACnC;IACA;IACA/D,OAAO,CAACgE,IAAI,CAACvB,IAAI,EAAE,UAAUwB,IAAI,EAAEC,IAAI,EAAE;MACrC;MACA,IAAIA,IAAI,CAACC,MAAM,EAAE;QACb;MACJ;MACA;MACA,IAAI,OAAO7D,KAAK,CAACqD,QAAQ,CAACO,IAAI,CAAClC,MAAM,CAAC,KAAK,WAAW,EAAE;QACpDS,IAAI,CAACwB,IAAI,CAAC,GAAG3D,KAAK,CAACqD,QAAQ,CAACO,IAAI,CAAClC,MAAM,CAAC;QACxC;MACJ;MACA;MACA,IAAIoC,UAAU,GAAGF,IAAI,CAAClC,MAAM;MAC5B;MACA,IAAIoC,UAAU,CAACtC,WAAW,CAAC,CAAC,KAAK,QAAQ,EAAE;QACvCsC,UAAU,GAAGlE,KAAK,CAAC2B,QAAQ,CAACvB,KAAK,CAACG,aAAa,CAAC,GAAGH,KAAK,CAACG,aAAa,GAAG,aAAa;MAC1F;MACA;MACA,IAAI4D,MAAM,GAAGxE,gBAAgB,CAAC,CAAC,CAACyE,KAAK,CAACF,UAAU,EAAE,IAAI,CAAC;MACvD,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,MAAM,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;QACpC,IAAID,KAAK,GAAGD,MAAM,CAACE,CAAC,CAAC;QACrB;QACAD,KAAK,CAACG,IAAI,GAAGH,KAAK,CAACG,IAAI,CAACZ,OAAO,CAAC9D,QAAQ,CAAC+D,YAAY,EAAE,GAAG,CAAC;QAC3D,IAAIQ,KAAK,CAACI,IAAI,KAAK,OAAO,EAAE;UACxB;UACA;UACA,IAAIC,OAAO,GAAGL,KAAK,CAACG,IAAI,CAACG,KAAK,CAAC,2CAA2C,CAAC;UAC3E,IAAID,OAAO,EAAE;YACT,IAAIA,OAAO,KAAK,IAAI,IAAIA,OAAO,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE;cACvC;cACA;cACAT,IAAI,CAACd,QAAQ,IAAIkB,KAAK,CAACG,IAAI;YAC/B,CAAC,MACI;cACD;cACA,IAAII,IAAI,GAAGF,OAAO,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,uCAAuC,CAAC;cACpE,IAAIC,IAAI,EAAE;gBACNX,IAAI,CAAClB,GAAG,GAAG6B,IAAI,CAAC,CAAC,CAAC,CAAC/C,WAAW,CAAC,CAAC;gBAChCoC,IAAI,CAACY,UAAU,GAAGH,OAAO,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,2BAA2B,CAAC,GAAG,IAAI,GAAG,KAAK;cAClF;cACA;cACA,IAAIG,CAAC,GAAGJ,OAAO,CAAC,CAAC,CAAC,CAACtB,KAAK,CAAC,GAAG,CAAC;cAC7B;cACA,IAAI0B,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE;gBACb;gBACA;cAAA,CACH,MACI;gBACD;gBACAb,IAAI,CAACc,SAAS,CAAC7B,MAAM,GAAG,CAAC4B,CAAC,CAAC,CAAC,CAAC,CAACH,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,EAAEJ,MAAM;gBACvDN,IAAI,CAACc,SAAS,CAACC,OAAO,GAAG,CAACF,CAAC,CAAC,CAAC,CAAC,CAACH,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,EAAEJ,MAAM,GAAGN,IAAI,CAACc,SAAS,CAAC7B,MAAM;gBACjF;gBACA,IAAI+B,CAAC,GAAGH,CAAC,CAAC,CAAC,CAAC,CAAC1B,KAAK,CAAC,GAAG,CAAC;gBACvB,IAAI6B,CAAC,CAACV,MAAM,KAAK,CAAC,EAAE;kBAChB;kBACA;gBAAA,CACH,MACI;kBACD;kBACAN,IAAI,CAACc,SAAS,CAACG,QAAQ,GAAGjF,KAAK,CAACkF,QAAQ,CAACF,CAAC,CAACG,GAAG,CAAC,CAAC,CAAC,CAACb,MAAM;kBACxD,IAAIN,IAAI,CAACc,SAAS,CAACG,QAAQ,KAAK,CAAC,EAAE;oBAC/BjB,IAAI,CAACc,SAAS,CAACG,QAAQ,GAAG,CAAC,CAAC;kBAChC;gBACJ;cACJ;cACA;cACA,IAAI,OAAQJ,CAAC,CAAC,CAAC,CAAE,KAAK,WAAW,EAAE;gBAC/B;gBACA;cAAA,CACH,MACI;gBACD;gBACAb,IAAI,CAAChB,QAAQ,CAACC,MAAM,GAAG,CAAC4B,CAAC,CAAC,CAAC,CAAC,CAACH,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,EAAEJ,MAAM;gBACtDN,IAAI,CAAChB,QAAQ,CAAC+B,OAAO,GAAG,CAACF,CAAC,CAAC,CAAC,CAAC,CAACH,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,EAAEJ,MAAM,GAAGN,IAAI,CAAChB,QAAQ,CAACC,MAAM;cACnF;cACA;cACAe,IAAI,CAACd,QAAQ,IAAIkB,KAAK,CAACG,IAAI,CAACpB,KAAK,CAACsB,OAAO,CAAC,CAAC,CAAC,CAAC,CAACpB,IAAI,CAACxD,QAAQ,CAACuD,WAAW,CAAC;YAC5E;UACJ;QACJ,CAAC,MACI;UACD;UACAY,IAAI,CAACd,QAAQ,IAAIkB,KAAK,CAACG,IAAI;QAC/B;MACJ;MACA;MACA;MACA;MACAnE,KAAK,CAACgF,QAAQ,CAACpB,IAAI,CAAClC,MAAM,EAAEkC,IAAI,CAAC;MACjC;MACAA,IAAI,CAACC,MAAM,GAAG,IAAI;IACtB,CAAC,CAAC;IACF;IACA,IAAI,CAACmB,QAAQ,CAAC3D,MAAM,EAAEc,IAAI,CAAC;IAC3B,OAAOA,IAAI;EACf,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIrC,eAAe,CAACW,SAAS,CAACyC,WAAW,GAAG,UAAUhC,KAAK,EAAEmB,OAAO,EAAE;IAC9D;IACA,IAAIE,QAAQ,GAAGrB,KAAK,GAAG,CAAC;IACxBA,KAAK,GAAG+D,IAAI,CAACC,GAAG,CAAChE,KAAK,CAAC;IACvB;IACA,IAAIiE,MAAM,GAAG,EAAE;MAAEC,MAAM,GAAG,EAAE;IAC5B,IAAIb,IAAI,GAAGlC,OAAO,CAACK,GAAG,GAAGL,OAAO,CAACK,GAAG,CAACK,KAAK,CAAC,EAAE,CAAC,GAAG,EAAE;IACnD,IAAIwB,IAAI,CAACc,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;MAC1B,IAAIC,GAAG,GAAG,IAAI,CAACC,WAAW,CAACrE,KAAK,EAAE,IAAI,CAACsE,YAAY,EAAEjB,IAAI,CAACc,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;MAC9EnE,KAAK,GAAGoE,GAAG,CAAC,CAAC,CAAC;MACdH,MAAM,GAAGG,GAAG,CAAC,CAAC,CAAC;MACfF,MAAM,GAAGE,GAAG,CAAC,CAAC,CAAC;MACf,IAAIjD,OAAO,CAACmC,UAAU,EAAE;QACpBY,MAAM,GAAG,GAAG,GAAGA,MAAM;MACzB;IACJ,CAAC,MACI,IAAIb,IAAI,CAACc,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;MAC/B,IAAII,GAAG,GAAG,IAAI,CAACF,WAAW,CAACrE,KAAK,EAAEA,KAAK,GAAG,IAAI,CAACwE,oBAAoB,GAAG,IAAI,CAACC,mBAAmB,GAAG,IAAI,CAACC,iBAAiB,EAAErB,IAAI,CAACc,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;MAClJnE,KAAK,GAAGuE,GAAG,CAAC,CAAC,CAAC;MACdN,MAAM,GAAGM,GAAG,CAAC,CAAC,CAAC;MACfL,MAAM,GAAGK,GAAG,CAAC,CAAC,CAAC;MACf,IAAIpD,OAAO,CAACmC,UAAU,EAAE;QACpBY,MAAM,GAAG,GAAG,GAAGA,MAAM;MACzB;IACJ,CAAC,MACI,IAAIb,IAAI,CAACc,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;MAC/B,IAAIQ,EAAE,GAAGZ,IAAI,CAACa,GAAG,CAAC5E,KAAK,CAAC6E,QAAQ,CAAC,CAAC,CAAC7B,MAAM,GAAG,CAAC,EAAE,EAAE,CAAC;MAClD;MACAhD,KAAK,GAAG8E,UAAU,CAAC9E,KAAK,CAAC+E,WAAW,CAACJ,EAAE,CAAC,CAAC;MACzCV,MAAM,GAAG,IAAI,CAACxE,QAAQ,CAACuF,SAAS,CAAC,gBAAgB,CAAC,IAAI,EAAE;MACxDd,MAAM,GAAG,IAAI,CAACzE,QAAQ,CAACuF,SAAS,CAAC,gBAAgB,CAAC,IAAI,EAAE;MACxD,IAAIf,MAAM,IAAI,EAAE,IAAIC,MAAM,IAAI,EAAE,EAAE;QAC9BA,MAAM,GAAG,GAAG;MAChB;IACJ,CAAC,MACI,IAAIb,IAAI,CAACc,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;MAC/B,IAAIQ,EAAE,GAAGhG,KAAK,CAACiG,GAAG,CAAC5E,KAAK,CAAC6E,QAAQ,CAAC,CAAC,CAAC7B,MAAM,GAAG,CAAC,EAAE,EAAE,CAAC;MACnDhD,KAAK,IAAI,GAAG;MACZA,KAAK,GAAG8E,UAAU,CAAC9E,KAAK,CAAC+E,WAAW,CAACJ,EAAE,CAAC,CAAC;MACzCT,MAAM,GAAG,GAAG;IAChB,CAAC,MACI,IAAIb,IAAI,CAACc,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;MAC/B,IAAIQ,EAAE,GAAGhG,KAAK,CAACiG,GAAG,CAAC5E,KAAK,CAAC6E,QAAQ,CAAC,CAAC,CAAC7B,MAAM,GAAG,CAAC,EAAE,EAAE,CAAC;MACnDhD,KAAK,IAAI,IAAI;MACbA,KAAK,GAAG8E,UAAU,CAAC9E,KAAK,CAAC+E,WAAW,CAACJ,EAAE,CAAC,CAAC;MACzCT,MAAM,GAAG,GAAG;IAChB;IACA;IACA,IAAIb,IAAI,CAACc,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;MAC1B;MACA,IAAIc,GAAG,GAAG,KAAK,CAAC;MAChB,IAAI9D,OAAO,CAACO,QAAQ,CAAC+B,OAAO,IAAI,CAAC,EAAE;QAC/BwB,GAAG,GAAGjF,KAAK,CAACkF,aAAa,CAAC/D,OAAO,CAACO,QAAQ,CAAC+B,OAAO,CAAC,CAAC5B,KAAK,CAAC,GAAG,CAAC;MAClE,CAAC,MACI;QACDoD,GAAG,GAAGjF,KAAK,CAACkF,aAAa,CAAC,CAAC,CAACrD,KAAK,CAAC,GAAG,CAAC;MAC1C;MACA7B,KAAK,GAAGS,MAAM,CAACwE,GAAG,CAAC,CAAC,CAAC,CAAC;MACtBf,MAAM,GAAG,GAAG,GAAGe,GAAG,CAAC,CAAC,CAAC;MACrB,IAAI9D,OAAO,CAACmC,UAAU,EAAE;QACpBY,MAAM,GAAG,GAAG,GAAGA,MAAM;MACzB;IACJ,CAAC,MACI,IAAI/C,OAAO,CAACO,QAAQ,CAAC+B,OAAO,KAAK,CAAC,EAAE;MACrCzD,KAAK,GAAG+D,IAAI,CAACoB,KAAK,CAACnF,KAAK,CAAC;IAC7B,CAAC,MACI,IAAImB,OAAO,CAACO,QAAQ,CAAC+B,OAAO,GAAG,CAAC,EAAE;MACnC,IAAI2B,CAAC,GAAGrB,IAAI,CAACsB,GAAG,CAAC,EAAE,EAAElE,OAAO,CAACO,QAAQ,CAAC+B,OAAO,CAAC;MAC9CzD,KAAK,GAAG+D,IAAI,CAACoB,KAAK,CAACnF,KAAK,GAAGoF,CAAC,CAAC,GAAGA,CAAC;IACrC;IACA;IACA,IAAIE,GAAG,GAAG,EAAE;IACZ;IACA,IAAI/B,CAAC,GAAG9E,MAAM,CAAC8G,cAAc,CAACvF,KAAK,CAAC,CAAC6B,KAAK,CAAC,GAAG,CAAC;IAC/C;IACA,IAAI2D,IAAI,GAAGjC,CAAC,CAAC,CAAC,CAAC;IACf;IACA,IAAIiC,IAAI,CAACxC,MAAM,GAAG7B,OAAO,CAACqC,SAAS,CAAC7B,MAAM,EAAE;MACxC6D,IAAI,GAAGC,KAAK,CAACtE,OAAO,CAACqC,SAAS,CAAC7B,MAAM,GAAG6D,IAAI,CAACxC,MAAM,GAAG,CAAC,CAAC,CAACjB,IAAI,CAAC,GAAG,CAAC,GAAGyD,IAAI;IAC7E;IACA;IACA,IAAIrE,OAAO,CAACqC,SAAS,CAACG,QAAQ,GAAG,CAAC,EAAE;MAChC,IAAI+B,EAAE,GAAG,EAAE;MACX,IAAIC,KAAK,GAAGH,IAAI,CAAC3D,KAAK,CAAC,EAAE,CAAC,CAAC+D,OAAO,CAAC,CAAC,CAAC7D,IAAI,CAAC,EAAE,CAAC;MAC7C,KAAK,IAAIgB,CAAC,GAAG,CAAC,EAAE8C,GAAG,GAAGL,IAAI,CAACxC,MAAM,EAAED,CAAC,IAAI8C,GAAG,EAAE9C,CAAC,IAAI5B,OAAO,CAACqC,SAAS,CAACG,QAAQ,EAAE;QAC1E,IAAImC,CAAC,GAAGH,KAAK,CAACI,MAAM,CAAChD,CAAC,EAAE5B,OAAO,CAACqC,SAAS,CAACG,QAAQ,CAAC,CAAC9B,KAAK,CAAC,EAAE,CAAC,CAAC+D,OAAO,CAAC,CAAC,CAAC7D,IAAI,CAAC,EAAE,CAAC;QAChF,IAAI+D,CAAC,KAAK,EAAE,EAAE;UACVJ,EAAE,CAACM,OAAO,CAACF,CAAC,CAAC;QACjB;MACJ;MACAN,IAAI,GAAGE,EAAE,CAAC3D,IAAI,CAACZ,OAAO,CAACqC,SAAS,CAACyC,SAAS,CAAC;IAC/C;IACA;IACAX,GAAG,IAAIE,IAAI;IACX;IACA,IAAIjC,CAAC,CAACP,MAAM,KAAK,CAAC,EAAE;MAChBO,CAAC,CAAC2C,IAAI,CAAC,EAAE,CAAC;IACd;IACA,IAAIC,IAAI,GAAG5C,CAAC,CAAC,CAAC,CAAC;IACf;IACA,IAAI4C,IAAI,CAACnD,MAAM,GAAG7B,OAAO,CAACO,QAAQ,CAACC,MAAM,EAAE;MACvCwE,IAAI,IAAIV,KAAK,CAACtE,OAAO,CAACO,QAAQ,CAACC,MAAM,GAAGwE,IAAI,CAACnD,MAAM,GAAG,CAAC,CAAC,CAACjB,IAAI,CAAC,GAAG,CAAC;IACtE;IACA,IAAIoE,IAAI,KAAK,EAAE,EAAE;MACbb,GAAG,IAAInE,OAAO,CAACO,QAAQ,CAACuE,SAAS,GAAGE,IAAI;IAC5C;IACA;IACA,IAAIb,GAAG,KAAK,EAAE,EAAE;MACZA,GAAG,GAAG,GAAG;IACb;IACA;IACA,IAAItF,KAAK,KAAK,CAAC,IAAIqB,QAAQ,IAAKgC,IAAI,CAACc,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAE,EAAE;MACvDmB,GAAG,GAAG,GAAG,GAAGA,GAAG;IACnB;IACA;IACA,IAAIrB,MAAM,EAAE;MACRqB,GAAG,GAAGrB,MAAM,GAAGqB,GAAG;IACtB;IACA,IAAIpB,MAAM,EAAE;MACRoB,GAAG,IAAIpB,MAAM;IACjB;IACA,OAAOoB,GAAG;EACd,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI1G,eAAe,CAACW,SAAS,CAAC8E,WAAW,GAAG,UAAUrE,KAAK,EAAEoG,QAAQ,EAAEC,KAAK,EAAE;IACtE,IAAIA,KAAK,KAAK,KAAK,CAAC,EAAE;MAAEA,KAAK,GAAG,KAAK;IAAE;IACvC,IAAIC,QAAQ,GAAGtG,KAAK;IACpB,IAAIiE,MAAM,GAAG,EAAE;IACf,IAAIC,MAAM,GAAG,EAAE;IACf,IAAIqC,OAAO,GAAG,KAAK;IACnB,IAAIC,CAAC,GAAG,CAAC;IACT,KAAK,IAAIzD,CAAC,GAAG,CAAC,EAAE8C,GAAG,GAAGO,QAAQ,CAACpD,MAAM,EAAED,CAAC,GAAG8C,GAAG,EAAE9C,CAAC,EAAE,EAAE;MACjD,IAAIqD,QAAQ,CAACrD,CAAC,CAAC,CAAC0D,MAAM,IAAIzG,KAAK,EAAE;QAC7B,IAAIoG,QAAQ,CAACrD,CAAC,CAAC,CAAC0D,MAAM,KAAK,CAAC,EAAE;UAC1BH,QAAQ,GAAG,CAAC;QAChB,CAAC,MACI;UACDA,QAAQ,GAAGtG,KAAK,GAAGoG,QAAQ,CAACrD,CAAC,CAAC,CAAC0D,MAAM;UACrCD,CAAC,GAAGJ,QAAQ,CAACrD,CAAC,CAAC,CAAC0D,MAAM;QAC1B;QACAxC,MAAM,GAAGmC,QAAQ,CAACrD,CAAC,CAAC,CAACkB,MAAM;QAC3BC,MAAM,GAAGkC,QAAQ,CAACrD,CAAC,CAAC,CAACmB,MAAM;QAC3BqC,OAAO,GAAG,IAAI;MAClB;IACJ;IACA,IAAI,CAACA,OAAO,IAAIF,KAAK,IAAID,QAAQ,CAACpD,MAAM,IAAIhD,KAAK,IAAI,CAAC,EAAE;MACpD;MACAsG,QAAQ,GAAGtG,KAAK,GAAGoG,QAAQ,CAAC,CAAC,CAAC,CAACK,MAAM;MACrCxC,MAAM,GAAGmC,QAAQ,CAAC,CAAC,CAAC,CAACnC,MAAM;MAC3BC,MAAM,GAAGkC,QAAQ,CAAC,CAAC,CAAC,CAAClC,MAAM;MAC3BqC,OAAO,GAAG,IAAI;IAClB;IACA,IAAIA,OAAO,EAAE;MACTD,QAAQ,GAAGxB,UAAU,CAACwB,QAAQ,CAACvB,WAAW,CAACpG,KAAK,CAACiG,GAAG,CAAC4B,CAAC,CAAC3B,QAAQ,CAAC,CAAC,CAAC7B,MAAM,GAAGe,IAAI,CAAC2C,KAAK,CAACJ,QAAQ,CAAC,CAACzB,QAAQ,CAAC,CAAC,CAACxC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAACW,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC;IACpJ;IACA,OAAO,CAACsD,QAAQ,EAAErC,MAAM,EAAEC,MAAM,CAAC;EACrC,CAAC;EACD;AACJ;AACA;EACItF,eAAe,CAACW,SAAS,CAACoH,gBAAgB,GAAG,YAAY;IACrD,IAAI,IAAI,CAAC7G,MAAM,EAAE;MACb,IAAI,CAACA,MAAM,CAAC8G,UAAU,CAAC,CAAC;IAC5B;EACJ,CAAC;EACDlH,MAAM,CAACC,cAAc,CAACf,eAAe,CAACW,SAAS,EAAE,cAAc,EAAE;IAC7D;AACR;AACA;IACQK,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACX,aAAa;IAC7B,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;IACQc,GAAG,EAAE,SAAAA,CAAUI,MAAM,EAAE;MACnB,IAAI,CAAClB,aAAa,GAAGkB,MAAM;IAC/B,CAAC;IACDF,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFR,MAAM,CAACC,cAAc,CAACf,eAAe,CAACW,SAAS,EAAE,aAAa,EAAE;IAC5D;AACR;AACA;IACQK,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACiH,YAAY;IAC5B,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;IACQ9G,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAAC6G,YAAY,GAAG7G,KAAK;MACzB,IAAI,CAAC2G,gBAAgB,CAAC,CAAC;IAC3B,CAAC;IACD1G,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFR,MAAM,CAACC,cAAc,CAACf,eAAe,CAACW,SAAS,EAAE,cAAc,EAAE;IAC7D;AACR;AACA;IACQK,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACZ,aAAa;IAC7B,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;IACQe,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAAChB,aAAa,GAAGgB,KAAK;IAC9B,CAAC;IACDC,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFR,MAAM,CAACC,cAAc,CAACf,eAAe,CAACW,SAAS,EAAE,mBAAmB,EAAE;IAClE;AACR;AACA;IACQK,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,IAAI,CAAClB,KAAK,CAAC6C,QAAQ,CAAC,IAAI,CAACuF,kBAAkB,CAAC,EAAE;QAC1C,IAAI,CAACA,kBAAkB,GAAG,CACtB;UAAE,QAAQ,EAAE,IAAI;UAAE,QAAQ,EAAE,IAAI,CAACrH,QAAQ,CAACuF,SAAS,CAAC,sBAAsB;QAAE,CAAC,EAC7E;UAAE,QAAQ,EAAE,IAAI;UAAE,QAAQ,EAAE,IAAI,CAACvF,QAAQ,CAACuF,SAAS,CAAC,sBAAsB;QAAE,CAAC,EAC7E;UAAE,QAAQ,EAAE,IAAI;UAAE,QAAQ,EAAE,IAAI,CAACvF,QAAQ,CAACuF,SAAS,CAAC,sBAAsB;QAAE,CAAC,EAC7E;UAAE,QAAQ,EAAE,KAAK;UAAE,QAAQ,EAAE,IAAI,CAACvF,QAAQ,CAACuF,SAAS,CAAC,uBAAuB;QAAE,CAAC,EAC/E;UAAE,QAAQ,EAAE,KAAK;UAAE,QAAQ,EAAE,IAAI,CAACvF,QAAQ,CAACuF,SAAS,CAAC,uBAAuB;QAAE,CAAC,EAC/E;UAAE,QAAQ,EAAE,KAAK;UAAE,QAAQ,EAAE,IAAI,CAACvF,QAAQ,CAACuF,SAAS,CAAC,uBAAuB;QAAE,CAAC,EAC/E;UAAE,QAAQ,EAAE,KAAK;UAAE,QAAQ,EAAE,IAAI,CAACvF,QAAQ,CAACuF,SAAS,CAAC,uBAAuB;QAAE,CAAC,EAC/E;UAAE,QAAQ,EAAE,KAAK;UAAE,QAAQ,EAAE,IAAI,CAACvF,QAAQ,CAACuF,SAAS,CAAC,uBAAuB;QAAE,CAAC,CAClF;MACL;MACA,OAAO,IAAI,CAAC8B,kBAAkB;IAClC,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ/G,GAAG,EAAE,SAAAA,CAAUqG,QAAQ,EAAE;MACrB,IAAI,CAACU,kBAAkB,GAAGV,QAAQ;IACtC,CAAC;IACDnG,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFR,MAAM,CAACC,cAAc,CAACf,eAAe,CAACW,SAAS,EAAE,qBAAqB,EAAE;IACpE;AACR;AACA;IACQK,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,IAAI,CAAClB,KAAK,CAAC6C,QAAQ,CAAC,IAAI,CAACwF,oBAAoB,CAAC,EAAE;QAC5C,IAAI,CAACA,oBAAoB,GAAG,CACxB;UAAE,QAAQ,EAAE,KAAK;UAAE,QAAQ,EAAE,IAAI,CAACtH,QAAQ,CAACuF,SAAS,CAAC,yBAAyB;QAAE,CAAC,EACjF;UAAE,QAAQ,EAAE,KAAK;UAAE,QAAQ,EAAE,IAAI,CAACvF,QAAQ,CAACuF,SAAS,CAAC,yBAAyB;QAAE,CAAC,EACjF;UAAE,QAAQ,EAAE,KAAK;UAAE,QAAQ,EAAE,IAAI,CAACvF,QAAQ,CAACuF,SAAS,CAAC,yBAAyB;QAAE,CAAC,EACjF;UAAE,QAAQ,EAAE,KAAK;UAAE,QAAQ,EAAE,IAAI,CAACvF,QAAQ,CAACuF,SAAS,CAAC,yBAAyB;QAAE,CAAC,EACjF;UAAE,QAAQ,EAAE,KAAK;UAAE,QAAQ,EAAE,IAAI,CAACvF,QAAQ,CAACuF,SAAS,CAAC,yBAAyB;QAAE,CAAC,EACjF;UAAE,QAAQ,EAAE,IAAI;UAAE,QAAQ,EAAE,IAAI,CAACvF,QAAQ,CAACuF,SAAS,CAAC,wBAAwB;QAAE,CAAC,EAC/E;UAAE,QAAQ,EAAE,IAAI;UAAE,QAAQ,EAAE,IAAI,CAACvF,QAAQ,CAACuF,SAAS,CAAC,wBAAwB;QAAE,CAAC,EAC/E;UAAE,QAAQ,EAAE,IAAI;UAAE,QAAQ,EAAE,IAAI,CAACvF,QAAQ,CAACuF,SAAS,CAAC,wBAAwB;QAAE,CAAC,CAClF;MACL;MACA,OAAO,IAAI,CAAC+B,oBAAoB;IACpC,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQhH,GAAG,EAAE,SAAAA,CAAUqG,QAAQ,EAAE;MACrB,IAAI,CAACW,oBAAoB,GAAGX,QAAQ;IACxC,CAAC;IACDnG,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFR,MAAM,CAACC,cAAc,CAACf,eAAe,CAACW,SAAS,EAAE,sBAAsB,EAAE;IACrE;AACR;AACA;IACQK,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACT,qBAAqB;IACrC,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;IACQY,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAACb,qBAAqB,GAAGa,KAAK;IACtC,CAAC;IACDC,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFR,MAAM,CAACC,cAAc,CAACf,eAAe,CAACW,SAAS,EAAE,cAAc,EAAE;IAC7D;AACR;AACA;IACQK,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,IAAI,CAAClB,KAAK,CAAC6C,QAAQ,CAAC,IAAI,CAACyF,aAAa,CAAC,EAAE;QACrC,IAAI,CAACA,aAAa,GAAG,CACjB;UAAE,QAAQ,EAAE,CAAC;UAAE9C,MAAM,EAAE,IAAI,CAACzE,QAAQ,CAACuF,SAAS,CAAC,gBAAgB;QAAE,CAAC,EAClE;UAAE,QAAQ,EAAE,IAAI;UAAEd,MAAM,EAAE,IAAI,CAACzE,QAAQ,CAACuF,SAAS,CAAC,iBAAiB;QAAE,CAAC,EACtE;UAAE,QAAQ,EAAE,OAAO;UAAEd,MAAM,EAAE,IAAI,CAACzE,QAAQ,CAACuF,SAAS,CAAC,iBAAiB;QAAE,CAAC,EACzE;UAAE,QAAQ,EAAE,UAAU;UAAEd,MAAM,EAAE,IAAI,CAACzE,QAAQ,CAACuF,SAAS,CAAC,iBAAiB;QAAE,CAAC,EAC5E;UAAE,QAAQ,EAAE,aAAa;UAAEd,MAAM,EAAE,IAAI,CAACzE,QAAQ,CAACuF,SAAS,CAAC,iBAAiB;QAAE,CAAC,EAC/E;UAAE,QAAQ,EAAE,gBAAgB;UAAEd,MAAM,EAAE,IAAI,CAACzE,QAAQ,CAACuF,SAAS,CAAC,iBAAiB;QAAE,CAAC,CACrF;MACL;MACA,OAAO,IAAI,CAACgC,aAAa;IAC7B,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQjH,GAAG,EAAE,SAAAA,CAAUqG,QAAQ,EAAE;MACrB,IAAI,CAACY,aAAa,GAAGZ,QAAQ;IACjC,CAAC;IACDnG,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFR,MAAM,CAACC,cAAc,CAACf,eAAe,CAACW,SAAS,EAAE,cAAc,EAAE;IAC7D;AACR;AACA;AACA;IACQK,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACV,aAAa;IAC7B,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;IACQa,GAAG,EAAE,SAAAA,CAAUkH,YAAY,EAAE;MACzB,IAAI,CAAC/H,aAAa,GAAG+H,YAAY,CAAC3G,WAAW,CAAC,CAAC;MAC/C,IAAI,CAACqG,gBAAgB,CAAC,CAAC;IAC3B,CAAC;IACD1G,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFR,MAAM,CAACC,cAAc,CAACf,eAAe,CAACW,SAAS,EAAE,UAAU,EAAE;IACzDK,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACR,SAAS;IACzB,CAAC;IACDW,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAACZ,SAAS,GAAGY,KAAK;MACtB,IAAI,CAAC2G,gBAAgB,CAAC,CAAC;IAC3B,CAAC;IACD1G,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF;AACJ;AACA;AACA;AACA;AACA;AACA;EACItB,eAAe,CAACW,SAAS,CAAC2H,MAAM,GAAG,UAAUjE,IAAI,EAAE;IAC/C,OAAOA,IAAI,CAACZ,OAAO,CAAC,IAAI,EAAE9D,QAAQ,CAAC+D,YAAY,CAAC;EACpD,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACI1D,eAAe,CAACW,SAAS,CAAC4H,QAAQ,GAAG,UAAUlE,IAAI,EAAE;IACjD,OAAOA,IAAI,CAACZ,OAAO,CAAC9D,QAAQ,CAAC+D,YAAY,EAAE,GAAG,CAAC;EACnD,CAAC;EACD,OAAO1D,eAAe;AAC1B,CAAC,CAACR,UAAU,CAAE;AACd,SAASQ,eAAe;AACxB;AACA;AACA;AACA;AACA;AACA;AACAN,QAAQ,CAAC8I,iBAAiB,CAAC,iBAAiB,CAAC,GAAGxI,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}