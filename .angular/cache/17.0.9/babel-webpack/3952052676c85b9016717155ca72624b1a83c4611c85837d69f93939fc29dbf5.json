{"ast":null,"code":"/**\r\n * Defines functionality for \"Data Item\"\r\n *\r\n * A Data Item can be any object that can hold data. For example [[LineSeries]]\r\n * holds a number of values, that comprise a line graph. Each of those values\r\n * (data points) is a {DataItem}.\r\n *\r\n * Furthermore the [[LineSeries]] itself can be represented as a entry in the\r\n * legend. Since legend needs access to Line Series' value, a DataItem is\r\n * created for the series.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { BaseObjectEvents } from \"./Base\";\nimport { Adapter } from \"./utils/Adapter\";\nimport { Animation, AnimationDisposer } from \"./utils/Animation\";\nimport * as $utils from \"./utils/Utils\";\nimport * as $array from \"./utils/Array\";\n//import * as $object from \"./utils/Object\";\nimport * as $type from \"./utils/Type\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * DataItem represents single element in data, for example a data point in a\r\n * Serial Chart Series, e.g. a column.\r\n *\r\n * DataItem defines relationship between structured data, required for specific\r\n * chart type or task, and raw source data.\r\n *\r\n * It also implements required calculations, updates related visual elements,\r\n * etc.\r\n *\r\n * @todo Description\r\n * @important\r\n */\nvar DataItem = /** @class */function (_super) {\n  __extends(DataItem, _super);\n  /**\r\n   * Constructor\r\n   * @todo Adding events to disposers produces errors in some cases, which means that chart is using disposed Data Items which is not right\r\n   */\n  function DataItem() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * This Data Item is currently disabled.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._disabled = false;\n    /**\r\n     * Indicates whether Data Item has any properties set.\r\n     *\r\n     * If it does not have any, the code can use this property to check whether\r\n     * they need to apply costly operation of re-applying properties, whenever\r\n     * Data Item-related element is redrawn, e.g. series.\r\n     */\n    _this.hasProperties = false;\n    /**\r\n     * An object containing calculated values.\r\n     */\n    _this.values = {};\n    /**\r\n     * An object container current working values.\r\n     */\n    //public readonly workingValues: { [index: string]: { [index: string]: number } } = {};\n    /**\r\n     * An object containing categories.\r\n     */\n    _this.categories = {};\n    /**\r\n     * An object containing dates.\r\n     */\n    _this.dates = {};\n    /**\r\n     * An object containing locations for the Data Item.\r\n     *\r\n     * A location is a position within date or category, or, in some other cases,\r\n     * where there is no single point but rather some period.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/series/#Data_item_locations} for info how data item locations work\r\n     */\n    _this.locations = {};\n    /**\r\n     * Current working locations.\r\n     */\n    _this.workingLocations = {};\n    /**\r\n     * An object containing Data Item specific appearance properties in key-value\r\n     * pairs.\r\n     *\r\n     * Sometimes a single Data Item needs to apply different properties than the\r\n     * rest of the data [[Series]] it is part of. E.g. a single column,\r\n     * represented by a Data Item needs to be filled with a different color than\r\n     * the reset of the [[ColumnSeries]] it belongs to.\r\n     *\r\n     * That's where Data Item's `properties` come into play.\r\n     *\r\n     * Please note that you should set Data Item-specific properties using\r\n     * `setProperty()` method, rather than access `properties` object directly.\r\n     */\n    _this.properties = {};\n    /**\r\n     * A list of [[Sprite]] elements that are associated with this Data Item.\r\n     *\r\n     * E.g. an [[Axis]] Data Item has several separate elements associated with\r\n     * it, like [[AxisTick]], [[AxisLabel]], and [[Grid]].\r\n     *\r\n     * Data Item keeps track of all of them, so it can toggle all related visual\r\n     * elements when it itself is toggled.\r\n     */\n    _this.sprites = [];\n    /**\r\n     * Identifies if this object is a \"template\" and should not be treated as\r\n     * real object that is drawn or actually used in the chart.\r\n     */\n    _this.isTemplate = false;\n    /**\r\n     * The current index within the dataItems\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._index = null;\n    /**\r\n     * Is Data Item currently visible?\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._visible = true;\n    /**\r\n     * Is Data Item currently hidden?\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._hidden = false;\n    /**\r\n     * Should this Data Item be used when calculating data ranges and scales?\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._ignoreMinMax = false;\n    /**\r\n     * Some of the Data Item's data fields may contain an array of children. This\r\n     * property contains an object indicating which fields hold an array, so that\r\n     * they can be processed properly.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this.hasChildren = {};\n    /**\r\n     * Indicates whether Data Item is currently animiting from visible to hidden\r\n     * state.\r\n     */\n    _this.isHiding = false;\n    /**\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._valueAnimations = {};\n    /**\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this._locationAnimations = {};\n    _this.className = \"DataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(DataItem.prototype, \"adapter\", {\n    /**\r\n     * Holds Adapter.\r\n     */\n    get: function () {\n      if (!this._adapterO) {\n        this._adapterO = new Adapter(this);\n      }\n      return this._adapterO;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataItem.prototype, \"index\", {\n    /**\r\n     * Data Item's position index in Component's data.\r\n     *\r\n     * @return Index\r\n     */\n    get: function () {\n      if (this.component) {\n        if (this._index != null) {\n          return this._index;\n        } else {\n          return -1;\n        }\n      } else {\n        return -1;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataItem.prototype, \"animations\", {\n    /**\r\n     * A list of [[Animations]] objects currently mutating Data Item's values.\r\n     *\r\n     * @return [description]\r\n     */\n    get: function () {\n      if (!this._animations) {\n        this._animations = [];\n        this._disposers.push(new AnimationDisposer(this._animations));\n      }\n      return this._animations;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataItem.prototype, \"visible\", {\n    /**\r\n     * Returns `true` if this Data Item is currently visible.\r\n     *\r\n     * @return Visible?\r\n     */\n    get: function () {\n      if (this._hidden) {\n        return false;\n      }\n      return this._visible;\n    },\n    /**\r\n     * Sets visibility of the Data Item.\r\n     *\r\n     * @param value Visible?\r\n     */\n    set: function (value) {\n      if (value) {\n        this.hidden = false;\n      }\n      if (this._visible != value) {\n        this.setVisibility(value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataItem.prototype, \"hidden\", {\n    /**\r\n     * Returns `true` if this Data Item is currently hidden.\r\n     *\r\n     * @return Hidden?\r\n     */\n    get: function () {\n      return this._hidden;\n    },\n    /**\r\n     * Sets hidden flag for data item. Mostly used to initially hide data item.\r\n     *\r\n     * @param value Hidden?\r\n     */\n    set: function (value) {\n      if (this._hidden != value) {\n        this._hidden = value;\n        if (value) {\n          this.setVisibility(false);\n        } else {\n          this.setVisibility(true, true);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataItem.prototype, \"__disabled\", {\n    /**\r\n     * Is this Data Item currently disabled?\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {boolean}\r\n     */\n    get: function () {\n      return this._disabled;\n    },\n    /**\r\n     * Disables all Sprites associated with this Data Item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {boolean}\r\n     */\n    set: function (value) {\n      //\tif (this._disabled != value) { // not good\n      this._disabled = value;\n      $array.each(this.sprites, function (sprite) {\n        sprite.__disabled = value;\n      });\n      //\t}\n    },\n\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets visibility of the Data Item.\r\n   *\r\n   * @param value Data Item\r\n   */\n  DataItem.prototype.setVisibility = function (value, noChangeValues) {\n    $array.each(this.sprites, function (sprite) {\n      if (value) {\n        sprite.visible = sprite.defaultState.properties.visible;\n      } else {\n        if (sprite.hiddenState) {\n          sprite.visible = sprite.hiddenState.properties.visible;\n        } else {\n          sprite.visible = false;\n        }\n      }\n    });\n    this._visible = value;\n    if (this._eventDispatcher && !this.__disabled) {\n      if (this.events.isEnabled(\"visibilitychanged\")) {\n        var event_1 = {\n          type: \"visibilitychanged\",\n          target: this,\n          visible: value\n        };\n        this.events.dispatchImmediately(\"visibilitychanged\", event_1);\n      }\n    }\n  };\n  /**\r\n   * Shows the Data Item and related visual elements.\r\n   *\r\n   * @param duration  Animation duration (ms)\r\n   * @param delay     Delay animation (ms)\r\n   * @param fields    A list of fields to set values of\r\n   */\n  DataItem.prototype.show = function (duration, delay, fields) {\n    var _this = this;\n    if (!this.hidden) {\n      this.setVisibility(true, true);\n      this.isHiding = false;\n      if (this._hideDisposer) {\n        this.removeDispose(this._hideDisposer);\n      }\n      var animation_1;\n      if (fields) {\n        $array.each(fields, function (field) {\n          animation_1 = _this.setWorkingValue(field, _this.values[field].value, duration, delay);\n        });\n      }\n      $array.each(this.sprites, function (sprite) {\n        var animation = sprite.show(duration);\n        if (animation != null && !animation.isFinished()) {\n          _this._disposers.push(animation);\n          if (delay != null && delay > 0) {\n            animation.delay(delay);\n          }\n        }\n      });\n      return animation_1;\n    }\n  };\n  /**\r\n   * Destroys this object and all related data.\r\n   */\n  DataItem.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n    $array.each(this.sprites, function (sprite) {\n      sprite.dispose();\n    });\n    this.sprites = [];\n  };\n  /**\r\n   * Hides the Data Item and related visual elements.\r\n   *\r\n   * @param duration  Animation duration (ms)\r\n   * @param delay     Delay animation (ms)\r\n   * @param toValue   A value to set to `fields` when hiding\r\n   * @param fields    A list of data fields to set value to `toValue`\r\n   */\n  DataItem.prototype.hide = function (duration, delay, toValue, fields) {\n    var _this = this;\n    this.isHiding = true;\n    $array.each(this.sprites, function (sprite) {\n      var animation = sprite.hide(duration);\n      if (animation != null && !animation.isFinished()) {\n        _this._disposers.push(animation);\n        if (delay != null && delay > 0) {\n          animation.delay(delay);\n        }\n      }\n    });\n    if ($type.isNumber(toValue) && fields) {\n      var animation_2;\n      $array.each(fields, function (field) {\n        var anim = _this.setWorkingValue(field, toValue, duration, delay);\n        if (anim) {\n          animation_2 = anim;\n        }\n      });\n      if (animation_2 && !animation_2.isFinished()) {\n        this._hideDisposer = animation_2.events.on(\"animationended\", function () {\n          _this.setVisibility(false, true);\n          _this.isHiding = false;\n        });\n        this._disposers.push(this._hideDisposer);\n        return animation_2;\n      } else {\n        this.isHiding = false;\n        this.setVisibility(false, true);\n      }\n    } else {\n      this.isHiding = false;\n      this.setVisibility(false);\n    }\n  };\n  /**\r\n   * Returns a duration (ms) the Data Item should take to animate from one\r\n   * value to another.\r\n   *\r\n   * If the duration is not specified via parameter, this method will try to\r\n   * request a default duration from the related `Component`.\r\n   *\r\n   * @param duration  Default duration (ms)\r\n   * @return Duration (ms)\r\n   */\n  DataItem.prototype.getDuration = function (duration) {\n    if (!$type.isNumber(duration)) {\n      var component = this.component;\n      if (component) {\n        duration = component.interpolationDuration;\n      }\n    }\n    if (duration != null) {\n      if (!this._adapterO) {\n        return duration;\n      } else {\n        return this._adapterO.apply(\"duration\", duration);\n      }\n    }\n  };\n  /**\r\n   * Returns a numeric value for specific data field.\r\n   *\r\n   * If `calculated` is not set, it will return a raw value, as it is in\r\n   * source data.\r\n   *\r\n   * If `calculated` is set, it will return a pre-calculated specific value.\r\n   *\r\n   * @param name        Data field name\r\n   * @param calculated  A calculated value name\r\n   * @return Value\r\n   */\n  DataItem.prototype.getValue = function (name, calculated) {\n    if (name && this.component) {\n      if (!calculated) {\n        calculated = this.component.dataFields[name + \"Show\"];\n        if (!calculated) {\n          calculated = \"value\";\n        }\n      }\n      var value = this.values[name][calculated];\n      if (this._adapterO && this._adapterO.isEnabled(\"value\")) {\n        return this._adapterO.apply(\"value\", {\n          value: value,\n          field: name\n        }).value;\n      } else {\n        return value;\n      }\n    }\n  };\n  /**\r\n   * Returns a current working value for a specific data field.\r\n   *\r\n   * The actual value may differ from the one returned by `getValue()`. The\r\n   * latter returns static values from the data source.\r\n   *\r\n   * `getWorkingValue()` returns current value, which is usually different if\r\n   * Data Item is animating from one state to another.\r\n   *\r\n   * @param name        Data field name\r\n   * @return Value\r\n   */\n  DataItem.prototype.getWorkingValue = function (name) {\n    if (name && this.component) {\n      var realName = this.component.dataFields[name + \"Show\"];\n      if (!realName) {\n        realName = \"workingValue\";\n      }\n      if (this._adapterO) {\n        return this._adapterO.apply(\"workingValue\", {\n          workingValue: this.values[name][realName],\n          field: name\n        }).workingValue;\n      } else {\n        return this.values[name][realName];\n      }\n    }\n  };\n  /**\r\n   * @ignore\r\n   * @return Value\r\n   */\n  DataItem.prototype.getActualWorkingValue = function (name) {\n    return this.values[name].workingValue;\n  };\n  /**\r\n   * Sets a numeric value for specific data field.\r\n   *\r\n   * @param name        Data field name\r\n   * @param value       Value\r\n   * @param calculated  Calculated data field name\r\n   * @param duration    Duration (ms) to animate to new value to\r\n   * @param delay       Delay animation (ms)\r\n   */\n  DataItem.prototype.setValue = function (name, value, duration, delay) {\n    var currentValue = this.values[name].value;\n    var newDuration = this.getDuration(duration);\n    value = $type.toNumber(value);\n    if (currentValue !== value) {\n      this.values[name].value = value;\n      if (this._eventDispatcher && !this.__disabled) {\n        if (this.events.isEnabled(\"valuechanged\")) {\n          var event_2 = {\n            type: \"valuechanged\",\n            target: this,\n            property: name\n          };\n          this.events.dispatchImmediately(\"valuechanged\", event_2);\n        }\n      }\n      if (this.component) {\n        this.component.handleDataItemValueChange(this, name);\n      }\n    }\n    this.setWorkingValue(name, value, newDuration, delay);\n  };\n  DataItem.prototype.setCalculatedValue = function (name, value, calculated) {\n    var currentValue = this.values[name][calculated];\n    if (currentValue !== value && $type.isNumber(value)) {\n      this.values[name][calculated] = value;\n      if (this._eventDispatcher && !this.__disabled) {\n        if (this.events.isEnabled(\"calculatedvaluechanged\")) {\n          var event_3 = {\n            type: \"calculatedvaluechanged\",\n            target: this,\n            property: name\n          };\n          this.events.dispatchImmediately(\"calculatedvaluechanged\", event_3);\n        }\n      }\n      if (this.component) {\n        this.component.handleDataItemCalculatedValueChange(this, name);\n      }\n    }\n  };\n  /**\r\n   * Set current working numeric value for a specific data field.\r\n   *\r\n   * @param name        Data field name\r\n   * @param value       Value\r\n   * @param calculated  Calculated data field name\r\n   * @param duration    Duration (ms) to animate to new value to\r\n   * @param delay       Delay animation (ms)\r\n   * @return An [[Animation]] object used for transition to new values\r\n   */\n  DataItem.prototype.setWorkingValue = function (name, value, duration, delay) {\n    if ($type.isNumber(this.values[name].value)) {\n      var newDuration = this.getDuration(duration);\n      var workingValue = this.values[name].workingValue;\n      if (newDuration != null && newDuration > 0 && $type.isNumber(workingValue) && this.component) {\n        // sometimes NaN is passed, so only change this to != null if all cases of NaN are handled, otherwise animation won't stop\n        if (workingValue != value) {\n          var animation = this.animate({\n            childObject: this.values[name],\n            property: \"workingValue\",\n            from: workingValue,\n            to: value,\n            dummyData: name\n          }, newDuration, this.component.interpolationEasing);\n          if (delay != null) {\n            animation.delay(delay);\n          }\n          animation.events.on(\"animationstarted\", this.handleInterpolationProgress, this);\n          animation.events.on(\"animationprogress\", this.handleInterpolationProgress, this);\n          animation.events.on(\"animationended\", this.handleInterpolationProgress, this);\n          this._valueAnimations[name] = animation;\n          return animation;\n        } else {\n          var valueAnimation = this._valueAnimations[name];\n          if (valueAnimation) {\n            valueAnimation.stop();\n          }\n          this.values[name].workingValue = value;\n        }\n      } else {\n        var valueAnimation = this._valueAnimations[name];\n        if (valueAnimation) {\n          valueAnimation.stop();\n        }\n        this.values[name].workingValue = value;\n        if (this._eventDispatcher && !this.__disabled) {\n          if (this.events.isEnabled(\"workingvaluechanged\")) {\n            var event_4 = {\n              type: \"workingvaluechanged\",\n              target: this,\n              property: name\n            };\n            this.events.dispatchImmediately(\"workingvaluechanged\", event_4);\n          }\n        }\n        if (this.component) {\n          this.component.handleDataItemWorkingValueChange(this, name);\n        }\n      }\n    }\n  };\n  /**\r\n   * Sets a relative location for a data field.\r\n   *\r\n   * A location is always relative on a 0 to 1 scale, with 0 being beginning,\r\n   * 0.5 middle and 1 end.\r\n   *\r\n   * @todo Rewiew description\r\n   * @param name      Data field name\r\n   * @param value     Location (0-1)\r\n   * @param duration  Duration (ms) to animate to new value to\r\n   * @param delay     Delay animation (ms)\r\n   */\n  DataItem.prototype.setLocation = function (name, value, duration, delay) {\n    var currentLocation = this.locations[name];\n    if (currentLocation !== value) {\n      this.locations[name] = value;\n      if (this._eventDispatcher && !this.__disabled) {\n        if (this.events.isEnabled(\"locationchanged\")) {\n          var event_5 = {\n            type: \"locationchanged\",\n            target: this,\n            property: name\n          };\n          this.events.dispatchImmediately(\"locationchanged\", event_5);\n        }\n      }\n      if (this.component) {\n        this.component.handleDataItemValueChange(this, name); // correct\n      }\n\n      this.setWorkingLocation(name, value, duration, delay);\n    }\n  };\n  /**\r\n   * Sets a current working location for a data field.\r\n   *\r\n   * @todo Rewiew description\r\n   * @param name      Data field name\r\n   * @param value     Location (0-1)\r\n   * @param duration  Duration (ms) to animate to new value to\r\n   * @param delay     Delay animation (ms)\r\n   */\n  DataItem.prototype.setWorkingLocation = function (name, value, duration, delay) {\n    var newDuration = this.getDuration(duration);\n    var workingLocation = this.workingLocations[name];\n    if (newDuration != null && newDuration > 0 && $type.isNumber(workingLocation) && this.component) {\n      // sometimes NaN is passed, so only change this to != null if all cases of NaN are handled, otherwise animation won't stop\n      if (workingLocation != value) {\n        var animation = this.animate({\n          childObject: this.workingLocations,\n          property: name,\n          from: workingLocation,\n          to: value,\n          dummyData: name\n        }, newDuration, this.component.interpolationEasing);\n        if (delay != null) {\n          animation.delay(delay);\n        }\n        animation.events.on(\"animationstarted\", this.handleInterpolationProgress, this);\n        animation.events.on(\"animationprogress\", this.handleInterpolationProgress, this);\n        animation.events.on(\"animationended\", this.handleInterpolationProgress, this);\n        this._locationAnimations[name] = animation;\n        return animation;\n      } else {\n        var locationAnimation = this._locationAnimations[name];\n        if (locationAnimation) {\n          locationAnimation.stop();\n        }\n        this.workingLocations[name] = value;\n      }\n    } else {\n      var locationAnimation = this._locationAnimations[name];\n      if (locationAnimation) {\n        locationAnimation.stop();\n      }\n      this.workingLocations[name] = value;\n      if (this._eventDispatcher && !this.__disabled) {\n        if (this.events.isEnabled(\"workinglocationchanged\")) {\n          var event_6 = {\n            type: \"workinglocationchanged\",\n            target: this,\n            property: name\n          };\n          this.events.dispatchImmediately(\"workinglocationchanged\", event_6);\n        }\n      }\n      if (this.component) {\n        this.component.handleDataItemWorkingLocationChange(this, name);\n      }\n    }\n  };\n  /**\r\n   * Sets Date value to a data field.\r\n   *\r\n   * @param name      Data field name\r\n   * @param date      Date object\r\n   * @param duration  Duration (ms) to animate to new value to\r\n   */\n  DataItem.prototype.setDate = function (name, date, duration) {\n    if (!$type.isDate(date) && this.component) {\n      date = this.component.dateFormatter.parse(date);\n    }\n    var currentDate = this.dates[name];\n    if (currentDate !== date) {\n      this.dates[name] = date;\n      this.setValue(name, date.getTime(), duration);\n    }\n  };\n  /**\r\n   * Returns a Date value of the data field.\r\n   *\r\n   * @param name  Data field name\r\n   * @return Date object\r\n   */\n  DataItem.prototype.getDate = function (name) {\n    if (this._adapterO) {\n      return this._adapterO.apply(\"date\", {\n        date: this.dates[name],\n        field: name\n      }).date;\n    } else {\n      return this.dates[name];\n    }\n  };\n  /**\r\n   * Sets a Data Item-specific visual properties to apply to related elements.\r\n   *\r\n   * @param name   Property name\r\n   * @param value  Property value\r\n   */\n  DataItem.prototype.setProperty = function (name, value) {\n    if (this.properties[name] !== value) {\n      this.hasProperties = true;\n      this.properties[name] = value;\n      if (this._eventDispatcher && !this.__disabled) {\n        if (this.events.isEnabled(\"propertychanged\")) {\n          var event_7 = {\n            type: \"propertychanged\",\n            target: this,\n            property: name,\n            value: value\n          };\n          this.events.dispatchImmediately(\"propertychanged\", event_7);\n        }\n      }\n      if (this.component) {\n        this.component.handleDataItemPropertyChange(this, name);\n      }\n    }\n  };\n  /**\r\n   * Sets a related category for this Data Item.\r\n   *\r\n   * @todo Review description\r\n   * @param name   Data field name\r\n   * @param value  Category\r\n   */\n  DataItem.prototype.setCategory = function (name, value) {\n    if (!$type.isString(value)) {\n      value = $type.castString(value);\n    }\n    if (this.categories[name] !== value) {\n      this.categories[name] = value;\n    }\n  };\n  /**\r\n   * Clones the Data Item, including all related data.\r\n   *\r\n   * @return New Data Item clone\r\n   */\n  //public clone(cloneId?: string): this {\n  //\tlet dataItem: this = super.clone(cloneId);\n  //\tdataItem.copyFrom(this);\n  //\treturn dataItem;\n  //}\n  /**\r\n   * Copies all properties and related data from different data item.\r\n   *\r\n   * @param object Source data item\r\n   */\n  DataItem.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    if (source.dataContext) {\n      this.dataContext = $utils.copy(source.dataContext, {});\n    }\n    $utils.copyProperties(source.locations, this.locations);\n    /*\r\n    $utils.copyProperties(source.properties, this.properties);\r\n    $utils.copyProperties(source.categories, this.categories);\r\n    $utils.copyProperties(source.values, this.values);\r\n    $utils.copyProperties(source.dates, this.dates);\r\n      $object.each(source.values, (name, value) => {\r\n        this.values[name] = $object.copy(value);\r\n    });*/\n    if (source._adapterO) {\n      this.adapter.copyFrom(source._adapterO);\n    }\n    //this.events.copyFrom(source.events); // because copied in Base\n    this.component = source.component;\n  };\n  Object.defineProperty(DataItem.prototype, \"opacity\", {\n    /**\r\n     * Sets opacity for all Data Item's related elements (Sprites).\r\n     *\r\n     * @param value Opacity (0-1)\r\n     */\n    set: function (value) {\n      $array.each(this.sprites, function (sprite) {\n        sprite.opacity = value;\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataItem.prototype, \"ignoreMinMax\", {\n    /**\r\n     * Exclude from min/max calculations?\r\n     * @return Exclude from min/max calculations?\r\n     */\n    get: function () {\n      return this._ignoreMinMax;\n    },\n    /**\r\n     * Sets whether this data point should not be included in the scale and\r\n     * minimum/maximum calculations.\r\n     *\r\n     * E.g. some we may want to exclude a particular data point from influencing\r\n     * [[ValueAxis]] scale.\r\n     *\r\n     * @param value  Exclude from min/max calculations?\r\n     */\n    set: function (value) {\n      this._ignoreMinMax = value;\n      if (this._eventDispatcher && !this.__disabled) {\n        if (this.events.isEnabled(\"propertychanged\")) {\n          var event_8 = {\n            type: \"propertychanged\",\n            target: this,\n            property: \"ignoreMinMax\",\n            value: value\n          };\n          this.events.dispatchImmediately(\"propertychanged\", event_8);\n        }\n      }\n      if (this.component) {\n        this.component.handleDataItemPropertyChange(this, \"ignoreMinMax\");\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates and starts an [[Animation]] to interpolate (morph) Data Item's\r\n   * properties and/or values.\r\n   *\r\n   * @see {@link Animation}\r\n   * @param animationOptions  Animation options\r\n   * @param duration          Animation duration (ms)\r\n   * @param easing            Easing function\r\n   * @return Animation\r\n   */\n  DataItem.prototype.animate = function (animationOptions, duration, easing) {\n    return new Animation(this, animationOptions, duration, easing).start();\n  };\n  /**\r\n   * Handles intermediate steps when Data Item is interpolating (morphing) from\r\n   * one value to another.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event Event object\r\n   */\n  DataItem.prototype.handleInterpolationProgress = function (event) {\n    var animation = event.target;\n    // it's always only one options, no need cycle\n    var animationOptions = animation.animationOptions[0];\n    if (animationOptions) {\n      if (this._eventDispatcher && !this.__disabled) {\n        if (this.events.isEnabled(\"workingvaluechanged\")) {\n          var event_9 = {\n            type: \"workingvaluechanged\",\n            target: this,\n            property: animationOptions.dummyData\n          };\n          this.events.dispatchImmediately(\"workingvaluechanged\", event_9);\n        }\n      }\n      if (this.component) {\n        this.component.handleDataItemWorkingValueChange(this, animationOptions.dummyData);\n      }\n    }\n  };\n  /**\r\n   * Checks whether Data Item has values set for all of the data fields,\r\n   * supplied via argument.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param fields  Field list to check\r\n   * @return Has values for all fields?\r\n   */\n  DataItem.prototype.hasValue = function (fields) {\n    // todo: what about categories?\n    for (var i = 0, len = fields.length; i < len; i++) {\n      var values = this.values[fields[i]];\n      if (!values || !$type.hasValue(values.value)) {\n        return false;\n      }\n    }\n    return true;\n  };\n  Object.defineProperty(DataItem.prototype, \"depth\", {\n    /**\r\n     * Depth of the Data Item.\r\n     *\r\n     * In nested data structures, like TreeMap, this indicates the level this\r\n     * data point is at, in relation to the parent Data Item.\r\n     *\r\n     * @return Depth\r\n     */\n    get: function () {\n      if (!this.parent) {\n        return 0;\n      } else {\n        return this.parent.depth + 1;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataItem.prototype, \"dataContext\", {\n    /**\r\n     * Sets to a reference to an original object from Component's data.\r\n     *\r\n     * @return [description]\r\n     */\n    get: function () {\n      return this._dataContext;\n    },\n    /**\r\n     * A reference to an original object in Component's data, that this Data Item\r\n     * is derived from.\r\n     *\r\n     * @param value Original data object\r\n     */\n    set: function (value) {\n      this._dataContext = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * adds a sprite to dataItem.sprites array\r\n   * @ignore\r\n   */\n  DataItem.prototype.addSprite = function (sprite) {\n    if (sprite.dataItem && sprite.dataItem != this) {\n      $array.remove(sprite.dataItem.sprites, sprite);\n    }\n    if (!this.visible) {\n      sprite.hide(0);\n    }\n    if (this.isHiding) {\n      sprite.hide();\n    }\n    this.sprites.push(sprite);\n    sprite.dataItem = this;\n  };\n  return DataItem;\n}(BaseObjectEvents);\nexport { DataItem };","map":{"version":3,"names":["__extends","BaseObjectEvents","Adapter","Animation","AnimationDisposer","$utils","$array","$type","DataItem","_super","_this","call","_disabled","hasProperties","values","categories","dates","locations","workingLocations","properties","sprites","isTemplate","_index","_visible","_hidden","_ignoreMinMax","hasChildren","isHiding","_valueAnimations","_locationAnimations","className","applyTheme","Object","defineProperty","prototype","get","_adapterO","enumerable","configurable","component","_animations","_disposers","push","set","value","hidden","setVisibility","each","sprite","__disabled","noChangeValues","visible","defaultState","hiddenState","_eventDispatcher","events","isEnabled","event_1","type","target","dispatchImmediately","show","duration","delay","fields","_hideDisposer","removeDispose","animation_1","field","setWorkingValue","animation","isFinished","dispose","hide","toValue","isNumber","animation_2","anim","on","getDuration","interpolationDuration","apply","getValue","name","calculated","dataFields","getWorkingValue","realName","workingValue","getActualWorkingValue","setValue","currentValue","newDuration","toNumber","event_2","property","handleDataItemValueChange","setCalculatedValue","event_3","handleDataItemCalculatedValueChange","animate","childObject","from","to","dummyData","interpolationEasing","handleInterpolationProgress","valueAnimation","stop","event_4","handleDataItemWorkingValueChange","setLocation","currentLocation","event_5","setWorkingLocation","workingLocation","locationAnimation","event_6","handleDataItemWorkingLocationChange","setDate","date","isDate","dateFormatter","parse","currentDate","getTime","getDate","setProperty","event_7","handleDataItemPropertyChange","setCategory","isString","castString","copyFrom","source","dataContext","copy","copyProperties","adapter","opacity","event_8","animationOptions","easing","start","event","event_9","hasValue","i","len","length","parent","depth","_dataContext","addSprite","dataItem","remove"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/DataItem.js"],"sourcesContent":["/**\r\n * Defines functionality for \"Data Item\"\r\n *\r\n * A Data Item can be any object that can hold data. For example [[LineSeries]]\r\n * holds a number of values, that comprise a line graph. Each of those values\r\n * (data points) is a {DataItem}.\r\n *\r\n * Furthermore the [[LineSeries]] itself can be represented as a entry in the\r\n * legend. Since legend needs access to Line Series' value, a DataItem is\r\n * created for the series.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObjectEvents } from \"./Base\";\r\nimport { Adapter } from \"./utils/Adapter\";\r\nimport { Animation, AnimationDisposer } from \"./utils/Animation\";\r\nimport * as $utils from \"./utils/Utils\";\r\nimport * as $array from \"./utils/Array\";\r\n//import * as $object from \"./utils/Object\";\r\nimport * as $type from \"./utils/Type\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * DataItem represents single element in data, for example a data point in a\r\n * Serial Chart Series, e.g. a column.\r\n *\r\n * DataItem defines relationship between structured data, required for specific\r\n * chart type or task, and raw source data.\r\n *\r\n * It also implements required calculations, updates related visual elements,\r\n * etc.\r\n *\r\n * @todo Description\r\n * @important\r\n */\r\nvar DataItem = /** @class */ (function (_super) {\r\n    __extends(DataItem, _super);\r\n    /**\r\n     * Constructor\r\n     * @todo Adding events to disposers produces errors in some cases, which means that chart is using disposed Data Items which is not right\r\n     */\r\n    function DataItem() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * This Data Item is currently disabled.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._disabled = false;\r\n        /**\r\n         * Indicates whether Data Item has any properties set.\r\n         *\r\n         * If it does not have any, the code can use this property to check whether\r\n         * they need to apply costly operation of re-applying properties, whenever\r\n         * Data Item-related element is redrawn, e.g. series.\r\n         */\r\n        _this.hasProperties = false;\r\n        /**\r\n         * An object containing calculated values.\r\n         */\r\n        _this.values = {};\r\n        /**\r\n         * An object container current working values.\r\n         */\r\n        //public readonly workingValues: { [index: string]: { [index: string]: number } } = {};\r\n        /**\r\n         * An object containing categories.\r\n         */\r\n        _this.categories = {};\r\n        /**\r\n         * An object containing dates.\r\n         */\r\n        _this.dates = {};\r\n        /**\r\n         * An object containing locations for the Data Item.\r\n         *\r\n         * A location is a position within date or category, or, in some other cases,\r\n         * where there is no single point but rather some period.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/series/#Data_item_locations} for info how data item locations work\r\n         */\r\n        _this.locations = {};\r\n        /**\r\n         * Current working locations.\r\n         */\r\n        _this.workingLocations = {};\r\n        /**\r\n         * An object containing Data Item specific appearance properties in key-value\r\n         * pairs.\r\n         *\r\n         * Sometimes a single Data Item needs to apply different properties than the\r\n         * rest of the data [[Series]] it is part of. E.g. a single column,\r\n         * represented by a Data Item needs to be filled with a different color than\r\n         * the reset of the [[ColumnSeries]] it belongs to.\r\n         *\r\n         * That's where Data Item's `properties` come into play.\r\n         *\r\n         * Please note that you should set Data Item-specific properties using\r\n         * `setProperty()` method, rather than access `properties` object directly.\r\n         */\r\n        _this.properties = {};\r\n        /**\r\n         * A list of [[Sprite]] elements that are associated with this Data Item.\r\n         *\r\n         * E.g. an [[Axis]] Data Item has several separate elements associated with\r\n         * it, like [[AxisTick]], [[AxisLabel]], and [[Grid]].\r\n         *\r\n         * Data Item keeps track of all of them, so it can toggle all related visual\r\n         * elements when it itself is toggled.\r\n         */\r\n        _this.sprites = [];\r\n        /**\r\n         * Identifies if this object is a \"template\" and should not be treated as\r\n         * real object that is drawn or actually used in the chart.\r\n         */\r\n        _this.isTemplate = false;\r\n        /**\r\n         * The current index within the dataItems\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._index = null;\r\n        /**\r\n         * Is Data Item currently visible?\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._visible = true;\r\n        /**\r\n         * Is Data Item currently hidden?\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._hidden = false;\r\n        /**\r\n         * Should this Data Item be used when calculating data ranges and scales?\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._ignoreMinMax = false;\r\n        /**\r\n         * Some of the Data Item's data fields may contain an array of children. This\r\n         * property contains an object indicating which fields hold an array, so that\r\n         * they can be processed properly.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this.hasChildren = {};\r\n        /**\r\n         * Indicates whether Data Item is currently animiting from visible to hidden\r\n         * state.\r\n         */\r\n        _this.isHiding = false;\r\n        /**\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._valueAnimations = {};\r\n        /**\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this._locationAnimations = {};\r\n        _this.className = \"DataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DataItem.prototype, \"adapter\", {\r\n        /**\r\n         * Holds Adapter.\r\n         */\r\n        get: function () {\r\n            if (!this._adapterO) {\r\n                this._adapterO = new Adapter(this);\r\n            }\r\n            return this._adapterO;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataItem.prototype, \"index\", {\r\n        /**\r\n         * Data Item's position index in Component's data.\r\n         *\r\n         * @return Index\r\n         */\r\n        get: function () {\r\n            if (this.component) {\r\n                if (this._index != null) {\r\n                    return this._index;\r\n                }\r\n                else {\r\n                    return -1;\r\n                }\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataItem.prototype, \"animations\", {\r\n        /**\r\n         * A list of [[Animations]] objects currently mutating Data Item's values.\r\n         *\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            if (!this._animations) {\r\n                this._animations = [];\r\n                this._disposers.push(new AnimationDisposer(this._animations));\r\n            }\r\n            return this._animations;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataItem.prototype, \"visible\", {\r\n        /**\r\n         * Returns `true` if this Data Item is currently visible.\r\n         *\r\n         * @return Visible?\r\n         */\r\n        get: function () {\r\n            if (this._hidden) {\r\n                return false;\r\n            }\r\n            return this._visible;\r\n        },\r\n        /**\r\n         * Sets visibility of the Data Item.\r\n         *\r\n         * @param value Visible?\r\n         */\r\n        set: function (value) {\r\n            if (value) {\r\n                this.hidden = false;\r\n            }\r\n            if (this._visible != value) {\r\n                this.setVisibility(value);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataItem.prototype, \"hidden\", {\r\n        /**\r\n         * Returns `true` if this Data Item is currently hidden.\r\n         *\r\n         * @return Hidden?\r\n         */\r\n        get: function () {\r\n            return this._hidden;\r\n        },\r\n        /**\r\n         * Sets hidden flag for data item. Mostly used to initially hide data item.\r\n         *\r\n         * @param value Hidden?\r\n         */\r\n        set: function (value) {\r\n            if (this._hidden != value) {\r\n                this._hidden = value;\r\n                if (value) {\r\n                    this.setVisibility(false);\r\n                }\r\n                else {\r\n                    this.setVisibility(true, true);\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataItem.prototype, \"__disabled\", {\r\n        /**\r\n         * Is this Data Item currently disabled?\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {boolean}\r\n         */\r\n        get: function () {\r\n            return this._disabled;\r\n        },\r\n        /**\r\n         * Disables all Sprites associated with this Data Item.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param {boolean}\r\n         */\r\n        set: function (value) {\r\n            //\tif (this._disabled != value) { // not good\r\n            this._disabled = value;\r\n            $array.each(this.sprites, function (sprite) {\r\n                sprite.__disabled = value;\r\n            });\r\n            //\t}\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets visibility of the Data Item.\r\n     *\r\n     * @param value Data Item\r\n     */\r\n    DataItem.prototype.setVisibility = function (value, noChangeValues) {\r\n        $array.each(this.sprites, function (sprite) {\r\n            if (value) {\r\n                sprite.visible = sprite.defaultState.properties.visible;\r\n            }\r\n            else {\r\n                if (sprite.hiddenState) {\r\n                    sprite.visible = sprite.hiddenState.properties.visible;\r\n                }\r\n                else {\r\n                    sprite.visible = false;\r\n                }\r\n            }\r\n        });\r\n        this._visible = value;\r\n        if (this._eventDispatcher && !this.__disabled) {\r\n            if (this.events.isEnabled(\"visibilitychanged\")) {\r\n                var event_1 = {\r\n                    type: \"visibilitychanged\",\r\n                    target: this,\r\n                    visible: value\r\n                };\r\n                this.events.dispatchImmediately(\"visibilitychanged\", event_1);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Shows the Data Item and related visual elements.\r\n     *\r\n     * @param duration  Animation duration (ms)\r\n     * @param delay     Delay animation (ms)\r\n     * @param fields    A list of fields to set values of\r\n     */\r\n    DataItem.prototype.show = function (duration, delay, fields) {\r\n        var _this = this;\r\n        if (!this.hidden) {\r\n            this.setVisibility(true, true);\r\n            this.isHiding = false;\r\n            if (this._hideDisposer) {\r\n                this.removeDispose(this._hideDisposer);\r\n            }\r\n            var animation_1;\r\n            if (fields) {\r\n                $array.each(fields, function (field) {\r\n                    animation_1 = _this.setWorkingValue(field, _this.values[field].value, duration, delay);\r\n                });\r\n            }\r\n            $array.each(this.sprites, function (sprite) {\r\n                var animation = sprite.show(duration);\r\n                if (animation != null && !animation.isFinished()) {\r\n                    _this._disposers.push(animation);\r\n                    if (delay != null && delay > 0) {\r\n                        animation.delay(delay);\r\n                    }\r\n                }\r\n            });\r\n            return animation_1;\r\n        }\r\n    };\r\n    /**\r\n     * Destroys this object and all related data.\r\n     */\r\n    DataItem.prototype.dispose = function () {\r\n        _super.prototype.dispose.call(this);\r\n        $array.each(this.sprites, function (sprite) {\r\n            sprite.dispose();\r\n        });\r\n        this.sprites = [];\r\n    };\r\n    /**\r\n     * Hides the Data Item and related visual elements.\r\n     *\r\n     * @param duration  Animation duration (ms)\r\n     * @param delay     Delay animation (ms)\r\n     * @param toValue   A value to set to `fields` when hiding\r\n     * @param fields    A list of data fields to set value to `toValue`\r\n     */\r\n    DataItem.prototype.hide = function (duration, delay, toValue, fields) {\r\n        var _this = this;\r\n        this.isHiding = true;\r\n        $array.each(this.sprites, function (sprite) {\r\n            var animation = sprite.hide(duration);\r\n            if (animation != null && !animation.isFinished()) {\r\n                _this._disposers.push(animation);\r\n                if (delay != null && delay > 0) {\r\n                    animation.delay(delay);\r\n                }\r\n            }\r\n        });\r\n        if ($type.isNumber(toValue) && fields) {\r\n            var animation_2;\r\n            $array.each(fields, function (field) {\r\n                var anim = _this.setWorkingValue(field, toValue, duration, delay);\r\n                if (anim) {\r\n                    animation_2 = anim;\r\n                }\r\n            });\r\n            if (animation_2 && !animation_2.isFinished()) {\r\n                this._hideDisposer = animation_2.events.on(\"animationended\", function () {\r\n                    _this.setVisibility(false, true);\r\n                    _this.isHiding = false;\r\n                });\r\n                this._disposers.push(this._hideDisposer);\r\n                return animation_2;\r\n            }\r\n            else {\r\n                this.isHiding = false;\r\n                this.setVisibility(false, true);\r\n            }\r\n        }\r\n        else {\r\n            this.isHiding = false;\r\n            this.setVisibility(false);\r\n        }\r\n    };\r\n    /**\r\n     * Returns a duration (ms) the Data Item should take to animate from one\r\n     * value to another.\r\n     *\r\n     * If the duration is not specified via parameter, this method will try to\r\n     * request a default duration from the related `Component`.\r\n     *\r\n     * @param duration  Default duration (ms)\r\n     * @return Duration (ms)\r\n     */\r\n    DataItem.prototype.getDuration = function (duration) {\r\n        if (!$type.isNumber(duration)) {\r\n            var component = this.component;\r\n            if (component) {\r\n                duration = component.interpolationDuration;\r\n            }\r\n        }\r\n        if (duration != null) {\r\n            if (!this._adapterO) {\r\n                return duration;\r\n            }\r\n            else {\r\n                return this._adapterO.apply(\"duration\", duration);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a numeric value for specific data field.\r\n     *\r\n     * If `calculated` is not set, it will return a raw value, as it is in\r\n     * source data.\r\n     *\r\n     * If `calculated` is set, it will return a pre-calculated specific value.\r\n     *\r\n     * @param name        Data field name\r\n     * @param calculated  A calculated value name\r\n     * @return Value\r\n     */\r\n    DataItem.prototype.getValue = function (name, calculated) {\r\n        if (name && this.component) {\r\n            if (!calculated) {\r\n                calculated = this.component.dataFields[name + \"Show\"];\r\n                if (!calculated) {\r\n                    calculated = \"value\";\r\n                }\r\n            }\r\n            var value = this.values[name][calculated];\r\n            if (this._adapterO && this._adapterO.isEnabled(\"value\")) {\r\n                return this._adapterO.apply(\"value\", {\r\n                    value: value,\r\n                    field: name\r\n                }).value;\r\n            }\r\n            else {\r\n                return value;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a current working value for a specific data field.\r\n     *\r\n     * The actual value may differ from the one returned by `getValue()`. The\r\n     * latter returns static values from the data source.\r\n     *\r\n     * `getWorkingValue()` returns current value, which is usually different if\r\n     * Data Item is animating from one state to another.\r\n     *\r\n     * @param name        Data field name\r\n     * @return Value\r\n     */\r\n    DataItem.prototype.getWorkingValue = function (name) {\r\n        if (name && this.component) {\r\n            var realName = this.component.dataFields[name + \"Show\"];\r\n            if (!realName) {\r\n                realName = \"workingValue\";\r\n            }\r\n            if (this._adapterO) {\r\n                return this._adapterO.apply(\"workingValue\", {\r\n                    workingValue: this.values[name][realName],\r\n                    field: name\r\n                }).workingValue;\r\n            }\r\n            else {\r\n                return this.values[name][realName];\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     * @return Value\r\n     */\r\n    DataItem.prototype.getActualWorkingValue = function (name) {\r\n        return this.values[name].workingValue;\r\n    };\r\n    /**\r\n     * Sets a numeric value for specific data field.\r\n     *\r\n     * @param name        Data field name\r\n     * @param value       Value\r\n     * @param calculated  Calculated data field name\r\n     * @param duration    Duration (ms) to animate to new value to\r\n     * @param delay       Delay animation (ms)\r\n     */\r\n    DataItem.prototype.setValue = function (name, value, duration, delay) {\r\n        var currentValue = this.values[name].value;\r\n        var newDuration = this.getDuration(duration);\r\n        value = $type.toNumber(value);\r\n        if (currentValue !== value) {\r\n            this.values[name].value = value;\r\n            if (this._eventDispatcher && !this.__disabled) {\r\n                if (this.events.isEnabled(\"valuechanged\")) {\r\n                    var event_2 = {\r\n                        type: \"valuechanged\",\r\n                        target: this,\r\n                        property: name\r\n                    };\r\n                    this.events.dispatchImmediately(\"valuechanged\", event_2);\r\n                }\r\n            }\r\n            if (this.component) {\r\n                this.component.handleDataItemValueChange(this, name);\r\n            }\r\n        }\r\n        this.setWorkingValue(name, value, newDuration, delay);\r\n    };\r\n    DataItem.prototype.setCalculatedValue = function (name, value, calculated) {\r\n        var currentValue = this.values[name][calculated];\r\n        if (currentValue !== value && $type.isNumber(value)) {\r\n            this.values[name][calculated] = value;\r\n            if (this._eventDispatcher && !this.__disabled) {\r\n                if (this.events.isEnabled(\"calculatedvaluechanged\")) {\r\n                    var event_3 = {\r\n                        type: \"calculatedvaluechanged\",\r\n                        target: this,\r\n                        property: name\r\n                    };\r\n                    this.events.dispatchImmediately(\"calculatedvaluechanged\", event_3);\r\n                }\r\n            }\r\n            if (this.component) {\r\n                this.component.handleDataItemCalculatedValueChange(this, name);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Set current working numeric value for a specific data field.\r\n     *\r\n     * @param name        Data field name\r\n     * @param value       Value\r\n     * @param calculated  Calculated data field name\r\n     * @param duration    Duration (ms) to animate to new value to\r\n     * @param delay       Delay animation (ms)\r\n     * @return An [[Animation]] object used for transition to new values\r\n     */\r\n    DataItem.prototype.setWorkingValue = function (name, value, duration, delay) {\r\n        if ($type.isNumber(this.values[name].value)) {\r\n            var newDuration = this.getDuration(duration);\r\n            var workingValue = this.values[name].workingValue;\r\n            if (newDuration != null && newDuration > 0 && $type.isNumber(workingValue) && this.component) { // sometimes NaN is passed, so only change this to != null if all cases of NaN are handled, otherwise animation won't stop\r\n                if (workingValue != value) {\r\n                    var animation = this.animate({ childObject: this.values[name], property: \"workingValue\", from: workingValue, to: value, dummyData: name }, newDuration, this.component.interpolationEasing);\r\n                    if (delay != null) {\r\n                        animation.delay(delay);\r\n                    }\r\n                    animation.events.on(\"animationstarted\", this.handleInterpolationProgress, this);\r\n                    animation.events.on(\"animationprogress\", this.handleInterpolationProgress, this);\r\n                    animation.events.on(\"animationended\", this.handleInterpolationProgress, this);\r\n                    this._valueAnimations[name] = animation;\r\n                    return animation;\r\n                }\r\n                else {\r\n                    var valueAnimation = this._valueAnimations[name];\r\n                    if (valueAnimation) {\r\n                        valueAnimation.stop();\r\n                    }\r\n                    this.values[name].workingValue = value;\r\n                }\r\n            }\r\n            else {\r\n                var valueAnimation = this._valueAnimations[name];\r\n                if (valueAnimation) {\r\n                    valueAnimation.stop();\r\n                }\r\n                this.values[name].workingValue = value;\r\n                if (this._eventDispatcher && !this.__disabled) {\r\n                    if (this.events.isEnabled(\"workingvaluechanged\")) {\r\n                        var event_4 = {\r\n                            type: \"workingvaluechanged\",\r\n                            target: this,\r\n                            property: name\r\n                        };\r\n                        this.events.dispatchImmediately(\"workingvaluechanged\", event_4);\r\n                    }\r\n                }\r\n                if (this.component) {\r\n                    this.component.handleDataItemWorkingValueChange(this, name);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets a relative location for a data field.\r\n     *\r\n     * A location is always relative on a 0 to 1 scale, with 0 being beginning,\r\n     * 0.5 middle and 1 end.\r\n     *\r\n     * @todo Rewiew description\r\n     * @param name      Data field name\r\n     * @param value     Location (0-1)\r\n     * @param duration  Duration (ms) to animate to new value to\r\n     * @param delay     Delay animation (ms)\r\n     */\r\n    DataItem.prototype.setLocation = function (name, value, duration, delay) {\r\n        var currentLocation = this.locations[name];\r\n        if (currentLocation !== value) {\r\n            this.locations[name] = value;\r\n            if (this._eventDispatcher && !this.__disabled) {\r\n                if (this.events.isEnabled(\"locationchanged\")) {\r\n                    var event_5 = {\r\n                        type: \"locationchanged\",\r\n                        target: this,\r\n                        property: name\r\n                    };\r\n                    this.events.dispatchImmediately(\"locationchanged\", event_5);\r\n                }\r\n            }\r\n            if (this.component) {\r\n                this.component.handleDataItemValueChange(this, name); // correct\r\n            }\r\n            this.setWorkingLocation(name, value, duration, delay);\r\n        }\r\n    };\r\n    /**\r\n     * Sets a current working location for a data field.\r\n     *\r\n     * @todo Rewiew description\r\n     * @param name      Data field name\r\n     * @param value     Location (0-1)\r\n     * @param duration  Duration (ms) to animate to new value to\r\n     * @param delay     Delay animation (ms)\r\n     */\r\n    DataItem.prototype.setWorkingLocation = function (name, value, duration, delay) {\r\n        var newDuration = this.getDuration(duration);\r\n        var workingLocation = this.workingLocations[name];\r\n        if (newDuration != null && newDuration > 0 && $type.isNumber(workingLocation) && this.component) { // sometimes NaN is passed, so only change this to != null if all cases of NaN are handled, otherwise animation won't stop\r\n            if (workingLocation != value) {\r\n                var animation = this.animate({ childObject: this.workingLocations, property: name, from: workingLocation, to: value, dummyData: name }, newDuration, this.component.interpolationEasing);\r\n                if (delay != null) {\r\n                    animation.delay(delay);\r\n                }\r\n                animation.events.on(\"animationstarted\", this.handleInterpolationProgress, this);\r\n                animation.events.on(\"animationprogress\", this.handleInterpolationProgress, this);\r\n                animation.events.on(\"animationended\", this.handleInterpolationProgress, this);\r\n                this._locationAnimations[name] = animation;\r\n                return animation;\r\n            }\r\n            else {\r\n                var locationAnimation = this._locationAnimations[name];\r\n                if (locationAnimation) {\r\n                    locationAnimation.stop();\r\n                }\r\n                this.workingLocations[name] = value;\r\n            }\r\n        }\r\n        else {\r\n            var locationAnimation = this._locationAnimations[name];\r\n            if (locationAnimation) {\r\n                locationAnimation.stop();\r\n            }\r\n            this.workingLocations[name] = value;\r\n            if (this._eventDispatcher && !this.__disabled) {\r\n                if (this.events.isEnabled(\"workinglocationchanged\")) {\r\n                    var event_6 = {\r\n                        type: \"workinglocationchanged\",\r\n                        target: this,\r\n                        property: name\r\n                    };\r\n                    this.events.dispatchImmediately(\"workinglocationchanged\", event_6);\r\n                }\r\n            }\r\n            if (this.component) {\r\n                this.component.handleDataItemWorkingLocationChange(this, name);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets Date value to a data field.\r\n     *\r\n     * @param name      Data field name\r\n     * @param date      Date object\r\n     * @param duration  Duration (ms) to animate to new value to\r\n     */\r\n    DataItem.prototype.setDate = function (name, date, duration) {\r\n        if (!$type.isDate(date) && this.component) {\r\n            date = this.component.dateFormatter.parse(date);\r\n        }\r\n        var currentDate = this.dates[name];\r\n        if (currentDate !== date) {\r\n            this.dates[name] = date;\r\n            this.setValue(name, date.getTime(), duration);\r\n        }\r\n    };\r\n    /**\r\n     * Returns a Date value of the data field.\r\n     *\r\n     * @param name  Data field name\r\n     * @return Date object\r\n     */\r\n    DataItem.prototype.getDate = function (name) {\r\n        if (this._adapterO) {\r\n            return this._adapterO.apply(\"date\", {\r\n                date: this.dates[name],\r\n                field: name\r\n            }).date;\r\n        }\r\n        else {\r\n            return this.dates[name];\r\n        }\r\n    };\r\n    /**\r\n     * Sets a Data Item-specific visual properties to apply to related elements.\r\n     *\r\n     * @param name   Property name\r\n     * @param value  Property value\r\n     */\r\n    DataItem.prototype.setProperty = function (name, value) {\r\n        if (this.properties[name] !== value) {\r\n            this.hasProperties = true;\r\n            this.properties[name] = value;\r\n            if (this._eventDispatcher && !this.__disabled) {\r\n                if (this.events.isEnabled(\"propertychanged\")) {\r\n                    var event_7 = {\r\n                        type: \"propertychanged\",\r\n                        target: this,\r\n                        property: name,\r\n                        value: value\r\n                    };\r\n                    this.events.dispatchImmediately(\"propertychanged\", event_7);\r\n                }\r\n            }\r\n            if (this.component) {\r\n                this.component.handleDataItemPropertyChange(this, name);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets a related category for this Data Item.\r\n     *\r\n     * @todo Review description\r\n     * @param name   Data field name\r\n     * @param value  Category\r\n     */\r\n    DataItem.prototype.setCategory = function (name, value) {\r\n        if (!$type.isString(value)) {\r\n            value = $type.castString(value);\r\n        }\r\n        if (this.categories[name] !== value) {\r\n            this.categories[name] = value;\r\n        }\r\n    };\r\n    /**\r\n     * Clones the Data Item, including all related data.\r\n     *\r\n     * @return New Data Item clone\r\n     */\r\n    //public clone(cloneId?: string): this {\r\n    //\tlet dataItem: this = super.clone(cloneId);\r\n    //\tdataItem.copyFrom(this);\r\n    //\treturn dataItem;\r\n    //}\r\n    /**\r\n     * Copies all properties and related data from different data item.\r\n     *\r\n     * @param object Source data item\r\n     */\r\n    DataItem.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        if (source.dataContext) {\r\n            this.dataContext = $utils.copy(source.dataContext, {});\r\n        }\r\n        $utils.copyProperties(source.locations, this.locations);\r\n        /*\r\n        $utils.copyProperties(source.properties, this.properties);\r\n        $utils.copyProperties(source.categories, this.categories);\r\n        $utils.copyProperties(source.values, this.values);\r\n        $utils.copyProperties(source.dates, this.dates);\r\n\r\n        $object.each(source.values, (name, value) => {\r\n            this.values[name] = $object.copy(value);\r\n        });*/\r\n        if (source._adapterO) {\r\n            this.adapter.copyFrom(source._adapterO);\r\n        }\r\n        //this.events.copyFrom(source.events); // because copied in Base\r\n        this.component = source.component;\r\n    };\r\n    Object.defineProperty(DataItem.prototype, \"opacity\", {\r\n        /**\r\n         * Sets opacity for all Data Item's related elements (Sprites).\r\n         *\r\n         * @param value Opacity (0-1)\r\n         */\r\n        set: function (value) {\r\n            $array.each(this.sprites, function (sprite) {\r\n                sprite.opacity = value;\r\n            });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataItem.prototype, \"ignoreMinMax\", {\r\n        /**\r\n         * Exclude from min/max calculations?\r\n         * @return Exclude from min/max calculations?\r\n         */\r\n        get: function () {\r\n            return this._ignoreMinMax;\r\n        },\r\n        /**\r\n         * Sets whether this data point should not be included in the scale and\r\n         * minimum/maximum calculations.\r\n         *\r\n         * E.g. some we may want to exclude a particular data point from influencing\r\n         * [[ValueAxis]] scale.\r\n         *\r\n         * @param value  Exclude from min/max calculations?\r\n         */\r\n        set: function (value) {\r\n            this._ignoreMinMax = value;\r\n            if (this._eventDispatcher && !this.__disabled) {\r\n                if (this.events.isEnabled(\"propertychanged\")) {\r\n                    var event_8 = {\r\n                        type: \"propertychanged\",\r\n                        target: this,\r\n                        property: \"ignoreMinMax\",\r\n                        value: value\r\n                    };\r\n                    this.events.dispatchImmediately(\"propertychanged\", event_8);\r\n                }\r\n            }\r\n            if (this.component) {\r\n                this.component.handleDataItemPropertyChange(this, \"ignoreMinMax\");\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates and starts an [[Animation]] to interpolate (morph) Data Item's\r\n     * properties and/or values.\r\n     *\r\n     * @see {@link Animation}\r\n     * @param animationOptions  Animation options\r\n     * @param duration          Animation duration (ms)\r\n     * @param easing            Easing function\r\n     * @return Animation\r\n     */\r\n    DataItem.prototype.animate = function (animationOptions, duration, easing) {\r\n        return new Animation(this, animationOptions, duration, easing).start();\r\n    };\r\n    /**\r\n     * Handles intermediate steps when Data Item is interpolating (morphing) from\r\n     * one value to another.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event Event object\r\n     */\r\n    DataItem.prototype.handleInterpolationProgress = function (event) {\r\n        var animation = event.target;\r\n        // it's always only one options, no need cycle\r\n        var animationOptions = animation.animationOptions[0];\r\n        if (animationOptions) {\r\n            if (this._eventDispatcher && !this.__disabled) {\r\n                if (this.events.isEnabled(\"workingvaluechanged\")) {\r\n                    var event_9 = {\r\n                        type: \"workingvaluechanged\",\r\n                        target: this,\r\n                        property: animationOptions.dummyData\r\n                    };\r\n                    this.events.dispatchImmediately(\"workingvaluechanged\", event_9);\r\n                }\r\n            }\r\n            if (this.component) {\r\n                this.component.handleDataItemWorkingValueChange(this, animationOptions.dummyData);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Checks whether Data Item has values set for all of the data fields,\r\n     * supplied via argument.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param fields  Field list to check\r\n     * @return Has values for all fields?\r\n     */\r\n    DataItem.prototype.hasValue = function (fields) {\r\n        // todo: what about categories?\r\n        for (var i = 0, len = fields.length; i < len; i++) {\r\n            var values = this.values[fields[i]];\r\n            if (!values || !$type.hasValue(values.value)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    Object.defineProperty(DataItem.prototype, \"depth\", {\r\n        /**\r\n         * Depth of the Data Item.\r\n         *\r\n         * In nested data structures, like TreeMap, this indicates the level this\r\n         * data point is at, in relation to the parent Data Item.\r\n         *\r\n         * @return Depth\r\n         */\r\n        get: function () {\r\n            if (!this.parent) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return this.parent.depth + 1;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataItem.prototype, \"dataContext\", {\r\n        /**\r\n         * Sets to a reference to an original object from Component's data.\r\n         *\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            return this._dataContext;\r\n        },\r\n        /**\r\n         * A reference to an original object in Component's data, that this Data Item\r\n         * is derived from.\r\n         *\r\n         * @param value Original data object\r\n         */\r\n        set: function (value) {\r\n            this._dataContext = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * adds a sprite to dataItem.sprites array\r\n     * @ignore\r\n     */\r\n    DataItem.prototype.addSprite = function (sprite) {\r\n        if (sprite.dataItem && sprite.dataItem != this) {\r\n            $array.remove(sprite.dataItem.sprites, sprite);\r\n        }\r\n        if (!this.visible) {\r\n            sprite.hide(0);\r\n        }\r\n        if (this.isHiding) {\r\n            sprite.hide();\r\n        }\r\n        this.sprites.push(sprite);\r\n        sprite.dataItem = this;\r\n    };\r\n    return DataItem;\r\n}(BaseObjectEvents));\r\nexport { DataItem };\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAS,QAAQ,OAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,gBAAgB,QAAQ,QAAQ;AACzC,SAASC,OAAO,QAAQ,iBAAiB;AACzC,SAASC,SAAS,EAAEC,iBAAiB,QAAQ,mBAAmB;AAChE,OAAO,KAAKC,MAAM,MAAM,eAAe;AACvC,OAAO,KAAKC,MAAM,MAAM,eAAe;AACvC;AACA,OAAO,KAAKC,KAAK,MAAM,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,QAAQ,GAAG,aAAe,UAAUC,MAAM,EAAE;EAC5CT,SAAS,CAACQ,QAAQ,EAAEC,MAAM,CAAC;EAC3B;AACJ;AACA;AACA;EACI,SAASD,QAAQA,CAAA,EAAG;IAChB,IAAIE,KAAK,GAAGD,MAAM,CAACE,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI;IACrC;AACR;AACA;AACA;AACA;IACQD,KAAK,CAACE,SAAS,GAAG,KAAK;IACvB;AACR;AACA;AACA;AACA;AACA;AACA;IACQF,KAAK,CAACG,aAAa,GAAG,KAAK;IAC3B;AACR;AACA;IACQH,KAAK,CAACI,MAAM,GAAG,CAAC,CAAC;IACjB;AACR;AACA;IACQ;IACA;AACR;AACA;IACQJ,KAAK,CAACK,UAAU,GAAG,CAAC,CAAC;IACrB;AACR;AACA;IACQL,KAAK,CAACM,KAAK,GAAG,CAAC,CAAC;IAChB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQN,KAAK,CAACO,SAAS,GAAG,CAAC,CAAC;IACpB;AACR;AACA;IACQP,KAAK,CAACQ,gBAAgB,GAAG,CAAC,CAAC;IAC3B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQR,KAAK,CAACS,UAAU,GAAG,CAAC,CAAC;IACrB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQT,K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"},"metadata":{},"sourceType":"module","externalDependencies":[]}