{"ast":null,"code":"/**\r\n * DurationAxis module\r\n */\nimport { __extends, __values } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { ValueAxis, ValueAxisDataItem } from \"./ValueAxis\";\nimport { registry } from \"../../core/Registry\";\nimport * as $math from \"../../core/utils/Math\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines data item for [[DurationAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar DurationAxisDataItem = /** @class */function (_super) {\n  __extends(DurationAxisDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function DurationAxisDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"DurationAxisDataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  return DurationAxisDataItem;\n}(ValueAxisDataItem);\nexport { DurationAxisDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Used to create an axis that shows time durations.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DurationAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information about duration formatters.\r\n * @see {@link IDurationAxisEvents} for a list of available Events\r\n * @see {@link IDurationAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\nvar DurationAxis = /** @class */function (_super) {\n  __extends(DurationAxis, _super);\n  /**\r\n   * Constructor\r\n   */\n  function DurationAxis() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * A base unit (granularity) of data.\r\n     *\r\n     * Used to indicate what are the base units of your data.\r\n     */\n    _this._baseUnit = \"second\";\n    _this.className = \"DurationAxis\";\n    _this.setPropertyValue(\"maxZoomFactor\", 1000000);\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Formats the value according to axis' own [[DurationFormatter]].\r\n   *\r\n   * @param value  Source value\r\n   * @return Formatted value\r\n   */\n  DurationAxis.prototype.formatLabel = function (value, format) {\n    return this.durationFormatter.format(value, format || this.axisDurationFormat);\n  };\n  /**\r\n   * Adjusts actual min and max scale values so that the axis starts and ends\r\n   * at \"nice\" values, unless `strictMinMax` is set.\r\n   *\r\n   * The `difference` can be something else than `max - min`, because of the\r\n   * axis breaks.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param min        [description]\r\n   * @param max        [description]\r\n   * @param difference [description]\r\n   * @param gridCount  [description]\r\n   * @param strictMode [description]\r\n   * @return [description]\r\n   */\n  DurationAxis.prototype.adjustMinMax = function (min, max, difference, gridCount, strictMode) {\n    var e_1, _a;\n    var minMaxStep;\n    var timeUnit = this.baseUnit;\n    // we don't allow to go to smaller units, setting so to avoid invalidation\n    this.setPropertyValue(\"maxPrecision\", 0);\n    if (timeUnit == \"millisecond\" || timeUnit == \"second\" || timeUnit == \"minute\" || timeUnit == \"hour\") {\n      // will fail if 0\n      if (gridCount <= 1) {\n        gridCount = 1;\n      }\n      gridCount = Math.round(gridCount);\n      var initialMin = min;\n      var initialMax = max;\n      // in case min and max is the same, use max\n      if (difference === 0) {\n        difference = Math.abs(max);\n      }\n      var step = difference / gridCount;\n      var divisors = [60, 30, 20, 15, 10, 2, 1];\n      var realDivisor = 1;\n      if (timeUnit == \"hour\") {\n        divisors = [24, 12, 6, 4, 2, 1];\n      }\n      try {\n        for (var divisors_1 = __values(divisors), divisors_1_1 = divisors_1.next(); !divisors_1_1.done; divisors_1_1 = divisors_1.next()) {\n          var divisor = divisors_1_1.value;\n          if (difference / divisor > gridCount) {\n            realDivisor = divisor;\n            break;\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (divisors_1_1 && !divisors_1_1.done && (_a = divisors_1.return)) _a.call(divisors_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      var count = Math.ceil((max - min) / realDivisor / gridCount);\n      var exponent = Math.log(Math.abs(count)) * Math.LOG10E;\n      var power = Math.pow(10, Math.floor(exponent)) / 10;\n      var reducedCount = count / power;\n      // find closest to divisor\n      var closest = $math.closest(divisors, reducedCount);\n      count = closest * power;\n      step = realDivisor * count;\n      // TODO can this be removed ?\n      this.durationFormatter.getValueUnit(step, this.baseUnit);\n      min = Math.floor(min / step) * step;\n      max = Math.ceil(max / step) * step;\n      if (strictMode) {\n        min -= step;\n        if (min < 0 && initialMin >= 0) {\n          min = 0;\n        }\n        max += step;\n        if (max > 0 && initialMax <= 0) {\n          max = 0;\n        }\n      }\n      minMaxStep = {\n        min: min,\n        max: max,\n        step: step\n      };\n    } else {\n      minMaxStep = _super.prototype.adjustMinMax.call(this, min, max, difference, gridCount, strictMode);\n    }\n    // choose duration formatter based on step\n    this.axisDurationFormat = this.durationFormatter.getFormat(minMaxStep.step, minMaxStep.max, this.baseUnit);\n    return minMaxStep;\n  };\n  Object.defineProperty(DurationAxis.prototype, \"tooltipDurationFormat\", {\n    /**\r\n     * @return Duration format for axis labels\r\n     */\n    get: function () {\n      return this._tooltipDurationFormat;\n    },\n    /**\r\n     * A special duration format to apply axis tooltips.\r\n     *\r\n     * Will use same format as for labels, if not set.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information.\r\n     * @param value  Duration format for axis labels\r\n     */\n    set: function (value) {\n      this._tooltipDurationFormat = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns text to show in a axis tooltip, based on specific position within\r\n   * axis.\r\n   *\r\n   * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n   * chart, or explicitly for this Axis.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param position  Position (px)\r\n   * @return Label (numeric value)\r\n   */\n  DurationAxis.prototype.getTooltipText = function (position) {\n    var value = $math.round(this.positionToValue(position), this._stepDecimalPlaces);\n    var valueStr = this.formatLabel(value, this.tooltipDurationFormat);\n    if (!this._adapterO) {\n      return valueStr;\n    } else {\n      return this._adapterO.apply(\"getTooltipText\", valueStr);\n    }\n  };\n  Object.defineProperty(DurationAxis.prototype, \"baseUnit\", {\n    /**\r\n     * @return Base unit\r\n     */\n    get: function () {\n      return this._baseUnit;\n    },\n    /**\r\n     * A base unit (granularity) of data.\r\n     *\r\n     * Used to indicate what are the base units of your data.\r\n     *\r\n     * Available options: \"millisecond\", \"second\" (default), \"minute\", \"hour\",\r\n     * \"day\", \"week\", \"month\", \"year\".\r\n     *\r\n     * @default \"second\"\r\n     * @param timeUnit\r\n     */\n    set: function (timeUnit) {\n      if (this._baseUnit != timeUnit) {\n        this._baseUnit = timeUnit;\n        this.durationFormatter.baseUnit = timeUnit;\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all properties and related data from a different instance of Axis.\r\n   *\r\n   * @param source Source Axis\r\n   */\n  DurationAxis.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    this.baseUnit = source.baseUnit;\n  };\n  return DurationAxis;\n}(ValueAxis);\nexport { DurationAxis };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"DurationAxis\"] = DurationAxis;\nregistry.registeredClasses[\"DurationAxisDataItem\"] = DurationAxisDataItem;","map":{"version":3,"names":["__extends","__values","ValueAxis","ValueAxisDataItem","registry","$math","DurationAxisDataItem","_super","_this","call","className","applyTheme","DurationAxis","_baseUnit","setPropertyValue","prototype","formatLabel","value","format","durationFormatter","axisDurationFormat","adjustMinMax","min","max","difference","gridCount","strictMode","e_1","_a","minMaxStep","timeUnit","baseUnit","Math","round","initialMin","initialMax","abs","step","divisors","realDivisor","divisors_1","divisors_1_1","next","done","divisor","e_1_1","error","return","count","ceil","exponent","log","LOG10E","power","pow","floor","reducedCount","closest","getValueUnit","getFormat","Object","defineProperty","get","_tooltipDurationFormat","set","enumerable","configurable","getTooltipText","position","positionToValue","_stepDecimalPlaces","valueStr","tooltipDurationFormat","_adapterO","apply","invalidate","copyFrom","source","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/charts/axes/DurationAxis.js"],"sourcesContent":["/**\r\n * DurationAxis module\r\n */\r\nimport { __extends, __values } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem } from \"./ValueAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines data item for [[DurationAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar DurationAxisDataItem = /** @class */ (function (_super) {\r\n    __extends(DurationAxisDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function DurationAxisDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"DurationAxisDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return DurationAxisDataItem;\r\n}(ValueAxisDataItem));\r\nexport { DurationAxisDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Used to create an axis that shows time durations.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DurationAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information about duration formatters.\r\n * @see {@link IDurationAxisEvents} for a list of available Events\r\n * @see {@link IDurationAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar DurationAxis = /** @class */ (function (_super) {\r\n    __extends(DurationAxis, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function DurationAxis() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * A base unit (granularity) of data.\r\n         *\r\n         * Used to indicate what are the base units of your data.\r\n         */\r\n        _this._baseUnit = \"second\";\r\n        _this.className = \"DurationAxis\";\r\n        _this.setPropertyValue(\"maxZoomFactor\", 1000000);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Formats the value according to axis' own [[DurationFormatter]].\r\n     *\r\n     * @param value  Source value\r\n     * @return Formatted value\r\n     */\r\n    DurationAxis.prototype.formatLabel = function (value, format) {\r\n        return this.durationFormatter.format(value, format || this.axisDurationFormat);\r\n    };\r\n    /**\r\n     * Adjusts actual min and max scale values so that the axis starts and ends\r\n     * at \"nice\" values, unless `strictMinMax` is set.\r\n     *\r\n     * The `difference` can be something else than `max - min`, because of the\r\n     * axis breaks.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @param min        [description]\r\n     * @param max        [description]\r\n     * @param difference [description]\r\n     * @param gridCount  [description]\r\n     * @param strictMode [description]\r\n     * @return [description]\r\n     */\r\n    DurationAxis.prototype.adjustMinMax = function (min, max, difference, gridCount, strictMode) {\r\n        var e_1, _a;\r\n        var minMaxStep;\r\n        var timeUnit = this.baseUnit;\r\n        // we don't allow to go to smaller units, setting so to avoid invalidation\r\n        this.setPropertyValue(\"maxPrecision\", 0);\r\n        if (timeUnit == \"millisecond\" || timeUnit == \"second\" || timeUnit == \"minute\" || timeUnit == \"hour\") {\r\n            // will fail if 0\r\n            if (gridCount <= 1) {\r\n                gridCount = 1;\r\n            }\r\n            gridCount = Math.round(gridCount);\r\n            var initialMin = min;\r\n            var initialMax = max;\r\n            // in case min and max is the same, use max\r\n            if (difference === 0) {\r\n                difference = Math.abs(max);\r\n            }\r\n            var step = difference / gridCount;\r\n            var divisors = [60, 30, 20, 15, 10, 2, 1];\r\n            var realDivisor = 1;\r\n            if (timeUnit == \"hour\") {\r\n                divisors = [24, 12, 6, 4, 2, 1];\r\n            }\r\n            try {\r\n                for (var divisors_1 = __values(divisors), divisors_1_1 = divisors_1.next(); !divisors_1_1.done; divisors_1_1 = divisors_1.next()) {\r\n                    var divisor = divisors_1_1.value;\r\n                    if (difference / divisor > gridCount) {\r\n                        realDivisor = divisor;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n            finally {\r\n                try {\r\n                    if (divisors_1_1 && !divisors_1_1.done && (_a = divisors_1.return)) _a.call(divisors_1);\r\n                }\r\n                finally { if (e_1) throw e_1.error; }\r\n            }\r\n            var count = Math.ceil(((max - min) / realDivisor) / gridCount);\r\n            var exponent = Math.log(Math.abs(count)) * Math.LOG10E;\r\n            var power = Math.pow(10, Math.floor(exponent)) / 10;\r\n            var reducedCount = count / power;\r\n            // find closest to divisor\r\n            var closest = $math.closest(divisors, reducedCount);\r\n            count = closest * power;\r\n            step = realDivisor * count;\r\n            // TODO can this be removed ?\r\n            this.durationFormatter.getValueUnit(step, this.baseUnit);\r\n            min = Math.floor(min / step) * step;\r\n            max = Math.ceil(max / step) * step;\r\n            if (strictMode) {\r\n                min -= step;\r\n                if (min < 0 && initialMin >= 0) {\r\n                    min = 0;\r\n                }\r\n                max += step;\r\n                if (max > 0 && initialMax <= 0) {\r\n                    max = 0;\r\n                }\r\n            }\r\n            minMaxStep = { min: min, max: max, step: step };\r\n        }\r\n        else {\r\n            minMaxStep = _super.prototype.adjustMinMax.call(this, min, max, difference, gridCount, strictMode);\r\n        }\r\n        // choose duration formatter based on step\r\n        this.axisDurationFormat = this.durationFormatter.getFormat(minMaxStep.step, minMaxStep.max, this.baseUnit);\r\n        return minMaxStep;\r\n    };\r\n    Object.defineProperty(DurationAxis.prototype, \"tooltipDurationFormat\", {\r\n        /**\r\n         * @return Duration format for axis labels\r\n         */\r\n        get: function () {\r\n            return this._tooltipDurationFormat;\r\n        },\r\n        /**\r\n         * A special duration format to apply axis tooltips.\r\n         *\r\n         * Will use same format as for labels, if not set.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information.\r\n         * @param value  Duration format for axis labels\r\n         */\r\n        set: function (value) {\r\n            this._tooltipDurationFormat = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns text to show in a axis tooltip, based on specific position within\r\n     * axis.\r\n     *\r\n     * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n     * chart, or explicitly for this Axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param position  Position (px)\r\n     * @return Label (numeric value)\r\n     */\r\n    DurationAxis.prototype.getTooltipText = function (position) {\r\n        var value = $math.round(this.positionToValue(position), this._stepDecimalPlaces);\r\n        var valueStr = this.formatLabel(value, this.tooltipDurationFormat);\r\n        if (!this._adapterO) {\r\n            return valueStr;\r\n        }\r\n        else {\r\n            return this._adapterO.apply(\"getTooltipText\", valueStr);\r\n        }\r\n    };\r\n    Object.defineProperty(DurationAxis.prototype, \"baseUnit\", {\r\n        /**\r\n         * @return Base unit\r\n         */\r\n        get: function () {\r\n            return this._baseUnit;\r\n        },\r\n        /**\r\n         * A base unit (granularity) of data.\r\n         *\r\n         * Used to indicate what are the base units of your data.\r\n         *\r\n         * Available options: \"millisecond\", \"second\" (default), \"minute\", \"hour\",\r\n         * \"day\", \"week\", \"month\", \"year\".\r\n         *\r\n         * @default \"second\"\r\n         * @param timeUnit\r\n         */\r\n        set: function (timeUnit) {\r\n            if (this._baseUnit != timeUnit) {\r\n                this._baseUnit = timeUnit;\r\n                this.durationFormatter.baseUnit = timeUnit;\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies all properties and related data from a different instance of Axis.\r\n     *\r\n     * @param source Source Axis\r\n     */\r\n    DurationAxis.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.baseUnit = source.baseUnit;\r\n    };\r\n    return DurationAxis;\r\n}(ValueAxis));\r\nexport { DurationAxis };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DurationAxis\"] = DurationAxis;\r\nregistry.registeredClasses[\"DurationAxisDataItem\"] = DurationAxisDataItem;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}