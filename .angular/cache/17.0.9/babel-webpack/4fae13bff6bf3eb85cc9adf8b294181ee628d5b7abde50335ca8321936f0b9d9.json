{"ast":null,"code":"import { SPACE, BACKSPACE, DELETE, TAB, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport { InjectionToken, Directive, EventEmitter, ElementRef, NgZone, Optional, Inject, ChangeDetectorRef, Attribute, ContentChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Self, ContentChildren, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, RippleRenderer, MAT_RIPPLE_GLOBAL_OPTIONS, mixinErrorState, ErrorStateMatcher, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, merge } from 'rxjs';\nimport { take, takeUntil, startWith } from 'rxjs/operators';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event object emitted by MatChip when selected or deselected. */\nclass MatChipSelectionChange {\n  constructor( /** Reference to the chip that emitted the event. */\n  source, /** Whether the chip that emitted the event is selected. */\n  selected, /** Whether the selection change was a result of a user interaction. */\n  isUserInput = false) {\n    this.source = source;\n    this.selected = selected;\n    this.isUserInput = isUserInput;\n  }\n}\n/**\n * Injection token that can be used to reference instances of `MatChipRemove`. It serves as\n * alternative token to the actual `MatChipRemove` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_REMOVE = new InjectionToken('MatChipRemove');\n/**\n * Injection token that can be used to reference instances of `MatChipAvatar`. It serves as\n * alternative token to the actual `MatChipAvatar` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_AVATAR = new InjectionToken('MatChipAvatar');\n/**\n * Injection token that can be used to reference instances of `MatChipTrailingIcon`. It serves as\n * alternative token to the actual `MatChipTrailingIcon` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_TRAILING_ICON = new InjectionToken('MatChipTrailingIcon');\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n}\nconst _MatChipMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(MatChipBase), 'primary'), -1);\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\nclass MatChipAvatar {}\nMatChipAvatar.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-chip-avatar, [matChipAvatar]',\n    host: {\n      'class': 'mat-chip-avatar'\n    },\n    providers: [{\n      provide: MAT_CHIP_AVATAR,\n      useExisting: MatChipAvatar\n    }]\n  }]\n}];\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\nclass MatChipTrailingIcon {}\nMatChipTrailingIcon.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n    host: {\n      'class': 'mat-chip-trailing-icon'\n    },\n    providers: [{\n      provide: MAT_CHIP_TRAILING_ICON,\n      useExisting: MatChipTrailingIcon\n    }]\n  }]\n}];\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\nclass MatChip extends _MatChipMixinBase {\n  constructor(_elementRef, _ngZone, platform, globalRippleOptions, _changeDetectorRef, _document, animationMode, tabIndex) {\n    super(_elementRef);\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n    this._changeDetectorRef = _changeDetectorRef;\n    /** Whether the chip has focus. */\n    this._hasFocus = false;\n    /** Whether the chip list is selectable */\n    this.chipListSelectable = true;\n    /** Whether the chip list is in multi-selection mode. */\n    this._chipListMultiple = false;\n    /** Whether the chip list as a whole is disabled. */\n    this._chipListDisabled = false;\n    this._selected = false;\n    this._selectable = true;\n    this._disabled = false;\n    this._removable = true;\n    /** Emits when the chip is focused. */\n    this._onFocus = new Subject();\n    /** Emits when the chip is blured. */\n    this._onBlur = new Subject();\n    /** Emitted when the chip is selected or deselected. */\n    this.selectionChange = new EventEmitter();\n    /** Emitted when the chip is destroyed. */\n    this.destroyed = new EventEmitter();\n    /** Emitted when a chip is to be removed. */\n    this.removed = new EventEmitter();\n    this._addHostClassName();\n    // Dynamically create the ripple target, append it within the chip, and use it as the\n    // chip's ripple target. Adding the class '.mat-chip-ripple' ensures that it will have\n    // the proper styles.\n    this._chipRippleTarget = _document.createElement('div');\n    this._chipRippleTarget.classList.add('mat-chip-ripple');\n    this._elementRef.nativeElement.appendChild(this._chipRippleTarget);\n    this._chipRipple = new RippleRenderer(this, _ngZone, this._chipRippleTarget, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef);\n    this.rippleConfig = globalRippleOptions || {};\n    this._animationsDisabled = animationMode === 'NoopAnimations';\n    this.tabIndex = tabIndex != null ? parseInt(tabIndex) || -1 : -1;\n  }\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled() {\n    return this.disabled || this.disableRipple || this._animationsDisabled || !!this.rippleConfig.disabled;\n  }\n  /** Whether the chip is selected. */\n  get selected() {\n    return this._selected;\n  }\n  set selected(value) {\n    const coercedValue = coerceBooleanProperty(value);\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  get value() {\n    return this._value !== undefined ? this._value : this._elementRef.nativeElement.textContent;\n  }\n  set value(value) {\n    this._value = value;\n  }\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  get selectable() {\n    return this._selectable && this.chipListSelectable;\n  }\n  set selectable(value) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  /** Whether the chip is disabled. */\n  get disabled() {\n    return this._chipListDisabled || this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  get removable() {\n    return this._removable;\n  }\n  set removable(value) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected() {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ? this.selected.toString() : null;\n  }\n  _addHostClassName() {\n    const basicChipAttrName = 'mat-basic-chip';\n    const element = this._elementRef.nativeElement;\n    if (element.hasAttribute(basicChipAttrName) || element.tagName.toLowerCase() === basicChipAttrName) {\n      element.classList.add(basicChipAttrName);\n      return;\n    } else {\n      element.classList.add('mat-standard-chip');\n    }\n  }\n  ngOnDestroy() {\n    this.destroyed.emit({\n      chip: this\n    });\n    this._chipRipple._removeTriggerEvents();\n  }\n  /** Selects the chip. */\n  select() {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /** Deselects the chip. */\n  deselect() {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /** Select this chip and emit selected event */\n  selectViaInteraction() {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput = false) {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    this._changeDetectorRef.markForCheck();\n    return this.selected;\n  }\n  /** Allows for programmatic focusing of the chip. */\n  focus() {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({\n        chip: this\n      });\n    }\n    this._hasFocus = true;\n  }\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove() {\n    if (this.removable) {\n      this.removed.emit({\n        chip: this\n      });\n    }\n  }\n  /** Handles click events on the chip. */\n  _handleClick(event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n  /** Handle custom key presses. */\n  _handleKeydown(event) {\n    if (this.disabled) {\n      return;\n    }\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n  _blur() {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n      this._ngZone.run(() => {\n        this._hasFocus = false;\n        this._onBlur.next({\n          chip: this\n        });\n      });\n    });\n  }\n  _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\nMatChip.decorators = [{\n  type: Directive,\n  args: [{\n    selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n    inputs: ['color', 'disableRipple', 'tabIndex'],\n    exportAs: 'matChip',\n    host: {\n      'class': 'mat-chip mat-focus-indicator',\n      '[attr.tabindex]': 'disabled ? null : tabIndex',\n      'role': 'option',\n      '[class.mat-chip-selected]': 'selected',\n      '[class.mat-chip-with-avatar]': 'avatar',\n      '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n      '[class.mat-chip-disabled]': 'disabled',\n      '[class._mat-animation-noopable]': '_animationsDisabled',\n      '[attr.disabled]': 'disabled || null',\n      '[attr.aria-disabled]': 'disabled.toString()',\n      '[attr.aria-selected]': 'ariaSelected',\n      '(click)': '_handleClick($event)',\n      '(keydown)': '_handleKeydown($event)',\n      '(focus)': 'focus()',\n      '(blur)': '_blur()'\n    }\n  }]\n}];\nMatChip.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: NgZone\n}, {\n  type: Platform\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n  }]\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}];\nMatChip.propDecorators = {\n  avatar: [{\n    type: ContentChild,\n    args: [MAT_CHIP_AVATAR]\n  }],\n  trailingIcon: [{\n    type: ContentChild,\n    args: [MAT_CHIP_TRAILING_ICON]\n  }],\n  removeIcon: [{\n    type: ContentChild,\n    args: [MAT_CHIP_REMOVE]\n  }],\n  selected: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  selectable: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  removable: [{\n    type: Input\n  }],\n  selectionChange: [{\n    type: Output\n  }],\n  destroyed: [{\n    type: Output\n  }],\n  removed: [{\n    type: Output\n  }]\n};\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nclass MatChipRemove {\n  constructor(_parentChip, elementRef) {\n    this._parentChip = _parentChip;\n    if (elementRef.nativeElement.nodeName === 'BUTTON') {\n      elementRef.nativeElement.setAttribute('type', 'button');\n    }\n  }\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event) {\n    const parentChip = this._parentChip;\n    if (parentChip.removable && !parentChip.disabled) {\n      parentChip.remove();\n    }\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\nMatChipRemove.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matChipRemove]',\n    host: {\n      'class': 'mat-chip-remove mat-chip-trailing-icon',\n      '(click)': '_handleClick($event)'\n    },\n    providers: [{\n      provide: MAT_CHIP_REMOVE,\n      useExisting: MatChipRemove\n    }]\n  }]\n}];\nMatChipRemove.ctorParameters = () => [{\n  type: MatChip\n}, {\n  type: ElementRef\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for the chips module. */\nconst MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nclass MatChipListBase {\n  constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, /** @docs-private */\n  ngControl) {\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n  }\n}\nconst _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId$1 = 0;\n/** Change event object that is emitted when the chip list value has changed. */\nclass MatChipListChange {\n  constructor( /** Chip list that emitted the event. */\n  source, /** Value of the chip list when the event was emitted. */\n  value) {\n    this.source = source;\n    this.value = value;\n  }\n}\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\nclass MatChipList extends _MatChipListMixinBase {\n  constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, /** @docs-private */\n  ngControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    this._elementRef = _elementRef;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dir = _dir;\n    this.ngControl = ngControl;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    this.controlType = 'mat-chip-list';\n    /**\n     * When a chip is destroyed, we store the index of the destroyed chip until the chips\n     * query list notifies about the update. This is necessary because we cannot determine an\n     * appropriate chip that should receive focus until the array of chips updated completely.\n     */\n    this._lastDestroyedChipIndex = null;\n    /** Subject that emits when the component has been destroyed. */\n    this._destroyed = new Subject();\n    /** Uid of the chip list */\n    this._uid = `mat-chip-list-${nextUniqueId$1++}`;\n    /** Tab index for the chip list. */\n    this._tabIndex = 0;\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use _tabIndex\n     */\n    this._userTabIndex = null;\n    /** Function when touched */\n    this._onTouched = () => {};\n    /** Function when changed */\n    this._onChange = () => {};\n    this._multiple = false;\n    this._compareWith = (o1, o2) => o1 === o2;\n    this._required = false;\n    this._disabled = false;\n    /** Orientation of the chip list. */\n    this.ariaOrientation = 'horizontal';\n    this._selectable = true;\n    /** Event emitted when the selected chip list value has been changed by the user. */\n    this.change = new EventEmitter();\n    /**\n     * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    this.valueChange = new EventEmitter();\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n  /** The array of selected chips inside chip list. */\n  get selected() {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n  /** The ARIA role applied to the chip list. */\n  get role() {\n    return this.empty ? null : 'listbox';\n  }\n  /** Whether the user should be allowed to select multiple chips. */\n  get multiple() {\n    return this._multiple;\n  }\n  set multiple(value) {\n    this._multiple = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  get compareWith() {\n    return this._compareWith;\n  }\n  set compareWith(fn) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get value() {\n    return this._value;\n  }\n  set value(value) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id() {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get required() {\n    return this._required;\n  }\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get placeholder() {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused() {\n    return this._chipInput && this._chipInput.focused || this._hasFocusedChip();\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty() {\n    return (!this._chipInput || this._chipInput.empty) && (!this.chips || this.chips.length === 0);\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat() {\n    return !this.empty || this.focused;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get disabled() {\n    return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  get selectable() {\n    return this._selectable;\n  }\n  set selectable(value) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  set tabIndex(value) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges() {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges() {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges() {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges() {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this.chips).withWrap().withVerticalOrientation().withHomeAndEnd().withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._allowFocusEscape();\n    });\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n      this._resetChips();\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n      this.stateChanges.next();\n    });\n  }\n  ngOnInit() {\n    this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n      if (this.ngControl.disabled !== this._disabled) {\n        this.disabled = !!this.ngControl.disabled;\n      }\n    }\n  }\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n    this._dropSubscriptions();\n  }\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement) {\n    this._chipInput = inputElement;\n    // We use this attribute to match the chip list to its input in test harnesses.\n    // Set the attribute directly here to avoid \"changed after checked\" errors.\n    this._elementRef.nativeElement.setAttribute('data-mat-chip-input', inputElement.id);\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value) {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(options) {\n    if (this.disabled) {\n      return;\n    }\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput(options);\n      this.stateChanges.next();\n    }\n  }\n  /** Attempt to focus an input if we have one. */\n  _focusInput(options) {\n    if (this._chipInput) {\n      this._chipInput.focus(options);\n    }\n  }\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event) {\n    const target = event.target;\n    if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  _updateTabIndex() {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  _updateFocusForDestroyedChips() {\n    // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n    if (this._lastDestroyedChipIndex != null) {\n      if (this.chips.length) {\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n        this._keyManager.setActiveItem(newChipIndex);\n      } else {\n        this.focus();\n      }\n    }\n    this._lastDestroyedChipIndex = null;\n  }\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  _isValidIndex(index) {\n    return index >= 0 && index < this.chips.length;\n  }\n  _setSelectionByValue(value, isUserInput = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  _selectValue(value, isUserInput = true) {\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value, value);\n    });\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n    return correspondingChip;\n  }\n  _initializeSelection() {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  _clearSelection(skip) {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  _sortValues() {\n    if (this._multiple) {\n      this._selectionModel.clear();\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n  /** Emits change event to set the model value. */\n  _propagateChanges(fallbackValue) {\n    let valueToEmit = null;\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n  /**\n   * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the list from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  _allowFocusEscape() {\n    if (this._tabIndex !== -1) {\n      this._tabIndex = -1;\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n  _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n  _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n  /** Listens to user-generated selection events on each chip. */\n  _listenToChipsSelection() {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected ? this._selectionModel.select(event.source) : this._selectionModel.deselect(event.source);\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n  /** Listens to user-generated selection events on each chip. */\n  _listenToChipsFocus() {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex = this.chips.toArray().indexOf(event.chip);\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItem(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n  _listenToChipsRemoved() {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n  /** Checks whether an event comes from inside a chip element. */\n  _originatesFromChip(event) {\n    let currentElement = event.target;\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n      currentElement = currentElement.parentElement;\n    }\n    return false;\n  }\n  /** Checks whether any of the chips is focused. */\n  _hasFocusedChip() {\n    return this.chips && this.chips.some(chip => chip._hasFocus);\n  }\n  /** Syncs the list's state with the individual chips. */\n  _syncChipsState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip._chipListDisabled = this._disabled;\n        chip._chipListMultiple = this.multiple;\n      });\n    }\n  }\n}\nMatChipList.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-chip-list',\n    template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n    exportAs: 'matChipList',\n    host: {\n      '[attr.tabindex]': 'disabled ? null : _tabIndex',\n      '[attr.aria-describedby]': '_ariaDescribedby || null',\n      '[attr.aria-required]': 'role ? required : null',\n      '[attr.aria-disabled]': 'disabled.toString()',\n      '[attr.aria-invalid]': 'errorState',\n      '[attr.aria-multiselectable]': 'multiple',\n      '[attr.role]': 'role',\n      '[class.mat-chip-list-disabled]': 'disabled',\n      '[class.mat-chip-list-invalid]': 'errorState',\n      '[class.mat-chip-list-required]': 'required',\n      '[attr.aria-orientation]': 'ariaOrientation',\n      'class': 'mat-chip-list',\n      '(focus)': 'focus()',\n      '(blur)': '_blur()',\n      '(keydown)': '_keydown($event)',\n      '[id]': '_uid'\n    },\n    providers: [{\n      provide: MatFormFieldControl,\n      useExisting: MatChipList\n    }],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"]\n  }]\n}];\nMatChipList.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: NgForm,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: FormGroupDirective,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: ErrorStateMatcher\n}, {\n  type: NgControl,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Self\n  }]\n}];\nMatChipList.propDecorators = {\n  errorStateMatcher: [{\n    type: Input\n  }],\n  multiple: [{\n    type: Input\n  }],\n  compareWith: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  ariaOrientation: [{\n    type: Input,\n    args: ['aria-orientation']\n  }],\n  selectable: [{\n    type: Input\n  }],\n  tabIndex: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }],\n  valueChange: [{\n    type: Output\n  }],\n  chips: [{\n    type: ContentChildren,\n    args: [MatChip, {\n      // We need to use `descendants: true`, because Ivy will no longer match\n      // indirect descendants if it's left as false.\n      descendants: true\n    }]\n  }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\nclass MatChipInput {\n  constructor(_elementRef, _defaultOptions) {\n    this._elementRef = _elementRef;\n    this._defaultOptions = _defaultOptions;\n    /** Whether the control is focused. */\n    this.focused = false;\n    this._addOnBlur = false;\n    /**\n     * The list of key codes that will trigger a chipEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     */\n    this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n    /** Emitted when a chip is to be added. */\n    this.chipEnd = new EventEmitter();\n    /** The input's placeholder text. */\n    this.placeholder = '';\n    /** Unique id for the input. */\n    this.id = `mat-chip-list-input-${nextUniqueId++}`;\n    this._disabled = false;\n    this.inputElement = this._elementRef.nativeElement;\n  }\n  /** Register input for chip list */\n  set chipList(value) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  get addOnBlur() {\n    return this._addOnBlur;\n  }\n  set addOnBlur(value) {\n    this._addOnBlur = coerceBooleanProperty(value);\n  }\n  /** Whether the input is disabled. */\n  get disabled() {\n    return this._disabled || this._chipList && this._chipList.disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  /** Whether the input is empty. */\n  get empty() {\n    return !this.inputElement.value;\n  }\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n  ngOnDestroy() {\n    this.chipEnd.complete();\n  }\n  ngAfterContentInit() {\n    this._focusLastChipOnBackspace = this.empty;\n  }\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event) {\n    if (event) {\n      // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n      // want to do this when going backwards, because focus should go back to the first chip.\n      if (event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n        this._chipList._allowFocusEscape();\n      }\n      // To prevent the user from accidentally deleting chips when pressing BACKSPACE continuously,\n      // We focus the last chip on backspace only after the user has released the backspace button,\n      // and the input is empty (see behaviour in _keyup)\n      if (event.keyCode === BACKSPACE && this._focusLastChipOnBackspace) {\n        this._chipList._keyManager.setLastItemActive();\n        event.preventDefault();\n        return;\n      } else {\n        this._focusLastChipOnBackspace = false;\n      }\n    }\n    this._emitChipEnd(event);\n  }\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keyup(event) {\n    // Allow user to move focus to chips next time he presses backspace\n    if (!this._focusLastChipOnBackspace && event.keyCode === BACKSPACE && this.empty) {\n      this._focusLastChipOnBackspace = true;\n      event.preventDefault();\n    }\n  }\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event) {\n    if (!this.inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({\n        input: this.inputElement,\n        value: this.inputElement.value,\n        chipInput: this\n      });\n      event === null || event === void 0 ? void 0 : event.preventDefault();\n    }\n  }\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n  /** Focuses the input. */\n  focus(options) {\n    this.inputElement.focus(options);\n  }\n  /** Clears the input */\n  clear() {\n    this.inputElement.value = '';\n    this._focusLastChipOnBackspace = true;\n  }\n  /** Checks whether a keycode is one of the configured separators. */\n  _isSeparatorKey(event) {\n    return !hasModifierKey(event) && new Set(this.separatorKeyCodes).has(event.keyCode);\n  }\n}\nMatChipInput.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'input[matChipInputFor]',\n    exportAs: 'matChipInput, matChipInputFor',\n    host: {\n      'class': 'mat-chip-input mat-input-element',\n      '(keydown)': '_keydown($event)',\n      '(keyup)': '_keyup($event)',\n      '(blur)': '_blur()',\n      '(focus)': '_focus()',\n      '(input)': '_onInput()',\n      '[id]': 'id',\n      '[attr.disabled]': 'disabled || null',\n      '[attr.placeholder]': 'placeholder || null',\n      '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n      '[attr.aria-required]': '_chipList && _chipList.required || null'\n    }\n  }]\n}];\nMatChipInput.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_CHIPS_DEFAULT_OPTIONS]\n  }]\n}];\nMatChipInput.propDecorators = {\n  chipList: [{\n    type: Input,\n    args: ['matChipInputFor']\n  }],\n  addOnBlur: [{\n    type: Input,\n    args: ['matChipInputAddOnBlur']\n  }],\n  separatorKeyCodes: [{\n    type: Input,\n    args: ['matChipInputSeparatorKeyCodes']\n  }],\n  chipEnd: [{\n    type: Output,\n    args: ['matChipInputTokenEnd']\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst CHIP_DECLARATIONS = [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon];\nconst ɵ0 = {\n  separatorKeyCodes: [ENTER]\n};\nclass MatChipsModule {}\nMatChipsModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [MatCommonModule],\n    exports: CHIP_DECLARATIONS,\n    declarations: CHIP_DECLARATIONS,\n    providers: [ErrorStateMatcher, {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: ɵ0\n    }]\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHIPS_DEFAULT_OPTIONS, MAT_CHIP_AVATAR, MAT_CHIP_REMOVE, MAT_CHIP_TRAILING_ICON, MatChip, MatChipAvatar, MatChipInput, MatChipList, MatChipListChange, MatChipRemove, MatChipSelectionChange, MatChipTrailingIcon, MatChipsModule, ɵ0 };","map":{"version":3,"names":["SPACE","BACKSPACE","DELETE","TAB","hasModifierKey","ENTER","InjectionToken","Directive","EventEmitter","ElementRef","NgZone","Optional","Inject","ChangeDetectorRef","Attribute","ContentChild","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","Self","ContentChildren","NgModule","mixinTabIndex","mixinColor","mixinDisableRipple","RippleRenderer","MAT_RIPPLE_GLOBAL_OPTIONS","mixinErrorState","ErrorStateMatcher","MatCommonModule","coerceBooleanProperty","Platform","DOCUMENT","ANIMATION_MODULE_TYPE","Subject","merge","take","takeUntil","startWith","FocusKeyManager","Directionality","SelectionModel","NgForm","FormGroupDirective","NgControl","MatFormFieldControl","MatChipSelectionChange","constructor","source","selected","isUserInput","MAT_CHIP_REMOVE","MAT_CHIP_AVATAR","MAT_CHIP_TRAILING_ICON","MatChipBase","_elementRef","_MatChipMixinBase","MatChipAvatar","decorators","type","args","selector","host","providers","provide","useExisting","MatChipTrailingIcon","MatChip","_ngZone","platform","globalRippleOptions","_changeDetectorRef","_document","animationMode","tabIndex","_hasFocus","chipListSelectable","_chipListMultiple","_chipListDisabled","_selected","_selectable","_disabled","_removable","_onFocus","_onBlur","selectionChange","destroyed","removed","_addHostClassName","_chipRippleTarget","createElement","classList","add","nativeElement","appendChild","_chipRipple","setupTriggerEvents","rippleConfig","_animationsDisabled","parseInt","rippleDisabled","disabled","disableRipple","value","coercedValue","_dispatchSelectionChange","_value","undefined","textContent","selectable","removable","ariaSelected","toString","basicChipAttrName","element","hasAttribute","tagName","toLowerCase","ngOnDestroy","emit","chip","_removeTriggerEvents","select","markForCheck","deselect","selectViaInteraction","toggleSelected","focus","next","remove","_handleClick","event","preventDefault","stopPropagation","_handleKeydown","keyCode","_blur","onStable","pipe","subscribe","run","inputs","exportAs","ctorParameters","String","propDecorators","avatar","trailingIcon","removeIcon","MatChipRemove","_parentChip","elementRef","nodeName","setAttribute","parentChip","MAT_CHIPS_DEFAULT_OPTIONS","MatChipListBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatChipListMixinBase","nextUniqueId$1","MatChipListChange","MatChipList","_dir","controlType","_lastDestroyedChipIndex","_destroyed","_uid","_tabIndex","_userTabIndex","_onTouched","_onChange","_multiple","_compareWith","o1","o2","_required","ariaOrientation","change","valueChange","valueAccessor","multiple","_selectionModel","role","empty","_syncChipsState","compareWith","fn","_initializeSelection","writeValue","id","_chipInput","required","stateChanges","placeholder","_placeholder","focused","_hasFocusedChip","chips","length","shouldLabelFloat","forEach","chipSelectionChanges","map","chipFocusChanges","chipBlurChanges","chipRemoveChanges","ngAfterContentInit","_keyManager","withWrap","withVerticalOrientation","withHomeAndEnd","withHorizontalOrientation","dir","tabOut","_allowFocusEscape","changes","Promise","resolve","then","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","ngOnInit","ngDoCheck","updateErrorState","complete","_dropSubscriptions","registerInput","inputElement","setDescribedByIds","ids","_ariaDescribedby","join","_setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","onContainerClick","_originatesFromChip","options","setFirstItemActive","_focusInput","_keydown","target","contains","onKeydown","newChipIndex","Math","min","setActiveItem","_isValidIndex","index","_clearSelection","Array","isArray","currentValue","_selectValue","_sortValues","correspondingChip","find","skip","clear","_propagateChanges","fallbackValue","valueToEmit","setTimeout","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","unsubscribe","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","isSelected","chipIndex","toArray","indexOf","updateActiveItem","currentElement","parentElement","some","template","encapsulation","None","changeDetection","OnPush","styles","errorStateMatcher","descendants","nextUniqueId","MatChipInput","_defaultOptions","_addOnBlur","separatorKeyCodes","chipEnd","chipList","_chipList","addOnBlur","ngOnChanges","_focusLastChipOnBackspace","setLastItemActive","_emitChipEnd","_keyup","_focus","_isSeparatorKey","input","chipInput","_onInput","Set","has","CHIP_DECLARATIONS","ɵ0","MatChipsModule","imports","exports","declarations","useValue"],"sources":["D:/alodelivery test/node_modules/@angular/material/fesm2015/chips.js"],"sourcesContent":["import { SPACE, BACKSPACE, DELETE, TAB, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport { InjectionToken, Directive, EventEmitter, ElementRef, NgZone, Optional, Inject, ChangeDetectorRef, Attribute, ContentChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Self, ContentChildren, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, RippleRenderer, MAT_RIPPLE_GLOBAL_OPTIONS, mixinErrorState, ErrorStateMatcher, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, merge } from 'rxjs';\nimport { take, takeUntil, startWith } from 'rxjs/operators';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event object emitted by MatChip when selected or deselected. */\nclass MatChipSelectionChange {\n    constructor(\n    /** Reference to the chip that emitted the event. */\n    source, \n    /** Whether the chip that emitted the event is selected. */\n    selected, \n    /** Whether the selection change was a result of a user interaction. */\n    isUserInput = false) {\n        this.source = source;\n        this.selected = selected;\n        this.isUserInput = isUserInput;\n    }\n}\n/**\n * Injection token that can be used to reference instances of `MatChipRemove`. It serves as\n * alternative token to the actual `MatChipRemove` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_REMOVE = new InjectionToken('MatChipRemove');\n/**\n * Injection token that can be used to reference instances of `MatChipAvatar`. It serves as\n * alternative token to the actual `MatChipAvatar` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_AVATAR = new InjectionToken('MatChipAvatar');\n/**\n * Injection token that can be used to reference instances of `MatChipTrailingIcon`. It serves as\n * alternative token to the actual `MatChipTrailingIcon` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_TRAILING_ICON = new InjectionToken('MatChipTrailingIcon');\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatChipMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(MatChipBase), 'primary'), -1);\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\nclass MatChipAvatar {\n}\nMatChipAvatar.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-chip-avatar, [matChipAvatar]',\n                host: { 'class': 'mat-chip-avatar' },\n                providers: [{ provide: MAT_CHIP_AVATAR, useExisting: MatChipAvatar }]\n            },] }\n];\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\nclass MatChipTrailingIcon {\n}\nMatChipTrailingIcon.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n                host: { 'class': 'mat-chip-trailing-icon' },\n                providers: [{ provide: MAT_CHIP_TRAILING_ICON, useExisting: MatChipTrailingIcon }],\n            },] }\n];\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\nclass MatChip extends _MatChipMixinBase {\n    constructor(_elementRef, _ngZone, platform, globalRippleOptions, _changeDetectorRef, _document, animationMode, tabIndex) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Whether the chip has focus. */\n        this._hasFocus = false;\n        /** Whether the chip list is selectable */\n        this.chipListSelectable = true;\n        /** Whether the chip list is in multi-selection mode. */\n        this._chipListMultiple = false;\n        /** Whether the chip list as a whole is disabled. */\n        this._chipListDisabled = false;\n        this._selected = false;\n        this._selectable = true;\n        this._disabled = false;\n        this._removable = true;\n        /** Emits when the chip is focused. */\n        this._onFocus = new Subject();\n        /** Emits when the chip is blured. */\n        this._onBlur = new Subject();\n        /** Emitted when the chip is selected or deselected. */\n        this.selectionChange = new EventEmitter();\n        /** Emitted when the chip is destroyed. */\n        this.destroyed = new EventEmitter();\n        /** Emitted when a chip is to be removed. */\n        this.removed = new EventEmitter();\n        this._addHostClassName();\n        // Dynamically create the ripple target, append it within the chip, and use it as the\n        // chip's ripple target. Adding the class '.mat-chip-ripple' ensures that it will have\n        // the proper styles.\n        this._chipRippleTarget = _document.createElement('div');\n        this._chipRippleTarget.classList.add('mat-chip-ripple');\n        this._elementRef.nativeElement.appendChild(this._chipRippleTarget);\n        this._chipRipple = new RippleRenderer(this, _ngZone, this._chipRippleTarget, platform);\n        this._chipRipple.setupTriggerEvents(_elementRef);\n        this.rippleConfig = globalRippleOptions || {};\n        this._animationsDisabled = animationMode === 'NoopAnimations';\n        this.tabIndex = tabIndex != null ? (parseInt(tabIndex) || -1) : -1;\n    }\n    /**\n     * Whether ripples are disabled on interaction\n     * @docs-private\n     */\n    get rippleDisabled() {\n        return this.disabled || this.disableRipple || this._animationsDisabled ||\n            !!this.rippleConfig.disabled;\n    }\n    /** Whether the chip is selected. */\n    get selected() { return this._selected; }\n    set selected(value) {\n        const coercedValue = coerceBooleanProperty(value);\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this._dispatchSelectionChange();\n        }\n    }\n    /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n    get value() {\n        return this._value !== undefined\n            ? this._value\n            : this._elementRef.nativeElement.textContent;\n    }\n    set value(value) { this._value = value; }\n    /**\n     * Whether or not the chip is selectable. When a chip is not selectable,\n     * changes to its selected state are always ignored. By default a chip is\n     * selectable, and it becomes non-selectable if its parent chip list is\n     * not selectable.\n     */\n    get selectable() { return this._selectable && this.chipListSelectable; }\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n    /** Whether the chip is disabled. */\n    get disabled() { return this._chipListDisabled || this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     */\n    get removable() { return this._removable; }\n    set removable(value) {\n        this._removable = coerceBooleanProperty(value);\n    }\n    /** The ARIA selected applied to the chip. */\n    get ariaSelected() {\n        // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n        // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n        return this.selectable && (this._chipListMultiple || this.selected) ?\n            this.selected.toString() : null;\n    }\n    _addHostClassName() {\n        const basicChipAttrName = 'mat-basic-chip';\n        const element = this._elementRef.nativeElement;\n        if (element.hasAttribute(basicChipAttrName) ||\n            element.tagName.toLowerCase() === basicChipAttrName) {\n            element.classList.add(basicChipAttrName);\n            return;\n        }\n        else {\n            element.classList.add('mat-standard-chip');\n        }\n    }\n    ngOnDestroy() {\n        this.destroyed.emit({ chip: this });\n        this._chipRipple._removeTriggerEvents();\n    }\n    /** Selects the chip. */\n    select() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Deselects the chip. */\n    deselect() {\n        if (this._selected) {\n            this._selected = false;\n            this._dispatchSelectionChange();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Select this chip and emit selected event */\n    selectViaInteraction() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange(true);\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Toggles the current selected state of this chip. */\n    toggleSelected(isUserInput = false) {\n        this._selected = !this.selected;\n        this._dispatchSelectionChange(isUserInput);\n        this._changeDetectorRef.markForCheck();\n        return this.selected;\n    }\n    /** Allows for programmatic focusing of the chip. */\n    focus() {\n        if (!this._hasFocus) {\n            this._elementRef.nativeElement.focus();\n            this._onFocus.next({ chip: this });\n        }\n        this._hasFocus = true;\n    }\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     */\n    remove() {\n        if (this.removable) {\n            this.removed.emit({ chip: this });\n        }\n    }\n    /** Handles click events on the chip. */\n    _handleClick(event) {\n        if (this.disabled) {\n            event.preventDefault();\n        }\n        else {\n            event.stopPropagation();\n        }\n    }\n    /** Handle custom key presses. */\n    _handleKeydown(event) {\n        if (this.disabled) {\n            return;\n        }\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused chip\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused chip\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n        }\n    }\n    _blur() {\n        // When animations are enabled, Angular may end up removing the chip from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n        // that moves focus not the next item. To work around the issue, we defer marking the chip\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable\n            .pipe(take(1))\n            .subscribe(() => {\n            this._ngZone.run(() => {\n                this._hasFocus = false;\n                this._onBlur.next({ chip: this });\n            });\n        });\n    }\n    _dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected\n        });\n    }\n}\nMatChip.decorators = [\n    { type: Directive, args: [{\n                selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n                inputs: ['color', 'disableRipple', 'tabIndex'],\n                exportAs: 'matChip',\n                host: {\n                    'class': 'mat-chip mat-focus-indicator',\n                    '[attr.tabindex]': 'disabled ? null : tabIndex',\n                    'role': 'option',\n                    '[class.mat-chip-selected]': 'selected',\n                    '[class.mat-chip-with-avatar]': 'avatar',\n                    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n                    '[class.mat-chip-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationsDisabled',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-selected]': 'ariaSelected',\n                    '(click)': '_handleClick($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()',\n                },\n            },] }\n];\nMatChip.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\nMatChip.propDecorators = {\n    avatar: [{ type: ContentChild, args: [MAT_CHIP_AVATAR,] }],\n    trailingIcon: [{ type: ContentChild, args: [MAT_CHIP_TRAILING_ICON,] }],\n    removeIcon: [{ type: ContentChild, args: [MAT_CHIP_REMOVE,] }],\n    selected: [{ type: Input }],\n    value: [{ type: Input }],\n    selectable: [{ type: Input }],\n    disabled: [{ type: Input }],\n    removable: [{ type: Input }],\n    selectionChange: [{ type: Output }],\n    destroyed: [{ type: Output }],\n    removed: [{ type: Output }]\n};\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nclass MatChipRemove {\n    constructor(_parentChip, elementRef) {\n        this._parentChip = _parentChip;\n        if (elementRef.nativeElement.nodeName === 'BUTTON') {\n            elementRef.nativeElement.setAttribute('type', 'button');\n        }\n    }\n    /** Calls the parent chip's public `remove()` method if applicable. */\n    _handleClick(event) {\n        const parentChip = this._parentChip;\n        if (parentChip.removable && !parentChip.disabled) {\n            parentChip.remove();\n        }\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused chip that has been focused after chip removal. Usually the parent\n        // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n        // that the chip is being removed before the event bubbles up.\n        event.stopPropagation();\n    }\n}\nMatChipRemove.decorators = [\n    { type: Directive, args: [{\n                selector: '[matChipRemove]',\n                host: {\n                    'class': 'mat-chip-remove mat-chip-trailing-icon',\n                    '(click)': '_handleClick($event)',\n                },\n                providers: [{ provide: MAT_CHIP_REMOVE, useExisting: MatChipRemove }],\n            },] }\n];\nMatChipRemove.ctorParameters = () => [\n    { type: MatChip },\n    { type: ElementRef }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for the chips module. */\nconst MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nclass MatChipListBase {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /** @docs-private */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nconst _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId$1 = 0;\n/** Change event object that is emitted when the chip list value has changed. */\nclass MatChipListChange {\n    constructor(\n    /** Chip list that emitted the event. */\n    source, \n    /** Value of the chip list when the event was emitted. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\nclass MatChipList extends _MatChipListMixinBase {\n    constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, \n    /** @docs-private */\n    ngControl) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this.ngControl = ngControl;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-chip-list';\n        /**\n         * When a chip is destroyed, we store the index of the destroyed chip until the chips\n         * query list notifies about the update. This is necessary because we cannot determine an\n         * appropriate chip that should receive focus until the array of chips updated completely.\n         */\n        this._lastDestroyedChipIndex = null;\n        /** Subject that emits when the component has been destroyed. */\n        this._destroyed = new Subject();\n        /** Uid of the chip list */\n        this._uid = `mat-chip-list-${nextUniqueId$1++}`;\n        /** Tab index for the chip list. */\n        this._tabIndex = 0;\n        /**\n         * User defined tab index.\n         * When it is not null, use user defined tab index. Otherwise use _tabIndex\n         */\n        this._userTabIndex = null;\n        /** Function when touched */\n        this._onTouched = () => { };\n        /** Function when changed */\n        this._onChange = () => { };\n        this._multiple = false;\n        this._compareWith = (o1, o2) => o1 === o2;\n        this._required = false;\n        this._disabled = false;\n        /** Orientation of the chip list. */\n        this.ariaOrientation = 'horizontal';\n        this._selectable = true;\n        /** Event emitted when the selected chip list value has been changed by the user. */\n        this.change = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n    /** The array of selected chips inside chip list. */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /** The ARIA role applied to the chip list. */\n    get role() { return this.empty ? null : 'listbox'; }\n    /** Whether the user should be allowed to select multiple chips. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() { return this._compareWith; }\n    set compareWith(fn) {\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() { return this._value; }\n    set value(value) {\n        this.writeValue(value);\n        this._value = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() {\n        return this._chipInput ? this._chipInput.id : this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() { return this._required; }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get placeholder() {\n        return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n    get focused() {\n        return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return (!this._chipInput || this._chipInput.empty) && (!this.chips || this.chips.length === 0);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() { return !this.empty || this.focused; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * Whether or not this chip list is selectable. When a chip list is not selectable,\n     * the selected states for all the chips inside the chip list are always ignored.\n     */\n    get selectable() { return this._selectable; }\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n        if (this.chips) {\n            this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n        }\n    }\n    set tabIndex(value) {\n        this._userTabIndex = value;\n        this._tabIndex = value;\n    }\n    /** Combined stream of all of the child chips' selection change events. */\n    get chipSelectionChanges() {\n        return merge(...this.chips.map(chip => chip.selectionChange));\n    }\n    /** Combined stream of all of the child chips' focus change events. */\n    get chipFocusChanges() {\n        return merge(...this.chips.map(chip => chip._onFocus));\n    }\n    /** Combined stream of all of the child chips' blur change events. */\n    get chipBlurChanges() {\n        return merge(...this.chips.map(chip => chip._onBlur));\n    }\n    /** Combined stream of all of the child chips' remove change events. */\n    get chipRemoveChanges() {\n        return merge(...this.chips.map(chip => chip.destroyed));\n    }\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager(this.chips)\n            .withWrap()\n            .withVerticalOrientation()\n            .withHomeAndEnd()\n            .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n        if (this._dir) {\n            this._dir.change\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n        }\n        this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            this._allowFocusEscape();\n        });\n        // When the list changes, re-subscribe\n        this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n            if (this.disabled) {\n                // Since this happens after the content has been\n                // checked, we need to defer it to the next tick.\n                Promise.resolve().then(() => {\n                    this._syncChipsState();\n                });\n            }\n            this._resetChips();\n            // Reset chips selected/deselected status\n            this._initializeSelection();\n            // Check to see if we need to update our tab index\n            this._updateTabIndex();\n            // Check to see if we have a destroyed chip and need to refocus\n            this._updateFocusForDestroyedChips();\n            this.stateChanges.next();\n        });\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n            if (this.ngControl.disabled !== this._disabled) {\n                this.disabled = !!this.ngControl.disabled;\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this.stateChanges.complete();\n        this._dropSubscriptions();\n    }\n    /** Associates an HTML input element with this chip list. */\n    registerInput(inputElement) {\n        this._chipInput = inputElement;\n        // We use this attribute to match the chip list to its input in test harnesses.\n        // Set the attribute directly here to avoid \"changed after checked\" errors.\n        this._elementRef.nativeElement.setAttribute('data-mat-chip-input', inputElement.id);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) { this._ariaDescribedby = ids.join(' '); }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        if (this.chips) {\n            this._setSelectionByValue(value, false);\n        }\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(event) {\n        if (!this._originatesFromChip(event)) {\n            this.focus();\n        }\n    }\n    /**\n     * Focuses the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     */\n    focus(options) {\n        if (this.disabled) {\n            return;\n        }\n        // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n        // Focus on first element if there's no chipInput inside chip-list\n        if (this._chipInput && this._chipInput.focused) {\n            // do nothing\n        }\n        else if (this.chips.length > 0) {\n            this._keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        }\n        else {\n            this._focusInput(options);\n            this.stateChanges.next();\n        }\n    }\n    /** Attempt to focus an input if we have one. */\n    _focusInput(options) {\n        if (this._chipInput) {\n            this._chipInput.focus(options);\n        }\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    _keydown(event) {\n        const target = event.target;\n        if (target && target.classList.contains('mat-chip')) {\n            this._keyManager.onKeydown(event);\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n    _updateTabIndex() {\n        // If we have 0 chips, we should not allow keyboard focus\n        this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n    }\n    /**\n     * If the amount of chips changed, we need to update the\n     * key manager state and focus the next closest chip.\n     */\n    _updateFocusForDestroyedChips() {\n        // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n        if (this._lastDestroyedChipIndex != null) {\n            if (this.chips.length) {\n                const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n                this._keyManager.setActiveItem(newChipIndex);\n            }\n            else {\n                this.focus();\n            }\n        }\n        this._lastDestroyedChipIndex = null;\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of chips.\n     */\n    _isValidIndex(index) {\n        return index >= 0 && index < this.chips.length;\n    }\n    _setSelectionByValue(value, isUserInput = true) {\n        this._clearSelection();\n        this.chips.forEach(chip => chip.deselect());\n        if (Array.isArray(value)) {\n            value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n            this._sortValues();\n        }\n        else {\n            const correspondingChip = this._selectValue(value, isUserInput);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what chip the user interacted with last.\n            if (correspondingChip) {\n                if (isUserInput) {\n                    this._keyManager.setActiveItem(correspondingChip);\n                }\n            }\n        }\n    }\n    /**\n     * Finds and selects the chip based on its value.\n     * @returns Chip that has the corresponding value.\n     */\n    _selectValue(value, isUserInput = true) {\n        const correspondingChip = this.chips.find(chip => {\n            return chip.value != null && this._compareWith(chip.value, value);\n        });\n        if (correspondingChip) {\n            isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n            this._selectionModel.select(correspondingChip);\n        }\n        return correspondingChip;\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl || this._value) {\n                this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        });\n    }\n    /**\n     * Deselects every chip in the list.\n     * @param skip Chip that should not be deselected.\n     */\n    _clearSelection(skip) {\n        this._selectionModel.clear();\n        this.chips.forEach(chip => {\n            if (chip !== skip) {\n                chip.deselect();\n            }\n        });\n        this.stateChanges.next();\n    }\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n    _sortValues() {\n        if (this._multiple) {\n            this._selectionModel.clear();\n            this.chips.forEach(chip => {\n                if (chip.selected) {\n                    this._selectionModel.select(chip);\n                }\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map(chip => chip.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new MatChipListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** When blurred, mark the field as touched when focus moved outside the chip list. */\n    _blur() {\n        if (!this._hasFocusedChip()) {\n            this._keyManager.setActiveItem(-1);\n        }\n        if (!this.disabled) {\n            if (this._chipInput) {\n                // If there's a chip input, we should check whether the focus moved to chip input.\n                // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n                // to chip input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on chip input.\n                setTimeout(() => {\n                    if (!this.focused) {\n                        this._markAsTouched();\n                    }\n                });\n            }\n            else {\n                // If there's no chip input, then mark the field as touched.\n                this._markAsTouched();\n            }\n        }\n    }\n    /** Mark the field as touched */\n    _markAsTouched() {\n        this._onTouched();\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n     * user to tab out of it. This prevents the list from capturing focus and redirecting\n     * it back to the first chip, creating a focus trap, if it user tries to tab away.\n     */\n    _allowFocusEscape() {\n        if (this._tabIndex !== -1) {\n            this._tabIndex = -1;\n            setTimeout(() => {\n                this._tabIndex = this._userTabIndex || 0;\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    _resetChips() {\n        this._dropSubscriptions();\n        this._listenToChipsFocus();\n        this._listenToChipsSelection();\n        this._listenToChipsRemoved();\n    }\n    _dropSubscriptions() {\n        if (this._chipFocusSubscription) {\n            this._chipFocusSubscription.unsubscribe();\n            this._chipFocusSubscription = null;\n        }\n        if (this._chipBlurSubscription) {\n            this._chipBlurSubscription.unsubscribe();\n            this._chipBlurSubscription = null;\n        }\n        if (this._chipSelectionSubscription) {\n            this._chipSelectionSubscription.unsubscribe();\n            this._chipSelectionSubscription = null;\n        }\n        if (this._chipRemoveSubscription) {\n            this._chipRemoveSubscription.unsubscribe();\n            this._chipRemoveSubscription = null;\n        }\n    }\n    /** Listens to user-generated selection events on each chip. */\n    _listenToChipsSelection() {\n        this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n            event.source.selected\n                ? this._selectionModel.select(event.source)\n                : this._selectionModel.deselect(event.source);\n            // For single selection chip list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.chips.forEach(chip => {\n                    if (!this._selectionModel.isSelected(chip) && chip.selected) {\n                        chip.deselect();\n                    }\n                });\n            }\n            if (event.isUserInput) {\n                this._propagateChanges();\n            }\n        });\n    }\n    /** Listens to user-generated selection events on each chip. */\n    _listenToChipsFocus() {\n        this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n            let chipIndex = this.chips.toArray().indexOf(event.chip);\n            if (this._isValidIndex(chipIndex)) {\n                this._keyManager.updateActiveItem(chipIndex);\n            }\n            this.stateChanges.next();\n        });\n        this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n            this._blur();\n            this.stateChanges.next();\n        });\n    }\n    _listenToChipsRemoved() {\n        this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n            const chip = event.chip;\n            const chipIndex = this.chips.toArray().indexOf(event.chip);\n            // In case the chip that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling chip that will\n            // receive focus.\n            if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n                this._lastDestroyedChipIndex = chipIndex;\n            }\n        });\n    }\n    /** Checks whether an event comes from inside a chip element. */\n    _originatesFromChip(event) {\n        let currentElement = event.target;\n        while (currentElement && currentElement !== this._elementRef.nativeElement) {\n            if (currentElement.classList.contains('mat-chip')) {\n                return true;\n            }\n            currentElement = currentElement.parentElement;\n        }\n        return false;\n    }\n    /** Checks whether any of the chips is focused. */\n    _hasFocusedChip() {\n        return this.chips && this.chips.some(chip => chip._hasFocus);\n    }\n    /** Syncs the list's state with the individual chips. */\n    _syncChipsState() {\n        if (this.chips) {\n            this.chips.forEach(chip => {\n                chip._chipListDisabled = this._disabled;\n                chip._chipListMultiple = this.multiple;\n            });\n        }\n    }\n}\nMatChipList.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-chip-list',\n                template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n                exportAs: 'matChipList',\n                host: {\n                    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-required]': 'role ? required : null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.role]': 'role',\n                    '[class.mat-chip-list-disabled]': 'disabled',\n                    '[class.mat-chip-list-invalid]': 'errorState',\n                    '[class.mat-chip-list-required]': 'required',\n                    '[attr.aria-orientation]': 'ariaOrientation',\n                    'class': 'mat-chip-list',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()',\n                    '(keydown)': '_keydown($event)',\n                    '[id]': '_uid',\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatChipList }],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"]\n            },] }\n];\nMatChipList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] }\n];\nMatChipList.propDecorators = {\n    errorStateMatcher: [{ type: Input }],\n    multiple: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    required: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    disabled: [{ type: Input }],\n    ariaOrientation: [{ type: Input, args: ['aria-orientation',] }],\n    selectable: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    change: [{ type: Output }],\n    valueChange: [{ type: Output }],\n    chips: [{ type: ContentChildren, args: [MatChip, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\nclass MatChipInput {\n    constructor(_elementRef, _defaultOptions) {\n        this._elementRef = _elementRef;\n        this._defaultOptions = _defaultOptions;\n        /** Whether the control is focused. */\n        this.focused = false;\n        this._addOnBlur = false;\n        /**\n         * The list of key codes that will trigger a chipEnd event.\n         *\n         * Defaults to `[ENTER]`.\n         */\n        this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n        /** Emitted when a chip is to be added. */\n        this.chipEnd = new EventEmitter();\n        /** The input's placeholder text. */\n        this.placeholder = '';\n        /** Unique id for the input. */\n        this.id = `mat-chip-list-input-${nextUniqueId++}`;\n        this._disabled = false;\n        this.inputElement = this._elementRef.nativeElement;\n    }\n    /** Register input for chip list */\n    set chipList(value) {\n        if (value) {\n            this._chipList = value;\n            this._chipList.registerInput(this);\n        }\n    }\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     */\n    get addOnBlur() { return this._addOnBlur; }\n    set addOnBlur(value) { this._addOnBlur = coerceBooleanProperty(value); }\n    /** Whether the input is disabled. */\n    get disabled() { return this._disabled || (this._chipList && this._chipList.disabled); }\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /** Whether the input is empty. */\n    get empty() { return !this.inputElement.value; }\n    ngOnChanges() {\n        this._chipList.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.chipEnd.complete();\n    }\n    ngAfterContentInit() {\n        this._focusLastChipOnBackspace = this.empty;\n    }\n    /** Utility method to make host definition/tests more clear. */\n    _keydown(event) {\n        if (event) {\n            // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n            // want to do this when going backwards, because focus should go back to the first chip.\n            if (event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n                this._chipList._allowFocusEscape();\n            }\n            // To prevent the user from accidentally deleting chips when pressing BACKSPACE continuously,\n            // We focus the last chip on backspace only after the user has released the backspace button,\n            // and the input is empty (see behaviour in _keyup)\n            if (event.keyCode === BACKSPACE && this._focusLastChipOnBackspace) {\n                this._chipList._keyManager.setLastItemActive();\n                event.preventDefault();\n                return;\n            }\n            else {\n                this._focusLastChipOnBackspace = false;\n            }\n        }\n        this._emitChipEnd(event);\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    _keyup(event) {\n        // Allow user to move focus to chips next time he presses backspace\n        if (!this._focusLastChipOnBackspace && event.keyCode === BACKSPACE && this.empty) {\n            this._focusLastChipOnBackspace = true;\n            event.preventDefault();\n        }\n    }\n    /** Checks to see if the blur should emit the (chipEnd) event. */\n    _blur() {\n        if (this.addOnBlur) {\n            this._emitChipEnd();\n        }\n        this.focused = false;\n        // Blur the chip list if it is not focused\n        if (!this._chipList.focused) {\n            this._chipList._blur();\n        }\n        this._chipList.stateChanges.next();\n    }\n    _focus() {\n        this.focused = true;\n        this._chipList.stateChanges.next();\n    }\n    /** Checks to see if the (chipEnd) event needs to be emitted. */\n    _emitChipEnd(event) {\n        if (!this.inputElement.value && !!event) {\n            this._chipList._keydown(event);\n        }\n        if (!event || this._isSeparatorKey(event)) {\n            this.chipEnd.emit({\n                input: this.inputElement,\n                value: this.inputElement.value,\n                chipInput: this,\n            });\n            event === null || event === void 0 ? void 0 : event.preventDefault();\n        }\n    }\n    _onInput() {\n        // Let chip list know whenever the value changes.\n        this._chipList.stateChanges.next();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this.inputElement.focus(options);\n    }\n    /** Clears the input */\n    clear() {\n        this.inputElement.value = '';\n        this._focusLastChipOnBackspace = true;\n    }\n    /** Checks whether a keycode is one of the configured separators. */\n    _isSeparatorKey(event) {\n        return !hasModifierKey(event) && new Set(this.separatorKeyCodes).has(event.keyCode);\n    }\n}\nMatChipInput.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[matChipInputFor]',\n                exportAs: 'matChipInput, matChipInputFor',\n                host: {\n                    'class': 'mat-chip-input mat-input-element',\n                    '(keydown)': '_keydown($event)',\n                    '(keyup)': '_keyup($event)',\n                    '(blur)': '_blur()',\n                    '(focus)': '_focus()',\n                    '(input)': '_onInput()',\n                    '[id]': 'id',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.placeholder]': 'placeholder || null',\n                    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n                    '[attr.aria-required]': '_chipList && _chipList.required || null',\n                }\n            },] }\n];\nMatChipInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_CHIPS_DEFAULT_OPTIONS,] }] }\n];\nMatChipInput.propDecorators = {\n    chipList: [{ type: Input, args: ['matChipInputFor',] }],\n    addOnBlur: [{ type: Input, args: ['matChipInputAddOnBlur',] }],\n    separatorKeyCodes: [{ type: Input, args: ['matChipInputSeparatorKeyCodes',] }],\n    chipEnd: [{ type: Output, args: ['matChipInputTokenEnd',] }],\n    placeholder: [{ type: Input }],\n    id: [{ type: Input }],\n    disabled: [{ type: Input }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst CHIP_DECLARATIONS = [\n    MatChipList,\n    MatChip,\n    MatChipInput,\n    MatChipRemove,\n    MatChipAvatar,\n    MatChipTrailingIcon,\n];\nconst ɵ0 = {\n    separatorKeyCodes: [ENTER]\n};\nclass MatChipsModule {\n}\nMatChipsModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatCommonModule],\n                exports: CHIP_DECLARATIONS,\n                declarations: CHIP_DECLARATIONS,\n                providers: [\n                    ErrorStateMatcher,\n                    {\n                        provide: MAT_CHIPS_DEFAULT_OPTIONS,\n                        useValue: ɵ0\n                    }\n                ]\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHIPS_DEFAULT_OPTIONS, MAT_CHIP_AVATAR, MAT_CHIP_REMOVE, MAT_CHIP_TRAILING_ICON, MatChip, MatChipAvatar, MatChipInput, MatChipList, MatChipListChange, MatChipRemove, MatChipSelectionChange, MatChipTrailingIcon, MatChipsModule, ɵ0 };\n"],"mappings":"AAAA,SAASA,KAAK,EAAEC,SAAS,EAAEC,MAAM,EAAEC,GAAG,EAAEC,cAAc,EAAEC,KAAK,QAAQ,uBAAuB;AAC5F,SAASC,cAAc,EAAEC,SAAS,EAAEC,YAAY,EAAEC,UAAU,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,iBAAiB,EAAEC,SAAS,EAAEC,YAAY,EAAEC,KAAK,EAAEC,MAAM,EAAEC,SAAS,EAAEC,iBAAiB,EAAEC,uBAAuB,EAAEC,IAAI,EAAEC,eAAe,EAAEC,QAAQ,QAAQ,eAAe;AAChQ,SAASC,aAAa,EAAEC,UAAU,EAAEC,kBAAkB,EAAEC,cAAc,EAAEC,yBAAyB,EAAEC,eAAe,EAAEC,iBAAiB,EAAEC,eAAe,QAAQ,wBAAwB;AACtL,SAASC,qBAAqB,QAAQ,uBAAuB;AAC7D,SAASC,QAAQ,QAAQ,uBAAuB;AAChD,SAASC,QAAQ,QAAQ,iBAAiB;AAC1C,SAASC,qBAAqB,QAAQ,sCAAsC;AAC5E,SAASC,OAAO,EAAEC,KAAK,QAAQ,MAAM;AACrC,SAASC,IAAI,EAAEC,SAAS,EAAEC,SAAS,QAAQ,gBAAgB;AAC3D,SAASC,eAAe,QAAQ,mBAAmB;AACnD,SAASC,cAAc,QAAQ,mBAAmB;AAClD,SAASC,cAAc,QAAQ,0BAA0B;AACzD,SAASC,MAAM,EAAEC,kBAAkB,EAAEC,SAAS,QAAQ,gBAAgB;AACtE,SAASC,mBAAmB,QAAQ,8BAA8B;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,sBAAsB,CAAC;EACzBC,WAAWA,CAAA,CACX;EACAC,MAAM,EACN;EACAC,QAAQ,EACR;EACAC,WAAW,GAAG,KAAK,EAAE;IACjB,IAAI,CAACF,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,WAAW,GAAGA,WAAW;EAClC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAG,IAAI/C,cAAc,CAAC,eAAe,CAAC;AAC3D;AACA;AACA;AACA;AACA;AACA,MAAMgD,eAAe,GAAG,IAAIhD,cAAc,CAAC,eAAe,CAAC;AAC3D;AACA;AACA;AACA;AACA;AACA,MAAMiD,sBAAsB,GAAG,IAAIjD,cAAc,CAAC,qBAAqB,CAAC;AACxE;AACA;AACA,MAAMkD,WAAW,CAAC;EACdP,WAAWA,CAACQ,WAAW,EAAE;IACrB,IAAI,CAACA,WAAW,GAAGA,WAAW;EAClC;AACJ;AACA,MAAMC,iBAAiB,GAAGlC,aAAa,CAACC,UAAU,CAACC,kBAAkB,CAAC8B,WAAW,CAAC,EAAE,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;AACnG;AACA;AACA;AACA;AACA,MAAMG,aAAa,CAAC;AAEpBA,aAAa,CAACC,UAAU,GAAG,CACvB;EAAEC,IAAI,EAAEtD,SAAS;EAAEuD,IAAI,EAAE,CAAC;IACdC,QAAQ,EAAE,kCAAkC;IAC5CC,IAAI,EAAE;MAAE,OAAO,EAAE;IAAkB,CAAC;IACpCC,SAAS,EAAE,CAAC;MAAEC,OAAO,EAAEZ,eAAe;MAAEa,WAAW,EAAER;IAAc,CAAC;EACxE,CAAC;AAAG,CAAC,CAChB;AACD;AACA;AACA;AACA;AACA,MAAMS,mBAAmB,CAAC;AAE1BA,mBAAmB,CAACR,UAAU,GAAG,CAC7B;EAAEC,IAAI,EAAEtD,SAAS;EAAEuD,IAAI,EAAE,CAAC;IACdC,QAAQ,EAAE,+CAA+C;IACzDC,IAAI,EAAE;MAAE,OAAO,EAAE;IAAyB,CAAC;IAC3CC,SAAS,EAAE,CAAC;MAAEC,OAAO,EAAEX,sBAAsB;MAAEY,WAAW,EAAEC;IAAoB,CAAC;EACrF,CAAC;AAAG,CAAC,CAChB;AACD;AACA;AACA;AACA,MAAMC,OAAO,SAASX,iBAAiB,CAAC;EACpCT,WAAWA,CAACQ,WAAW,EAAEa,OAAO,EAAEC,QAAQ,EAAEC,mBAAmB,EAAEC,kBAAkB,EAAEC,SAAS,EAAEC,aAAa,EAAEC,QAAQ,EAAE;IACrH,KAAK,CAACnB,WAAW,CAAC;IAClB,IAAI,CAACA,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACa,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACG,kBAAkB,GAAGA,kBAAkB;IAC5C;IACA,IAAI,CAACI,SAAS,GAAG,KAAK;IACtB;IACA,IAAI,CAACC,kBAAkB,GAAG,IAAI;IAC9B;IACA,IAAI,CAACC,iBAAiB,GAAG,KAAK;IAC9B;IACA,IAAI,CAACC,iBAAiB,GAAG,KAAK;IAC9B,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB,IAAI,CAACC,WAAW,GAAG,IAAI;IACvB,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB,IAAI,CAACC,UAAU,GAAG,IAAI;IACtB;IACA,IAAI,CAACC,QAAQ,GAAG,IAAIjD,OAAO,CAAC,CAAC;IAC7B;IACA,IAAI,CAACkD,OAAO,GAAG,IAAIlD,OAAO,CAAC,CAAC;IAC5B;IACA,IAAI,CAACmD,eAAe,GAAG,IAAI/E,YAAY,CAAC,CAAC;IACzC;IACA,IAAI,CAACgF,SAAS,GAAG,IAAIhF,YAAY,CAAC,CAAC;IACnC;IACA,IAAI,CAACiF,OAAO,GAAG,IAAIjF,YAAY,CAAC,CAAC;IACjC,IAAI,CAACkF,iBAAiB,CAAC,CAAC;IACxB;IACA;IACA;IACA,IAAI,CAACC,iBAAiB,GAAGjB,SAAS,CAACkB,aAAa,CAAC,KAAK,CAAC;IACvD,IAAI,CAACD,iBAAiB,CAACE,SAAS,CAACC,GAAG,CAAC,iBAAiB,CAAC;IACvD,IAAI,CAACrC,WAAW,CAACsC,aAAa,CAACC,WAAW,CAAC,IAAI,CAACL,iBAAiB,CAAC;IAClE,IAAI,CAACM,WAAW,GAAG,IAAItE,cAAc,CAAC,IAAI,EAAE2C,OAAO,EAAE,IAAI,CAACqB,iBAAiB,EAAEpB,QAAQ,CAAC;IACtF,IAAI,CAAC0B,WAAW,CAACC,kBAAkB,CAACzC,WAAW,CAAC;IAChD,IAAI,CAAC0C,YAAY,GAAG3B,mBAAmB,IAAI,CAAC,CAAC;IAC7C,IAAI,CAAC4B,mBAAmB,GAAGzB,aAAa,KAAK,gBAAgB;IAC7D,IAAI,CAACC,QAAQ,GAAGA,QAAQ,IAAI,IAAI,GAAIyB,QAAQ,CAACzB,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAI,CAAC,CAAC;EACtE;EACA;AACJ;AACA;AACA;EACI,IAAI0B,cAAcA,CAAA,EAAG;IACjB,OAAO,IAAI,CAACC,QAAQ,IAAI,IAAI,CAACC,aAAa,IAAI,IAAI,CAACJ,mBAAmB,IAClE,CAAC,CAAC,IAAI,CAACD,YAAY,CAACI,QAAQ;EACpC;EACA;EACA,IAAIpD,QAAQA,CAAA,EAAG;IAAE,OAAO,IAAI,CAAC8B,SAAS;EAAE;EACxC,IAAI9B,QAAQA,CAACsD,KAAK,EAAE;IAChB,MAAMC,YAAY,GAAG1E,qBAAqB,CAACyE,KAAK,CAAC;IACjD,IAAIC,YAAY,KAAK,IAAI,CAACzB,SAAS,EAAE;MACjC,IAAI,CAACA,SAAS,GAAGyB,YAAY;MAC7B,IAAI,CAACC,wBAAwB,CAAC,CAAC;IACnC;EACJ;EACA;EACA,IAAIF,KAAKA,CAAA,EAAG;IACR,OAAO,IAAI,CAACG,MAAM,KAAKC,SAAS,GAC1B,IAAI,CAACD,MAAM,GACX,IAAI,CAACnD,WAAW,CAACsC,aAAa,CAACe,WAAW;EACpD;EACA,IAAIL,KAAKA,CAACA,KAAK,EAAE;IAAE,IAAI,CAACG,MAAM,GAAGH,KAAK;EAAE;EACxC;AACJ;AACA;AACA;AACA;AACA;EACI,IAAIM,UAAUA,CAAA,EAAG;IAAE,OAAO,IAAI,CAAC7B,WAAW,IAAI,IAAI,CAACJ,kBAAkB;EAAE;EACvE,IAAIiC,UAAUA,CAACN,KAAK,EAAE;IAClB,IAAI,CAACvB,WAAW,GAAGlD,qBAAqB,CAACyE,KAAK,CAAC;EACnD;EACA;EACA,IAAIF,QAAQA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACvB,iBAAiB,IAAI,IAAI,CAACG,SAAS;EAAE;EAClE,IAAIoB,QAAQA,CAACE,KAAK,EAAE;IAChB,IAAI,CAACtB,SAAS,GAAGnD,qBAAqB,CAACyE,KAAK,CAAC;EACjD;EACA;AACJ;AACA;EACI,IAAIO,SAASA,CAAA,EAAG;IAAE,OAAO,IAAI,CAAC5B,UAAU;EAAE;EAC1C,IAAI4B,SAASA,CAACP,KAAK,EAAE;IACjB,IAAI,CAACrB,UAAU,GAAGpD,qBAAqB,CAACyE,KAAK,CAAC;EAClD;EACA;EACA,IAAIQ,YAAYA,CAAA,EAAG;IACf;IACA;IACA,OAAO,IAAI,CAACF,UAAU,KAAK,IAAI,CAAChC,iBAAiB,IAAI,IAAI,CAAC5B,QAAQ,CAAC,GAC/D,IAAI,CAACA,QAAQ,CAAC+D,QAAQ,CAAC,CAAC,GAAG,IAAI;EACvC;EACAxB,iBAAiBA,CAAA,EAAG;IAChB,MAAMyB,iBAAiB,GAAG,gBAAgB;IAC1C,MAAMC,OAAO,GAAG,IAAI,CAAC3D,WAAW,CAACsC,aAAa;IAC9C,IAAIqB,OAAO,CAACC,YAAY,CAACF,iBAAiB,CAAC,IACvCC,OAAO,CAACE,OAAO,CAACC,WAAW,CAAC,CAAC,KAAKJ,iBAAiB,EAAE;MACrDC,OAAO,CAACvB,SAAS,CAACC,GAAG,CAACqB,iBAAiB,CAAC;MACxC;IACJ,CAAC,MACI;MACDC,OAAO,CAACvB,SAAS,CAACC,GAAG,CAAC,mBAAmB,CAAC;IAC9C;EACJ;EACA0B,WAAWA,CAAA,EAAG;IACV,IAAI,CAAChC,SAAS,CAACiC,IAAI,CAAC;MAAEC,IAAI,EAAE;IAAK,CAAC,CAAC;IACnC,IAAI,CAACzB,WAAW,CAAC0B,oBAAoB,CAAC,CAAC;EAC3C;EACA;EACAC,MAAMA,CAAA,EAAG;IACL,IAAI,CAAC,IAAI,CAAC3C,SAAS,EAAE;MACjB,IAAI,CAACA,SAAS,GAAG,IAAI;MACrB,IAAI,CAAC0B,wBAAwB,CAAC,CAAC;MAC/B,IAAI,CAAClC,kBAAkB,CAACoD,YAAY,CAAC,CAAC;IAC1C;EACJ;EACA;EACAC,QAAQA,CAAA,EAAG;IACP,IAAI,IAAI,CAAC7C,SAAS,EAAE;MAChB,IAAI,CAACA,SAAS,GAAG,KAAK;MACtB,IAAI,CAAC0B,wBAAwB,CAAC,CAAC;MAC/B,IAAI,CAAClC,kBAAkB,CAACoD,YAAY,CAAC,CAAC;IAC1C;EACJ;EACA;EACAE,oBAAoBA,CAAA,EAAG;IACnB,IAAI,CAAC,IAAI,CAAC9C,SAAS,EAAE;MACjB,IAAI,CAACA,SAAS,GAAG,IAAI;MACrB,IAAI,CAAC0B,wBAAwB,CAAC,IAAI,CAAC;MACnC,IAAI,CAAClC,kBAAkB,CAACoD,YAAY,CAAC,CAAC;IAC1C;EACJ;EACA;EACAG,cAAcA,CAAC5E,WAAW,GAAG,KAAK,EAAE;IAChC,IAAI,CAAC6B,SAAS,GAAG,CAAC,IAAI,CAAC9B,QAAQ;IAC/B,IAAI,CAACwD,wBAAwB,CAACvD,WAAW,CAAC;IAC1C,IAAI,CAACqB,kBAAkB,CAACoD,YAAY,CAAC,CAAC;IACtC,OAAO,IAAI,CAAC1E,QAAQ;EACxB;EACA;EACA8E,KAAKA,CAAA,EAAG;IACJ,IAAI,CAAC,IAAI,CAACpD,SAAS,EAAE;MACjB,IAAI,CAACpB,WAAW,CAACsC,aAAa,CAACkC,KAAK,CAAC,CAAC;MACtC,IAAI,CAAC5C,QAAQ,CAAC6C,IAAI,CAAC;QAAER,IAAI,EAAE;MAAK,CAAC,CAAC;IACtC;IACA,IAAI,CAAC7C,SAAS,GAAG,IAAI;EACzB;EACA;AACJ;AACA;AACA;AACA;AACA;EACIsD,MAAMA,CAAA,EAAG;IACL,IAAI,IAAI,CAACnB,SAAS,EAAE;MAChB,IAAI,CAACvB,OAAO,CAACgC,IAAI,CAAC;QAAEC,IAAI,EAAE;MAAK,CAAC,CAAC;IACrC;EACJ;EACA;EACAU,YAAYA,CAACC,KAAK,EAAE;IAChB,IAAI,IAAI,CAAC9B,QAAQ,EAAE;MACf8B,KAAK,CAACC,cAAc,CAAC,CAAC;IAC1B,CAAC,MACI;MACDD,KAAK,CAACE,eAAe,CAAC,CAAC;IAC3B;EACJ;EACA;EACAC,cAAcA,CAACH,KAAK,EAAE;IAClB,IAAI,IAAI,CAAC9B,QAAQ,EAAE;MACf;IACJ;IACA,QAAQ8B,KAAK,CAACI,OAAO;MACjB,KAAKvI,MAAM;MACX,KAAKD,SAAS;QACV;QACA,IAAI,CAACkI,MAAM,CAAC,CAAC;QACb;QACAE,KAAK,CAACC,cAAc,CAAC,CAAC;QACtB;MACJ,KAAKtI,KAAK;QACN;QACA,IAAI,IAAI,CAAC+G,UAAU,EAAE;UACjB,IAAI,CAACiB,cAAc,CAAC,IAAI,CAAC;QAC7B;QACA;QACAK,KAAK,CAACC,cAAc,CAAC,CAAC;QACtB;IACR;EACJ;EACAI,KAAKA,CAAA,EAAG;IACJ;IACA;IACA;IACA;IACA,IAAI,CAACpE,OAAO,CAACqE,QAAQ,CAChBC,IAAI,CAACtG,IAAI,CAAC,CAAC,CAAC,CAAC,CACbuG,SAAS,CAAC,MAAM;MACjB,IAAI,CAACvE,OAAO,CAACwE,GAAG,CAAC,MAAM;QACnB,IAAI,CAACjE,SAAS,GAAG,KAAK;QACtB,IAAI,CAACS,OAAO,CAAC4C,IAAI,CAAC;UAAER,IAAI,EAAE;QAAK,CAAC,CAAC;MACrC,CAAC,CAAC;IACN,CAAC,CAAC;EACN;EACAf,wBAAwBA,CAACvD,WAAW,GAAG,KAAK,EAAE;IAC1C,IAAI,CAACmC,eAAe,CAACkC,IAAI,CAAC;MACtBvE,MAAM,EAAE,IAAI;MACZE,WAAW;MACXD,QAAQ,EAAE,IAAI,CAAC8B;IACnB,CAAC,CAAC;EACN;AACJ;AACAZ,OAAO,CAACT,UAAU,GAAG,CACjB;EAAEC,IAAI,EAAEtD,SAAS;EAAEuD,IAAI,EAAE,CAAC;IACdC,QAAQ,EAAG,wDAAuD;IAClEgF,MAAM,EAAE,CAAC,OAAO,EAAE,eAAe,EAAE,UAAU,CAAC;IAC9CC,QAAQ,EAAE,SAAS;IACnBhF,IAAI,EAAE;MACF,OAAO,EAAE,8BAA8B;MACvC,iBAAiB,EAAE,4BAA4B;MAC/C,MAAM,EAAE,QAAQ;MAChB,2BAA2B,EAAE,UAAU;MACvC,8BAA8B,EAAE,QAAQ;MACxC,qCAAqC,EAAE,4BAA4B;MACnE,2BAA2B,EAAE,UAAU;MACvC,iCAAiC,EAAE,qBAAqB;MACxD,iBAAiB,EAAE,kBAAkB;MACrC,sBAAsB,EAAE,qBAAqB;MAC7C,sBAAsB,EAAE,cAAc;MACtC,SAAS,EAAE,sBAAsB;MACjC,WAAW,EAAE,wBAAwB;MACrC,SAAS,EAAE,SAAS;MACpB,QAAQ,EAAE;IACd;EACJ,CAAC;AAAG,CAAC,CAChB;AACDK,OAAO,CAAC4E,cAAc,GAAG,MAAM,CAC3B;EAAEpF,IAAI,EAAEpD;AAAW,CAAC,EACpB;EAAEoD,IAAI,EAAEnD;AAAO,CAAC,EAChB;EAAEmD,IAAI,EAAE5B;AAAS,CAAC,EAClB;EAAE4B,IAAI,EAAEgD,SAAS;EAAEjD,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAElD;EAAS,CAAC,EAAE;IAAEkD,IAAI,EAAEjD,MAAM;IAAEkD,IAAI,EAAE,CAAClC,yBAAyB;EAAG,CAAC;AAAE,CAAC,EAC3G;EAAEiC,IAAI,EAAEhD;AAAkB,CAAC,EAC3B;EAAEgD,IAAI,EAAEgD,SAAS;EAAEjD,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAEjD,MAAM;IAAEkD,IAAI,EAAE,CAAC5B,QAAQ;EAAG,CAAC;AAAE,CAAC,EACtE;EAAE2B,IAAI,EAAEqF,MAAM;EAAEtF,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAElD;EAAS,CAAC,EAAE;IAAEkD,IAAI,EAAEjD,MAAM;IAAEkD,IAAI,EAAE,CAAC3B,qBAAqB;EAAG,CAAC;AAAE,CAAC,EACpG;EAAE0B,IAAI,EAAEqF,MAAM;EAAEtF,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAE/C,SAAS;IAAEgD,IAAI,EAAE,CAAC,UAAU;EAAG,CAAC;AAAE,CAAC,CAC3E;AACDO,OAAO,CAAC8E,cAAc,GAAG;EACrBC,MAAM,EAAE,CAAC;IAAEvF,IAAI,EAAE9C,YAAY;IAAE+C,IAAI,EAAE,CAACR,eAAe;EAAG,CAAC,CAAC;EAC1D+F,YAAY,EAAE,CAAC;IAAExF,IAAI,EAAE9C,YAAY;IAAE+C,IAAI,EAAE,CAACP,sBAAsB;EAAG,CAAC,CAAC;EACvE+F,UAAU,EAAE,CAAC;IAAEzF,IAAI,EAAE9C,YAAY;IAAE+C,IAAI,EAAE,CAACT,eAAe;EAAG,CAAC,CAAC;EAC9DF,QAAQ,EAAE,CAAC;IAAEU,IAAI,EAAE7C;EAAM,CAAC,CAAC;EAC3ByF,KAAK,EAAE,CAAC;IAAE5C,IAAI,EAAE7C;EAAM,CAAC,CAAC;EACxB+F,UAAU,EAAE,CAAC;IAAElD,IAAI,EAAE7C;EAAM,CAAC,CAAC;EAC7BuF,QAAQ,EAAE,CAAC;IAAE1C,IAAI,EAAE7C;EAAM,CAAC,CAAC;EAC3BgG,SAAS,EAAE,CAAC;IAAEnD,IAAI,EAAE7C;EAAM,CAAC,CAAC;EAC5BuE,eAAe,EAAE,CAAC;IAAE1B,IAAI,EAAE5C;EAAO,CAAC,CAAC;EACnCuE,SAAS,EAAE,CAAC;IAAE3B,IAAI,EAAE5C;EAAO,CAAC,CAAC;EAC7BwE,OAAO,EAAE,CAAC;IAAE5B,IAAI,EAAE5C;EAAO,CAAC;AAC9B,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMsI,aAAa,CAAC;EAChBtG,WAAWA,CAACuG,WAAW,EAAEC,UAAU,EAAE;IACjC,IAAI,CAACD,WAAW,GAAGA,WAAW;IAC9B,IAAIC,UAAU,CAAC1D,aAAa,CAAC2D,QAAQ,KAAK,QAAQ,EAAE;MAChDD,UAAU,CAAC1D,aAAa,CAAC4D,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC;IAC3D;EACJ;EACA;EACAvB,YAAYA,CAACC,KAAK,EAAE;IAChB,MAAMuB,UAAU,GAAG,IAAI,CAACJ,WAAW;IACnC,IAAII,UAAU,CAAC5C,SAAS,IAAI,CAAC4C,UAAU,CAACrD,QAAQ,EAAE;MAC9CqD,UAAU,CAACzB,MAAM,CAAC,CAAC;IACvB;IACA;IACA;IACA;IACA;IACA;IACAE,KAAK,CAACE,eAAe,CAAC,CAAC;EAC3B;AACJ;AACAgB,aAAa,CAAC3F,UAAU,GAAG,CACvB;EAAEC,IAAI,EAAEtD,SAAS;EAAEuD,IAAI,EAAE,CAAC;IACdC,QAAQ,EAAE,iBAAiB;IAC3BC,IAAI,EAAE;MACF,OAAO,EAAE,wCAAwC;MACjD,SAAS,EAAE;IACf,CAAC;IACDC,SAAS,EAAE,CAAC;MAAEC,OAAO,EAAEb,eAAe;MAAEc,WAAW,EAAEoF;IAAc,CAAC;EACxE,CAAC;AAAG,CAAC,CAChB;AACDA,aAAa,CAACN,cAAc,GAAG,MAAM,CACjC;EAAEpF,IAAI,EAAEQ;AAAQ,CAAC,EACjB;EAAER,IAAI,EAAEpD;AAAW,CAAC,CACvB;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMoJ,yBAAyB,GAAG,IAAIvJ,cAAc,CAAC,2BAA2B,CAAC;;AAEjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMwJ,eAAe,CAAC;EAClB7G,WAAWA,CAAC8G,yBAAyB,EAAEC,WAAW,EAAEC,gBAAgB,EACpE;EACAC,SAAS,EAAE;IACP,IAAI,CAACH,yBAAyB,GAAGA,yBAAyB;IAC1D,IAAI,CAACC,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,gBAAgB,GAAGA,gBAAgB;IACxC,IAAI,CAACC,SAAS,GAAGA,SAAS;EAC9B;AACJ;AACA,MAAMC,qBAAqB,GAAGtI,eAAe,CAACiI,eAAe,CAAC;AAC9D;AACA,IAAIM,cAAc,GAAG,CAAC;AACtB;AACA,MAAMC,iBAAiB,CAAC;EACpBpH,WAAWA,CAAA,CACX;EACAC,MAAM,EACN;EACAuD,KAAK,EAAE;IACH,IAAI,CAACvD,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACuD,KAAK,GAAGA,KAAK;EACtB;AACJ;AACA;AACA;AACA;AACA,MAAM6D,WAAW,SAASH,qBAAqB,CAAC;EAC5ClH,WAAWA,CAACQ,WAAW,EAAEgB,kBAAkB,EAAE8F,IAAI,EAAEP,WAAW,EAAEC,gBAAgB,EAAEF,yBAAyB,EAC3G;EACAG,SAAS,EAAE;IACP,KAAK,CAACH,yBAAyB,EAAEC,WAAW,EAAEC,gBAAgB,EAAEC,SAAS,CAAC;IAC1E,IAAI,CAACzG,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACgB,kBAAkB,GAAGA,kBAAkB;IAC5C,IAAI,CAAC8F,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACL,SAAS,GAAGA,SAAS;IAC1B;AACR;AACA;AACA;IACQ,IAAI,CAACM,WAAW,GAAG,eAAe;IAClC;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,uBAAuB,GAAG,IAAI;IACnC;IACA,IAAI,CAACC,UAAU,GAAG,IAAItI,OAAO,CAAC,CAAC;IAC/B;IACA,IAAI,CAACuI,IAAI,GAAI,iBAAgBP,cAAc,EAAG,EAAC;IAC/C;IACA,IAAI,CAACQ,SAAS,GAAG,CAAC;IAClB;AACR;AACA;AACA;IACQ,IAAI,CAACC,aAAa,GAAG,IAAI;IACzB;IACA,IAAI,CAACC,UAAU,GAAG,MAAM,CAAE,CAAC;IAC3B;IACA,IAAI,CAACC,SAAS,GAAG,MAAM,CAAE,CAAC;IAC1B,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB,IAAI,CAACC,YAAY,GAAG,CAACC,EAAE,EAAEC,EAAE,KAAKD,EAAE,KAAKC,EAAE;IACzC,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB,IAAI,CAACjG,SAAS,GAAG,KAAK;IACtB;IACA,IAAI,CAACkG,eAAe,GAAG,YAAY;IACnC,IAAI,CAACnG,WAAW,GAAG,IAAI;IACvB;IACA,IAAI,CAACoG,MAAM,GAAG,IAAI9K,YAAY,CAAC,CAAC;IAChC;AACR;AACA;AACA;AACA;IACQ,IAAI,CAAC+K,WAAW,GAAG,IAAI/K,YAAY,CAAC,CAAC;IACrC,IAAI,IAAI,CAAC0J,SAAS,EAAE;MAChB,IAAI,CAACA,SAAS,CAACsB,aAAa,GAAG,IAAI;IACvC;EACJ;EACA;EACA,IAAIrI,QAAQA,CAAA,EAAG;IACX,OAAO,IAAI,CAACsI,QAAQ,GAAG,IAAI,CAACC,eAAe,CAACvI,QAAQ,GAAG,IAAI,CAACuI,eAAe,CAACvI,QAAQ,CAAC,CAAC,CAAC;EAC3F;EACA;EACA,IAAIwI,IAAIA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACC,KAAK,GAAG,IAAI,GAAG,SAAS;EAAE;EACnD;EACA,IAAIH,QAAQA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACT,SAAS;EAAE;EACxC,IAAIS,QAAQA,CAAChF,KAAK,EAAE;IAChB,IAAI,CAACuE,SAAS,GAAGhJ,qBAAqB,CAACyE,KAAK,CAAC;IAC7C,IAAI,CAACoF,eAAe,CAAC,CAAC;EAC1B;EACA;AACJ;AACA;AACA;AACA;EACI,IAAIC,WAAWA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACb,YAAY;EAAE;EAC9C,IAAIa,WAAWA,CAACC,EAAE,EAAE;IAChB,IAAI,CAACd,YAAY,GAAGc,EAAE;IACtB,IAAI,IAAI,CAACL,eAAe,EAAE;MACtB;MACA,IAAI,CAACM,oBAAoB,CAAC,CAAC;IAC/B;EACJ;EACA;AACJ;AACA;AACA;EACI,IAAIvF,KAAKA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACG,MAAM;EAAE;EAClC,IAAIH,KAAKA,CAACA,KAAK,EAAE;IACb,IAAI,CAACwF,UAAU,CAACxF,KAAK,CAAC;IACtB,IAAI,CAACG,MAAM,GAAGH,KAAK;EACvB;EACA;AACJ;AACA;AACA;EACI,IAAIyF,EAAEA,CAAA,EAAG;IACL,OAAO,IAAI,CAACC,UAAU,GAAG,IAAI,CAACA,UAAU,CAACD,EAAE,GAAG,IAAI,CAACvB,IAAI;EAC3D;EACA;AACJ;AACA;AACA;EACI,IAAIyB,QAAQA,CAAA,EAAG;IAAE,OAAO,IAAI,CAAChB,SAAS;EAAE;EACxC,IAAIgB,QAAQA,CAAC3F,KAAK,EAAE;IAChB,IAAI,CAAC2E,SAAS,GAAGpJ,qBAAqB,CAACyE,KAAK,CAAC;IAC7C,IAAI,CAAC4F,YAAY,CAACnE,IAAI,CAAC,CAAC;EAC5B;EACA;AACJ;AACA;AACA;EACI,IAAIoE,WAAWA,CAAA,EAAG;IACd,OAAO,IAAI,CAACH,UAAU,GAAG,IAAI,CAACA,UAAU,CAACG,WAAW,GAAG,IAAI,CAACC,YAAY;EAC5E;EACA,IAAID,WAAWA,CAAC7F,KAAK,EAAE;IACnB,IAAI,CAAC8F,YAAY,GAAG9F,KAAK;IACzB,IAAI,CAAC4F,YAAY,CAACnE,IAAI,CAAC,CAAC;EAC5B;EACA;EACA,IAAIsE,OAAOA,CAAA,EAAG;IACV,OAAQ,IAAI,CAACL,UAAU,IAAI,IAAI,CAACA,UAAU,CAACK,OAAO,IAAK,IAAI,CAACC,eAAe,CAAC,CAAC;EACjF;EACA;AACJ;AACA;AACA;EACI,IAAIb,KAAKA,CAAA,EAAG;IACR,OAAO,CAAC,CAAC,IAAI,CAACO,UAAU,IAAI,IAAI,CAACA,UAAU,CAACP,KAAK,MAAM,CAAC,IAAI,CAACc,KAAK,IAAI,IAAI,CAACA,KAAK,CAACC,MAAM,KAAK,CAAC,CAAC;EAClG;EACA;AACJ;AACA;AACA;EACI,IAAIC,gBAAgBA,CAAA,EAAG;IAAE,OAAO,CAAC,IAAI,CAAChB,KAAK,IAAI,IAAI,CAACY,OAAO;EAAE;EAC7D;AACJ;AACA;AACA;EACI,IAAIjG,QAAQA,CAAA,EAAG;IAAE,OAAO,IAAI,CAAC2D,SAAS,GAAG,CAAC,CAAC,IAAI,CAACA,SAAS,CAAC3D,QAAQ,GAAG,IAAI,CAACpB,SAAS;EAAE;EACrF,IAAIoB,QAAQA,CAACE,KAAK,EAAE;IAChB,IAAI,CAACtB,SAAS,GAAGnD,qBAAqB,CAACyE,KAAK,CAAC;IAC7C,IAAI,CAACoF,eAAe,CAAC,CAAC;EAC1B;EACA;AACJ;AACA;AACA;EACI,IAAI9E,UAAUA,CAAA,EAAG;IAAE,OAAO,IAAI,CAAC7B,WAAW;EAAE;EAC5C,IAAI6B,UAAUA,CAACN,KAAK,EAAE;IAClB,IAAI,CAACvB,WAAW,GAAGlD,qBAAqB,CAACyE,KAAK,CAAC;IAC/C,IAAI,IAAI,CAACiG,KAAK,EAAE;MACZ,IAAI,CAACA,KAAK,CAACG,OAAO,CAACnF,IAAI,IAAIA,IAAI,CAAC5C,kBAAkB,GAAG,IAAI,CAACI,WAAW,CAAC;IAC1E;EACJ;EACA,IAAIN,QAAQA,CAAC6B,KAAK,EAAE;IAChB,IAAI,CAACoE,aAAa,GAAGpE,KAAK;IAC1B,IAAI,CAACmE,SAAS,GAAGnE,KAAK;EAC1B;EACA;EACA,IAAIqG,oBAAoBA,CAAA,EAAG;IACvB,OAAOzK,KAAK,CAAC,GAAG,IAAI,CAACqK,KAAK,CAACK,GAAG,CAACrF,IAAI,IAAIA,IAAI,CAACnC,eAAe,CAAC,CAAC;EACjE;EACA;EACA,IAAIyH,gBAAgBA,CAAA,EAAG;IACnB,OAAO3K,KAAK,CAAC,GAAG,IAAI,CAACqK,KAAK,CAACK,GAAG,CAACrF,IAAI,IAAIA,IAAI,CAACrC,QAAQ,CAAC,CAAC;EAC1D;EACA;EACA,IAAI4H,eAAeA,CAAA,EAAG;IAClB,OAAO5K,KAAK,CAAC,GAAG,IAAI,CAACqK,KAAK,CAACK,GAAG,CAACrF,IAAI,IAAIA,IAAI,CAACpC,OAAO,CAAC,CAAC;EACzD;EACA;EACA,IAAI4H,iBAAiBA,CAAA,EAAG;IACpB,OAAO7K,KAAK,CAAC,GAAG,IAAI,CAACqK,KAAK,CAACK,GAAG,CAACrF,IAAI,IAAIA,IAAI,CAAClC,SAAS,CAAC,CAAC;EAC3D;EACA2H,kBAAkBA,CAAA,EAAG;IACjB,IAAI,CAACC,WAAW,GAAG,IAAI3K,eAAe,CAAC,IAAI,CAACiK,KAAK,CAAC,CAC7CW,QAAQ,CAAC,CAAC,CACVC,uBAAuB,CAAC,CAAC,CACzBC,cAAc,CAAC,CAAC,CAChBC,yBAAyB,CAAC,IAAI,CAACjD,IAAI,GAAG,IAAI,CAACA,IAAI,CAAC9D,KAAK,GAAG,KAAK,CAAC;IACnE,IAAI,IAAI,CAAC8D,IAAI,EAAE;MACX,IAAI,CAACA,IAAI,CAACe,MAAM,CACX1C,IAAI,CAACrG,SAAS,CAAC,IAAI,CAACmI,UAAU,CAAC,CAAC,CAChC7B,SAAS,CAAC4E,GAAG,IAAI,IAAI,CAACL,WAAW,CAACI,yBAAyB,CAACC,GAAG,CAAC,CAAC;IAC1E;IACA,IAAI,CAACL,WAAW,CAACM,MAAM,CAAC9E,IAAI,CAACrG,SAAS,CAAC,IAAI,CAACmI,UAAU,CAAC,CAAC,CAAC7B,SAAS,CAAC,MAAM;MACrE,IAAI,CAAC8E,iBAAiB,CAAC,CAAC;IAC5B,CAAC,CAAC;IACF;IACA,IAAI,CAACjB,KAAK,CAACkB,OAAO,CAAChF,IAAI,CAACpG,SAAS,CAAC,IAAI,CAAC,EAAED,SAAS,CAAC,IAAI,CAACmI,UAAU,CAAC,CAAC,CAAC7B,SAAS,CAAC,MAAM;MACjF,IAAI,IAAI,CAACtC,QAAQ,EAAE;QACf;QACA;QACAsH,OAAO,CAACC,OAAO,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM;UACzB,IAAI,CAAClC,eAAe,CAAC,CAAC;QAC1B,CAAC,CAAC;MACN;MACA,IAAI,CAACmC,WAAW,CAAC,CAAC;MAClB;MACA,IAAI,CAAChC,oBAAoB,CAAC,CAAC;MAC3B;MACA,IAAI,CAACiC,eAAe,CAAC,CAAC;MACtB;MACA,IAAI,CAACC,6BAA6B,CAAC,CAAC;MACpC,IAAI,CAAC7B,YAAY,CAACnE,IAAI,CAAC,CAAC;IAC5B,CAAC,CAAC;EACN;EACAiG,QAAQA,CAAA,EAAG;IACP,IAAI,CAACzC,eAAe,GAAG,IAAI/I,cAAc,CAAC,IAAI,CAAC8I,QAAQ,EAAE5E,SAAS,EAAE,KAAK,CAAC;IAC1E,IAAI,CAACwF,YAAY,CAACnE,IAAI,CAAC,CAAC;EAC5B;EACAkG,SAASA,CAAA,EAAG;IACR,IAAI,IAAI,CAAClE,SAAS,EAAE;MAChB;MACA;MACA;MACA,IAAI,CAACmE,gBAAgB,CAAC,CAAC;MACvB,IAAI,IAAI,CAACnE,SAAS,CAAC3D,QAAQ,KAAK,IAAI,CAACpB,SAAS,EAAE;QAC5C,IAAI,CAACoB,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC2D,SAAS,CAAC3D,QAAQ;MAC7C;IACJ;EACJ;EACAiB,WAAWA,CAAA,EAAG;IACV,IAAI,CAACkD,UAAU,CAACxC,IAAI,CAAC,CAAC;IACtB,IAAI,CAACwC,UAAU,CAAC4D,QAAQ,CAAC,CAAC;IAC1B,IAAI,CAACjC,YAAY,CAACiC,QAAQ,CAAC,CAAC;IAC5B,IAAI,CAACC,kBAAkB,CAAC,CAAC;EAC7B;EACA;EACAC,aAAaA,CAACC,YAAY,EAAE;IACxB,IAAI,CAACtC,UAAU,GAAGsC,YAAY;IAC9B;IACA;IACA,IAAI,CAAChL,WAAW,CAACsC,aAAa,CAAC4D,YAAY,CAAC,qBAAqB,EAAE8E,YAAY,CAACvC,EAAE,CAAC;EACvF;EACA;AACJ;AACA;AACA;EACIwC,iBAAiBA,CAACC,GAAG,EAAE;IAAE,IAAI,CAACC,gBAAgB,GAAGD,GAAG,CAACE,IAAI,CAAC,GAAG,CAAC;EAAE;EAChE;EACA5C,UAAUA,CAACxF,KAAK,EAAE;IACd,IAAI,IAAI,CAACiG,KAAK,EAAE;MACZ,IAAI,CAACoC,oBAAoB,CAACrI,KAAK,EAAE,KAAK,CAAC;IAC3C;EACJ;EACA;EACAsI,gBAAgBA,CAAChD,EAAE,EAAE;IACjB,IAAI,CAAChB,SAAS,GAAGgB,EAAE;EACvB;EACA;EACAiD,iBAAiBA,CAACjD,EAAE,EAAE;IAClB,IAAI,CAACjB,UAAU,GAAGiB,EAAE;EACxB;EACA;EACAkD,gBAAgBA,CAACC,UAAU,EAAE;IACzB,IAAI,CAAC3I,QAAQ,GAAG2I,UAAU;IAC1B,IAAI,CAAC7C,YAAY,CAACnE,IAAI,CAAC,CAAC;EAC5B;EACA;AACJ;AACA;AACA;EACIiH,gBAAgBA,CAAC9G,KAAK,EAAE;IACpB,IAAI,CAAC,IAAI,CAAC+G,mBAAmB,CAAC/G,KAAK,CAAC,EAAE;MAClC,IAAI,CAACJ,KAAK,CAAC,CAAC;IAChB;EACJ;EACA;AACJ;AACA;AACA;EACIA,KAAKA,CAACoH,OAAO,EAAE;IACX,IAAI,IAAI,CAAC9I,QAAQ,EAAE;MACf;IACJ;IACA;IACA;IACA,IAAI,IAAI,CAAC4F,UAAU,IAAI,IAAI,CAACA,UAAU,CAACK,OAAO,EAAE;MAC5C;IAAA,CACH,MACI,IAAI,IAAI,CAACE,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;MAC5B,IAAI,CAACS,WAAW,CAACkC,kBAAkB,CAAC,CAAC;MACrC,IAAI,CAACjD,YAAY,CAACnE,IAAI,CAAC,CAAC;IAC5B,CAAC,MACI;MACD,IAAI,CAACqH,WAAW,CAACF,OAAO,CAAC;MACzB,IAAI,CAAChD,YAAY,CAACnE,IAAI,CAAC,CAAC;IAC5B;EACJ;EACA;EACAqH,WAAWA,CAACF,OAAO,EAAE;IACjB,IAAI,IAAI,CAAClD,UAAU,EAAE;MACjB,IAAI,CAACA,UAAU,CAAClE,KAAK,CAACoH,OAAO,CAAC;IAClC;EACJ;EACA;AACJ;AACA;EACIG,QAAQA,CAACnH,KAAK,EAAE;IACZ,MAAMoH,MAAM,GAAGpH,KAAK,CAACoH,MAAM;IAC3B,IAAIA,MAAM,IAAIA,MAAM,CAAC5J,SAAS,CAAC6J,QAAQ,CAAC,UAAU,CAAC,EAAE;MACjD,IAAI,CAACtC,WAAW,CAACuC,SAAS,CAACtH,KAAK,CAAC;MACjC,IAAI,CAACgE,YAAY,CAACnE,IAAI,CAAC,CAAC;IAC5B;EACJ;EACA;AACJ;AACA;EACI+F,eAAeA,CAAA,EAAG;IACd;IACA,IAAI,CAACrD,SAAS,GAAG,IAAI,CAACC,aAAa,KAAK,IAAI,CAAC6B,KAAK,CAACC,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;EAC7E;EACA;AACJ;AACA;AACA;EACIuB,6BAA6BA,CAAA,EAAG;IAC5B;IACA,IAAI,IAAI,CAACzD,uBAAuB,IAAI,IAAI,EAAE;MACtC,IAAI,IAAI,CAACiC,KAAK,CAACC,MAAM,EAAE;QACnB,MAAMiD,YAAY,GAAGC,IAAI,CAACC,GAAG,CAAC,IAAI,CAACrF,uBAAuB,EAAE,IAAI,CAACiC,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC;QAClF,IAAI,CAACS,WAAW,CAAC2C,aAAa,CAACH,YAAY,CAAC;MAChD,CAAC,MACI;QACD,IAAI,CAAC3H,KAAK,CAAC,CAAC;MAChB;IACJ;IACA,IAAI,CAACwC,uBAAuB,GAAG,IAAI;EACvC;EACA;AACJ;AACA;AACA;AACA;AACA;EACIuF,aAAaA,CAACC,KAAK,EAAE;IACjB,OAAOA,KAAK,IAAI,CAAC,IAAIA,KAAK,GAAG,IAAI,CAACvD,KAAK,CAACC,MAAM;EAClD;EACAmC,oBAAoBA,CAACrI,KAAK,EAAErD,WAAW,GAAG,IAAI,EAAE;IAC5C,IAAI,CAAC8M,eAAe,CAAC,CAAC;IACtB,IAAI,CAACxD,KAAK,CAACG,OAAO,CAACnF,IAAI,IAAIA,IAAI,CAACI,QAAQ,CAAC,CAAC,CAAC;IAC3C,IAAIqI,KAAK,CAACC,OAAO,CAAC3J,KAAK,CAAC,EAAE;MACtBA,KAAK,CAACoG,OAAO,CAACwD,YAAY,IAAI,IAAI,CAACC,YAAY,CAACD,YAAY,EAAEjN,WAAW,CAAC,CAAC;MAC3E,IAAI,CAACmN,WAAW,CAAC,CAAC;IACtB,CAAC,MACI;MACD,MAAMC,iBAAiB,GAAG,IAAI,CAACF,YAAY,CAAC7J,KAAK,EAAErD,WAAW,CAAC;MAC/D;MACA;MACA,IAAIoN,iBAAiB,EAAE;QACnB,IAAIpN,WAAW,EAAE;UACb,IAAI,CAACgK,WAAW,CAAC2C,aAAa,CAACS,iBAAiB,CAAC;QACrD;MACJ;IACJ;EACJ;EACA;AACJ;AACA;AACA;EACIF,YAAYA,CAAC7J,KAAK,EAAErD,WAAW,GAAG,IAAI,EAAE;IACpC,MAAMoN,iBAAiB,GAAG,IAAI,CAAC9D,KAAK,CAAC+D,IAAI,CAAC/I,IAAI,IAAI;MAC9C,OAAOA,IAAI,CAACjB,KAAK,IAAI,IAAI,IAAI,IAAI,CAACwE,YAAY,CAACvD,IAAI,CAACjB,KAAK,EAAEA,KAAK,CAAC;IACrE,CAAC,CAAC;IACF,IAAI+J,iBAAiB,EAAE;MACnBpN,WAAW,GAAGoN,iBAAiB,CAACzI,oBAAoB,CAAC,CAAC,GAAGyI,iBAAiB,CAAC5I,MAAM,CAAC,CAAC;MACnF,IAAI,CAAC8D,eAAe,CAAC9D,MAAM,CAAC4I,iBAAiB,CAAC;IAClD;IACA,OAAOA,iBAAiB;EAC5B;EACAxE,oBAAoBA,CAAA,EAAG;IACnB;IACA;IACA6B,OAAO,CAACC,OAAO,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM;MACzB,IAAI,IAAI,CAAC7D,SAAS,IAAI,IAAI,CAACtD,MAAM,EAAE;QAC/B,IAAI,CAACkI,oBAAoB,CAAC,IAAI,CAAC5E,SAAS,GAAG,IAAI,CAACA,SAAS,CAACzD,KAAK,GAAG,IAAI,CAACG,MAAM,EAAE,KAAK,CAAC;QACrF,IAAI,CAACyF,YAAY,CAACnE,IAAI,CAAC,CAAC;MAC5B;IACJ,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;EACIgI,eAAeA,CAACQ,IAAI,EAAE;IAClB,IAAI,CAAChF,eAAe,CAACiF,KAAK,CAAC,CAAC;IAC5B,IAAI,CAACjE,KAAK,CAACG,OAAO,CAACnF,IAAI,IAAI;MACvB,IAAIA,IAAI,KAAKgJ,IAAI,EAAE;QACfhJ,IAAI,CAACI,QAAQ,CAAC,CAAC;MACnB;IACJ,CAAC,CAAC;IACF,IAAI,CAACuE,YAAY,CAACnE,IAAI,CAAC,CAAC;EAC5B;EACA;AACJ;AACA;AACA;EACIqI,WAAWA,CAAA,EAAG;IACV,IAAI,IAAI,CAACvF,SAAS,EAAE;MAChB,IAAI,CAACU,eAAe,CAACiF,KAAK,CAAC,CAAC;MAC5B,IAAI,CAACjE,KAAK,CAACG,OAAO,CAACnF,IAAI,IAAI;QACvB,IAAIA,IAAI,CAACvE,QAAQ,EAAE;UACf,IAAI,CAACuI,eAAe,CAAC9D,MAAM,CAACF,IAAI,CAAC;QACrC;MACJ,CAAC,CAAC;MACF,IAAI,CAAC2E,YAAY,CAACnE,IAAI,CAAC,CAAC;IAC5B;EACJ;EACA;EACA0I,iBAAiBA,CAACC,aAAa,EAAE;IAC7B,IAAIC,WAAW,GAAG,IAAI;IACtB,IAAIX,KAAK,CAACC,OAAO,CAAC,IAAI,CAACjN,QAAQ,CAAC,EAAE;MAC9B2N,WAAW,GAAG,IAAI,CAAC3N,QAAQ,CAAC4J,GAAG,CAACrF,IAAI,IAAIA,IAAI,CAACjB,KAAK,CAAC;IACvD,CAAC,MACI;MACDqK,WAAW,GAAG,IAAI,CAAC3N,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACsD,KAAK,GAAGoK,aAAa;IACrE;IACA,IAAI,CAACjK,MAAM,GAAGkK,WAAW;IACzB,IAAI,CAACxF,MAAM,CAAC7D,IAAI,CAAC,IAAI4C,iBAAiB,CAAC,IAAI,EAAEyG,WAAW,CAAC,CAAC;IAC1D,IAAI,CAACvF,WAAW,CAAC9D,IAAI,CAACqJ,WAAW,CAAC;IAClC,IAAI,CAAC/F,SAAS,CAAC+F,WAAW,CAAC;IAC3B,IAAI,CAACrM,kBAAkB,CAACoD,YAAY,CAAC,CAAC;EAC1C;EACA;EACAa,KAAKA,CAAA,EAAG;IACJ,IAAI,CAAC,IAAI,CAAC+D,eAAe,CAAC,CAAC,EAAE;MACzB,IAAI,CAACW,WAAW,CAAC2C,aAAa,CAAC,CAAC,CAAC,CAAC;IACtC;IACA,IAAI,CAAC,IAAI,CAACxJ,QAAQ,EAAE;MAChB,IAAI,IAAI,CAAC4F,UAAU,EAAE;QACjB;QACA;QACA;QACA;QACA4E,UAAU,CAAC,MAAM;UACb,IAAI,CAAC,IAAI,CAACvE,OAAO,EAAE;YACf,IAAI,CAACwE,cAAc,CAAC,CAAC;UACzB;QACJ,CAAC,CAAC;MACN,CAAC,MACI;QACD;QACA,IAAI,CAACA,cAAc,CAAC,CAAC;MACzB;IACJ;EACJ;EACA;EACAA,cAAcA,CAAA,EAAG;IACb,IAAI,CAAClG,UAAU,CAAC,CAAC;IACjB,IAAI,CAACrG,kBAAkB,CAACoD,YAAY,CAAC,CAAC;IACtC,IAAI,CAACwE,YAAY,CAACnE,IAAI,CAAC,CAAC;EAC5B;EACA;AACJ;AACA;AACA;AACA;EACIyF,iBAAiBA,CAAA,EAAG;IAChB,IAAI,IAAI,CAAC/C,SAAS,KAAK,CAAC,CAAC,EAAE;MACvB,IAAI,CAACA,SAAS,GAAG,CAAC,CAAC;MACnBmG,UAAU,CAAC,MAAM;QACb,IAAI,CAACnG,SAAS,GAAG,IAAI,CAACC,aAAa,IAAI,CAAC;QACxC,IAAI,CAACpG,kBAAkB,CAACoD,YAAY,CAAC,CAAC;MAC1C,CAAC,CAAC;IACN;EACJ;EACAmG,WAAWA,CAAA,EAAG;IACV,IAAI,CAACO,kBAAkB,CAAC,CAAC;IACzB,IAAI,CAAC0C,mBAAmB,CAAC,CAAC;IAC1B,IAAI,CAACC,uBAAuB,CAAC,CAAC;IAC9B,IAAI,CAACC,qBAAqB,CAAC,CAAC;EAChC;EACA5C,kBAAkBA,CAAA,EAAG;IACjB,IAAI,IAAI,CAAC6C,sBAAsB,EAAE;MAC7B,IAAI,CAACA,sBAAsB,CAACC,WAAW,CAAC,CAAC;MACzC,IAAI,CAACD,sBAAsB,GAAG,IAAI;IACtC;IACA,IAAI,IAAI,CAACE,qBAAqB,EAAE;MAC5B,IAAI,CAACA,qBAAqB,CAACD,WAAW,CAAC,CAAC;MACxC,IAAI,CAACC,qBAAqB,GAAG,IAAI;IACrC;IACA,IAAI,IAAI,CAACC,0BAA0B,EAAE;MACjC,IAAI,CAACA,0BAA0B,CAACF,WAAW,CAAC,CAAC;MAC7C,IAAI,CAACE,0BAA0B,GAAG,IAAI;IAC1C;IACA,IAAI,IAAI,CAACC,uBAAuB,EAAE;MAC9B,IAAI,CAACA,uBAAuB,CAACH,WAAW,CAAC,CAAC;MAC1C,IAAI,CAACG,uBAAuB,GAAG,IAAI;IACvC;EACJ;EACA;EACAN,uBAAuBA,CAAA,EAAG;IACtB,IAAI,CAACK,0BAA0B,GAAG,IAAI,CAACzE,oBAAoB,CAACjE,SAAS,CAACR,KAAK,IAAI;MAC3EA,KAAK,CAACnF,MAAM,CAACC,QAAQ,GACf,IAAI,CAACuI,eAAe,CAAC9D,MAAM,CAACS,KAAK,CAACnF,MAAM,CAAC,GACzC,IAAI,CAACwI,eAAe,CAAC5D,QAAQ,CAACO,KAAK,CAACnF,MAAM,CAAC;MACjD;MACA,IAAI,CAAC,IAAI,CAACuI,QAAQ,EAAE;QAChB,IAAI,CAACiB,KAAK,CAACG,OAAO,CAACnF,IAAI,IAAI;UACvB,IAAI,CAAC,IAAI,CAACgE,eAAe,CAAC+F,UAAU,CAAC/J,IAAI,CAAC,IAAIA,IAAI,CAACvE,QAAQ,EAAE;YACzDuE,IAAI,CAACI,QAAQ,CAAC,CAAC;UACnB;QACJ,CAAC,CAAC;MACN;MACA,IAAIO,KAAK,CAACjF,WAAW,EAAE;QACnB,IAAI,CAACwN,iBAAiB,CAAC,CAAC;MAC5B;IACJ,CAAC,CAAC;EACN;EACA;EACAK,mBAAmBA,CAAA,EAAG;IAClB,IAAI,CAACG,sBAAsB,GAAG,IAAI,CAACpE,gBAAgB,CAACnE,SAAS,CAACR,KAAK,IAAI;MACnE,IAAIqJ,SAAS,GAAG,IAAI,CAAChF,KAAK,CAACiF,OAAO,CAAC,CAAC,CAACC,OAAO,CAACvJ,KAAK,CAACX,IAAI,CAAC;MACxD,IAAI,IAAI,CAACsI,aAAa,CAAC0B,SAAS,CAAC,EAAE;QAC/B,IAAI,CAACtE,WAAW,CAACyE,gBAAgB,CAACH,SAAS,CAAC;MAChD;MACA,IAAI,CAACrF,YAAY,CAACnE,IAAI,CAAC,CAAC;IAC5B,CAAC,CAAC;IACF,IAAI,CAACoJ,qBAAqB,GAAG,IAAI,CAACrE,eAAe,CAACpE,SAAS,CAAC,MAAM;MAC9D,IAAI,CAACH,KAAK,CAAC,CAAC;MACZ,IAAI,CAAC2D,YAAY,CAACnE,IAAI,CAAC,CAAC;IAC5B,CAAC,CAAC;EACN;EACAiJ,qBAAqBA,CAAA,EAAG;IACpB,IAAI,CAACK,uBAAuB,GAAG,IAAI,CAACtE,iBAAiB,CAACrE,SAAS,CAACR,KAAK,IAAI;MACrE,MAAMX,IAAI,GAAGW,KAAK,CAACX,IAAI;MACvB,MAAMgK,SAAS,GAAG,IAAI,CAAChF,KAAK,CAACiF,OAAO,CAAC,CAAC,CAACC,OAAO,CAACvJ,KAAK,CAACX,IAAI,CAAC;MAC1D;MACA;MACA;MACA,IAAI,IAAI,CAACsI,aAAa,CAAC0B,SAAS,CAAC,IAAIhK,IAAI,CAAC7C,SAAS,EAAE;QACjD,IAAI,CAAC4F,uBAAuB,GAAGiH,SAAS;MAC5C;IACJ,CAAC,CAAC;EACN;EACA;EACAtC,mBAAmBA,CAAC/G,KAAK,EAAE;IACvB,IAAIyJ,cAAc,GAAGzJ,KAAK,CAACoH,MAAM;IACjC,OAAOqC,cAAc,IAAIA,cAAc,KAAK,IAAI,CAACrO,WAAW,CAACsC,aAAa,EAAE;MACxE,IAAI+L,cAAc,CAACjM,SAAS,CAAC6J,QAAQ,CAAC,UAAU,CAAC,EAAE;QAC/C,OAAO,IAAI;MACf;MACAoC,cAAc,GAAGA,cAAc,CAACC,aAAa;IACjD;IACA,OAAO,KAAK;EAChB;EACA;EACAtF,eAAeA,CAAA,EAAG;IACd,OAAO,IAAI,CAACC,KAAK,IAAI,IAAI,CAACA,KAAK,CAACsF,IAAI,CAACtK,IAAI,IAAIA,IAAI,CAAC7C,SAAS,CAAC;EAChE;EACA;EACAgH,eAAeA,CAAA,EAAG;IACd,IAAI,IAAI,CAACa,KAAK,EAAE;MACZ,IAAI,CAACA,KAAK,CAACG,OAAO,CAACnF,IAAI,IAAI;QACvBA,IAAI,CAAC1C,iBAAiB,GAAG,IAAI,CAACG,SAAS;QACvCuC,IAAI,CAAC3C,iBAAiB,GAAG,IAAI,CAAC0G,QAAQ;MAC1C,CAAC,CAAC;IACN;EACJ;AACJ;AACAnB,WAAW,CAAC1G,UAAU,GAAG,CACrB;EAAEC,IAAI,EAAE3C,SAAS;EAAE4C,IAAI,EAAE,CAAC;IACdC,QAAQ,EAAE,eAAe;IACzBkO,QAAQ,EAAG,oEAAmE;IAC9EjJ,QAAQ,EAAE,aAAa;IACvBhF,IAAI,EAAE;MACF,iBAAiB,EAAE,6BAA6B;MAChD,yBAAyB,EAAE,0BAA0B;MACrD,sBAAsB,EAAE,wBAAwB;MAChD,sBAAsB,EAAE,qBAAqB;MAC7C,qBAAqB,EAAE,YAAY;MACnC,6BAA6B,EAAE,UAAU;MACzC,aAAa,EAAE,MAAM;MACrB,gCAAgC,EAAE,UAAU;MAC5C,+BAA+B,EAAE,YAAY;MAC7C,gCAAgC,EAAE,UAAU;MAC5C,yBAAyB,EAAE,iBAAiB;MAC5C,OAAO,EAAE,eAAe;MACxB,SAAS,EAAE,SAAS;MACpB,QAAQ,EAAE,SAAS;MACnB,WAAW,EAAE,kBAAkB;MAC/B,MAAM,EAAE;IACZ,CAAC;IACDC,SAAS,EAAE,CAAC;MAAEC,OAAO,EAAEnB,mBAAmB;MAAEoB,WAAW,EAAEmG;IAAY,CAAC,CAAC;IACvE4H,aAAa,EAAE/Q,iBAAiB,CAACgR,IAAI;IACrCC,eAAe,EAAEhR,uBAAuB,CAACiR,MAAM;IAC/CC,MAAM,EAAE,CAAC,6/FAA6/F;EAC1gG,CAAC;AAAG,CAAC,CAChB;AACDhI,WAAW,CAACrB,cAAc,GAAG,MAAM,CAC/B;EAAEpF,IAAI,EAAEpD;AAAW,CAAC,EACpB;EAAEoD,IAAI,EAAEhD;AAAkB,CAAC,EAC3B;EAAEgD,IAAI,EAAEnB,cAAc;EAAEkB,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAElD;EAAS,CAAC;AAAE,CAAC,EAC1D;EAAEkD,IAAI,EAAEjB,MAAM;EAAEgB,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAElD;EAAS,CAAC;AAAE,CAAC,EAClD;EAAEkD,IAAI,EAAEhB,kBAAkB;EAAEe,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAElD;EAAS,CAAC;AAAE,CAAC,EAC9D;EAAEkD,IAAI,EAAE/B;AAAkB,CAAC,EAC3B;EAAE+B,IAAI,EAAEf,SAAS;EAAEc,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAElD;EAAS,CAAC,EAAE;IAAEkD,IAAI,EAAExC;EAAK,CAAC;AAAE,CAAC,CACxE;AACDiJ,WAAW,CAACnB,cAAc,GAAG;EACzBoJ,iBAAiB,EAAE,CAAC;IAAE1O,IAAI,EAAE7C;EAAM,CAAC,CAAC;EACpCyK,QAAQ,EAAE,CAAC;IAAE5H,IAAI,EAAE7C;EAAM,CAAC,CAAC;EAC3B8K,WAAW,EAAE,CAAC;IAAEjI,IAAI,EAAE7C;EAAM,CAAC,CAAC;EAC9ByF,KAAK,EAAE,CAAC;IAAE5C,IAAI,EAAE7C;EAAM,CAAC,CAAC;EACxBoL,QAAQ,EAAE,CAAC;IAAEvI,IAAI,EAAE7C;EAAM,CAAC,CAAC;EAC3BsL,WAAW,EAAE,CAAC;IAAEzI,IAAI,EAAE7C;EAAM,CAAC,CAAC;EAC9BuF,QAAQ,EAAE,CAAC;IAAE1C,IAAI,EAAE7C;EAAM,CAAC,CAAC;EAC3BqK,eAAe,EAAE,CAAC;IAAExH,IAAI,EAAE7C,KAAK;IAAE8C,IAAI,EAAE,CAAC,kBAAkB;EAAG,CAAC,CAAC;EAC/DiD,UAAU,EAAE,CAAC;IAAElD,IAAI,EAAE7C;EAAM,CAAC,CAAC;EAC7B4D,QAAQ,EAAE,CAAC;IAAEf,IAAI,EAAE7C;EAAM,CAAC,CAAC;EAC3BsK,MAAM,EAAE,CAAC;IAAEzH,IAAI,EAAE5C;EAAO,CAAC,CAAC;EAC1BsK,WAAW,EAAE,CAAC;IAAE1H,IAAI,EAAE5C;EAAO,CAAC,CAAC;EAC/ByL,KAAK,EAAE,CAAC;IAAE7I,IAAI,EAAEvC,eAAe;IAAEwC,IAAI,EAAE,CAACO,OAAO,EAAE;MACjC;MACA;MACAmO,WAAW,EAAE;IACjB,CAAC;EAAG,CAAC;AACrB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,YAAY,GAAG,CAAC;AACpB;AACA;AACA;AACA;AACA,MAAMC,YAAY,CAAC;EACfzP,WAAWA,CAACQ,WAAW,EAAEkP,eAAe,EAAE;IACtC,IAAI,CAAClP,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACkP,eAAe,GAAGA,eAAe;IACtC;IACA,IAAI,CAACnG,OAAO,GAAG,KAAK;IACpB,IAAI,CAACoG,UAAU,GAAG,KAAK;IACvB;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,iBAAiB,GAAG,IAAI,CAACF,eAAe,CAACE,iBAAiB;IAC/D;IACA,IAAI,CAACC,OAAO,GAAG,IAAItS,YAAY,CAAC,CAAC;IACjC;IACA,IAAI,CAAC8L,WAAW,GAAG,EAAE;IACrB;IACA,IAAI,CAACJ,EAAE,GAAI,uBAAsBuG,YAAY,EAAG,EAAC;IACjD,IAAI,CAACtN,SAAS,GAAG,KAAK;IACtB,IAAI,CAACsJ,YAAY,GAAG,IAAI,CAAChL,WAAW,CAACsC,aAAa;EACtD;EACA;EACA,IAAIgN,QAAQA,CAACtM,KAAK,EAAE;IAChB,IAAIA,KAAK,EAAE;MACP,IAAI,CAACuM,SAAS,GAAGvM,KAAK;MACtB,IAAI,CAACuM,SAAS,CAACxE,aAAa,CAAC,IAAI,CAAC;IACtC;EACJ;EACA;AACJ;AACA;EACI,IAAIyE,SAASA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACL,UAAU;EAAE;EAC1C,IAAIK,SAASA,CAACxM,KAAK,EAAE;IAAE,IAAI,CAACmM,UAAU,GAAG5Q,qBAAqB,CAACyE,KAAK,CAAC;EAAE;EACvE;EACA,IAAIF,QAAQA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACpB,SAAS,IAAK,IAAI,CAAC6N,SAAS,IAAI,IAAI,CAACA,SAAS,CAACzM,QAAS;EAAE;EACvF,IAAIA,QAAQA,CAACE,KAAK,EAAE;IAAE,IAAI,CAACtB,SAAS,GAAGnD,qBAAqB,CAACyE,KAAK,CAAC;EAAE;EACrE;EACA,IAAImF,KAAKA,CAAA,EAAG;IAAE,OAAO,CAAC,IAAI,CAAC6C,YAAY,CAAChI,KAAK;EAAE;EAC/CyM,WAAWA,CAAA,EAAG;IACV,IAAI,CAACF,SAAS,CAAC3G,YAAY,CAACnE,IAAI,CAAC,CAAC;EACtC;EACAV,WAAWA,CAAA,EAAG;IACV,IAAI,CAACsL,OAAO,CAACxE,QAAQ,CAAC,CAAC;EAC3B;EACAnB,kBAAkBA,CAAA,EAAG;IACjB,IAAI,CAACgG,yBAAyB,GAAG,IAAI,CAACvH,KAAK;EAC/C;EACA;EACA4D,QAAQA,CAACnH,KAAK,EAAE;IACZ,IAAIA,KAAK,EAAE;MACP;MACA;MACA,IAAIA,KAAK,CAACI,OAAO,KAAKtI,GAAG,IAAI,CAACC,cAAc,CAACiI,KAAK,EAAE,UAAU,CAAC,EAAE;QAC7D,IAAI,CAAC2K,SAAS,CAACrF,iBAAiB,CAAC,CAAC;MACtC;MACA;MACA;MACA;MACA,IAAItF,KAAK,CAACI,OAAO,KAAKxI,SAAS,IAAI,IAAI,CAACkT,yBAAyB,EAAE;QAC/D,IAAI,CAACH,SAAS,CAAC5F,WAAW,CAACgG,iBAAiB,CAAC,CAAC;QAC9C/K,KAAK,CAACC,cAAc,CAAC,CAAC;QACtB;MACJ,CAAC,MACI;QACD,IAAI,CAAC6K,yBAAyB,GAAG,KAAK;MAC1C;IACJ;IACA,IAAI,CAACE,YAAY,CAAChL,KAAK,CAAC;EAC5B;EACA;AACJ;AACA;EACIiL,MAAMA,CAACjL,KAAK,EAAE;IACV;IACA,IAAI,CAAC,IAAI,CAAC8K,yBAAyB,IAAI9K,KAAK,CAACI,OAAO,KAAKxI,SAAS,IAAI,IAAI,CAAC2L,KAAK,EAAE;MAC9E,IAAI,CAACuH,yBAAyB,GAAG,IAAI;MACrC9K,KAAK,CAACC,cAAc,CAAC,CAAC;IAC1B;EACJ;EACA;EACAI,KAAKA,CAAA,EAAG;IACJ,IAAI,IAAI,CAACuK,SAAS,EAAE;MAChB,IAAI,CAACI,YAAY,CAAC,CAAC;IACvB;IACA,IAAI,CAAC7G,OAAO,GAAG,KAAK;IACpB;IACA,IAAI,CAAC,IAAI,CAACwG,SAAS,CAACxG,OAAO,EAAE;MACzB,IAAI,CAACwG,SAAS,CAACtK,KAAK,CAAC,CAAC;IAC1B;IACA,IAAI,CAACsK,SAAS,CAAC3G,YAAY,CAACnE,IAAI,CAAC,CAAC;EACtC;EACAqL,MAAMA,CAAA,EAAG;IACL,IAAI,CAAC/G,OAAO,GAAG,IAAI;IACnB,IAAI,CAACwG,SAAS,CAAC3G,YAAY,CAACnE,IAAI,CAAC,CAAC;EACtC;EACA;EACAmL,YAAYA,CAAChL,KAAK,EAAE;IAChB,IAAI,CAAC,IAAI,CAACoG,YAAY,CAAChI,KAAK,IAAI,CAAC,CAAC4B,KAAK,EAAE;MACrC,IAAI,CAAC2K,SAAS,CAACxD,QAAQ,CAACnH,KAAK,CAAC;IAClC;IACA,IAAI,CAACA,KAAK,IAAI,IAAI,CAACmL,eAAe,CAACnL,KAAK,CAAC,EAAE;MACvC,IAAI,CAACyK,OAAO,CAACrL,IAAI,CAAC;QACdgM,KAAK,EAAE,IAAI,CAAChF,YAAY;QACxBhI,KAAK,EAAE,IAAI,CAACgI,YAAY,CAAChI,KAAK;QAC9BiN,SAAS,EAAE;MACf,CAAC,CAAC;MACFrL,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,KAAK,CAACC,cAAc,CAAC,CAAC;IACxE;EACJ;EACAqL,QAAQA,CAAA,EAAG;IACP;IACA,IAAI,CAACX,SAAS,CAAC3G,YAAY,CAACnE,IAAI,CAAC,CAAC;EACtC;EACA;EACAD,KAAKA,CAACoH,OAAO,EAAE;IACX,IAAI,CAACZ,YAAY,CAACxG,KAAK,CAACoH,OAAO,CAAC;EACpC;EACA;EACAsB,KAAKA,CAAA,EAAG;IACJ,IAAI,CAAClC,YAAY,CAAChI,KAAK,GAAG,EAAE;IAC5B,IAAI,CAAC0M,yBAAyB,GAAG,IAAI;EACzC;EACA;EACAK,eAAeA,CAACnL,KAAK,EAAE;IACnB,OAAO,CAACjI,cAAc,CAACiI,KAAK,CAAC,IAAI,IAAIuL,GAAG,CAAC,IAAI,CAACf,iBAAiB,CAAC,CAACgB,GAAG,CAACxL,KAAK,CAACI,OAAO,CAAC;EACvF;AACJ;AACAiK,YAAY,CAAC9O,UAAU,GAAG,CACtB;EAAEC,IAAI,EAAEtD,SAAS;EAAEuD,IAAI,EAAE,CAAC;IACdC,QAAQ,EAAE,wBAAwB;IAClCiF,QAAQ,EAAE,+BAA+B;IACzChF,IAAI,EAAE;MACF,OAAO,EAAE,kCAAkC;MAC3C,WAAW,EAAE,kBAAkB;MAC/B,SAAS,EAAE,gBAAgB;MAC3B,QAAQ,EAAE,SAAS;MACnB,SAAS,EAAE,UAAU;MACrB,SAAS,EAAE,YAAY;MACvB,MAAM,EAAE,IAAI;MACZ,iBAAiB,EAAE,kBAAkB;MACrC,oBAAoB,EAAE,qBAAqB;MAC3C,qBAAqB,EAAE,uEAAuE;MAC9F,sBAAsB,EAAE;IAC5B;EACJ,CAAC;AAAG,CAAC,CAChB;AACD0O,YAAY,CAACzJ,cAAc,GAAG,MAAM,CAChC;EAAEpF,IAAI,EAAEpD;AAAW,CAAC,EACpB;EAAEoD,IAAI,EAAEgD,SAAS;EAAEjD,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAEjD,MAAM;IAAEkD,IAAI,EAAE,CAAC+F,yBAAyB;EAAG,CAAC;AAAE,CAAC,CAC1F;AACD6I,YAAY,CAACvJ,cAAc,GAAG;EAC1B4J,QAAQ,EAAE,CAAC;IAAElP,IAAI,EAAE7C,KAAK;IAAE8C,IAAI,EAAE,CAAC,iBAAiB;EAAG,CAAC,CAAC;EACvDmP,SAAS,EAAE,CAAC;IAAEpP,IAAI,EAAE7C,KAAK;IAAE8C,IAAI,EAAE,CAAC,uBAAuB;EAAG,CAAC,CAAC;EAC9D+O,iBAAiB,EAAE,CAAC;IAAEhP,IAAI,EAAE7C,KAAK;IAAE8C,IAAI,EAAE,CAAC,+BAA+B;EAAG,CAAC,CAAC;EAC9EgP,OAAO,EAAE,CAAC;IAAEjP,IAAI,EAAE5C,MAAM;IAAE6C,IAAI,EAAE,CAAC,sBAAsB;EAAG,CAAC,CAAC;EAC5DwI,WAAW,EAAE,CAAC;IAAEzI,IAAI,EAAE7C;EAAM,CAAC,CAAC;EAC9BkL,EAAE,EAAE,CAAC;IAAErI,IAAI,EAAE7C;EAAM,CAAC,CAAC;EACrBuF,QAAQ,EAAE,CAAC;IAAE1C,IAAI,EAAE7C;EAAM,CAAC;AAC9B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM8S,iBAAiB,GAAG,CACtBxJ,WAAW,EACXjG,OAAO,EACPqO,YAAY,EACZnJ,aAAa,EACb5F,aAAa,EACbS,mBAAmB,CACtB;AACD,MAAM2P,EAAE,GAAG;EACPlB,iBAAiB,EAAE,CAACxS,KAAK;AAC7B,CAAC;AACD,MAAM2T,cAAc,CAAC;AAErBA,cAAc,CAACpQ,UAAU,GAAG,CACxB;EAAEC,IAAI,EAAEtC,QAAQ;EAAEuC,IAAI,EAAE,CAAC;IACbmQ,OAAO,EAAE,CAAClS,eAAe,CAAC;IAC1BmS,OAAO,EAAEJ,iBAAiB;IAC1BK,YAAY,EAAEL,iBAAiB;IAC/B7P,SAAS,EAAE,CACPnC,iBAAiB,EACjB;MACIoC,OAAO,EAAE2F,yBAAyB;MAClCuK,QAAQ,EAAEL;IACd,CAAC;EAET,CAAC;AAAG,CAAC,CAChB;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SAASlK,yBAAyB,EAAEvG,eAAe,EAAED,eAAe,EAAEE,sBAAsB,EAAEc,OAAO,EAAEV,aAAa,EAAE+O,YAAY,EAAEpI,WAAW,EAAED,iBAAiB,EAAEd,aAAa,EAAEvG,sBAAsB,EAAEoB,mBAAmB,EAAE4P,cAAc,EAAED,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}