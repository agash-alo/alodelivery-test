{"ast":null,"code":"import { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, isDataSource, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nexport { DataSource } from '@angular/cdk/collections';\nimport { Platform } from '@angular/cdk/platform';\nimport { ViewportRuler, ScrollingModule } from '@angular/cdk/scrolling';\nimport { DOCUMENT } from '@angular/common';\nimport { InjectionToken, Directive, TemplateRef, Inject, Optional, Input, ContentChild, ElementRef, Injectable, NgZone, IterableDiffers, ViewContainerRef, Component, ChangeDetectionStrategy, ViewEncapsulation, EmbeddedViewRef, ChangeDetectorRef, Attribute, SkipSelf, ViewChild, ContentChildren, NgModule } from '@angular/core';\nimport { Subject, from, BehaviorSubject, isObservable, of } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * @docs-private\n */\nfunction mixinHasStickyInput(base) {\n  return class extends base {\n    constructor(...args) {\n      super(...args);\n      this._sticky = false;\n      /** Whether the sticky input has changed since it was last checked. */\n      this._hasStickyChanged = false;\n    }\n    /** Whether sticky positioning should be applied. */\n    get sticky() {\n      return this._sticky;\n    }\n    set sticky(v) {\n      const prevValue = this._sticky;\n      this._sticky = coerceBooleanProperty(v);\n      this._hasStickyChanged = prevValue !== this._sticky;\n    }\n    /** Whether the sticky value has changed since this was last called. */\n    hasStickyChanged() {\n      const hasStickyChanged = this._hasStickyChanged;\n      this._hasStickyChanged = false;\n      return hasStickyChanged;\n    }\n    /** Resets the dirty check for cases where the sticky state has been used without checking. */\n    resetStickyChanged() {\n      this._hasStickyChanged = false;\n    }\n  };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to provide a table to some of the sub-components without causing a circular dependency.\n * @docs-private\n */\nconst CDK_TABLE = new InjectionToken('CDK_TABLE');\n/** Injection token that can be used to specify the text column options. */\nconst TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass CdkCellDef {\n  constructor( /** @docs-private */template) {\n    this.template = template;\n  }\n}\nCdkCellDef.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[cdkCellDef]'\n  }]\n}];\nCdkCellDef.ctorParameters = () => [{\n  type: TemplateRef\n}];\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass CdkHeaderCellDef {\n  constructor( /** @docs-private */template) {\n    this.template = template;\n  }\n}\nCdkHeaderCellDef.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[cdkHeaderCellDef]'\n  }]\n}];\nCdkHeaderCellDef.ctorParameters = () => [{\n  type: TemplateRef\n}];\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass CdkFooterCellDef {\n  constructor( /** @docs-private */template) {\n    this.template = template;\n  }\n}\nCdkFooterCellDef.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[cdkFooterCellDef]'\n  }]\n}];\nCdkFooterCellDef.ctorParameters = () => [{\n  type: TemplateRef\n}];\n// Boilerplate for applying mixins to CdkColumnDef.\n/** @docs-private */\nclass CdkColumnDefBase {}\nconst _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nclass CdkColumnDef extends _CdkColumnDefBase {\n  constructor(_table) {\n    super();\n    this._table = _table;\n    this._stickyEnd = false;\n  }\n  /** Unique name for this column. */\n  get name() {\n    return this._name;\n  }\n  set name(name) {\n    this._setNameInput(name);\n  }\n  /**\n   * Whether this column should be sticky positioned on the end of the row. Should make sure\n   * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n   * has been changed.\n   */\n  get stickyEnd() {\n    return this._stickyEnd;\n  }\n  set stickyEnd(v) {\n    const prevValue = this._stickyEnd;\n    this._stickyEnd = coerceBooleanProperty(v);\n    this._hasStickyChanged = prevValue !== this._stickyEnd;\n  }\n  /**\n   * Overridable method that sets the css classes that will be added to every cell in this\n   * column.\n   * In the future, columnCssClassName will change from type string[] to string and this\n   * will set a single string value.\n   * @docs-private\n   */\n  _updateColumnCssClassName() {\n    this._columnCssClassName = [`cdk-column-${this.cssClassFriendlyName}`];\n  }\n  /**\n   * This has been extracted to a util because of TS 4 and VE.\n   * View Engine doesn't support property rename inheritance.\n   * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n   * @docs-private\n   */\n  _setNameInput(value) {\n    // If the directive is set without a name (updated programmatically), then this setter will\n    // trigger with an empty string and should not overwrite the programmatically set value.\n    if (value) {\n      this._name = value;\n      this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/ig, '-');\n      this._updateColumnCssClassName();\n    }\n  }\n}\nCdkColumnDef.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[cdkColumnDef]',\n    inputs: ['sticky'],\n    providers: [{\n      provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n      useExisting: CdkColumnDef\n    }]\n  }]\n}];\nCdkColumnDef.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [CDK_TABLE]\n  }, {\n    type: Optional\n  }]\n}];\nCdkColumnDef.propDecorators = {\n  name: [{\n    type: Input,\n    args: ['cdkColumnDef']\n  }],\n  stickyEnd: [{\n    type: Input,\n    args: ['stickyEnd']\n  }],\n  cell: [{\n    type: ContentChild,\n    args: [CdkCellDef]\n  }],\n  headerCell: [{\n    type: ContentChild,\n    args: [CdkHeaderCellDef]\n  }],\n  footerCell: [{\n    type: ContentChild,\n    args: [CdkFooterCellDef]\n  }]\n};\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\nclass BaseCdkCell {\n  constructor(columnDef, elementRef) {\n    // If IE 11 is dropped before we switch to setting a single class name, change to multi param\n    // with destructuring.\n    const classList = elementRef.nativeElement.classList;\n    for (const className of columnDef._columnCssClassName) {\n      classList.add(className);\n    }\n  }\n}\n/** Header cell template container that adds the right classes and role. */\nclass CdkHeaderCell extends BaseCdkCell {\n  constructor(columnDef, elementRef) {\n    super(columnDef, elementRef);\n  }\n}\nCdkHeaderCell.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'cdk-header-cell, th[cdk-header-cell]',\n    host: {\n      'class': 'cdk-header-cell',\n      'role': 'columnheader'\n    }\n  }]\n}];\nCdkHeaderCell.ctorParameters = () => [{\n  type: CdkColumnDef\n}, {\n  type: ElementRef\n}];\n/** Footer cell template container that adds the right classes and role. */\nclass CdkFooterCell extends BaseCdkCell {\n  constructor(columnDef, elementRef) {\n    super(columnDef, elementRef);\n  }\n}\nCdkFooterCell.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n    host: {\n      'class': 'cdk-footer-cell',\n      'role': 'gridcell'\n    }\n  }]\n}];\nCdkFooterCell.ctorParameters = () => [{\n  type: CdkColumnDef\n}, {\n  type: ElementRef\n}];\n/** Cell template container that adds the right classes and role. */\nclass CdkCell extends BaseCdkCell {\n  constructor(columnDef, elementRef) {\n    super(columnDef, elementRef);\n  }\n}\nCdkCell.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'cdk-cell, td[cdk-cell]',\n    host: {\n      'class': 'cdk-cell',\n      'role': 'gridcell'\n    }\n  }]\n}];\nCdkCell.ctorParameters = () => [{\n  type: CdkColumnDef\n}, {\n  type: ElementRef\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @docs-private\n */\nclass _Schedule {\n  constructor() {\n    this.tasks = [];\n    this.endTasks = [];\n  }\n}\n/** Injection token used to provide a coalesced style scheduler. */\nconst _COALESCED_STYLE_SCHEDULER = new InjectionToken('_COALESCED_STYLE_SCHEDULER');\n/**\n * Allows grouping up CSSDom mutations after the current execution context.\n * This can significantly improve performance when separate consecutive functions are\n * reading from the CSSDom and then mutating it.\n *\n * @docs-private\n */\nclass _CoalescedStyleScheduler {\n  constructor(_ngZone) {\n    this._ngZone = _ngZone;\n    this._currentSchedule = null;\n    this._destroyed = new Subject();\n  }\n  /**\n   * Schedules the specified task to run at the end of the current VM turn.\n   */\n  schedule(task) {\n    this._createScheduleIfNeeded();\n    this._currentSchedule.tasks.push(task);\n  }\n  /**\n   * Schedules the specified task to run after other scheduled tasks at the end of the current\n   * VM turn.\n   */\n  scheduleEnd(task) {\n    this._createScheduleIfNeeded();\n    this._currentSchedule.endTasks.push(task);\n  }\n  /** Prevent any further tasks from running. */\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n  _createScheduleIfNeeded() {\n    if (this._currentSchedule) {\n      return;\n    }\n    this._currentSchedule = new _Schedule();\n    this._getScheduleObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n      while (this._currentSchedule.tasks.length || this._currentSchedule.endTasks.length) {\n        const schedule = this._currentSchedule;\n        // Capture new tasks scheduled by the current set of tasks.\n        this._currentSchedule = new _Schedule();\n        for (const task of schedule.tasks) {\n          task();\n        }\n        for (const task of schedule.endTasks) {\n          task();\n        }\n      }\n      this._currentSchedule = null;\n    });\n  }\n  _getScheduleObservable() {\n    // Use onStable when in the context of an ongoing change detection cycle so that we\n    // do not accidentally trigger additional cycles.\n    return this._ngZone.isStable ? from(Promise.resolve(undefined)) : this._ngZone.onStable.pipe(take(1));\n  }\n}\n_CoalescedStyleScheduler.decorators = [{\n  type: Injectable\n}];\n_CoalescedStyleScheduler.ctorParameters = () => [{\n  type: NgZone\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\nclass BaseRowDef {\n  constructor( /** @docs-private */template, _differs) {\n    this.template = template;\n    this._differs = _differs;\n  }\n  ngOnChanges(changes) {\n    // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n    // of the columns property or an empty array if none is provided.\n    if (!this._columnsDiffer) {\n      const columns = changes['columns'] && changes['columns'].currentValue || [];\n      this._columnsDiffer = this._differs.find(columns).create();\n      this._columnsDiffer.diff(columns);\n    }\n  }\n  /**\n   * Returns the difference between the current columns and the columns from the last diff, or null\n   * if there is no difference.\n   */\n  getColumnsDiff() {\n    return this._columnsDiffer.diff(this.columns);\n  }\n  /** Gets this row def's relevant cell template from the provided column def. */\n  extractCellTemplate(column) {\n    if (this instanceof CdkHeaderRowDef) {\n      return column.headerCell.template;\n    }\n    if (this instanceof CdkFooterRowDef) {\n      return column.footerCell.template;\n    } else {\n      return column.cell.template;\n    }\n  }\n}\nBaseRowDef.decorators = [{\n  type: Directive\n}];\nBaseRowDef.ctorParameters = () => [{\n  type: TemplateRef\n}, {\n  type: IterableDiffers\n}];\n// Boilerplate for applying mixins to CdkHeaderRowDef.\n/** @docs-private */\nclass CdkHeaderRowDefBase extends BaseRowDef {}\nconst _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass CdkHeaderRowDef extends _CdkHeaderRowDefBase {\n  constructor(template, _differs, _table) {\n    super(template, _differs);\n    this._table = _table;\n  }\n  // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n  // Explicitly define it so that the method is called as part of the Angular lifecycle.\n  ngOnChanges(changes) {\n    super.ngOnChanges(changes);\n  }\n}\nCdkHeaderRowDef.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[cdkHeaderRowDef]',\n    inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky']\n  }]\n}];\nCdkHeaderRowDef.ctorParameters = () => [{\n  type: TemplateRef\n}, {\n  type: IterableDiffers\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [CDK_TABLE]\n  }, {\n    type: Optional\n  }]\n}];\n// Boilerplate for applying mixins to CdkFooterRowDef.\n/** @docs-private */\nclass CdkFooterRowDefBase extends BaseRowDef {}\nconst _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass CdkFooterRowDef extends _CdkFooterRowDefBase {\n  constructor(template, _differs, _table) {\n    super(template, _differs);\n    this._table = _table;\n  }\n  // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n  // Explicitly define it so that the method is called as part of the Angular lifecycle.\n  ngOnChanges(changes) {\n    super.ngOnChanges(changes);\n  }\n}\nCdkFooterRowDef.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[cdkFooterRowDef]',\n    inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky']\n  }]\n}];\nCdkFooterRowDef.ctorParameters = () => [{\n  type: TemplateRef\n}, {\n  type: IterableDiffers\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [CDK_TABLE]\n  }, {\n    type: Optional\n  }]\n}];\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nclass CdkRowDef extends BaseRowDef {\n  // TODO(andrewseguin): Add an input for providing a switch function to determine\n  //   if this template should be used.\n  constructor(template, _differs, _table) {\n    super(template, _differs);\n    this._table = _table;\n  }\n}\nCdkRowDef.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[cdkRowDef]',\n    inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen']\n  }]\n}];\nCdkRowDef.ctorParameters = () => [{\n  type: TemplateRef\n}, {\n  type: IterableDiffers\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [CDK_TABLE]\n  }, {\n    type: Optional\n  }]\n}];\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\nclass CdkCellOutlet {\n  constructor(_viewContainer) {\n    this._viewContainer = _viewContainer;\n    CdkCellOutlet.mostRecentCellOutlet = this;\n  }\n  ngOnDestroy() {\n    // If this was the last outlet being rendered in the view, remove the reference\n    // from the static property after it has been destroyed to avoid leaking memory.\n    if (CdkCellOutlet.mostRecentCellOutlet === this) {\n      CdkCellOutlet.mostRecentCellOutlet = null;\n    }\n  }\n}\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\nCdkCellOutlet.mostRecentCellOutlet = null;\nCdkCellOutlet.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[cdkCellOutlet]'\n  }]\n}];\nCdkCellOutlet.ctorParameters = () => [{\n  type: ViewContainerRef\n}];\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass CdkHeaderRow {}\nCdkHeaderRow.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'cdk-header-row, tr[cdk-header-row]',\n    template: CDK_ROW_TEMPLATE,\n    host: {\n      'class': 'cdk-header-row',\n      'role': 'row'\n    },\n    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n    // tslint:disable-next-line:validate-decorators\n    changeDetection: ChangeDetectionStrategy.Default,\n    encapsulation: ViewEncapsulation.None\n  }]\n}];\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass CdkFooterRow {}\nCdkFooterRow.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'cdk-footer-row, tr[cdk-footer-row]',\n    template: CDK_ROW_TEMPLATE,\n    host: {\n      'class': 'cdk-footer-row',\n      'role': 'row'\n    },\n    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n    // tslint:disable-next-line:validate-decorators\n    changeDetection: ChangeDetectionStrategy.Default,\n    encapsulation: ViewEncapsulation.None\n  }]\n}];\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass CdkRow {}\nCdkRow.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'cdk-row, tr[cdk-row]',\n    template: CDK_ROW_TEMPLATE,\n    host: {\n      'class': 'cdk-row',\n      'role': 'row'\n    },\n    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n    // tslint:disable-next-line:validate-decorators\n    changeDetection: ChangeDetectionStrategy.Default,\n    encapsulation: ViewEncapsulation.None\n  }]\n}];\n/** Row that can be used to display a message when no data is shown in the table. */\nclass CdkNoDataRow {\n  constructor(templateRef) {\n    this.templateRef = templateRef;\n  }\n}\nCdkNoDataRow.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'ng-template[cdkNoDataRow]'\n  }]\n}];\nCdkNoDataRow.ctorParameters = () => [{\n  type: TemplateRef\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * List of all possible directions that can be used for sticky positioning.\n * @docs-private\n */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * @docs-private\n */\nclass StickyStyler {\n  /**\n   * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n   *     that uses the native `<table>` element.\n   * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n   *     sticky positioning applied.\n   * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n   *     by reversing left/right positions.\n   * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n   * @param _needsPositionStickyOnElement Whether we need to specify position: sticky on cells\n   *     using inline styles. If false, it is assumed that position: sticky is included in\n   *     the component stylesheet for _stickCellCss.\n   * @param _positionListener A listener that is notified of changes to sticky rows/columns\n   *     and their dimensions.\n   */\n  constructor(_isNativeHtmlTable, _stickCellCss, direction, _coalescedStyleScheduler, _isBrowser = true, _needsPositionStickyOnElement = true, _positionListener) {\n    this._isNativeHtmlTable = _isNativeHtmlTable;\n    this._stickCellCss = _stickCellCss;\n    this.direction = direction;\n    this._coalescedStyleScheduler = _coalescedStyleScheduler;\n    this._isBrowser = _isBrowser;\n    this._needsPositionStickyOnElement = _needsPositionStickyOnElement;\n    this._positionListener = _positionListener;\n    this._cachedCellWidths = [];\n    this._borderCellCss = {\n      'top': `${_stickCellCss}-border-elem-top`,\n      'bottom': `${_stickCellCss}-border-elem-bottom`,\n      'left': `${_stickCellCss}-border-elem-left`,\n      'right': `${_stickCellCss}-border-elem-right`\n    };\n  }\n  /**\n   * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n   * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n   * @param rows The list of rows that should be cleared from sticking in the provided directions\n   * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n   */\n  clearStickyPositioning(rows, stickyDirections) {\n    const elementsToClear = [];\n    for (const row of rows) {\n      // If the row isn't an element (e.g. if it's an `ng-container`),\n      // it won't have inline styles or `children` so we skip it.\n      if (row.nodeType !== row.ELEMENT_NODE) {\n        continue;\n      }\n      elementsToClear.push(row);\n      for (let i = 0; i < row.children.length; i++) {\n        elementsToClear.push(row.children[i]);\n      }\n    }\n    // Coalesce with sticky row/column updates (and potentially other changes like column resize).\n    this._coalescedStyleScheduler.schedule(() => {\n      for (const element of elementsToClear) {\n        this._removeStickyStyle(element, stickyDirections);\n      }\n    });\n  }\n  /**\n   * Applies sticky left and right positions to the cells of each row according to the sticky\n   * states of the rendered column definitions.\n   * @param rows The rows that should have its set of cells stuck according to the sticky states.\n   * @param stickyStartStates A list of boolean states where each state represents whether the cell\n   *     in this index position should be stuck to the start of the row.\n   * @param stickyEndStates A list of boolean states where each state represents whether the cell\n   *     in this index position should be stuck to the end of the row.\n   * @param recalculateCellWidths Whether the sticky styler should recalculate the width of each\n   *     column cell. If `false` cached widths will be used instead.\n   */\n  updateStickyColumns(rows, stickyStartStates, stickyEndStates, recalculateCellWidths = true) {\n    if (!rows.length || !this._isBrowser || !(stickyStartStates.some(state => state) || stickyEndStates.some(state => state))) {\n      if (this._positionListener) {\n        this._positionListener.stickyColumnsUpdated({\n          sizes: []\n        });\n        this._positionListener.stickyEndColumnsUpdated({\n          sizes: []\n        });\n      }\n      return;\n    }\n    const firstRow = rows[0];\n    const numCells = firstRow.children.length;\n    const cellWidths = this._getCellWidths(firstRow, recalculateCellWidths);\n    const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n    const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n    const lastStickyStart = stickyStartStates.lastIndexOf(true);\n    const firstStickyEnd = stickyEndStates.indexOf(true);\n    // Coalesce with sticky row updates (and potentially other changes like column resize).\n    this._coalescedStyleScheduler.schedule(() => {\n      const isRtl = this.direction === 'rtl';\n      const start = isRtl ? 'right' : 'left';\n      const end = isRtl ? 'left' : 'right';\n      for (const row of rows) {\n        for (let i = 0; i < numCells; i++) {\n          const cell = row.children[i];\n          if (stickyStartStates[i]) {\n            this._addStickyStyle(cell, start, startPositions[i], i === lastStickyStart);\n          }\n          if (stickyEndStates[i]) {\n            this._addStickyStyle(cell, end, endPositions[i], i === firstStickyEnd);\n          }\n        }\n      }\n      if (this._positionListener) {\n        this._positionListener.stickyColumnsUpdated({\n          sizes: lastStickyStart === -1 ? [] : cellWidths.slice(0, lastStickyStart + 1).map((width, index) => stickyStartStates[index] ? width : null)\n        });\n        this._positionListener.stickyEndColumnsUpdated({\n          sizes: firstStickyEnd === -1 ? [] : cellWidths.slice(firstStickyEnd).map((width, index) => stickyEndStates[index + firstStickyEnd] ? width : null).reverse()\n        });\n      }\n    });\n  }\n  /**\n   * Applies sticky positioning to the row's cells if using the native table layout, and to the\n   * row itself otherwise.\n   * @param rowsToStick The list of rows that should be stuck according to their corresponding\n   *     sticky state and to the provided top or bottom position.\n   * @param stickyStates A list of boolean states where each state represents whether the row\n   *     should be stuck in the particular top or bottom position.\n   * @param position The position direction in which the row should be stuck if that row should be\n   *     sticky.\n   *\n   */\n  stickRows(rowsToStick, stickyStates, position) {\n    // Since we can't measure the rows on the server, we can't stick the rows properly.\n    if (!this._isBrowser) {\n      return;\n    }\n    // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n    // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\n    // sticky states need to be reversed as well.\n    const rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\n    const states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates;\n    // Measure row heights all at once before adding sticky styles to reduce layout thrashing.\n    const stickyOffsets = [];\n    const stickyCellHeights = [];\n    const elementsToStick = [];\n    for (let rowIndex = 0, stickyOffset = 0; rowIndex < rows.length; rowIndex++) {\n      if (!states[rowIndex]) {\n        continue;\n      }\n      stickyOffsets[rowIndex] = stickyOffset;\n      const row = rows[rowIndex];\n      elementsToStick[rowIndex] = this._isNativeHtmlTable ? Array.from(row.children) : [row];\n      const height = row.getBoundingClientRect().height;\n      stickyOffset += height;\n      stickyCellHeights[rowIndex] = height;\n    }\n    const borderedRowIndex = states.lastIndexOf(true);\n    // Coalesce with other sticky row updates (top/bottom), sticky columns updates\n    // (and potentially other changes like column resize).\n    this._coalescedStyleScheduler.schedule(() => {\n      var _a, _b;\n      for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n        if (!states[rowIndex]) {\n          continue;\n        }\n        const offset = stickyOffsets[rowIndex];\n        const isBorderedRowIndex = rowIndex === borderedRowIndex;\n        for (const element of elementsToStick[rowIndex]) {\n          this._addStickyStyle(element, position, offset, isBorderedRowIndex);\n        }\n      }\n      if (position === 'top') {\n        (_a = this._positionListener) === null || _a === void 0 ? void 0 : _a.stickyHeaderRowsUpdated({\n          sizes: stickyCellHeights,\n          offsets: stickyOffsets,\n          elements: elementsToStick\n        });\n      } else {\n        (_b = this._positionListener) === null || _b === void 0 ? void 0 : _b.stickyFooterRowsUpdated({\n          sizes: stickyCellHeights,\n          offsets: stickyOffsets,\n          elements: elementsToStick\n        });\n      }\n    });\n  }\n  /**\n   * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n   * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n   * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n   * the tfoot element.\n   */\n  updateStickyFooterContainer(tableElement, stickyStates) {\n    if (!this._isNativeHtmlTable) {\n      return;\n    }\n    const tfoot = tableElement.querySelector('tfoot');\n    // Coalesce with other sticky updates (and potentially other changes like column resize).\n    this._coalescedStyleScheduler.schedule(() => {\n      if (stickyStates.some(state => !state)) {\n        this._removeStickyStyle(tfoot, ['bottom']);\n      } else {\n        this._addStickyStyle(tfoot, 'bottom', 0, false);\n      }\n    });\n  }\n  /**\n   * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n   * the zIndex, removing each of the provided sticky directions, and removing the\n   * sticky position if there are no more directions.\n   */\n  _removeStickyStyle(element, stickyDirections) {\n    for (const dir of stickyDirections) {\n      element.style[dir] = '';\n      element.classList.remove(this._borderCellCss[dir]);\n    }\n    // If the element no longer has any more sticky directions, remove sticky positioning and\n    // the sticky CSS class.\n    // Short-circuit checking element.style[dir] for stickyDirections as they\n    // were already removed above.\n    const hasDirection = STICKY_DIRECTIONS.some(dir => stickyDirections.indexOf(dir) === -1 && element.style[dir]);\n    if (hasDirection) {\n      element.style.zIndex = this._getCalculatedZIndex(element);\n    } else {\n      // When not hasDirection, _getCalculatedZIndex will always return ''.\n      element.style.zIndex = '';\n      if (this._needsPositionStickyOnElement) {\n        element.style.position = '';\n      }\n      element.classList.remove(this._stickCellCss);\n    }\n  }\n  /**\n   * Adds the sticky styling to the element by adding the sticky style class, changing position\n   * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n   * direction and value.\n   */\n  _addStickyStyle(element, dir, dirValue, isBorderElement) {\n    element.classList.add(this._stickCellCss);\n    if (isBorderElement) {\n      element.classList.add(this._borderCellCss[dir]);\n    }\n    element.style[dir] = `${dirValue}px`;\n    element.style.zIndex = this._getCalculatedZIndex(element);\n    if (this._needsPositionStickyOnElement) {\n      element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n    }\n  }\n  /**\n   * Calculate what the z-index should be for the element, depending on what directions (top,\n   * bottom, left, right) have been set. It should be true that elements with a top direction\n   * should have the highest index since these are elements like a table header. If any of those\n   * elements are also sticky in another direction, then they should appear above other elements\n   * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n   * (e.g. footer rows) should then be next in the ordering such that they are below the header\n   * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n   * should minimally increment so that they are above non-sticky elements but below top and bottom\n   * elements.\n   */\n  _getCalculatedZIndex(element) {\n    const zIndexIncrements = {\n      top: 100,\n      bottom: 10,\n      left: 1,\n      right: 1\n    };\n    let zIndex = 0;\n    // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n    // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n    // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n    for (const dir of STICKY_DIRECTIONS) {\n      if (element.style[dir]) {\n        zIndex += zIndexIncrements[dir];\n      }\n    }\n    return zIndex ? `${zIndex}` : '';\n  }\n  /** Gets the widths for each cell in the provided row. */\n  _getCellWidths(row, recalculateCellWidths = true) {\n    if (!recalculateCellWidths && this._cachedCellWidths.length) {\n      return this._cachedCellWidths;\n    }\n    const cellWidths = [];\n    const firstRowCells = row.children;\n    for (let i = 0; i < firstRowCells.length; i++) {\n      let cell = firstRowCells[i];\n      cellWidths.push(cell.getBoundingClientRect().width);\n    }\n    this._cachedCellWidths = cellWidths;\n    return cellWidths;\n  }\n  /**\n   * Determines the left and right positions of each sticky column cell, which will be the\n   * accumulation of all sticky column cell widths to the left and right, respectively.\n   * Non-sticky cells do not need to have a value set since their positions will not be applied.\n   */\n  _getStickyStartColumnPositions(widths, stickyStates) {\n    const positions = [];\n    let nextPosition = 0;\n    for (let i = 0; i < widths.length; i++) {\n      if (stickyStates[i]) {\n        positions[i] = nextPosition;\n        nextPosition += widths[i];\n      }\n    }\n    return positions;\n  }\n  /**\n   * Determines the left and right positions of each sticky column cell, which will be the\n   * accumulation of all sticky column cell widths to the left and right, respectively.\n   * Non-sticky cells do not need to have a value set since their positions will not be applied.\n   */\n  _getStickyEndColumnPositions(widths, stickyStates) {\n    const positions = [];\n    let nextPosition = 0;\n    for (let i = widths.length; i > 0; i--) {\n      if (stickyStates[i]) {\n        positions[i] = nextPosition;\n        nextPosition += widths[i];\n      }\n    }\n    return positions;\n  }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * @param id Id whose lookup failed.\n * @docs-private\n */\nfunction getTableUnknownColumnError(id) {\n  return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * @docs-private\n */\nfunction getTableDuplicateColumnNameError(name) {\n  return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * @docs-private\n */\nfunction getTableMultipleDefaultRowDefsError() {\n  return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * @docs-private\n */\nfunction getTableMissingMatchingRowDefError(data) {\n  return Error(`Could not find a matching row definition for the` + `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * @docs-private\n */\nfunction getTableMissingRowDefsError() {\n  return Error('Missing definitions for header, footer, and row; ' + 'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * @docs-private\n */\nfunction getTableUnknownDataSourceError() {\n  return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * @docs-private\n */\nfunction getTableTextColumnMissingParentTableError() {\n  return Error(`Text column could not find a parent table for registration.`);\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * @docs-private\n */\nfunction getTableTextColumnMissingNameError() {\n  return Error(`Table text column must have a name.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The injection token used to specify the StickyPositioningListener. */\nconst STICKY_POSITIONING_LISTENER = new InjectionToken('CDK_SPL');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\nclass CdkRecycleRows {}\nCdkRecycleRows.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'cdk-table[recycleRows], table[cdk-table][recycleRows]',\n    providers: [{\n      provide: _VIEW_REPEATER_STRATEGY,\n      useClass: _RecycleViewRepeaterStrategy\n    }]\n  }]\n}];\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * @docs-private\n */\nclass DataRowOutlet {\n  constructor(viewContainer, elementRef) {\n    this.viewContainer = viewContainer;\n    this.elementRef = elementRef;\n  }\n}\nDataRowOutlet.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[rowOutlet]'\n  }]\n}];\nDataRowOutlet.ctorParameters = () => [{\n  type: ViewContainerRef\n}, {\n  type: ElementRef\n}];\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * @docs-private\n */\nclass HeaderRowOutlet {\n  constructor(viewContainer, elementRef) {\n    this.viewContainer = viewContainer;\n    this.elementRef = elementRef;\n  }\n}\nHeaderRowOutlet.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[headerRowOutlet]'\n  }]\n}];\nHeaderRowOutlet.ctorParameters = () => [{\n  type: ViewContainerRef\n}, {\n  type: ElementRef\n}];\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * @docs-private\n */\nclass FooterRowOutlet {\n  constructor(viewContainer, elementRef) {\n    this.viewContainer = viewContainer;\n    this.elementRef = elementRef;\n  }\n}\nFooterRowOutlet.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[footerRowOutlet]'\n  }]\n}];\nFooterRowOutlet.ctorParameters = () => [{\n  type: ViewContainerRef\n}, {\n  type: ElementRef\n}];\n/**\n * Provides a handle for the table to grab the view\n * container's ng-container to insert the no data row.\n * @docs-private\n */\nclass NoDataRowOutlet {\n  constructor(viewContainer, elementRef) {\n    this.viewContainer = viewContainer;\n    this.elementRef = elementRef;\n  }\n}\nNoDataRowOutlet.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[noDataRowOutlet]'\n  }]\n}];\nNoDataRowOutlet.ctorParameters = () => [{\n  type: ViewContainerRef\n}, {\n  type: ElementRef\n}];\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @docs-private\n */\nconst CDK_TABLE_TEMPLATE =\n// Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n`\n  <ng-content select=\"caption\"></ng-content>\n  <ng-content select=\"colgroup, col\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container noDataRowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n`;\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * @docs-private\n */\nclass RowViewRef extends EmbeddedViewRef {}\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n */\nclass CdkTable {\n  constructor(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform, _viewRepeater, _coalescedStyleScheduler, _viewportRuler,\n  /**\n   * @deprecated `_stickyPositioningListener` parameter to become required.\n   * @breaking-change 13.0.0\n   */\n  _stickyPositioningListener) {\n    this._differs = _differs;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._elementRef = _elementRef;\n    this._dir = _dir;\n    this._platform = _platform;\n    this._viewRepeater = _viewRepeater;\n    this._coalescedStyleScheduler = _coalescedStyleScheduler;\n    this._viewportRuler = _viewportRuler;\n    this._stickyPositioningListener = _stickyPositioningListener;\n    /** Subject that emits when the component has been destroyed. */\n    this._onDestroy = new Subject();\n    /**\n     * Map of all the user's defined columns (header, data, and footer cell template) identified by\n     * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n     * any custom column definitions added to `_customColumnDefs`.\n     */\n    this._columnDefsByName = new Map();\n    /**\n     * Column definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * column definitions as *its* content child.\n     */\n    this._customColumnDefs = new Set();\n    /**\n     * Data row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * built-in data rows as *its* content child.\n     */\n    this._customRowDefs = new Set();\n    /**\n     * Header row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * built-in header rows as *its* content child.\n     */\n    this._customHeaderRowDefs = new Set();\n    /**\n     * Footer row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n     * built-in footer row as *its* content child.\n     */\n    this._customFooterRowDefs = new Set();\n    /**\n     * Whether the header row definition has been changed. Triggers an update to the header row after\n     * content is checked. Initialized as true so that the table renders the initial set of rows.\n     */\n    this._headerRowDefChanged = true;\n    /**\n     * Whether the footer row definition has been changed. Triggers an update to the footer row after\n     * content is checked. Initialized as true so that the table renders the initial set of rows.\n     */\n    this._footerRowDefChanged = true;\n    /**\n     * Whether the sticky column styles need to be updated. Set to `true` when the visible columns\n     * change.\n     */\n    this._stickyColumnStylesNeedReset = true;\n    /**\n     * Whether the sticky styler should recalculate cell widths when applying sticky styles. If\n     * `false`, cached values will be used instead. This is only applicable to tables with\n     * {@link fixedLayout} enabled. For other tables, cell widths will always be recalculated.\n     */\n    this._forceRecalculateCellWidths = true;\n    /**\n     * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n     * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n     * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n     * and row template matches, which allows the `IterableDiffer` to check rows by reference\n     * and understand which rows are added/moved/removed.\n     *\n     * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n     * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n     * contains an array of created pairs. The array is necessary to handle cases where the data\n     * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n     * stored.\n     */\n    this._cachedRenderRowsMap = new Map();\n    /**\n     * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n     * table subclasses.\n     */\n    this.stickyCssClass = 'cdk-table-sticky';\n    /**\n     * Whether to manually add positon: sticky to all sticky cell elements. Not needed if\n     * the position is set in a selector associated with the value of stickyCssClass. May be\n     * overridden by table subclasses\n     */\n    this.needsPositionStickyOnElement = true;\n    /** Whether the no data row is currently showing anything. */\n    this._isShowingNoDataRow = false;\n    this._multiTemplateDataRows = false;\n    this._fixedLayout = false;\n    // TODO(andrewseguin): Remove max value as the end index\n    //   and instead calculate the view on init and scroll.\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as a heuristic of what data should be provided.\n     *\n     * @docs-private\n     */\n    this.viewChange = new BehaviorSubject({\n      start: 0,\n      end: Number.MAX_VALUE\n    });\n    if (!role) {\n      this._elementRef.nativeElement.setAttribute('role', 'grid');\n    }\n    this._document = _document;\n    this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n  }\n  /**\n   * Tracking function that will be used to check the differences in data changes. Used similarly\n   * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n   * relative to the function to know if a row should be added/removed/moved.\n   * Accepts a function that takes two parameters, `index` and `item`.\n   */\n  get trackBy() {\n    return this._trackByFn;\n  }\n  set trackBy(fn) {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\n      console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n    }\n    this._trackByFn = fn;\n  }\n  /**\n   * The table's source of data, which can be provided in three ways (in order of complexity):\n   *   - Simple data array (each object represents one table row)\n   *   - Stream that emits a data array each time the array changes\n   *   - `DataSource` object that implements the connect/disconnect interface.\n   *\n   * If a data array is provided, the table must be notified when the array's objects are\n   * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n   * render the diff since the last table render. If the data array reference is changed, the table\n   * will automatically trigger an update to the rows.\n   *\n   * When providing an Observable stream, the table will trigger an update automatically when the\n   * stream emits a new array of data.\n   *\n   * Finally, when providing a `DataSource` object, the table will use the Observable stream\n   * provided by the connect function and trigger updates when that stream emits new data array\n   * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n   * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n   * subscriptions registered during the connect process).\n   */\n  get dataSource() {\n    return this._dataSource;\n  }\n  set dataSource(dataSource) {\n    if (this._dataSource !== dataSource) {\n      this._switchDataSource(dataSource);\n    }\n  }\n  /**\n   * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n   * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n   * dataobject will render the first row that evaluates its when predicate to true, in the order\n   * defined in the table, or otherwise the default row which does not have a when predicate.\n   */\n  get multiTemplateDataRows() {\n    return this._multiTemplateDataRows;\n  }\n  set multiTemplateDataRows(v) {\n    this._multiTemplateDataRows = coerceBooleanProperty(v);\n    // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n    // this setter will be invoked before the row outlet has been defined hence the null check.\n    if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n      this._forceRenderDataRows();\n      this.updateStickyColumnStyles();\n    }\n  }\n  /**\n   * Whether to use a fixed table layout. Enabling this option will enforce consistent column widths\n   * and optimize rendering sticky styles for native tables. No-op for flex tables.\n   */\n  get fixedLayout() {\n    return this._fixedLayout;\n  }\n  set fixedLayout(v) {\n    this._fixedLayout = coerceBooleanProperty(v);\n    // Toggling `fixedLayout` may change column widths. Sticky column styles should be recalculated.\n    this._forceRecalculateCellWidths = true;\n    this._stickyColumnStylesNeedReset = true;\n  }\n  ngOnInit() {\n    this._setupStickyStyler();\n    if (this._isNativeHtmlTable) {\n      this._applyNativeTableSections();\n    }\n    // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n    // the user has provided a custom trackBy, return the result of that function as evaluated\n    // with the values of the `RenderRow`'s data and index.\n    this._dataDiffer = this._differs.find([]).create((_i, dataRow) => {\n      return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n    });\n    this._viewportRuler.change().pipe(takeUntil(this._onDestroy)).subscribe(() => {\n      this._forceRecalculateCellWidths = true;\n    });\n  }\n  ngAfterContentChecked() {\n    // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n    this._cacheRowDefs();\n    this._cacheColumnDefs();\n    // Make sure that the user has at least added header, footer, or data row def.\n    if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTableMissingRowDefsError();\n    }\n    // Render updates if the list of columns have been changed for the header, row, or footer defs.\n    const columnsChanged = this._renderUpdatedColumns();\n    const rowDefsChanged = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged;\n    // Ensure sticky column styles are reset if set to `true` elsewhere.\n    this._stickyColumnStylesNeedReset = this._stickyColumnStylesNeedReset || rowDefsChanged;\n    this._forceRecalculateCellWidths = rowDefsChanged;\n    // If the header row definition has been changed, trigger a render to the header row.\n    if (this._headerRowDefChanged) {\n      this._forceRenderHeaderRows();\n      this._headerRowDefChanged = false;\n    }\n    // If the footer row definition has been changed, trigger a render to the footer row.\n    if (this._footerRowDefChanged) {\n      this._forceRenderFooterRows();\n      this._footerRowDefChanged = false;\n    }\n    // If there is a data source and row definitions, connect to the data source unless a\n    // connection has already been made.\n    if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n      this._observeRenderChanges();\n    } else if (this._stickyColumnStylesNeedReset) {\n      // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being\n      // called when it row data arrives. Otherwise, we need to call it proactively.\n      this.updateStickyColumnStyles();\n    }\n    this._checkStickyStates();\n  }\n  ngOnDestroy() {\n    this._rowOutlet.viewContainer.clear();\n    this._noDataRowOutlet.viewContainer.clear();\n    this._headerRowOutlet.viewContainer.clear();\n    this._footerRowOutlet.viewContainer.clear();\n    this._cachedRenderRowsMap.clear();\n    this._onDestroy.next();\n    this._onDestroy.complete();\n    if (isDataSource(this.dataSource)) {\n      this.dataSource.disconnect(this);\n    }\n  }\n  /**\n   * Renders rows based on the table's latest set of data, which was either provided directly as an\n   * input or retrieved through an Observable stream (directly or from a DataSource).\n   * Checks for differences in the data since the last diff to perform only the necessary\n   * changes (add/remove/move rows).\n   *\n   * If the table's data source is a DataSource or Observable, this will be invoked automatically\n   * each time the provided Observable stream emits a new data array. Otherwise if your data is\n   * an array, this function will need to be called to render any changes.\n   */\n  renderRows() {\n    this._renderRows = this._getAllRenderRows();\n    const changes = this._dataDiffer.diff(this._renderRows);\n    if (!changes) {\n      this._updateNoDataRow();\n      return;\n    }\n    const viewContainer = this._rowOutlet.viewContainer;\n    this._viewRepeater.applyChanges(changes, viewContainer, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record.item, currentIndex), record => record.item.data, change => {\n      if (change.operation === 1 /* INSERTED */ && change.context) {\n        this._renderCellTemplateForItem(change.record.item.rowDef, change.context);\n      }\n    });\n    // Update the meta context of a row's context data (index, count, first, last, ...)\n    this._updateRowIndexContext();\n    // Update rows that did not get added/removed/moved but may have had their identity changed,\n    // e.g. if trackBy matched data on some property but the actual data reference changed.\n    changes.forEachIdentityChange(record => {\n      const rowView = viewContainer.get(record.currentIndex);\n      rowView.context.$implicit = record.item.data;\n    });\n    this._updateNoDataRow();\n    this.updateStickyColumnStyles();\n  }\n  /** Adds a column definition that was not included as part of the content children. */\n  addColumnDef(columnDef) {\n    this._customColumnDefs.add(columnDef);\n  }\n  /** Removes a column definition that was not included as part of the content children. */\n  removeColumnDef(columnDef) {\n    this._customColumnDefs.delete(columnDef);\n  }\n  /** Adds a row definition that was not included as part of the content children. */\n  addRowDef(rowDef) {\n    this._customRowDefs.add(rowDef);\n  }\n  /** Removes a row definition that was not included as part of the content children. */\n  removeRowDef(rowDef) {\n    this._customRowDefs.delete(rowDef);\n  }\n  /** Adds a header row definition that was not included as part of the content children. */\n  addHeaderRowDef(headerRowDef) {\n    this._customHeaderRowDefs.add(headerRowDef);\n    this._headerRowDefChanged = true;\n  }\n  /** Removes a header row definition that was not included as part of the content children. */\n  removeHeaderRowDef(headerRowDef) {\n    this._customHeaderRowDefs.delete(headerRowDef);\n    this._headerRowDefChanged = true;\n  }\n  /** Adds a footer row definition that was not included as part of the content children. */\n  addFooterRowDef(footerRowDef) {\n    this._customFooterRowDefs.add(footerRowDef);\n    this._footerRowDefChanged = true;\n  }\n  /** Removes a footer row definition that was not included as part of the content children. */\n  removeFooterRowDef(footerRowDef) {\n    this._customFooterRowDefs.delete(footerRowDef);\n    this._footerRowDefChanged = true;\n  }\n  /** Sets a no data row definition that was not included as a part of the content children. */\n  setNoDataRow(noDataRow) {\n    this._customNoDataRow = noDataRow;\n  }\n  /**\n   * Updates the header sticky styles. First resets all applied styles with respect to the cells\n   * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n   * automatically called when the header row changes its displayed set of columns, or if its\n   * sticky input changes. May be called manually for cases where the cell content changes outside\n   * of these events.\n   */\n  updateStickyHeaderRowStyles() {\n    const headerRows = this._getRenderedRows(this._headerRowOutlet);\n    const tableElement = this._elementRef.nativeElement;\n    // Hide the thead element if there are no header rows. This is necessary to satisfy\n    // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n    // required child `row`.\n    const thead = tableElement.querySelector('thead');\n    if (thead) {\n      thead.style.display = headerRows.length ? '' : 'none';\n    }\n    const stickyStates = this._headerRowDefs.map(def => def.sticky);\n    this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n    this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n    // Reset the dirty state of the sticky input change since it has been used.\n    this._headerRowDefs.forEach(def => def.resetStickyChanged());\n  }\n  /**\n   * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n   * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n   * automatically called when the footer row changes its displayed set of columns, or if its\n   * sticky input changes. May be called manually for cases where the cell content changes outside\n   * of these events.\n   */\n  updateStickyFooterRowStyles() {\n    const footerRows = this._getRenderedRows(this._footerRowOutlet);\n    const tableElement = this._elementRef.nativeElement;\n    // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n    // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n    // required child `row`.\n    const tfoot = tableElement.querySelector('tfoot');\n    if (tfoot) {\n      tfoot.style.display = footerRows.length ? '' : 'none';\n    }\n    const stickyStates = this._footerRowDefs.map(def => def.sticky);\n    this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n    this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n    this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n    // Reset the dirty state of the sticky input change since it has been used.\n    this._footerRowDefs.forEach(def => def.resetStickyChanged());\n  }\n  /**\n   * Updates the column sticky styles. First resets all applied styles with respect to the cells\n   * sticking to the left and right. Then sticky styles are added for the left and right according\n   * to the column definitions for each cell in each row. This is automatically called when\n   * the data source provides a new set of data or when a column definition changes its sticky\n   * input. May be called manually for cases where the cell content changes outside of these events.\n   */\n  updateStickyColumnStyles() {\n    const headerRows = this._getRenderedRows(this._headerRowOutlet);\n    const dataRows = this._getRenderedRows(this._rowOutlet);\n    const footerRows = this._getRenderedRows(this._footerRowOutlet);\n    // For tables not using a fixed layout, the column widths may change when new rows are rendered.\n    // In a table using a fixed layout, row content won't affect column width, so sticky styles\n    // don't need to be cleared unless either the sticky column config changes or one of the row\n    // defs change.\n    if (this._isNativeHtmlTable && !this._fixedLayout || this._stickyColumnStylesNeedReset) {\n      // Clear the left and right positioning from all columns in the table across all rows since\n      // sticky columns span across all table sections (header, data, footer)\n      this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n      this._stickyColumnStylesNeedReset = false;\n    }\n    // Update the sticky styles for each header row depending on the def's sticky state\n    headerRows.forEach((headerRow, i) => {\n      this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n    });\n    // Update the sticky styles for each data row depending on its def's sticky state\n    this._rowDefs.forEach(rowDef => {\n      // Collect all the rows rendered with this row definition.\n      const rows = [];\n      for (let i = 0; i < dataRows.length; i++) {\n        if (this._renderRows[i].rowDef === rowDef) {\n          rows.push(dataRows[i]);\n        }\n      }\n      this._addStickyColumnStyles(rows, rowDef);\n    });\n    // Update the sticky styles for each footer row depending on the def's sticky state\n    footerRows.forEach((footerRow, i) => {\n      this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n    });\n    // Reset the dirty state of the sticky input change since it has been used.\n    Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\n  }\n  /**\n   * Get the list of RenderRow objects to render according to the current list of data and defined\n   * row definitions. If the previous list already contained a particular pair, it should be reused\n   * so that the differ equates their references.\n   */\n  _getAllRenderRows() {\n    const renderRows = [];\n    // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n    // new cache while unused ones can be picked up by garbage collection.\n    const prevCachedRenderRows = this._cachedRenderRowsMap;\n    this._cachedRenderRowsMap = new Map();\n    // For each data object, get the list of rows that should be rendered, represented by the\n    // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n    for (let i = 0; i < this._data.length; i++) {\n      let data = this._data[i];\n      const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n      if (!this._cachedRenderRowsMap.has(data)) {\n        this._cachedRenderRowsMap.set(data, new WeakMap());\n      }\n      for (let j = 0; j < renderRowsForData.length; j++) {\n        let renderRow = renderRowsForData[j];\n        const cache = this._cachedRenderRowsMap.get(renderRow.data);\n        if (cache.has(renderRow.rowDef)) {\n          cache.get(renderRow.rowDef).push(renderRow);\n        } else {\n          cache.set(renderRow.rowDef, [renderRow]);\n        }\n        renderRows.push(renderRow);\n      }\n    }\n    return renderRows;\n  }\n  /**\n   * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n   * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n   * `(T, CdkRowDef)` pair.\n   */\n  _getRenderRowsForData(data, dataIndex, cache) {\n    const rowDefs = this._getRowDefs(data, dataIndex);\n    return rowDefs.map(rowDef => {\n      const cachedRenderRows = cache && cache.has(rowDef) ? cache.get(rowDef) : [];\n      if (cachedRenderRows.length) {\n        const dataRow = cachedRenderRows.shift();\n        dataRow.dataIndex = dataIndex;\n        return dataRow;\n      } else {\n        return {\n          data,\n          rowDef,\n          dataIndex\n        };\n      }\n    });\n  }\n  /** Update the map containing the content's column definitions. */\n  _cacheColumnDefs() {\n    this._columnDefsByName.clear();\n    const columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\n    columnDefs.forEach(columnDef => {\n      if (this._columnDefsByName.has(columnDef.name) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableDuplicateColumnNameError(columnDef.name);\n      }\n      this._columnDefsByName.set(columnDef.name, columnDef);\n    });\n  }\n  /** Update the list of all available row definitions that can be used. */\n  _cacheRowDefs() {\n    this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\n    this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\n    this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs);\n    // After all row definitions are determined, find the row definition to be considered default.\n    const defaultRowDefs = this._rowDefs.filter(def => !def.when);\n    if (!this.multiTemplateDataRows && defaultRowDefs.length > 1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTableMultipleDefaultRowDefsError();\n    }\n    this._defaultRowDef = defaultRowDefs[0];\n  }\n  /**\n   * Check if the header, data, or footer rows have changed what columns they want to display or\n   * whether the sticky states have changed for the header or footer. If there is a diff, then\n   * re-render that section.\n   */\n  _renderUpdatedColumns() {\n    const columnsDiffReducer = (acc, def) => acc || !!def.getColumnsDiff();\n    // Force re-render data rows if the list of column definitions have changed.\n    const dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);\n    if (dataColumnsChanged) {\n      this._forceRenderDataRows();\n    }\n    // Force re-render header/footer rows if the list of column definitions have changed.\n    const headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);\n    if (headerColumnsChanged) {\n      this._forceRenderHeaderRows();\n    }\n    const footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);\n    if (footerColumnsChanged) {\n      this._forceRenderFooterRows();\n    }\n    return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;\n  }\n  /**\n   * Switch to the provided data source by resetting the data and unsubscribing from the current\n   * render change subscription if one exists. If the data source is null, interpret this by\n   * clearing the row outlet. Otherwise start listening for new data.\n   */\n  _switchDataSource(dataSource) {\n    this._data = [];\n    if (isDataSource(this.dataSource)) {\n      this.dataSource.disconnect(this);\n    }\n    // Stop listening for data from the previous data source.\n    if (this._renderChangeSubscription) {\n      this._renderChangeSubscription.unsubscribe();\n      this._renderChangeSubscription = null;\n    }\n    if (!dataSource) {\n      if (this._dataDiffer) {\n        this._dataDiffer.diff([]);\n      }\n      this._rowOutlet.viewContainer.clear();\n    }\n    this._dataSource = dataSource;\n  }\n  /** Set up a subscription for the data provided by the data source. */\n  _observeRenderChanges() {\n    // If no data source has been set, there is nothing to observe for changes.\n    if (!this.dataSource) {\n      return;\n    }\n    let dataStream;\n    if (isDataSource(this.dataSource)) {\n      dataStream = this.dataSource.connect(this);\n    } else if (isObservable(this.dataSource)) {\n      dataStream = this.dataSource;\n    } else if (Array.isArray(this.dataSource)) {\n      dataStream = of(this.dataSource);\n    }\n    if (dataStream === undefined && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTableUnknownDataSourceError();\n    }\n    this._renderChangeSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe(data => {\n      this._data = data || [];\n      this.renderRows();\n    });\n  }\n  /**\n   * Clears any existing content in the header row outlet and creates a new embedded view\n   * in the outlet using the header row definition.\n   */\n  _forceRenderHeaderRows() {\n    // Clear the header row outlet if any content exists.\n    if (this._headerRowOutlet.viewContainer.length > 0) {\n      this._headerRowOutlet.viewContainer.clear();\n    }\n    this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\n    this.updateStickyHeaderRowStyles();\n  }\n  /**\n   * Clears any existing content in the footer row outlet and creates a new embedded view\n   * in the outlet using the footer row definition.\n   */\n  _forceRenderFooterRows() {\n    // Clear the footer row outlet if any content exists.\n    if (this._footerRowOutlet.viewContainer.length > 0) {\n      this._footerRowOutlet.viewContainer.clear();\n    }\n    this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\n    this.updateStickyFooterRowStyles();\n  }\n  /** Adds the sticky column styles for the rows according to the columns' stick states. */\n  _addStickyColumnStyles(rows, rowDef) {\n    const columnDefs = Array.from(rowDef.columns || []).map(columnName => {\n      const columnDef = this._columnDefsByName.get(columnName);\n      if (!columnDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableUnknownColumnError(columnName);\n      }\n      return columnDef;\n    });\n    const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\n    const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\n    this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates, !this._fixedLayout || this._forceRecalculateCellWidths);\n  }\n  /** Gets the list of rows that have been rendered in the row outlet. */\n  _getRenderedRows(rowOutlet) {\n    const renderedRows = [];\n    for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n      const viewRef = rowOutlet.viewContainer.get(i);\n      renderedRows.push(viewRef.rootNodes[0]);\n    }\n    return renderedRows;\n  }\n  /**\n   * Get the matching row definitions that should be used for this row data. If there is only\n   * one row definition, it is returned. Otherwise, find the row definitions that has a when\n   * predicate that returns true with the data. If none return true, return the default row\n   * definition.\n   */\n  _getRowDefs(data, dataIndex) {\n    if (this._rowDefs.length == 1) {\n      return [this._rowDefs[0]];\n    }\n    let rowDefs = [];\n    if (this.multiTemplateDataRows) {\n      rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\n    } else {\n      let rowDef = this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n      if (rowDef) {\n        rowDefs.push(rowDef);\n      }\n    }\n    if (!rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTableMissingMatchingRowDefError(data);\n    }\n    return rowDefs;\n  }\n  _getEmbeddedViewArgs(renderRow, index) {\n    const rowDef = renderRow.rowDef;\n    const context = {\n      $implicit: renderRow.data\n    };\n    return {\n      templateRef: rowDef.template,\n      context,\n      index\n    };\n  }\n  /**\n   * Creates a new row template in the outlet and fills it with the set of cell templates.\n   * Optionally takes a context to provide to the row and cells, as well as an optional index\n   * of where to place the new row template in the outlet.\n   */\n  _renderRow(outlet, rowDef, index, context = {}) {\n    // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n    const view = outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n    this._renderCellTemplateForItem(rowDef, context);\n    return view;\n  }\n  _renderCellTemplateForItem(rowDef, context) {\n    for (let cellTemplate of this._getCellTemplates(rowDef)) {\n      if (CdkCellOutlet.mostRecentCellOutlet) {\n        CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Updates the index-related context for each row to reflect any changes in the index of the rows,\n   * e.g. first/last/even/odd.\n   */\n  _updateRowIndexContext() {\n    const viewContainer = this._rowOutlet.viewContainer;\n    for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n      const viewRef = viewContainer.get(renderIndex);\n      const context = viewRef.context;\n      context.count = count;\n      context.first = renderIndex === 0;\n      context.last = renderIndex === count - 1;\n      context.even = renderIndex % 2 === 0;\n      context.odd = !context.even;\n      if (this.multiTemplateDataRows) {\n        context.dataIndex = this._renderRows[renderIndex].dataIndex;\n        context.renderIndex = renderIndex;\n      } else {\n        context.index = this._renderRows[renderIndex].dataIndex;\n      }\n    }\n  }\n  /** Gets the column definitions for the provided row def. */\n  _getCellTemplates(rowDef) {\n    if (!rowDef || !rowDef.columns) {\n      return [];\n    }\n    return Array.from(rowDef.columns, columnId => {\n      const column = this._columnDefsByName.get(columnId);\n      if (!column && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getTableUnknownColumnError(columnId);\n      }\n      return rowDef.extractCellTemplate(column);\n    });\n  }\n  /** Adds native table sections (e.g. tbody) and moves the row outlets into them. */\n  _applyNativeTableSections() {\n    const documentFragment = this._document.createDocumentFragment();\n    const sections = [{\n      tag: 'thead',\n      outlets: [this._headerRowOutlet]\n    }, {\n      tag: 'tbody',\n      outlets: [this._rowOutlet, this._noDataRowOutlet]\n    }, {\n      tag: 'tfoot',\n      outlets: [this._footerRowOutlet]\n    }];\n    for (const section of sections) {\n      const element = this._document.createElement(section.tag);\n      element.setAttribute('role', 'rowgroup');\n      for (const outlet of section.outlets) {\n        element.appendChild(outlet.elementRef.nativeElement);\n      }\n      documentFragment.appendChild(element);\n    }\n    // Use a DocumentFragment so we don't hit the DOM on each iteration.\n    this._elementRef.nativeElement.appendChild(documentFragment);\n  }\n  /**\n   * Forces a re-render of the data rows. Should be called in cases where there has been an input\n   * change that affects the evaluation of which rows should be rendered, e.g. toggling\n   * `multiTemplateDataRows` or adding/removing row definitions.\n   */\n  _forceRenderDataRows() {\n    this._dataDiffer.diff([]);\n    this._rowOutlet.viewContainer.clear();\n    this.renderRows();\n  }\n  /**\n   * Checks if there has been a change in sticky states since last check and applies the correct\n   * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n   * during a change detection and after the inputs are settled (after content check).\n   */\n  _checkStickyStates() {\n    const stickyCheckReducer = (acc, d) => {\n      return acc || d.hasStickyChanged();\n    };\n    // Note that the check needs to occur for every definition since it notifies the definition\n    // that it can reset its dirty state. Using another operator like `some` may short-circuit\n    // remaining definitions and leave them in an unchecked state.\n    if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n      this.updateStickyHeaderRowStyles();\n    }\n    if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n      this.updateStickyFooterRowStyles();\n    }\n    if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n      this._stickyColumnStylesNeedReset = true;\n      this.updateStickyColumnStyles();\n    }\n  }\n  /**\n   * Creates the sticky styler that will be used for sticky rows and columns. Listens\n   * for directionality changes and provides the latest direction to the styler. Re-applies column\n   * stickiness when directionality changes.\n   */\n  _setupStickyStyler() {\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._coalescedStyleScheduler, this._platform.isBrowser, this.needsPositionStickyOnElement, this._stickyPositioningListener);\n    (this._dir ? this._dir.change : of()).pipe(takeUntil(this._onDestroy)).subscribe(value => {\n      this._stickyStyler.direction = value;\n      this.updateStickyColumnStyles();\n    });\n  }\n  /** Filters definitions that belong to this table from a QueryList. */\n  _getOwnDefs(items) {\n    return items.filter(item => !item._table || item._table === this);\n  }\n  /** Creates or removes the no data row, depending on whether any data is being shown. */\n  _updateNoDataRow() {\n    const noDataRow = this._customNoDataRow || this._noDataRow;\n    if (noDataRow) {\n      const shouldShow = this._rowOutlet.viewContainer.length === 0;\n      if (shouldShow !== this._isShowingNoDataRow) {\n        const container = this._noDataRowOutlet.viewContainer;\n        shouldShow ? container.createEmbeddedView(noDataRow.templateRef) : container.clear();\n        this._isShowingNoDataRow = shouldShow;\n      }\n    }\n  }\n}\nCdkTable.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'cdk-table, table[cdk-table]',\n    exportAs: 'cdkTable',\n    template: CDK_TABLE_TEMPLATE,\n    host: {\n      'class': 'cdk-table',\n      '[class.cdk-table-fixed-layout]': 'fixedLayout'\n    },\n    encapsulation: ViewEncapsulation.None,\n    // The \"OnPush\" status for the `MatTable` component is effectively a noop, so we are removing it.\n    // The view for `MatTable` consists entirely of templates declared in other views. As they are\n    // declared elsewhere, they are checked when their declaration points are checked.\n    // tslint:disable-next-line:validate-decorators\n    changeDetection: ChangeDetectionStrategy.Default,\n    providers: [{\n      provide: CDK_TABLE,\n      useExisting: CdkTable\n    }, {\n      provide: _VIEW_REPEATER_STRATEGY,\n      useClass: _DisposeViewRepeaterStrategy\n    }, {\n      provide: _COALESCED_STYLE_SCHEDULER,\n      useClass: _CoalescedStyleScheduler\n    },\n    // Prevent nested tables from seeing this table's StickyPositioningListener.\n    {\n      provide: STICKY_POSITIONING_LISTENER,\n      useValue: null\n    }],\n    styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"]\n  }]\n}];\nCdkTable.ctorParameters = () => [{\n  type: IterableDiffers\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: ElementRef\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['role']\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: Platform\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [_VIEW_REPEATER_STRATEGY]\n  }]\n}, {\n  type: _CoalescedStyleScheduler,\n  decorators: [{\n    type: Inject,\n    args: [_COALESCED_STYLE_SCHEDULER]\n  }]\n}, {\n  type: ViewportRuler\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: SkipSelf\n  }, {\n    type: Inject,\n    args: [STICKY_POSITIONING_LISTENER]\n  }]\n}];\nCdkTable.propDecorators = {\n  trackBy: [{\n    type: Input\n  }],\n  dataSource: [{\n    type: Input\n  }],\n  multiTemplateDataRows: [{\n    type: Input\n  }],\n  fixedLayout: [{\n    type: Input\n  }],\n  _rowOutlet: [{\n    type: ViewChild,\n    args: [DataRowOutlet, {\n      static: true\n    }]\n  }],\n  _headerRowOutlet: [{\n    type: ViewChild,\n    args: [HeaderRowOutlet, {\n      static: true\n    }]\n  }],\n  _footerRowOutlet: [{\n    type: ViewChild,\n    args: [FooterRowOutlet, {\n      static: true\n    }]\n  }],\n  _noDataRowOutlet: [{\n    type: ViewChild,\n    args: [NoDataRowOutlet, {\n      static: true\n    }]\n  }],\n  _contentColumnDefs: [{\n    type: ContentChildren,\n    args: [CdkColumnDef, {\n      descendants: true\n    }]\n  }],\n  _contentRowDefs: [{\n    type: ContentChildren,\n    args: [CdkRowDef, {\n      descendants: true\n    }]\n  }],\n  _contentHeaderRowDefs: [{\n    type: ContentChildren,\n    args: [CdkHeaderRowDef, {\n      descendants: true\n    }]\n  }],\n  _contentFooterRowDefs: [{\n    type: ContentChildren,\n    args: [CdkFooterRowDef, {\n      descendants: true\n    }]\n  }],\n  _noDataRow: [{\n    type: ContentChild,\n    args: [CdkNoDataRow]\n  }]\n};\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\nfunction mergeArrayAndSet(array, set) {\n  return array.concat(Array.from(set));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nclass CdkTextColumn {\n  constructor(\n  // `CdkTextColumn` is always requiring a table, but we just assert it manually\n  // for better error reporting.\n  // tslint:disable-next-line: lightweight-tokens\n  _table, _options) {\n    this._table = _table;\n    this._options = _options;\n    /** Alignment of the cell values. */\n    this.justify = 'start';\n    this._options = _options || {};\n  }\n  /** Column name that should be used to reference this column. */\n  get name() {\n    return this._name;\n  }\n  set name(name) {\n    this._name = name;\n    // With Ivy, inputs can be initialized before static query results are\n    // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n    this._syncColumnDefName();\n  }\n  ngOnInit() {\n    this._syncColumnDefName();\n    if (this.headerText === undefined) {\n      this.headerText = this._createDefaultHeaderText();\n    }\n    if (!this.dataAccessor) {\n      this.dataAccessor = this._options.defaultDataAccessor || ((data, name) => data[name]);\n    }\n    if (this._table) {\n      // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n      // since the columnDef will not pick up its content by the time the table finishes checking\n      // its content and initializing the rows.\n      this.columnDef.cell = this.cell;\n      this.columnDef.headerCell = this.headerCell;\n      this._table.addColumnDef(this.columnDef);\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw getTableTextColumnMissingParentTableError();\n    }\n  }\n  ngOnDestroy() {\n    if (this._table) {\n      this._table.removeColumnDef(this.columnDef);\n    }\n  }\n  /**\n   * Creates a default header text. Use the options' header text transformation function if one\n   * has been provided. Otherwise simply capitalize the column name.\n   */\n  _createDefaultHeaderText() {\n    const name = this.name;\n    if (!name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getTableTextColumnMissingNameError();\n    }\n    if (this._options && this._options.defaultHeaderTextTransform) {\n      return this._options.defaultHeaderTextTransform(name);\n    }\n    return name[0].toUpperCase() + name.slice(1);\n  }\n  /** Synchronizes the column definition name with the text column name. */\n  _syncColumnDefName() {\n    if (this.columnDef) {\n      this.columnDef.name = this.name;\n    }\n  }\n}\nCdkTextColumn.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'cdk-text-column',\n    template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n    encapsulation: ViewEncapsulation.None,\n    // Change detection is intentionally not set to OnPush. This component's template will be provided\n    // to the table to be inserted into its view. This is problematic when change detection runs since\n    // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n    // mean's the template in the table's view will not have the updated value (and in fact will cause\n    // an ExpressionChangedAfterItHasBeenCheckedError).\n    // tslint:disable-next-line:validate-decorators\n    changeDetection: ChangeDetectionStrategy.Default\n  }]\n}];\nCdkTextColumn.ctorParameters = () => [{\n  type: CdkTable,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [TEXT_COLUMN_OPTIONS]\n  }]\n}];\nCdkTextColumn.propDecorators = {\n  name: [{\n    type: Input\n  }],\n  headerText: [{\n    type: Input\n  }],\n  dataAccessor: [{\n    type: Input\n  }],\n  justify: [{\n    type: Input\n  }],\n  columnDef: [{\n    type: ViewChild,\n    args: [CdkColumnDef, {\n      static: true\n    }]\n  }],\n  cell: [{\n    type: ViewChild,\n    args: [CdkCellDef, {\n      static: true\n    }]\n  }],\n  headerCell: [{\n    type: ViewChild,\n    args: [CdkHeaderCellDef, {\n      static: true\n    }]\n  }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EXPORTED_DECLARATIONS = [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, CdkRecycleRows, NoDataRowOutlet];\nclass CdkTableModule {}\nCdkTableModule.decorators = [{\n  type: NgModule,\n  args: [{\n    exports: EXPORTED_DECLARATIONS,\n    declarations: EXPORTED_DECLARATIONS,\n    imports: [ScrollingModule]\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseCdkCell, BaseRowDef, CDK_ROW_TEMPLATE, CDK_TABLE, CDK_TABLE_TEMPLATE, CdkCell, CdkCellDef, CdkCellOutlet, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkFooterRow, CdkFooterRowDef, CdkHeaderCell, CdkHeaderCellDef, CdkHeaderRow, CdkHeaderRowDef, CdkNoDataRow, CdkRecycleRows, CdkRow, CdkRowDef, CdkTable, CdkTableModule, CdkTextColumn, DataRowOutlet, FooterRowOutlet, HeaderRowOutlet, NoDataRowOutlet, STICKY_DIRECTIONS, STICKY_POSITIONING_LISTENER, StickyStyler, TEXT_COLUMN_OPTIONS, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, _Schedule, mixinHasStickyInput };","map":{"version":3,"names":["Directionality","coerceBooleanProperty","_VIEW_REPEATER_STRATEGY","_RecycleViewRepeaterStrategy","isDataSource","_DisposeViewRepeaterStrategy","DataSource","Platform","ViewportRuler","ScrollingModule","DOCUMENT","InjectionToken","Directive","TemplateRef","Inject","Optional","Input","ContentChild","ElementRef","Injectable","NgZone","IterableDiffers","ViewContainerRef","Component","ChangeDetectionStrategy","ViewEncapsulation","EmbeddedViewRef","ChangeDetectorRef","Attribute","SkipSelf","ViewChild","ContentChildren","NgModule","Subject","from","BehaviorSubject","isObservable","of","takeUntil","take","mixinHasStickyInput","base","constructor","args","_sticky","_hasStickyChanged","sticky","v","prevValue","hasStickyChanged","resetStickyChanged","CDK_TABLE","TEXT_COLUMN_OPTIONS","CdkCellDef","template","decorators","type","selector","ctorParameters","CdkHeaderCellDef","CdkFooterCellDef","CdkColumnDefBase","_CdkColumnDefBase","CdkColumnDef","_table","_stickyEnd","name","_name","_setNameInput","stickyEnd","_updateColumnCssClassName","_columnCssClassName","cssClassFriendlyName","value","replace","inputs","providers","provide","useExisting","undefined","propDecorators","cell","headerCell","footerCell","BaseCdkCell","columnDef","elementRef","classList","nativeElement","className","add","CdkHeaderCell","host","CdkFooterCell","CdkCell","_Schedule","tasks","endTasks","_COALESCED_STYLE_SCHEDULER","_CoalescedStyleScheduler","_ngZone","_currentSchedule","_destroyed","schedule","task","_createScheduleIfNeeded","push","scheduleEnd","ngOnDestroy","next","complete","_getScheduleObservable","pipe","subscribe","length","isStable","Promise","resolve","onStable","CDK_ROW_TEMPLATE","BaseRowDef","_differs","ngOnChanges","changes","_columnsDiffer","columns","currentValue","find","create","diff","getColumnsDiff","extractCellTemplate","column","CdkHeaderRowDef","CdkFooterRowDef","CdkHeaderRowDefBase","_CdkHeaderRowDefBase","CdkFooterRowDefBase","_CdkFooterRowDefBase","CdkRowDef","CdkCellOutlet","_viewContainer","mostRecentCellOutlet","CdkHeaderRow","changeDetection","Default","encapsulation","None","CdkFooterRow","CdkRow","CdkNoDataRow","templateRef","STICKY_DIRECTIONS","StickyStyler","_isNativeHtmlTable","_stickCellCss","direction","_coalescedStyleScheduler","_isBrowser","_needsPositionStickyOnElement","_positionListener","_cachedCellWidths","_borderCellCss","clearStickyPositioning","rows","stickyDirections","elementsToClear","row","nodeType","ELEMENT_NODE","i","children","element","_removeStickyStyle","updateStickyColumns","stickyStartStates","stickyEndStates","recalculateCellWidths","some","state","stickyColumnsUpdated","sizes","stickyEndColumnsUpdated","firstRow","numCells","cellWidths","_getCellWidths","startPositions","_getStickyStartColumnPositions","endPositions","_getStickyEndColumnPositions","lastStickyStart","lastIndexOf","firstStickyEnd","indexOf","isRtl","start","end","_addStickyStyle","slice","map","width","index","reverse","stickRows","rowsToStick","stickyStates","position","states","stickyOffsets","stickyCellHeights","elementsToStick","rowIndex","stickyOffset","Array","height","getBoundingClientRect","borderedRowIndex","_a","_b","offset","isBorderedRowIndex","stickyHeaderRowsUpdated","offsets","elements","stickyFooterRowsUpdated","updateStickyFooterContainer","tableElement","tfoot","querySelector","dir","style","remove","hasDirection","zIndex","_getCalculatedZIndex","dirValue","isBorderElement","cssText","zIndexIncrements","top","bottom","left","right","firstRowCells","widths","positions","nextPosition","getTableUnknownColumnError","id","Error","getTableDuplicateColumnNameError","getTableMultipleDefaultRowDefsError","getTableMissingMatchingRowDefError","data","JSON","stringify","getTableMissingRowDefsError","getTableUnknownDataSourceError","getTableTextColumnMissingParentTableError","getTableTextColumnMissingNameError","STICKY_POSITIONING_LISTENER","CdkRecycleRows","useClass","DataRowOutlet","viewContainer","HeaderRowOutlet","FooterRowOutlet","NoDataRowOutlet","CDK_TABLE_TEMPLATE","RowViewRef","CdkTable","_changeDetectorRef","_elementRef","role","_dir","_document","_platform","_viewRepeater","_viewportRuler","_stickyPositioningListener","_onDestroy","_columnDefsByName","Map","_customColumnDefs","Set","_customRowDefs","_customHeaderRowDefs","_customFooterRowDefs","_headerRowDefChanged","_footerRowDefChanged","_stickyColumnStylesNeedReset","_forceRecalculateCellWidths","_cachedRenderRowsMap","stickyCssClass","needsPositionStickyOnElement","_isShowingNoDataRow","_multiTemplateDataRows","_fixedLayout","viewChange","Number","MAX_VALUE","setAttribute","nodeName","trackBy","_trackByFn","fn","ngDevMode","console","warn","dataSource","_dataSource","_switchDataSource","multiTemplateDataRows","_rowOutlet","_forceRenderDataRows","updateStickyColumnStyles","fixedLayout","ngOnInit","_setupStickyStyler","_applyNativeTableSections","_dataDiffer","_i","dataRow","dataIndex","change","ngAfterContentChecked","_cacheRowDefs","_cacheColumnDefs","_headerRowDefs","_footerRowDefs","_rowDefs","columnsChanged","_renderUpdatedColumns","rowDefsChanged","_forceRenderHeaderRows","_forceRenderFooterRows","_renderChangeSubscription","_observeRenderChanges","_checkStickyStates","clear","_noDataRowOutlet","_headerRowOutlet","_footerRowOutlet","disconnect","renderRows","_renderRows","_getAllRenderRows","_updateNoDataRow","applyChanges","record","_adjustedPreviousIndex","currentIndex","_getEmbeddedViewArgs","item","operation","context","_renderCellTemplateForItem","rowDef","_updateRowIndexContext","forEachIdentityChange","rowView","get","$implicit","addColumnDef","removeColumnDef","delete","addRowDef","removeRowDef","addHeaderRowDef","headerRowDef","removeHeaderRowDef","addFooterRowDef","footerRowDef","removeFooterRowDef","setNoDataRow","noDataRow","_customNoDataRow","updateStickyHeaderRowStyles","headerRows","_getRenderedRows","thead","display","def","_stickyStyler","forEach","updateStickyFooterRowStyles","footerRows","dataRows","headerRow","_addStickyColumnStyles","footerRow","values","prevCachedRenderRows","_data","renderRowsForData","_getRenderRowsForData","has","set","WeakMap","j","renderRow","cache","rowDefs","_getRowDefs","cachedRenderRows","shift","columnDefs","mergeArrayAndSet","_getOwnDefs","_contentColumnDefs","_contentHeaderRowDefs","_contentFooterRowDefs","_contentRowDefs","defaultRowDefs","filter","when","_defaultRowDef","columnsDiffReducer","acc","dataColumnsChanged","reduce","headerColumnsChanged","footerColumnsChanged","unsubscribe","dataStream","connect","isArray","_renderRow","columnName","rowOutlet","renderedRows","viewRef","rootNodes","outlet","view","createEmbeddedView","cellTemplate","_getCellTemplates","markForCheck","renderIndex","count","first","last","even","odd","columnId","documentFragment","createDocumentFragment","sections","tag","outlets","section","createElement","appendChild","stickyCheckReducer","d","isBrowser","items","_noDataRow","shouldShow","container","exportAs","useValue","styles","String","static","descendants","array","concat","CdkTextColumn","_options","justify","_syncColumnDefName","headerText","_createDefaultHeaderText","dataAccessor","defaultDataAccessor","defaultHeaderTextTransform","toUpperCase","EXPORTED_DECLARATIONS","CdkTableModule","exports","declarations","imports"],"sources":["D:/alodelivery test/node_modules/@angular/cdk/fesm2015/table.js"],"sourcesContent":["import { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, isDataSource, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nexport { DataSource } from '@angular/cdk/collections';\nimport { Platform } from '@angular/cdk/platform';\nimport { ViewportRuler, ScrollingModule } from '@angular/cdk/scrolling';\nimport { DOCUMENT } from '@angular/common';\nimport { InjectionToken, Directive, TemplateRef, Inject, Optional, Input, ContentChild, ElementRef, Injectable, NgZone, IterableDiffers, ViewContainerRef, Component, ChangeDetectionStrategy, ViewEncapsulation, EmbeddedViewRef, ChangeDetectorRef, Attribute, SkipSelf, ViewChild, ContentChildren, NgModule } from '@angular/core';\nimport { Subject, from, BehaviorSubject, isObservable, of } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * @docs-private\n */\nfunction mixinHasStickyInput(base) {\n    return class extends base {\n        constructor(...args) {\n            super(...args);\n            this._sticky = false;\n            /** Whether the sticky input has changed since it was last checked. */\n            this._hasStickyChanged = false;\n        }\n        /** Whether sticky positioning should be applied. */\n        get sticky() { return this._sticky; }\n        set sticky(v) {\n            const prevValue = this._sticky;\n            this._sticky = coerceBooleanProperty(v);\n            this._hasStickyChanged = prevValue !== this._sticky;\n        }\n        /** Whether the sticky value has changed since this was last called. */\n        hasStickyChanged() {\n            const hasStickyChanged = this._hasStickyChanged;\n            this._hasStickyChanged = false;\n            return hasStickyChanged;\n        }\n        /** Resets the dirty check for cases where the sticky state has been used without checking. */\n        resetStickyChanged() {\n            this._hasStickyChanged = false;\n        }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to provide a table to some of the sub-components without causing a circular dependency.\n * @docs-private\n */\nconst CDK_TABLE = new InjectionToken('CDK_TABLE');\n/** Injection token that can be used to specify the text column options. */\nconst TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass CdkCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkCellDef.decorators = [\n    { type: Directive, args: [{ selector: '[cdkCellDef]' },] }\n];\nCdkCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass CdkHeaderCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkHeaderCellDef.decorators = [\n    { type: Directive, args: [{ selector: '[cdkHeaderCellDef]' },] }\n];\nCdkHeaderCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass CdkFooterCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkFooterCellDef.decorators = [\n    { type: Directive, args: [{ selector: '[cdkFooterCellDef]' },] }\n];\nCdkFooterCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n// Boilerplate for applying mixins to CdkColumnDef.\n/** @docs-private */\nclass CdkColumnDefBase {\n}\nconst _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nclass CdkColumnDef extends _CdkColumnDefBase {\n    constructor(_table) {\n        super();\n        this._table = _table;\n        this._stickyEnd = false;\n    }\n    /** Unique name for this column. */\n    get name() { return this._name; }\n    set name(name) { this._setNameInput(name); }\n    /**\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n     * has been changed.\n     */\n    get stickyEnd() {\n        return this._stickyEnd;\n    }\n    set stickyEnd(v) {\n        const prevValue = this._stickyEnd;\n        this._stickyEnd = coerceBooleanProperty(v);\n        this._hasStickyChanged = prevValue !== this._stickyEnd;\n    }\n    /**\n     * Overridable method that sets the css classes that will be added to every cell in this\n     * column.\n     * In the future, columnCssClassName will change from type string[] to string and this\n     * will set a single string value.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n        this._columnCssClassName = [`cdk-column-${this.cssClassFriendlyName}`];\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setNameInput(value) {\n        // If the directive is set without a name (updated programmatically), then this setter will\n        // trigger with an empty string and should not overwrite the programmatically set value.\n        if (value) {\n            this._name = value;\n            this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/ig, '-');\n            this._updateColumnCssClassName();\n        }\n    }\n}\nCdkColumnDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkColumnDef]',\n                inputs: ['sticky'],\n                providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }],\n            },] }\n];\nCdkColumnDef.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\n];\nCdkColumnDef.propDecorators = {\n    name: [{ type: Input, args: ['cdkColumnDef',] }],\n    stickyEnd: [{ type: Input, args: ['stickyEnd',] }],\n    cell: [{ type: ContentChild, args: [CdkCellDef,] }],\n    headerCell: [{ type: ContentChild, args: [CdkHeaderCellDef,] }],\n    footerCell: [{ type: ContentChild, args: [CdkFooterCellDef,] }]\n};\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\nclass BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        // If IE 11 is dropped before we switch to setting a single class name, change to multi param\n        // with destructuring.\n        const classList = elementRef.nativeElement.classList;\n        for (const className of columnDef._columnCssClassName) {\n            classList.add(className);\n        }\n    }\n}\n/** Header cell template container that adds the right classes and role. */\nclass CdkHeaderCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkHeaderCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-header-cell, th[cdk-header-cell]',\n                host: {\n                    'class': 'cdk-header-cell',\n                    'role': 'columnheader',\n                },\n            },] }\n];\nCdkHeaderCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n/** Footer cell template container that adds the right classes and role. */\nclass CdkFooterCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkFooterCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n                host: {\n                    'class': 'cdk-footer-cell',\n                    'role': 'gridcell',\n                },\n            },] }\n];\nCdkFooterCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n/** Cell template container that adds the right classes and role. */\nclass CdkCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-cell, td[cdk-cell]',\n                host: {\n                    'class': 'cdk-cell',\n                    'role': 'gridcell',\n                },\n            },] }\n];\nCdkCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @docs-private\n */\nclass _Schedule {\n    constructor() {\n        this.tasks = [];\n        this.endTasks = [];\n    }\n}\n/** Injection token used to provide a coalesced style scheduler. */\nconst _COALESCED_STYLE_SCHEDULER = new InjectionToken('_COALESCED_STYLE_SCHEDULER');\n/**\n * Allows grouping up CSSDom mutations after the current execution context.\n * This can significantly improve performance when separate consecutive functions are\n * reading from the CSSDom and then mutating it.\n *\n * @docs-private\n */\nclass _CoalescedStyleScheduler {\n    constructor(_ngZone) {\n        this._ngZone = _ngZone;\n        this._currentSchedule = null;\n        this._destroyed = new Subject();\n    }\n    /**\n     * Schedules the specified task to run at the end of the current VM turn.\n     */\n    schedule(task) {\n        this._createScheduleIfNeeded();\n        this._currentSchedule.tasks.push(task);\n    }\n    /**\n     * Schedules the specified task to run after other scheduled tasks at the end of the current\n     * VM turn.\n     */\n    scheduleEnd(task) {\n        this._createScheduleIfNeeded();\n        this._currentSchedule.endTasks.push(task);\n    }\n    /** Prevent any further tasks from running. */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    _createScheduleIfNeeded() {\n        if (this._currentSchedule) {\n            return;\n        }\n        this._currentSchedule = new _Schedule();\n        this._getScheduleObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n            while (this._currentSchedule.tasks.length || this._currentSchedule.endTasks.length) {\n                const schedule = this._currentSchedule;\n                // Capture new tasks scheduled by the current set of tasks.\n                this._currentSchedule = new _Schedule();\n                for (const task of schedule.tasks) {\n                    task();\n                }\n                for (const task of schedule.endTasks) {\n                    task();\n                }\n            }\n            this._currentSchedule = null;\n        });\n    }\n    _getScheduleObservable() {\n        // Use onStable when in the context of an ongoing change detection cycle so that we\n        // do not accidentally trigger additional cycles.\n        return this._ngZone.isStable ?\n            from(Promise.resolve(undefined)) :\n            this._ngZone.onStable.pipe(take(1));\n    }\n}\n_CoalescedStyleScheduler.decorators = [\n    { type: Injectable }\n];\n_CoalescedStyleScheduler.ctorParameters = () => [\n    { type: NgZone }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\nclass BaseRowDef {\n    constructor(\n    /** @docs-private */ template, _differs) {\n        this.template = template;\n        this._differs = _differs;\n    }\n    ngOnChanges(changes) {\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n        // of the columns property or an empty array if none is provided.\n        if (!this._columnsDiffer) {\n            const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n            this._columnsDiffer = this._differs.find(columns).create();\n            this._columnsDiffer.diff(columns);\n        }\n    }\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     */\n    getColumnsDiff() {\n        return this._columnsDiffer.diff(this.columns);\n    }\n    /** Gets this row def's relevant cell template from the provided column def. */\n    extractCellTemplate(column) {\n        if (this instanceof CdkHeaderRowDef) {\n            return column.headerCell.template;\n        }\n        if (this instanceof CdkFooterRowDef) {\n            return column.footerCell.template;\n        }\n        else {\n            return column.cell.template;\n        }\n    }\n}\nBaseRowDef.decorators = [\n    { type: Directive }\n];\nBaseRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers }\n];\n// Boilerplate for applying mixins to CdkHeaderRowDef.\n/** @docs-private */\nclass CdkHeaderRowDefBase extends BaseRowDef {\n}\nconst _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass CdkHeaderRowDef extends _CdkHeaderRowDefBase {\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkHeaderRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkHeaderRowDef]',\n                inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky'],\n            },] }\n];\nCdkHeaderRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\n];\n// Boilerplate for applying mixins to CdkFooterRowDef.\n/** @docs-private */\nclass CdkFooterRowDefBase extends BaseRowDef {\n}\nconst _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass CdkFooterRowDef extends _CdkFooterRowDefBase {\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkFooterRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkFooterRowDef]',\n                inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky'],\n            },] }\n];\nCdkFooterRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\n];\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nclass CdkRowDef extends BaseRowDef {\n    // TODO(andrewseguin): Add an input for providing a switch function to determine\n    //   if this template should be used.\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n}\nCdkRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkRowDef]',\n                inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen'],\n            },] }\n];\nCdkRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\n];\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\nclass CdkCellOutlet {\n    constructor(_viewContainer) {\n        this._viewContainer = _viewContainer;\n        CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n    ngOnDestroy() {\n        // If this was the last outlet being rendered in the view, remove the reference\n        // from the static property after it has been destroyed to avoid leaking memory.\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\n            CdkCellOutlet.mostRecentCellOutlet = null;\n        }\n    }\n}\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\nCdkCellOutlet.mostRecentCellOutlet = null;\nCdkCellOutlet.decorators = [\n    { type: Directive, args: [{ selector: '[cdkCellOutlet]' },] }\n];\nCdkCellOutlet.ctorParameters = () => [\n    { type: ViewContainerRef }\n];\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass CdkHeaderRow {\n}\nCdkHeaderRow.decorators = [\n    { type: Component, args: [{\n                selector: 'cdk-header-row, tr[cdk-header-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-header-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None\n            },] }\n];\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass CdkFooterRow {\n}\nCdkFooterRow.decorators = [\n    { type: Component, args: [{\n                selector: 'cdk-footer-row, tr[cdk-footer-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-footer-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None\n            },] }\n];\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass CdkRow {\n}\nCdkRow.decorators = [\n    { type: Component, args: [{\n                selector: 'cdk-row, tr[cdk-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None\n            },] }\n];\n/** Row that can be used to display a message when no data is shown in the table. */\nclass CdkNoDataRow {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkNoDataRow.decorators = [\n    { type: Directive, args: [{\n                selector: 'ng-template[cdkNoDataRow]'\n            },] }\n];\nCdkNoDataRow.ctorParameters = () => [\n    { type: TemplateRef }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * List of all possible directions that can be used for sticky positioning.\n * @docs-private\n */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * @docs-private\n */\nclass StickyStyler {\n    /**\n     * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n     *     that uses the native `<table>` element.\n     * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n     *     sticky positioning applied.\n     * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n     *     by reversing left/right positions.\n     * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n     * @param _needsPositionStickyOnElement Whether we need to specify position: sticky on cells\n     *     using inline styles. If false, it is assumed that position: sticky is included in\n     *     the component stylesheet for _stickCellCss.\n     * @param _positionListener A listener that is notified of changes to sticky rows/columns\n     *     and their dimensions.\n     */\n    constructor(_isNativeHtmlTable, _stickCellCss, direction, _coalescedStyleScheduler, _isBrowser = true, _needsPositionStickyOnElement = true, _positionListener) {\n        this._isNativeHtmlTable = _isNativeHtmlTable;\n        this._stickCellCss = _stickCellCss;\n        this.direction = direction;\n        this._coalescedStyleScheduler = _coalescedStyleScheduler;\n        this._isBrowser = _isBrowser;\n        this._needsPositionStickyOnElement = _needsPositionStickyOnElement;\n        this._positionListener = _positionListener;\n        this._cachedCellWidths = [];\n        this._borderCellCss = {\n            'top': `${_stickCellCss}-border-elem-top`,\n            'bottom': `${_stickCellCss}-border-elem-bottom`,\n            'left': `${_stickCellCss}-border-elem-left`,\n            'right': `${_stickCellCss}-border-elem-right`,\n        };\n    }\n    /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param rows The list of rows that should be cleared from sticking in the provided directions\n     * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n     */\n    clearStickyPositioning(rows, stickyDirections) {\n        const elementsToClear = [];\n        for (const row of rows) {\n            // If the row isn't an element (e.g. if it's an `ng-container`),\n            // it won't have inline styles or `children` so we skip it.\n            if (row.nodeType !== row.ELEMENT_NODE) {\n                continue;\n            }\n            elementsToClear.push(row);\n            for (let i = 0; i < row.children.length; i++) {\n                elementsToClear.push(row.children[i]);\n            }\n        }\n        // Coalesce with sticky row/column updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            for (const element of elementsToClear) {\n                this._removeStickyStyle(element, stickyDirections);\n            }\n        });\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @param recalculateCellWidths Whether the sticky styler should recalculate the width of each\n     *     column cell. If `false` cached widths will be used instead.\n     */\n    updateStickyColumns(rows, stickyStartStates, stickyEndStates, recalculateCellWidths = true) {\n        if (!rows.length || !this._isBrowser || !(stickyStartStates.some(state => state) ||\n            stickyEndStates.some(state => state))) {\n            if (this._positionListener) {\n                this._positionListener.stickyColumnsUpdated({ sizes: [] });\n                this._positionListener.stickyEndColumnsUpdated({ sizes: [] });\n            }\n            return;\n        }\n        const firstRow = rows[0];\n        const numCells = firstRow.children.length;\n        const cellWidths = this._getCellWidths(firstRow, recalculateCellWidths);\n        const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n        const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n        const lastStickyStart = stickyStartStates.lastIndexOf(true);\n        const firstStickyEnd = stickyEndStates.indexOf(true);\n        // Coalesce with sticky row updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            const isRtl = this.direction === 'rtl';\n            const start = isRtl ? 'right' : 'left';\n            const end = isRtl ? 'left' : 'right';\n            for (const row of rows) {\n                for (let i = 0; i < numCells; i++) {\n                    const cell = row.children[i];\n                    if (stickyStartStates[i]) {\n                        this._addStickyStyle(cell, start, startPositions[i], i === lastStickyStart);\n                    }\n                    if (stickyEndStates[i]) {\n                        this._addStickyStyle(cell, end, endPositions[i], i === firstStickyEnd);\n                    }\n                }\n            }\n            if (this._positionListener) {\n                this._positionListener.stickyColumnsUpdated({\n                    sizes: lastStickyStart === -1 ?\n                        [] :\n                        cellWidths\n                            .slice(0, lastStickyStart + 1)\n                            .map((width, index) => stickyStartStates[index] ? width : null)\n                });\n                this._positionListener.stickyEndColumnsUpdated({\n                    sizes: firstStickyEnd === -1 ?\n                        [] :\n                        cellWidths\n                            .slice(firstStickyEnd)\n                            .map((width, index) => stickyEndStates[index + firstStickyEnd] ? width : null)\n                            .reverse()\n                });\n            }\n        });\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     */\n    stickRows(rowsToStick, stickyStates, position) {\n        // Since we can't measure the rows on the server, we can't stick the rows properly.\n        if (!this._isBrowser) {\n            return;\n        }\n        // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n        // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\n        // sticky states need to be reversed as well.\n        const rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\n        const states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates;\n        // Measure row heights all at once before adding sticky styles to reduce layout thrashing.\n        const stickyOffsets = [];\n        const stickyCellHeights = [];\n        const elementsToStick = [];\n        for (let rowIndex = 0, stickyOffset = 0; rowIndex < rows.length; rowIndex++) {\n            if (!states[rowIndex]) {\n                continue;\n            }\n            stickyOffsets[rowIndex] = stickyOffset;\n            const row = rows[rowIndex];\n            elementsToStick[rowIndex] = this._isNativeHtmlTable ?\n                Array.from(row.children) : [row];\n            const height = row.getBoundingClientRect().height;\n            stickyOffset += height;\n            stickyCellHeights[rowIndex] = height;\n        }\n        const borderedRowIndex = states.lastIndexOf(true);\n        // Coalesce with other sticky row updates (top/bottom), sticky columns updates\n        // (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            var _a, _b;\n            for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n                if (!states[rowIndex]) {\n                    continue;\n                }\n                const offset = stickyOffsets[rowIndex];\n                const isBorderedRowIndex = rowIndex === borderedRowIndex;\n                for (const element of elementsToStick[rowIndex]) {\n                    this._addStickyStyle(element, position, offset, isBorderedRowIndex);\n                }\n            }\n            if (position === 'top') {\n                (_a = this._positionListener) === null || _a === void 0 ? void 0 : _a.stickyHeaderRowsUpdated({ sizes: stickyCellHeights, offsets: stickyOffsets, elements: elementsToStick });\n            }\n            else {\n                (_b = this._positionListener) === null || _b === void 0 ? void 0 : _b.stickyFooterRowsUpdated({ sizes: stickyCellHeights, offsets: stickyOffsets, elements: elementsToStick });\n            }\n        });\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     */\n    updateStickyFooterContainer(tableElement, stickyStates) {\n        if (!this._isNativeHtmlTable) {\n            return;\n        }\n        const tfoot = tableElement.querySelector('tfoot');\n        // Coalesce with other sticky updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            if (stickyStates.some(state => !state)) {\n                this._removeStickyStyle(tfoot, ['bottom']);\n            }\n            else {\n                this._addStickyStyle(tfoot, 'bottom', 0, false);\n            }\n        });\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     */\n    _removeStickyStyle(element, stickyDirections) {\n        for (const dir of stickyDirections) {\n            element.style[dir] = '';\n            element.classList.remove(this._borderCellCss[dir]);\n        }\n        // If the element no longer has any more sticky directions, remove sticky positioning and\n        // the sticky CSS class.\n        // Short-circuit checking element.style[dir] for stickyDirections as they\n        // were already removed above.\n        const hasDirection = STICKY_DIRECTIONS.some(dir => stickyDirections.indexOf(dir) === -1 && element.style[dir]);\n        if (hasDirection) {\n            element.style.zIndex = this._getCalculatedZIndex(element);\n        }\n        else {\n            // When not hasDirection, _getCalculatedZIndex will always return ''.\n            element.style.zIndex = '';\n            if (this._needsPositionStickyOnElement) {\n                element.style.position = '';\n            }\n            element.classList.remove(this._stickCellCss);\n        }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     */\n    _addStickyStyle(element, dir, dirValue, isBorderElement) {\n        element.classList.add(this._stickCellCss);\n        if (isBorderElement) {\n            element.classList.add(this._borderCellCss[dir]);\n        }\n        element.style[dir] = `${dirValue}px`;\n        element.style.zIndex = this._getCalculatedZIndex(element);\n        if (this._needsPositionStickyOnElement) {\n            element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n        }\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     */\n    _getCalculatedZIndex(element) {\n        const zIndexIncrements = {\n            top: 100,\n            bottom: 10,\n            left: 1,\n            right: 1,\n        };\n        let zIndex = 0;\n        // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n        // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n        // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n        for (const dir of STICKY_DIRECTIONS) {\n            if (element.style[dir]) {\n                zIndex += zIndexIncrements[dir];\n            }\n        }\n        return zIndex ? `${zIndex}` : '';\n    }\n    /** Gets the widths for each cell in the provided row. */\n    _getCellWidths(row, recalculateCellWidths = true) {\n        if (!recalculateCellWidths && this._cachedCellWidths.length) {\n            return this._cachedCellWidths;\n        }\n        const cellWidths = [];\n        const firstRowCells = row.children;\n        for (let i = 0; i < firstRowCells.length; i++) {\n            let cell = firstRowCells[i];\n            cellWidths.push(cell.getBoundingClientRect().width);\n        }\n        this._cachedCellWidths = cellWidths;\n        return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyStartColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = 0; i < widths.length; i++) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyEndColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = widths.length; i > 0; i--) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * @param id Id whose lookup failed.\n * @docs-private\n */\nfunction getTableUnknownColumnError(id) {\n    return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * @docs-private\n */\nfunction getTableDuplicateColumnNameError(name) {\n    return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * @docs-private\n */\nfunction getTableMultipleDefaultRowDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * @docs-private\n */\nfunction getTableMissingMatchingRowDefError(data) {\n    return Error(`Could not find a matching row definition for the` +\n        `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * @docs-private\n */\nfunction getTableMissingRowDefsError() {\n    return Error('Missing definitions for header, footer, and row; ' +\n        'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * @docs-private\n */\nfunction getTableUnknownDataSourceError() {\n    return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * @docs-private\n */\nfunction getTableTextColumnMissingParentTableError() {\n    return Error(`Text column could not find a parent table for registration.`);\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * @docs-private\n */\nfunction getTableTextColumnMissingNameError() {\n    return Error(`Table text column must have a name.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The injection token used to specify the StickyPositioningListener. */\nconst STICKY_POSITIONING_LISTENER = new InjectionToken('CDK_SPL');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\nclass CdkRecycleRows {\n}\nCdkRecycleRows.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-table[recycleRows], table[cdk-table][recycleRows]',\n                providers: [\n                    { provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy },\n                ],\n            },] }\n];\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * @docs-private\n */\nclass DataRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nDataRowOutlet.decorators = [\n    { type: Directive, args: [{ selector: '[rowOutlet]' },] }\n];\nDataRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * @docs-private\n */\nclass HeaderRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nHeaderRowOutlet.decorators = [\n    { type: Directive, args: [{ selector: '[headerRowOutlet]' },] }\n];\nHeaderRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * @docs-private\n */\nclass FooterRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nFooterRowOutlet.decorators = [\n    { type: Directive, args: [{ selector: '[footerRowOutlet]' },] }\n];\nFooterRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n/**\n * Provides a handle for the table to grab the view\n * container's ng-container to insert the no data row.\n * @docs-private\n */\nclass NoDataRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nNoDataRowOutlet.decorators = [\n    { type: Directive, args: [{ selector: '[noDataRowOutlet]' },] }\n];\nNoDataRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @docs-private\n */\nconst CDK_TABLE_TEMPLATE = \n// Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n`\n  <ng-content select=\"caption\"></ng-content>\n  <ng-content select=\"colgroup, col\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container noDataRowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n`;\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * @docs-private\n */\nclass RowViewRef extends EmbeddedViewRef {\n}\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n */\nclass CdkTable {\n    constructor(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform, _viewRepeater, _coalescedStyleScheduler, _viewportRuler, \n    /**\n     * @deprecated `_stickyPositioningListener` parameter to become required.\n     * @breaking-change 13.0.0\n     */\n    _stickyPositioningListener) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        this._platform = _platform;\n        this._viewRepeater = _viewRepeater;\n        this._coalescedStyleScheduler = _coalescedStyleScheduler;\n        this._viewportRuler = _viewportRuler;\n        this._stickyPositioningListener = _stickyPositioningListener;\n        /** Subject that emits when the component has been destroyed. */\n        this._onDestroy = new Subject();\n        /**\n         * Map of all the user's defined columns (header, data, and footer cell template) identified by\n         * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n         * any custom column definitions added to `_customColumnDefs`.\n         */\n        this._columnDefsByName = new Map();\n        /**\n         * Column definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * column definitions as *its* content child.\n         */\n        this._customColumnDefs = new Set();\n        /**\n         * Data row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in data rows as *its* content child.\n         */\n        this._customRowDefs = new Set();\n        /**\n         * Header row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in header rows as *its* content child.\n         */\n        this._customHeaderRowDefs = new Set();\n        /**\n         * Footer row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n         * built-in footer row as *its* content child.\n         */\n        this._customFooterRowDefs = new Set();\n        /**\n         * Whether the header row definition has been changed. Triggers an update to the header row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._headerRowDefChanged = true;\n        /**\n         * Whether the footer row definition has been changed. Triggers an update to the footer row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._footerRowDefChanged = true;\n        /**\n         * Whether the sticky column styles need to be updated. Set to `true` when the visible columns\n         * change.\n         */\n        this._stickyColumnStylesNeedReset = true;\n        /**\n         * Whether the sticky styler should recalculate cell widths when applying sticky styles. If\n         * `false`, cached values will be used instead. This is only applicable to tables with\n         * {@link fixedLayout} enabled. For other tables, cell widths will always be recalculated.\n         */\n        this._forceRecalculateCellWidths = true;\n        /**\n         * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n         * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n         * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n         * and row template matches, which allows the `IterableDiffer` to check rows by reference\n         * and understand which rows are added/moved/removed.\n         *\n         * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n         * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n         * contains an array of created pairs. The array is necessary to handle cases where the data\n         * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n         * stored.\n         */\n        this._cachedRenderRowsMap = new Map();\n        /**\n         * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n         * table subclasses.\n         */\n        this.stickyCssClass = 'cdk-table-sticky';\n        /**\n         * Whether to manually add positon: sticky to all sticky cell elements. Not needed if\n         * the position is set in a selector associated with the value of stickyCssClass. May be\n         * overridden by table subclasses\n         */\n        this.needsPositionStickyOnElement = true;\n        /** Whether the no data row is currently showing anything. */\n        this._isShowingNoDataRow = false;\n        this._multiTemplateDataRows = false;\n        this._fixedLayout = false;\n        // TODO(andrewseguin): Remove max value as the end index\n        //   and instead calculate the view on init and scroll.\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         *\n         * @docs-private\n         */\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n        if (!role) {\n            this._elementRef.nativeElement.setAttribute('role', 'grid');\n        }\n        this._document = _document;\n        this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n    }\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     */\n    get trackBy() {\n        return this._trackByFn;\n    }\n    set trackBy(fn) {\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\n            console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n        }\n        this._trackByFn = fn;\n    }\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     * If a data array is provided, the table must be notified when the array's objects are\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n     * render the diff since the last table render. If the data array reference is changed, the table\n     * will automatically trigger an update to the rows.\n     *\n     * When providing an Observable stream, the table will trigger an update automatically when the\n     * stream emits a new array of data.\n     *\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\n     * provided by the connect function and trigger updates when that stream emits new data array\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n     * subscriptions registered during the connect process).\n     */\n    get dataSource() {\n        return this._dataSource;\n    }\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    /**\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\n     * defined in the table, or otherwise the default row which does not have a when predicate.\n     */\n    get multiTemplateDataRows() {\n        return this._multiTemplateDataRows;\n    }\n    set multiTemplateDataRows(v) {\n        this._multiTemplateDataRows = coerceBooleanProperty(v);\n        // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n        // this setter will be invoked before the row outlet has been defined hence the null check.\n        if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n            this._forceRenderDataRows();\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Whether to use a fixed table layout. Enabling this option will enforce consistent column widths\n     * and optimize rendering sticky styles for native tables. No-op for flex tables.\n     */\n    get fixedLayout() {\n        return this._fixedLayout;\n    }\n    set fixedLayout(v) {\n        this._fixedLayout = coerceBooleanProperty(v);\n        // Toggling `fixedLayout` may change column widths. Sticky column styles should be recalculated.\n        this._forceRecalculateCellWidths = true;\n        this._stickyColumnStylesNeedReset = true;\n    }\n    ngOnInit() {\n        this._setupStickyStyler();\n        if (this._isNativeHtmlTable) {\n            this._applyNativeTableSections();\n        }\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n        // the user has provided a custom trackBy, return the result of that function as evaluated\n        // with the values of the `RenderRow`'s data and index.\n        this._dataDiffer = this._differs.find([]).create((_i, dataRow) => {\n            return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n        });\n        this._viewportRuler.change().pipe(takeUntil(this._onDestroy)).subscribe(() => {\n            this._forceRecalculateCellWidths = true;\n        });\n    }\n    ngAfterContentChecked() {\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n        this._cacheRowDefs();\n        this._cacheColumnDefs();\n        // Make sure that the user has at least added header, footer, or data row def.\n        if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMissingRowDefsError();\n        }\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\n        const columnsChanged = this._renderUpdatedColumns();\n        const rowDefsChanged = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged;\n        // Ensure sticky column styles are reset if set to `true` elsewhere.\n        this._stickyColumnStylesNeedReset = this._stickyColumnStylesNeedReset || rowDefsChanged;\n        this._forceRecalculateCellWidths = rowDefsChanged;\n        // If the header row definition has been changed, trigger a render to the header row.\n        if (this._headerRowDefChanged) {\n            this._forceRenderHeaderRows();\n            this._headerRowDefChanged = false;\n        }\n        // If the footer row definition has been changed, trigger a render to the footer row.\n        if (this._footerRowDefChanged) {\n            this._forceRenderFooterRows();\n            this._footerRowDefChanged = false;\n        }\n        // If there is a data source and row definitions, connect to the data source unless a\n        // connection has already been made.\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n            this._observeRenderChanges();\n        }\n        else if (this._stickyColumnStylesNeedReset) {\n            // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being\n            // called when it row data arrives. Otherwise, we need to call it proactively.\n            this.updateStickyColumnStyles();\n        }\n        this._checkStickyStates();\n    }\n    ngOnDestroy() {\n        this._rowOutlet.viewContainer.clear();\n        this._noDataRowOutlet.viewContainer.clear();\n        this._headerRowOutlet.viewContainer.clear();\n        this._footerRowOutlet.viewContainer.clear();\n        this._cachedRenderRowsMap.clear();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n    }\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     */\n    renderRows() {\n        this._renderRows = this._getAllRenderRows();\n        const changes = this._dataDiffer.diff(this._renderRows);\n        if (!changes) {\n            this._updateNoDataRow();\n            return;\n        }\n        const viewContainer = this._rowOutlet.viewContainer;\n        this._viewRepeater.applyChanges(changes, viewContainer, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record.item, currentIndex), (record) => record.item.data, (change) => {\n            if (change.operation === 1 /* INSERTED */ && change.context) {\n                this._renderCellTemplateForItem(change.record.item.rowDef, change.context);\n            }\n        });\n        // Update the meta context of a row's context data (index, count, first, last, ...)\n        this._updateRowIndexContext();\n        // Update rows that did not get added/removed/moved but may have had their identity changed,\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\n        changes.forEachIdentityChange((record) => {\n            const rowView = viewContainer.get(record.currentIndex);\n            rowView.context.$implicit = record.item.data;\n        });\n        this._updateNoDataRow();\n        this.updateStickyColumnStyles();\n    }\n    /** Adds a column definition that was not included as part of the content children. */\n    addColumnDef(columnDef) {\n        this._customColumnDefs.add(columnDef);\n    }\n    /** Removes a column definition that was not included as part of the content children. */\n    removeColumnDef(columnDef) {\n        this._customColumnDefs.delete(columnDef);\n    }\n    /** Adds a row definition that was not included as part of the content children. */\n    addRowDef(rowDef) {\n        this._customRowDefs.add(rowDef);\n    }\n    /** Removes a row definition that was not included as part of the content children. */\n    removeRowDef(rowDef) {\n        this._customRowDefs.delete(rowDef);\n    }\n    /** Adds a header row definition that was not included as part of the content children. */\n    addHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.add(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Removes a header row definition that was not included as part of the content children. */\n    removeHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.delete(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Adds a footer row definition that was not included as part of the content children. */\n    addFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.add(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Removes a footer row definition that was not included as part of the content children. */\n    removeFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.delete(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Sets a no data row definition that was not included as a part of the content children. */\n    setNoDataRow(noDataRow) {\n        this._customNoDataRow = noDataRow;\n    }\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyHeaderRowStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        const tableElement = this._elementRef.nativeElement;\n        // Hide the thead element if there are no header rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        const thead = tableElement.querySelector('thead');\n        if (thead) {\n            thead.style.display = headerRows.length ? '' : 'none';\n        }\n        const stickyStates = this._headerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._headerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyFooterRowStyles() {\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        const tableElement = this._elementRef.nativeElement;\n        // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        const tfoot = tableElement.querySelector('tfoot');\n        if (tfoot) {\n            tfoot.style.display = footerRows.length ? '' : 'none';\n        }\n        const stickyStates = this._footerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._footerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     */\n    updateStickyColumnStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        const dataRows = this._getRenderedRows(this._rowOutlet);\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // For tables not using a fixed layout, the column widths may change when new rows are rendered.\n        // In a table using a fixed layout, row content won't affect column width, so sticky styles\n        // don't need to be cleared unless either the sticky column config changes or one of the row\n        // defs change.\n        if ((this._isNativeHtmlTable && !this._fixedLayout)\n            || this._stickyColumnStylesNeedReset) {\n            // Clear the left and right positioning from all columns in the table across all rows since\n            // sticky columns span across all table sections (header, data, footer)\n            this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n            this._stickyColumnStylesNeedReset = false;\n        }\n        // Update the sticky styles for each header row depending on the def's sticky state\n        headerRows.forEach((headerRow, i) => {\n            this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n        });\n        // Update the sticky styles for each data row depending on its def's sticky state\n        this._rowDefs.forEach(rowDef => {\n            // Collect all the rows rendered with this row definition.\n            const rows = [];\n            for (let i = 0; i < dataRows.length; i++) {\n                if (this._renderRows[i].rowDef === rowDef) {\n                    rows.push(dataRows[i]);\n                }\n            }\n            this._addStickyColumnStyles(rows, rowDef);\n        });\n        // Update the sticky styles for each footer row depending on the def's sticky state\n        footerRows.forEach((footerRow, i) => {\n            this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n        });\n        // Reset the dirty state of the sticky input change since it has been used.\n        Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     */\n    _getAllRenderRows() {\n        const renderRows = [];\n        // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n        // new cache while unused ones can be picked up by garbage collection.\n        const prevCachedRenderRows = this._cachedRenderRowsMap;\n        this._cachedRenderRowsMap = new Map();\n        // For each data object, get the list of rows that should be rendered, represented by the\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n        for (let i = 0; i < this._data.length; i++) {\n            let data = this._data[i];\n            const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n            if (!this._cachedRenderRowsMap.has(data)) {\n                this._cachedRenderRowsMap.set(data, new WeakMap());\n            }\n            for (let j = 0; j < renderRowsForData.length; j++) {\n                let renderRow = renderRowsForData[j];\n                const cache = this._cachedRenderRowsMap.get(renderRow.data);\n                if (cache.has(renderRow.rowDef)) {\n                    cache.get(renderRow.rowDef).push(renderRow);\n                }\n                else {\n                    cache.set(renderRow.rowDef, [renderRow]);\n                }\n                renderRows.push(renderRow);\n            }\n        }\n        return renderRows;\n    }\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     */\n    _getRenderRowsForData(data, dataIndex, cache) {\n        const rowDefs = this._getRowDefs(data, dataIndex);\n        return rowDefs.map(rowDef => {\n            const cachedRenderRows = (cache && cache.has(rowDef)) ? cache.get(rowDef) : [];\n            if (cachedRenderRows.length) {\n                const dataRow = cachedRenderRows.shift();\n                dataRow.dataIndex = dataIndex;\n                return dataRow;\n            }\n            else {\n                return { data, rowDef, dataIndex };\n            }\n        });\n    }\n    /** Update the map containing the content's column definitions. */\n    _cacheColumnDefs() {\n        this._columnDefsByName.clear();\n        const columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\n        columnDefs.forEach(columnDef => {\n            if (this._columnDefsByName.has(columnDef.name) &&\n                (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableDuplicateColumnNameError(columnDef.name);\n            }\n            this._columnDefsByName.set(columnDef.name, columnDef);\n        });\n    }\n    /** Update the list of all available row definitions that can be used. */\n    _cacheRowDefs() {\n        this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\n        this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\n        this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs);\n        // After all row definitions are determined, find the row definition to be considered default.\n        const defaultRowDefs = this._rowDefs.filter(def => !def.when);\n        if (!this.multiTemplateDataRows && defaultRowDefs.length > 1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMultipleDefaultRowDefsError();\n        }\n        this._defaultRowDef = defaultRowDefs[0];\n    }\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     */\n    _renderUpdatedColumns() {\n        const columnsDiffReducer = (acc, def) => acc || !!def.getColumnsDiff();\n        // Force re-render data rows if the list of column definitions have changed.\n        const dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);\n        if (dataColumnsChanged) {\n            this._forceRenderDataRows();\n        }\n        // Force re-render header/footer rows if the list of column definitions have changed.\n        const headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);\n        if (headerColumnsChanged) {\n            this._forceRenderHeaderRows();\n        }\n        const footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);\n        if (footerColumnsChanged) {\n            this._forceRenderFooterRows();\n        }\n        return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     */\n    _switchDataSource(dataSource) {\n        this._data = [];\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n        // Stop listening for data from the previous data source.\n        if (this._renderChangeSubscription) {\n            this._renderChangeSubscription.unsubscribe();\n            this._renderChangeSubscription = null;\n        }\n        if (!dataSource) {\n            if (this._dataDiffer) {\n                this._dataDiffer.diff([]);\n            }\n            this._rowOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n    }\n    /** Set up a subscription for the data provided by the data source. */\n    _observeRenderChanges() {\n        // If no data source has been set, there is nothing to observe for changes.\n        if (!this.dataSource) {\n            return;\n        }\n        let dataStream;\n        if (isDataSource(this.dataSource)) {\n            dataStream = this.dataSource.connect(this);\n        }\n        else if (isObservable(this.dataSource)) {\n            dataStream = this.dataSource;\n        }\n        else if (Array.isArray(this.dataSource)) {\n            dataStream = of(this.dataSource);\n        }\n        if (dataStream === undefined && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableUnknownDataSourceError();\n        }\n        this._renderChangeSubscription = dataStream.pipe(takeUntil(this._onDestroy))\n            .subscribe(data => {\n            this._data = data || [];\n            this.renderRows();\n        });\n    }\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     */\n    _forceRenderHeaderRows() {\n        // Clear the header row outlet if any content exists.\n        if (this._headerRowOutlet.viewContainer.length > 0) {\n            this._headerRowOutlet.viewContainer.clear();\n        }\n        this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\n        this.updateStickyHeaderRowStyles();\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     */\n    _forceRenderFooterRows() {\n        // Clear the footer row outlet if any content exists.\n        if (this._footerRowOutlet.viewContainer.length > 0) {\n            this._footerRowOutlet.viewContainer.clear();\n        }\n        this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\n        this.updateStickyFooterRowStyles();\n    }\n    /** Adds the sticky column styles for the rows according to the columns' stick states. */\n    _addStickyColumnStyles(rows, rowDef) {\n        const columnDefs = Array.from(rowDef.columns || []).map(columnName => {\n            const columnDef = this._columnDefsByName.get(columnName);\n            if (!columnDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableUnknownColumnError(columnName);\n            }\n            return columnDef;\n        });\n        const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\n        const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates, !this._fixedLayout || this._forceRecalculateCellWidths);\n    }\n    /** Gets the list of rows that have been rendered in the row outlet. */\n    _getRenderedRows(rowOutlet) {\n        const renderedRows = [];\n        for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n            const viewRef = rowOutlet.viewContainer.get(i);\n            renderedRows.push(viewRef.rootNodes[0]);\n        }\n        return renderedRows;\n    }\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     */\n    _getRowDefs(data, dataIndex) {\n        if (this._rowDefs.length == 1) {\n            return [this._rowDefs[0]];\n        }\n        let rowDefs = [];\n        if (this.multiTemplateDataRows) {\n            rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\n        }\n        else {\n            let rowDef = this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n            if (rowDef) {\n                rowDefs.push(rowDef);\n            }\n        }\n        if (!rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMissingMatchingRowDefError(data);\n        }\n        return rowDefs;\n    }\n    _getEmbeddedViewArgs(renderRow, index) {\n        const rowDef = renderRow.rowDef;\n        const context = { $implicit: renderRow.data };\n        return {\n            templateRef: rowDef.template,\n            context,\n            index,\n        };\n    }\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     */\n    _renderRow(outlet, rowDef, index, context = {}) {\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n        const view = outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n        this._renderCellTemplateForItem(rowDef, context);\n        return view;\n    }\n    _renderCellTemplateForItem(rowDef, context) {\n        for (let cellTemplate of this._getCellTemplates(rowDef)) {\n            if (CdkCellOutlet.mostRecentCellOutlet) {\n                CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     */\n    _updateRowIndexContext() {\n        const viewContainer = this._rowOutlet.viewContainer;\n        for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n            const viewRef = viewContainer.get(renderIndex);\n            const context = viewRef.context;\n            context.count = count;\n            context.first = renderIndex === 0;\n            context.last = renderIndex === count - 1;\n            context.even = renderIndex % 2 === 0;\n            context.odd = !context.even;\n            if (this.multiTemplateDataRows) {\n                context.dataIndex = this._renderRows[renderIndex].dataIndex;\n                context.renderIndex = renderIndex;\n            }\n            else {\n                context.index = this._renderRows[renderIndex].dataIndex;\n            }\n        }\n    }\n    /** Gets the column definitions for the provided row def. */\n    _getCellTemplates(rowDef) {\n        if (!rowDef || !rowDef.columns) {\n            return [];\n        }\n        return Array.from(rowDef.columns, columnId => {\n            const column = this._columnDefsByName.get(columnId);\n            if (!column && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableUnknownColumnError(columnId);\n            }\n            return rowDef.extractCellTemplate(column);\n        });\n    }\n    /** Adds native table sections (e.g. tbody) and moves the row outlets into them. */\n    _applyNativeTableSections() {\n        const documentFragment = this._document.createDocumentFragment();\n        const sections = [\n            { tag: 'thead', outlets: [this._headerRowOutlet] },\n            { tag: 'tbody', outlets: [this._rowOutlet, this._noDataRowOutlet] },\n            { tag: 'tfoot', outlets: [this._footerRowOutlet] },\n        ];\n        for (const section of sections) {\n            const element = this._document.createElement(section.tag);\n            element.setAttribute('role', 'rowgroup');\n            for (const outlet of section.outlets) {\n                element.appendChild(outlet.elementRef.nativeElement);\n            }\n            documentFragment.appendChild(element);\n        }\n        // Use a DocumentFragment so we don't hit the DOM on each iteration.\n        this._elementRef.nativeElement.appendChild(documentFragment);\n    }\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     */\n    _forceRenderDataRows() {\n        this._dataDiffer.diff([]);\n        this._rowOutlet.viewContainer.clear();\n        this.renderRows();\n    }\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     */\n    _checkStickyStates() {\n        const stickyCheckReducer = (acc, d) => {\n            return acc || d.hasStickyChanged();\n        };\n        // Note that the check needs to occur for every definition since it notifies the definition\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\n        // remaining definitions and leave them in an unchecked state.\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyHeaderRowStyles();\n        }\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyFooterRowStyles();\n        }\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n            this._stickyColumnStylesNeedReset = true;\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     */\n    _setupStickyStyler() {\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._coalescedStyleScheduler, this._platform.isBrowser, this.needsPositionStickyOnElement, this._stickyPositioningListener);\n        (this._dir ? this._dir.change : of())\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(value => {\n            this._stickyStyler.direction = value;\n            this.updateStickyColumnStyles();\n        });\n    }\n    /** Filters definitions that belong to this table from a QueryList. */\n    _getOwnDefs(items) {\n        return items.filter(item => !item._table || item._table === this);\n    }\n    /** Creates or removes the no data row, depending on whether any data is being shown. */\n    _updateNoDataRow() {\n        const noDataRow = this._customNoDataRow || this._noDataRow;\n        if (noDataRow) {\n            const shouldShow = this._rowOutlet.viewContainer.length === 0;\n            if (shouldShow !== this._isShowingNoDataRow) {\n                const container = this._noDataRowOutlet.viewContainer;\n                shouldShow ? container.createEmbeddedView(noDataRow.templateRef) : container.clear();\n                this._isShowingNoDataRow = shouldShow;\n            }\n        }\n    }\n}\nCdkTable.decorators = [\n    { type: Component, args: [{\n                selector: 'cdk-table, table[cdk-table]',\n                exportAs: 'cdkTable',\n                template: CDK_TABLE_TEMPLATE,\n                host: {\n                    'class': 'cdk-table',\n                    '[class.cdk-table-fixed-layout]': 'fixedLayout',\n                },\n                encapsulation: ViewEncapsulation.None,\n                // The \"OnPush\" status for the `MatTable` component is effectively a noop, so we are removing it.\n                // The view for `MatTable` consists entirely of templates declared in other views. As they are\n                // declared elsewhere, they are checked when their declaration points are checked.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                providers: [\n                    { provide: CDK_TABLE, useExisting: CdkTable },\n                    { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n                    { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n                    // Prevent nested tables from seeing this table's StickyPositioningListener.\n                    { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n                ],\n                styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"]\n            },] }\n];\nCdkTable.ctorParameters = () => [\n    { type: IterableDiffers },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: String, decorators: [{ type: Attribute, args: ['role',] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Inject, args: [_VIEW_REPEATER_STRATEGY,] }] },\n    { type: _CoalescedStyleScheduler, decorators: [{ type: Inject, args: [_COALESCED_STYLE_SCHEDULER,] }] },\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [STICKY_POSITIONING_LISTENER,] }] }\n];\nCdkTable.propDecorators = {\n    trackBy: [{ type: Input }],\n    dataSource: [{ type: Input }],\n    multiTemplateDataRows: [{ type: Input }],\n    fixedLayout: [{ type: Input }],\n    _rowOutlet: [{ type: ViewChild, args: [DataRowOutlet, { static: true },] }],\n    _headerRowOutlet: [{ type: ViewChild, args: [HeaderRowOutlet, { static: true },] }],\n    _footerRowOutlet: [{ type: ViewChild, args: [FooterRowOutlet, { static: true },] }],\n    _noDataRowOutlet: [{ type: ViewChild, args: [NoDataRowOutlet, { static: true },] }],\n    _contentColumnDefs: [{ type: ContentChildren, args: [CdkColumnDef, { descendants: true },] }],\n    _contentRowDefs: [{ type: ContentChildren, args: [CdkRowDef, { descendants: true },] }],\n    _contentHeaderRowDefs: [{ type: ContentChildren, args: [CdkHeaderRowDef, {\n                    descendants: true\n                },] }],\n    _contentFooterRowDefs: [{ type: ContentChildren, args: [CdkFooterRowDef, {\n                    descendants: true\n                },] }],\n    _noDataRow: [{ type: ContentChild, args: [CdkNoDataRow,] }]\n};\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\nfunction mergeArrayAndSet(array, set) {\n    return array.concat(Array.from(set));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nclass CdkTextColumn {\n    constructor(\n    // `CdkTextColumn` is always requiring a table, but we just assert it manually\n    // for better error reporting.\n    // tslint:disable-next-line: lightweight-tokens\n    _table, _options) {\n        this._table = _table;\n        this._options = _options;\n        /** Alignment of the cell values. */\n        this.justify = 'start';\n        this._options = _options || {};\n    }\n    /** Column name that should be used to reference this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._name = name;\n        // With Ivy, inputs can be initialized before static query results are\n        // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n        this._syncColumnDefName();\n    }\n    ngOnInit() {\n        this._syncColumnDefName();\n        if (this.headerText === undefined) {\n            this.headerText = this._createDefaultHeaderText();\n        }\n        if (!this.dataAccessor) {\n            this.dataAccessor =\n                this._options.defaultDataAccessor || ((data, name) => data[name]);\n        }\n        if (this._table) {\n            // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n            // since the columnDef will not pick up its content by the time the table finishes checking\n            // its content and initializing the rows.\n            this.columnDef.cell = this.cell;\n            this.columnDef.headerCell = this.headerCell;\n            this._table.addColumnDef(this.columnDef);\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getTableTextColumnMissingParentTableError();\n        }\n    }\n    ngOnDestroy() {\n        if (this._table) {\n            this._table.removeColumnDef(this.columnDef);\n        }\n    }\n    /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     */\n    _createDefaultHeaderText() {\n        const name = this.name;\n        if (!name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableTextColumnMissingNameError();\n        }\n        if (this._options && this._options.defaultHeaderTextTransform) {\n            return this._options.defaultHeaderTextTransform(name);\n        }\n        return name[0].toUpperCase() + name.slice(1);\n    }\n    /** Synchronizes the column definition name with the text column name. */\n    _syncColumnDefName() {\n        if (this.columnDef) {\n            this.columnDef.name = this.name;\n        }\n    }\n}\nCdkTextColumn.decorators = [\n    { type: Component, args: [{\n                selector: 'cdk-text-column',\n                template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                encapsulation: ViewEncapsulation.None,\n                // Change detection is intentionally not set to OnPush. This component's template will be provided\n                // to the table to be inserted into its view. This is problematic when change detection runs since\n                // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                // mean's the template in the table's view will not have the updated value (and in fact will cause\n                // an ExpressionChangedAfterItHasBeenCheckedError).\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default\n            },] }\n];\nCdkTextColumn.ctorParameters = () => [\n    { type: CdkTable, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TEXT_COLUMN_OPTIONS,] }] }\n];\nCdkTextColumn.propDecorators = {\n    name: [{ type: Input }],\n    headerText: [{ type: Input }],\n    dataAccessor: [{ type: Input }],\n    justify: [{ type: Input }],\n    columnDef: [{ type: ViewChild, args: [CdkColumnDef, { static: true },] }],\n    cell: [{ type: ViewChild, args: [CdkCellDef, { static: true },] }],\n    headerCell: [{ type: ViewChild, args: [CdkHeaderCellDef, { static: true },] }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EXPORTED_DECLARATIONS = [\n    CdkTable,\n    CdkRowDef,\n    CdkCellDef,\n    CdkCellOutlet,\n    CdkHeaderCellDef,\n    CdkFooterCellDef,\n    CdkColumnDef,\n    CdkCell,\n    CdkRow,\n    CdkHeaderCell,\n    CdkFooterCell,\n    CdkHeaderRow,\n    CdkHeaderRowDef,\n    CdkFooterRow,\n    CdkFooterRowDef,\n    DataRowOutlet,\n    HeaderRowOutlet,\n    FooterRowOutlet,\n    CdkTextColumn,\n    CdkNoDataRow,\n    CdkRecycleRows,\n    NoDataRowOutlet,\n];\nclass CdkTableModule {\n}\nCdkTableModule.decorators = [\n    { type: NgModule, args: [{\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS,\n                imports: [ScrollingModule]\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseCdkCell, BaseRowDef, CDK_ROW_TEMPLATE, CDK_TABLE, CDK_TABLE_TEMPLATE, CdkCell, CdkCellDef, CdkCellOutlet, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkFooterRow, CdkFooterRowDef, CdkHeaderCell, CdkHeaderCellDef, CdkHeaderRow, CdkHeaderRowDef, CdkNoDataRow, CdkRecycleRows, CdkRow, CdkRowDef, CdkTable, CdkTableModule, CdkTextColumn, DataRowOutlet, FooterRowOutlet, HeaderRowOutlet, NoDataRowOutlet, STICKY_DIRECTIONS, STICKY_POSITIONING_LISTENER, StickyStyler, TEXT_COLUMN_OPTIONS, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, _Schedule, mixinHasStickyInput };\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,mBAAmB;AAClD,SAASC,qBAAqB,QAAQ,uBAAuB;AAC7D,SAASC,uBAAuB,EAAEC,4BAA4B,EAAEC,YAAY,EAAEC,4BAA4B,QAAQ,0BAA0B;AAC5I,SAASC,UAAU,QAAQ,0BAA0B;AACrD,SAASC,QAAQ,QAAQ,uBAAuB;AAChD,SAASC,aAAa,EAAEC,eAAe,QAAQ,wBAAwB;AACvE,SAASC,QAAQ,QAAQ,iBAAiB;AAC1C,SAASC,cAAc,EAAEC,SAAS,EAAEC,WAAW,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,YAAY,EAAEC,UAAU,EAAEC,UAAU,EAAEC,MAAM,EAAEC,eAAe,EAAEC,gBAAgB,EAAEC,SAAS,EAAEC,uBAAuB,EAAEC,iBAAiB,EAAEC,eAAe,EAAEC,iBAAiB,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,eAAe,EAAEC,QAAQ,QAAQ,eAAe;AACtU,SAASC,OAAO,EAAEC,IAAI,EAAEC,eAAe,EAAEC,YAAY,EAAEC,EAAE,QAAQ,MAAM;AACvE,SAASC,SAAS,EAAEC,IAAI,QAAQ,gBAAgB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,mBAAmBA,CAACC,IAAI,EAAE;EAC/B,OAAO,cAAcA,IAAI,CAAC;IACtBC,WAAWA,CAAC,GAAGC,IAAI,EAAE;MACjB,KAAK,CAAC,GAAGA,IAAI,CAAC;MACd,IAAI,CAACC,OAAO,GAAG,KAAK;MACpB;MACA,IAAI,CAACC,iBAAiB,GAAG,KAAK;IAClC;IACA;IACA,IAAIC,MAAMA,CAAA,EAAG;MAAE,OAAO,IAAI,CAACF,OAAO;IAAE;IACpC,IAAIE,MAAMA,CAACC,CAAC,EAAE;MACV,MAAMC,SAAS,GAAG,IAAI,CAACJ,OAAO;MAC9B,IAAI,CAACA,OAAO,GAAG3C,qBAAqB,CAAC8C,CAAC,CAAC;MACvC,IAAI,CAACF,iBAAiB,GAAGG,SAAS,KAAK,IAAI,CAACJ,OAAO;IACvD;IACA;IACAK,gBAAgBA,CAAA,EAAG;MACf,MAAMA,gBAAgB,GAAG,IAAI,CAACJ,iBAAiB;MAC/C,IAAI,CAACA,iBAAiB,GAAG,KAAK;MAC9B,OAAOI,gBAAgB;IAC3B;IACA;IACAC,kBAAkBA,CAAA,EAAG;MACjB,IAAI,CAACL,iBAAiB,GAAG,KAAK;IAClC;EACJ,CAAC;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMM,SAAS,GAAG,IAAIxC,cAAc,CAAC,WAAW,CAAC;AACjD;AACA,MAAMyC,mBAAmB,GAAG,IAAIzC,cAAc,CAAC,qBAAqB,CAAC;;AAErE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM0C,UAAU,CAAC;EACbX,WAAWA,CAAA,CAAC,oBAAqBY,QAAQ,EAAE;IACvC,IAAI,CAACA,QAAQ,GAAGA,QAAQ;EAC5B;AACJ;AACAD,UAAU,CAACE,UAAU,GAAG,CACpB;EAAEC,IAAI,EAAE5C,SAAS;EAAE+B,IAAI,EAAE,CAAC;IAAEc,QAAQ,EAAE;EAAe,CAAC;AAAG,CAAC,CAC7D;AACDJ,UAAU,CAACK,cAAc,GAAG,MAAM,CAC9B;EAAEF,IAAI,EAAE3C;AAAY,CAAC,CACxB;AACD;AACA;AACA;AACA;AACA,MAAM8C,gBAAgB,CAAC;EACnBjB,WAAWA,CAAA,CAAC,oBAAqBY,QAAQ,EAAE;IACvC,IAAI,CAACA,QAAQ,GAAGA,QAAQ;EAC5B;AACJ;AACAK,gBAAgB,CAACJ,UAAU,GAAG,CAC1B;EAAEC,IAAI,EAAE5C,SAAS;EAAE+B,IAAI,EAAE,CAAC;IAAEc,QAAQ,EAAE;EAAqB,CAAC;AAAG,CAAC,CACnE;AACDE,gBAAgB,CAACD,cAAc,GAAG,MAAM,CACpC;EAAEF,IAAI,EAAE3C;AAAY,CAAC,CACxB;AACD;AACA;AACA;AACA;AACA,MAAM+C,gBAAgB,CAAC;EACnBlB,WAAWA,CAAA,CAAC,oBAAqBY,QAAQ,EAAE;IACvC,IAAI,CAACA,QAAQ,GAAGA,QAAQ;EAC5B;AACJ;AACAM,gBAAgB,CAACL,UAAU,GAAG,CAC1B;EAAEC,IAAI,EAAE5C,SAAS;EAAE+B,IAAI,EAAE,CAAC;IAAEc,QAAQ,EAAE;EAAqB,CAAC;AAAG,CAAC,CACnE;AACDG,gBAAgB,CAACF,cAAc,GAAG,MAAM,CACpC;EAAEF,IAAI,EAAE3C;AAAY,CAAC,CACxB;AACD;AACA;AACA,MAAMgD,gBAAgB,CAAC;AAEvB,MAAMC,iBAAiB,GAAGtB,mBAAmB,CAACqB,gBAAgB,CAAC;AAC/D;AACA;AACA;AACA;AACA,MAAME,YAAY,SAASD,iBAAiB,CAAC;EACzCpB,WAAWA,CAACsB,MAAM,EAAE;IAChB,KAAK,CAAC,CAAC;IACP,IAAI,CAACA,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,UAAU,GAAG,KAAK;EAC3B;EACA;EACA,IAAIC,IAAIA,CAAA,EAAG;IAAE,OAAO,IAAI,CAACC,KAAK;EAAE;EAChC,IAAID,IAAIA,CAACA,IAAI,EAAE;IAAE,IAAI,CAACE,aAAa,CAACF,IAAI,CAAC;EAAE;EAC3C;AACJ;AACA;AACA;AACA;EACI,IAAIG,SAASA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACJ,UAAU;EAC1B;EACA,IAAII,SAASA,CAACtB,CAAC,EAAE;IACb,MAAMC,SAAS,GAAG,IAAI,CAACiB,UAAU;IACjC,IAAI,CAACA,UAAU,GAAGhE,qBAAqB,CAAC8C,CAAC,CAAC;IAC1C,IAAI,CAACF,iBAAiB,GAAGG,SAAS,KAAK,IAAI,CAACiB,UAAU;EAC1D;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIK,yBAAyBA,CAAA,EAAG;IACxB,IAAI,CAACC,mBAAmB,GAAG,CAAE,cAAa,IAAI,CAACC,oBAAqB,EAAC,CAAC;EAC1E;EACA;AACJ;AACA;AACA;AACA;AACA;EACIJ,aAAaA,CAACK,KAAK,EAAE;IACjB;IACA;IACA,IAAIA,KAAK,EAAE;MACP,IAAI,CAACN,KAAK,GAAGM,KAAK;MAClB,IAAI,CAACD,oBAAoB,GAAGC,KAAK,CAACC,OAAO,CAAC,eAAe,EAAE,GAAG,CAAC;MAC/D,IAAI,CAACJ,yBAAyB,CAAC,CAAC;IACpC;EACJ;AACJ;AACAP,YAAY,CAACR,UAAU,GAAG,CACtB;EAAEC,IAAI,EAAE5C,SAAS;EAAE+B,IAAI,EAAE,CAAC;IACdc,QAAQ,EAAE,gBAAgB;IAC1BkB,MAAM,EAAE,CAAC,QAAQ,CAAC;IAClBC,SAAS,EAAE,CAAC;MAAEC,OAAO,EAAE,4BAA4B;MAAEC,WAAW,EAAEf;IAAa,CAAC;EACpF,CAAC;AAAG,CAAC,CAChB;AACDA,YAAY,CAACL,cAAc,GAAG,MAAM,CAChC;EAAEF,IAAI,EAAEuB,SAAS;EAAExB,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAE1C,MAAM;IAAE6B,IAAI,EAAE,CAACQ,SAAS;EAAG,CAAC,EAAE;IAAEK,IAAI,EAAEzC;EAAS,CAAC;AAAE,CAAC,CAC9F;AACDgD,YAAY,CAACiB,cAAc,GAAG;EAC1Bd,IAAI,EAAE,CAAC;IAAEV,IAAI,EAAExC,KAAK;IAAE2B,IAAI,EAAE,CAAC,cAAc;EAAG,CAAC,CAAC;EAChD0B,SAAS,EAAE,CAAC;IAAEb,IAAI,EAAExC,KAAK;IAAE2B,IAAI,EAAE,CAAC,WAAW;EAAG,CAAC,CAAC;EAClDsC,IAAI,EAAE,CAAC;IAAEzB,IAAI,EAAEvC,YAAY;IAAE0B,IAAI,EAAE,CAACU,UAAU;EAAG,CAAC,CAAC;EACnD6B,UAAU,EAAE,CAAC;IAAE1B,IAAI,EAAEvC,YAAY;IAAE0B,IAAI,EAAE,CAACgB,gBAAgB;EAAG,CAAC,CAAC;EAC/DwB,UAAU,EAAE,CAAC;IAAE3B,IAAI,EAAEvC,YAAY;IAAE0B,IAAI,EAAE,CAACiB,gBAAgB;EAAG,CAAC;AAClE,CAAC;AACD;AACA,MAAMwB,WAAW,CAAC;EACd1C,WAAWA,CAAC2C,SAAS,EAAEC,UAAU,EAAE;IAC/B;IACA;IACA,MAAMC,SAAS,GAAGD,UAAU,CAACE,aAAa,CAACD,SAAS;IACpD,KAAK,MAAME,SAAS,IAAIJ,SAAS,CAACd,mBAAmB,EAAE;MACnDgB,SAAS,CAACG,GAAG,CAACD,SAAS,CAAC;IAC5B;EACJ;AACJ;AACA;AACA,MAAME,aAAa,SAASP,WAAW,CAAC;EACpC1C,WAAWA,CAAC2C,SAAS,EAAEC,UAAU,EAAE;IAC/B,KAAK,CAACD,SAAS,EAAEC,UAAU,CAAC;EAChC;AACJ;AACAK,aAAa,CAACpC,UAAU,GAAG,CACvB;EAAEC,IAAI,EAAE5C,SAAS;EAAE+B,IAAI,EAAE,CAAC;IACdc,QAAQ,EAAE,sCAAsC;IAChDmC,IAAI,EAAE;MACF,OAAO,EAAE,iBAAiB;MAC1B,MAAM,EAAE;IACZ;EACJ,CAAC;AAAG,CAAC,CAChB;AACDD,aAAa,CAACjC,cAAc,GAAG,MAAM,CACjC;EAAEF,IAAI,EAAEO;AAAa,CAAC,EACtB;EAAEP,IAAI,EAAEtC;AAAW,CAAC,CACvB;AACD;AACA,MAAM2E,aAAa,SAAST,WAAW,CAAC;EACpC1C,WAAWA,CAAC2C,SAAS,EAAEC,UAAU,EAAE;IAC/B,KAAK,CAACD,SAAS,EAAEC,UAAU,CAAC;EAChC;AACJ;AACAO,aAAa,CAACtC,UAAU,GAAG,CACvB;EAAEC,IAAI,EAAE5C,SAAS;EAAE+B,IAAI,EAAE,CAAC;IACdc,QAAQ,EAAE,sCAAsC;IAChDmC,IAAI,EAAE;MACF,OAAO,EAAE,iBAAiB;MAC1B,MAAM,EAAE;IACZ;EACJ,CAAC;AAAG,CAAC,CAChB;AACDC,aAAa,CAACnC,cAAc,GAAG,MAAM,CACjC;EAAEF,IAAI,EAAEO;AAAa,CAAC,EACtB;EAAEP,IAAI,EAAEtC;AAAW,CAAC,CACvB;AACD;AACA,MAAM4E,OAAO,SAASV,WAAW,CAAC;EAC9B1C,WAAWA,CAAC2C,SAAS,EAAEC,UAAU,EAAE;IAC/B,KAAK,CAACD,SAAS,EAAEC,UAAU,CAAC;EAChC;AACJ;AACAQ,OAAO,CAACvC,UAAU,GAAG,CACjB;EAAEC,IAAI,EAAE5C,SAAS;EAAE+B,IAAI,EAAE,CAAC;IACdc,QAAQ,EAAE,wBAAwB;IAClCmC,IAAI,EAAE;MACF,OAAO,EAAE,UAAU;MACnB,MAAM,EAAE;IACZ;EACJ,CAAC;AAAG,CAAC,CAChB;AACDE,OAAO,CAACpC,cAAc,GAAG,MAAM,CAC3B;EAAEF,IAAI,EAAEO;AAAa,CAAC,EACtB;EAAEP,IAAI,EAAEtC;AAAW,CAAC,CACvB;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM6E,SAAS,CAAC;EACZrD,WAAWA,CAAA,EAAG;IACV,IAAI,CAACsD,KAAK,GAAG,EAAE;IACf,IAAI,CAACC,QAAQ,GAAG,EAAE;EACtB;AACJ;AACA;AACA,MAAMC,0BAA0B,GAAG,IAAIvF,cAAc,CAAC,4BAA4B,CAAC;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMwF,wBAAwB,CAAC;EAC3BzD,WAAWA,CAAC0D,OAAO,EAAE;IACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,gBAAgB,GAAG,IAAI;IAC5B,IAAI,CAACC,UAAU,GAAG,IAAIrE,OAAO,CAAC,CAAC;EACnC;EACA;AACJ;AACA;EACIsE,QAAQA,CAACC,IAAI,EAAE;IACX,IAAI,CAACC,uBAAuB,CAAC,CAAC;IAC9B,IAAI,CAACJ,gBAAgB,CAACL,KAAK,CAACU,IAAI,CAACF,IAAI,CAAC;EAC1C;EACA;AACJ;AACA;AACA;EACIG,WAAWA,CAACH,IAAI,EAAE;IACd,IAAI,CAACC,uBAAuB,CAAC,CAAC;IAC9B,IAAI,CAACJ,gBAAgB,CAACJ,QAAQ,CAACS,IAAI,CAACF,IAAI,CAAC;EAC7C;EACA;EACAI,WAAWA,CAAA,EAAG;IACV,IAAI,CAACN,UAAU,CAACO,IAAI,CAAC,CAAC;IACtB,IAAI,CAACP,UAAU,CAACQ,QAAQ,CAAC,CAAC;EAC9B;EACAL,uBAAuBA,CAAA,EAAG;IACtB,IAAI,IAAI,CAACJ,gBAAgB,EAAE;MACvB;IACJ;IACA,IAAI,CAACA,gBAAgB,GAAG,IAAIN,SAAS,CAAC,CAAC;IACvC,IAAI,CAACgB,sBAAsB,CAAC,CAAC,CAACC,IAAI,CAAC1E,SAAS,CAAC,IAAI,CAACgE,UAAU,CAAC,CAAC,CAACW,SAAS,CAAC,MAAM;MAC3E,OAAO,IAAI,CAACZ,gBAAgB,CAACL,KAAK,CAACkB,MAAM,IAAI,IAAI,CAACb,gBAAgB,CAACJ,QAAQ,CAACiB,MAAM,EAAE;QAChF,MAAMX,QAAQ,GAAG,IAAI,CAACF,gBAAgB;QACtC;QACA,IAAI,CAACA,gBAAgB,GAAG,IAAIN,SAAS,CAAC,CAAC;QACvC,KAAK,MAAMS,IAAI,IAAID,QAAQ,CAACP,KAAK,EAAE;UAC/BQ,IAAI,CAAC,CAAC;QACV;QACA,KAAK,MAAMA,IAAI,IAAID,QAAQ,CAACN,QAAQ,EAAE;UAClCO,IAAI,CAAC,CAAC;QACV;MACJ;MACA,IAAI,CAACH,gBAAgB,GAAG,IAAI;IAChC,CAAC,CAAC;EACN;EACAU,sBAAsBA,CAAA,EAAG;IACrB;IACA;IACA,OAAO,IAAI,CAACX,OAAO,CAACe,QAAQ,GACxBjF,IAAI,CAACkF,OAAO,CAACC,OAAO,CAACtC,SAAS,CAAC,CAAC,GAChC,IAAI,CAACqB,OAAO,CAACkB,QAAQ,CAACN,IAAI,CAACzE,IAAI,CAAC,CAAC,CAAC,CAAC;EAC3C;AACJ;AACA4D,wBAAwB,CAAC5C,UAAU,GAAG,CAClC;EAAEC,IAAI,EAAErC;AAAW,CAAC,CACvB;AACDgF,wBAAwB,CAACzC,cAAc,GAAG,MAAM,CAC5C;EAAEF,IAAI,EAAEpC;AAAO,CAAC,CACnB;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMmG,gBAAgB,GAAI,6CAA4C;AACtE;AACA;AACA;AACA;AACA,MAAMC,UAAU,CAAC;EACb9E,WAAWA,CAAA,CACX,oBAAqBY,QAAQ,EAAEmE,QAAQ,EAAE;IACrC,IAAI,CAACnE,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACmE,QAAQ,GAAGA,QAAQ;EAC5B;EACAC,WAAWA,CAACC,OAAO,EAAE;IACjB;IACA;IACA,IAAI,CAAC,IAAI,CAACC,cAAc,EAAE;MACtB,MAAMC,OAAO,GAAIF,OAAO,CAAC,SAAS,CAAC,IAAIA,OAAO,CAAC,SAAS,CAAC,CAACG,YAAY,IAAK,EAAE;MAC7E,IAAI,CAACF,cAAc,GAAG,IAAI,CAACH,QAAQ,CAACM,IAAI,CAACF,OAAO,CAAC,CAACG,MAAM,CAAC,CAAC;MAC1D,IAAI,CAACJ,cAAc,CAACK,IAAI,CAACJ,OAAO,CAAC;IACrC;EACJ;EACA;AACJ;AACA;AACA;EACIK,cAAcA,CAAA,EAAG;IACb,OAAO,IAAI,CAACN,cAAc,CAACK,IAAI,CAAC,IAAI,CAACJ,OAAO,CAAC;EACjD;EACA;EACAM,mBAAmBA,CAACC,MAAM,EAAE;IACxB,IAAI,IAAI,YAAYC,eAAe,EAAE;MACjC,OAAOD,MAAM,CAAClD,UAAU,CAAC5B,QAAQ;IACrC;IACA,IAAI,IAAI,YAAYgF,eAAe,EAAE;MACjC,OAAOF,MAAM,CAACjD,UAAU,CAAC7B,QAAQ;IACrC,CAAC,MACI;MACD,OAAO8E,MAAM,CAACnD,IAAI,CAAC3B,QAAQ;IAC/B;EACJ;AACJ;AACAkE,UAAU,CAACjE,UAAU,GAAG,CACpB;EAAEC,IAAI,EAAE5C;AAAU,CAAC,CACtB;AACD4G,UAAU,CAAC9D,cAAc,GAAG,MAAM,CAC9B;EAAEF,IAAI,EAAE3C;AAAY,CAAC,EACrB;EAAE2C,IAAI,EAAEnC;AAAgB,CAAC,CAC5B;AACD;AACA;AACA,MAAMkH,mBAAmB,SAASf,UAAU,CAAC;AAE7C,MAAMgB,oBAAoB,GAAGhG,mBAAmB,CAAC+F,mBAAmB,CAAC;AACrE;AACA;AACA;AACA;AACA,MAAMF,eAAe,SAASG,oBAAoB,CAAC;EAC/C9F,WAAWA,CAACY,QAAQ,EAAEmE,QAAQ,EAAEzD,MAAM,EAAE;IACpC,KAAK,CAACV,QAAQ,EAAEmE,QAAQ,CAAC;IACzB,IAAI,CAACzD,MAAM,GAAGA,MAAM;EACxB;EACA;EACA;EACA0D,WAAWA,CAACC,OAAO,EAAE;IACjB,KAAK,CAACD,WAAW,CAACC,OAAO,CAAC;EAC9B;AACJ;AACAU,eAAe,CAAC9E,UAAU,GAAG,CACzB;EAAEC,IAAI,EAAE5C,SAAS;EAAE+B,IAAI,EAAE,CAAC;IACdc,QAAQ,EAAE,mBAAmB;IAC7BkB,MAAM,EAAE,CAAC,0BAA0B,EAAE,+BAA+B;EACxE,CAAC;AAAG,CAAC,CAChB;AACD0D,eAAe,CAAC3E,cAAc,GAAG,MAAM,CACnC;EAAEF,IAAI,EAAE3C;AAAY,CAAC,EACrB;EAAE2C,IAAI,EAAEnC;AAAgB,CAAC,EACzB;EAAEmC,IAAI,EAAEuB,SAAS;EAAExB,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAE1C,MAAM;IAAE6B,IAAI,EAAE,CAACQ,SAAS;EAAG,CAAC,EAAE;IAAEK,IAAI,EAAEzC;EAAS,CAAC;AAAE,CAAC,CAC9F;AACD;AACA;AACA,MAAM0H,mBAAmB,SAASjB,UAAU,CAAC;AAE7C,MAAMkB,oBAAoB,GAAGlG,mBAAmB,CAACiG,mBAAmB,CAAC;AACrE;AACA;AACA;AACA;AACA,MAAMH,eAAe,SAASI,oBAAoB,CAAC;EAC/ChG,WAAWA,CAACY,QAAQ,EAAEmE,QAAQ,EAAEzD,MAAM,EAAE;IACpC,KAAK,CAACV,QAAQ,EAAEmE,QAAQ,CAAC;IACzB,IAAI,CAACzD,MAAM,GAAGA,MAAM;EACxB;EACA;EACA;EACA0D,WAAWA,CAACC,OAAO,EAAE;IACjB,KAAK,CAACD,WAAW,CAACC,OAAO,CAAC;EAC9B;AACJ;AACAW,eAAe,CAAC/E,UAAU,GAAG,CACzB;EAAEC,IAAI,EAAE5C,SAAS;EAAE+B,IAAI,EAAE,CAAC;IACdc,QAAQ,EAAE,mBAAmB;IAC7BkB,MAAM,EAAE,CAAC,0BAA0B,EAAE,+BAA+B;EACxE,CAAC;AAAG,CAAC,CAChB;AACD2D,eAAe,CAAC5E,cAAc,GAAG,MAAM,CACnC;EAAEF,IAAI,EAAE3C;AAAY,CAAC,EACrB;EAAE2C,IAAI,EAAEnC;AAAgB,CAAC,EACzB;EAAEmC,IAAI,EAAEuB,SAAS;EAAExB,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAE1C,MAAM;IAAE6B,IAAI,EAAE,CAACQ,SAAS;EAAG,CAAC,EAAE;IAAEK,IAAI,EAAEzC;EAAS,CAAC;AAAE,CAAC,CAC9F;AACD;AACA;AACA;AACA;AACA;AACA,MAAM4H,SAAS,SAASnB,UAAU,CAAC;EAC/B;EACA;EACA9E,WAAWA,CAACY,QAAQ,EAAEmE,QAAQ,EAAEzD,MAAM,EAAE;IACpC,KAAK,CAACV,QAAQ,EAAEmE,QAAQ,CAAC;IACzB,IAAI,CAACzD,MAAM,GAAGA,MAAM;EACxB;AACJ;AACA2E,SAAS,CAACpF,UAAU,GAAG,CACnB;EAAEC,IAAI,EAAE5C,SAAS;EAAE+B,IAAI,EAAE,CAAC;IACdc,QAAQ,EAAE,aAAa;IACvBkB,MAAM,EAAE,CAAC,2BAA2B,EAAE,qBAAqB;EAC/D,CAAC;AAAG,CAAC,CAChB;AACDgE,SAAS,CAACjF,cAAc,GAAG,MAAM,CAC7B;EAAEF,IAAI,EAAE3C;AAAY,CAAC,EACrB;EAAE2C,IAAI,EAAEnC;AAAgB,CAAC,EACzB;EAAEmC,IAAI,EAAEuB,SAAS;EAAExB,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAE1C,MAAM;IAAE6B,IAAI,EAAE,CAACQ,SAAS;EAAG,CAAC,EAAE;IAAEK,IAAI,EAAEzC;EAAS,CAAC;AAAE,CAAC,CAC9F;AACD;AACA;AACA;AACA;AACA,MAAM6H,aAAa,CAAC;EAChBlG,WAAWA,CAACmG,cAAc,EAAE;IACxB,IAAI,CAACA,cAAc,GAAGA,cAAc;IACpCD,aAAa,CAACE,oBAAoB,GAAG,IAAI;EAC7C;EACAlC,WAAWA,CAAA,EAAG;IACV;IACA;IACA,IAAIgC,aAAa,CAACE,oBAAoB,KAAK,IAAI,EAAE;MAC7CF,aAAa,CAACE,oBAAoB,GAAG,IAAI;IAC7C;EACJ;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,aAAa,CAACE,oBAAoB,GAAG,IAAI;AACzCF,aAAa,CAACrF,UAAU,GAAG,CACvB;EAAEC,IAAI,EAAE5C,SAAS;EAAE+B,IAAI,EAAE,CAAC;IAAEc,QAAQ,EAAE;EAAkB,CAAC;AAAG,CAAC,CAChE;AACDmF,aAAa,CAAClF,cAAc,GAAG,MAAM,CACjC;EAAEF,IAAI,EAAElC;AAAiB,CAAC,CAC7B;AACD;AACA,MAAMyH,YAAY,CAAC;AAEnBA,YAAY,CAACxF,UAAU,GAAG,CACtB;EAAEC,IAAI,EAAEjC,SAAS;EAAEoB,IAAI,EAAE,CAAC;IACdc,QAAQ,EAAE,oCAAoC;IAC9CH,QAAQ,EAAEiE,gBAAgB;IAC1B3B,IAAI,EAAE;MACF,OAAO,EAAE,gBAAgB;MACzB,MAAM,EAAE;IACZ,CAAC;IACD;IACA;IACAoD,eAAe,EAAExH,uBAAuB,CAACyH,OAAO;IAChDC,aAAa,EAAEzH,iBAAiB,CAAC0H;EACrC,CAAC;AAAG,CAAC,CAChB;AACD;AACA,MAAMC,YAAY,CAAC;AAEnBA,YAAY,CAAC7F,UAAU,GAAG,CACtB;EAAEC,IAAI,EAAEjC,SAAS;EAAEoB,IAAI,EAAE,CAAC;IACdc,QAAQ,EAAE,oCAAoC;IAC9CH,QAAQ,EAAEiE,gBAAgB;IAC1B3B,IAAI,EAAE;MACF,OAAO,EAAE,gBAAgB;MACzB,MAAM,EAAE;IACZ,CAAC;IACD;IACA;IACAoD,eAAe,EAAExH,uBAAuB,CAACyH,OAAO;IAChDC,aAAa,EAAEzH,iBAAiB,CAAC0H;EACrC,CAAC;AAAG,CAAC,CAChB;AACD;AACA,MAAME,MAAM,CAAC;AAEbA,MAAM,CAAC9F,UAAU,GAAG,CAChB;EAAEC,IAAI,EAAEjC,SAAS;EAAEoB,IAAI,EAAE,CAAC;IACdc,QAAQ,EAAE,sBAAsB;IAChCH,QAAQ,EAAEiE,gBAAgB;IAC1B3B,IAAI,EAAE;MACF,OAAO,EAAE,SAAS;MAClB,MAAM,EAAE;IACZ,CAAC;IACD;IACA;IACAoD,eAAe,EAAExH,uBAAuB,CAACyH,OAAO;IAChDC,aAAa,EAAEzH,iBAAiB,CAAC0H;EACrC,CAAC;AAAG,CAAC,CAChB;AACD;AACA,MAAMG,YAAY,CAAC;EACf5G,WAAWA,CAAC6G,WAAW,EAAE;IACrB,IAAI,CAACA,WAAW,GAAGA,WAAW;EAClC;AACJ;AACAD,YAAY,CAAC/F,UAAU,GAAG,CACtB;EAAEC,IAAI,EAAE5C,SAAS;EAAE+B,IAAI,EAAE,CAAC;IACdc,QAAQ,EAAE;EACd,CAAC;AAAG,CAAC,CAChB;AACD6F,YAAY,CAAC5F,cAAc,GAAG,MAAM,CAChC;EAAEF,IAAI,EAAE3C;AAAY,CAAC,CACxB;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM2I,iBAAiB,GAAG,CAAC,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC;AAC5D;AACA;AACA;AACA;AACA,MAAMC,YAAY,CAAC;EACf;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI/G,WAAWA,CAACgH,kBAAkB,EAAEC,aAAa,EAAEC,SAAS,EAAEC,wBAAwB,EAAEC,UAAU,GAAG,IAAI,EAAEC,6BAA6B,GAAG,IAAI,EAAEC,iBAAiB,EAAE;IAC5J,IAAI,CAACN,kBAAkB,GAAGA,kBAAkB;IAC5C,IAAI,CAACC,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,wBAAwB,GAAGA,wBAAwB;IACxD,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,6BAA6B,GAAGA,6BAA6B;IAClE,IAAI,CAACC,iBAAiB,GAAGA,iBAAiB;IAC1C,IAAI,CAACC,iBAAiB,GAAG,EAAE;IAC3B,IAAI,CAACC,cAAc,GAAG;MAClB,KAAK,EAAG,GAAEP,aAAc,kBAAiB;MACzC,QAAQ,EAAG,GAAEA,aAAc,qBAAoB;MAC/C,MAAM,EAAG,GAAEA,aAAc,mBAAkB;MAC3C,OAAO,EAAG,GAAEA,aAAc;IAC9B,CAAC;EACL;EACA;AACJ;AACA;AACA;AACA;AACA;EACIQ,sBAAsBA,CAACC,IAAI,EAAEC,gBAAgB,EAAE;IAC3C,MAAMC,eAAe,GAAG,EAAE;IAC1B,KAAK,MAAMC,GAAG,IAAIH,IAAI,EAAE;MACpB;MACA;MACA,IAAIG,GAAG,CAACC,QAAQ,KAAKD,GAAG,CAACE,YAAY,EAAE;QACnC;MACJ;MACAH,eAAe,CAAC5D,IAAI,CAAC6D,GAAG,CAAC;MACzB,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,GAAG,CAACI,QAAQ,CAACzD,MAAM,EAAEwD,CAAC,EAAE,EAAE;QAC1CJ,eAAe,CAAC5D,IAAI,CAAC6D,GAAG,CAACI,QAAQ,CAACD,CAAC,CAAC,CAAC;MACzC;IACJ;IACA;IACA,IAAI,CAACb,wBAAwB,CAACtD,QAAQ,CAAC,MAAM;MACzC,KAAK,MAAMqE,OAAO,IAAIN,eAAe,EAAE;QACnC,IAAI,CAACO,kBAAkB,CAACD,OAAO,EAAEP,gBAAgB,CAAC;MACtD;IACJ,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIS,mBAAmBA,CAACV,IAAI,EAAEW,iBAAiB,EAAEC,eAAe,EAAEC,qBAAqB,GAAG,IAAI,EAAE;IACxF,IAAI,CAACb,IAAI,CAAClD,MAAM,IAAI,CAAC,IAAI,CAAC4C,UAAU,IAAI,EAAEiB,iBAAiB,CAACG,IAAI,CAACC,KAAK,IAAIA,KAAK,CAAC,IAC5EH,eAAe,CAACE,IAAI,CAACC,KAAK,IAAIA,KAAK,CAAC,CAAC,EAAE;MACvC,IAAI,IAAI,CAACnB,iBAAiB,EAAE;QACxB,IAAI,CAACA,iBAAiB,CAACoB,oBAAoB,CAAC;UAAEC,KAAK,EAAE;QAAG,CAAC,CAAC;QAC1D,IAAI,CAACrB,iBAAiB,CAACsB,uBAAuB,CAAC;UAAED,KAAK,EAAE;QAAG,CAAC,CAAC;MACjE;MACA;IACJ;IACA,MAAME,QAAQ,GAAGnB,IAAI,CAAC,CAAC,CAAC;IACxB,MAAMoB,QAAQ,GAAGD,QAAQ,CAACZ,QAAQ,CAACzD,MAAM;IACzC,MAAMuE,UAAU,GAAG,IAAI,CAACC,cAAc,CAACH,QAAQ,EAAEN,qBAAqB,CAAC;IACvE,MAAMU,cAAc,GAAG,IAAI,CAACC,8BAA8B,CAACH,UAAU,EAAEV,iBAAiB,CAAC;IACzF,MAAMc,YAAY,GAAG,IAAI,CAACC,4BAA4B,CAACL,UAAU,EAAET,eAAe,CAAC;IACnF,MAAMe,eAAe,GAAGhB,iBAAiB,CAACiB,WAAW,CAAC,IAAI,CAAC;IAC3D,MAAMC,cAAc,GAAGjB,eAAe,CAACkB,OAAO,CAAC,IAAI,CAAC;IACpD;IACA,IAAI,CAACrC,wBAAwB,CAACtD,QAAQ,CAAC,MAAM;MACzC,MAAM4F,KAAK,GAAG,IAAI,CAACvC,SAAS,KAAK,KAAK;MACtC,MAAMwC,KAAK,GAAGD,KAAK,GAAG,OAAO,GAAG,MAAM;MACtC,MAAME,GAAG,GAAGF,KAAK,GAAG,MAAM,GAAG,OAAO;MACpC,KAAK,MAAM5B,GAAG,IAAIH,IAAI,EAAE;QACpB,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGc,QAAQ,EAAEd,CAAC,EAAE,EAAE;UAC/B,MAAMzF,IAAI,GAAGsF,GAAG,CAACI,QAAQ,CAACD,CAAC,CAAC;UAC5B,IAAIK,iBAAiB,CAACL,CAAC,CAAC,EAAE;YACtB,IAAI,CAAC4B,eAAe,CAACrH,IAAI,EAAEmH,KAAK,EAAET,cAAc,CAACjB,CAAC,CAAC,EAAEA,CAAC,KAAKqB,eAAe,CAAC;UAC/E;UACA,IAAIf,eAAe,CAACN,CAAC,CAAC,EAAE;YACpB,IAAI,CAAC4B,eAAe,CAACrH,IAAI,EAAEoH,GAAG,EAAER,YAAY,CAACnB,CAAC,CAAC,EAAEA,CAAC,KAAKuB,cAAc,CAAC;UAC1E;QACJ;MACJ;MACA,IAAI,IAAI,CAACjC,iBAAiB,EAAE;QACxB,IAAI,CAACA,iBAAiB,CAACoB,oBAAoB,CAAC;UACxCC,KAAK,EAAEU,eAAe,KAAK,CAAC,CAAC,GACzB,EAAE,GACFN,UAAU,CACLc,KAAK,CAAC,CAAC,EAAER,eAAe,GAAG,CAAC,CAAC,CAC7BS,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK3B,iBAAiB,CAAC2B,KAAK,CAAC,GAAGD,KAAK,GAAG,IAAI;QAC1E,CAAC,CAAC;QACF,IAAI,CAACzC,iBAAiB,CAACsB,uBAAuB,CAAC;UAC3CD,KAAK,EAAEY,cAAc,KAAK,CAAC,CAAC,GACxB,EAAE,GACFR,UAAU,CACLc,KAAK,CAACN,cAAc,CAAC,CACrBO,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK1B,eAAe,CAAC0B,KAAK,GAAGT,cAAc,CAAC,GAAGQ,KAAK,GAAG,IAAI,CAAC,CAC7EE,OAAO,CAAC;QACrB,CAAC,CAAC;MACN;IACJ,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,SAASA,CAACC,WAAW,EAAEC,YAAY,EAAEC,QAAQ,EAAE;IAC3C;IACA,IAAI,CAAC,IAAI,CAACjD,UAAU,EAAE;MAClB;IACJ;IACA;IACA;IACA;IACA,MAAMM,IAAI,GAAG2C,QAAQ,KAAK,QAAQ,GAAGF,WAAW,CAACN,KAAK,CAAC,CAAC,CAACI,OAAO,CAAC,CAAC,GAAGE,WAAW;IAChF,MAAMG,MAAM,GAAGD,QAAQ,KAAK,QAAQ,GAAGD,YAAY,CAACP,KAAK,CAAC,CAAC,CAACI,OAAO,CAAC,CAAC,GAAGG,YAAY;IACpF;IACA,MAAMG,aAAa,GAAG,EAAE;IACxB,MAAMC,iBAAiB,GAAG,EAAE;IAC5B,MAAMC,eAAe,GAAG,EAAE;IAC1B,KAAK,IAAIC,QAAQ,GAAG,CAAC,EAAEC,YAAY,GAAG,CAAC,EAAED,QAAQ,GAAGhD,IAAI,CAAClD,MAAM,EAAEkG,QAAQ,EAAE,EAAE;MACzE,IAAI,CAACJ,MAAM,CAACI,QAAQ,CAAC,EAAE;QACnB;MACJ;MACAH,aAAa,CAACG,QAAQ,CAAC,GAAGC,YAAY;MACtC,MAAM9C,GAAG,GAAGH,IAAI,CAACgD,QAAQ,CAAC;MAC1BD,eAAe,CAACC,QAAQ,CAAC,GAAG,IAAI,CAAC1D,kBAAkB,GAC/C4D,KAAK,CAACpL,IAAI,CAACqI,GAAG,CAACI,QAAQ,CAAC,GAAG,CAACJ,GAAG,CAAC;MACpC,MAAMgD,MAAM,GAAGhD,GAAG,CAACiD,qBAAqB,CAAC,CAAC,CAACD,MAAM;MACjDF,YAAY,IAAIE,MAAM;MACtBL,iBAAiB,CAACE,QAAQ,CAAC,GAAGG,MAAM;IACxC;IACA,MAAME,gBAAgB,GAAGT,MAAM,CAAChB,WAAW,CAAC,IAAI,CAAC;IACjD;IACA;IACA,IAAI,CAACnC,wBAAwB,CAACtD,QAAQ,CAAC,MAAM;MACzC,IAAImH,EAAE,EAAEC,EAAE;MACV,KAAK,IAAIP,QAAQ,GAAG,CAAC,EAAEA,QAAQ,GAAGhD,IAAI,CAAClD,MAAM,EAAEkG,QAAQ,EAAE,EAAE;QACvD,IAAI,CAACJ,MAAM,CAACI,QAAQ,CAAC,EAAE;UACnB;QACJ;QACA,MAAMQ,MAAM,GAAGX,aAAa,CAACG,QAAQ,CAAC;QACtC,MAAMS,kBAAkB,GAAGT,QAAQ,KAAKK,gBAAgB;QACxD,KAAK,MAAM7C,OAAO,IAAIuC,eAAe,CAACC,QAAQ,CAAC,EAAE;UAC7C,IAAI,CAACd,eAAe,CAAC1B,OAAO,EAAEmC,QAAQ,EAAEa,MAAM,EAAEC,kBAAkB,CAAC;QACvE;MACJ;MACA,IAAId,QAAQ,KAAK,KAAK,EAAE;QACpB,CAACW,EAAE,GAAG,IAAI,CAAC1D,iBAAiB,MAAM,IAAI,IAAI0D,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACI,uBAAuB,CAAC;UAAEzC,KAAK,EAAE6B,iBAAiB;UAAEa,OAAO,EAAEd,aAAa;UAAEe,QAAQ,EAAEb;QAAgB,CAAC,CAAC;MAClL,CAAC,MACI;QACD,CAACQ,EAAE,GAAG,IAAI,CAAC3D,iBAAiB,MAAM,IAAI,IAAI2D,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACM,uBAAuB,CAAC;UAAE5C,KAAK,EAAE6B,iBAAiB;UAAEa,OAAO,EAAEd,aAAa;UAAEe,QAAQ,EAAEb;QAAgB,CAAC,CAAC;MAClL;IACJ,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;EACIe,2BAA2BA,CAACC,YAAY,EAAErB,YAAY,EAAE;IACpD,IAAI,CAAC,IAAI,CAACpD,kBAAkB,EAAE;MAC1B;IACJ;IACA,MAAM0E,KAAK,GAAGD,YAAY,CAACE,aAAa,CAAC,OAAO,CAAC;IACjD;IACA,IAAI,CAACxE,wBAAwB,CAACtD,QAAQ,CAAC,MAAM;MACzC,IAAIuG,YAAY,CAAC5B,IAAI,CAACC,KAAK,IAAI,CAACA,KAAK,CAAC,EAAE;QACpC,IAAI,CAACN,kBAAkB,CAACuD,KAAK,EAAE,CAAC,QAAQ,CAAC,CAAC;MAC9C,CAAC,MACI;QACD,IAAI,CAAC9B,eAAe,CAAC8B,KAAK,EAAE,QAAQ,EAAE,CAAC,EAAE,KAAK,CAAC;MACnD;IACJ,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;EACIvD,kBAAkBA,CAACD,OAAO,EAAEP,gBAAgB,EAAE;IAC1C,KAAK,MAAMiE,GAAG,IAAIjE,gBAAgB,EAAE;MAChCO,OAAO,CAAC2D,KAAK,CAACD,GAAG,CAAC,GAAG,EAAE;MACvB1D,OAAO,CAACrF,SAAS,CAACiJ,MAAM,CAAC,IAAI,CAACtE,cAAc,CAACoE,GAAG,CAAC,CAAC;IACtD;IACA;IACA;IACA;IACA;IACA,MAAMG,YAAY,GAAGjF,iBAAiB,CAAC0B,IAAI,CAACoD,GAAG,IAAIjE,gBAAgB,CAAC6B,OAAO,CAACoC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI1D,OAAO,CAAC2D,KAAK,CAACD,GAAG,CAAC,CAAC;IAC9G,IAAIG,YAAY,EAAE;MACd7D,OAAO,CAAC2D,KAAK,CAACG,MAAM,GAAG,IAAI,CAACC,oBAAoB,CAAC/D,OAAO,CAAC;IAC7D,CAAC,MACI;MACD;MACAA,OAAO,CAAC2D,KAAK,CAACG,MAAM,GAAG,EAAE;MACzB,IAAI,IAAI,CAAC3E,6BAA6B,EAAE;QACpCa,OAAO,CAAC2D,KAAK,CAACxB,QAAQ,GAAG,EAAE;MAC/B;MACAnC,OAAO,CAACrF,SAAS,CAACiJ,MAAM,CAAC,IAAI,CAAC7E,aAAa,CAAC;IAChD;EACJ;EACA;AACJ;AACA;AACA;AACA;EACI2C,eAAeA,CAAC1B,OAAO,EAAE0D,GAAG,EAAEM,QAAQ,EAAEC,eAAe,EAAE;IACrDjE,OAAO,CAACrF,SAAS,CAACG,GAAG,CAAC,IAAI,CAACiE,aAAa,CAAC;IACzC,IAAIkF,eAAe,EAAE;MACjBjE,OAAO,CAACrF,SAAS,CAACG,GAAG,CAAC,IAAI,CAACwE,cAAc,CAACoE,GAAG,CAAC,CAAC;IACnD;IACA1D,OAAO,CAAC2D,KAAK,CAACD,GAAG,CAAC,GAAI,GAAEM,QAAS,IAAG;IACpChE,OAAO,CAAC2D,KAAK,CAACG,MAAM,GAAG,IAAI,CAACC,oBAAoB,CAAC/D,OAAO,CAAC;IACzD,IAAI,IAAI,CAACb,6BAA6B,EAAE;MACpCa,OAAO,CAAC2D,KAAK,CAACO,OAAO,IAAI,8CAA8C;IAC3E;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIH,oBAAoBA,CAAC/D,OAAO,EAAE;IAC1B,MAAMmE,gBAAgB,GAAG;MACrBC,GAAG,EAAE,GAAG;MACRC,MAAM,EAAE,EAAE;MACVC,IAAI,EAAE,CAAC;MACPC,KAAK,EAAE;IACX,CAAC;IACD,IAAIT,MAAM,GAAG,CAAC;IACd;IACA;IACA;IACA,KAAK,MAAMJ,GAAG,IAAI9E,iBAAiB,EAAE;MACjC,IAAIoB,OAAO,CAAC2D,KAAK,CAACD,GAAG,CAAC,EAAE;QACpBI,MAAM,IAAIK,gBAAgB,CAACT,GAAG,CAAC;MACnC;IACJ;IACA,OAAOI,MAAM,GAAI,GAAEA,MAAO,EAAC,GAAG,EAAE;EACpC;EACA;EACAhD,cAAcA,CAACnB,GAAG,EAAEU,qBAAqB,GAAG,IAAI,EAAE;IAC9C,IAAI,CAACA,qBAAqB,IAAI,IAAI,CAAChB,iBAAiB,CAAC/C,MAAM,EAAE;MACzD,OAAO,IAAI,CAAC+C,iBAAiB;IACjC;IACA,MAAMwB,UAAU,GAAG,EAAE;IACrB,MAAM2D,aAAa,GAAG7E,GAAG,CAACI,QAAQ;IAClC,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0E,aAAa,CAAClI,MAAM,EAAEwD,CAAC,EAAE,EAAE;MAC3C,IAAIzF,IAAI,GAAGmK,aAAa,CAAC1E,CAAC,CAAC;MAC3Be,UAAU,CAAC/E,IAAI,CAACzB,IAAI,CAACuI,qBAAqB,CAAC,CAAC,CAACf,KAAK,CAAC;IACvD;IACA,IAAI,CAACxC,iBAAiB,GAAGwB,UAAU;IACnC,OAAOA,UAAU;EACrB;EACA;AACJ;AACA;AACA;AACA;EACIG,8BAA8BA,CAACyD,MAAM,EAAEvC,YAAY,EAAE;IACjD,MAAMwC,SAAS,GAAG,EAAE;IACpB,IAAIC,YAAY,GAAG,CAAC;IACpB,KAAK,IAAI7E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2E,MAAM,CAACnI,MAAM,EAAEwD,CAAC,EAAE,EAAE;MACpC,IAAIoC,YAAY,CAACpC,CAAC,CAAC,EAAE;QACjB4E,SAAS,CAAC5E,CAAC,CAAC,GAAG6E,YAAY;QAC3BA,YAAY,IAAIF,MAAM,CAAC3E,CAAC,CAAC;MAC7B;IACJ;IACA,OAAO4E,SAAS;EACpB;EACA;AACJ;AACA;AACA;AACA;EACIxD,4BAA4BA,CAACuD,MAAM,EAAEvC,YAAY,EAAE;IAC/C,MAAMwC,SAAS,GAAG,EAAE;IACpB,IAAIC,YAAY,GAAG,CAAC;IACpB,KAAK,IAAI7E,CAAC,GAAG2E,MAAM,CAACnI,MAAM,EAAEwD,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACpC,IAAIoC,YAAY,CAACpC,CAAC,CAAC,EAAE;QACjB4E,SAAS,CAAC5E,CAAC,CAAC,GAAG6E,YAAY;QAC3BA,YAAY,IAAIF,MAAM,CAAC3E,CAAC,CAAC;MAC7B;IACJ;IACA,OAAO4E,SAAS;EACpB;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,0BAA0BA,CAACC,EAAE,EAAE;EACpC,OAAOC,KAAK,CAAE,kCAAiCD,EAAG,IAAG,CAAC;AAC1D;AACA;AACA;AACA;AACA;AACA,SAASE,gCAAgCA,CAACzL,IAAI,EAAE;EAC5C,OAAOwL,KAAK,CAAE,+CAA8CxL,IAAK,IAAG,CAAC;AACzE;AACA;AACA;AACA;AACA;AACA,SAAS0L,mCAAmCA,CAAA,EAAG;EAC3C,OAAOF,KAAK,CAAE,sEAAqE,CAAC;AACxF;AACA;AACA;AACA;AACA;AACA,SAASG,kCAAkCA,CAACC,IAAI,EAAE;EAC9C,OAAOJ,KAAK,CAAE,kDAAiD,GAC1D,sBAAqBK,IAAI,CAACC,SAAS,CAACF,IAAI,CAAE,EAAC,CAAC;AACrD;AACA;AACA;AACA;AACA;AACA,SAASG,2BAA2BA,CAAA,EAAG;EACnC,OAAOP,KAAK,CAAC,mDAAmD,GAC5D,oDAAoD,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACA,SAASQ,8BAA8BA,CAAA,EAAG;EACtC,OAAOR,KAAK,CAAE,wEAAuE,CAAC;AAC1F;AACA;AACA;AACA;AACA;AACA,SAASS,yCAAyCA,CAAA,EAAG;EACjD,OAAOT,KAAK,CAAE,6DAA4D,CAAC;AAC/E;AACA;AACA;AACA;AACA;AACA,SAASU,kCAAkCA,CAAA,EAAG;EAC1C,OAAOV,KAAK,CAAE,qCAAoC,CAAC;AACvD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMW,2BAA2B,GAAG,IAAI1P,cAAc,CAAC,SAAS,CAAC;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM2P,cAAc,CAAC;AAErBA,cAAc,CAAC/M,UAAU,GAAG,CACxB;EAAEC,IAAI,EAAE5C,SAAS;EAAE+B,IAAI,EAAE,CAAC;IACdc,QAAQ,EAAE,uDAAuD;IACjEmB,SAAS,EAAE,CACP;MAAEC,OAAO,EAAE3E,uBAAuB;MAAEqQ,QAAQ,EAAEpQ;IAA6B,CAAC;EAEpF,CAAC;AAAG,CAAC,CAChB;AACD;AACA;AACA;AACA;AACA,MAAMqQ,aAAa,CAAC;EAChB9N,WAAWA,CAAC+N,aAAa,EAAEnL,UAAU,EAAE;IACnC,IAAI,CAACmL,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACnL,UAAU,GAAGA,UAAU;EAChC;AACJ;AACAkL,aAAa,CAACjN,UAAU,GAAG,CACvB;EAAEC,IAAI,EAAE5C,SAAS;EAAE+B,IAAI,EAAE,CAAC;IAAEc,QAAQ,EAAE;EAAc,CAAC;AAAG,CAAC,CAC5D;AACD+M,aAAa,CAAC9M,cAAc,GAAG,MAAM,CACjC;EAAEF,IAAI,EAAElC;AAAiB,CAAC,EAC1B;EAAEkC,IAAI,EAAEtC;AAAW,CAAC,CACvB;AACD;AACA;AACA;AACA;AACA,MAAMwP,eAAe,CAAC;EAClBhO,WAAWA,CAAC+N,aAAa,EAAEnL,UAAU,EAAE;IACnC,IAAI,CAACmL,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACnL,UAAU,GAAGA,UAAU;EAChC;AACJ;AACAoL,eAAe,CAACnN,UAAU,GAAG,CACzB;EAAEC,IAAI,EAAE5C,SAAS;EAAE+B,IAAI,EAAE,CAAC;IAAEc,QAAQ,EAAE;EAAoB,CAAC;AAAG,CAAC,CAClE;AACDiN,eAAe,CAAChN,cAAc,GAAG,MAAM,CACnC;EAAEF,IAAI,EAAElC;AAAiB,CAAC,EAC1B;EAAEkC,IAAI,EAAEtC;AAAW,CAAC,CACvB;AACD;AACA;AACA;AACA;AACA,MAAMyP,eAAe,CAAC;EAClBjO,WAAWA,CAAC+N,aAAa,EAAEnL,UAAU,EAAE;IACnC,IAAI,CAACmL,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACnL,UAAU,GAAGA,UAAU;EAChC;AACJ;AACAqL,eAAe,CAACpN,UAAU,GAAG,CACzB;EAAEC,IAAI,EAAE5C,SAAS;EAAE+B,IAAI,EAAE,CAAC;IAAEc,QAAQ,EAAE;EAAoB,CAAC;AAAG,CAAC,CAClE;AACDkN,eAAe,CAACjN,cAAc,GAAG,MAAM,CACnC;EAAEF,IAAI,EAAElC;AAAiB,CAAC,EAC1B;EAAEkC,IAAI,EAAEtC;AAAW,CAAC,CACvB;AACD;AACA;AACA;AACA;AACA;AACA,MAAM0P,eAAe,CAAC;EAClBlO,WAAWA,CAAC+N,aAAa,EAAEnL,UAAU,EAAE;IACnC,IAAI,CAACmL,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACnL,UAAU,GAAGA,UAAU;EAChC;AACJ;AACAsL,eAAe,CAACrN,UAAU,GAAG,CACzB;EAAEC,IAAI,EAAE5C,SAAS;EAAE+B,IAAI,EAAE,CAAC;IAAEc,QAAQ,EAAE;EAAoB,CAAC;AAAG,CAAC,CAClE;AACDmN,eAAe,CAAClN,cAAc,GAAG,MAAM,CACnC;EAAEF,IAAI,EAAElC;AAAiB,CAAC,EAC1B;EAAEkC,IAAI,EAAEtC;AAAW,CAAC,CACvB;AACD;AACA;AACA;AACA;AACA;AACA,MAAM2P,kBAAkB;AACxB;AACA;AACC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,MAAMC,UAAU,SAASpP,eAAe,CAAC;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMqP,QAAQ,CAAC;EACXrO,WAAWA,CAAC+E,QAAQ,EAAEuJ,kBAAkB,EAAEC,WAAW,EAAEC,IAAI,EAAEC,IAAI,EAAEC,SAAS,EAAEC,SAAS,EAAEC,aAAa,EAAEzH,wBAAwB,EAAE0H,cAAc;EAChJ;AACJ;AACA;AACA;EACIC,0BAA0B,EAAE;IACxB,IAAI,CAAC/J,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACuJ,kBAAkB,GAAGA,kBAAkB;IAC5C,IAAI,CAACC,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACE,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACE,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACzH,wBAAwB,GAAGA,wBAAwB;IACxD,IAAI,CAAC0H,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,0BAA0B,GAAGA,0BAA0B;IAC5D;IACA,IAAI,CAACC,UAAU,GAAG,IAAIxP,OAAO,CAAC,CAAC;IAC/B;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACyP,iBAAiB,GAAG,IAAIC,GAAG,CAAC,CAAC;IAClC;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,iBAAiB,GAAG,IAAIC,GAAG,CAAC,CAAC;IAClC;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,cAAc,GAAG,IAAID,GAAG,CAAC,CAAC;IAC/B;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACE,oBAAoB,GAAG,IAAIF,GAAG,CAAC,CAAC;IACrC;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACG,oBAAoB,GAAG,IAAIH,GAAG,CAAC,CAAC;IACrC;AACR;AACA;AACA;IACQ,IAAI,CAACI,oBAAoB,GAAG,IAAI;IAChC;AACR;AACA;AACA;IACQ,IAAI,CAACC,oBAAoB,GAAG,IAAI;IAChC;AACR;AACA;AACA;IACQ,IAAI,CAACC,4BAA4B,GAAG,IAAI;IACxC;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,2BAA2B,GAAG,IAAI;IACvC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,oBAAoB,GAAG,IAAIV,GAAG,CAAC,CAAC;IACrC;AACR;AACA;AACA;IACQ,IAAI,CAACW,cAAc,GAAG,kBAAkB;IACxC;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,4BAA4B,GAAG,IAAI;IACxC;IACA,IAAI,CAACC,mBAAmB,GAAG,KAAK;IAChC,IAAI,CAACC,sBAAsB,GAAG,KAAK;IACnC,IAAI,CAACC,YAAY,GAAG,KAAK;IACzB;IACA;IACA;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,UAAU,GAAG,IAAIxQ,eAAe,CAAC;MAAEiK,KAAK,EAAE,CAAC;MAAEC,GAAG,EAAEuG,MAAM,CAACC;IAAU,CAAC,CAAC;IAC1E,IAAI,CAAC3B,IAAI,EAAE;MACP,IAAI,CAACD,WAAW,CAACzL,aAAa,CAACsN,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC;IAC/D;IACA,IAAI,CAAC1B,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAAC1H,kBAAkB,GAAG,IAAI,CAACuH,WAAW,CAACzL,aAAa,CAACuN,QAAQ,KAAK,OAAO;EACjF;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,IAAIC,OAAOA,CAAA,EAAG;IACV,OAAO,IAAI,CAACC,UAAU;EAC1B;EACA,IAAID,OAAOA,CAACE,EAAE,EAAE;IACZ,IAAI,CAAC,OAAOC,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAKD,EAAE,IAAI,IAAI,IAAI,OAAOA,EAAE,KAAK,UAAU,EAAE;MAC3FE,OAAO,CAACC,IAAI,CAAE,4CAA2CtD,IAAI,CAACC,SAAS,CAACkD,EAAE,CAAE,GAAE,CAAC;IACnF;IACA,IAAI,CAACD,UAAU,GAAGC,EAAE;EACxB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAII,UAAUA,CAAA,EAAG;IACb,OAAO,IAAI,CAACC,WAAW;EAC3B;EACA,IAAID,UAAUA,CAACA,UAAU,EAAE;IACvB,IAAI,IAAI,CAACC,WAAW,KAAKD,UAAU,EAAE;MACjC,IAAI,CAACE,iBAAiB,CAACF,UAAU,CAAC;IACtC;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,IAAIG,qBAAqBA,CAAA,EAAG;IACxB,OAAO,IAAI,CAAChB,sBAAsB;EACtC;EACA,IAAIgB,qBAAqBA,CAAC1Q,CAAC,EAAE;IACzB,IAAI,CAAC0P,sBAAsB,GAAGxS,qBAAqB,CAAC8C,CAAC,CAAC;IACtD;IACA;IACA,IAAI,IAAI,CAAC2Q,UAAU,IAAI,IAAI,CAACA,UAAU,CAACjD,aAAa,CAACvJ,MAAM,EAAE;MACzD,IAAI,CAACyM,oBAAoB,CAAC,CAAC;MAC3B,IAAI,CAACC,wBAAwB,CAAC,CAAC;IACnC;EACJ;EACA;AACJ;AACA;AACA;EACI,IAAIC,WAAWA,CAAA,EAAG;IACd,OAAO,IAAI,CAACnB,YAAY;EAC5B;EACA,IAAImB,WAAWA,CAAC9Q,CAAC,EAAE;IACf,IAAI,CAAC2P,YAAY,GAAGzS,qBAAqB,CAAC8C,CAAC,CAAC;IAC5C;IACA,IAAI,CAACqP,2BAA2B,GAAG,IAAI;IACvC,IAAI,CAACD,4BAA4B,GAAG,IAAI;EAC5C;EACA2B,QAAQA,CAAA,EAAG;IACP,IAAI,CAACC,kBAAkB,CAAC,CAAC;IACzB,IAAI,IAAI,CAACrK,kBAAkB,EAAE;MACzB,IAAI,CAACsK,yBAAyB,CAAC,CAAC;IACpC;IACA;IACA;IACA;IACA,IAAI,CAACC,WAAW,GAAG,IAAI,CAACxM,QAAQ,CAACM,IAAI,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAACkM,EAAE,EAAEC,OAAO,KAAK;MAC9D,OAAO,IAAI,CAACnB,OAAO,GAAG,IAAI,CAACA,OAAO,CAACmB,OAAO,CAACC,SAAS,EAAED,OAAO,CAACrE,IAAI,CAAC,GAAGqE,OAAO;IACjF,CAAC,CAAC;IACF,IAAI,CAAC5C,cAAc,CAAC8C,MAAM,CAAC,CAAC,CAACrN,IAAI,CAAC1E,SAAS,CAAC,IAAI,CAACmP,UAAU,CAAC,CAAC,CAACxK,SAAS,CAAC,MAAM;MAC1E,IAAI,CAACmL,2BAA2B,GAAG,IAAI;IAC3C,CAAC,CAAC;EACN;EACAkC,qBAAqBA,CAAA,EAAG;IACpB;IACA,IAAI,CAACC,aAAa,CAAC,CAAC;IACpB,IAAI,CAACC,gBAAgB,CAAC,CAAC;IACvB;IACA,IAAI,CAAC,IAAI,CAACC,cAAc,CAACvN,MAAM,IAAI,CAAC,IAAI,CAACwN,cAAc,CAACxN,MAAM,IAAI,CAAC,IAAI,CAACyN,QAAQ,CAACzN,MAAM,KAClF,OAAOiM,SAAS,KAAK,WAAW,IAAIA,SAAS,CAAC,EAAE;MACjD,MAAMlD,2BAA2B,CAAC,CAAC;IACvC;IACA;IACA,MAAM2E,cAAc,GAAG,IAAI,CAACC,qBAAqB,CAAC,CAAC;IACnD,MAAMC,cAAc,GAAGF,cAAc,IAAI,IAAI,CAAC3C,oBAAoB,IAAI,IAAI,CAACC,oBAAoB;IAC/F;IACA,IAAI,CAACC,4BAA4B,GAAG,IAAI,CAACA,4BAA4B,IAAI2C,cAAc;IACvF,IAAI,CAAC1C,2BAA2B,GAAG0C,cAAc;IACjD;IACA,IAAI,IAAI,CAAC7C,oBAAoB,EAAE;MAC3B,IAAI,CAAC8C,sBAAsB,CAAC,CAAC;MAC7B,IAAI,CAAC9C,oBAAoB,GAAG,KAAK;IACrC;IACA;IACA,IAAI,IAAI,CAACC,oBAAoB,EAAE;MAC3B,IAAI,CAAC8C,sBAAsB,CAAC,CAAC;MAC7B,IAAI,CAAC9C,oBAAoB,GAAG,KAAK;IACrC;IACA;IACA;IACA,IAAI,IAAI,CAACoB,UAAU,IAAI,IAAI,CAACqB,QAAQ,CAACzN,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC+N,yBAAyB,EAAE;MAChF,IAAI,CAACC,qBAAqB,CAAC,CAAC;IAChC,CAAC,MACI,IAAI,IAAI,CAAC/C,4BAA4B,EAAE;MACxC;MACA;MACA,IAAI,CAACyB,wBAAwB,CAAC,CAAC;IACnC;IACA,IAAI,CAACuB,kBAAkB,CAAC,CAAC;EAC7B;EACAvO,WAAWA,CAAA,EAAG;IACV,IAAI,CAAC8M,UAAU,CAACjD,aAAa,CAAC2E,KAAK,CAAC,CAAC;IACrC,IAAI,CAACC,gBAAgB,CAAC5E,aAAa,CAAC2E,KAAK,CAAC,CAAC;IAC3C,IAAI,CAACE,gBAAgB,CAAC7E,aAAa,CAAC2E,KAAK,CAAC,CAAC;IAC3C,IAAI,CAACG,gBAAgB,CAAC9E,aAAa,CAAC2E,KAAK,CAAC,CAAC;IAC3C,IAAI,CAAC/C,oBAAoB,CAAC+C,KAAK,CAAC,CAAC;IACjC,IAAI,CAAC3D,UAAU,CAAC5K,IAAI,CAAC,CAAC;IACtB,IAAI,CAAC4K,UAAU,CAAC3K,QAAQ,CAAC,CAAC;IAC1B,IAAI1G,YAAY,CAAC,IAAI,CAACkT,UAAU,CAAC,EAAE;MAC/B,IAAI,CAACA,UAAU,CAACkC,UAAU,CAAC,IAAI,CAAC;IACpC;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,UAAUA,CAAA,EAAG;IACT,IAAI,CAACC,WAAW,GAAG,IAAI,CAACC,iBAAiB,CAAC,CAAC;IAC3C,MAAMhO,OAAO,GAAG,IAAI,CAACsM,WAAW,CAAChM,IAAI,CAAC,IAAI,CAACyN,WAAW,CAAC;IACvD,IAAI,CAAC/N,OAAO,EAAE;MACV,IAAI,CAACiO,gBAAgB,CAAC,CAAC;MACvB;IACJ;IACA,MAAMnF,aAAa,GAAG,IAAI,CAACiD,UAAU,CAACjD,aAAa;IACnD,IAAI,CAACa,aAAa,CAACuE,YAAY,CAAClO,OAAO,EAAE8I,aAAa,EAAE,CAACqF,MAAM,EAAEC,sBAAsB,EAAEC,YAAY,KAAK,IAAI,CAACC,oBAAoB,CAACH,MAAM,CAACI,IAAI,EAAEF,YAAY,CAAC,EAAGF,MAAM,IAAKA,MAAM,CAACI,IAAI,CAACpG,IAAI,EAAGuE,MAAM,IAAK;MACtM,IAAIA,MAAM,CAAC8B,SAAS,KAAK,CAAC,CAAC,kBAAkB9B,MAAM,CAAC+B,OAAO,EAAE;QACzD,IAAI,CAACC,0BAA0B,CAAChC,MAAM,CAACyB,MAAM,CAACI,IAAI,CAACI,MAAM,EAAEjC,MAAM,CAAC+B,OAAO,CAAC;MAC9E;IACJ,CAAC,CAAC;IACF;IACA,IAAI,CAACG,sBAAsB,CAAC,CAAC;IAC7B;IACA;IACA5O,OAAO,CAAC6O,qBAAqB,CAAEV,MAAM,IAAK;MACtC,MAAMW,OAAO,GAAGhG,aAAa,CAACiG,GAAG,CAACZ,MAAM,CAACE,YAAY,CAAC;MACtDS,OAAO,CAACL,OAAO,CAACO,SAAS,GAAGb,MAAM,CAACI,IAAI,CAACpG,IAAI;IAChD,CAAC,CAAC;IACF,IAAI,CAAC8F,gBAAgB,CAAC,CAAC;IACvB,IAAI,CAAChC,wBAAwB,CAAC,CAAC;EACnC;EACA;EACAgD,YAAYA,CAACvR,SAAS,EAAE;IACpB,IAAI,CAACuM,iBAAiB,CAAClM,GAAG,CAACL,SAAS,CAAC;EACzC;EACA;EACAwR,eAAeA,CAACxR,SAAS,EAAE;IACvB,IAAI,CAACuM,iBAAiB,CAACkF,MAAM,CAACzR,SAAS,CAAC;EAC5C;EACA;EACA0R,SAASA,CAACT,MAAM,EAAE;IACd,IAAI,CAACxE,cAAc,CAACpM,GAAG,CAAC4Q,MAAM,CAAC;EACnC;EACA;EACAU,YAAYA,CAACV,MAAM,EAAE;IACjB,IAAI,CAACxE,cAAc,CAACgF,MAAM,CAACR,MAAM,CAAC;EACtC;EACA;EACAW,eAAeA,CAACC,YAAY,EAAE;IAC1B,IAAI,CAACnF,oBAAoB,CAACrM,GAAG,CAACwR,YAAY,CAAC;IAC3C,IAAI,CAACjF,oBAAoB,GAAG,IAAI;EACpC;EACA;EACAkF,kBAAkBA,CAACD,YAAY,EAAE;IAC7B,IAAI,CAACnF,oBAAoB,CAAC+E,MAAM,CAACI,YAAY,CAAC;IAC9C,IAAI,CAACjF,oBAAoB,GAAG,IAAI;EACpC;EACA;EACAmF,eAAeA,CAACC,YAAY,EAAE;IAC1B,IAAI,CAACrF,oBAAoB,CAACtM,GAAG,CAAC2R,YAAY,CAAC;IAC3C,IAAI,CAACnF,oBAAoB,GAAG,IAAI;EACpC;EACA;EACAoF,kBAAkBA,CAACD,YAAY,EAAE;IAC7B,IAAI,CAACrF,oBAAoB,CAAC8E,MAAM,CAACO,YAAY,CAAC;IAC9C,IAAI,CAACnF,oBAAoB,GAAG,IAAI;EACpC;EACA;EACAqF,YAAYA,CAACC,SAAS,EAAE;IACpB,IAAI,CAACC,gBAAgB,GAAGD,SAAS;EACrC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIE,2BAA2BA,CAAA,EAAG;IAC1B,MAAMC,UAAU,GAAG,IAAI,CAACC,gBAAgB,CAAC,IAAI,CAACtC,gBAAgB,CAAC;IAC/D,MAAMnH,YAAY,GAAG,IAAI,CAAC8C,WAAW,CAACzL,aAAa;IACnD;IACA;IACA;IACA,MAAMqS,KAAK,GAAG1J,YAAY,CAACE,aAAa,CAAC,OAAO,CAAC;IACjD,IAAIwJ,KAAK,EAAE;MACPA,KAAK,CAACtJ,KAAK,CAACuJ,OAAO,GAAGH,UAAU,CAACzQ,MAAM,GAAG,EAAE,GAAG,MAAM;IACzD;IACA,MAAM4F,YAAY,GAAG,IAAI,CAAC2H,cAAc,CAACjI,GAAG,CAACuL,GAAG,IAAIA,GAAG,CAACjV,MAAM,CAAC;IAC/D,IAAI,CAACkV,aAAa,CAAC7N,sBAAsB,CAACwN,UAAU,EAAE,CAAC,KAAK,CAAC,CAAC;IAC9D,IAAI,CAACK,aAAa,CAACpL,SAAS,CAAC+K,UAAU,EAAE7K,YAAY,EAAE,KAAK,CAAC;IAC7D;IACA,IAAI,CAAC2H,cAAc,CAACwD,OAAO,CAACF,GAAG,IAAIA,GAAG,CAAC7U,kBAAkB,CAAC,CAAC,CAAC;EAChE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIgV,2BAA2BA,CAAA,EAAG;IAC1B,MAAMC,UAAU,GAAG,IAAI,CAACP,gBAAgB,CAAC,IAAI,CAACrC,gBAAgB,CAAC;IAC/D,MAAMpH,YAAY,GAAG,IAAI,CAAC8C,WAAW,CAACzL,aAAa;IACnD;IACA;IACA;IACA,MAAM4I,KAAK,GAAGD,YAAY,CAACE,aAAa,CAAC,OAAO,CAAC;IACjD,IAAID,KAAK,EAAE;MACPA,KAAK,CAACG,KAAK,CAACuJ,OAAO,GAAGK,UAAU,CAACjR,MAAM,GAAG,EAAE,GAAG,MAAM;IACzD;IACA,MAAM4F,YAAY,GAAG,IAAI,CAAC4H,cAAc,CAAClI,GAAG,CAACuL,GAAG,IAAIA,GAAG,CAACjV,MAAM,CAAC;IAC/D,IAAI,CAACkV,aAAa,CAAC7N,sBAAsB,CAACgO,UAAU,EAAE,CAAC,QAAQ,CAAC,CAAC;IACjE,IAAI,CAACH,aAAa,CAACpL,SAAS,CAACuL,UAAU,EAAErL,YAAY,EAAE,QAAQ,CAAC;IAChE,IAAI,CAACkL,aAAa,CAAC9J,2BAA2B,CAAC,IAAI,CAAC+C,WAAW,CAACzL,aAAa,EAAEsH,YAAY,CAAC;IAC5F;IACA,IAAI,CAAC4H,cAAc,CAACuD,OAAO,CAACF,GAAG,IAAIA,GAAG,CAAC7U,kBAAkB,CAAC,CAAC,CAAC;EAChE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI0Q,wBAAwBA,CAAA,EAAG;IACvB,MAAM+D,UAAU,GAAG,IAAI,CAACC,gBAAgB,CAAC,IAAI,CAACtC,gBAAgB,CAAC;IAC/D,MAAM8C,QAAQ,GAAG,IAAI,CAACR,gBAAgB,CAAC,IAAI,CAAClE,UAAU,CAAC;IACvD,MAAMyE,UAAU,GAAG,IAAI,CAACP,gBAAgB,CAAC,IAAI,CAACrC,gBAAgB,CAAC;IAC/D;IACA;IACA;IACA;IACA,IAAK,IAAI,CAAC7L,kBAAkB,IAAI,CAAC,IAAI,CAACgJ,YAAY,IAC3C,IAAI,CAACP,4BAA4B,EAAE;MACtC;MACA;MACA,IAAI,CAAC6F,aAAa,CAAC7N,sBAAsB,CAAC,CAAC,GAAGwN,UAAU,EAAE,GAAGS,QAAQ,EAAE,GAAGD,UAAU,CAAC,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;MACzG,IAAI,CAAChG,4BAA4B,GAAG,KAAK;IAC7C;IACA;IACAwF,UAAU,CAACM,OAAO,CAAC,CAACI,SAAS,EAAE3N,CAAC,KAAK;MACjC,IAAI,CAAC4N,sBAAsB,CAAC,CAACD,SAAS,CAAC,EAAE,IAAI,CAAC5D,cAAc,CAAC/J,CAAC,CAAC,CAAC;IACpE,CAAC,CAAC;IACF;IACA,IAAI,CAACiK,QAAQ,CAACsD,OAAO,CAAC3B,MAAM,IAAI;MAC5B;MACA,MAAMlM,IAAI,GAAG,EAAE;MACf,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0N,QAAQ,CAAClR,MAAM,EAAEwD,CAAC,EAAE,EAAE;QACtC,IAAI,IAAI,CAACgL,WAAW,CAAChL,CAAC,CAAC,CAAC4L,MAAM,KAAKA,MAAM,EAAE;UACvClM,IAAI,CAAC1D,IAAI,CAAC0R,QAAQ,CAAC1N,CAAC,CAAC,CAAC;QAC1B;MACJ;MACA,IAAI,CAAC4N,sBAAsB,CAAClO,IAAI,EAAEkM,MAAM,CAAC;IAC7C,CAAC,CAAC;IACF;IACA6B,UAAU,CAACF,OAAO,CAAC,CAACM,SAAS,EAAE7N,CAAC,KAAK;MACjC,IAAI,CAAC4N,sBAAsB,CAAC,CAACC,SAAS,CAAC,EAAE,IAAI,CAAC7D,cAAc,CAAChK,CAAC,CAAC,CAAC;IACpE,CAAC,CAAC;IACF;IACA4C,KAAK,CAACpL,IAAI,CAAC,IAAI,CAACwP,iBAAiB,CAAC8G,MAAM,CAAC,CAAC,CAAC,CAACP,OAAO,CAACF,GAAG,IAAIA,GAAG,CAAC7U,kBAAkB,CAAC,CAAC,CAAC;EACxF;EACA;AACJ;AACA;AACA;AACA;EACIyS,iBAAiBA,CAAA,EAAG;IAChB,MAAMF,UAAU,GAAG,EAAE;IACrB;IACA;IACA,MAAMgD,oBAAoB,GAAG,IAAI,CAACpG,oBAAoB;IACtD,IAAI,CAACA,oBAAoB,GAAG,IAAIV,GAAG,CAAC,CAAC;IACrC;IACA;IACA,KAAK,IAAIjH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACgO,KAAK,CAACxR,MAAM,EAAEwD,CAAC,EAAE,EAAE;MACxC,IAAIoF,IAAI,GAAG,IAAI,CAAC4I,KAAK,CAAChO,CAAC,CAAC;MACxB,MAAMiO,iBAAiB,GAAG,IAAI,CAACC,qBAAqB,CAAC9I,IAAI,EAAEpF,CAAC,EAAE+N,oBAAoB,CAAC/B,GAAG,CAAC5G,IAAI,CAAC,CAAC;MAC7F,IAAI,CAAC,IAAI,CAACuC,oBAAoB,CAACwG,GAAG,CAAC/I,IAAI,CAAC,EAAE;QACtC,IAAI,CAACuC,oBAAoB,CAACyG,GAAG,CAAChJ,IAAI,EAAE,IAAIiJ,OAAO,CAAC,CAAC,CAAC;MACtD;MACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,iBAAiB,CAACzR,MAAM,EAAE8R,CAAC,EAAE,EAAE;QAC/C,IAAIC,SAAS,GAAGN,iBAAiB,CAACK,CAAC,CAAC;QACpC,MAAME,KAAK,GAAG,IAAI,CAAC7G,oBAAoB,CAACqE,GAAG,CAACuC,SAAS,CAACnJ,IAAI,CAAC;QAC3D,IAAIoJ,KAAK,CAACL,GAAG,CAACI,SAAS,CAAC3C,MAAM,CAAC,EAAE;UAC7B4C,KAAK,CAACxC,GAAG,CAACuC,SAAS,CAAC3C,MAAM,CAAC,CAAC5P,IAAI,CAACuS,SAAS,CAAC;QAC/C,CAAC,MACI;UACDC,KAAK,CAACJ,GAAG,CAACG,SAAS,CAAC3C,MAAM,EAAE,CAAC2C,SAAS,CAAC,CAAC;QAC5C;QACAxD,UAAU,CAAC/O,IAAI,CAACuS,SAAS,CAAC;MAC9B;IACJ;IACA,OAAOxD,UAAU;EACrB;EACA;AACJ;AACA;AACA;AACA;EACImD,qBAAqBA,CAAC9I,IAAI,EAAEsE,SAAS,EAAE8E,KAAK,EAAE;IAC1C,MAAMC,OAAO,GAAG,IAAI,CAACC,WAAW,CAACtJ,IAAI,EAAEsE,SAAS,CAAC;IACjD,OAAO+E,OAAO,CAAC3M,GAAG,CAAC8J,MAAM,IAAI;MACzB,MAAM+C,gBAAgB,GAAIH,KAAK,IAAIA,KAAK,CAACL,GAAG,CAACvC,MAAM,CAAC,GAAI4C,KAAK,CAACxC,GAAG,CAACJ,MAAM,CAAC,GAAG,EAAE;MAC9E,IAAI+C,gBAAgB,CAACnS,MAAM,EAAE;QACzB,MAAMiN,OAAO,GAAGkF,gBAAgB,CAACC,KAAK,CAAC,CAAC;QACxCnF,OAAO,CAACC,SAAS,GAAGA,SAAS;QAC7B,OAAOD,OAAO;MAClB,CAAC,MACI;QACD,OAAO;UAAErE,IAAI;UAAEwG,MAAM;UAAElC;QAAU,CAAC;MACtC;IACJ,CAAC,CAAC;EACN;EACA;EACAI,gBAAgBA,CAAA,EAAG;IACf,IAAI,CAAC9C,iBAAiB,CAAC0D,KAAK,CAAC,CAAC;IAC9B,MAAMmE,UAAU,GAAGC,gBAAgB,CAAC,IAAI,CAACC,WAAW,CAAC,IAAI,CAACC,kBAAkB,CAAC,EAAE,IAAI,CAAC9H,iBAAiB,CAAC;IACtG2H,UAAU,CAACtB,OAAO,CAAC5S,SAAS,IAAI;MAC5B,IAAI,IAAI,CAACqM,iBAAiB,CAACmH,GAAG,CAACxT,SAAS,CAACnB,IAAI,CAAC,KACzC,OAAOiP,SAAS,KAAK,WAAW,IAAIA,SAAS,CAAC,EAAE;QACjD,MAAMxD,gCAAgC,CAACtK,SAAS,CAACnB,IAAI,CAAC;MAC1D;MACA,IAAI,CAACwN,iBAAiB,CAACoH,GAAG,CAACzT,SAAS,CAACnB,IAAI,EAAEmB,SAAS,CAAC;IACzD,CAAC,CAAC;EACN;EACA;EACAkP,aAAaA,CAAA,EAAG;IACZ,IAAI,CAACE,cAAc,GAAG+E,gBAAgB,CAAC,IAAI,CAACC,WAAW,CAAC,IAAI,CAACE,qBAAqB,CAAC,EAAE,IAAI,CAAC5H,oBAAoB,CAAC;IAC/G,IAAI,CAAC2C,cAAc,GAAG8E,gBAAgB,CAAC,IAAI,CAACC,WAAW,CAAC,IAAI,CAACG,qBAAqB,CAAC,EAAE,IAAI,CAAC5H,oBAAoB,CAAC;IAC/G,IAAI,CAAC2C,QAAQ,GAAG6E,gBAAgB,CAAC,IAAI,CAACC,WAAW,CAAC,IAAI,CAACI,eAAe,CAAC,EAAE,IAAI,CAAC/H,cAAc,CAAC;IAC7F;IACA,MAAMgI,cAAc,GAAG,IAAI,CAACnF,QAAQ,CAACoF,MAAM,CAAChC,GAAG,IAAI,CAACA,GAAG,CAACiC,IAAI,CAAC;IAC7D,IAAI,CAAC,IAAI,CAACvG,qBAAqB,IAAIqG,cAAc,CAAC5S,MAAM,GAAG,CAAC,KACvD,OAAOiM,SAAS,KAAK,WAAW,IAAIA,SAAS,CAAC,EAAE;MACjD,MAAMvD,mCAAmC,CAAC,CAAC;IAC/C;IACA,IAAI,CAACqK,cAAc,GAAGH,cAAc,CAAC,CAAC,CAAC;EAC3C;EACA;AACJ;AACA;AACA;AACA;EACIjF,qBAAqBA,CAAA,EAAG;IACpB,MAAMqF,kBAAkB,GAAGA,CAACC,GAAG,EAAEpC,GAAG,KAAKoC,GAAG,IAAI,CAAC,CAACpC,GAAG,CAAC7P,cAAc,CAAC,CAAC;IACtE;IACA,MAAMkS,kBAAkB,GAAG,IAAI,CAACzF,QAAQ,CAAC0F,MAAM,CAACH,kBAAkB,EAAE,KAAK,CAAC;IAC1E,IAAIE,kBAAkB,EAAE;MACpB,IAAI,CAACzG,oBAAoB,CAAC,CAAC;IAC/B;IACA;IACA,MAAM2G,oBAAoB,GAAG,IAAI,CAAC7F,cAAc,CAAC4F,MAAM,CAACH,kBAAkB,EAAE,KAAK,CAAC;IAClF,IAAII,oBAAoB,EAAE;MACtB,IAAI,CAACvF,sBAAsB,CAAC,CAAC;IACjC;IACA,MAAMwF,oBAAoB,GAAG,IAAI,CAAC7F,cAAc,CAAC2F,MAAM,CAACH,kBAAkB,EAAE,KAAK,CAAC;IAClF,IAAIK,oBAAoB,EAAE;MACtB,IAAI,CAACvF,sBAAsB,CAAC,CAAC;IACjC;IACA,OAAOoF,kBAAkB,IAAIE,oBAAoB,IAAIC,oBAAoB;EAC7E;EACA;AACJ;AACA;AACA;AACA;EACI/G,iBAAiBA,CAACF,UAAU,EAAE;IAC1B,IAAI,CAACoF,KAAK,GAAG,EAAE;IACf,IAAItY,YAAY,CAAC,IAAI,CAACkT,UAAU,CAAC,EAAE;MAC/B,IAAI,CAACA,UAAU,CAACkC,UAAU,CAAC,IAAI,CAAC;IACpC;IACA;IACA,IAAI,IAAI,CAACP,yBAAyB,EAAE;MAChC,IAAI,CAACA,yBAAyB,CAACuF,WAAW,CAAC,CAAC;MAC5C,IAAI,CAACvF,yBAAyB,GAAG,IAAI;IACzC;IACA,IAAI,CAAC3B,UAAU,EAAE;MACb,IAAI,IAAI,CAACW,WAAW,EAAE;QAClB,IAAI,CAACA,WAAW,CAAChM,IAAI,CAAC,EAAE,CAAC;MAC7B;MACA,IAAI,CAACyL,UAAU,CAACjD,aAAa,CAAC2E,KAAK,CAAC,CAAC;IACzC;IACA,IAAI,CAAC7B,WAAW,GAAGD,UAAU;EACjC;EACA;EACA4B,qBAAqBA,CAAA,EAAG;IACpB;IACA,IAAI,CAAC,IAAI,CAAC5B,UAAU,EAAE;MAClB;IACJ;IACA,IAAImH,UAAU;IACd,IAAIra,YAAY,CAAC,IAAI,CAACkT,UAAU,CAAC,EAAE;MAC/BmH,UAAU,GAAG,IAAI,CAACnH,UAAU,CAACoH,OAAO,CAAC,IAAI,CAAC;IAC9C,CAAC,MACI,IAAItY,YAAY,CAAC,IAAI,CAACkR,UAAU,CAAC,EAAE;MACpCmH,UAAU,GAAG,IAAI,CAACnH,UAAU;IAChC,CAAC,MACI,IAAIhG,KAAK,CAACqN,OAAO,CAAC,IAAI,CAACrH,UAAU,CAAC,EAAE;MACrCmH,UAAU,GAAGpY,EAAE,CAAC,IAAI,CAACiR,UAAU,CAAC;IACpC;IACA,IAAImH,UAAU,KAAK1V,SAAS,KAAK,OAAOoO,SAAS,KAAK,WAAW,IAAIA,SAAS,CAAC,EAAE;MAC7E,MAAMjD,8BAA8B,CAAC,CAAC;IAC1C;IACA,IAAI,CAAC+E,yBAAyB,GAAGwF,UAAU,CAACzT,IAAI,CAAC1E,SAAS,CAAC,IAAI,CAACmP,UAAU,CAAC,CAAC,CACvExK,SAAS,CAAC6I,IAAI,IAAI;MACnB,IAAI,CAAC4I,KAAK,GAAG5I,IAAI,IAAI,EAAE;MACvB,IAAI,CAAC2F,UAAU,CAAC,CAAC;IACrB,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;EACIV,sBAAsBA,CAAA,EAAG;IACrB;IACA,IAAI,IAAI,CAACO,gBAAgB,CAAC7E,aAAa,CAACvJ,MAAM,GAAG,CAAC,EAAE;MAChD,IAAI,CAACoO,gBAAgB,CAAC7E,aAAa,CAAC2E,KAAK,CAAC,CAAC;IAC/C;IACA,IAAI,CAACX,cAAc,CAACwD,OAAO,CAAC,CAACF,GAAG,EAAErN,CAAC,KAAK,IAAI,CAACkQ,UAAU,CAAC,IAAI,CAACtF,gBAAgB,EAAEyC,GAAG,EAAErN,CAAC,CAAC,CAAC;IACvF,IAAI,CAACgN,2BAA2B,CAAC,CAAC;EACtC;EACA;AACJ;AACA;AACA;EACI1C,sBAAsBA,CAAA,EAAG;IACrB;IACA,IAAI,IAAI,CAACO,gBAAgB,CAAC9E,aAAa,CAACvJ,MAAM,GAAG,CAAC,EAAE;MAChD,IAAI,CAACqO,gBAAgB,CAAC9E,aAAa,CAAC2E,KAAK,CAAC,CAAC;IAC/C;IACA,IAAI,CAACV,cAAc,CAACuD,OAAO,CAAC,CAACF,GAAG,EAAErN,CAAC,KAAK,IAAI,CAACkQ,UAAU,CAAC,IAAI,CAACrF,gBAAgB,EAAEwC,GAAG,EAAErN,CAAC,CAAC,CAAC;IACvF,IAAI,CAACwN,2BAA2B,CAAC,CAAC;EACtC;EACA;EACAI,sBAAsBA,CAAClO,IAAI,EAAEkM,MAAM,EAAE;IACjC,MAAMiD,UAAU,GAAGjM,KAAK,CAACpL,IAAI,CAACoU,MAAM,CAACzO,OAAO,IAAI,EAAE,CAAC,CAAC2E,GAAG,CAACqO,UAAU,IAAI;MAClE,MAAMxV,SAAS,GAAG,IAAI,CAACqM,iBAAiB,CAACgF,GAAG,CAACmE,UAAU,CAAC;MACxD,IAAI,CAACxV,SAAS,KAAK,OAAO8N,SAAS,KAAK,WAAW,IAAIA,SAAS,CAAC,EAAE;QAC/D,MAAM3D,0BAA0B,CAACqL,UAAU,CAAC;MAChD;MACA,OAAOxV,SAAS;IACpB,CAAC,CAAC;IACF,MAAM0F,iBAAiB,GAAGwO,UAAU,CAAC/M,GAAG,CAACnH,SAAS,IAAIA,SAAS,CAACvC,MAAM,CAAC;IACvE,MAAMkI,eAAe,GAAGuO,UAAU,CAAC/M,GAAG,CAACnH,SAAS,IAAIA,SAAS,CAAChB,SAAS,CAAC;IACxE,IAAI,CAAC2T,aAAa,CAAClN,mBAAmB,CAACV,IAAI,EAAEW,iBAAiB,EAAEC,eAAe,EAAE,CAAC,IAAI,CAAC0H,YAAY,IAAI,IAAI,CAACN,2BAA2B,CAAC;EAC5I;EACA;EACAwF,gBAAgBA,CAACkD,SAAS,EAAE;IACxB,MAAMC,YAAY,GAAG,EAAE;IACvB,KAAK,IAAIrQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoQ,SAAS,CAACrK,aAAa,CAACvJ,MAAM,EAAEwD,CAAC,EAAE,EAAE;MACrD,MAAMsQ,OAAO,GAAGF,SAAS,CAACrK,aAAa,CAACiG,GAAG,CAAChM,CAAC,CAAC;MAC9CqQ,YAAY,CAACrU,IAAI,CAACsU,OAAO,CAACC,SAAS,CAAC,CAAC,CAAC,CAAC;IAC3C;IACA,OAAOF,YAAY;EACvB;EACA;AACJ;AACA;AACA;AACA;AACA;EACI3B,WAAWA,CAACtJ,IAAI,EAAEsE,SAAS,EAAE;IACzB,IAAI,IAAI,CAACO,QAAQ,CAACzN,MAAM,IAAI,CAAC,EAAE;MAC3B,OAAO,CAAC,IAAI,CAACyN,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC7B;IACA,IAAIwE,OAAO,GAAG,EAAE;IAChB,IAAI,IAAI,CAAC1F,qBAAqB,EAAE;MAC5B0F,OAAO,GAAG,IAAI,CAACxE,QAAQ,CAACoF,MAAM,CAAChC,GAAG,IAAI,CAACA,GAAG,CAACiC,IAAI,IAAIjC,GAAG,CAACiC,IAAI,CAAC5F,SAAS,EAAEtE,IAAI,CAAC,CAAC;IACjF,CAAC,MACI;MACD,IAAIwG,MAAM,GAAG,IAAI,CAAC3B,QAAQ,CAAC5M,IAAI,CAACgQ,GAAG,IAAIA,GAAG,CAACiC,IAAI,IAAIjC,GAAG,CAACiC,IAAI,CAAC5F,SAAS,EAAEtE,IAAI,CAAC,CAAC,IAAI,IAAI,CAACmK,cAAc;MACpG,IAAI3D,MAAM,EAAE;QACR6C,OAAO,CAACzS,IAAI,CAAC4P,MAAM,CAAC;MACxB;IACJ;IACA,IAAI,CAAC6C,OAAO,CAACjS,MAAM,KAAK,OAAOiM,SAAS,KAAK,WAAW,IAAIA,SAAS,CAAC,EAAE;MACpE,MAAMtD,kCAAkC,CAACC,IAAI,CAAC;IAClD;IACA,OAAOqJ,OAAO;EAClB;EACAlD,oBAAoBA,CAACgD,SAAS,EAAEvM,KAAK,EAAE;IACnC,MAAM4J,MAAM,GAAG2C,SAAS,CAAC3C,MAAM;IAC/B,MAAMF,OAAO,GAAG;MAAEO,SAAS,EAAEsC,SAAS,CAACnJ;IAAK,CAAC;IAC7C,OAAO;MACHvG,WAAW,EAAE+M,MAAM,CAAChT,QAAQ;MAC5B8S,OAAO;MACP1J;IACJ,CAAC;EACL;EACA;AACJ;AACA;AACA;AACA;EACIkO,UAAUA,CAACM,MAAM,EAAE5E,MAAM,EAAE5J,KAAK,EAAE0J,OAAO,GAAG,CAAC,CAAC,EAAE;IAC5C;IACA,MAAM+E,IAAI,GAAGD,MAAM,CAACzK,aAAa,CAAC2K,kBAAkB,CAAC9E,MAAM,CAAChT,QAAQ,EAAE8S,OAAO,EAAE1J,KAAK,CAAC;IACrF,IAAI,CAAC2J,0BAA0B,CAACC,MAAM,EAAEF,OAAO,CAAC;IAChD,OAAO+E,IAAI;EACf;EACA9E,0BAA0BA,CAACC,MAAM,EAAEF,OAAO,EAAE;IACxC,KAAK,IAAIiF,YAAY,IAAI,IAAI,CAACC,iBAAiB,CAAChF,MAAM,CAAC,EAAE;MACrD,IAAI1N,aAAa,CAACE,oBAAoB,EAAE;QACpCF,aAAa,CAACE,oBAAoB,CAACD,cAAc,CAACuS,kBAAkB,CAACC,YAAY,EAAEjF,OAAO,CAAC;MAC/F;IACJ;IACA,IAAI,CAACpF,kBAAkB,CAACuK,YAAY,CAAC,CAAC;EAC1C;EACA;AACJ;AACA;AACA;EACIhF,sBAAsBA,CAAA,EAAG;IACrB,MAAM9F,aAAa,GAAG,IAAI,CAACiD,UAAU,CAACjD,aAAa;IACnD,KAAK,IAAI+K,WAAW,GAAG,CAAC,EAAEC,KAAK,GAAGhL,aAAa,CAACvJ,MAAM,EAAEsU,WAAW,GAAGC,KAAK,EAAED,WAAW,EAAE,EAAE;MACxF,MAAMR,OAAO,GAAGvK,aAAa,CAACiG,GAAG,CAAC8E,WAAW,CAAC;MAC9C,MAAMpF,OAAO,GAAG4E,OAAO,CAAC5E,OAAO;MAC/BA,OAAO,CAACqF,KAAK,GAAGA,KAAK;MACrBrF,OAAO,CAACsF,KAAK,GAAGF,WAAW,KAAK,CAAC;MACjCpF,OAAO,CAACuF,IAAI,GAAGH,WAAW,KAAKC,KAAK,GAAG,CAAC;MACxCrF,OAAO,CAACwF,IAAI,GAAGJ,WAAW,GAAG,CAAC,KAAK,CAAC;MACpCpF,OAAO,CAACyF,GAAG,GAAG,CAACzF,OAAO,CAACwF,IAAI;MAC3B,IAAI,IAAI,CAACnI,qBAAqB,EAAE;QAC5B2C,OAAO,CAAChC,SAAS,GAAG,IAAI,CAACsB,WAAW,CAAC8F,WAAW,CAAC,CAACpH,SAAS;QAC3DgC,OAAO,CAACoF,WAAW,GAAGA,WAAW;MACrC,CAAC,MACI;QACDpF,OAAO,CAAC1J,KAAK,GAAG,IAAI,CAACgJ,WAAW,CAAC8F,WAAW,CAAC,CAACpH,SAAS;MAC3D;IACJ;EACJ;EACA;EACAkH,iBAAiBA,CAAChF,MAAM,EAAE;IACtB,IAAI,CAACA,MAAM,IAAI,CAACA,MAAM,CAACzO,OAAO,EAAE;MAC5B,OAAO,EAAE;IACb;IACA,OAAOyF,KAAK,CAACpL,IAAI,CAACoU,MAAM,CAACzO,OAAO,EAAEiU,QAAQ,IAAI;MAC1C,MAAM1T,MAAM,GAAG,IAAI,CAACsJ,iBAAiB,CAACgF,GAAG,CAACoF,QAAQ,CAAC;MACnD,IAAI,CAAC1T,MAAM,KAAK,OAAO+K,SAAS,KAAK,WAAW,IAAIA,SAAS,CAAC,EAAE;QAC5D,MAAM3D,0BAA0B,CAACsM,QAAQ,CAAC;MAC9C;MACA,OAAOxF,MAAM,CAACnO,mBAAmB,CAACC,MAAM,CAAC;IAC7C,CAAC,CAAC;EACN;EACA;EACA4L,yBAAyBA,CAAA,EAAG;IACxB,MAAM+H,gBAAgB,GAAG,IAAI,CAAC3K,SAAS,CAAC4K,sBAAsB,CAAC,CAAC;IAChE,MAAMC,QAAQ,GAAG,CACb;MAAEC,GAAG,EAAE,OAAO;MAAEC,OAAO,EAAE,CAAC,IAAI,CAAC7G,gBAAgB;IAAE,CAAC,EAClD;MAAE4G,GAAG,EAAE,OAAO;MAAEC,OAAO,EAAE,CAAC,IAAI,CAACzI,UAAU,EAAE,IAAI,CAAC2B,gBAAgB;IAAE,CAAC,EACnE;MAAE6G,GAAG,EAAE,OAAO;MAAEC,OAAO,EAAE,CAAC,IAAI,CAAC5G,gBAAgB;IAAE,CAAC,CACrD;IACD,KAAK,MAAM6G,OAAO,IAAIH,QAAQ,EAAE;MAC5B,MAAMrR,OAAO,GAAG,IAAI,CAACwG,SAAS,CAACiL,aAAa,CAACD,OAAO,CAACF,GAAG,CAAC;MACzDtR,OAAO,CAACkI,YAAY,CAAC,MAAM,EAAE,UAAU,CAAC;MACxC,KAAK,MAAMoI,MAAM,IAAIkB,OAAO,CAACD,OAAO,EAAE;QAClCvR,OAAO,CAAC0R,WAAW,CAACpB,MAAM,CAAC5V,UAAU,CAACE,aAAa,CAAC;MACxD;MACAuW,gBAAgB,CAACO,WAAW,CAAC1R,OAAO,CAAC;IACzC;IACA;IACA,IAAI,CAACqG,WAAW,CAACzL,aAAa,CAAC8W,WAAW,CAACP,gBAAgB,CAAC;EAChE;EACA;AACJ;AACA;AACA;AACA;EACIpI,oBAAoBA,CAAA,EAAG;IACnB,IAAI,CAACM,WAAW,CAAChM,IAAI,CAAC,EAAE,CAAC;IACzB,IAAI,CAACyL,UAAU,CAACjD,aAAa,CAAC2E,KAAK,CAAC,CAAC;IACrC,IAAI,CAACK,UAAU,CAAC,CAAC;EACrB;EACA;AACJ;AACA;AACA;AACA;EACIN,kBAAkBA,CAAA,EAAG;IACjB,MAAMoH,kBAAkB,GAAGA,CAACpC,GAAG,EAAEqC,CAAC,KAAK;MACnC,OAAOrC,GAAG,IAAIqC,CAAC,CAACvZ,gBAAgB,CAAC,CAAC;IACtC,CAAC;IACD;IACA;IACA;IACA,IAAI,IAAI,CAACwR,cAAc,CAAC4F,MAAM,CAACkC,kBAAkB,EAAE,KAAK,CAAC,EAAE;MACvD,IAAI,CAAC7E,2BAA2B,CAAC,CAAC;IACtC;IACA,IAAI,IAAI,CAAChD,cAAc,CAAC2F,MAAM,CAACkC,kBAAkB,EAAE,KAAK,CAAC,EAAE;MACvD,IAAI,CAACrE,2BAA2B,CAAC,CAAC;IACtC;IACA,IAAI5K,KAAK,CAACpL,IAAI,CAAC,IAAI,CAACwP,iBAAiB,CAAC8G,MAAM,CAAC,CAAC,CAAC,CAAC6B,MAAM,CAACkC,kBAAkB,EAAE,KAAK,CAAC,EAAE;MAC/E,IAAI,CAACpK,4BAA4B,GAAG,IAAI;MACxC,IAAI,CAACyB,wBAAwB,CAAC,CAAC;IACnC;EACJ;EACA;AACJ;AACA;AACA;AACA;EACIG,kBAAkBA,CAAA,EAAG;IACjB,MAAMnK,SAAS,GAAG,IAAI,CAACuH,IAAI,GAAG,IAAI,CAACA,IAAI,CAAC1M,KAAK,GAAG,KAAK;IACrD,IAAI,CAACuT,aAAa,GAAG,IAAIvO,YAAY,CAAC,IAAI,CAACC,kBAAkB,EAAE,IAAI,CAAC4I,cAAc,EAAE1I,SAAS,EAAE,IAAI,CAACC,wBAAwB,EAAE,IAAI,CAACwH,SAAS,CAACoL,SAAS,EAAE,IAAI,CAAClK,4BAA4B,EAAE,IAAI,CAACf,0BAA0B,CAAC;IAC3N,CAAC,IAAI,CAACL,IAAI,GAAG,IAAI,CAACA,IAAI,CAACkD,MAAM,GAAGhS,EAAE,CAAC,CAAC,EAC/B2E,IAAI,CAAC1E,SAAS,CAAC,IAAI,CAACmP,UAAU,CAAC,CAAC,CAChCxK,SAAS,CAACxC,KAAK,IAAI;MACpB,IAAI,CAACuT,aAAa,CAACpO,SAAS,GAAGnF,KAAK;MACpC,IAAI,CAACmP,wBAAwB,CAAC,CAAC;IACnC,CAAC,CAAC;EACN;EACA;EACA6F,WAAWA,CAACiD,KAAK,EAAE;IACf,OAAOA,KAAK,CAAC3C,MAAM,CAAC7D,IAAI,IAAI,CAACA,IAAI,CAAClS,MAAM,IAAIkS,IAAI,CAAClS,MAAM,KAAK,IAAI,CAAC;EACrE;EACA;EACA4R,gBAAgBA,CAAA,EAAG;IACf,MAAM4B,SAAS,GAAG,IAAI,CAACC,gBAAgB,IAAI,IAAI,CAACkF,UAAU;IAC1D,IAAInF,SAAS,EAAE;MACX,MAAMoF,UAAU,GAAG,IAAI,CAAClJ,UAAU,CAACjD,aAAa,CAACvJ,MAAM,KAAK,CAAC;MAC7D,IAAI0V,UAAU,KAAK,IAAI,CAACpK,mBAAmB,EAAE;QACzC,MAAMqK,SAAS,GAAG,IAAI,CAACxH,gBAAgB,CAAC5E,aAAa;QACrDmM,UAAU,GAAGC,SAAS,CAACzB,kBAAkB,CAAC5D,SAAS,CAACjO,WAAW,CAAC,GAAGsT,SAAS,CAACzH,KAAK,CAAC,CAAC;QACpF,IAAI,CAAC5C,mBAAmB,GAAGoK,UAAU;MACzC;IACJ;EACJ;AACJ;AACA7L,QAAQ,CAACxN,UAAU,GAAG,CAClB;EAAEC,IAAI,EAAEjC,SAAS;EAAEoB,IAAI,EAAE,CAAC;IACdc,QAAQ,EAAE,6BAA6B;IACvCqZ,QAAQ,EAAE,UAAU;IACpBxZ,QAAQ,EAAEuN,kBAAkB;IAC5BjL,IAAI,EAAE;MACF,OAAO,EAAE,WAAW;MACpB,gCAAgC,EAAE;IACtC,CAAC;IACDsD,aAAa,EAAEzH,iBAAiB,CAAC0H,IAAI;IACrC;IACA;IACA;IACA;IACAH,eAAe,EAAExH,uBAAuB,CAACyH,OAAO;IAChDrE,SAAS,EAAE,CACP;MAAEC,OAAO,EAAE1B,SAAS;MAAE2B,WAAW,EAAEiM;IAAS,CAAC,EAC7C;MAAElM,OAAO,EAAE3E,uBAAuB;MAAEqQ,QAAQ,EAAElQ;IAA6B,CAAC,EAC5E;MAAEwE,OAAO,EAAEqB,0BAA0B;MAAEqK,QAAQ,EAAEpK;IAAyB,CAAC;IAC3E;IACA;MAAEtB,OAAO,EAAEwL,2BAA2B;MAAE0M,QAAQ,EAAE;IAAK,CAAC,CAC3D;IACDC,MAAM,EAAE,CAAC,+CAA+C;EAC5D,CAAC;AAAG,CAAC,CAChB;AACDjM,QAAQ,CAACrN,cAAc,GAAG,MAAM,CAC5B;EAAEF,IAAI,EAAEnC;AAAgB,CAAC,EACzB;EAAEmC,IAAI,EAAE7B;AAAkB,CAAC,EAC3B;EAAE6B,IAAI,EAAEtC;AAAW,CAAC,EACpB;EAAEsC,IAAI,EAAEyZ,MAAM;EAAE1Z,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAE5B,SAAS;IAAEe,IAAI,EAAE,CAAC,MAAM;EAAG,CAAC;AAAE,CAAC,EACpE;EAAEa,IAAI,EAAExD,cAAc;EAAEuD,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAEzC;EAAS,CAAC;AAAE,CAAC,EAC1D;EAAEyC,IAAI,EAAEuB,SAAS;EAAExB,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAE1C,MAAM;IAAE6B,IAAI,EAAE,CAACjC,QAAQ;EAAG,CAAC;AAAE,CAAC,EACtE;EAAE8C,IAAI,EAAEjD;AAAS,CAAC,EAClB;EAAEiD,IAAI,EAAEuB,SAAS;EAAExB,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAE1C,MAAM;IAAE6B,IAAI,EAAE,CAACzC,uBAAuB;EAAG,CAAC;AAAE,CAAC,EACrF;EAAEsD,IAAI,EAAE2C,wBAAwB;EAAE5C,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAE1C,MAAM;IAAE6B,IAAI,EAAE,CAACuD,0BAA0B;EAAG,CAAC;AAAE,CAAC,EACvG;EAAE1C,IAAI,EAAEhD;AAAc,CAAC,EACvB;EAAEgD,IAAI,EAAEuB,SAAS;EAAExB,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAEzC;EAAS,CAAC,EAAE;IAAEyC,IAAI,EAAE3B;EAAS,CAAC,EAAE;IAAE2B,IAAI,EAAE1C,MAAM;IAAE6B,IAAI,EAAE,CAAC0N,2BAA2B;EAAG,CAAC;AAAE,CAAC,CACpI;AACDU,QAAQ,CAAC/L,cAAc,GAAG;EACtBgO,OAAO,EAAE,CAAC;IAAExP,IAAI,EAAExC;EAAM,CAAC,CAAC;EAC1BsS,UAAU,EAAE,CAAC;IAAE9P,IAAI,EAAExC;EAAM,CAAC,CAAC;EAC7ByS,qBAAqB,EAAE,CAAC;IAAEjQ,IAAI,EAAExC;EAAM,CAAC,CAAC;EACxC6S,WAAW,EAAE,CAAC;IAAErQ,IAAI,EAAExC;EAAM,CAAC,CAAC;EAC9B0S,UAAU,EAAE,CAAC;IAAElQ,IAAI,EAAE1B,SAAS;IAAEa,IAAI,EAAE,CAAC6N,aAAa,EAAE;MAAE0M,MAAM,EAAE;IAAK,CAAC;EAAG,CAAC,CAAC;EAC3E5H,gBAAgB,EAAE,CAAC;IAAE9R,IAAI,EAAE1B,SAAS;IAAEa,IAAI,EAAE,CAAC+N,eAAe,EAAE;MAAEwM,MAAM,EAAE;IAAK,CAAC;EAAG,CAAC,CAAC;EACnF3H,gBAAgB,EAAE,CAAC;IAAE/R,IAAI,EAAE1B,SAAS;IAAEa,IAAI,EAAE,CAACgO,eAAe,EAAE;MAAEuM,MAAM,EAAE;IAAK,CAAC;EAAG,CAAC,CAAC;EACnF7H,gBAAgB,EAAE,CAAC;IAAE7R,IAAI,EAAE1B,SAAS;IAAEa,IAAI,EAAE,CAACiO,eAAe,EAAE;MAAEsM,MAAM,EAAE;IAAK,CAAC;EAAG,CAAC,CAAC;EACnFxD,kBAAkB,EAAE,CAAC;IAAElW,IAAI,EAAEzB,eAAe;IAAEY,IAAI,EAAE,CAACoB,YAAY,EAAE;MAAEoZ,WAAW,EAAE;IAAK,CAAC;EAAG,CAAC,CAAC;EAC7FtD,eAAe,EAAE,CAAC;IAAErW,IAAI,EAAEzB,eAAe;IAAEY,IAAI,EAAE,CAACgG,SAAS,EAAE;MAAEwU,WAAW,EAAE;IAAK,CAAC;EAAG,CAAC,CAAC;EACvFxD,qBAAqB,EAAE,CAAC;IAAEnW,IAAI,EAAEzB,eAAe;IAAEY,IAAI,EAAE,CAAC0F,eAAe,EAAE;MACzD8U,WAAW,EAAE;IACjB,CAAC;EAAG,CAAC,CAAC;EAClBvD,qBAAqB,EAAE,CAAC;IAAEpW,IAAI,EAAEzB,eAAe;IAAEY,IAAI,EAAE,CAAC2F,eAAe,EAAE;MACzD6U,WAAW,EAAE;IACjB,CAAC;EAAG,CAAC,CAAC;EAClBR,UAAU,EAAE,CAAC;IAAEnZ,IAAI,EAAEvC,YAAY;IAAE0B,IAAI,EAAE,CAAC2G,YAAY;EAAG,CAAC;AAC9D,CAAC;AACD;AACA,SAASkQ,gBAAgBA,CAAC4D,KAAK,EAAEtE,GAAG,EAAE;EAClC,OAAOsE,KAAK,CAACC,MAAM,CAAC/P,KAAK,CAACpL,IAAI,CAAC4W,GAAG,CAAC,CAAC;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMwE,aAAa,CAAC;EAChB5a,WAAWA;EACX;EACA;EACA;EACAsB,MAAM,EAAEuZ,QAAQ,EAAE;IACd,IAAI,CAACvZ,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACuZ,QAAQ,GAAGA,QAAQ;IACxB;IACA,IAAI,CAACC,OAAO,GAAG,OAAO;IACtB,IAAI,CAACD,QAAQ,GAAGA,QAAQ,IAAI,CAAC,CAAC;EAClC;EACA;EACA,IAAIrZ,IAAIA,CAAA,EAAG;IACP,OAAO,IAAI,CAACC,KAAK;EACrB;EACA,IAAID,IAAIA,CAACA,IAAI,EAAE;IACX,IAAI,CAACC,KAAK,GAAGD,IAAI;IACjB;IACA;IACA,IAAI,CAACuZ,kBAAkB,CAAC,CAAC;EAC7B;EACA3J,QAAQA,CAAA,EAAG;IACP,IAAI,CAAC2J,kBAAkB,CAAC,CAAC;IACzB,IAAI,IAAI,CAACC,UAAU,KAAK3Y,SAAS,EAAE;MAC/B,IAAI,CAAC2Y,UAAU,GAAG,IAAI,CAACC,wBAAwB,CAAC,CAAC;IACrD;IACA,IAAI,CAAC,IAAI,CAACC,YAAY,EAAE;MACpB,IAAI,CAACA,YAAY,GACb,IAAI,CAACL,QAAQ,CAACM,mBAAmB,KAAK,CAAC/N,IAAI,EAAE5L,IAAI,KAAK4L,IAAI,CAAC5L,IAAI,CAAC,CAAC;IACzE;IACA,IAAI,IAAI,CAACF,MAAM,EAAE;MACb;MACA;MACA;MACA,IAAI,CAACqB,SAAS,CAACJ,IAAI,GAAG,IAAI,CAACA,IAAI;MAC/B,IAAI,CAACI,SAAS,CAACH,UAAU,GAAG,IAAI,CAACA,UAAU;MAC3C,IAAI,CAAClB,MAAM,CAAC4S,YAAY,CAAC,IAAI,CAACvR,SAAS,CAAC;IAC5C,CAAC,MACI,IAAI,OAAO8N,SAAS,KAAK,WAAW,IAAIA,SAAS,EAAE;MACpD,MAAMhD,yCAAyC,CAAC,CAAC;IACrD;EACJ;EACAvJ,WAAWA,CAAA,EAAG;IACV,IAAI,IAAI,CAAC5C,MAAM,EAAE;MACb,IAAI,CAACA,MAAM,CAAC6S,eAAe,CAAC,IAAI,CAACxR,SAAS,CAAC;IAC/C;EACJ;EACA;AACJ;AACA;AACA;EACIsY,wBAAwBA,CAAA,EAAG;IACvB,MAAMzZ,IAAI,GAAG,IAAI,CAACA,IAAI;IACtB,IAAI,CAACA,IAAI,KAAK,OAAOiP,SAAS,KAAK,WAAW,IAAIA,SAAS,CAAC,EAAE;MAC1D,MAAM/C,kCAAkC,CAAC,CAAC;IAC9C;IACA,IAAI,IAAI,CAACmN,QAAQ,IAAI,IAAI,CAACA,QAAQ,CAACO,0BAA0B,EAAE;MAC3D,OAAO,IAAI,CAACP,QAAQ,CAACO,0BAA0B,CAAC5Z,IAAI,CAAC;IACzD;IACA,OAAOA,IAAI,CAAC,CAAC,CAAC,CAAC6Z,WAAW,CAAC,CAAC,GAAG7Z,IAAI,CAACqI,KAAK,CAAC,CAAC,CAAC;EAChD;EACA;EACAkR,kBAAkBA,CAAA,EAAG;IACjB,IAAI,IAAI,CAACpY,SAAS,EAAE;MAChB,IAAI,CAACA,SAAS,CAACnB,IAAI,GAAG,IAAI,CAACA,IAAI;IACnC;EACJ;AACJ;AACAoZ,aAAa,CAAC/Z,UAAU,GAAG,CACvB;EAAEC,IAAI,EAAEjC,SAAS;EAAEoB,IAAI,EAAE,CAAC;IACdc,QAAQ,EAAE,iBAAiB;IAC3BH,QAAQ,EAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;IACa4F,aAAa,EAAEzH,iBAAiB,CAAC0H,IAAI;IACrC;IACA;IACA;IACA;IACA;IACA;IACAH,eAAe,EAAExH,uBAAuB,CAACyH;EAC7C,CAAC;AAAG,CAAC,CAChB;AACDqU,aAAa,CAAC5Z,cAAc,GAAG,MAAM,CACjC;EAAEF,IAAI,EAAEuN,QAAQ;EAAExN,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAEzC;EAAS,CAAC;AAAE,CAAC,EACpD;EAAEyC,IAAI,EAAEuB,SAAS;EAAExB,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAEzC;EAAS,CAAC,EAAE;IAAEyC,IAAI,EAAE1C,MAAM;IAAE6B,IAAI,EAAE,CAACS,mBAAmB;EAAG,CAAC;AAAE,CAAC,CACxG;AACDka,aAAa,CAACtY,cAAc,GAAG;EAC3Bd,IAAI,EAAE,CAAC;IAAEV,IAAI,EAAExC;EAAM,CAAC,CAAC;EACvB0c,UAAU,EAAE,CAAC;IAAEla,IAAI,EAAExC;EAAM,CAAC,CAAC;EAC7B4c,YAAY,EAAE,CAAC;IAAEpa,IAAI,EAAExC;EAAM,CAAC,CAAC;EAC/Bwc,OAAO,EAAE,CAAC;IAAEha,IAAI,EAAExC;EAAM,CAAC,CAAC;EAC1BqE,SAAS,EAAE,CAAC;IAAE7B,IAAI,EAAE1B,SAAS;IAAEa,IAAI,EAAE,CAACoB,YAAY,EAAE;MAAEmZ,MAAM,EAAE;IAAK,CAAC;EAAG,CAAC,CAAC;EACzEjY,IAAI,EAAE,CAAC;IAAEzB,IAAI,EAAE1B,SAAS;IAAEa,IAAI,EAAE,CAACU,UAAU,EAAE;MAAE6Z,MAAM,EAAE;IAAK,CAAC;EAAG,CAAC,CAAC;EAClEhY,UAAU,EAAE,CAAC;IAAE1B,IAAI,EAAE1B,SAAS;IAAEa,IAAI,EAAE,CAACgB,gBAAgB,EAAE;MAAEuZ,MAAM,EAAE;IAAK,CAAC;EAAG,CAAC;AACjF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMc,qBAAqB,GAAG,CAC1BjN,QAAQ,EACRpI,SAAS,EACTtF,UAAU,EACVuF,aAAa,EACbjF,gBAAgB,EAChBC,gBAAgB,EAChBG,YAAY,EACZ+B,OAAO,EACPuD,MAAM,EACN1D,aAAa,EACbE,aAAa,EACbkD,YAAY,EACZV,eAAe,EACfe,YAAY,EACZd,eAAe,EACfkI,aAAa,EACbE,eAAe,EACfC,eAAe,EACf2M,aAAa,EACbhU,YAAY,EACZgH,cAAc,EACdM,eAAe,CAClB;AACD,MAAMqN,cAAc,CAAC;AAErBA,cAAc,CAAC1a,UAAU,GAAG,CACxB;EAAEC,IAAI,EAAExB,QAAQ;EAAEW,IAAI,EAAE,CAAC;IACbub,OAAO,EAAEF,qBAAqB;IAC9BG,YAAY,EAAEH,qBAAqB;IACnCI,OAAO,EAAE,CAAC3d,eAAe;EAC7B,CAAC;AAAG,CAAC,CAChB;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SAAS2E,WAAW,EAAEoC,UAAU,EAAED,gBAAgB,EAAEpE,SAAS,EAAE0N,kBAAkB,EAAE/K,OAAO,EAAEzC,UAAU,EAAEuF,aAAa,EAAE7E,YAAY,EAAE8B,aAAa,EAAEjC,gBAAgB,EAAEwF,YAAY,EAAEd,eAAe,EAAE3C,aAAa,EAAEhC,gBAAgB,EAAEoF,YAAY,EAAEV,eAAe,EAAEiB,YAAY,EAAEgH,cAAc,EAAEjH,MAAM,EAAEV,SAAS,EAAEoI,QAAQ,EAAEkN,cAAc,EAAEX,aAAa,EAAE9M,aAAa,EAAEG,eAAe,EAAED,eAAe,EAAEE,eAAe,EAAEpH,iBAAiB,EAAE6G,2BAA2B,EAAE5G,YAAY,EAAErG,mBAAmB,EAAE8C,0BAA0B,EAAEC,wBAAwB,EAAEJ,SAAS,EAAEvD,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}