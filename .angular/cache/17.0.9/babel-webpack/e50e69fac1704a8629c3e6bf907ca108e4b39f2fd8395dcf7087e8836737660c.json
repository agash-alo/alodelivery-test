{"ast":null,"code":"/**\r\n * Functionality related to inertia\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { BaseObject } from \"../Base\";\nimport { getInteraction } from \"./Interaction\";\nimport { AnimationDisposer } from \"../utils/Animation\";\nimport * as $type from \"../utils/Type\";\n/**\r\n * A point of inertia is to simulate gradually drecreasing motion even after\r\n * actual interaction by user, that caused it, has already ended.\r\n *\r\n * [[Inertia]] object will continue triggering the same [[Sprite]] handlers\r\n * as if the interaction was still happening, gradually reducing\r\n * shift/angle/scale values until full stop.\r\n *\r\n * Basically, from the target element's point of view, while inertia is\r\n * playing, it is still being interacted with by user, albeit with a\r\n * decreasing speed.\r\n */\nvar Inertia = /** @class */function (_super) {\n  __extends(Inertia, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Inertia(interaction, type, point, startPoint) {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * List of animations currently playing.\r\n     */\n    _this.animations = [];\n    _this.className = \"Inertia\";\n    _this.interaction = interaction;\n    _this.type = type;\n    _this.point = point;\n    _this.startPoint = startPoint;\n    // Make animations disposable\n    _this._disposers.push(new AnimationDisposer(_this.animations));\n    return _this;\n  }\n  Object.defineProperty(Inertia.prototype, \"x\", {\n    /**\r\n     * Returns current X coordinate.\r\n     *\r\n     * @return X\r\n     */\n    get: function () {\n      return this.point.x;\n    },\n    /**\r\n     * Sets current X coordinate.\r\n     *\r\n     * Will trigger \"drag\" event for the target element.\r\n     *\r\n     * @param value X\r\n     */\n    set: function (value) {\n      if ($type.isNumber(value)) {\n        this.point.x = value;\n        this.handleMove();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Inertia.prototype, \"y\", {\n    /**\r\n     * Returns current Y coordinate.\r\n     *\r\n     * @return Y\r\n     */\n    get: function () {\n      return this.point.y;\n    },\n    /**\r\n     * Sets current Y coordinate.\r\n     *\r\n     * Will trigger \"drag\" event for the target element.\r\n     *\r\n     * @param value Y\r\n     */\n    set: function (value) {\n      if ($type.isNumber(value)) {\n        this.point.y = value;\n        this.handleMove();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Simulates dragging of element.\r\n   */\n  Inertia.prototype.handleMove = function () {\n    // Prepare {InteractionEvent} object\n    if (this.interaction.events.isEnabled(\"drag\")) {\n      var imev = {\n        type: \"drag\",\n        target: this.interaction,\n        shift: {\n          x: this.x - this.startPoint.x,\n          y: this.y - this.startPoint.y\n        },\n        startPoint: this.startPoint,\n        point: {\n          x: this.x,\n          y: this.y\n        },\n        touch: false\n      };\n      // Call handler\n      this.interaction.events.dispatchImmediately(\"drag\", imev);\n    }\n  };\n  /**\r\n   * Finishes up the inertia animation. (removes reference to this animation\r\n   * object)\r\n   */\n  Inertia.prototype.done = function () {\n    // Remove inertia animation from the object\n    this.interaction.inertias.removeKey(this.type);\n    // Move ended\n    if (this.type === \"move\") {\n      getInteraction().processDragStop(this.interaction);\n    }\n    // Destroy\n    this.dispose();\n  };\n  return Inertia;\n}(BaseObject);\nexport { Inertia };","map":{"version":3,"names":["__extends","BaseObject","getInteraction","AnimationDisposer","$type","Inertia","_super","interaction","type","point","startPoint","_this","call","animations","className","_disposers","push","Object","defineProperty","prototype","get","x","set","value","isNumber","handleMove","enumerable","configurable","y","events","isEnabled","imev","target","shift","touch","dispatchImmediately","done","inertias","removeKey","processDragStop","dispose"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/interaction/Inertia.js"],"sourcesContent":["/**\r\n * Functionality related to inertia\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../Base\";\r\nimport { getInteraction } from \"./Interaction\";\r\nimport { AnimationDisposer } from \"../utils/Animation\";\r\nimport * as $type from \"../utils/Type\";\r\n/**\r\n * A point of inertia is to simulate gradually drecreasing motion even after\r\n * actual interaction by user, that caused it, has already ended.\r\n *\r\n * [[Inertia]] object will continue triggering the same [[Sprite]] handlers\r\n * as if the interaction was still happening, gradually reducing\r\n * shift/angle/scale values until full stop.\r\n *\r\n * Basically, from the target element's point of view, while inertia is\r\n * playing, it is still being interacted with by user, albeit with a\r\n * decreasing speed.\r\n */\r\nvar Inertia = /** @class */ (function (_super) {\r\n    __extends(Inertia, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Inertia(interaction, type, point, startPoint) {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * List of animations currently playing.\r\n         */\r\n        _this.animations = [];\r\n        _this.className = \"Inertia\";\r\n        _this.interaction = interaction;\r\n        _this.type = type;\r\n        _this.point = point;\r\n        _this.startPoint = startPoint;\r\n        // Make animations disposable\r\n        _this._disposers.push(new AnimationDisposer(_this.animations));\r\n        return _this;\r\n    }\r\n    Object.defineProperty(Inertia.prototype, \"x\", {\r\n        /**\r\n         * Returns current X coordinate.\r\n         *\r\n         * @return X\r\n         */\r\n        get: function () {\r\n            return this.point.x;\r\n        },\r\n        /**\r\n         * Sets current X coordinate.\r\n         *\r\n         * Will trigger \"drag\" event for the target element.\r\n         *\r\n         * @param value X\r\n         */\r\n        set: function (value) {\r\n            if ($type.isNumber(value)) {\r\n                this.point.x = value;\r\n                this.handleMove();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Inertia.prototype, \"y\", {\r\n        /**\r\n         * Returns current Y coordinate.\r\n         *\r\n         * @return Y\r\n         */\r\n        get: function () {\r\n            return this.point.y;\r\n        },\r\n        /**\r\n         * Sets current Y coordinate.\r\n         *\r\n         * Will trigger \"drag\" event for the target element.\r\n         *\r\n         * @param value Y\r\n         */\r\n        set: function (value) {\r\n            if ($type.isNumber(value)) {\r\n                this.point.y = value;\r\n                this.handleMove();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Simulates dragging of element.\r\n     */\r\n    Inertia.prototype.handleMove = function () {\r\n        // Prepare {InteractionEvent} object\r\n        if (this.interaction.events.isEnabled(\"drag\")) {\r\n            var imev = {\r\n                type: \"drag\",\r\n                target: this.interaction,\r\n                shift: {\r\n                    x: this.x - this.startPoint.x,\r\n                    y: this.y - this.startPoint.y\r\n                },\r\n                startPoint: this.startPoint,\r\n                point: {\r\n                    x: this.x,\r\n                    y: this.y\r\n                },\r\n                touch: false\r\n            };\r\n            // Call handler\r\n            this.interaction.events.dispatchImmediately(\"drag\", imev);\r\n        }\r\n    };\r\n    /**\r\n     * Finishes up the inertia animation. (removes reference to this animation\r\n     * object)\r\n     */\r\n    Inertia.prototype.done = function () {\r\n        // Remove inertia animation from the object\r\n        this.interaction.inertias.removeKey(this.type);\r\n        // Move ended\r\n        if (this.type === \"move\") {\r\n            getInteraction().processDragStop(this.interaction);\r\n        }\r\n        // Destroy\r\n        this.dispose();\r\n    };\r\n    return Inertia;\r\n}(BaseObject));\r\nexport { Inertia };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}