{"ast":null,"code":"import { Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { of } from 'rxjs';\nimport { map, tap, catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.loggedIn = new BehaviorSubject(false);\n  }\n  //login api\n  /** get authenticat state */\n  isAuthenticated() {\n    const token = sessionStorage.getItem('tokenA');\n    if (token != null) {\n      return true;\n    } else {\n      return false;\n    }\n    // Check whether the token is expired and return\n    // true or false\n  }\n  /** Login  */\n  postLogin(url, pbody) {\n    url = environment?.baseUrl + url;\n    return this.http.post(url, pbody).pipe(map(res => res));\n  }\n  getGuestAuthApiData(url) {\n    this.authorization = sessionStorage.getItem('tokenA') ? sessionStorage.getItem('tokenA') : '';\n    this.userId = localStorage.getItem('useridA') ? JSON.parse(localStorage.getItem('useridA') || '') : '';\n    // console.log(this.authorization);\n    url = environment?.baseUrl + url;\n    const options = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: this.authorization,\n        userId: this.userId\n      }\n    };\n    return this.http.get(url, options).pipe(tap(_ => console.log('test')), catchError(this.handleError('err', [])));\n  }\n  handleError(operation = 'operation', result) {\n    return err => {\n      // console.log('SERVER ERR', err); // log to console instead ad\n      // console.log(`${operation} failed: ${err.message}`);\n      if (err.status == 500) {\n        // this.snackBar.open(err.error.message, 'close');\n        return err.error.message;\n      }\n      if (err.error.statusCode == 401) {\n        this.router.navigate(['/login']);\n      } else {\n        return err;\n      }\n      return of(result);\n    };\n  }\n  guestAuthGetapi(url) {\n    return new Promise((resolve, reject) => {\n      this.getGuestAuthApiData(url).subscribe(res => {\n        resolve(res);\n      }, err => {\n        reject(err);\n      });\n    });\n  }\n  guestpost(url, pbody) {\n    url = environment?.baseUrl + url;\n    return this.http.post(url, pbody).pipe(map(res => res));\n  }\n  postGuestAuthApiData(url, body) {\n    this.authorization = sessionStorage.getItem('tokenA') ? sessionStorage.getItem('tokenA') : '';\n    this.userId = localStorage.getItem('useridA') ? JSON.parse(localStorage.getItem('useridA') || '') : '';\n    console.log(this.authorization);\n    url = environment?.baseUrl + url;\n    const options = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: this.authorization,\n        userId: this.userId\n      }\n    };\n    return this.http.post(url, body, options).pipe(tap(_ => console.log('test')), catchError(this.handleError('err', [])));\n  }\n  putGuestAuthApiData(url, body) {\n    this.authorization = sessionStorage.getItem('tokenA') ? sessionStorage.getItem('tokenA') : '';\n    this.userId = localStorage.getItem('useridA') ? JSON.parse(localStorage.getItem('useridA') || '') : '';\n    console.log(this.authorization);\n    url = environment?.baseUrl + url;\n    const options = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: this.authorization,\n        userId: this.userId\n      }\n    };\n    return this.http.put(url, body, options).pipe(tap(_ => console.log('test')), catchError(this.handleError('err', [])));\n  }\n  deleteGuestAuthApiData(url) {\n    this.authorization = sessionStorage.getItem('tokenA') ? sessionStorage.getItem('tokenA') : '';\n    this.userId = localStorage.getItem('useridA') ? JSON.parse(localStorage.getItem('useridA') || '') : '';\n    console.log(this.authorization);\n    url = environment?.baseUrl + url;\n    const options = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: this.authorization,\n        userId: this.userId\n      }\n    };\n    return this.http.delete(url, options).pipe(tap(_ => console.log('test')), catchError(this.handleError('err', [])));\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Router","BehaviorSubject","of","map","tap","catchError","environment","HttpClient","AuthService","constructor","router","http","loggedIn","isAuthenticated","token","sessionStorage","getItem","postLogin","url","pbody","baseUrl","post","pipe","res","getGuestAuthApiData","authorization","userId","localStorage","JSON","parse","options","headers","Authorization","get","_","console","log","handleError","operation","result","err","status","error","message","statusCode","navigate","guestAuthGetapi","Promise","resolve","reject","subscribe","guestpost","postGuestAuthApiData","body","putGuestAuthApiData","put","deleteGuestAuthApiData","delete","i0","ɵɵinject","i1","i2","_2","factory","ɵfac","providedIn"],"sources":["D:\\alodelivery test\\src\\app\\service\\auth.service.ts"],"sourcesContent":["// import { Injectable } from '@angular/core';\r\n\r\n// @Injectable({\r\n//   providedIn: 'root'\r\n// })\r\n// export class AuthService {\r\n\r\n//   constructor() { }\r\n\r\n// }\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { of } from 'rxjs';\r\nimport { from as fromPromise } from 'rxjs';\r\nimport { map, tap, catchError } from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  authorization: any;\r\n  userId: any;\r\n\r\n  public loggedIn: BehaviorSubject<boolean>;\r\n  jwtHelper: any;\r\n\r\n  constructor(private router: Router, private http: HttpClient) {\r\n    this.loggedIn = new BehaviorSubject<boolean>(false);\r\n  }\r\n\r\n  //login api\r\n\r\n  /** get authenticat state */\r\n  public isAuthenticated(): boolean {\r\n    const token = sessionStorage.getItem('tokenA');\r\n      if(token != null){\r\n        return true;\r\n      }else{\r\n        return false;\r\n      }\r\n    // Check whether the token is expired and return\r\n    // true or false\r\n    \r\n  }\r\n\r\n  /** Login  */\r\n  postLogin(url: string, pbody: any): Observable<any> {\r\n    url = environment?.baseUrl + url;\r\n    return this.http.post(url, pbody).pipe(map((res) => res));\r\n  }\r\n  getGuestAuthApiData(url: string): Observable<any> {\r\n    this.authorization = sessionStorage.getItem('tokenA')\r\n      ? sessionStorage.getItem('tokenA')\r\n      : '';\r\n    this.userId = localStorage.getItem('useridA')\r\n      ? JSON.parse(localStorage.getItem('useridA') || '')\r\n      : '';\r\n    // console.log(this.authorization);\r\n    url = environment?.baseUrl + url;\r\n    const options = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: this.authorization,\r\n        userId: this.userId,\r\n      },\r\n    };\r\n\r\n    return this.http.get<any>(url, options).pipe(\r\n      tap((_) => console.log('test')),\r\n      catchError(this.handleError('err', []))\r\n    );\r\n  }\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (err: any): Observable<T> => {\r\n      // console.log('SERVER ERR', err); // log to console instead ad\r\n      // console.log(`${operation} failed: ${err.message}`);\r\n      if (err.status == 500) {\r\n        // this.snackBar.open(err.error.message, 'close');\r\n        return err.error.message;\r\n      }\r\n      if (err.error.statusCode == 401) {\r\n        this.router.navigate(['/login']);\r\n      } else {\r\n        return err;\r\n      }\r\n      return of(result as T);\r\n    };\r\n  }\r\n  guestAuthGetapi(url: any): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      this.getGuestAuthApiData(url).subscribe(\r\n        (res) => {\r\n          resolve(res);\r\n        },\r\n        (err) => {\r\n          reject(err);\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  guestpost(url: string, pbody: any): Observable<any> {\r\n    url = environment?.baseUrl + url;\r\n    return this.http.post(url, pbody).pipe(map((res) => res));\r\n  }\r\n\r\n  postGuestAuthApiData(url: string, body: any): Observable<any> {\r\n    this.authorization = sessionStorage.getItem('tokenA')\r\n      ? sessionStorage.getItem('tokenA')\r\n      : '';\r\n    this.userId = localStorage.getItem('useridA')\r\n      ? JSON.parse(localStorage.getItem('useridA') || '')\r\n      : '';\r\n    console.log(this.authorization);\r\n    url = environment?.baseUrl + url;\r\n    const options = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: this.authorization,\r\n        userId: this.userId,\r\n      },\r\n    };\r\n    return this.http.post<any>(url, body, options).pipe(\r\n      tap((_) => console.log('test')),\r\n      catchError(this.handleError('err', []))\r\n    );\r\n  }\r\n\r\n  putGuestAuthApiData(url: string, body: any): Observable<any> {\r\n    this.authorization = sessionStorage.getItem('tokenA')\r\n      ? sessionStorage.getItem('tokenA')\r\n      : '';\r\n    this.userId = localStorage.getItem('useridA')\r\n      ? JSON.parse(localStorage.getItem('useridA') || '')\r\n      : '';\r\n    console.log(this.authorization);\r\n    url = environment?.baseUrl + url;\r\n    const options = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: this.authorization,\r\n        userId: this.userId,\r\n      },\r\n    };\r\n    return this.http.put<any>(url, body, options).pipe(\r\n      tap((_) => console.log('test')),\r\n      catchError(this.handleError('err', []))\r\n    );\r\n  }\r\n\r\n  deleteGuestAuthApiData(url: string): Observable<any> {\r\n    this.authorization = sessionStorage.getItem('tokenA')\r\n      ? sessionStorage.getItem('tokenA')\r\n      : '';\r\n    this.userId = localStorage.getItem('useridA')\r\n      ? JSON.parse(localStorage.getItem('useridA') || '')\r\n      : '';\r\n    console.log(this.authorization);\r\n    url = environment?.baseUrl + url;\r\n    const options = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: this.authorization,\r\n        userId: this.userId,\r\n      },\r\n    };\r\n\r\n    return this.http.delete<any>(url, options).pipe(\r\n      tap((_) => console.log('test')),\r\n      catchError(this.handleError('err', []))\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}