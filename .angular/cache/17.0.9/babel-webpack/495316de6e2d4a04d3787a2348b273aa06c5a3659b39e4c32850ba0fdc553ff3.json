{"ast":null,"code":"/**\r\n * Provides functionality used to build scrollbars.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Container } from \"../Container\";\nimport { ResizeButton } from \"../elements/ResizeButton\";\nimport { Button } from \"../elements/Button\";\nimport { getInteraction } from \"../interaction/Interaction\";\nimport { MouseCursorStyle } from \"../interaction/Mouse\";\nimport { RoundedRectangle } from \"../elements/RoundedRectangle\";\nimport { registry } from \"../Registry\";\nimport { keyboard } from \"../utils/Keyboard\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport { percent, Percent } from \"../utils/Percent\";\nimport * as $math from \"../utils/Math\";\nimport * as $ease from \"../utils/Ease\";\nimport * as $type from \"../utils/Type\";\nimport * as $utils from \"../utils/Utils\";\n;\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Scrollbar is a generic control allowing to select a range of values or pan\r\n * the selection.\r\n *\r\n * @see {@link IScrollbarEvents} for a list of available events\r\n * @see {@link IScrollbarAdapters} for a list of available Adapters\r\n */\nvar Scrollbar = /** @class */function (_super) {\n  __extends(Scrollbar, _super);\n  /**\r\n   * Construtor\r\n   */\n  function Scrollbar() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Previously selected lower (start) value.\r\n     */\n    _this._previousStart = 0;\n    /**\r\n     * Previously selected upper (end) value.\r\n     */\n    _this._previousEnd = 1;\n    /**\r\n     * A value of previously selected lower value, used for doubleclick function.\r\n     */\n    _this._prevStart = 0;\n    /**\r\n     * A value of previously selected upper value, used for doubleclick function.\r\n     */\n    _this._prevEnd = 1;\n    /**\r\n     * Indicates if the Scrollbar is currently \"busy\" (animating and or\r\n     * performing zoom by user interaction).\r\n     */\n    _this._isBusy = false;\n    /**\r\n     * [_skipRangeEvents description]\r\n     *\r\n     * @todo Description\r\n     */\n    _this._skipRangeEvents = false;\n    /**\r\n     * Update the selection when dragging the grips.\r\n     *\r\n     * If set to `false` selection will be updated only when the grip is\r\n     * released.\r\n     *\r\n     * @default true\r\n     */\n    _this.updateWhileMoving = true;\n    _this.className = \"Scrollbar\";\n    _this.minHeight = 12;\n    _this.minWidth = 12;\n    _this.animationDuration = 0;\n    _this.animationEasing = $ease.cubicOut;\n    _this.margin(10, 10, 10, 10);\n    var interfaceColors = new InterfaceColorSet();\n    // background is also container as it might contain graphs, grid, etc\n    var background = _this.background;\n    background.cornerRadius(10, 10, 10, 10);\n    background.fill = interfaceColors.getFor(\"fill\");\n    background.fillOpacity = 0.5;\n    // Make system tooltips appear by default\n    _this.showSystemTooltip = true;\n    _this.startGrip = new ResizeButton();\n    _this.endGrip = new ResizeButton();\n    // Default orientation...\n    // ... is set in `applyInternalDefaults()` because it accesses `language`\n    // and should only be started to access when parent is set\n    // Set events\n    _this.events.on(\"transformed\", function () {\n      _this.updateThumb();\n    }, _this, false);\n    // Initial positions\n    _this.start = 0;\n    _this.end = 1;\n    // Set roles\n    _this.role = \"scrollbar\";\n    _this.thumb.role = \"slider\";\n    _this.thumb.readerLive = \"polite\";\n    _this.startGrip.role = \"slider\";\n    _this.endGrip.role = \"slider\";\n    // otherwise range changed won't be registered\n    _this.events.once(\"inited\", function () {\n      _this._previousStart = undefined;\n      _this.dispatchRangeChange();\n    }, undefined, false);\n    _this.hideGrips = false;\n    _this.orientation = \"horizontal\";\n    // Min/max values for accessibility\n    _this.setSVGAttribute({\n      \"aria-valuemin\": \"0\"\n    });\n    _this.setSVGAttribute({\n      \"aria-valuemax\": \"100\"\n    });\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n  Scrollbar.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n    // Set screen reader tetxt accordingly\n    if (this.orientation === \"horizontal\") {\n      if (!$type.hasValue(this.readerTitle)) {\n        this.readerTitle = this.language.translate(\"Use TAB to select grip buttons or left and right arrows to change selection\");\n      }\n      if (!$type.hasValue(this.thumb.readerDescription)) {\n        this.thumb.readerDescription = this.language.translate(\"Use left and right arrows to move selection\");\n      }\n      if (!$type.hasValue(this.startGrip.readerDescription)) {\n        this.startGrip.readerDescription = this.language.translate(\"Use left and right arrows to move left selection\");\n      }\n      if (!$type.hasValue(this.endGrip.readerDescription)) {\n        this.endGrip.readerDescription = this.language.translate(\"Use left and right arrows to move right selection\");\n      }\n      this.readerOrientation = \"horizontal\";\n    } else {\n      if (!$type.hasValue(this.readerTitle)) {\n        this.readerTitle = this.language.translate(\"Use TAB select grip buttons or up and down arrows to change selection\");\n      }\n      if (!$type.hasValue(this.thumb.readerDescription)) {\n        this.thumb.readerDescription = this.language.translate(\"Use up and down arrows to move selection\");\n      }\n      if (!$type.hasValue(this.startGrip.readerDescription)) {\n        this.startGrip.readerDescription = this.language.translate(\"Use up and down arrows to move upper selection\");\n      }\n      if (!$type.hasValue(this.endGrip.readerDescription)) {\n        this.endGrip.readerDescription = this.language.translate(\"Use up and down arrows to move lower selection\");\n      }\n      this.readerOrientation = \"vertical\";\n    }\n    this.readerControls = this.baseSprite.uidAttr();\n  };\n  /**\r\n   * Validates the layout of the scrollbar's elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Scrollbar.prototype.validateLayout = function () {\n    this.updateSize();\n    _super.prototype.validateLayout.call(this);\n    // when size changes, need to update extremes\n    this.updateExtremes();\n  };\n  /**\r\n   * Update background for the scrollbar.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Scrollbar.prototype.processBackground = function () {\n    _super.prototype.processBackground.call(this);\n    var background = this.background;\n    background.clickable = true;\n    background.events.on(\"hit\", this.handleBgHit, this, undefined);\n  };\n  /**\r\n   * Zooms to the particular place when clicked/tapped on the scrollbar\r\n   * background.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n  Scrollbar.prototype.handleBgHit = function (event) {\n    this.makeBusy();\n    var point = event.spritePoint;\n    point = $utils.spritePointToSprite(point, this.background, this);\n    var thumb = this.thumb;\n    if (this.orientation == \"horizontal\") {\n      var thumbX = point.x - thumb.pixelWidth / 2;\n      thumbX = $math.fitToRange(thumbX, 0, this.innerWidth - thumb.pixelWidth);\n      this._thumbAnimation = thumb.animate({\n        property: \"x\",\n        to: thumbX\n      }, this.animationDuration, this.animationEasing);\n    } else {\n      var thumbY = point.y - thumb.pixelHeight / 2;\n      thumbY = $math.fitToRange(thumbY, 0, this.innerHeight - thumb.pixelHeight);\n      this._thumbAnimation = thumb.animate({\n        property: \"y\",\n        to: thumbY\n      }, this.animationDuration, this.animationEasing);\n    }\n    if (this.animationDuration > 0) {\n      this._thumbAnimation.events.on(\"animationended\", this.makeUnbusy, this, false);\n    } else {\n      this._thumb.validate();\n      this.makeUnbusy();\n    }\n  };\n  /**\r\n   * Set scrollbar as busy. (currently zooming)\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Scrollbar.prototype.makeBusy = function () {\n    this._isBusy = true;\n    this._skipRangeEvents = false;\n    if (this._unbusyTimeout) {\n      this.removeDispose(this._unbusyTimeout);\n    }\n    this._unbusyTimeout = undefined;\n    this.stopAnimations();\n  };\n  /**\r\n   * Stops all animations, currently playing for the scrollbar.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Scrollbar.prototype.stopAnimations = function () {\n    if (this._thumbAnimation) {\n      this._thumbAnimation.stop(true);\n    }\n    if (this._zoomAnimation) {\n      this._zoomAnimation.stop(true);\n    }\n  };\n  /**\r\n   * Cancels \"busy\" status of the Scrollbar.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Scrollbar.prototype.makeUnbusy = function () {\n    /**\r\n     * We cannot make Scrollbar not busy right after release, because then axes\r\n     * will take over controll and Scrollbar will start to animate.\r\n     * Theorethically, it's not right to set timeout by `animationDuration`,\r\n     * however we can not know all the durations of elements we scroll, so we\r\n     * assume that animation duration will be the same as\r\n     * `interpolationDuration` or `rangeChange` duration.\r\n     */\n    this._unbusyTimeout = this.setTimeout(this.makeUnbusyReal.bind(this), this.animationDuration * 1.1);\n  };\n  /**\r\n   * [makeUnbusyReal description]\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   */\n  Scrollbar.prototype.makeUnbusyReal = function () {\n    this._usingGrip = undefined;\n    this._isBusy = false;\n    if (!this.updateWhileMoving) {\n      this.dispatchRangeChange();\n    }\n  };\n  /**\r\n   * Disptatches rangechanged event if it really changed\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Scrollbar.prototype.dispatchRangeChange = function () {\n    if (this._previousEnd != this.end || this._previousStart != this.start) {\n      this._previousStart = this.start;\n      this._previousEnd = this.end;\n      this.dispatch(\"rangechanged\");\n    }\n  };\n  /**\r\n   * Updates the \"thumb\" element. A draggable element between the grips.\r\n   * @ignore\r\n   */\n  Scrollbar.prototype.updateThumb = function (dispatchEvents) {\n    if (dispatchEvents === void 0) {\n      dispatchEvents = true;\n    }\n    if (!this.parent) {\n      return;\n    }\n    var thumb = this.thumb;\n    var start = this.start;\n    var end = this.end;\n    var startGrip = this.startGrip;\n    var endGrip = this.endGrip;\n    var directionFlipped = this.adapter.apply(\"positionValueDirection\", {\n      flipped: false\n    }).flipped;\n    var fromName = directionFlipped ? \"To %1\" : \"From %1\";\n    var toName = directionFlipped ? \"From %1\" : \"To %1\";\n    var fromValue;\n    var toValue;\n    if (this.orientation == \"horizontal\") {\n      var innerWidth_1 = this.innerWidth;\n      thumb.width = innerWidth_1 * (end - start);\n      thumb.maxX = innerWidth_1 - thumb.pixelWidth;\n      thumb.x = start * innerWidth_1;\n      startGrip.moveTo({\n        x: thumb.pixelX,\n        y: 0\n      }, undefined, undefined, true); // overrides dragging\n      endGrip.moveTo({\n        x: thumb.pixelX + thumb.pixelWidth,\n        y: 0\n      }, undefined, undefined, true);\n      fromValue = this.adapter.apply(\"positionValue\", {\n        value: Math.round(start * 100) + \"%\",\n        position: start\n      }).value;\n      toValue = this.adapter.apply(\"positionValue\", {\n        value: Math.round(end * 100) + \"%\",\n        position: end\n      }).value;\n      startGrip.readerTitle = this.language.translate(fromName, undefined, fromValue);\n      startGrip.readerValueNow = \"\" + Math.round(start * 100);\n      startGrip.readerValueText = startGrip.readerTitle;\n      endGrip.readerTitle = this.language.translate(toName, undefined, toValue);\n      endGrip.readerValueNow = \"\" + Math.round(end * 100);\n      endGrip.readerValueText = endGrip.readerTitle;\n    } else {\n      var innerHeight_1 = this.innerHeight;\n      thumb.height = innerHeight_1 * (end - start);\n      thumb.maxY = innerHeight_1 - thumb.pixelHeight;\n      thumb.y = (1 - end) * innerHeight_1;\n      startGrip.moveTo({\n        x: 0,\n        y: thumb.pixelY + thumb.pixelHeight\n      }, undefined, undefined, true);\n      endGrip.moveTo({\n        x: 0,\n        y: thumb.pixelY\n      }, undefined, undefined, true);\n      fromValue = this.adapter.apply(\"positionValue\", {\n        value: Math.round((1 - start) * 100) + \"%\",\n        position: 1 - start\n      }).value;\n      toValue = this.adapter.apply(\"positionValue\", {\n        value: Math.round((1 - end) * 100) + \"%\",\n        position: 1 - end\n      }).value;\n      startGrip.readerTitle = this.language.translate(toName, undefined, fromValue);\n      startGrip.readerValueNow = \"\" + Math.round(start * 100);\n      startGrip.readerValueText = startGrip.readerTitle;\n      endGrip.readerTitle = this.language.translate(fromName, undefined, toValue);\n      endGrip.readerValueNow = \"\" + Math.round(end * 100);\n      endGrip.readerValueText = endGrip.readerTitle;\n    }\n    // Add accessibility\n    thumb.readerTitle = this.language.translate(\"From %1 to %2\", undefined, fromValue, toValue);\n    thumb.readerValueNow = \"\" + Math.round(start * 100);\n    thumb.readerValueText = thumb.readerTitle;\n    this.readerValueNow = \"\" + Math.round(start * 100);\n    this.readerValueText = thumb.readerTitle;\n    if (!this._skipRangeEvents && this.updateWhileMoving && dispatchEvents) {\n      this.dispatchRangeChange();\n    }\n  };\n  /**\r\n   * Updates extremes of the scrollbar.\r\n   */\n  Scrollbar.prototype.updateExtremes = function () {\n    var orientation = this.orientation;\n    var minX = 0;\n    var minY = 0;\n    var maxX = 0;\n    var maxY = 0;\n    if (orientation == \"horizontal\") {\n      maxX = this.innerWidth;\n      minY = maxY = this.innerHeight / 2;\n    } else {\n      maxY = this.innerHeight;\n      minX = maxX = this.innerWidth / 2;\n    }\n    var startGrip = this.startGrip;\n    startGrip.minX = minX;\n    startGrip.maxX = maxX;\n    startGrip.minY = minY;\n    startGrip.maxY = maxY;\n    var endGrip = this.endGrip;\n    endGrip.minX = minX;\n    endGrip.maxX = maxX;\n    endGrip.minY = minY;\n    endGrip.maxY = maxY;\n    var thumb = this.thumb;\n    thumb.minX = minX;\n    thumb.maxX = maxX;\n    thumb.minY = minY;\n    thumb.maxY = maxY;\n  };\n  /**\r\n   * Updates size of the scrollbar.\r\n   */\n  Scrollbar.prototype.updateSize = function () {\n    var orientation = this.orientation;\n    var startGrip = this.startGrip;\n    if (startGrip) {\n      startGrip.orientation = orientation;\n    }\n    if (this.endGrip) {\n      this.endGrip.orientation = orientation;\n    }\n    var thumb = this.thumb;\n    if (thumb) {\n      if (orientation == \"horizontal\") {\n        if (!$type.isNumber(this._pixelWidth)) {\n          if (!(this.width instanceof Percent)) {\n            this.width = percent(100);\n          }\n        }\n        // this teorethically might be wrong, if user indeed sets height of a horizontal scrollbar in percent\n        // however without this height might be equal to 100% if previous orientation was set to horizontal\n        // so this is ok solution, in case user really wants to have scrollbar height set in percent,\n        // he should do this after orientation.\n        if ($type.hasValue(this.percentHeight)) {\n          this.height = this.minHeight;\n        }\n        thumb.height = this.innerHeight;\n        thumb.verticalCenter = \"middle\";\n        thumb.horizontalCenter = \"left\";\n      } else {\n        if (!$type.isNumber(this._pixelHeight)) {\n          if (!(this.height instanceof Percent)) {\n            this.height = percent(100);\n          }\n        }\n        // same as above with percentHeight\n        if ($type.hasValue(this.percentWidth)) {\n          this.width = this.minWidth;\n        }\n        thumb.width = this.innerWidth;\n        thumb.verticalCenter = \"top\";\n        thumb.horizontalCenter = \"middle\";\n      }\n    }\n  };\n  Object.defineProperty(Scrollbar.prototype, \"isBusy\", {\n    /**\r\n     * Indicates if the Scrollbar is currently \"busy\" (animating and or\r\n     * performing zoom by user interaction).\r\n     * @return boolean\r\n     */\n    get: function () {\n      return this._isBusy;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"start\", {\n    /**\r\n     * @return Position (0-1)\r\n     */\n    get: function () {\n      return Math.min(this.getPosition(this._start), this.getPosition(this._end));\n    },\n    /**\r\n     * ==========================================================================\r\n     * POSITIONS\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Relative position (0-1) of the start grip.\r\n     *\r\n     * @param position  Position (0-1)\r\n     */\n    set: function (position) {\n      if (!this._isBusy) {\n        this.__start = position;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"__start\", {\n    /**\r\n     * @return [description]\r\n     */\n    get: function () {\n      return this._start;\n    },\n    /**\r\n     * [__start description]\r\n     *\r\n     * @todo Description\r\n     * @param position [description]\r\n     */\n    set: function (position) {\n      this._start = this.getPosition(position);\n      this.updateThumb();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"end\", {\n    /**\r\n     * @return Position (0-1)\r\n     */\n    get: function () {\n      return Math.max(this.getPosition(this._start), this.getPosition(this._end));\n    },\n    /**\r\n     * Relative position (0-1) of the end grip.\r\n     *\r\n     * @param position  Position (0-1)\r\n     */\n    set: function (position) {\n      if (!this._isBusy) {\n        this.__end = position;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"__end\", {\n    /**\r\n     * @return [description]\r\n     */\n    get: function () {\n      return this._end;\n    },\n    /**\r\n     * [__end description]\r\n     *\r\n     * @todo Description\r\n     * @param position [description]\r\n     */\n    set: function (position) {\n      this._end = this.getPosition(position);\n      this.updateThumb();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"range\", {\n    /**\r\n     * Current selection range.\r\n     *\r\n     * @readonly\r\n     * @return Range\r\n     */\n    get: function () {\n      return {\n        start: this.start,\n        end: this.end,\n        priority: this._usingGrip\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Disables range change events.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Scrollbar.prototype.skipRangeEvents = function () {\n    if (!this._isBusy) {\n      this._skipRangeEvents = true;\n    }\n  };\n  /**\r\n   * [fixRange description]\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   * @param range  Range\r\n   */\n  Scrollbar.prototype.fixRange = function (range) {\n    if (range.start != $math.round(this._start, 2) || range.end != $math.round(this._end, 2)) {\n      this._start = range.start;\n      this._end = range.end;\n      this._skipRangeEvents = true;\n      this.updateThumb();\n      this._skipRangeEvents = false;\n      this.thumb.validate();\n      this.thumb.background.validate();\n    }\n  };\n  /**\r\n   * [getPosition description]\r\n   *\r\n   * @todo Description\r\n   * @param position  [description]\r\n   * @return [description]\r\n   */\n  Scrollbar.prototype.getPosition = function (position) {\n    return $math.fitToRange($math.round(position, 4), 0, 1);\n  };\n  Object.defineProperty(Scrollbar.prototype, \"orientation\", {\n    /**\r\n     * @return Orientation\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"orientation\");\n    },\n    /**\r\n     * ==========================================================================\r\n     * MISC\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Orientation of the scrollbar.\r\n     *\r\n     * Available options: \"horizontal\" (default) and \"vertical\".\r\n     *\r\n     * @default \"horizontal\"\r\n     * @param value  Orientation\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"orientation\", value)) {\n        // Set mouse cursors and screen reader tetxt accordingly\n        if (value === \"horizontal\") {\n          // Mouse styles\n          this.startGrip.cursorOverStyle = MouseCursorStyle.horizontalResize;\n          this.endGrip.cursorOverStyle = MouseCursorStyle.horizontalResize;\n          // Reader text\n          /*this.readerTitle = this.language.translate(\"Use TAB to select grip buttons or left and right arrows to change selection\");\r\n          this.thumb.readerDescription = this.language.translate(\"Use left and right arrows to move selection\");\r\n          this.startGrip.readerDescription = this.language.translate(\"Use left and right arrows to move left selection\");\r\n          this.endGrip.readerDescription = this.language.translate(\"Use left and right arrows to move right selection\");*/\n        } else {\n          // Mouse styles\n          this.startGrip.cursorOverStyle = MouseCursorStyle.verticalResize;\n          this.endGrip.cursorOverStyle = MouseCursorStyle.verticalResize;\n          // Reader text\n          /*this.readerTitle = this.language.translate(\"Use TAB select grip buttons or up and down arrows to change selection\");\r\n          this.thumb.readerDescription = this.language.translate(\"Use up and down arrows to move selection\");\r\n          this.startGrip.readerDescription = this.language.translate(\"Use up and down arrows to move upper selection\");\r\n          this.endGrip.readerDescription = this.language.translate(\"Use up and down arrows to move lower selection\");*/\n        }\n\n        this.updateByOrientation();\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n  Scrollbar.prototype.updateByOrientation = function () {};\n  Object.defineProperty(Scrollbar.prototype, \"startGrip\", {\n    /**\r\n     * @return Grip element\r\n     */\n    get: function () {\n      return this._startGrip;\n    },\n    /**\r\n     * ==========================================================================\r\n     * GRIPS\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n    /**\r\n     * Start grip element. (button)\r\n     *\r\n     * @param button  Grip element\r\n     */\n    set: function (button) {\n      if (this._startGrip) {\n        this.removeDispose(this._startGrip);\n      }\n      this._startGrip = button;\n      this.processGrip(button);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"endGrip\", {\n    /**\r\n     * @return Grip element\r\n     */\n    get: function () {\n      return this._endGrip;\n    },\n    /**\r\n     * End grip element. (button)\r\n     *\r\n     * @param button  Grip element\r\n     */\n    set: function (button) {\n      if (this._endGrip) {\n        this.removeDispose(this._endGrip);\n      }\n      this._endGrip = button;\n      this.processGrip(button);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Decorates the grip button with properties and events.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param button Grip button\r\n   */\n  Scrollbar.prototype.processGrip = function (button) {\n    button.parent = this;\n    button.isMeasured = false;\n    button.focusable = true;\n    button.shouldClone = false;\n    // Set button defaults\n    //button.showSystemTooltip = true; // setting this here is not right because we break inheritance\n    button.zIndex = 100;\n    button.events.on(\"drag\", this.handleGripDrag, this, false);\n    button.events.on(\"dragstop\", this.makeUnbusy, this, false);\n    button.events.on(\"down\", this.makeBusy, this, false);\n    button.events.on(\"up\", this.makeUnbusy, this, false);\n    this._disposers.push(button);\n  };\n  /**\r\n   * Updates positions of related elements after grip element is dragged.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n  Scrollbar.prototype.handleGripDrag = function (event) {\n    this.makeBusy();\n    if (event.target === this._startGrip) {\n      this._usingGrip = \"start\";\n    } else {\n      this._usingGrip = \"end\";\n    }\n    if (this.orientation == \"horizontal\") {\n      this._start = this.startGrip.pixelX / this.innerWidth;\n      this._end = this.endGrip.pixelX / this.innerWidth;\n    } else {\n      this._start = 1 - this.startGrip.pixelY / this.innerHeight;\n      this._end = 1 - this.endGrip.pixelY / this.innerHeight;\n    }\n    this.updateThumb();\n  };\n  Object.defineProperty(Scrollbar.prototype, \"thumb\", {\n    /**\r\n     * @return Thumb element\r\n     */\n    get: function () {\n      if (!this._thumb) {\n        // Create scrollbar controls (setters will handle adding disposers)\n        var thumb = new Button();\n        thumb.background.cornerRadius(10, 10, 10, 10);\n        thumb.padding(0, 0, 0, 0);\n        this.thumb = thumb;\n      }\n      return this._thumb;\n    },\n    /**\r\n     * A \"thumb\" element.\r\n     *\r\n     * It's a draggable square space between the grips, that can be used to\r\n     * pan the selection.\r\n     *\r\n     * @param thumb  Thumb element\r\n     */\n    set: function (thumb) {\n      var _this = this;\n      if (thumb) {\n        if (this._thumb) {\n          this.removeDispose(this._thumb);\n        }\n        this._thumb = thumb;\n        thumb.parent = this;\n        thumb.isMeasured = false;\n        thumb.inert = true;\n        thumb.draggable = true;\n        thumb.clickable = true;\n        thumb.hoverable = true;\n        thumb.focusable = true;\n        thumb.shouldClone = false;\n        thumb.zIndex = 0;\n        // TODO remove closures ?\n        // Add events\n        // Add cursor styles to thumb\n        thumb.cursorOverStyle = MouseCursorStyle.grab;\n        thumb.cursorDownStyle = MouseCursorStyle.grabbing;\n        thumb.events.on(\"dragstart\", this.makeBusy, this, false);\n        thumb.events.on(\"dragstop\", this.makeUnbusy, this, false);\n        thumb.events.on(\"positionchanged\", this.handleThumbPosition, this, false);\n        thumb.events.on(\"sizechanged\", this.handleThumbPosition, this, false);\n        thumb.events.on(\"doublehit\", this.handleDoubleClick, this, false);\n        // Add event for space and ENTER to toggle full zoom out and back\n        // (same as doubleclick)\n        this._disposers.push(getInteraction().body.events.on(\"keyup\", function (ev) {\n          if (keyboard.isKey(ev.event, [\"space\", \"enter\"]) && _this.thumb.isFocused) {\n            ev.event.preventDefault();\n            _this.handleDoubleClick();\n          }\n        }));\n        this._disposers.push(this._thumb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Zooms-in and out the selection on double-click of the thumb.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Scrollbar.prototype.handleDoubleClick = function () {\n    this.makeBusy();\n    var newStart = 0;\n    var newEnd = 1;\n    if (this.start != 0 || this.end != 1) {\n      this._prevStart = this.start;\n      this._prevEnd = this.end;\n    } else {\n      newStart = this._prevStart;\n      newEnd = this._prevEnd;\n    }\n    var zoomAnimation = this.animate([{\n      property: \"__start\",\n      to: newStart\n    }, {\n      property: \"__end\",\n      to: newEnd\n    }], this.animationDuration, this.animationEasing);\n    if (zoomAnimation && !zoomAnimation.isFinished()) {\n      zoomAnimation.events.on(\"animationended\", this.makeUnbusy, this, false);\n      this._zoomAnimation = zoomAnimation;\n    } else {\n      this.makeUnbusy();\n    }\n  };\n  /**\r\n   * Updates positions of other elements when thumb is moved.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Scrollbar.prototype.handleThumbPosition = function () {\n    var thumb = this.thumb;\n    if (this.orientation == \"horizontal\") {\n      var innerWidth_2 = this.innerWidth;\n      var w = thumb.innerWidth;\n      var x = thumb.pixelX;\n      this._start = x / innerWidth_2;\n      this._end = (x + w) / innerWidth_2;\n      this.updateThumb();\n    } else {\n      var innerHeight_2 = this.innerHeight;\n      var h = thumb.innerHeight;\n      var y = thumb.pixelY;\n      if (y + h > innerHeight_2) {\n        y = innerHeight_2 - h;\n        thumb.y = y;\n      }\n      this._start = 1 - (y + h) / innerHeight_2;\n      this._end = 1 - y / innerHeight_2;\n      this.updateThumb();\n    }\n  };\n  /**\r\n   * Creates a background element for the scrollbar.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Background\r\n   */\n  Scrollbar.prototype.createBackground = function () {\n    return new RoundedRectangle();\n  };\n  Object.defineProperty(Scrollbar.prototype, \"hideGrips\", {\n    /**\r\n     * @return Show only on hover?\r\n     */\n    get: function () {\n      return this._hideGrips;\n    },\n    /**\r\n     * Use this property to set whether grips should be always visible (`false`),\r\n     * or they should just appear on scrollbar hover (`true`).\r\n     *\r\n     * @param value  Show only on hover?\r\n     */\n    set: function (value) {\n      var _this = this;\n      this._hideGrips = value;\n      if (this._overDisposer) {\n        this.removeDispose(this._overDisposer);\n      }\n      if (this._outDisposer) {\n        this.removeDispose(this._outDisposer);\n      }\n      if (value) {\n        this._overDisposer = this.events.on(\"over\", function () {\n          _this.startGrip.show();\n          _this.endGrip.show();\n        }, undefined, false);\n        this._outDisposer = this.events.on(\"out\", function () {\n          _this.startGrip.hide();\n          _this.endGrip.hide();\n        }, undefined, false);\n        this.startGrip.hide();\n        this.endGrip.hide();\n      } else {\n        this.startGrip.show();\n        this.endGrip.show();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"animationDuration\", {\n    /**\r\n     * @return Orientation\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"animationDuration\");\n    },\n    /**\r\n     * Duration in milliseconds of scrollbar animation (happens when user clicks on a background of a scrollbar)\r\n     * @default 0\r\n     * @param value number\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"animationDuration\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"animationEasing\", {\n    /**\r\n     * @return {Function}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"animationEasing\");\n    },\n    /**\r\n     * Animation easing function.\r\n     * @todo: review description and default\r\n     * @default $ease.cubicOut\r\n     * @param value (value: number) => number\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"animationEasing\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Adds easing functions to \"function\" fields.\r\n   *\r\n   * @param field  Field name\r\n   * @return Assign as function?\r\n   */\n  Scrollbar.prototype.asFunction = function (field) {\n    return field == \"animationEasing\" || _super.prototype.asIs.call(this, field);\n  };\n  return Scrollbar;\n}(Container);\nexport { Scrollbar };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Scrollbar\"] = Scrollbar;","map":{"version":3,"names":["__extends","Container","ResizeButton","Button","getInteraction","MouseCursorStyle","RoundedRectangle","registry","keyboard","InterfaceColorSet","percent","Percent","$math","$ease","$type","$utils","Scrollbar","_super","_this","call","_previousStart","_previousEnd","_prevStart","_prevEnd","_isBusy","_skipRangeEvents","updateWhileMoving","className","minHeight","minWidth","animationDuration","animationEasing","cubicOut","margin","interfaceColors","background","cornerRadius","fill","getFor","fillOpacity","showSystemTooltip","startGrip","endGrip","events","on","updateThumb","start","end","role","thumb","readerLive","once","undefined","dispatchRangeChange","hideGrips","orientation","setSVGAttribute","applyTheme","prototype","applyInternalDefaults","hasValue","readerTitle","language","translate","readerDescription","readerOrientation","readerControls","baseSprite","uidAttr","validateLayout","updateSize","updateExtremes","processBackground","clickable","handleBgHit","event","makeBusy","point","spritePoint","spritePointToSprite","thumbX","x","pixelWidth","fitToRange","innerWidth","_thumbAnimation","animate","property","to","thumbY","y","pixelHeight","innerHeight","makeUnbusy","_thumb","validate","_unbusyTimeout","removeDispose","stopAnimations","stop","_zoomAnimation","setTimeout","makeUnbusyReal","bind","_usingGrip","dispatch","dispatchEvents","parent","directionFlipped","adapter","apply","flipped","fromName","toName","fromValue","toValue","innerWidth_1","width","maxX","moveTo","pixelX","value","Math","round","position","readerValueNow","readerValueText","innerHeight_1","height","maxY","pixelY","minX","minY","isNumber","_pixelWidth","percentHeight","verticalCenter","horizontalCenter","_pixelHeight","percentWidth","Object","defineProperty","get","enumerable","configurable","min","getPosition","_start","_end","set","__start","max","__end","priority","skipRangeEvents","fixRange","range","getPropertyValue","setPropertyValue","cursorOverStyle","horizontalResize","verticalResize","updateByOrientation","invalidate","_startGrip","button","processGrip","_endGrip","isMeasured","focusable","shouldClone","zIndex","handleGripDrag","_disposers","push","target","padding","inert","draggable","hoverable","grab","cursorDownStyle","grabbing","handleThumbPosition","handleDoubleClick","body","ev","isKey","isFocused","preventDefault","newStart","newEnd","zoomAnimation","isFinished","innerWidth_2","w","innerHeight_2","h","createBackground","_hideGrips","_overDisposer","_outDisposer","show","hide","asFunction","field","asIs","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/elements/Scrollbar.js"],"sourcesContent":["/**\r\n * Provides functionality used to build scrollbars.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../Container\";\r\nimport { ResizeButton } from \"../elements/ResizeButton\";\r\nimport { Button } from \"../elements/Button\";\r\nimport { getInteraction } from \"../interaction/Interaction\";\r\nimport { MouseCursorStyle } from \"../interaction/Mouse\";\r\nimport { RoundedRectangle } from \"../elements/RoundedRectangle\";\r\nimport { registry } from \"../Registry\";\r\nimport { keyboard } from \"../utils/Keyboard\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent, Percent } from \"../utils/Percent\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $ease from \"../utils/Ease\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $utils from \"../utils/Utils\";\r\n;\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Scrollbar is a generic control allowing to select a range of values or pan\r\n * the selection.\r\n *\r\n * @see {@link IScrollbarEvents} for a list of available events\r\n * @see {@link IScrollbarAdapters} for a list of available Adapters\r\n */\r\nvar Scrollbar = /** @class */ (function (_super) {\r\n    __extends(Scrollbar, _super);\r\n    /**\r\n     * Construtor\r\n     */\r\n    function Scrollbar() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Previously selected lower (start) value.\r\n         */\r\n        _this._previousStart = 0;\r\n        /**\r\n         * Previously selected upper (end) value.\r\n         */\r\n        _this._previousEnd = 1;\r\n        /**\r\n         * A value of previously selected lower value, used for doubleclick function.\r\n         */\r\n        _this._prevStart = 0;\r\n        /**\r\n         * A value of previously selected upper value, used for doubleclick function.\r\n         */\r\n        _this._prevEnd = 1;\r\n        /**\r\n         * Indicates if the Scrollbar is currently \"busy\" (animating and or\r\n         * performing zoom by user interaction).\r\n         */\r\n        _this._isBusy = false;\r\n        /**\r\n         * [_skipRangeEvents description]\r\n         *\r\n         * @todo Description\r\n         */\r\n        _this._skipRangeEvents = false;\r\n        /**\r\n         * Update the selection when dragging the grips.\r\n         *\r\n         * If set to `false` selection will be updated only when the grip is\r\n         * released.\r\n         *\r\n         * @default true\r\n         */\r\n        _this.updateWhileMoving = true;\r\n        _this.className = \"Scrollbar\";\r\n        _this.minHeight = 12;\r\n        _this.minWidth = 12;\r\n        _this.animationDuration = 0;\r\n        _this.animationEasing = $ease.cubicOut;\r\n        _this.margin(10, 10, 10, 10);\r\n        var interfaceColors = new InterfaceColorSet();\r\n        // background is also container as it might contain graphs, grid, etc\r\n        var background = _this.background;\r\n        background.cornerRadius(10, 10, 10, 10);\r\n        background.fill = interfaceColors.getFor(\"fill\");\r\n        background.fillOpacity = 0.5;\r\n        // Make system tooltips appear by default\r\n        _this.showSystemTooltip = true;\r\n        _this.startGrip = new ResizeButton();\r\n        _this.endGrip = new ResizeButton();\r\n        // Default orientation...\r\n        // ... is set in `applyInternalDefaults()` because it accesses `language`\r\n        // and should only be started to access when parent is set\r\n        // Set events\r\n        _this.events.on(\"transformed\", function () {\r\n            _this.updateThumb();\r\n        }, _this, false);\r\n        // Initial positions\r\n        _this.start = 0;\r\n        _this.end = 1;\r\n        // Set roles\r\n        _this.role = \"scrollbar\";\r\n        _this.thumb.role = \"slider\";\r\n        _this.thumb.readerLive = \"polite\";\r\n        _this.startGrip.role = \"slider\";\r\n        _this.endGrip.role = \"slider\";\r\n        // otherwise range changed won't be registered\r\n        _this.events.once(\"inited\", function () {\r\n            _this._previousStart = undefined;\r\n            _this.dispatchRangeChange();\r\n        }, undefined, false);\r\n        _this.hideGrips = false;\r\n        _this.orientation = \"horizontal\";\r\n        // Min/max values for accessibility\r\n        _this.setSVGAttribute({ \"aria-valuemin\": \"0\" });\r\n        _this.setSVGAttribute({ \"aria-valuemax\": \"100\" });\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    Scrollbar.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        // Set screen reader tetxt accordingly\r\n        if (this.orientation === \"horizontal\") {\r\n            if (!$type.hasValue(this.readerTitle)) {\r\n                this.readerTitle = this.language.translate(\"Use TAB to select grip buttons or left and right arrows to change selection\");\r\n            }\r\n            if (!$type.hasValue(this.thumb.readerDescription)) {\r\n                this.thumb.readerDescription = this.language.translate(\"Use left and right arrows to move selection\");\r\n            }\r\n            if (!$type.hasValue(this.startGrip.readerDescription)) {\r\n                this.startGrip.readerDescription = this.language.translate(\"Use left and right arrows to move left selection\");\r\n            }\r\n            if (!$type.hasValue(this.endGrip.readerDescription)) {\r\n                this.endGrip.readerDescription = this.language.translate(\"Use left and right arrows to move right selection\");\r\n            }\r\n            this.readerOrientation = \"horizontal\";\r\n        }\r\n        else {\r\n            if (!$type.hasValue(this.readerTitle)) {\r\n                this.readerTitle = this.language.translate(\"Use TAB select grip buttons or up and down arrows to change selection\");\r\n            }\r\n            if (!$type.hasValue(this.thumb.readerDescription)) {\r\n                this.thumb.readerDescription = this.language.translate(\"Use up and down arrows to move selection\");\r\n            }\r\n            if (!$type.hasValue(this.startGrip.readerDescription)) {\r\n                this.startGrip.readerDescription = this.language.translate(\"Use up and down arrows to move upper selection\");\r\n            }\r\n            if (!$type.hasValue(this.endGrip.readerDescription)) {\r\n                this.endGrip.readerDescription = this.language.translate(\"Use up and down arrows to move lower selection\");\r\n            }\r\n            this.readerOrientation = \"vertical\";\r\n        }\r\n        this.readerControls = this.baseSprite.uidAttr();\r\n    };\r\n    /**\r\n     * Validates the layout of the scrollbar's elements.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Scrollbar.prototype.validateLayout = function () {\r\n        this.updateSize();\r\n        _super.prototype.validateLayout.call(this);\r\n        // when size changes, need to update extremes\r\n        this.updateExtremes();\r\n    };\r\n    /**\r\n     * Update background for the scrollbar.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Scrollbar.prototype.processBackground = function () {\r\n        _super.prototype.processBackground.call(this);\r\n        var background = this.background;\r\n        background.clickable = true;\r\n        background.events.on(\"hit\", this.handleBgHit, this, undefined);\r\n    };\r\n    /**\r\n     * Zooms to the particular place when clicked/tapped on the scrollbar\r\n     * background.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event  Event\r\n     */\r\n    Scrollbar.prototype.handleBgHit = function (event) {\r\n        this.makeBusy();\r\n        var point = event.spritePoint;\r\n        point = $utils.spritePointToSprite(point, this.background, this);\r\n        var thumb = this.thumb;\r\n        if (this.orientation == \"horizontal\") {\r\n            var thumbX = point.x - thumb.pixelWidth / 2;\r\n            thumbX = $math.fitToRange(thumbX, 0, this.innerWidth - thumb.pixelWidth);\r\n            this._thumbAnimation = thumb.animate({ property: \"x\", to: thumbX }, this.animationDuration, this.animationEasing);\r\n        }\r\n        else {\r\n            var thumbY = point.y - thumb.pixelHeight / 2;\r\n            thumbY = $math.fitToRange(thumbY, 0, this.innerHeight - thumb.pixelHeight);\r\n            this._thumbAnimation = thumb.animate({ property: \"y\", to: thumbY }, this.animationDuration, this.animationEasing);\r\n        }\r\n        if (this.animationDuration > 0) {\r\n            this._thumbAnimation.events.on(\"animationended\", this.makeUnbusy, this, false);\r\n        }\r\n        else {\r\n            this._thumb.validate();\r\n            this.makeUnbusy();\r\n        }\r\n    };\r\n    /**\r\n     * Set scrollbar as busy. (currently zooming)\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Scrollbar.prototype.makeBusy = function () {\r\n        this._isBusy = true;\r\n        this._skipRangeEvents = false;\r\n        if (this._unbusyTimeout) {\r\n            this.removeDispose(this._unbusyTimeout);\r\n        }\r\n        this._unbusyTimeout = undefined;\r\n        this.stopAnimations();\r\n    };\r\n    /**\r\n     * Stops all animations, currently playing for the scrollbar.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Scrollbar.prototype.stopAnimations = function () {\r\n        if (this._thumbAnimation) {\r\n            this._thumbAnimation.stop(true);\r\n        }\r\n        if (this._zoomAnimation) {\r\n            this._zoomAnimation.stop(true);\r\n        }\r\n    };\r\n    /**\r\n     * Cancels \"busy\" status of the Scrollbar.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Scrollbar.prototype.makeUnbusy = function () {\r\n        /**\r\n         * We cannot make Scrollbar not busy right after release, because then axes\r\n         * will take over controll and Scrollbar will start to animate.\r\n         * Theorethically, it's not right to set timeout by `animationDuration`,\r\n         * however we can not know all the durations of elements we scroll, so we\r\n         * assume that animation duration will be the same as\r\n         * `interpolationDuration` or `rangeChange` duration.\r\n         */\r\n        this._unbusyTimeout = this.setTimeout(this.makeUnbusyReal.bind(this), this.animationDuration * 1.1);\r\n    };\r\n    /**\r\n     * [makeUnbusyReal description]\r\n     *\r\n     * @todo Description\r\n     * @ignore Exclude from docs\r\n     */\r\n    Scrollbar.prototype.makeUnbusyReal = function () {\r\n        this._usingGrip = undefined;\r\n        this._isBusy = false;\r\n        if (!this.updateWhileMoving) {\r\n            this.dispatchRangeChange();\r\n        }\r\n    };\r\n    /**\r\n     * Disptatches rangechanged event if it really changed\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Scrollbar.prototype.dispatchRangeChange = function () {\r\n        if (this._previousEnd != this.end || this._previousStart != this.start) {\r\n            this._previousStart = this.start;\r\n            this._previousEnd = this.end;\r\n            this.dispatch(\"rangechanged\");\r\n        }\r\n    };\r\n    /**\r\n     * Updates the \"thumb\" element. A draggable element between the grips.\r\n     * @ignore\r\n     */\r\n    Scrollbar.prototype.updateThumb = function (dispatchEvents) {\r\n        if (dispatchEvents === void 0) { dispatchEvents = true; }\r\n        if (!this.parent) {\r\n            return;\r\n        }\r\n        var thumb = this.thumb;\r\n        var start = this.start;\r\n        var end = this.end;\r\n        var startGrip = this.startGrip;\r\n        var endGrip = this.endGrip;\r\n        var directionFlipped = this.adapter.apply(\"positionValueDirection\", {\r\n            flipped: false\r\n        }).flipped;\r\n        var fromName = directionFlipped ? \"To %1\" : \"From %1\";\r\n        var toName = directionFlipped ? \"From %1\" : \"To %1\";\r\n        var fromValue;\r\n        var toValue;\r\n        if (this.orientation == \"horizontal\") {\r\n            var innerWidth_1 = this.innerWidth;\r\n            thumb.width = innerWidth_1 * (end - start);\r\n            thumb.maxX = innerWidth_1 - thumb.pixelWidth;\r\n            thumb.x = start * innerWidth_1;\r\n            startGrip.moveTo({ x: thumb.pixelX, y: 0 }, undefined, undefined, true); // overrides dragging\r\n            endGrip.moveTo({ x: thumb.pixelX + thumb.pixelWidth, y: 0 }, undefined, undefined, true);\r\n            fromValue = this.adapter.apply(\"positionValue\", {\r\n                value: Math.round(start * 100) + \"%\",\r\n                position: start\r\n            }).value;\r\n            toValue = this.adapter.apply(\"positionValue\", {\r\n                value: Math.round(end * 100) + \"%\",\r\n                position: end\r\n            }).value;\r\n            startGrip.readerTitle = this.language.translate(fromName, undefined, fromValue);\r\n            startGrip.readerValueNow = \"\" + Math.round(start * 100);\r\n            startGrip.readerValueText = startGrip.readerTitle;\r\n            endGrip.readerTitle = this.language.translate(toName, undefined, toValue);\r\n            endGrip.readerValueNow = \"\" + Math.round(end * 100);\r\n            endGrip.readerValueText = endGrip.readerTitle;\r\n        }\r\n        else {\r\n            var innerHeight_1 = this.innerHeight;\r\n            thumb.height = innerHeight_1 * (end - start);\r\n            thumb.maxY = innerHeight_1 - thumb.pixelHeight;\r\n            thumb.y = (1 - end) * innerHeight_1;\r\n            startGrip.moveTo({ x: 0, y: thumb.pixelY + thumb.pixelHeight }, undefined, undefined, true);\r\n            endGrip.moveTo({ x: 0, y: thumb.pixelY }, undefined, undefined, true);\r\n            fromValue = this.adapter.apply(\"positionValue\", {\r\n                value: Math.round((1 - start) * 100) + \"%\",\r\n                position: (1 - start)\r\n            }).value;\r\n            toValue = this.adapter.apply(\"positionValue\", {\r\n                value: Math.round((1 - end) * 100) + \"%\",\r\n                position: (1 - end)\r\n            }).value;\r\n            startGrip.readerTitle = this.language.translate(toName, undefined, fromValue);\r\n            startGrip.readerValueNow = \"\" + Math.round(start * 100);\r\n            startGrip.readerValueText = startGrip.readerTitle;\r\n            endGrip.readerTitle = this.language.translate(fromName, undefined, toValue);\r\n            endGrip.readerValueNow = \"\" + Math.round(end * 100);\r\n            endGrip.readerValueText = endGrip.readerTitle;\r\n        }\r\n        // Add accessibility\r\n        thumb.readerTitle = this.language.translate(\"From %1 to %2\", undefined, fromValue, toValue);\r\n        thumb.readerValueNow = \"\" + Math.round(start * 100);\r\n        thumb.readerValueText = thumb.readerTitle;\r\n        this.readerValueNow = \"\" + Math.round(start * 100);\r\n        this.readerValueText = thumb.readerTitle;\r\n        if (!this._skipRangeEvents && this.updateWhileMoving && dispatchEvents) {\r\n            this.dispatchRangeChange();\r\n        }\r\n    };\r\n    /**\r\n     * Updates extremes of the scrollbar.\r\n     */\r\n    Scrollbar.prototype.updateExtremes = function () {\r\n        var orientation = this.orientation;\r\n        var minX = 0;\r\n        var minY = 0;\r\n        var maxX = 0;\r\n        var maxY = 0;\r\n        if (orientation == \"horizontal\") {\r\n            maxX = this.innerWidth;\r\n            minY = maxY = this.innerHeight / 2;\r\n        }\r\n        else {\r\n            maxY = this.innerHeight;\r\n            minX = maxX = this.innerWidth / 2;\r\n        }\r\n        var startGrip = this.startGrip;\r\n        startGrip.minX = minX;\r\n        startGrip.maxX = maxX;\r\n        startGrip.minY = minY;\r\n        startGrip.maxY = maxY;\r\n        var endGrip = this.endGrip;\r\n        endGrip.minX = minX;\r\n        endGrip.maxX = maxX;\r\n        endGrip.minY = minY;\r\n        endGrip.maxY = maxY;\r\n        var thumb = this.thumb;\r\n        thumb.minX = minX;\r\n        thumb.maxX = maxX;\r\n        thumb.minY = minY;\r\n        thumb.maxY = maxY;\r\n    };\r\n    /**\r\n     * Updates size of the scrollbar.\r\n     */\r\n    Scrollbar.prototype.updateSize = function () {\r\n        var orientation = this.orientation;\r\n        var startGrip = this.startGrip;\r\n        if (startGrip) {\r\n            startGrip.orientation = orientation;\r\n        }\r\n        if (this.endGrip) {\r\n            this.endGrip.orientation = orientation;\r\n        }\r\n        var thumb = this.thumb;\r\n        if (thumb) {\r\n            if (orientation == \"horizontal\") {\r\n                if (!$type.isNumber(this._pixelWidth)) {\r\n                    if (!(this.width instanceof Percent)) {\r\n                        this.width = percent(100);\r\n                    }\r\n                }\r\n                // this teorethically might be wrong, if user indeed sets height of a horizontal scrollbar in percent\r\n                // however without this height might be equal to 100% if previous orientation was set to horizontal\r\n                // so this is ok solution, in case user really wants to have scrollbar height set in percent,\r\n                // he should do this after orientation.\r\n                if ($type.hasValue(this.percentHeight)) {\r\n                    this.height = this.minHeight;\r\n                }\r\n                thumb.height = this.innerHeight;\r\n                thumb.verticalCenter = \"middle\";\r\n                thumb.horizontalCenter = \"left\";\r\n            }\r\n            else {\r\n                if (!$type.isNumber(this._pixelHeight)) {\r\n                    if (!(this.height instanceof Percent)) {\r\n                        this.height = percent(100);\r\n                    }\r\n                }\r\n                // same as above with percentHeight\r\n                if ($type.hasValue(this.percentWidth)) {\r\n                    this.width = this.minWidth;\r\n                }\r\n                thumb.width = this.innerWidth;\r\n                thumb.verticalCenter = \"top\";\r\n                thumb.horizontalCenter = \"middle\";\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(Scrollbar.prototype, \"isBusy\", {\r\n        /**\r\n         * Indicates if the Scrollbar is currently \"busy\" (animating and or\r\n         * performing zoom by user interaction).\r\n         * @return boolean\r\n         */\r\n        get: function () {\r\n            return this._isBusy;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Scrollbar.prototype, \"start\", {\r\n        /**\r\n         * @return Position (0-1)\r\n         */\r\n        get: function () {\r\n            return Math.min(this.getPosition(this._start), this.getPosition(this._end));\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * POSITIONS\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Relative position (0-1) of the start grip.\r\n         *\r\n         * @param position  Position (0-1)\r\n         */\r\n        set: function (position) {\r\n            if (!this._isBusy) {\r\n                this.__start = position;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Scrollbar.prototype, \"__start\", {\r\n        /**\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            return this._start;\r\n        },\r\n        /**\r\n         * [__start description]\r\n         *\r\n         * @todo Description\r\n         * @param position [description]\r\n         */\r\n        set: function (position) {\r\n            this._start = this.getPosition(position);\r\n            this.updateThumb();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Scrollbar.prototype, \"end\", {\r\n        /**\r\n         * @return Position (0-1)\r\n         */\r\n        get: function () {\r\n            return Math.max(this.getPosition(this._start), this.getPosition(this._end));\r\n        },\r\n        /**\r\n         * Relative position (0-1) of the end grip.\r\n         *\r\n         * @param position  Position (0-1)\r\n         */\r\n        set: function (position) {\r\n            if (!this._isBusy) {\r\n                this.__end = position;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Scrollbar.prototype, \"__end\", {\r\n        /**\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            return this._end;\r\n        },\r\n        /**\r\n         * [__end description]\r\n         *\r\n         * @todo Description\r\n         * @param position [description]\r\n         */\r\n        set: function (position) {\r\n            this._end = this.getPosition(position);\r\n            this.updateThumb();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Scrollbar.prototype, \"range\", {\r\n        /**\r\n         * Current selection range.\r\n         *\r\n         * @readonly\r\n         * @return Range\r\n         */\r\n        get: function () {\r\n            return { start: this.start, end: this.end, priority: this._usingGrip };\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Disables range change events.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Scrollbar.prototype.skipRangeEvents = function () {\r\n        if (!this._isBusy) {\r\n            this._skipRangeEvents = true;\r\n        }\r\n    };\r\n    /**\r\n     * [fixRange description]\r\n     *\r\n     * @todo Description\r\n     * @ignore Exclude from docs\r\n     * @param range  Range\r\n     */\r\n    Scrollbar.prototype.fixRange = function (range) {\r\n        if (range.start != $math.round(this._start, 2) || range.end != $math.round(this._end, 2)) {\r\n            this._start = range.start;\r\n            this._end = range.end;\r\n            this._skipRangeEvents = true;\r\n            this.updateThumb();\r\n            this._skipRangeEvents = false;\r\n            this.thumb.validate();\r\n            this.thumb.background.validate();\r\n        }\r\n    };\r\n    /**\r\n     * [getPosition description]\r\n     *\r\n     * @todo Description\r\n     * @param position  [description]\r\n     * @return [description]\r\n     */\r\n    Scrollbar.prototype.getPosition = function (position) {\r\n        return $math.fitToRange($math.round(position, 4), 0, 1);\r\n    };\r\n    Object.defineProperty(Scrollbar.prototype, \"orientation\", {\r\n        /**\r\n         * @return Orientation\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"orientation\");\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * MISC\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Orientation of the scrollbar.\r\n         *\r\n         * Available options: \"horizontal\" (default) and \"vertical\".\r\n         *\r\n         * @default \"horizontal\"\r\n         * @param value  Orientation\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"orientation\", value)) {\r\n                // Set mouse cursors and screen reader tetxt accordingly\r\n                if (value === \"horizontal\") {\r\n                    // Mouse styles\r\n                    this.startGrip.cursorOverStyle = MouseCursorStyle.horizontalResize;\r\n                    this.endGrip.cursorOverStyle = MouseCursorStyle.horizontalResize;\r\n                    // Reader text\r\n                    /*this.readerTitle = this.language.translate(\"Use TAB to select grip buttons or left and right arrows to change selection\");\r\n                    this.thumb.readerDescription = this.language.translate(\"Use left and right arrows to move selection\");\r\n                    this.startGrip.readerDescription = this.language.translate(\"Use left and right arrows to move left selection\");\r\n                    this.endGrip.readerDescription = this.language.translate(\"Use left and right arrows to move right selection\");*/\r\n                }\r\n                else {\r\n                    // Mouse styles\r\n                    this.startGrip.cursorOverStyle = MouseCursorStyle.verticalResize;\r\n                    this.endGrip.cursorOverStyle = MouseCursorStyle.verticalResize;\r\n                    // Reader text\r\n                    /*this.readerTitle = this.language.translate(\"Use TAB select grip buttons or up and down arrows to change selection\");\r\n                    this.thumb.readerDescription = this.language.translate(\"Use up and down arrows to move selection\");\r\n                    this.startGrip.readerDescription = this.language.translate(\"Use up and down arrows to move upper selection\");\r\n                    this.endGrip.readerDescription = this.language.translate(\"Use up and down arrows to move lower selection\");*/\r\n                }\r\n                this.updateByOrientation();\r\n                this.invalidate();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @ignore\r\n     */\r\n    Scrollbar.prototype.updateByOrientation = function () {\r\n    };\r\n    Object.defineProperty(Scrollbar.prototype, \"startGrip\", {\r\n        /**\r\n         * @return Grip element\r\n         */\r\n        get: function () {\r\n            return this._startGrip;\r\n        },\r\n        /**\r\n         * ==========================================================================\r\n         * GRIPS\r\n         * ==========================================================================\r\n         * @hidden\r\n         */\r\n        /**\r\n         * Start grip element. (button)\r\n         *\r\n         * @param button  Grip element\r\n         */\r\n        set: function (button) {\r\n            if (this._startGrip) {\r\n                this.removeDispose(this._startGrip);\r\n            }\r\n            this._startGrip = button;\r\n            this.processGrip(button);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Scrollbar.prototype, \"endGrip\", {\r\n        /**\r\n         * @return Grip element\r\n         */\r\n        get: function () {\r\n            return this._endGrip;\r\n        },\r\n        /**\r\n         * End grip element. (button)\r\n         *\r\n         * @param button  Grip element\r\n         */\r\n        set: function (button) {\r\n            if (this._endGrip) {\r\n                this.removeDispose(this._endGrip);\r\n            }\r\n            this._endGrip = button;\r\n            this.processGrip(button);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Decorates the grip button with properties and events.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param button Grip button\r\n     */\r\n    Scrollbar.prototype.processGrip = function (button) {\r\n        button.parent = this;\r\n        button.isMeasured = false;\r\n        button.focusable = true;\r\n        button.shouldClone = false;\r\n        // Set button defaults\r\n        //button.showSystemTooltip = true; // setting this here is not right because we break inheritance\r\n        button.zIndex = 100;\r\n        button.events.on(\"drag\", this.handleGripDrag, this, false);\r\n        button.events.on(\"dragstop\", this.makeUnbusy, this, false);\r\n        button.events.on(\"down\", this.makeBusy, this, false);\r\n        button.events.on(\"up\", this.makeUnbusy, this, false);\r\n        this._disposers.push(button);\r\n    };\r\n    /**\r\n     * Updates positions of related elements after grip element is dragged.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event  Event\r\n     */\r\n    Scrollbar.prototype.handleGripDrag = function (event) {\r\n        this.makeBusy();\r\n        if (event.target === this._startGrip) {\r\n            this._usingGrip = \"start\";\r\n        }\r\n        else {\r\n            this._usingGrip = \"end\";\r\n        }\r\n        if (this.orientation == \"horizontal\") {\r\n            this._start = this.startGrip.pixelX / this.innerWidth;\r\n            this._end = this.endGrip.pixelX / this.innerWidth;\r\n        }\r\n        else {\r\n            this._start = 1 - this.startGrip.pixelY / this.innerHeight;\r\n            this._end = 1 - this.endGrip.pixelY / this.innerHeight;\r\n        }\r\n        this.updateThumb();\r\n    };\r\n    Object.defineProperty(Scrollbar.prototype, \"thumb\", {\r\n        /**\r\n         * @return Thumb element\r\n         */\r\n        get: function () {\r\n            if (!this._thumb) {\r\n                // Create scrollbar controls (setters will handle adding disposers)\r\n                var thumb = new Button();\r\n                thumb.background.cornerRadius(10, 10, 10, 10);\r\n                thumb.padding(0, 0, 0, 0);\r\n                this.thumb = thumb;\r\n            }\r\n            return this._thumb;\r\n        },\r\n        /**\r\n         * A \"thumb\" element.\r\n         *\r\n         * It's a draggable square space between the grips, that can be used to\r\n         * pan the selection.\r\n         *\r\n         * @param thumb  Thumb element\r\n         */\r\n        set: function (thumb) {\r\n            var _this = this;\r\n            if (thumb) {\r\n                if (this._thumb) {\r\n                    this.removeDispose(this._thumb);\r\n                }\r\n                this._thumb = thumb;\r\n                thumb.parent = this;\r\n                thumb.isMeasured = false;\r\n                thumb.inert = true;\r\n                thumb.draggable = true;\r\n                thumb.clickable = true;\r\n                thumb.hoverable = true;\r\n                thumb.focusable = true;\r\n                thumb.shouldClone = false;\r\n                thumb.zIndex = 0;\r\n                // TODO remove closures ?\r\n                // Add events\r\n                // Add cursor styles to thumb\r\n                thumb.cursorOverStyle = MouseCursorStyle.grab;\r\n                thumb.cursorDownStyle = MouseCursorStyle.grabbing;\r\n                thumb.events.on(\"dragstart\", this.makeBusy, this, false);\r\n                thumb.events.on(\"dragstop\", this.makeUnbusy, this, false);\r\n                thumb.events.on(\"positionchanged\", this.handleThumbPosition, this, false);\r\n                thumb.events.on(\"sizechanged\", this.handleThumbPosition, this, false);\r\n                thumb.events.on(\"doublehit\", this.handleDoubleClick, this, false);\r\n                // Add event for space and ENTER to toggle full zoom out and back\r\n                // (same as doubleclick)\r\n                this._disposers.push(getInteraction().body.events.on(\"keyup\", function (ev) {\r\n                    if (keyboard.isKey(ev.event, [\"space\", \"enter\"]) && _this.thumb.isFocused) {\r\n                        ev.event.preventDefault();\r\n                        _this.handleDoubleClick();\r\n                    }\r\n                }));\r\n                this._disposers.push(this._thumb);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Zooms-in and out the selection on double-click of the thumb.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Scrollbar.prototype.handleDoubleClick = function () {\r\n        this.makeBusy();\r\n        var newStart = 0;\r\n        var newEnd = 1;\r\n        if (this.start != 0 || this.end != 1) {\r\n            this._prevStart = this.start;\r\n            this._prevEnd = this.end;\r\n        }\r\n        else {\r\n            newStart = this._prevStart;\r\n            newEnd = this._prevEnd;\r\n        }\r\n        var zoomAnimation = this.animate([{ property: \"__start\", to: newStart }, { property: \"__end\", to: newEnd }], this.animationDuration, this.animationEasing);\r\n        if (zoomAnimation && !zoomAnimation.isFinished()) {\r\n            zoomAnimation.events.on(\"animationended\", this.makeUnbusy, this, false);\r\n            this._zoomAnimation = zoomAnimation;\r\n        }\r\n        else {\r\n            this.makeUnbusy();\r\n        }\r\n    };\r\n    /**\r\n     * Updates positions of other elements when thumb is moved.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Scrollbar.prototype.handleThumbPosition = function () {\r\n        var thumb = this.thumb;\r\n        if (this.orientation == \"horizontal\") {\r\n            var innerWidth_2 = this.innerWidth;\r\n            var w = thumb.innerWidth;\r\n            var x = thumb.pixelX;\r\n            this._start = x / innerWidth_2;\r\n            this._end = (x + w) / innerWidth_2;\r\n            this.updateThumb();\r\n        }\r\n        else {\r\n            var innerHeight_2 = this.innerHeight;\r\n            var h = thumb.innerHeight;\r\n            var y = thumb.pixelY;\r\n            if (y + h > innerHeight_2) {\r\n                y = innerHeight_2 - h;\r\n                thumb.y = y;\r\n            }\r\n            this._start = 1 - (y + h) / innerHeight_2;\r\n            this._end = 1 - y / innerHeight_2;\r\n            this.updateThumb();\r\n        }\r\n    };\r\n    /**\r\n     * Creates a background element for the scrollbar.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Background\r\n     */\r\n    Scrollbar.prototype.createBackground = function () {\r\n        return new RoundedRectangle();\r\n    };\r\n    Object.defineProperty(Scrollbar.prototype, \"hideGrips\", {\r\n        /**\r\n         * @return Show only on hover?\r\n         */\r\n        get: function () {\r\n            return this._hideGrips;\r\n        },\r\n        /**\r\n         * Use this property to set whether grips should be always visible (`false`),\r\n         * or they should just appear on scrollbar hover (`true`).\r\n         *\r\n         * @param value  Show only on hover?\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            this._hideGrips = value;\r\n            if (this._overDisposer) {\r\n                this.removeDispose(this._overDisposer);\r\n            }\r\n            if (this._outDisposer) {\r\n                this.removeDispose(this._outDisposer);\r\n            }\r\n            if (value) {\r\n                this._overDisposer = this.events.on(\"over\", function () {\r\n                    _this.startGrip.show();\r\n                    _this.endGrip.show();\r\n                }, undefined, false);\r\n                this._outDisposer = this.events.on(\"out\", function () {\r\n                    _this.startGrip.hide();\r\n                    _this.endGrip.hide();\r\n                }, undefined, false);\r\n                this.startGrip.hide();\r\n                this.endGrip.hide();\r\n            }\r\n            else {\r\n                this.startGrip.show();\r\n                this.endGrip.show();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Scrollbar.prototype, \"animationDuration\", {\r\n        /**\r\n         * @return Orientation\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"animationDuration\");\r\n        },\r\n        /**\r\n         * Duration in milliseconds of scrollbar animation (happens when user clicks on a background of a scrollbar)\r\n         * @default 0\r\n         * @param value number\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"animationDuration\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Scrollbar.prototype, \"animationEasing\", {\r\n        /**\r\n         * @return {Function}\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"animationEasing\");\r\n        },\r\n        /**\r\n         * Animation easing function.\r\n         * @todo: review description and default\r\n         * @default $ease.cubicOut\r\n         * @param value (value: number) => number\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"animationEasing\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Adds easing functions to \"function\" fields.\r\n     *\r\n     * @param field  Field name\r\n     * @return Assign as function?\r\n     */\r\n    Scrollbar.prototype.asFunction = function (field) {\r\n        return field == \"animationEasing\" || _super.prototype.asIs.call(this, field);\r\n    };\r\n    return Scrollbar;\r\n}(Container));\r\nexport { Scrollbar };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Scrollbar\"] = Scrollbar;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}