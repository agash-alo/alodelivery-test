{"ast":null,"code":"import { FocusMonitor, FocusKeyManager, isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UP_ARROW, DOWN_ARROW, RIGHT_ARROW, LEFT_ARROW, ESCAPE, hasModifierKey, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { InjectionToken, Directive, TemplateRef, ComponentFactoryResolver, ApplicationRef, Injector, ViewContainerRef, Inject, ChangeDetectorRef, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Optional, Input, HostListener, QueryList, EventEmitter, NgZone, ContentChildren, ViewChild, ContentChild, Output, Self, NgModule } from '@angular/core';\nimport { Subject, Subscription, merge, of, asapScheduler } from 'rxjs';\nimport { startWith, switchMap, take, filter, takeUntil, delay } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { mixinDisableRipple, mixinDisabled, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nconst matMenuAnimations = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [state('void', style({\n    opacity: 0,\n    transform: 'scale(0.8)'\n  })), transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n    opacity: 1,\n    transform: 'scale(1)'\n  }))), transition('* => void', animate('100ms 25ms linear', style({\n    opacity: 0\n  })))]),\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n  // TODO(crisbeto): this is inside the `transformMenu`\n  // now. Remove next time we do breaking changes.\n  state('showing', style({\n    opacity: 1\n  })), transition('void => *', [style({\n    opacity: 0\n  }), animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')])])\n};\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst transformMenu = matMenuAnimations.transformMenu;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `MatMenuContent`. It serves\n * as alternative token to the actual `MatMenuContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_MENU_CONTENT = new InjectionToken('MatMenuContent');\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\nclass MatMenuContent {\n  constructor(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document, _changeDetectorRef) {\n    this._template = _template;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._appRef = _appRef;\n    this._injector = _injector;\n    this._viewContainerRef = _viewContainerRef;\n    this._document = _document;\n    this._changeDetectorRef = _changeDetectorRef;\n    /** Emits when the menu content has been attached. */\n    this._attached = new Subject();\n  }\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n    this.detach();\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);\n    }\n    const element = this._template.elementRef.nativeElement;\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode.insertBefore(this._outlet.outletElement, element);\n    // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n    // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n    // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n    // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n    // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n    // @breaking-change 9.0.0 Make change detector ref required\n    if (this._changeDetectorRef) {\n      this._changeDetectorRef.markForCheck();\n    }\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\nMatMenuContent.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'ng-template[matMenuContent]',\n    providers: [{\n      provide: MAT_MENU_CONTENT,\n      useExisting: MatMenuContent\n    }]\n  }]\n}];\nMatMenuContent.ctorParameters = () => [{\n  type: TemplateRef\n}, {\n  type: ComponentFactoryResolver\n}, {\n  type: ApplicationRef\n}, {\n  type: Injector\n}, {\n  type: ViewContainerRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: ChangeDetectorRef\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nfunction throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when a menu is assigned\n * to a trigger that is placed inside the same menu.\n * @docs-private\n */\nfunction throwMatMenuRecursiveError() {\n  throw Error(`matMenuTriggerFor: menu cannot contain its own trigger. Assign a menu that is ` + `not a parent of the trigger or move the trigger outside of the menu.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nconst MAT_MENU_PANEL = new InjectionToken('MAT_MENU_PANEL');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nclass MatMenuItemBase {}\nconst _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n/**\n * Single item inside of a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\nclass MatMenuItem extends _MatMenuItemMixinBase {\n  constructor(_elementRef,\n  /**\n   * @deprecated `_document` parameter is no longer being used and will be removed.\n   * @breaking-change 12.0.0\n   */\n  _document, _focusMonitor, _parentMenu) {\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n    this._elementRef = _elementRef;\n    this._focusMonitor = _focusMonitor;\n    this._parentMenu = _parentMenu;\n    /** ARIA role for the menu item. */\n    this.role = 'menuitem';\n    /** Stream that emits when the menu item is hovered. */\n    this._hovered = new Subject();\n    /** Stream that emits when the menu item is focused. */\n    this._focused = new Subject();\n    /** Whether the menu item is highlighted. */\n    this._highlighted = false;\n    /** Whether the menu item acts as a trigger for a sub-menu. */\n    this._triggersSubmenu = false;\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n  }\n  /** Focuses the menu item. */\n  focus(origin, options) {\n    if (this._focusMonitor && origin) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n    } else {\n      this._getHostElement().focus(options);\n    }\n    this._focused.next(this);\n  }\n  ngAfterViewInit() {\n    if (this._focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      this._focusMonitor.monitor(this._elementRef, false);\n    }\n  }\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n    this._hovered.complete();\n    this._focused.complete();\n  }\n  /** Used to set the `tabindex`. */\n  _getTabIndex() {\n    return this.disabled ? '-1' : '0';\n  }\n  /** Returns the host DOM element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n  /** Prevents the default element actions if it is disabled. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  _checkDisabled(event) {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n  /** Emits to the hover stream. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel() {\n    var _a, _b;\n    const clone = this._elementRef.nativeElement.cloneNode(true);\n    const icons = clone.querySelectorAll('mat-icon, .material-icons');\n    // Strip away icons so they don't show up in the text.\n    for (let i = 0; i < icons.length; i++) {\n      const icon = icons[i];\n      (_a = icon.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(icon);\n    }\n    return ((_b = clone.textContent) === null || _b === void 0 ? void 0 : _b.trim()) || '';\n  }\n}\nMatMenuItem.decorators = [{\n  type: Component,\n  args: [{\n    selector: '[mat-menu-item]',\n    exportAs: 'matMenuItem',\n    inputs: ['disabled', 'disableRipple'],\n    host: {\n      '[attr.role]': 'role',\n      '[class.mat-menu-item]': 'true',\n      '[class.mat-menu-item-highlighted]': '_highlighted',\n      '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n      '[attr.tabindex]': '_getTabIndex()',\n      '[attr.aria-disabled]': 'disabled.toString()',\n      '[attr.disabled]': 'disabled || null',\n      'class': 'mat-focus-indicator'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    template: \"<ng-content></ng-content>\\n<div class=\\\"mat-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n\"\n  }]\n}];\nMatMenuItem.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: FocusMonitor\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_MENU_PANEL]\n  }, {\n    type: Optional\n  }]\n}];\nMatMenuItem.propDecorators = {\n  role: [{\n    type: Input\n  }],\n  _checkDisabled: [{\n    type: HostListener,\n    args: ['click', ['$event']]\n  }],\n  _handleMouseEnter: [{\n    type: HostListener,\n    args: ['mouseenter']\n  }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-menu`. */\nconst MAT_MENU_DEFAULT_OPTIONS = new InjectionToken('mat-menu-default-options', {\n  providedIn: 'root',\n  factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop'\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\nlet menuPanelUid = 0;\n/** Base class with all of the `MatMenu` functionality. */\nclass _MatMenuBase {\n  constructor(_elementRef, _ngZone, _defaultOptions) {\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n    this._defaultOptions = _defaultOptions;\n    this._xPosition = this._defaultOptions.xPosition;\n    this._yPosition = this._defaultOptions.yPosition;\n    /** Only the direct descendant menu items. */\n    this._directDescendantItems = new QueryList();\n    /** Subscription to tab events on the menu panel */\n    this._tabSubscription = Subscription.EMPTY;\n    /** Config object to be passed into the menu's ngClass */\n    this._classList = {};\n    /** Current state of the panel animation. */\n    this._panelAnimationState = 'void';\n    /** Emits whenever an animation on the menu completes. */\n    this._animationDone = new Subject();\n    /** Class or list of classes to be added to the overlay panel. */\n    this.overlayPanelClass = this._defaultOptions.overlayPanelClass || '';\n    /** Class to be added to the backdrop element. */\n    this.backdropClass = this._defaultOptions.backdropClass;\n    this._overlapTrigger = this._defaultOptions.overlapTrigger;\n    this._hasBackdrop = this._defaultOptions.hasBackdrop;\n    /** Event emitted when the menu is closed. */\n    this.closed = new EventEmitter();\n    /**\n     * Event emitted when the menu is closed.\n     * @deprecated Switch to `closed` instead\n     * @breaking-change 8.0.0\n     */\n    this.close = this.closed;\n    this.panelId = `mat-menu-panel-${menuPanelUid++}`;\n  }\n  /** Position of the menu in the X axis. */\n  get xPosition() {\n    return this._xPosition;\n  }\n  set xPosition(value) {\n    if (value !== 'before' && value !== 'after' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n  /** Position of the menu in the Y axis. */\n  get yPosition() {\n    return this._yPosition;\n  }\n  set yPosition(value) {\n    if (value !== 'above' && value !== 'below' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n  /** Whether the menu should overlap its trigger. */\n  get overlapTrigger() {\n    return this._overlapTrigger;\n  }\n  set overlapTrigger(value) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  /** Whether the menu has a backdrop. */\n  get hasBackdrop() {\n    return this._hasBackdrop;\n  }\n  set hasBackdrop(value) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  set panelClass(classes) {\n    const previousPanelClass = this._previousPanelClass;\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach(className => {\n        this._classList[className] = false;\n      });\n    }\n    this._previousPanelClass = classes;\n    if (classes && classes.length) {\n      classes.split(' ').forEach(className => {\n        this._classList[className] = true;\n      });\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  get classList() {\n    return this.panelClass;\n  }\n  set classList(classes) {\n    this.panelClass = classes;\n  }\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n  ngAfterContentInit() {\n    this._updateDirectDescendants();\n    this._keyManager = new FocusKeyManager(this._directDescendantItems).withWrap().withTypeAhead().withHomeAndEnd();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n    // If a user manually (programmatically) focuses a menu item, we need to reflect that focus\n    // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n    // is internal and we know that it gets completed on destroy.\n    this._directDescendantItems.changes.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map(item => item._focused)))).subscribe(focusedItem => this._keyManager.updateActiveItem(focusedItem));\n  }\n  ngOnDestroy() {\n    this._directDescendantItems.destroy();\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered() {\n    // Coerce the `changes` property because Angular types it as `Observable<any>`\n    const itemChanges = this._directDescendantItems.changes;\n    return itemChanges.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map(item => item._hovered))));\n  }\n  /*\n   * Registers a menu item with the menu.\n   * @docs-private\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 9.0.0\n   */\n  addItem(_item) {}\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 9.0.0\n   */\n  removeItem(_item) {}\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    switch (keyCode) {\n      case ESCAPE:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this.closed.emit('keydown');\n        }\n        break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n        break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n        break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n        manager.onKeydown(event);\n    }\n  }\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin = 'program') {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.pipe(take(1)).subscribe(() => this._focusFirstItem(origin));\n    } else {\n      this._focusFirstItem(origin);\n    }\n  }\n  /**\n   * Actual implementation that focuses the first item. Needs to be separated\n   * out so we don't repeat the same logic in the public `focusFirstItem` method.\n   */\n  _focusFirstItem(origin) {\n    const manager = this._keyManager;\n    manager.setFocusOrigin(origin).setFirstItemActive();\n    // If there's no active item at this point, it means that all the items are disabled.\n    // Move focus to the menu panel so keyboard events like Escape still work. Also this will\n    // give _some_ feedback to screen readers.\n    if (!manager.activeItem && this._directDescendantItems.length) {\n      let element = this._directDescendantItems.first._getHostElement().parentElement;\n      // Because the `mat-menu` is at the DOM insertion point, not inside the overlay, we don't\n      // have a nice way of getting a hold of the menu panel. We can't use a `ViewChild` either\n      // because the panel is inside an `ng-template`. We work around it by starting from one of\n      // the items and walking up the DOM.\n      while (element) {\n        if (element.getAttribute('role') === 'menu') {\n          element.focus();\n          break;\n        } else {\n          element = element.parentElement;\n        }\n      }\n    }\n  }\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth) {\n    // The elevation starts at the base and increases by one for each level.\n    // Capped at 24 because that's the maximum elevation defined in the Material design spec.\n    const elevation = Math.min(MAT_MENU_BASE_ELEVATION + depth, 24);\n    const newElevation = `mat-elevation-z${elevation}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX = this.xPosition, posY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n  _onAnimationStart(event) {\n    this._isAnimating = true;\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n  /**\n   * Sets up a stream that will keep track of any newly-added menu items and will update the list\n   * of direct descendants. We collect the descendants this way, because `_allItems` can include\n   * items that are part of child menus, and using a custom way of registering items is unreliable\n   * when it comes to maintaining the item order.\n   */\n  _updateDirectDescendants() {\n    this._allItems.changes.pipe(startWith(this._allItems)).subscribe(items => {\n      this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n      this._directDescendantItems.notifyOnChanges();\n    });\n  }\n}\n_MatMenuBase.decorators = [{\n  type: Directive\n}];\n_MatMenuBase.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_MENU_DEFAULT_OPTIONS]\n  }]\n}];\n_MatMenuBase.propDecorators = {\n  _allItems: [{\n    type: ContentChildren,\n    args: [MatMenuItem, {\n      descendants: true\n    }]\n  }],\n  backdropClass: [{\n    type: Input\n  }],\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  ariaDescribedby: [{\n    type: Input,\n    args: ['aria-describedby']\n  }],\n  xPosition: [{\n    type: Input\n  }],\n  yPosition: [{\n    type: Input\n  }],\n  templateRef: [{\n    type: ViewChild,\n    args: [TemplateRef]\n  }],\n  items: [{\n    type: ContentChildren,\n    args: [MatMenuItem, {\n      descendants: false\n    }]\n  }],\n  lazyContent: [{\n    type: ContentChild,\n    args: [MAT_MENU_CONTENT]\n  }],\n  overlapTrigger: [{\n    type: Input\n  }],\n  hasBackdrop: [{\n    type: Input\n  }],\n  panelClass: [{\n    type: Input,\n    args: ['class']\n  }],\n  classList: [{\n    type: Input\n  }],\n  closed: [{\n    type: Output\n  }],\n  close: [{\n    type: Output\n  }]\n};\n/** @docs-public MatMenu */\nclass MatMenu extends _MatMenuBase {\n  constructor(elementRef, ngZone, defaultOptions) {\n    super(elementRef, ngZone, defaultOptions);\n  }\n}\nMatMenu.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-menu',\n    template: \"<ng-template>\\n  <div\\n    class=\\\"mat-menu-panel\\\"\\n    [id]=\\\"panelId\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'matMenu',\n    host: {\n      '[attr.aria-label]': 'null',\n      '[attr.aria-labelledby]': 'null',\n      '[attr.aria-describedby]': 'null'\n    },\n    animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems],\n    providers: [{\n      provide: MAT_MENU_PANEL,\n      useExisting: MatMenu\n    }],\n    styles: [\"mat-menu{display:none}.mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px}.mat-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-menu-panel{outline:solid 1px}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item[disabled]{pointer-events:none}.cdk-high-contrast-active .mat-menu-item{margin-top:1px}.cdk-high-contrast-active .mat-menu-item.cdk-program-focused,.cdk-high-contrast-active .mat-menu-item.cdk-keyboard-focused,.cdk-high-contrast-active .mat-menu-item-highlighted{outline:dotted 1px}.mat-menu-item-submenu-trigger{padding-right:32px}.mat-menu-item-submenu-trigger::after{width:0;height:0;border-style:solid;border-width:5px 0 5px 5px;border-color:transparent transparent transparent currentColor;content:\\\"\\\";display:inline-block;position:absolute;top:50%;right:16px;transform:translateY(-50%)}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}[dir=rtl] .mat-menu-item-submenu-trigger::after{right:auto;left:16px;transform:rotateY(180deg) translateY(-50%)}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\\n\"]\n  }]\n}];\nMatMenu.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_MENU_DEFAULT_OPTIONS]\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that determines the scroll handling while the menu is open. */\nconst MAT_MENU_SCROLL_STRATEGY = new InjectionToken('mat-menu-scroll-strategy');\n/** @docs-private */\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY\n};\n/** Default top padding of the menu panel. */\nconst MENU_PANEL_TOP_PADDING = 8;\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true\n});\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n/** Directive applied to an element that should trigger a `mat-menu`. */\nclass MatMenuTrigger {\n  constructor(_overlay, _element, _viewContainerRef, scrollStrategy, parentMenu,\n  // `MatMenuTrigger` is commonly used in combination with a `MatMenuItem`.\n  // tslint:disable-next-line: lightweight-tokens\n  _menuItemInstance, _dir,\n  // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n  // @breaking-change 8.0.0\n  _focusMonitor) {\n    this._overlay = _overlay;\n    this._element = _element;\n    this._viewContainerRef = _viewContainerRef;\n    this._menuItemInstance = _menuItemInstance;\n    this._dir = _dir;\n    this._focusMonitor = _focusMonitor;\n    this._overlayRef = null;\n    this._menuOpen = false;\n    this._closingActionsSubscription = Subscription.EMPTY;\n    this._hoverSubscription = Subscription.EMPTY;\n    this._menuCloseSubscription = Subscription.EMPTY;\n    /**\n     * Handles touch start events on the trigger.\n     * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n     */\n    this._handleTouchStart = event => {\n      if (!isFakeTouchstartFromScreenReader(event)) {\n        this._openedBy = 'touch';\n      }\n    };\n    // Tracking input type is necessary so it's possible to only auto-focus\n    // the first item of the list when the menu is opened via the keyboard\n    this._openedBy = undefined;\n    /**\n     * Whether focus should be restored when the menu is closed.\n     * Note that disabling this option can have accessibility implications\n     * and it's up to you to manage focus, if you decide to turn it off.\n     */\n    this.restoreFocus = true;\n    /** Event emitted when the associated menu is opened. */\n    this.menuOpened = new EventEmitter();\n    /**\n     * Event emitted when the associated menu is opened.\n     * @deprecated Switch to `menuOpened` instead\n     * @breaking-change 8.0.0\n     */\n    // tslint:disable-next-line:no-output-on-prefix\n    this.onMenuOpen = this.menuOpened;\n    /** Event emitted when the associated menu is closed. */\n    this.menuClosed = new EventEmitter();\n    /**\n     * Event emitted when the associated menu is closed.\n     * @deprecated Switch to `menuClosed` instead\n     * @breaking-change 8.0.0\n     */\n    // tslint:disable-next-line:no-output-on-prefix\n    this.onMenuClose = this.menuClosed;\n    this._scrollStrategy = scrollStrategy;\n    this._parentMaterialMenu = parentMenu instanceof _MatMenuBase ? parentMenu : undefined;\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  get _deprecatedMatMenuTriggerFor() {\n    return this.menu;\n  }\n  set _deprecatedMatMenuTriggerFor(v) {\n    this.menu = v;\n  }\n  /** References the menu instance that the trigger is associated with. */\n  get menu() {\n    return this._menu;\n  }\n  set menu(menu) {\n    if (menu === this._menu) {\n      return;\n    }\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n    if (menu) {\n      if (menu === this._parentMaterialMenu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throwMatMenuRecursiveError();\n      }\n      this._menuCloseSubscription = menu.close.subscribe(reason => {\n        this._destroyMenu(reason);\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMaterialMenu) {\n          this._parentMaterialMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n    this._menuCloseSubscription.unsubscribe();\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n  /** Whether the menu is open. */\n  get menuOpen() {\n    return this._menuOpen;\n  }\n  /** The text direction of the containing app. */\n  get dir() {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu() {\n    return !!(this._menuItemInstance && this._parentMaterialMenu);\n  }\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu() {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n  /** Opens the menu. */\n  openMenu() {\n    if (this._menuOpen) {\n      return;\n    }\n    this._checkMenu();\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n    this._setPosition(overlayConfig.positionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n    if (this.menu instanceof _MatMenuBase) {\n      this.menu._startAnimation();\n    }\n  }\n  /** Closes the menu. */\n  closeMenu() {\n    this.menu.close.emit();\n  }\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin, options) {\n    if (this._focusMonitor && origin) {\n      this._focusMonitor.focusVia(this._element, origin, options);\n    } else {\n      this._element.nativeElement.focus(options);\n    }\n  }\n  /**\n   * Updates the position of the menu to ensure that it fits all options within the viewport.\n   */\n  updatePosition() {\n    var _a;\n    (_a = this._overlayRef) === null || _a === void 0 ? void 0 : _a.updatePosition();\n  }\n  /** Closes the menu and does the necessary cleanup. */\n  _destroyMenu(reason) {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n    const menu = this.menu;\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n    // Always restore focus if the user is navigating using the keyboard or the menu was opened\n    // programmatically. We don't restore for non-root triggers, because it can prevent focus\n    // from making it back to the root trigger when closing a long chain of menus by clicking\n    // on the backdrop.\n    if (this.restoreFocus && (reason === 'keydown' || !this._openedBy || !this.triggersSubmenu())) {\n      this.focus(this._openedBy);\n    }\n    this._openedBy = undefined;\n    if (menu instanceof _MatMenuBase) {\n      menu._resetAnimation();\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone.pipe(filter(event => event.toState === 'void'), take(1),\n        // Interrupt if the content got re-attached.\n        takeUntil(menu.lazyContent._attached)).subscribe({\n          next: () => menu.lazyContent.detach(),\n          // No matter whether the content got re-attached, reset the menu.\n          complete: () => this._setIsMenuOpen(false)\n        });\n      } else {\n        this._setIsMenuOpen(false);\n      }\n    } else {\n      this._setIsMenuOpen(false);\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  _initMenu() {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMaterialMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this.menu.focusFirstItem(this._openedBy || 'program');\n    this._setIsMenuOpen(true);\n  }\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  _setMenuElevation() {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n      this.menu.setElevation(depth);\n    }\n  }\n  // set state rather than toggle to support triggers sharing a menu\n  _setIsMenuOpen(isOpen) {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  _checkMenu() {\n    if (!this.menu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwMatMenuMissingError();\n    }\n  }\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  _createOverlay() {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy);\n      this._overlayRef = this._overlay.create(config);\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n    return this._overlayRef;\n  }\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  _getOverlayConfig() {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position().flexibleConnectedTo(this._element).withLockedPosition().withGrowAfterOpen().withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      panelClass: this.menu.overlayPanelClass,\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  _subscribeToPositions(position) {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n        this.menu.setPositionClasses(posX, posY);\n      });\n    }\n  }\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  _setPosition(positionStrategy) {\n    let [originX, originFallbackX] = this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n    let [overlayY, overlayFallbackY] = this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n    positionStrategy.withPositions([{\n      originX,\n      originY,\n      overlayX,\n      overlayY,\n      offsetY\n    }, {\n      originX: originFallbackX,\n      originY,\n      overlayX: overlayFallbackX,\n      overlayY,\n      offsetY\n    }, {\n      originX,\n      originY: originFallbackY,\n      overlayX,\n      overlayY: overlayFallbackY,\n      offsetY: -offsetY\n    }, {\n      originX: originFallbackX,\n      originY: originFallbackY,\n      overlayX: overlayFallbackX,\n      overlayY: overlayFallbackY,\n      offsetY: -offsetY\n    }]);\n  }\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  _menuClosingActions() {\n    const backdrop = this._overlayRef.backdropClick();\n    const detachments = this._overlayRef.detachments();\n    const parentClose = this._parentMaterialMenu ? this._parentMaterialMenu.closed : of();\n    const hover = this._parentMaterialMenu ? this._parentMaterialMenu._hovered().pipe(filter(active => active !== this._menuItemInstance), filter(() => this._menuOpen)) : of();\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event) {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : undefined;\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event) {\n    const keyCode = event.keyCode;\n    // Pressing enter on the trigger will trigger the click handler later.\n    if (keyCode === ENTER || keyCode === SPACE) {\n      this._openedBy = 'keyboard';\n    }\n    if (this.triggersSubmenu() && (keyCode === RIGHT_ARROW && this.dir === 'ltr' || keyCode === LEFT_ARROW && this.dir === 'rtl')) {\n      this._openedBy = 'keyboard';\n      this.openMenu();\n    }\n  }\n  /** Handles click events on the trigger. */\n  _handleClick(event) {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n  /** Handles the cases where the user hovers over the trigger. */\n  _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu() || !this._parentMaterialMenu) {\n      return;\n    }\n    this._hoverSubscription = this._parentMaterialMenu._hovered()\n    // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n    // with different data and triggers), we have to delay it by a tick to ensure that\n    // it won't be closed immediately after it is opened.\n    .pipe(filter(active => active === this._menuItemInstance && !active.disabled), delay(0, asapScheduler)).subscribe(() => {\n      this._openedBy = 'mouse';\n      // If the same menu is used between multiple triggers, it might still be animating\n      // while the new trigger tries to re-open it. Wait for the animation to finish\n      // before doing so. Also interrupt if the user moves to another item.\n      if (this.menu instanceof _MatMenuBase && this.menu._isAnimating) {\n        // We need the `delay(0)` here in order to avoid\n        // 'changed after checked' errors in some cases. See #12194.\n        this.menu._animationDone.pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMaterialMenu._hovered())).subscribe(() => this.openMenu());\n      } else {\n        this.openMenu();\n      }\n    });\n  }\n  /** Gets the portal that should be attached to the overlay. */\n  _getPortal() {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n    return this._portal;\n  }\n}\nMatMenuTrigger.decorators = [{\n  type: Directive,\n  args: [{\n    selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n    host: {\n      'class': 'mat-menu-trigger',\n      'aria-haspopup': 'true',\n      '[attr.aria-expanded]': 'menuOpen || null',\n      '[attr.aria-controls]': 'menuOpen ? menu.panelId : null',\n      '(mousedown)': '_handleMousedown($event)',\n      '(keydown)': '_handleKeydown($event)',\n      '(click)': '_handleClick($event)'\n    },\n    exportAs: 'matMenuTrigger'\n  }]\n}];\nMatMenuTrigger.ctorParameters = () => [{\n  type: Overlay\n}, {\n  type: ElementRef\n}, {\n  type: ViewContainerRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_MENU_SCROLL_STRATEGY]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_MENU_PANEL]\n  }, {\n    type: Optional\n  }]\n}, {\n  type: MatMenuItem,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Self\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: FocusMonitor\n}];\nMatMenuTrigger.propDecorators = {\n  _deprecatedMatMenuTriggerFor: [{\n    type: Input,\n    args: ['mat-menu-trigger-for']\n  }],\n  menu: [{\n    type: Input,\n    args: ['matMenuTriggerFor']\n  }],\n  menuData: [{\n    type: Input,\n    args: ['matMenuTriggerData']\n  }],\n  restoreFocus: [{\n    type: Input,\n    args: ['matMenuTriggerRestoreFocus']\n  }],\n  menuOpened: [{\n    type: Output\n  }],\n  onMenuOpen: [{\n    type: Output\n  }],\n  menuClosed: [{\n    type: Output\n  }],\n  onMenuClose: [{\n    type: Output\n  }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used by both the current `MatMenuModule` and the MDC `MatMenuModule`\n * to declare the menu-related directives.\n */\nclass _MatMenuDirectivesModule {}\n_MatMenuDirectivesModule.decorators = [{\n  type: NgModule,\n  args: [{\n    exports: [MatMenuTrigger, MatMenuContent, MatCommonModule],\n    declarations: [MatMenuTrigger, MatMenuContent],\n    providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n  }]\n}];\nclass MatMenuModule {}\nMatMenuModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule, MatCommonModule, MatRippleModule, OverlayModule, _MatMenuDirectivesModule],\n    exports: [CdkScrollableModule, MatCommonModule, MatMenu, MatMenuItem, _MatMenuDirectivesModule],\n    declarations: [MatMenu, MatMenuItem],\n    providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_MENU_CONTENT, MAT_MENU_DEFAULT_OPTIONS, MAT_MENU_PANEL, MAT_MENU_SCROLL_STRATEGY, MatMenu, MatMenuContent, MatMenuItem, MatMenuModule, MatMenuTrigger, _MatMenuBase, _MatMenuDirectivesModule, fadeInItems, matMenuAnimations, transformMenu, MAT_MENU_DEFAULT_OPTIONS_FACTORY as ɵangular_material_src_material_menu_menu_a, MAT_MENU_SCROLL_STRATEGY_FACTORY as ɵangular_material_src_material_menu_menu_b, MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER as ɵangular_material_src_material_menu_menu_c };","map":{"version":3,"names":["FocusMonitor","FocusKeyManager","isFakeTouchstartFromScreenReader","isFakeMousedownFromScreenReader","coerceBooleanProperty","UP_ARROW","DOWN_ARROW","RIGHT_ARROW","LEFT_ARROW","ESCAPE","hasModifierKey","ENTER","SPACE","InjectionToken","Directive","TemplateRef","ComponentFactoryResolver","ApplicationRef","Injector","ViewContainerRef","Inject","ChangeDetectorRef","Component","ChangeDetectionStrategy","ViewEncapsulation","ElementRef","Optional","Input","HostListener","QueryList","EventEmitter","NgZone","ContentChildren","ViewChild","ContentChild","Output","Self","NgModule","Subject","Subscription","merge","of","asapScheduler","startWith","switchMap","take","filter","takeUntil","delay","trigger","state","style","transition","animate","TemplatePortal","DomPortalOutlet","DOCUMENT","CommonModule","mixinDisableRipple","mixinDisabled","MatCommonModule","MatRippleModule","Directionality","Overlay","OverlayConfig","OverlayModule","normalizePassiveListenerOptions","CdkScrollableModule","matMenuAnimations","transformMenu","opacity","transform","fadeInItems","MAT_MENU_CONTENT","MatMenuContent","constructor","_template","_componentFactoryResolver","_appRef","_injector","_viewContainerRef","_document","_changeDetectorRef","_attached","attach","context","_portal","detach","_outlet","createElement","element","elementRef","nativeElement","parentNode","insertBefore","outletElement","markForCheck","next","isAttached","ngOnDestroy","dispose","decorators","type","args","selector","providers","provide","useExisting","ctorParameters","undefined","throwMatMenuMissingError","Error","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","throwMatMenuRecursiveError","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_elementRef","_focusMonitor","_parentMenu","role","_hovered","_focused","_highlighted","_triggersSubmenu","addItem","focus","origin","options","focusVia","_getHostElement","ngAfterViewInit","monitor","stopMonitoring","removeItem","complete","_getTabIndex","disabled","_checkDisabled","event","preventDefault","stopPropagation","_handleMouseEnter","getLabel","_a","_b","clone","cloneNode","icons","querySelectorAll","i","length","icon","removeChild","textContent","trim","exportAs","inputs","host","changeDetection","OnPush","encapsulation","None","template","propDecorators","MAT_MENU_DEFAULT_OPTIONS","providedIn","factory","MAT_MENU_DEFAULT_OPTIONS_FACTORY","overlapTrigger","xPosition","yPosition","backdropClass","MAT_MENU_BASE_ELEVATION","menuPanelUid","_MatMenuBase","_ngZone","_defaultOptions","_xPosition","_yPosition","_directDescendantItems","_tabSubscription","EMPTY","_classList","_panelAnimationState","_animationDone","overlayPanelClass","_overlapTrigger","_hasBackdrop","hasBackdrop","closed","close","panelId","value","ngDevMode","setPositionClasses","panelClass","classes","previousPanelClass","_previousPanelClass","split","forEach","className","classList","ngOnInit","ngAfterContentInit","_updateDirectDescendants","_keyManager","withWrap","withTypeAhead","withHomeAndEnd","tabOut","subscribe","emit","changes","pipe","items","map","item","focusedItem","updateActiveItem","destroy","unsubscribe","itemChanges","_item","_handleKeydown","keyCode","manager","parentMenu","direction","setFocusOrigin","onKeydown","focusFirstItem","lazyContent","onStable","_focusFirstItem","setFirstItemActive","activeItem","first","parentElement","getAttribute","resetActiveItem","setActiveItem","setElevation","depth","elevation","Math","min","newElevation","customElevation","Object","keys","find","c","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","_onAnimationStart","toState","activeItemIndex","scrollTop","_allItems","reset","notifyOnChanges","descendants","ariaLabel","ariaLabelledby","ariaDescribedby","templateRef","MatMenu","ngZone","defaultOptions","animations","styles","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","MENU_PANEL_TOP_PADDING","passiveEventListenerOptions","passive","MatMenuTrigger","_overlay","_element","scrollStrategy","_menuItemInstance","_dir","_overlayRef","_menuOpen","_closingActionsSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_scrollStrategy","_parentMaterialMenu","addEventListener","triggersSubmenu","_deprecatedMatMenuTriggerFor","menu","v","_menu","reason","_destroyMenu","_checkMenu","_handleHover","removeEventListener","menuOpen","dir","toggleMenu","closeMenu","openMenu","overlayRef","_createOverlay","overlayConfig","getConfig","_setPosition","positionStrategy","_getPortal","menuData","_menuClosingActions","_initMenu","updatePosition","_setIsMenuOpen","_setMenuElevation","isOpen","config","_getOverlayConfig","_subscribeToPositions","create","keydownEvents","position","flexibleConnectedTo","withLockedPosition","withGrowAfterOpen","withTransformOriginOn","positionChanges","change","connectionPair","overlayX","overlayY","originX","originFallbackX","overlayFallbackY","originY","originFallbackY","overlayFallbackX","offsetY","withPositions","backdrop","backdropClick","detachments","parentClose","hover","active","_handleMousedown","button","_handleClick","_MatMenuDirectivesModule","exports","declarations","MatMenuModule","imports","ɵangular_material_src_material_menu_menu_a","ɵangular_material_src_material_menu_menu_b","ɵangular_material_src_material_menu_menu_c"],"sources":["D:/alodelivery test/node_modules/@angular/material/fesm2015/menu.js"],"sourcesContent":["import { FocusMonitor, FocusKeyManager, isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UP_ARROW, DOWN_ARROW, RIGHT_ARROW, LEFT_ARROW, ESCAPE, hasModifierKey, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { InjectionToken, Directive, TemplateRef, ComponentFactoryResolver, ApplicationRef, Injector, ViewContainerRef, Inject, ChangeDetectorRef, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Optional, Input, HostListener, QueryList, EventEmitter, NgZone, ContentChildren, ViewChild, ContentChild, Output, Self, NgModule } from '@angular/core';\nimport { Subject, Subscription, merge, of, asapScheduler } from 'rxjs';\nimport { startWith, switchMap, take, filter, takeUntil, delay } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { mixinDisableRipple, mixinDisabled, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nconst matMenuAnimations = {\n    /**\n     * This animation controls the menu panel's entry and exit from the page.\n     *\n     * When the menu panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the menu panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n    transformMenu: trigger('transformMenu', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(0.8)'\n        })),\n        transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1)'\n        }))),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n    ]),\n    /**\n     * This animation fades in the background color and content of the menu panel\n     * after its containing element is scaled in.\n     */\n    fadeInItems: trigger('fadeInItems', [\n        // TODO(crisbeto): this is inside the `transformMenu`\n        // now. Remove next time we do breaking changes.\n        state('showing', style({ opacity: 1 })),\n        transition('void => *', [\n            style({ opacity: 0 }),\n            animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst transformMenu = matMenuAnimations.transformMenu;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `MatMenuContent`. It serves\n * as alternative token to the actual `MatMenuContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_MENU_CONTENT = new InjectionToken('MatMenuContent');\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\nclass MatMenuContent {\n    constructor(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document, _changeDetectorRef) {\n        this._template = _template;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._injector = _injector;\n        this._viewContainerRef = _viewContainerRef;\n        this._document = _document;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Emits when the menu content has been attached. */\n        this._attached = new Subject();\n    }\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context = {}) {\n        if (!this._portal) {\n            this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n        this.detach();\n        if (!this._outlet) {\n            this._outlet = new DomPortalOutlet(this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);\n        }\n        const element = this._template.elementRef.nativeElement;\n        // Because we support opening the same menu from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        element.parentNode.insertBefore(this._outlet.outletElement, element);\n        // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n        // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n        // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n        // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n        // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n        // @breaking-change 9.0.0 Make change detector ref required\n        if (this._changeDetectorRef) {\n            this._changeDetectorRef.markForCheck();\n        }\n        this._portal.attach(this._outlet, context);\n        this._attached.next();\n    }\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach() {\n        if (this._portal.isAttached) {\n            this._portal.detach();\n        }\n    }\n    ngOnDestroy() {\n        if (this._outlet) {\n            this._outlet.dispose();\n        }\n    }\n}\nMatMenuContent.decorators = [\n    { type: Directive, args: [{\n                selector: 'ng-template[matMenuContent]',\n                providers: [{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }],\n            },] }\n];\nMatMenuContent.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: ComponentFactoryResolver },\n    { type: ApplicationRef },\n    { type: Injector },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: ChangeDetectorRef }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nfunction throwMatMenuMissingError() {\n    throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionX() {\n    throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionY() {\n    throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when a menu is assigned\n * to a trigger that is placed inside the same menu.\n * @docs-private\n */\nfunction throwMatMenuRecursiveError() {\n    throw Error(`matMenuTriggerFor: menu cannot contain its own trigger. Assign a menu that is ` +\n        `not a parent of the trigger or move the trigger outside of the menu.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nconst MAT_MENU_PANEL = new InjectionToken('MAT_MENU_PANEL');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nclass MatMenuItemBase {\n}\nconst _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n/**\n * Single item inside of a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\nclass MatMenuItem extends _MatMenuItemMixinBase {\n    constructor(_elementRef, \n    /**\n     * @deprecated `_document` parameter is no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _focusMonitor, _parentMenu) {\n        // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n        super();\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._parentMenu = _parentMenu;\n        /** ARIA role for the menu item. */\n        this.role = 'menuitem';\n        /** Stream that emits when the menu item is hovered. */\n        this._hovered = new Subject();\n        /** Stream that emits when the menu item is focused. */\n        this._focused = new Subject();\n        /** Whether the menu item is highlighted. */\n        this._highlighted = false;\n        /** Whether the menu item acts as a trigger for a sub-menu. */\n        this._triggersSubmenu = false;\n        if (_parentMenu && _parentMenu.addItem) {\n            _parentMenu.addItem(this);\n        }\n    }\n    /** Focuses the menu item. */\n    focus(origin, options) {\n        if (this._focusMonitor && origin) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n        }\n        else {\n            this._getHostElement().focus(options);\n        }\n        this._focused.next(this);\n    }\n    ngAfterViewInit() {\n        if (this._focusMonitor) {\n            // Start monitoring the element so it gets the appropriate focused classes. We want\n            // to show the focus style for menu items only when the focus was not caused by a\n            // mouse or touch interaction.\n            this._focusMonitor.monitor(this._elementRef, false);\n        }\n    }\n    ngOnDestroy() {\n        if (this._focusMonitor) {\n            this._focusMonitor.stopMonitoring(this._elementRef);\n        }\n        if (this._parentMenu && this._parentMenu.removeItem) {\n            this._parentMenu.removeItem(this);\n        }\n        this._hovered.complete();\n        this._focused.complete();\n    }\n    /** Used to set the `tabindex`. */\n    _getTabIndex() {\n        return this.disabled ? '-1' : '0';\n    }\n    /** Returns the host DOM element. */\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n    /** Prevents the default element actions if it is disabled. */\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _checkDisabled(event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n    /** Emits to the hover stream. */\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _handleMouseEnter() {\n        this._hovered.next(this);\n    }\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel() {\n        var _a, _b;\n        const clone = this._elementRef.nativeElement.cloneNode(true);\n        const icons = clone.querySelectorAll('mat-icon, .material-icons');\n        // Strip away icons so they don't show up in the text.\n        for (let i = 0; i < icons.length; i++) {\n            const icon = icons[i];\n            (_a = icon.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(icon);\n        }\n        return ((_b = clone.textContent) === null || _b === void 0 ? void 0 : _b.trim()) || '';\n    }\n}\nMatMenuItem.decorators = [\n    { type: Component, args: [{\n                selector: '[mat-menu-item]',\n                exportAs: 'matMenuItem',\n                inputs: ['disabled', 'disableRipple'],\n                host: {\n                    '[attr.role]': 'role',\n                    '[class.mat-menu-item]': 'true',\n                    '[class.mat-menu-item-highlighted]': '_highlighted',\n                    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n                    '[attr.tabindex]': '_getTabIndex()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.disabled]': 'disabled || null',\n                    'class': 'mat-focus-indicator',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                template: \"<ng-content></ng-content>\\n<div class=\\\"mat-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n\"\n            },] }\n];\nMatMenuItem.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: FocusMonitor },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_PANEL,] }, { type: Optional }] }\n];\nMatMenuItem.propDecorators = {\n    role: [{ type: Input }],\n    _checkDisabled: [{ type: HostListener, args: ['click', ['$event'],] }],\n    _handleMouseEnter: [{ type: HostListener, args: ['mouseenter',] }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-menu`. */\nconst MAT_MENU_DEFAULT_OPTIONS = new InjectionToken('mat-menu-default-options', {\n    providedIn: 'root',\n    factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        overlapTrigger: false,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop',\n    };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\nlet menuPanelUid = 0;\n/** Base class with all of the `MatMenu` functionality. */\nclass _MatMenuBase {\n    constructor(_elementRef, _ngZone, _defaultOptions) {\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._defaultOptions = _defaultOptions;\n        this._xPosition = this._defaultOptions.xPosition;\n        this._yPosition = this._defaultOptions.yPosition;\n        /** Only the direct descendant menu items. */\n        this._directDescendantItems = new QueryList();\n        /** Subscription to tab events on the menu panel */\n        this._tabSubscription = Subscription.EMPTY;\n        /** Config object to be passed into the menu's ngClass */\n        this._classList = {};\n        /** Current state of the panel animation. */\n        this._panelAnimationState = 'void';\n        /** Emits whenever an animation on the menu completes. */\n        this._animationDone = new Subject();\n        /** Class or list of classes to be added to the overlay panel. */\n        this.overlayPanelClass = this._defaultOptions.overlayPanelClass || '';\n        /** Class to be added to the backdrop element. */\n        this.backdropClass = this._defaultOptions.backdropClass;\n        this._overlapTrigger = this._defaultOptions.overlapTrigger;\n        this._hasBackdrop = this._defaultOptions.hasBackdrop;\n        /** Event emitted when the menu is closed. */\n        this.closed = new EventEmitter();\n        /**\n         * Event emitted when the menu is closed.\n         * @deprecated Switch to `closed` instead\n         * @breaking-change 8.0.0\n         */\n        this.close = this.closed;\n        this.panelId = `mat-menu-panel-${menuPanelUid++}`;\n    }\n    /** Position of the menu in the X axis. */\n    get xPosition() { return this._xPosition; }\n    set xPosition(value) {\n        if (value !== 'before' && value !== 'after' &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionX();\n        }\n        this._xPosition = value;\n        this.setPositionClasses();\n    }\n    /** Position of the menu in the Y axis. */\n    get yPosition() { return this._yPosition; }\n    set yPosition(value) {\n        if (value !== 'above' && value !== 'below' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionY();\n        }\n        this._yPosition = value;\n        this.setPositionClasses();\n    }\n    /** Whether the menu should overlap its trigger. */\n    get overlapTrigger() { return this._overlapTrigger; }\n    set overlapTrigger(value) {\n        this._overlapTrigger = coerceBooleanProperty(value);\n    }\n    /** Whether the menu has a backdrop. */\n    get hasBackdrop() { return this._hasBackdrop; }\n    set hasBackdrop(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @param classes list of class names\n     */\n    set panelClass(classes) {\n        const previousPanelClass = this._previousPanelClass;\n        if (previousPanelClass && previousPanelClass.length) {\n            previousPanelClass.split(' ').forEach((className) => {\n                this._classList[className] = false;\n            });\n        }\n        this._previousPanelClass = classes;\n        if (classes && classes.length) {\n            classes.split(' ').forEach((className) => {\n                this._classList[className] = true;\n            });\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @deprecated Use `panelClass` instead.\n     * @breaking-change 8.0.0\n     */\n    get classList() { return this.panelClass; }\n    set classList(classes) { this.panelClass = classes; }\n    ngOnInit() {\n        this.setPositionClasses();\n    }\n    ngAfterContentInit() {\n        this._updateDirectDescendants();\n        this._keyManager = new FocusKeyManager(this._directDescendantItems)\n            .withWrap()\n            .withTypeAhead()\n            .withHomeAndEnd();\n        this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n        // If a user manually (programmatically) focuses a menu item, we need to reflect that focus\n        // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n        // is internal and we know that it gets completed on destroy.\n        this._directDescendantItems.changes.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._focused)))).subscribe(focusedItem => this._keyManager.updateActiveItem(focusedItem));\n    }\n    ngOnDestroy() {\n        this._directDescendantItems.destroy();\n        this._tabSubscription.unsubscribe();\n        this.closed.complete();\n    }\n    /** Stream that emits whenever the hovered menu item changes. */\n    _hovered() {\n        // Coerce the `changes` property because Angular types it as `Observable<any>`\n        const itemChanges = this._directDescendantItems.changes;\n        return itemChanges.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._hovered))));\n    }\n    /*\n     * Registers a menu item with the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    addItem(_item) { }\n    /**\n     * Removes an item from the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    removeItem(_item) { }\n    /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        const manager = this._keyManager;\n        switch (keyCode) {\n            case ESCAPE:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this.closed.emit('keydown');\n                }\n                break;\n            case LEFT_ARROW:\n                if (this.parentMenu && this.direction === 'ltr') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case RIGHT_ARROW:\n                if (this.parentMenu && this.direction === 'rtl') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            default:\n                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n                    manager.setFocusOrigin('keyboard');\n                }\n                manager.onKeydown(event);\n        }\n    }\n    /**\n     * Focus the first item in the menu.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n    focusFirstItem(origin = 'program') {\n        // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n        if (this.lazyContent) {\n            this._ngZone.onStable\n                .pipe(take(1))\n                .subscribe(() => this._focusFirstItem(origin));\n        }\n        else {\n            this._focusFirstItem(origin);\n        }\n    }\n    /**\n     * Actual implementation that focuses the first item. Needs to be separated\n     * out so we don't repeat the same logic in the public `focusFirstItem` method.\n     */\n    _focusFirstItem(origin) {\n        const manager = this._keyManager;\n        manager.setFocusOrigin(origin).setFirstItemActive();\n        // If there's no active item at this point, it means that all the items are disabled.\n        // Move focus to the menu panel so keyboard events like Escape still work. Also this will\n        // give _some_ feedback to screen readers.\n        if (!manager.activeItem && this._directDescendantItems.length) {\n            let element = this._directDescendantItems.first._getHostElement().parentElement;\n            // Because the `mat-menu` is at the DOM insertion point, not inside the overlay, we don't\n            // have a nice way of getting a hold of the menu panel. We can't use a `ViewChild` either\n            // because the panel is inside an `ng-template`. We work around it by starting from one of\n            // the items and walking up the DOM.\n            while (element) {\n                if (element.getAttribute('role') === 'menu') {\n                    element.focus();\n                    break;\n                }\n                else {\n                    element = element.parentElement;\n                }\n            }\n        }\n    }\n    /**\n     * Resets the active item in the menu. This is used when the menu is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    resetActiveItem() {\n        this._keyManager.setActiveItem(-1);\n    }\n    /**\n     * Sets the menu panel elevation.\n     * @param depth Number of parent menus that come before the menu.\n     */\n    setElevation(depth) {\n        // The elevation starts at the base and increases by one for each level.\n        // Capped at 24 because that's the maximum elevation defined in the Material design spec.\n        const elevation = Math.min(MAT_MENU_BASE_ELEVATION + depth, 24);\n        const newElevation = `mat-elevation-z${elevation}`;\n        const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n        if (!customElevation || customElevation === this._previousElevation) {\n            if (this._previousElevation) {\n                this._classList[this._previousElevation] = false;\n            }\n            this._classList[newElevation] = true;\n            this._previousElevation = newElevation;\n        }\n    }\n    /**\n     * Adds classes to the menu panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the menu along the x axis.\n     * @param posY Position of the menu along the y axis.\n     * @docs-private\n     */\n    setPositionClasses(posX = this.xPosition, posY = this.yPosition) {\n        const classes = this._classList;\n        classes['mat-menu-before'] = posX === 'before';\n        classes['mat-menu-after'] = posX === 'after';\n        classes['mat-menu-above'] = posY === 'above';\n        classes['mat-menu-below'] = posY === 'below';\n    }\n    /** Starts the enter animation. */\n    _startAnimation() {\n        // @breaking-change 8.0.0 Combine with _resetAnimation.\n        this._panelAnimationState = 'enter';\n    }\n    /** Resets the panel animation to its initial state. */\n    _resetAnimation() {\n        // @breaking-change 8.0.0 Combine with _startAnimation.\n        this._panelAnimationState = 'void';\n    }\n    /** Callback that is invoked when the panel animation completes. */\n    _onAnimationDone(event) {\n        this._animationDone.next(event);\n        this._isAnimating = false;\n    }\n    _onAnimationStart(event) {\n        this._isAnimating = true;\n        // Scroll the content element to the top as soon as the animation starts. This is necessary,\n        // because we move focus to the first item while it's still being animated, which can throw\n        // the browser off when it determines the scroll position. Alternatively we can move focus\n        // when the animation is done, however moving focus asynchronously will interrupt screen\n        // readers which are in the process of reading out the menu already. We take the `element`\n        // from the `event` since we can't use a `ViewChild` to access the pane.\n        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n            event.element.scrollTop = 0;\n        }\n    }\n    /**\n     * Sets up a stream that will keep track of any newly-added menu items and will update the list\n     * of direct descendants. We collect the descendants this way, because `_allItems` can include\n     * items that are part of child menus, and using a custom way of registering items is unreliable\n     * when it comes to maintaining the item order.\n     */\n    _updateDirectDescendants() {\n        this._allItems.changes\n            .pipe(startWith(this._allItems))\n            .subscribe((items) => {\n            this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n            this._directDescendantItems.notifyOnChanges();\n        });\n    }\n}\n_MatMenuBase.decorators = [\n    { type: Directive }\n];\n_MatMenuBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_DEFAULT_OPTIONS,] }] }\n];\n_MatMenuBase.propDecorators = {\n    _allItems: [{ type: ContentChildren, args: [MatMenuItem, { descendants: true },] }],\n    backdropClass: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    ariaDescribedby: [{ type: Input, args: ['aria-describedby',] }],\n    xPosition: [{ type: Input }],\n    yPosition: [{ type: Input }],\n    templateRef: [{ type: ViewChild, args: [TemplateRef,] }],\n    items: [{ type: ContentChildren, args: [MatMenuItem, { descendants: false },] }],\n    lazyContent: [{ type: ContentChild, args: [MAT_MENU_CONTENT,] }],\n    overlapTrigger: [{ type: Input }],\n    hasBackdrop: [{ type: Input }],\n    panelClass: [{ type: Input, args: ['class',] }],\n    classList: [{ type: Input }],\n    closed: [{ type: Output }],\n    close: [{ type: Output }]\n};\n/** @docs-public MatMenu */\nclass MatMenu extends _MatMenuBase {\n    constructor(elementRef, ngZone, defaultOptions) {\n        super(elementRef, ngZone, defaultOptions);\n    }\n}\nMatMenu.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-menu',\n                template: \"<ng-template>\\n  <div\\n    class=\\\"mat-menu-panel\\\"\\n    [id]=\\\"panelId\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matMenu',\n                host: {\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[attr.aria-describedby]': 'null',\n                },\n                animations: [\n                    matMenuAnimations.transformMenu,\n                    matMenuAnimations.fadeInItems\n                ],\n                providers: [\n                    { provide: MAT_MENU_PANEL, useExisting: MatMenu },\n                ],\n                styles: [\"mat-menu{display:none}.mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px}.mat-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-menu-panel{outline:solid 1px}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item[disabled]{pointer-events:none}.cdk-high-contrast-active .mat-menu-item{margin-top:1px}.cdk-high-contrast-active .mat-menu-item.cdk-program-focused,.cdk-high-contrast-active .mat-menu-item.cdk-keyboard-focused,.cdk-high-contrast-active .mat-menu-item-highlighted{outline:dotted 1px}.mat-menu-item-submenu-trigger{padding-right:32px}.mat-menu-item-submenu-trigger::after{width:0;height:0;border-style:solid;border-width:5px 0 5px 5px;border-color:transparent transparent transparent currentColor;content:\\\"\\\";display:inline-block;position:absolute;top:50%;right:16px;transform:translateY(-50%)}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}[dir=rtl] .mat-menu-item-submenu-trigger::after{right:auto;left:16px;transform:rotateY(180deg) translateY(-50%)}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\\n\"]\n            },] }\n];\nMatMenu.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_DEFAULT_OPTIONS,] }] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that determines the scroll handling while the menu is open. */\nconst MAT_MENU_SCROLL_STRATEGY = new InjectionToken('mat-menu-scroll-strategy');\n/** @docs-private */\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_MENU_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n/** Default top padding of the menu panel. */\nconst MENU_PANEL_TOP_PADDING = 8;\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n/** Directive applied to an element that should trigger a `mat-menu`. */\nclass MatMenuTrigger {\n    constructor(_overlay, _element, _viewContainerRef, scrollStrategy, parentMenu, \n    // `MatMenuTrigger` is commonly used in combination with a `MatMenuItem`.\n    // tslint:disable-next-line: lightweight-tokens\n    _menuItemInstance, _dir, \n    // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n    // @breaking-change 8.0.0\n    _focusMonitor) {\n        this._overlay = _overlay;\n        this._element = _element;\n        this._viewContainerRef = _viewContainerRef;\n        this._menuItemInstance = _menuItemInstance;\n        this._dir = _dir;\n        this._focusMonitor = _focusMonitor;\n        this._overlayRef = null;\n        this._menuOpen = false;\n        this._closingActionsSubscription = Subscription.EMPTY;\n        this._hoverSubscription = Subscription.EMPTY;\n        this._menuCloseSubscription = Subscription.EMPTY;\n        /**\n         * Handles touch start events on the trigger.\n         * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n         */\n        this._handleTouchStart = (event) => {\n            if (!isFakeTouchstartFromScreenReader(event)) {\n                this._openedBy = 'touch';\n            }\n        };\n        // Tracking input type is necessary so it's possible to only auto-focus\n        // the first item of the list when the menu is opened via the keyboard\n        this._openedBy = undefined;\n        /**\n         * Whether focus should be restored when the menu is closed.\n         * Note that disabling this option can have accessibility implications\n         * and it's up to you to manage focus, if you decide to turn it off.\n         */\n        this.restoreFocus = true;\n        /** Event emitted when the associated menu is opened. */\n        this.menuOpened = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is opened.\n         * @deprecated Switch to `menuOpened` instead\n         * @breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuOpen = this.menuOpened;\n        /** Event emitted when the associated menu is closed. */\n        this.menuClosed = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is closed.\n         * @deprecated Switch to `menuClosed` instead\n         * @breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuClose = this.menuClosed;\n        this._scrollStrategy = scrollStrategy;\n        this._parentMaterialMenu = parentMenu instanceof _MatMenuBase ? parentMenu : undefined;\n        _element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n        if (_menuItemInstance) {\n            _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n        }\n    }\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0\n     */\n    get _deprecatedMatMenuTriggerFor() { return this.menu; }\n    set _deprecatedMatMenuTriggerFor(v) {\n        this.menu = v;\n    }\n    /** References the menu instance that the trigger is associated with. */\n    get menu() { return this._menu; }\n    set menu(menu) {\n        if (menu === this._menu) {\n            return;\n        }\n        this._menu = menu;\n        this._menuCloseSubscription.unsubscribe();\n        if (menu) {\n            if (menu === this._parentMaterialMenu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwMatMenuRecursiveError();\n            }\n            this._menuCloseSubscription = menu.close.subscribe((reason) => {\n                this._destroyMenu(reason);\n                // If a click closed the menu, we should close the entire chain of nested menus.\n                if ((reason === 'click' || reason === 'tab') && this._parentMaterialMenu) {\n                    this._parentMaterialMenu.closed.emit(reason);\n                }\n            });\n        }\n    }\n    ngAfterContentInit() {\n        this._checkMenu();\n        this._handleHover();\n    }\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n        this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n        this._menuCloseSubscription.unsubscribe();\n        this._closingActionsSubscription.unsubscribe();\n        this._hoverSubscription.unsubscribe();\n    }\n    /** Whether the menu is open. */\n    get menuOpen() {\n        return this._menuOpen;\n    }\n    /** The text direction of the containing app. */\n    get dir() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /** Whether the menu triggers a sub-menu or a top-level one. */\n    triggersSubmenu() {\n        return !!(this._menuItemInstance && this._parentMaterialMenu);\n    }\n    /** Toggles the menu between the open and closed states. */\n    toggleMenu() {\n        return this._menuOpen ? this.closeMenu() : this.openMenu();\n    }\n    /** Opens the menu. */\n    openMenu() {\n        if (this._menuOpen) {\n            return;\n        }\n        this._checkMenu();\n        const overlayRef = this._createOverlay();\n        const overlayConfig = overlayRef.getConfig();\n        this._setPosition(overlayConfig.positionStrategy);\n        overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n            this.menu.hasBackdrop;\n        overlayRef.attach(this._getPortal());\n        if (this.menu.lazyContent) {\n            this.menu.lazyContent.attach(this.menuData);\n        }\n        this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n        this._initMenu();\n        if (this.menu instanceof _MatMenuBase) {\n            this.menu._startAnimation();\n        }\n    }\n    /** Closes the menu. */\n    closeMenu() {\n        this.menu.close.emit();\n    }\n    /**\n     * Focuses the menu trigger.\n     * @param origin Source of the menu trigger's focus.\n     */\n    focus(origin, options) {\n        if (this._focusMonitor && origin) {\n            this._focusMonitor.focusVia(this._element, origin, options);\n        }\n        else {\n            this._element.nativeElement.focus(options);\n        }\n    }\n    /**\n     * Updates the position of the menu to ensure that it fits all options within the viewport.\n     */\n    updatePosition() {\n        var _a;\n        (_a = this._overlayRef) === null || _a === void 0 ? void 0 : _a.updatePosition();\n    }\n    /** Closes the menu and does the necessary cleanup. */\n    _destroyMenu(reason) {\n        if (!this._overlayRef || !this.menuOpen) {\n            return;\n        }\n        const menu = this.menu;\n        this._closingActionsSubscription.unsubscribe();\n        this._overlayRef.detach();\n        // Always restore focus if the user is navigating using the keyboard or the menu was opened\n        // programmatically. We don't restore for non-root triggers, because it can prevent focus\n        // from making it back to the root trigger when closing a long chain of menus by clicking\n        // on the backdrop.\n        if (this.restoreFocus && (reason === 'keydown' || !this._openedBy || !this.triggersSubmenu())) {\n            this.focus(this._openedBy);\n        }\n        this._openedBy = undefined;\n        if (menu instanceof _MatMenuBase) {\n            menu._resetAnimation();\n            if (menu.lazyContent) {\n                // Wait for the exit animation to finish before detaching the content.\n                menu._animationDone\n                    .pipe(filter(event => event.toState === 'void'), take(1), \n                // Interrupt if the content got re-attached.\n                takeUntil(menu.lazyContent._attached))\n                    .subscribe({\n                    next: () => menu.lazyContent.detach(),\n                    // No matter whether the content got re-attached, reset the menu.\n                    complete: () => this._setIsMenuOpen(false)\n                });\n            }\n            else {\n                this._setIsMenuOpen(false);\n            }\n        }\n        else {\n            this._setIsMenuOpen(false);\n            if (menu.lazyContent) {\n                menu.lazyContent.detach();\n            }\n        }\n    }\n    /**\n     * This method sets the menu state to open and focuses the first item if\n     * the menu was opened via the keyboard.\n     */\n    _initMenu() {\n        this.menu.parentMenu = this.triggersSubmenu() ? this._parentMaterialMenu : undefined;\n        this.menu.direction = this.dir;\n        this._setMenuElevation();\n        this.menu.focusFirstItem(this._openedBy || 'program');\n        this._setIsMenuOpen(true);\n    }\n    /** Updates the menu elevation based on the amount of parent menus that it has. */\n    _setMenuElevation() {\n        if (this.menu.setElevation) {\n            let depth = 0;\n            let parentMenu = this.menu.parentMenu;\n            while (parentMenu) {\n                depth++;\n                parentMenu = parentMenu.parentMenu;\n            }\n            this.menu.setElevation(depth);\n        }\n    }\n    // set state rather than toggle to support triggers sharing a menu\n    _setIsMenuOpen(isOpen) {\n        this._menuOpen = isOpen;\n        this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n        if (this.triggersSubmenu()) {\n            this._menuItemInstance._highlighted = isOpen;\n        }\n    }\n    /**\n     * This method checks that a valid instance of MatMenu has been passed into\n     * matMenuTriggerFor. If not, an exception is thrown.\n     */\n    _checkMenu() {\n        if (!this.menu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuMissingError();\n        }\n    }\n    /**\n     * This method creates the overlay from the provided menu's template and saves its\n     * OverlayRef so that it can be attached to the DOM when openMenu is called.\n     */\n    _createOverlay() {\n        if (!this._overlayRef) {\n            const config = this._getOverlayConfig();\n            this._subscribeToPositions(config.positionStrategy);\n            this._overlayRef = this._overlay.create(config);\n            // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n            // Ideally we'd also have our keyboard event logic in here, however doing so will\n            // break anybody that may have implemented the `MatMenuPanel` themselves.\n            this._overlayRef.keydownEvents().subscribe();\n        }\n        return this._overlayRef;\n    }\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._overlay.position()\n                .flexibleConnectedTo(this._element)\n                .withLockedPosition()\n                .withGrowAfterOpen()\n                .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n            backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n            panelClass: this.menu.overlayPanelClass,\n            scrollStrategy: this._scrollStrategy(),\n            direction: this._dir\n        });\n    }\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the menu based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n    _subscribeToPositions(position) {\n        if (this.menu.setPositionClasses) {\n            position.positionChanges.subscribe(change => {\n                const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n                this.menu.setPositionClasses(posX, posY);\n            });\n        }\n    }\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    _setPosition(positionStrategy) {\n        let [originX, originFallbackX] = this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n        let [overlayY, overlayFallbackY] = this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n        let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n        let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n        let offsetY = 0;\n        if (this.triggersSubmenu()) {\n            // When the menu is a sub-menu, it should always align itself\n            // to the edges of the trigger, instead of overlapping it.\n            overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n            originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n        }\n        else if (!this.menu.overlapTrigger) {\n            originY = overlayY === 'top' ? 'bottom' : 'top';\n            originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n        }\n        positionStrategy.withPositions([\n            { originX, originY, overlayX, overlayY, offsetY },\n            { originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY },\n            {\n                originX,\n                originY: originFallbackY,\n                overlayX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            },\n            {\n                originX: originFallbackX,\n                originY: originFallbackY,\n                overlayX: overlayFallbackX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            }\n        ]);\n    }\n    /** Returns a stream that emits whenever an action that should close the menu occurs. */\n    _menuClosingActions() {\n        const backdrop = this._overlayRef.backdropClick();\n        const detachments = this._overlayRef.detachments();\n        const parentClose = this._parentMaterialMenu ? this._parentMaterialMenu.closed : of();\n        const hover = this._parentMaterialMenu ? this._parentMaterialMenu._hovered().pipe(filter(active => active !== this._menuItemInstance), filter(() => this._menuOpen)) : of();\n        return merge(backdrop, parentClose, hover, detachments);\n    }\n    /** Handles mouse presses on the trigger. */\n    _handleMousedown(event) {\n        if (!isFakeMousedownFromScreenReader(event)) {\n            // Since right or middle button clicks won't trigger the `click` event,\n            // we shouldn't consider the menu as opened by mouse in those cases.\n            this._openedBy = event.button === 0 ? 'mouse' : undefined;\n            // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n            // we should prevent focus from moving onto it via click to avoid the\n            // highlight from lingering on the menu item.\n            if (this.triggersSubmenu()) {\n                event.preventDefault();\n            }\n        }\n    }\n    /** Handles key presses on the trigger. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        // Pressing enter on the trigger will trigger the click handler later.\n        if (keyCode === ENTER || keyCode === SPACE) {\n            this._openedBy = 'keyboard';\n        }\n        if (this.triggersSubmenu() && ((keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n            this._openedBy = 'keyboard';\n            this.openMenu();\n        }\n    }\n    /** Handles click events on the trigger. */\n    _handleClick(event) {\n        if (this.triggersSubmenu()) {\n            // Stop event propagation to avoid closing the parent menu.\n            event.stopPropagation();\n            this.openMenu();\n        }\n        else {\n            this.toggleMenu();\n        }\n    }\n    /** Handles the cases where the user hovers over the trigger. */\n    _handleHover() {\n        // Subscribe to changes in the hovered item in order to toggle the panel.\n        if (!this.triggersSubmenu() || !this._parentMaterialMenu) {\n            return;\n        }\n        this._hoverSubscription = this._parentMaterialMenu._hovered()\n            // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n            // with different data and triggers), we have to delay it by a tick to ensure that\n            // it won't be closed immediately after it is opened.\n            .pipe(filter(active => active === this._menuItemInstance && !active.disabled), delay(0, asapScheduler))\n            .subscribe(() => {\n            this._openedBy = 'mouse';\n            // If the same menu is used between multiple triggers, it might still be animating\n            // while the new trigger tries to re-open it. Wait for the animation to finish\n            // before doing so. Also interrupt if the user moves to another item.\n            if (this.menu instanceof _MatMenuBase && this.menu._isAnimating) {\n                // We need the `delay(0)` here in order to avoid\n                // 'changed after checked' errors in some cases. See #12194.\n                this.menu._animationDone\n                    .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMaterialMenu._hovered()))\n                    .subscribe(() => this.openMenu());\n            }\n            else {\n                this.openMenu();\n            }\n        });\n    }\n    /** Gets the portal that should be attached to the overlay. */\n    _getPortal() {\n        // Note that we can avoid this check by keeping the portal on the menu panel.\n        // While it would be cleaner, we'd have to introduce another required method on\n        // `MatMenuPanel`, making it harder to consume.\n        if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n            this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n        }\n        return this._portal;\n    }\n}\nMatMenuTrigger.decorators = [\n    { type: Directive, args: [{\n                selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n                host: {\n                    'class': 'mat-menu-trigger',\n                    'aria-haspopup': 'true',\n                    '[attr.aria-expanded]': 'menuOpen || null',\n                    '[attr.aria-controls]': 'menuOpen ? menu.panelId : null',\n                    '(mousedown)': '_handleMousedown($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(click)': '_handleClick($event)',\n                },\n                exportAs: 'matMenuTrigger'\n            },] }\n];\nMatMenuTrigger.ctorParameters = () => [\n    { type: Overlay },\n    { type: ElementRef },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_SCROLL_STRATEGY,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_PANEL,] }, { type: Optional }] },\n    { type: MatMenuItem, decorators: [{ type: Optional }, { type: Self }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: FocusMonitor }\n];\nMatMenuTrigger.propDecorators = {\n    _deprecatedMatMenuTriggerFor: [{ type: Input, args: ['mat-menu-trigger-for',] }],\n    menu: [{ type: Input, args: ['matMenuTriggerFor',] }],\n    menuData: [{ type: Input, args: ['matMenuTriggerData',] }],\n    restoreFocus: [{ type: Input, args: ['matMenuTriggerRestoreFocus',] }],\n    menuOpened: [{ type: Output }],\n    onMenuOpen: [{ type: Output }],\n    menuClosed: [{ type: Output }],\n    onMenuClose: [{ type: Output }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used by both the current `MatMenuModule` and the MDC `MatMenuModule`\n * to declare the menu-related directives.\n */\nclass _MatMenuDirectivesModule {\n}\n_MatMenuDirectivesModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [MatMenuTrigger, MatMenuContent, MatCommonModule],\n                declarations: [\n                    MatMenuTrigger,\n                    MatMenuContent,\n                ],\n                providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            },] }\n];\nclass MatMenuModule {\n}\nMatMenuModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule,\n                    MatCommonModule,\n                    MatRippleModule,\n                    OverlayModule,\n                    _MatMenuDirectivesModule,\n                ],\n                exports: [CdkScrollableModule, MatCommonModule, MatMenu, MatMenuItem, _MatMenuDirectivesModule],\n                declarations: [MatMenu, MatMenuItem],\n                providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_MENU_CONTENT, MAT_MENU_DEFAULT_OPTIONS, MAT_MENU_PANEL, MAT_MENU_SCROLL_STRATEGY, MatMenu, MatMenuContent, MatMenuItem, MatMenuModule, MatMenuTrigger, _MatMenuBase, _MatMenuDirectivesModule, fadeInItems, matMenuAnimations, transformMenu, MAT_MENU_DEFAULT_OPTIONS_FACTORY as ɵangular_material_src_material_menu_menu_a, MAT_MENU_SCROLL_STRATEGY_FACTORY as ɵangular_material_src_material_menu_menu_b, MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER as ɵangular_material_src_material_menu_menu_c };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}