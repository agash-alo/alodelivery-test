{"ast":null,"code":"/**\r\n * Interaction manages all aspects of user interaction - mouse move,\r\n * click, hover, drag events, touch gestures.\r\n *\r\n * [[InteractionObject]] elements that want to use certain events, must attach event\r\n * listeners to Interaction instance.\r\n *\r\n * Interaction itself will not modify [[InteractionObject]] elements, it will be up to\r\n * those elements to handle interaction information received via event triggers.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { BaseObjectEvents } from \"../Base\";\nimport { List } from \"../utils/List\";\nimport { Animation } from \"../utils/Animation\";\nimport { MultiDisposer } from \"../utils/Disposer\";\nimport { InteractionObject } from \"./InteractionObject\";\nimport { InteractionKeyboardObject } from \"./InteractionKeyboardObject\";\nimport { Dictionary } from \"../utils/Dictionary\";\nimport { Inertia } from \"./Inertia\";\nimport { addEventListener } from \"../utils/DOM\";\nimport { keyboard } from \"../utils/Keyboard\";\nimport { system } from \"./../System\";\nimport { options } from \"./../Options\";\nimport * as $ease from \"../utils/Ease\";\nimport * as $math from \"../utils/Math\";\nimport * as $array from \"../utils/Array\";\nimport * as $dom from \"../utils/DOM\";\nimport * as $iter from \"../utils/Iterator\";\nimport * as $type from \"../utils/Type\";\nimport * as $time from \"../utils/Time\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n* Interaction manages all aspects of user interaction - mouse move,\r\n* click, hover, drag events, touch gestures.\r\n*\r\n* [[InteractionObject]] elements that want to use certain events, must attach event\r\n* listeners to Interaction instance.\r\n*\r\n* Interaction itself will not modify [[InteractionObject]] elements, it will be up to\r\n* those elements to handle interaction information received via event triggers.\r\n*\r\n* @see {@link IInteractionEvents} for a list of available events\r\n*/\nvar Interaction = /** @class */function (_super) {\n  __extends(Interaction, _super);\n  /**\r\n   * Constructor. Sets up universal document-wide move events to handle stuff\r\n   * outside particular chart container.\r\n   */\n  function Interaction() {\n    var _this =\n    // Call super\n    _super.call(this) || this;\n    /**\r\n     * An indicator of global events were already initialized.\r\n     */\n    _this._globalEventsAdded = false;\n    /**\r\n     * Holds which mouse event listeners to use.\r\n     */\n    _this._pointerEvents = {\n      \"pointerdown\": \"mousedown\",\n      \"pointerup\": \"mouseup\",\n      \"pointermove\": \"mousemove\",\n      \"pointercancel\": \"mouseup\",\n      \"pointerover\": \"mouseover\",\n      \"pointerout\": \"mouseout\",\n      \"wheel\": \"wheel\"\n    };\n    /**\r\n     * Indicates if Interaction should use only \"pointer\" type events, like\r\n     * \"pointermove\", available in all modern browsers, ignoring \"legacy\"\r\n     * events, like \"touchmove\".\r\n     */\n    _this._usePointerEventsOnly = false;\n    /**\r\n     * Use only touch events (for touch only devices such as tablets and phones)\r\n     */\n    _this._useTouchEventsOnly = false;\n    /**\r\n     * Add special hover events. Normally, touch device tap will also simulate\r\n     * hover event. On some devices (ahem iOS) we want to prevent that so that\r\n     * over/out events are not duplicated.\r\n     */\n    _this._addHoverEvents = true;\n    /**\r\n     * Indicates if passive mode options is supported by this browser.\r\n     */\n    _this._passiveSupported = false;\n    /**\r\n     * Holds list of delayed events\r\n     */\n    _this._delayedEvents = {\n      out: []\n    };\n    /**\r\n     * List of objects that current have a pointer hovered over them.\r\n     */\n    _this.overObjects = new List();\n    /**\r\n     * List of objects that currently has a pressed pointer.\r\n     */\n    _this.downObjects = new List();\n    /**\r\n     * List of objects that need mouse position to be reported to them.\r\n     */\n    _this.trackedObjects = new List();\n    /**\r\n     * List of objects that are currently being dragged.\r\n     */\n    _this.transformedObjects = new List();\n    /**\r\n     * Holds all known pointers.\r\n     */\n    _this.pointers = new Dictionary();\n    /**\r\n     * Inertia options that need to be applied to after element drag, if it's\r\n     * `inert = true`.\r\n     *\r\n     * This is just a default, which can and probably will be overridden by\r\n     * actual elements.\r\n     */\n    _this.inertiaOptions = new Dictionary();\n    /**\r\n     * Default options for click events. These can be overridden in\r\n     * [[InteractionObject]].\r\n     */\n    _this.hitOptions = {\n      \"doubleHitTime\": 300,\n      //\"delayFirstHit\": false,\n      \"hitTolerance\": 10,\n      \"noFocus\": true\n    };\n    /**\r\n     * Default options for hover events. These can be overridden in\r\n     * [[InteractionObject]].\r\n     */\n    _this.hoverOptions = {\n      \"touchOutBehavior\": \"leave\",\n      \"touchOutDelay\": 1000\n    };\n    /**\r\n     * Default options for detecting a swipe gesture. These can be overridden in\r\n     * [[InteractionObject]].\r\n     */\n    _this.swipeOptions = {\n      \"time\": 500,\n      \"verticalThreshold\": 75,\n      \"horizontalThreshold\": 30\n    };\n    /**\r\n     * Default options for keyboard operations. These can be overridden in\r\n     * [[InteractionObject]].\r\n     */\n    _this.keyboardOptions = {\n      \"speed\": 0.1,\n      \"accelleration\": 1.2,\n      \"accellerationDelay\": 2000\n    };\n    /**\r\n     * Default options for keyboard operations. These can be overridden in\r\n     * [[InteractionObject]].\r\n     *\r\n     * @since 4.5.14\r\n     */\n    _this.mouseOptions = {\n      \"sensitivity\": 1\n    };\n    // Set class name\n    _this.className = \"Interaction\";\n    // Create InteractionObject for <body>\n    _this.body = _this.getInteraction(document.body);\n    _this._disposers.push(_this.body);\n    // Detect browser capabilities and determine what event listeners to use\n    if (window.hasOwnProperty(\"PointerEvent\")) {\n      // IE10+/Edge without touch controls enabled\n      _this._pointerEvents.pointerdown = \"pointerdown\";\n      _this._pointerEvents.pointerup = \"pointerup\";\n      _this._pointerEvents.pointermove = \"pointermove\";\n      _this._pointerEvents.pointercancel = \"pointercancel\";\n      _this._pointerEvents.pointerover = \"pointerover\";\n      _this._pointerEvents.pointerout = \"pointerout\";\n      //this._usePointerEventsOnly = true;\n    } else if (window.hasOwnProperty(\"MSPointerEvent\")) {\n      // IE9\n      _this._pointerEvents.pointerdown = \"MSPointerDown\";\n      _this._pointerEvents.pointerup = \"MSPointerUp\";\n      _this._pointerEvents.pointermove = \"MSPointerMove\";\n      _this._pointerEvents.pointercancel = \"MSPointerUp\";\n      _this._pointerEvents.pointerover = \"MSPointerOver\";\n      _this._pointerEvents.pointerout = \"MSPointerOut\";\n      //this._usePointerEventsOnly = true;\n    } else if (typeof matchMedia !== \"undefined\" && matchMedia('(pointer:fine)').matches) {\n      // This is only for Safari as it does not support PointerEvent\n      // Do nothing and let it use regular `mouse*` events\n      // Hi Apple ;)\n      // Additionally disable hover events for iOS devices\n      if ('ontouchstart' in window) {\n        _this._addHoverEvents = false;\n        _this._useTouchEventsOnly = true;\n      }\n    } else if (window.navigator.userAgent.match(/MSIE /)) {\n      // Oh looky, an MSIE that does not support PointerEvent. Hi granpa IE9!\n      _this._usePointerEventsOnly = true;\n    } else if (_this.fullFF()) {\n      // Old FF, let's use regular events.\n      // (Newer FFs would be detected by the PointerEvent availability check)\n      _this._usePointerEventsOnly = true;\n    } else {\n      // Uses defaults for normal browsers\n      // We also assume that this must be a touch device that does not have\n      // any pointer events\n      _this._useTouchEventsOnly = true;\n    }\n    // Detect if device has a mouse\n    // This is turning out to be not reliable\n    // @todo remove\n    /*if (!window.navigator.msPointerEnabled && (typeof matchMedia !== \"undefined\") && !matchMedia('(pointer:fine)').matches && !this.fullFF()) {\r\n        this._useTouchEventsOnly = true;\r\n    }*/\n    // Detect proper mouse wheel events\n    if (\"onwheel\" in document.createElement(\"div\")) {\n      // Modern browsers\n      _this._pointerEvents.wheel = \"wheel\";\n    } else if ($type.hasValue(document.onmousewheel)) {\n      // Webkit and IE support at least \"mousewheel\"\n      _this._pointerEvents.wheel = \"mousewheel\";\n    }\n    // Set up default inertia options\n    _this.inertiaOptions.setKey(\"move\", {\n      \"time\": 100,\n      \"duration\": 500,\n      \"factor\": 1,\n      \"easing\": $ease.polyOut3\n    });\n    _this.inertiaOptions.setKey(\"resize\", {\n      \"time\": 100,\n      \"duration\": 500,\n      \"factor\": 1,\n      \"easing\": $ease.polyOut3\n    });\n    // Set the passive mode support\n    _this._passiveSupported = Interaction.passiveSupported;\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * This is a nasty detection for Firefox. The reason why we have is that\r\n   * Firefox ESR version does not support matchMedia correctly.\r\n   *\r\n   * On iOS, Firefox uses different userAgent, so we don't have to detect iOS.\r\n   *\r\n   * @return Full Firefox?\r\n   */\n  Interaction.prototype.fullFF = function () {\n    return window.navigator.userAgent.match(/Firefox/) && !window.navigator.userAgent.match(/Android/);\n  };\n  Interaction.prototype.debug = function () {};\n  /**\r\n   * ==========================================================================\r\n   * Processing\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n  /**\r\n   * Sets up global events.\r\n   *\r\n   * We need this so that we can track drag movement beyond chart's container.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Interaction.prototype.addGlobalEvents = function () {\n    var _this = this;\n    if (!this._globalEventsAdded) {\n      if (!this._useTouchEventsOnly) {\n        this._disposers.push(addEventListener(document, this._pointerEvents.pointerdown, function (ev) {\n          _this.handleGlobalPointerDown(ev);\n        }));\n        this._disposers.push(addEventListener(document, this._pointerEvents.pointermove, function (ev) {\n          _this.handleGlobalPointerMove(ev);\n        }));\n        this._disposers.push(addEventListener(document, this._pointerEvents.pointerup, function (ev) {\n          _this.handleGlobalPointerUp(ev);\n        }));\n        this._disposers.push(addEventListener(document, this._pointerEvents.pointercancel, function (ev) {\n          _this.handleGlobalPointerUp(ev, true);\n        }));\n        this._disposers.push(addEventListener(document, \"mouseenter\", function (ev) {\n          if (!$type.hasValue(ev.relatedTarget) && (ev.buttons == 0 || ev.which == 0)) {\n            _this.handleDocumentLeave(ev);\n          }\n        }));\n      }\n      // No need to duplicate events for hubrid systems that support both\n      // pointer events and touch events. Touch events are need only for\n      // some touch-only systems, like Mobile Safari.\n      if (!this._usePointerEventsOnly) {\n        this._disposers.push(addEventListener(document, \"touchstart\", function (ev) {\n          _this.handleGlobalTouchStart(ev);\n        }));\n        this._disposers.push(addEventListener(document, \"touchmove\", function (ev) {\n          _this.handleGlobalTouchMove(ev);\n        }));\n        this._disposers.push(addEventListener(document, \"touchend\", function (ev) {\n          _this.handleGlobalTouchEnd(ev);\n        }));\n      }\n      this._disposers.push(addEventListener(document, \"keydown\", function (ev) {\n        _this.handleGlobalKeyDown(ev);\n      }));\n      this._disposers.push(addEventListener(document, \"keyup\", function (ev) {\n        _this.handleGlobalKeyUp(ev);\n      }));\n      this._globalEventsAdded = true;\n    }\n  };\n  /**\r\n   * Sets if [[InteractionObject]] is clickable.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io [[InteractionObject]] instance\r\n   */\n  Interaction.prototype.processClickable = function (io) {\n    // Add or remove touch events\n    this.processTouchable(io);\n  };\n  /**\r\n   * Sets if [[InteractionObject]] will display context menu when right-clicked.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io [[InteractionObject]] instance\r\n   */\n  Interaction.prototype.processContextMenu = function (io) {\n    if (io.contextMenuDisabled) {\n      if (!io.eventDisposers.hasKey(\"contextMenuDisabled\")) {\n        io.eventDisposers.setKey(\"contextMenuDisabled\", addEventListener(io.element, \"contextmenu\", function (e) {\n          e.preventDefault();\n        }));\n      }\n    } else {\n      if (io.eventDisposers.hasKey(\"contextMenuDisabled\")) {\n        io.eventDisposers.getKey(\"contextMenuDisabled\").dispose();\n      }\n    }\n  };\n  /**\r\n   * Sets if [[InteractionObject]] is hoverable.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io [[InteractionObject]] instance\r\n   */\n  Interaction.prototype.processHoverable = function (io) {\n    var _this = this;\n    if (io.hoverable || io.trackable) {\n      // Add global events\n      this.addGlobalEvents();\n      // Add hover styles\n      this.applyCursorOverStyle(io);\n      // Add local events\n      if (!io.eventDisposers.hasKey(\"hoverable\") && this._addHoverEvents) {\n        io.eventDisposers.setKey(\"hoverable\", new MultiDisposer([addEventListener(io.element, this._pointerEvents.pointerout, function (e) {\n          return _this.handlePointerOut(io, e);\n        }), addEventListener(io.element, this._pointerEvents.pointerover, function (e) {\n          return _this.handlePointerOver(io, e);\n        })]));\n      }\n      if (io.trackable) {\n        //sprite.addEventListener(\"touchmove\", this.handleTouchMove, false, this);\n      }\n    } else {\n      var disposer = io.eventDisposers.getKey(\"hoverable\");\n      if (disposer != null) {\n        disposer.dispose();\n        io.eventDisposers.removeKey(\"hoverable\");\n      }\n    }\n    // Add or remove touch events\n    this.processTouchable(io);\n  };\n  /**\r\n   * Sets up [[InteractionObject]] as movable. Movable can be any\r\n   * transformation, e.g. drag, swipe, resize, track.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   */\n  Interaction.prototype.processMovable = function (io) {\n    // Add unified events\n    if (io.draggable || io.swipeable || io.trackable || io.resizable) {\n      // Prep the element\n      if (!this.isGlobalElement(io) && !io.isTouchProtected) {\n        this.prepElement(io);\n      }\n      // Add hover styles\n      this.applyCursorOverStyle(io);\n    }\n    // Add or remove touch events\n    this.processTouchable(io);\n  };\n  /**\r\n   * Checks if [[InteractionObject]] is trackable and sets relative events.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   */\n  Interaction.prototype.processTrackable = function (io) {\n    this.processHoverable(io);\n    this.processMovable(io);\n    if (io.trackable) {\n      this.trackedObjects.moveValue(io);\n    } else {\n      this.trackedObjects.removeValue(io);\n    }\n  };\n  /**\r\n   * Checks if [[InteractionObject]] is draggable.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   */\n  Interaction.prototype.processDraggable = function (io) {\n    this.processMovable(io);\n  };\n  /**\r\n   * Checks if [[InteractionObject]] is swipeable and sets relative events.\r\n   *\r\n   * A swipe event is triggered when a horizontal drag of 75px or more (and\r\n   * less than 30px vertically) occurs within 700 milliseconds. This can be\r\n   * overridden in sprites [[swipeOptions]].\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   */\n  Interaction.prototype.processSwipeable = function (io) {\n    this.processMovable(io);\n  };\n  /**\r\n   * Checks if [[InteractionObject]] is resizable and attaches required events\r\n   * to it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   */\n  Interaction.prototype.processResizable = function (io) {\n    this.processMovable(io);\n  };\n  /**\r\n   * Checks if [[InteractionObject]] is supposed to capture mouse wheel events\r\n   * and prepares it to catch those events.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   */\n  Interaction.prototype.processWheelable = function (io) {\n    var _this = this;\n    if (io.wheelable) {\n      //io.hoverable = true;\n      if (!io.eventDisposers.hasKey(\"wheelable\")) {\n        io.eventDisposers.setKey(\"wheelable\", new MultiDisposer([addEventListener(io.element, this._pointerEvents.wheel, function (e) {\n          return _this.handleMouseWheel(io, e);\n        }, this._passiveSupported ? {\n          passive: false\n        } : false), io.events.on(\"out\", function (e) {\n          if (io.wheelable) {\n            _this.unlockWheel();\n          }\n        }), io.events.on(\"over\", function (e) {\n          //console.log(\"whelab over\")\n          if (io.wheelable) {\n            _this.lockWheel();\n          }\n        })]));\n      }\n    } else {\n      var disposer = io.eventDisposers.getKey(\"wheelable\");\n      if (disposer != null) {\n        disposer.dispose();\n        io.eventDisposers.removeKey(\"wheelable\");\n      }\n    }\n  };\n  /**\r\n   * Checks if [[InteractionObject]] is focusable. A focusable element is an\r\n   * element that will be highlighted when users presses TAB key. If the\r\n   * element is focusable, this function will attach relative focus/blur\r\n   * events to it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   */\n  Interaction.prototype.processFocusable = function (io) {\n    var _this = this;\n    if (io.focusable === true && io.tabindex > -1 && !this._useTouchEventsOnly) {\n      if (!io.eventDisposers.hasKey(\"focusable\")) {\n        io.eventDisposers.setKey(\"focusable\", new MultiDisposer([addEventListener(io.element, \"focus\", function (e) {\n          return _this.handleFocus(io, e);\n        }), addEventListener(io.element, \"blur\", function (e) {\n          return _this.handleBlur(io, e);\n        }), addEventListener(io.element, this._pointerEvents.pointerdown, function (e) {\n          return _this.handleFocusBlur(io, e);\n        }), addEventListener(io.element, \"touchstart\", function (e) {\n          return _this.handleFocusBlur(io, e);\n        }, this._passiveSupported ? {\n          passive: false\n        } : false)]));\n      }\n    } else {\n      var disposer = io.eventDisposers.getKey(\"focusable\");\n      if (disposer != null) {\n        disposer.dispose();\n        io.eventDisposers.removeKey(\"focusable\");\n      }\n    }\n  };\n  /**\r\n   * Checks if [[InteractionObject]] is \"touchable\". It means any interaction\r\n   * whatsoever: mouse click, touch screen tap, swipe, drag, resize, etc.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   */\n  Interaction.prototype.processTouchable = function (io) {\n    var _this = this;\n    // Add unified events\n    if (io.clickable || io.hoverable || io.trackable || io.draggable || io.swipeable || io.resizable) {\n      // Add global events\n      this.addGlobalEvents();\n      // Add local events\n      if (!io.eventDisposers.hasKey(\"touchable\")) {\n        if (!this._useTouchEventsOnly && !this._usePointerEventsOnly) {\n          io.eventDisposers.setKey(\"touchable\", new MultiDisposer([addEventListener(io.element, this._pointerEvents.pointerdown, function (e) {\n            return _this.handlePointerDown(io, e);\n          }), addEventListener(io.element, \"touchstart\", function (e) {\n            return _this.handleTouchDown(io, e);\n          }, this._passiveSupported ? {\n            passive: false\n          } : false)]));\n        } else if (!this._useTouchEventsOnly) {\n          io.eventDisposers.setKey(\"touchable\", addEventListener(io.element, this._pointerEvents.pointerdown, function (e) {\n            return _this.handlePointerDown(io, e);\n          }));\n        } else if (!this._usePointerEventsOnly) {\n          io.eventDisposers.setKey(\"touchable\", addEventListener(io.element, \"touchstart\", function (e) {\n            return _this.handleTouchDown(io, e);\n          }, this._passiveSupported ? {\n            passive: false\n          } : false));\n        }\n      }\n    } else {\n      var disposer = io.eventDisposers.getKey(\"touchable\");\n      if (disposer != null) {\n        disposer.dispose();\n        io.eventDisposers.removeKey(\"touchable\");\n      }\n    }\n  };\n  /**\r\n   * ==========================================================================\r\n   * Non-pointer events\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n  /**\r\n   * Dispatches \"focus\" event when element gains focus.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   * @param ev  Original event\r\n   */\n  Interaction.prototype.handleFocus = function (io, ev) {\n    if (!io.focusable) {\n      ev.preventDefault();\n      return;\n    }\n    io.isFocused = true;\n    if (io.events.isEnabled(\"focus\") && !system.isPaused) {\n      var imev = {\n        type: \"focus\",\n        target: io,\n        event: ev\n      };\n      io.events.dispatchImmediately(\"focus\", imev);\n    }\n  };\n  /**\r\n   * Used by regular click events to prevent focus if \"noFocus\" is set.\r\n   *\r\n   * This should not be called by \"focus\" handlers.\r\n   *\r\n   * @param io  Element\r\n   * @param ev  Original event\r\n   */\n  Interaction.prototype.handleFocusBlur = function (io, ev) {\n    if (io.focusable !== false && this.getHitOption(io, \"noFocus\")) {\n      io.events.once(\"focus\", function () {\n        io.events.disableType(\"blur\");\n        $dom.blur();\n        if (io.sprite) {\n          io.sprite.handleBlur();\n        }\n        io.events.enableType(\"blur\");\n      });\n    }\n  };\n  /**\r\n   * Dispatches \"blur\" event when element loses focus.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   * @param ev  Original event\r\n   */\n  Interaction.prototype.handleBlur = function (io, ev) {\n    if (!io.focusable) {\n      ev.preventDefault();\n      return;\n    }\n    io.isFocused = false;\n    if (io.events.isEnabled(\"blur\") && !system.isPaused) {\n      var imev = {\n        type: \"blur\",\n        target: io,\n        event: ev\n      };\n      io.events.dispatchImmediately(\"blur\", imev);\n    }\n  };\n  /**\r\n   * ==========================================================================\r\n   * Global keyboard-related even handlers\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n  /**\r\n   * Checks if there is an item that has currently focus and that they key is\r\n   * one of the directional keys. If both of the conditions are true, it\r\n   * creates an object to simulate movement of dragable element with keyboard.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev An original keyboard event\r\n   */\n  Interaction.prototype.handleGlobalKeyDown = function (ev) {\n    if (this.focusedObject) {\n      if (keyboard.isKey(ev, \"esc\")) {\n        // ESC removes focus\n        $dom.blur();\n      } else if (this.focusedObject.draggable && keyboard.isKey(ev, [\"up\", \"down\", \"left\", \"right\"])) {\n        // Prevent scrolling of the document\n        ev.preventDefault();\n        // Get focused object\n        var io = this.focusedObject;\n        // Get particular key\n        var disposerKey = \"interactionKeyboardObject\";\n        // If such disposer already exists we know the event is going on so we\n        // just move on\n        if (io.eventDisposers.hasKey(disposerKey)) {\n          return;\n        }\n        // Create a keyboard mover\n        var ko = new InteractionKeyboardObject(io, ev);\n        io.eventDisposers.setKey(disposerKey, ko);\n        switch (keyboard.getEventKey(ev)) {\n          case \"up\":\n            ko.directionY = -1;\n            break;\n          case \"down\":\n            ko.directionY = 1;\n            break;\n          case \"left\":\n            ko.directionX = -1;\n            break;\n          case \"right\":\n            ko.directionX = 1;\n            break;\n        }\n      }\n    }\n  };\n  /**\r\n   * Dispatches related events when the keyboard key is realeasd.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev An original keyboard event\r\n   */\n  Interaction.prototype.handleGlobalKeyUp = function (ev) {\n    var disposerKey = \"interactionKeyboardObject\";\n    if (this.focusedObject) {\n      var disposer = this.focusedObject.eventDisposers.getKey(disposerKey);\n      if (disposer != null) {\n        // Prevent scrolling of the document\n        ev.preventDefault();\n        // Dispose stuff\n        disposer.dispose();\n        this.focusedObject.eventDisposers.removeKey(disposerKey);\n      }\n      // Does focused object have \"hit\" event?\n      var sprite = this.focusedObject.sprite;\n      if (keyboard.isKey(ev, \"enter\") && sprite) {\n        if (sprite.events.isEnabled(\"hit\") || sprite.events.isEnabled(\"toggled\")) {\n          this.focusedObject.dispatchImmediately(\"hit\");\n        } else if (sprite.showTooltipOn == \"hit\") {\n          this.focusedObject.dispatchImmediately(\"up\");\n        }\n      }\n    }\n  };\n  /**\r\n   * ==========================================================================\r\n   * Global pointer-related even handlers\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n  /**\r\n   * Handler for a global \"pointermove\" event.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event object\r\n   */\n  Interaction.prototype.handleGlobalPointerMove = function (ev) {\n    // Get pointer\n    var pointer = this.getPointer(ev);\n    // Update current point position\n    pointer.point = this.getPointerPoint(ev);\n    // Prepare and fire global event\n    if (this.events.isEnabled(\"track\") && !system.isPaused) {\n      var imev = {\n        type: \"track\",\n        target: this,\n        event: ev,\n        pointer: pointer,\n        touch: pointer.touch\n      };\n      this.events.dispatchImmediately(\"track\", imev);\n    }\n    // Track\n    this.addBreadCrumb(pointer, pointer.point);\n    // Process further\n    this.handleGlobalMove(pointer, ev);\n  };\n  /**\r\n   * Handler for a global \"pointerdown\" event.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event object\r\n   */\n  Interaction.prototype.handleGlobalPointerDown = function (ev) {\n    // Remove delayed hovers\n    this.processDelayed();\n    // Get pointer\n    var pointer = this.getPointer(ev);\n    // Prepare and fire global event\n    if (this.events.isEnabled(\"down\") && !system.isPaused) {\n      var imev = {\n        type: \"down\",\n        target: this,\n        event: ev,\n        pointer: pointer,\n        touch: pointer.touch\n      };\n      this.events.dispatchImmediately(\"down\", imev);\n    }\n  };\n  /**\r\n   * Prevents touch action from firing.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event\r\n   */\n  Interaction.prototype.preventTouchAction = function (ev) {\n    if (!ev.defaultPrevented) {\n      ev.preventDefault();\n    }\n  };\n  /**\r\n   * Handler for a global \"pointerup\" event.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event object\r\n   */\n  Interaction.prototype.handleGlobalPointerUp = function (ev, cancelled) {\n    if (cancelled === void 0) {\n      cancelled = false;\n    }\n    // Get pointer\n    var pointer = this.getPointer(ev);\n    // Prepare and fire global event\n    if (this.events.isEnabled(\"up\") && !system.isPaused) {\n      var imev = {\n        type: \"up\",\n        target: this,\n        event: ev,\n        pointer: pointer,\n        touch: pointer.touch\n      };\n      this.events.dispatchImmediately(\"up\", imev);\n    }\n    // Process further\n    this.handleGlobalUp(pointer, ev, cancelled);\n  };\n  /**\r\n  * ==========================================================================\r\n  * Global touch-related even handlers\r\n  * ==========================================================================\r\n  */\n  /**\r\n   * Handler for a global \"touchmove\" event.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event object\r\n   */\n  Interaction.prototype.handleGlobalTouchMove = function (ev) {\n    // Process each changed touch point\n    for (var i = 0; i < ev.changedTouches.length; i++) {\n      // Get pointer\n      var pointer = this.getPointer(ev.changedTouches[i]);\n      // Update current point position\n      pointer.point = this.getPointerPoint(ev.changedTouches[i]);\n      // Prepare and fire global event\n      if (this.events.isEnabled(\"track\") && !system.isPaused) {\n        var imev = {\n          type: \"track\",\n          target: this,\n          event: ev,\n          pointer: pointer,\n          touch: pointer.touch\n        };\n        this.events.dispatchImmediately(\"track\", imev);\n      }\n      // Track\n      this.addBreadCrumb(pointer, pointer.point);\n      // Process further\n      this.handleGlobalMove(pointer, ev);\n    }\n  };\n  /**\r\n   * Handler for a global \"touchstart\" event.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event object\r\n   */\n  Interaction.prototype.handleGlobalTouchStart = function (ev) {\n    // Remove delayed hovers\n    this.processDelayed();\n    // Process each changed touch point\n    for (var i = 0; i < ev.changedTouches.length; i++) {\n      // Get pointer\n      var pointer = this.getPointer(ev.changedTouches[i]);\n      // Prepare and fire global event\n      if (!this._usePointerEventsOnly && this.events.isEnabled(\"down\") && !system.isPaused) {\n        var imev = {\n          type: \"down\",\n          target: this,\n          event: ev,\n          pointer: pointer,\n          touch: pointer.touch\n        };\n        this.events.dispatchImmediately(\"down\", imev);\n      }\n    }\n  };\n  /**\r\n   * Handler for a global \"touchend\" event.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event object\r\n   */\n  Interaction.prototype.handleGlobalTouchEnd = function (ev) {\n    // Process each changed touch point\n    for (var i = 0; i < ev.changedTouches.length; i++) {\n      // Get pointer\n      var pointer = this.getPointer(ev.changedTouches[i]);\n      // Prepare and fire global event\n      if (this.events.isEnabled(\"up\") && !system.isPaused) {\n        var imev = {\n          type: \"up\",\n          target: this,\n          event: ev,\n          pointer: pointer,\n          touch: pointer.touch\n        };\n        this.events.dispatchImmediately(\"up\", imev);\n      }\n      // Handle element-related events\n      this.handleGlobalUp(pointer, ev);\n    }\n  };\n  /**\r\n   * ==========================================================================\r\n   * Element-specific pointer-related even handlers\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n  /**\r\n   * Handles event when pointer is over [[InteractionObject]] and button is\r\n   * pressed.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   * @param ev  Original event\r\n   */\n  Interaction.prototype.handlePointerDown = function (io, ev) {\n    // Stop further propagation so we don't get multiple triggers on hybrid\n    // devices (both mouse and touch capabilities)\n    //ev.preventDefault();\n    //ev.stopPropagation();\n    //if (ev.defaultPrevented) {\n    //}\n    // Get pointer\n    var pointer = this.getPointer(ev);\n    // Ignore if it's anything but mouse's primary button\n    if (!pointer.touch && ev.which != 1 && ev.which != 3) {\n      return;\n    }\n    // Set mouse button\n    pointer.button = ev.which;\n    // Reset pointer\n    this.resetPointer(pointer, ev);\n    // Process down\n    this.handleDown(io, pointer, ev);\n  };\n  /**\r\n   * Handles event when [[InteractionObject]] is hovered by a mouse pointer.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   * @param ev  Original event\r\n   */\n  Interaction.prototype.handlePointerOver = function (io, ev) {\n    // Get pointer\n    var pointer = this.getPointer(ev);\n    // Process down\n    this.handleOver(io, pointer, ev);\n  };\n  /**\r\n   * Handles event when [[InteractionObject]] loses hover from a mouse pointer.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   * @param ev  Original event\r\n   */\n  Interaction.prototype.handlePointerOut = function (io, ev) {\n    // Get pointer\n    var pointer = this.getPointer(ev);\n    // Process down\n    this.handleOut(io, pointer, ev);\n  };\n  /**\r\n   * Handles event when mouse wheel is crolled over the [[InteractionObject]].\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   * @param ev  Original event\r\n   * @todo Investigate more-cross browser stuff https://developer.mozilla.org/en-US/docs/Web/Events/wheel\r\n   */\n  Interaction.prototype.handleMouseWheel = function (io, ev) {\n    // Get pointer\n    var pointer = this.getPointer(ev);\n    // Update current point position\n    pointer.point = this.getPointerPoint(ev);\n    // Init delta values\n    var deltaX = 0,\n      deltaY = 0;\n    // Set up modifier\n    // This is needed because FireFox reports wheel deltas in \"lines\" instead\n    // of pixels so we have to approximate pixel value\n    var mod = 1;\n    if (ev.deltaMode == 1) {\n      mod = 50;\n    }\n    // Adjust configurable sensitivity\n    mod *= this.getMouseOption(io, \"sensitivity\");\n    // Calculate deltas\n    if (ev instanceof WheelEvent) {\n      deltaX = Math.round(-1 * ev.wheelDeltaX || ev.deltaX * mod);\n      deltaY = Math.round(-1 * ev.wheelDeltaY || ev.deltaY * mod);\n    } else {\n      throw new Error(\"Invalid event type\");\n    }\n    // Handle the event\n    this.handleWheel(io, pointer, deltaX, deltaY, ev);\n  };\n  /**\r\n   * ==========================================================================\r\n   * Element-specific touch-related even handlers\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n  /**\r\n    * Handles an event when an [[InteractionObject]] is touched on a touch\r\n    * device.\r\n    *\r\n    * @ignore Exclude from docs\r\n    * @param io  Element\r\n    * @param ev  Original event\r\n    */\n  Interaction.prototype.handleTouchDown = function (io, ev) {\n    // Stop further propagation so we don't get multiple triggers on hybrid\n    // devices (both mouse and touch capabilities)\n    //this.maybePreventDefault(io, ev);\n    //return;\n    // Process each changed touch point\n    for (var i = 0; i < ev.changedTouches.length; i++) {\n      // Get pointer\n      var pointer = this.getPointer(ev.changedTouches[i]);\n      this.maybePreventDefault(io, ev, pointer);\n      // Reset pointer\n      this.resetPointer(pointer, ev.changedTouches[i]);\n      // Process down\n      this.handleDown(io, pointer, ev);\n    }\n  };\n  /**\r\n   * ==========================================================================\r\n   * Universal handlers\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n  /**\r\n   * Handles click/tap. Checks for doublehit.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Interaction object\r\n   * @param pointer  Pointer\r\n   * @param ev       Original event\r\n   */\n  Interaction.prototype.handleHit = function (io, pointer, ev) {\n    // Check if this is a double-hit\n    var now = $time.getTime();\n    if (io.lastHit && io.lastHit >= now - this.getHitOption(io, \"doubleHitTime\")) {\n      // Yup - it's a double-hit\n      // Cancel the hit\n      //clearTimeout(io.lastHitPointer.hitTimeout);\n      // If it happened too fast it probably means that hybrid device just\n      // generated two events for the same tap\n      if (now - io.lastHit < 100) {\n        // Ignore\n        return;\n      }\n      // Clear last hit\n      io.lastHit = undefined;\n      io.lastHitPointer = undefined;\n      // Dispatch event\n      if (io.events.isEnabled(\"doublehit\") && !system.isPaused) {\n        var imev = {\n          type: \"doublehit\",\n          target: io,\n          point: pointer.point,\n          event: ev,\n          touch: pointer.touch\n        };\n        io.events.dispatchImmediately(\"doublehit\", imev);\n      }\n    } else {\n      // Log last hit\n      io.lastHit = now;\n      io.lastHitPointer = pointer;\n      if (pointer.button === 3) {\n        // Execute HIT now\n        if (io.events.isEnabled(\"rightclick\") && !system.isPaused) {\n          var imev = {\n            type: \"rightclick\",\n            target: io,\n            event: ev\n          };\n          io.events.dispatchImmediately(\"rightclick\", imev);\n        }\n      } else {\n        if (io.events.isEnabled(\"hit\") && !system.isPaused) {\n          var imev = {\n            type: \"hit\",\n            target: io,\n            event: ev,\n            point: pointer.point,\n            touch: pointer.touch\n          };\n          io.events.dispatchImmediately(\"hit\", imev);\n        }\n      }\n    }\n  };\n  /**\r\n   * Handles pointer hovering over [[InteractionObject]].\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Interaction object\r\n   * @param pointer  Pointer\r\n   * @param ev       Original event\r\n   * @param soft     Invoked by helper function\r\n   */\n  Interaction.prototype.handleOver = function (io, pointer, ev, soft) {\n    if (soft === void 0) {\n      soft = false;\n    }\n    if (!io.hoverable) {\n      return;\n    }\n    var hoversPaused = false;\n    if (this.shouldCancelHovers(pointer) && this.areTransformed() && this.moved(pointer, this.getHitOption(io, \"hitTolerance\"))) {\n      hoversPaused = true;\n      this.cancelAllHovers(ev);\n    }\n    // Remove any delayed outs\n    this.processDelayed();\n    // Add pointer\n    io.overPointers.moveValue(pointer);\n    // Check if object is not yet hovered\n    if (!io.isRealHover) {\n      // Set element as hovered\n      if (!hoversPaused) {\n        io.isHover = true;\n        io.isRealHover = true;\n        this.overObjects.moveValue(io);\n      }\n      // Generate body track event. This is needed so that if element loads\n      // under unmoved mouse cursor, we still need all the actions that are\n      // required to happen to kick in.\n      this.handleTrack(this.body, pointer, ev, true);\n      // Event\n      if (io.events.isEnabled(\"over\") && !system.isPaused && !hoversPaused) {\n        var imev = {\n          type: \"over\",\n          target: io,\n          event: ev,\n          pointer: pointer,\n          touch: pointer.touch\n        };\n        io.events.dispatchImmediately(\"over\", imev);\n      }\n    }\n  };\n  /**\r\n   * Handles when [[InteractionObject]] is no longer hovered.\r\n   *\r\n   * If `soft = true`, this means that method is being invoked by some other\r\n   * code, not hard \"out\" function, like `handleUp` which implies we need to\r\n   * run additional checks before unhovering the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Interaction object\r\n   * @param pointer  Pointer\r\n   * @param ev       Original event\r\n   * @param soft     Invoked by helper function\r\n   * @param force    Force imediate out\r\n   */\n  Interaction.prototype.handleOut = function (io, pointer, ev, soft, force) {\n    var _this = this;\n    if (soft === void 0) {\n      soft = false;\n    }\n    if (force === void 0) {\n      force = false;\n    }\n    if (!io.hoverable) {\n      return;\n    }\n    // Remove pointer\n    io.overPointers.removeValue(pointer);\n    // Check if element is still hovered\n    if (io.isHover && (!io.hasDelayedOut || force)) {\n      // Should we run additional checks?\n      if (soft && io.overPointers.length) {\n        // There are still pointers hovering - don't do anything else and\n        // wait until either no over pointers are there or we get a hard out\n        // event.\n        return;\n      }\n      // Should we delay \"out\" if this is happening on a touch device?\n      if (pointer && pointer.touch && !force && !this.old(pointer)) {\n        // This is a touch pointer, and it hasn't moved, let's pretend\n        // the object is still hovered, and act as per \"behavior\" setting\n        var behavior = this.getHoverOption(io, \"touchOutBehavior\");\n        if (behavior == \"leave\") {\n          // Set to \"leave\", so we do not execute any \"out\" event.\n          // It will be handled by any other interaction that happens\n          // afterwards.\n          this._delayedEvents.out.push({\n            type: \"out\",\n            io: io,\n            pointer: pointer,\n            event: ev,\n            keepUntil: $time.getTime() + 500\n          });\n          io.hasDelayedOut = true;\n          return;\n        } else if (behavior == \"delay\" && this.getHoverOption(io, \"touchOutDelay\")) {\n          this._delayedEvents.out.push({\n            type: \"out\",\n            io: io,\n            pointer: pointer,\n            event: ev,\n            keepUntil: $time.getTime() + 500,\n            timeout: this.setTimeout(function () {\n              _this.handleOut(io, pointer, ev, true);\n            }, this.getHoverOption(io, \"touchOutDelay\"))\n          });\n          return;\n        } else {\n          // Nothing for \"remove\" - that's how it works \"out-of-the-box\"\n        }\n      }\n      // Set element as not hovered\n      io.isHover = false;\n      this.overObjects.removeValue(io);\n      // Invoke event\n      if (!io.isDisposed() && io.events.isEnabled(\"out\") && !system.isPaused) {\n        var imev = {\n          type: \"out\",\n          target: io,\n          event: ev,\n          pointer: pointer,\n          touch: pointer.touch\n        };\n        io.events.dispatchImmediately(\"out\", imev);\n      }\n      // Reset object from lefover delayed outs, pointers\n      io.overPointers.clear();\n      io.hasDelayedOut = false;\n      // @todo (clean delayed)\n    }\n  };\n  /**\r\n   * Processes dalyed events, such as \"out\" event that was initiated for\r\n   * elements by touch.\r\n   */\n  Interaction.prototype.processDelayed = function () {\n    var delayedEvent;\n    while (true) {\n      delayedEvent = this._delayedEvents.out.pop();\n      if (!delayedEvent) {\n        break;\n      }\n      if (delayedEvent.timeout) {\n        delayedEvent.timeout.dispose();\n      }\n      this.handleOut(delayedEvent.io, delayedEvent.pointer, delayedEvent.event, false, true);\n    }\n  };\n  /**\r\n   * Performs tasks on pointer down.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   * @param ev       Original event\r\n   */\n  Interaction.prototype.handleDown = function (io, pointer, ev) {\n    // Need to prevent default event from happening on transformable objects\n    this.maybePreventDefault(io, ev, pointer);\n    // Stop inertia animations if they're currently being played out\n    if (io.inert) {\n      this.stopInertia(io);\n    }\n    // Trigger hover because some touch devices won't trigger over events\n    // on their own\n    this.handleOver(io, pointer, ev, true);\n    // Add pointer to list\n    io.downPointers.moveValue(pointer);\n    // Apply styles if necessary\n    this.applyCursorDownStyle(io, pointer);\n    // Check if object is already down\n    if (!io.isDown) {\n      // Lose focus if needed\n      if (io.focusable !== false && this.getHitOption(io, \"noFocus\") && this.focusedObject) {\n        $dom.blur();\n      }\n      // Set object as hovered\n      io.isDown = true;\n      this.downObjects.moveValue(io);\n      // Prep object for dragging and/or resizing\n      if (io.draggable) {\n        this.processDragStart(io, pointer, ev);\n      }\n      if (io.resizable) {\n        this.processResizeStart(io, pointer, ev);\n      }\n    }\n    // Dispatch \"down\" event\n    if (io.events.isEnabled(\"down\") && !system.isPaused) {\n      var imev = {\n        type: \"down\",\n        target: io,\n        event: ev,\n        pointer: pointer,\n        touch: pointer.touch\n      };\n      io.events.dispatchImmediately(\"down\", imev);\n    }\n  };\n  /**\r\n   * Performs tasks on pointer up.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param pointer  Pointer\r\n   * @param ev       Original event\r\n   */\n  Interaction.prototype.handleGlobalUp = function (pointer, ev, cancelled) {\n    var _this = this;\n    if (cancelled === void 0) {\n      cancelled = false;\n    }\n    var sorted = this.downObjects.values.slice();\n    sorted.sort(function (x, y) {\n      if (x && y) {\n        var pos = x.element.compareDocumentPosition(y.element);\n        if (pos & Node.DOCUMENT_POSITION_CONTAINED_BY) {\n          return 1;\n        } else if (pos & Node.DOCUMENT_POSITION_CONTAINS) {\n          return -1;\n        } else {\n          return 0;\n        }\n      } else {\n        return 0;\n      }\n    });\n    // Process all down objects\n    $array.each(sorted, function (io) {\n      // Check if this particular pointer is pressing down\n      // on object\n      if (io && io.downPointers.contains(pointer)) {\n        _this.handleUp(io, pointer, ev, cancelled);\n      }\n    });\n  };\n  /**\r\n   * Simulates all pointers being up once mouse leaves document area.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev       Original event\r\n   */\n  Interaction.prototype.handleDocumentLeave = function (ev) {\n    var _this = this;\n    // Process all down objects\n    $iter.each(this.downObjects.backwards().iterator(), function (io) {\n      io.downPointers.each(function (pointer) {\n        _this.handleUp(io, pointer, ev);\n      });\n    });\n  };\n  /**\r\n   * Handles when [[InteractionObject]] is no longer hovered.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Interaction object\r\n   * @param pointer  Pointer\r\n   * @param ev       Original event\r\n   */\n  Interaction.prototype.handleUp = function (io, pointer, ev, cancelled) {\n    if (cancelled === void 0) {\n      cancelled = false;\n    }\n    // Restore cursor style\n    this.restoreCursorDownStyle(io, pointer);\n    // Remove pointer from the list\n    io.downPointers.removeValue(pointer);\n    // Trigger out because some touch devices won't trigger out events\n    // on their own\n    if (pointer && pointer.touch || this._useTouchEventsOnly) {\n      this.handleOut(io, pointer, ev, true);\n    }\n    // Check if object still down\n    if (io.isDown) {\n      // Check if there are no other pointers hovering this element\n      if (io.downPointers.length == 0) {\n        // Set element as no longer down\n        io.isDown = false;\n        this.downObjects.removeValue(io);\n      }\n      // Dispatch \"up\" event\n      if (io.events.isEnabled(\"up\") && !system.isPaused && pointer) {\n        var imev = {\n          type: \"up\",\n          target: io,\n          event: ev,\n          pointer: pointer,\n          touch: pointer.touch\n        };\n        io.events.dispatchImmediately(\"up\", imev);\n      }\n      // Check if this was not a cancelled event.\n      // If event was canelled (which might happen if gesture resulted in\n      // navigation or page scroll) there's no point in triggering hit and\n      // other actions.\n      if (!cancelled) {\n        // Handle swiping-related stuff\n        if (io.swipeable && this.swiped(io, pointer)) {\n          // Swiped - nothing else should happen\n          this.handleSwipe(io, pointer, ev);\n        } else {\n          // Check if it maybe a click\n          if (io.clickable && !this.moved(pointer, this.getHitOption(io, \"hitTolerance\"))) {\n            this.handleHit(io, pointer, ev);\n          }\n          // Handle inertia\n          if (io.inert && this.moved(pointer, this.getHitOption(io, \"hitTolerance\"))) {\n            this.handleInertia(io, pointer);\n          } else if (io.draggable) {\n            this.processDragStop(io, pointer, ev);\n          }\n          if (io.resizable) {\n            this.processResizeStop(io, pointer, ev);\n          }\n        }\n      }\n    }\n  };\n  /**\r\n   * Checks if event needs to be prevented on draggable and such items, so that\r\n   * touch gestures like navigation and scroll do not kick in.\r\n   *\r\n   * @param io  Object\r\n   * @param ev  Event\r\n   */\n  Interaction.prototype.maybePreventDefault = function (io, ev, pointer) {\n    if ($type.hasValue(ev) && (io.draggable || io.swipeable || io.trackable || io.resizable) && !this.isGlobalElement(io) && ev.cancelable !== false && (!io.isTouchProtected || !pointer || !pointer.touch)) {\n      ev.preventDefault();\n    }\n  };\n  /**\r\n   * Cancels all hovers on all currently hovered objects.\r\n   *\r\n   * @param  pointer  Pointer\r\n   * @param  ev       Event\r\n   */\n  Interaction.prototype.cancelAllHovers = function (ev) {\n    var _this = this;\n    //this.overObjects.each((io) => {\n    $iter.each(this.overObjects.backwards().iterator(), function (io) {\n      if (io) {\n        var pointer = io.overPointers.getIndex(0);\n        _this.handleOut(io, pointer, ev, true, true);\n      }\n    });\n  };\n  /**\r\n   * Checks if hovers should be cancelled on transform as per global options.\r\n   * @param   pointer  Pointer\r\n   * @return           Cancel?\r\n   */\n  Interaction.prototype.shouldCancelHovers = function (pointer) {\n    return options.disableHoverOnTransform == \"always\" || options.disableHoverOnTransform == \"touch\" && pointer.touch;\n  };\n  /**\r\n   * Handles pointer move.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param pointer  Pointer\r\n   * @param ev       Original event\r\n   */\n  Interaction.prototype.handleGlobalMove = function (pointer, ev) {\n    var _this = this;\n    // Process hovered elements\n    // We check if the element became unhovered without reporting the mouseout\n    // event. (it happens in some cases)\n    if (!pointer.touch) {\n      var target_1 = $dom.eventTarget(pointer.lastEvent);\n      $iter.each(this.overObjects.backwards().iterator(), function (io) {\n        // Is this pointer relevant to element?\n        if (io && io.overPointers.contains(pointer) && io.hoverable) {\n          // Check if the element is still hovered\n          var reset = false;\n          if (io.element && pointer.lastEvent) {\n            if (!$dom.contains(io.element, target_1)) {\n              reset = true;\n            }\n          } else {\n            reset = true;\n          }\n          if (reset) {\n            _this.handleOut(io, pointer, ev, true);\n          }\n        }\n      });\n    }\n    // Process down elements\n    $iter.each(this.transformedObjects.backwards().iterator(), function (io) {\n      // Is this pointer relevant to element?\n      if (io.downPointers.contains(pointer) &&\n      // Swipe still happening?\n      !(io.swipeable && _this.swiping(io, pointer)) && (io.draggable || io.resizable)) {\n        _this.handleTransform(io, ev);\n      }\n    });\n    // Process tracked elements\n    $iter.each(this.trackedObjects.backwards().iterator(), function (io) {\n      // Is this pointer relevant to element?\n      if (!io.overPointers.contains(pointer)) {\n        _this.handleTrack(io, pointer, ev);\n      }\n    });\n  };\n  /**\r\n   * Handles reporting of pointer movement.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io        Element\r\n   * @param pointer    Pointer\r\n   * @param ev         Original event\r\n   * @param skipCheck  Sould we skip check if cursor actually moved\r\n   */\n  Interaction.prototype.handleTrack = function (io, pointer, ev, skipCheck) {\n    if (skipCheck === void 0) {\n      skipCheck = false;\n    }\n    // Do nothing if the cursor did not actually move\n    if (!skipCheck && !this.moved(pointer, 0)) {\n      return;\n    }\n    // Initiate TRACK event\n    if (io.events.isEnabled(\"track\") && !system.isPaused) {\n      var imev = {\n        type: \"track\",\n        target: io,\n        event: ev,\n        point: pointer.point,\n        pointer: pointer,\n        touch: pointer.touch\n      };\n      io.events.dispatchImmediately(\"track\", imev);\n    }\n  };\n  /**\r\n   * Handles swipe action.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   * @param ev       Original event\r\n   */\n  Interaction.prototype.handleSwipe = function (io, pointer, ev) {\n    // We pass in InteractionEvent with shift in mouse coordinates\n    // between when the drag started and ended\n    if (io.events.isEnabled(\"swipe\") && !system.isPaused) {\n      var imev = {\n        type: \"swipe\",\n        target: io,\n        event: ev,\n        touch: pointer.touch\n      };\n      io.events.dispatchImmediately(\"swipe\", imev);\n    }\n    if (pointer.startPoint.x < pointer.point.x) {\n      if (io.events.isEnabled(\"swiperight\") && !system.isPaused) {\n        var imev = {\n          type: \"swiperight\",\n          target: io,\n          event: ev,\n          touch: pointer.touch\n        };\n        io.events.dispatchImmediately(\"swiperight\", imev);\n      }\n    } else {\n      if (io.events.isEnabled(\"swipeleft\") && !system.isPaused) {\n        var imev = {\n          type: \"swipeleft\",\n          target: io,\n          event: ev,\n          touch: pointer.touch\n        };\n        io.events.dispatchImmediately(\"swipeleft\", imev);\n      }\n    }\n  };\n  /**\r\n   * Handles event triggering for wheel rotation.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   * @param deltaX   Horizontal shift\r\n   * @param deltaY   Vertical shift\r\n   * @param ev       Original event\r\n   */\n  Interaction.prototype.handleWheel = function (io, pointer, deltaX, deltaY, ev) {\n    var shift = {\n      x: deltaX,\n      y: deltaY\n    };\n    // Trigger generic WHEEL event\n    if (io.events.isEnabled(\"wheel\") && !system.isPaused) {\n      io.events.dispatchImmediately(\"wheel\", {\n        type: \"wheel\",\n        target: io,\n        event: ev,\n        point: pointer.point,\n        shift: shift\n      });\n    }\n    // Trigger direction-specific events\n    // Horizontal\n    if (deltaX < 0) {\n      if (io.events.isEnabled(\"wheelleft\") && !system.isPaused) {\n        io.events.dispatchImmediately(\"wheelleft\", {\n          type: \"wheelleft\",\n          target: io,\n          event: ev,\n          point: pointer.point,\n          shift: shift\n        });\n      }\n    } else if (deltaX > 0) {\n      if (io.events.isEnabled(\"swiperight\") && !system.isPaused) {\n        io.events.dispatchImmediately(\"wheelright\", {\n          type: \"wheelright\",\n          target: io,\n          event: ev,\n          point: pointer.point,\n          shift: shift\n        });\n      }\n      // Vertical\n    } else if (deltaY < 0) {\n      if (io.events.isEnabled(\"wheelup\") && !system.isPaused) {\n        io.events.dispatchImmediately(\"wheelup\", {\n          type: \"wheelup\",\n          target: io,\n          event: ev,\n          point: pointer.point,\n          shift: shift\n        });\n      }\n    } else if (deltaY > 0) {\n      if (io.events.isEnabled(\"wheeldown\") && !system.isPaused) {\n        io.events.dispatchImmediately(\"wheeldown\", {\n          type: \"wheeldown\",\n          target: io,\n          event: ev,\n          point: pointer.point,\n          shift: shift\n        });\n      }\n    }\n  };\n  /**\r\n   * Initiates inertia checking sub-routines for different movement types:\r\n   * drag, resize.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param sprite\r\n   * @param pointer\r\n   */\n  Interaction.prototype.handleInertia = function (io, pointer) {\n    if (io.draggable && io.downPointers.length === 0) {\n      this.handleMoveInertia(io, pointer);\n    }\n    if (io.resizable && io.downPointers.length > 1) {\n      this.handleResizeInertia(io, pointer);\n    }\n  };\n  /**\r\n   * Continues moving the element to simulate the effect of inertia. Happens\r\n   * when `inert` and `draggable` object is dragged and then released.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   */\n  Interaction.prototype.handleMoveInertia = function (io, pointer) {\n    var interaction = io;\n    var type = \"move\";\n    var point = {\n      \"x\": pointer.point.x,\n      \"y\": pointer.point.y\n    };\n    var startPoint = {\n      \"x\": pointer.startPoint.x,\n      \"y\": pointer.startPoint.y\n    };\n    // Init inertia object\n    var inertia = new Inertia(interaction, type, point, startPoint);\n    // Get inertia data\n    var ref = this.getTrailPoint(pointer, $time.getTime() - this.getInertiaOption(io, \"move\", \"time\"));\n    if (typeof ref === \"undefined\") {\n      this.processDragStop(io, pointer, pointer.lastUpEvent);\n      return;\n    }\n    // Init animation options\n    var factor = this.getInertiaOption(io, \"move\", \"factor\");\n    var animationOptions = [{\n      \"to\": pointer.point.x + (pointer.point.x - ref.point.x) * factor,\n      \"property\": \"x\"\n    }, {\n      \"to\": pointer.point.y + (pointer.point.y - ref.point.y) * factor,\n      \"property\": \"y\"\n    }];\n    // Start animation\n    var animation = new Animation(inertia, animationOptions, this.getInertiaOption(io, \"move\", \"duration\"), this.getInertiaOption(io, \"move\", \"easing\")).start();\n    this._disposers.push(animation.events.on(\"animationended\", function (ev) {\n      inertia.done();\n    }));\n    // Add inertia object\n    io.inertias.setKey(\"move\", inertia);\n  };\n  /**\r\n   * Continues resizing of a `resizable` element after it is resized and\r\n   * released.\r\n   *\r\n   * **NOTE:** this is is just a placeholder function. No actual fucntionality\r\n   * is implemented, yet.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   */\n  Interaction.prototype.handleResizeInertia = function (io, pointer) {\n    // Some day, folks. Some day...\n  };\n  /**\r\n   * Recalculates element's position and size based on position of\r\n   * all its related pointers.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io  Element\r\n   * @param ev  Original event\r\n   */\n  Interaction.prototype.handleTransform = function (io, ev) {\n    // Get primary pointer and its respective points\n    var pointer1 = io.downPointers.getIndex(0);\n    var point1 = null;\n    var startPoint1 = null;\n    if (pointer1) {\n      point1 = pointer1.point;\n      startPoint1 = pointer1.startPoint;\n    }\n    // Init secondary pointer\n    var pointer2;\n    var point2;\n    var startPoint2;\n    // Use center of the sprite to simulate \"second\" point of touch\n    point2 = {\n      \"x\": io.originalPosition.x,\n      \"y\": io.originalPosition.y\n    };\n    startPoint2 = point2;\n    // Determine if it's a sinngle pointer or multi\n    var singlePoint = true;\n    for (var i = 1; i < io.downPointers.length; i++) {\n      // Get pointer\n      var nextPointer = io.downPointers.getIndex(i);\n      // Doublecheck if it's not the same pointer by comparing original position\n      if (startPoint1.x != nextPointer.startPoint.x && startPoint1.y != nextPointer.startPoint.y) {\n        // Several pointers down\n        singlePoint = false;\n        // Get second pointer\n        pointer2 = nextPointer;\n        point2 = pointer2.point;\n        startPoint2 = pointer2.startPoint;\n        // Stop looking\n        break;\n      }\n    }\n    // Primary touch point moved?\n    var pointer1Moved = pointer1 && this.moved(pointer1, 0);\n    // Report DRAG_START if necessary\n    if (io.draggable && pointer1 && pointer1.dragStartEvents && pointer1.dragStartEvents.length && pointer1Moved) {\n      if (io.events.isEnabled(\"dragstart\") && !system.isPaused) {\n        io.events.dispatchImmediately(\"dragstart\", pointer1.dragStartEvents.shift());\n      }\n      //delete pointer1.dragStartEvents;\n    }\n    // Determine what we do in order of superiority\n    if (singlePoint && io.draggable) {\n      // We have only one pointer and the Sprite is draggable\n      // There's nothing else to be done - just move it\n      this.handleTransformMove(io, point1, startPoint1, ev, pointer1Moved, pointer1.touch);\n      if (this.shouldCancelHovers(pointer1) && this.moved(pointer1, this.getHitOption(io, \"hitTolerance\"))) {\n        this.cancelAllHovers(ev);\n      }\n    } else {\n      // Check if second touch point moved\n      var pointer2Moved = pointer2 && this.moved(pointer2, 0);\n      if (this.shouldCancelHovers(pointer1) && this.moved(pointer1, this.getHitOption(io, \"hitTolerance\")) || this.shouldCancelHovers(pointer2) && this.moved(pointer2, this.getHitOption(io, \"hitTolerance\"))) {\n        this.cancelAllHovers(ev);\n      }\n      if (io.draggable && io.resizable) {\n        //this.handleTransformAll(io, point1, startPoint1, point2, startPoint2, ev, pointer1Moved && pointer2Moved);\n        this.handleTransformMove(io, point1, startPoint1, ev, pointer1Moved && pointer2Moved, pointer1.touch);\n        this.handleTransformResize(io, point1, startPoint1, point2, startPoint2, ev, pointer1Moved && pointer2Moved, pointer1.touch);\n      } else {\n        if (io.draggable) {\n          this.handleTransformMove(io, point1, startPoint1, ev, pointer1Moved, pointer1.touch);\n        }\n        if (io.resizable && (!singlePoint || ev.ctrlKey)) {\n          this.handleTransformResize(io, point1, startPoint1, point2, startPoint2, ev, pointer1Moved && pointer2Moved, pointer1.touch);\n        }\n      }\n    }\n  };\n  /**\r\n   * Handles movement of the dragged element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io            Element\r\n   * @param point         Current point of the pointer\r\n   * @param startPoint    Starting point of the pointer\r\n   * @param ev            Original event\r\n   * @param pointerMoved  Did pointer move?\r\n   */\n  Interaction.prototype.handleTransformMove = function (io, point, startPoint, ev, pointerMoved, touch) {\n    if (pointerMoved) {\n      if (io.events.isEnabled(\"drag\") && !system.isPaused && (!io.isTouchProtected || !touch)) {\n        var imev = {\n          type: \"drag\",\n          target: io,\n          event: ev,\n          shift: {\n            \"x\": point.x - startPoint.x,\n            \"y\": point.y - startPoint.y\n          },\n          startPoint: startPoint,\n          point: point,\n          touch: touch\n        };\n        io.events.dispatchImmediately(\"drag\", imev);\n      }\n    }\n  };\n  /**\r\n   * Handles resizing of the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io            Element\r\n   * @param point1        Current position of reference point #1\r\n   * @param startPoint1   Original position of reference point #1\r\n   * @param point2        Current position of reference point #2\r\n   * @param startPoint2   Original position of reference point #2\r\n   * @param ev            Original event\r\n   * @param pointerMoved  Did pointer move?\r\n   */\n  Interaction.prototype.handleTransformResize = function (io, point1, startPoint1, point2, startPoint2, ev, pointerMoved, touch) {\n    if (io.events.isEnabled(\"resize\") && !system.isPaused && (!io.isTouchProtected || !touch)) {\n      var imev = {\n        type: \"resize\",\n        target: io,\n        event: ev,\n        scale: $math.getScale(point1, startPoint1, point2, startPoint2),\n        startPoint1: startPoint1,\n        point1: point1,\n        startPoint2: startPoint2,\n        point2: point2,\n        touch: touch\n      };\n      io.events.dispatchImmediately(\"resize\", imev);\n    }\n  };\n  /**\r\n   * Handles all the preparations of the element when it starts to be dragged.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   * @param ev       Original event\r\n   */\n  Interaction.prototype.processDragStart = function (io, pointer, ev) {\n    // Add to draggedObjects\n    this.transformedObjects.moveValue(io);\n    if (this.shouldCancelHovers(pointer)) {\n      this.cancelAllHovers(ev);\n    }\n    // Report \"dragstart\"\n    var imev = {\n      type: \"dragstart\",\n      target: io,\n      event: ev,\n      touch: pointer ? pointer.touch : false\n    };\n    // Log object that we are starting to drag, so we can check against and\n    // avoid hovers on other objects that might be in the path of movement.\n    if (pointer) {\n      pointer.dragTarget = io;\n      //pointer.startPoint = pointer.point;\n    }\n    /**\r\n     * If pointer is set we will not fire the event until the pointer has\r\n     * actually moved. If it's not set we don't have to wait for anything, so we\r\n     * just fire off the event right away.\r\n     */\n    if (pointer && pointer.dragStartEvents) {\n      pointer.dragStartEvents.push(imev);\n    } else {\n      if (!system.isPaused) {\n        io.dispatchImmediately(\"dragstart\", imev);\n      }\n    }\n  };\n  /**\r\n   * Finishes up element drag operation.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   * @param ev       Original event\r\n   */\n  Interaction.prototype.processDragStop = function (io, pointer, ev) {\n    // Pointer set?\n    if (!pointer) {\n      pointer = this.getDragPointer(io);\n    }\n    // Unset drag object\n    if (pointer) {\n      pointer.dragTarget = undefined;\n    }\n    // Removed from transformedObjects\n    this.transformedObjects.removeValue(io);\n    // Unlock document\n    //this.unlockDocument();\n    // Report dragstop\n    if (!pointer || this.moved(pointer, 0)) {\n      if (io.events.isEnabled(\"dragstop\") && !system.isPaused) {\n        var imev = {\n          type: \"dragstop\",\n          target: io,\n          touch: pointer ? pointer.touch : false\n        };\n        io.events.dispatchImmediately(\"dragstop\", imev);\n      }\n    }\n  };\n  /**\r\n   * Handles all the preparations of the element when it starts to be resized.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   * @param ev       Original event\r\n   */\n  Interaction.prototype.processResizeStart = function (io, pointer, ev) {\n    // Add to draggedObjects\n    this.transformedObjects.moveValue(io);\n  };\n  /**\r\n   * Finishes up element drag operation.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   * @param ev       Original event\r\n   */\n  Interaction.prototype.processResizeStop = function (io, pointer, ev) {\n    // Removed from transformedObjects\n    this.transformedObjects.removeValue(io);\n  };\n  /**\r\n   * ==========================================================================\r\n   * Controls for InteractionObjects initiating directly\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n  /**\r\n   * Manually triggers drag start on the element. Could be useful in cases\r\n   * where tracking or dragging one element can also influence dragging another\r\n   * element.\r\n   *\r\n   * Passing in `pointer` reference is advisable. If not passed in it will try\r\n   * to determine which pointer to attach to. However, it's better to specify\r\n   * it explicitly.\r\n   *\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   */\n  Interaction.prototype.dragStart = function (io, pointer) {\n    if (!pointer) {\n      pointer = this.getDragPointer(io);\n    }\n    if (pointer) {\n      this.handleDown(io, pointer, pointer.lastDownEvent);\n    }\n  };\n  /**\r\n   * Manually ends drag on the element.\r\n   *\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   */\n  Interaction.prototype.dragStop = function (io, pointer, cancelled) {\n    if (!pointer) {\n      pointer = this.getDragPointer(io);\n    }\n    if (pointer && !cancelled) {\n      this.handleGlobalUp(pointer, pointer.lastUpEvent, cancelled);\n    }\n  };\n  /**\r\n   * This method uses a fuzzy logic to find the pointer to be used for dragging.\r\n   * Beware that this is not a rock-solid solution. If there are a few objects\r\n   * being dragged at the same time, you may get unexepected results.\r\n   *\r\n   * @param io  InteractionObject to get pointers from\r\n   * @return Pointer currently being used for dragging\r\n   */\n  Interaction.prototype.getDragPointer = function (io) {\n    if (io) {\n      // InteractionObject is supplied\n      // Use it's first down pointer\n      return io.downPointers.getIndex(0);\n    } else if (this.transformedObjects.length) {\n      // Use first dragged object\n      return this.getDragPointer(this.transformedObjects.getIndex(0));\n    } else {\n      return undefined;\n    }\n  };\n  /**\r\n   * ==========================================================================\r\n   * Utils\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n  /**\r\n   * Returns pointer id for the given event object.\r\n   *\r\n   * @param ev  Event\r\n   * @return Pointer ID\r\n   */\n  Interaction.prototype.getPointerId = function (ev) {\n    var id = \"\";\n    if ($type.hasValue(ev.identifier)) {\n      id = \"\" + ev.identifier;\n    } else if ($type.hasValue(ev.pointerId)) {\n      id = \"\" + ev.pointerId;\n    } else {\n      id = \"m\";\n    }\n    return id.replace(\"-\", \"\");\n  };\n  /**\r\n   * Returns a cursor position of the event.\r\n   *\r\n   * @param ev  Original event\r\n   * @return Event point\r\n   */\n  Interaction.prototype.getPointerPoint = function (ev) {\n    return {\n      \"x\": ev.clientX,\n      \"y\": ev.clientY\n    };\n  };\n  /**\r\n   * Returns [[Pointer]] object that is associated with the Event.\r\n   *\r\n   * If no such [[Pointer]] object exists, it is created.\r\n   *\r\n   * @param ev  Event\r\n   * @return Pointer\r\n   */\n  Interaction.prototype.getPointer = function (ev) {\n    // Get pointer id\n    var id = this.getPointerId(ev);\n    // Get current coordinates\n    var point = this.getPointerPoint(ev);\n    // Look for the pointer in the Dictionary if it maybe already exists\n    var pointer;\n    if (this.pointers.hasKey(id)) {\n      // We already have such pointer\n      pointer = this.pointers.getKey(id);\n      // We need this, because Edge reuses pointer ids across touch and mouse\n      pointer.touch = this.isPointerTouch(ev);\n      // Reset pointer\n      //pointer.point = point;\n    } else {\n      // Init pointer\n      pointer = {\n        \"id\": id,\n        //\"touch\": !(ev instanceof MouseEvent) || ((<any>ev).pointerType && (<any>ev).pointerType != \"pointer\"),\n        //\"touch\": !(ev instanceof MouseEvent) || ((<any>ev).pointerType && (<any>ev).pointerType != \"mouse\"),\n        \"touch\": this.isPointerTouch(ev),\n        \"startPoint\": point,\n        \"startTime\": $time.getTime(),\n        \"point\": point,\n        \"track\": [],\n        \"swipeCanceled\": false,\n        \"dragStartEvents\": []\n      };\n      // Add first breadcrumb\n      this.addBreadCrumb(pointer, point);\n      // Add for re-use later\n      this.pointers.setKey(id, pointer);\n    }\n    // Log last event\n    pointer.lastEvent = ev;\n    this.lastPointer = pointer;\n    return pointer;\n  };\n  /**\r\n   * Determines if pointer event originated from a touch pointer or mouse.\r\n   *\r\n   * @param ev  Original event\r\n   * @return Touch pointer?\r\n   */\n  Interaction.prototype.isPointerTouch = function (ev) {\n    if (typeof Touch !== \"undefined\" && ev instanceof Touch) {\n      return true;\n    } else if (typeof PointerEvent !== \"undefined\" && ev instanceof PointerEvent && $type.hasValue(ev.pointerType)) {\n      switch (ev.pointerType) {\n        case \"touch\":\n        case \"pen\":\n        case 2:\n          return true;\n        case \"mouse\":\n        case 4:\n          return false;\n        default:\n          return !(ev instanceof MouseEvent);\n      }\n    } else if ($type.hasValue(ev.type)) {\n      if (ev.type.match(/^mouse/)) {\n        return false;\n      }\n    }\n    return true;\n  };\n  /**\r\n   * Resets the poiner to original state, i.e. cleans movement information,\r\n   * starting point, etc.\r\n   *\r\n   * @param pointer Pointer\r\n   */\n  Interaction.prototype.resetPointer = function (pointer, ev) {\n    // Get current coordinates\n    var point = this.getPointerPoint(ev);\n    ;\n    pointer.startTime = $time.getTime();\n    pointer.startPoint = {\n      x: point.x,\n      y: point.y\n    };\n    pointer.point = {\n      x: point.x,\n      y: point.y\n    };\n    pointer.track = [];\n    pointer.swipeCanceled = false;\n    //clearTimeout(pointer.swipeTimeout);\n    //clearTimeout(pointer.holdTimeout);\n  };\n  /**\r\n   * Adds a \"breadcrumb\" point to the [[Pointer]] to log its movement path.\r\n   *\r\n   * @param pointer  Pointer\r\n   * @param point    Point coordinates\r\n   */\n  Interaction.prototype.addBreadCrumb = function (pointer, point) {\n    pointer.track.push({\n      \"timestamp\": $time.getTime(),\n      \"point\": point\n    });\n  };\n  /**\r\n   * Prepares the document for various touch-related operations.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Interaction.prototype.lockDocument = function () {\n    this.prepElement(this.body);\n  };\n  /**\r\n   * Restores document functionality.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Interaction.prototype.unlockDocument = function () {\n    if (this.transformedObjects.length == 0) {\n      this.restoreAllStyles(this.body);\n    }\n  };\n  /**\r\n   * Lock element (disable all touch)\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Interaction.prototype.lockElement = function (io) {\n    this.prepElement(io);\n  };\n  /**\r\n   * Restores element's functionality.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Interaction.prototype.unlockElement = function (io) {\n    this.restoreAllStyles(io);\n  };\n  /**\r\n   * Locks document's wheel scroll.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Interaction.prototype.lockWheel = function () {\n    window.addEventListener(this._pointerEvents.wheel, this.wheelLockEvent, this._passiveSupported ? {\n      passive: false\n    } : false);\n  };\n  /**\r\n   * Unlocks document's wheel scroll.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Interaction.prototype.unlockWheel = function () {\n    window.removeEventListener(this._pointerEvents.wheel, this.wheelLockEvent);\n  };\n  /**\r\n   * Checks if top element at pointer's position belongs to the SVG.\r\n   *\r\n   * @ignore Exlude from docs\r\n   * @param pointer  Pointer\r\n   * @param svg      The <svg> element\r\n   * @param id       A unique identifier of the object that is checking for locality\r\n   * @return Belongs to SVG\r\n   */\n  Interaction.prototype.isLocalElement = function (pointer, svg, id) {\n    var cached = this.getCache(\"local_pointer_\" + pointer.id);\n    if ($type.hasValue(cached)) {\n      return cached;\n    }\n    var doc = $dom.getRoot(svg) || document;\n    if (doc.elementFromPoint) {\n      var target = doc.elementFromPoint(pointer.point.x, pointer.point.y);\n      var local = target && $dom.contains(svg, target);\n      this.setCache(\"local_pointer_\" + pointer.id + \"_\" + id, local, 100);\n      return local;\n    }\n    return false;\n  };\n  /**\r\n   * A function that cancels mouse wheel scroll.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev  Event object\r\n   * @return Returns `false` to cancel\r\n   */\n  Interaction.prototype.wheelLockEvent = function (ev) {\n    ev.preventDefault();\n    return false;\n  };\n  /**\r\n   * Applies a set of styles to an element. Stores the original styles so they\r\n   * can be restored later.\r\n   *\r\n   * @ignore\r\n   * @param io      Element\r\n   */\n  Interaction.prototype.prepElement = function (io) {\n    var el = io.element;\n    if (el) {\n      // Define possible props\n      var props = [\"touchAction\", \"webkitTouchAction\", \"MozTouchAction\", \"MSTouchAction\", \"msTouchAction\", \"oTouchAction\", \"userSelect\", \"webkitUserSelect\", \"MozUserSelect\", \"MSUserSelect\", \"msUserSelect\", \"oUserSelect\", \"touchSelect\", \"webkitTouchSelect\", \"MozTouchSelect\", \"MSTouchSelect\", \"msTouchSelect\", \"oTouchSelect\", \"touchCallout\", \"webkitTouchCallout\", \"MozTouchCallout\", \"MSTouchCallout\", \"msTouchCallout\", \"oTouchCallout\", \"contentZooming\", \"webkitContentZooming\", \"MozContentZooming\", \"MSContentZooming\", \"msContentZooming\", \"oContentZooming\", \"userDrag\", \"webkitUserDrag\", \"MozUserDrag\", \"MSUserDrag\", \"msUserDrag\", \"oUserDrag\"];\n      for (var i = 0; i < props.length; i++) {\n        if (props[i] in el.style) {\n          this.setTemporaryStyle(io, props[i], \"none\");\n        }\n      }\n      // Remove iOS-specific selection;\n      this.setTemporaryStyle(io, \"tapHighlightColor\", \"rgba(0, 0, 0, 0)\");\n      //this.setTemporaryStyle(io, \"webkitOverflowScrolling\", \"none\");\n    }\n  };\n  /**\r\n   * Restores replaced styles\r\n   *\r\n   * @ignore\r\n   * @param  io  Element\r\n   */\n  Interaction.prototype.unprepElement = function (io) {\n    var el = io.element;\n    if (el) {\n      // Define possible props\n      var props = [\"touchAction\", \"webkitTouchAction\", \"MozTouchAction\", \"MSTouchAction\", \"msTouchAction\", \"oTouchAction\", \"userSelect\", \"webkitUserSelect\", \"MozUserSelect\", \"MSUserSelect\", \"msUserSelect\", \"oUserSelect\", \"touchSelect\", \"webkitTouchSelect\", \"MozTouchSelect\", \"MSTouchSelect\", \"msTouchSelect\", \"oTouchSelect\", \"touchCallout\", \"webkitTouchCallout\", \"MozTouchCallout\", \"MSTouchCallout\", \"msTouchCallout\", \"oTouchCallout\", \"contentZooming\", \"webkitContentZooming\", \"MozContentZooming\", \"MSContentZooming\", \"msContentZooming\", \"oContentZooming\", \"userDrag\", \"webkitUserDrag\", \"MozUserDrag\", \"MSUserDrag\", \"msUserDrag\", \"oUserDrag\"];\n      for (var i = 0; i < props.length; i++) {\n        if (props[i] in el.style) {\n          this.restoreStyle(io, props[i]);\n        }\n      }\n      // Remove iOS-specific selection;\n      this.restoreStyle(io, \"tapHighlightColor\");\n      //this.restoreStyle(io, \"webkitOverflowScrolling\");\n    }\n  };\n  /**\r\n   * Returns an option associated with hit events.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io      Element\r\n   * @param option  Option key\r\n   * @return Option value\r\n   */\n  Interaction.prototype.getHitOption = function (io, option) {\n    var res = io.hitOptions[option];\n    if (typeof res === \"undefined\") {\n      res = this.hitOptions[option];\n    }\n    return res;\n  };\n  /**\r\n   * Returns an option associated with hover events.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io      Element\r\n   * @param option  Option key\r\n   * @return Option value\r\n   */\n  Interaction.prototype.getHoverOption = function (io, option) {\n    var res = io.hoverOptions[option];\n    if (typeof res === \"undefined\") {\n      res = this.hoverOptions[option];\n    }\n    return res;\n  };\n  /**\r\n   * Returns an option associated with swipe events.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io      Element\r\n   * @param option  Option key\r\n   * @return Option value\r\n   */\n  Interaction.prototype.getSwipeOption = function (io, option) {\n    var res = io.swipeOptions[option];\n    if (typeof res === \"undefined\") {\n      res = this.swipeOptions[option];\n    }\n    return res;\n  };\n  /**\r\n   * Returns an option for keyboard.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io      Element\r\n   * @param option  Option key\r\n   * @return Option value\r\n   */\n  Interaction.prototype.getKeyboardOption = function (io, option) {\n    var res = io.keyboardOptions[option];\n    if (typeof res === \"undefined\") {\n      res = this.keyboardOptions[option];\n    }\n    return res;\n  };\n  /**\r\n   * Returns an option for mouse.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io      Element\r\n   * @param option  Option key\r\n   * @return Option value\r\n   */\n  Interaction.prototype.getMouseOption = function (io, option) {\n    var res = io.mouseOptions[option];\n    if (typeof res === \"undefined\") {\n      res = this.mouseOptions[option];\n    }\n    return res;\n  };\n  /**\r\n   * Returns an option associated with inertia.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io      Element\r\n   * @param type    Inertia type\r\n   * @param option  Option key\r\n   * @return Option value\r\n   */\n  Interaction.prototype.getInertiaOption = function (io, type, option) {\n    var options = io.inertiaOptions.getKey(type);\n    var res;\n    if (options && $type.hasValue(options[option])) {\n      res = options[option];\n    } else {\n      res = this.inertiaOptions.getKey(type)[option];\n    }\n    return res;\n  };\n  /**\r\n   * Stops currently going on inertia. Useful if inertia is currently being\r\n   * animated and the object is being interacted with.\r\n   *\r\n   * @param io Element\r\n   */\n  Interaction.prototype.stopInertia = function (io) {\n    var x;\n    var inertias = [\"move\", \"resize\"];\n    for (var i = 0; i < inertias.length; i++) {\n      x = inertias[i];\n      if (io.inertias.hasKey(x)) {\n        var inertia = io.inertias.getKey(x);\n        if (inertia) {\n          inertia.dispose();\n          //io.inertiaAnimations.removeKey(x);\n          //this.processDragStop(io);\n          continue;\n        }\n      }\n    }\n  };\n  /**\r\n   * Check if swiping is currently being performed on an object.\r\n   *\r\n   * @param io       Element\r\n   * @param pointer  Pointer to check\r\n   * @return `true` if swiping\r\n   */\n  Interaction.prototype.swiping = function (io, pointer) {\n    var now = $time.getTime();\n    if (pointer.swipeCanceled || !io.swipeable) {\n      return false;\n    } else if (Math.abs(pointer.startPoint.y - pointer.point.y) < this.getSwipeOption(io, \"verticalThreshold\") && pointer.startTime > now - this.getSwipeOption(io, \"time\")) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  /**\r\n   * Returns `true` if a successfull swipe action was performed on an element.\r\n   *\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   * @return Swiped?\r\n   */\n  Interaction.prototype.swiped = function (io, pointer) {\n    var now = $time.getTime();\n    if (pointer.swipeCanceled) {\n      return false;\n    } else if (Math.abs(pointer.startPoint.x - pointer.point.x) > this.getSwipeOption(io, \"horizontalThreshold\") && Math.abs(pointer.startPoint.y - pointer.point.y) < this.getSwipeOption(io, \"verticalThreshold\") && pointer.startTime > now - this.getSwipeOption(io, \"time\")) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  /**\r\n   * Applies style to mouse cursor based on its stage in relation to\r\n   * [[InteractionObject]].\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param Element\r\n   */\n  Interaction.prototype.applyCursorOverStyle = function (io) {\n    // Get sprite's cursor ooptions\n    var options = io.cursorOptions;\n    if (!$type.hasValue(options.overStyle)) {\n      return;\n    }\n    // Apply cursor down styles\n    for (var i = 0; i < options.overStyle.length; i++) {\n      $dom.setStyle(io.element, options.overStyle[i].property, options.overStyle[i].value);\n    }\n  };\n  /**\r\n   * Applies style to mouse cursor based on its stage in relation to\r\n   * [[InteractionObject]].\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   */\n  Interaction.prototype.applyCursorDownStyle = function (io, pointer) {\n    // Not applicable for touch pointers since they don't display a cursor\n    if (pointer && pointer.touch) {\n      return;\n    }\n    var downStyle = io.cursorOptions.downStyle;\n    // Is down?\n    if (io.downPointers.contains(pointer) && $type.hasValue(downStyle)) {\n      // Apply cursor down styles\n      for (var i = 0; i < downStyle.length; i++) {\n        this.setTemporaryStyle(this.body, downStyle[i].property, downStyle[i].value);\n        this.setTemporaryStyle(io, downStyle[i].property, downStyle[i].value);\n      }\n    }\n  };\n  /**\r\n   * Restores original cursor style for the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param io       Element\r\n   * @param pointer  Pointer\r\n   */\n  Interaction.prototype.restoreCursorDownStyle = function (io, pointer) {\n    // Not applicable for touch pointers since they don't display a cursor\n    if (pointer && pointer.touch) {\n      return;\n    }\n    var downStyle = io.cursorOptions.downStyle;\n    // Is down?\n    if (io.downPointers.contains(pointer) && $type.hasValue(downStyle)) {\n      // Apply cursor down styles\n      for (var i = 0; i < downStyle.length; i++) {\n        this.restoreStyle(this.body, downStyle[i].property);\n        this.restoreStyle(io, downStyle[i].property);\n      }\n    }\n  };\n  /**\r\n   * Sets style on the body of the document.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param style  Style definitions\r\n   */\n  Interaction.prototype.setGlobalStyle = function (style) {\n    var body = getInteraction().body;\n    var styles = $type.isArray(style) ? style : [style];\n    for (var i = 0; i < styles.length; i++) {\n      this.setTemporaryStyle(body, styles[i].property, styles[i].value);\n    }\n  };\n  /**\r\n   * Restores style on the body of the document.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param style  Style definitions\r\n   */\n  Interaction.prototype.restoreGlobalStyle = function (style) {\n    var body = getInteraction().body;\n    var styles = $type.isArray(style) ? style : [style];\n    for (var i = 0; i < styles.length; i++) {\n      this.restoreStyle(body, styles[i].property);\n    }\n  };\n  /**\r\n   * Checks if element is a non-cahrt element.\r\n   *\r\n   * @param io  InteractionObject\r\n   * @return Global element?\r\n   */\n  Interaction.prototype.isGlobalElement = function (io) {\n    return document.body === io.element;\n  };\n  /**\r\n   * Checks if pointer has moved since it was created.\r\n   *\r\n   * @param pointer    Pointer\r\n   * @param tolerance  Tolerance in pixels\r\n   * @param minTime    Minimum time required for the pointer to be down to be considered moved\r\n   * @return `true` if the pointer has moved\r\n   */\n  Interaction.prototype.moved = function (pointer, tolerance, minTime) {\n    /*// If there was more time, we don't care if cursor actually moved\r\n    let duration = $time.getTime() - pointer.startTime;\r\n    if ($type.hasValue(minTime) && (minTime > duration)) {\r\n        return false;\r\n    }*/\n    if (minTime === void 0) {\n      minTime = 300;\n    }\n    // That was quick measure shift\n    var shift = this.getShift(pointer);\n    return Math.abs(shift.x) > tolerance || Math.abs(shift.y) > tolerance;\n  };\n  /**\r\n   * Returns if pointer is \"old\", meaning it has been pressing for more than\r\n   * X milliseconds.\r\n   *\r\n   * @ignore\r\n   * @param pointer  Pointer\r\n   * @param minTime  Minimum time to consider pointer old\r\n   * @return {boolean}\r\n   */\n  Interaction.prototype.old = function (pointer, minTime) {\n    if (minTime === void 0) {\n      minTime = 300;\n    }\n    return $time.getTime() - pointer.startTime > minTime;\n  };\n  /**\r\n   * Returns total a shift in pointers coordinates between its original\r\n   * position and now.\r\n   *\r\n   * @param pointer  Pointer\r\n   * @return Shift in coordinates (x/y)\r\n   */\n  Interaction.prototype.getShift = function (pointer) {\n    return {\n      \"x\": pointer.startPoint.x - pointer.point.x,\n      \"y\": pointer.startPoint.y - pointer.point.y\n    };\n  };\n  /**\r\n   * Returns a point from [[Pointer]]'s move history at a certain timetamp.\r\n   *\r\n   * @param pointer    Pointer\r\n   * @param timestamp  Timestamp\r\n   * @return Point\r\n   */\n  Interaction.prototype.getTrailPoint = function (pointer, timestamp) {\n    var res;\n    for (var i = 0; i < pointer.track.length; i++) {\n      if (pointer.track[i].timestamp >= timestamp) {\n        res = pointer.track[i];\n        break;\n      }\n    }\n    return res;\n  };\n  /**\r\n   * Checks if same pointer already exists in the list.\r\n   *\r\n   * @param list     List to check agains\r\n   * @param pointer  Pointer\r\n   * @return Exists?\r\n   */\n  Interaction.prototype.pointerExists = function (list, pointer) {\n    var exists = false;\n    list.each(function (item) {\n      if (item == pointer) {\n        return;\n      }\n      exists = item.point.x == pointer.point.x && item.point.y == pointer.point.y;\n    });\n    return exists;\n  };\n  /**\r\n   * Returns an [[InteractionObject]] representation of a DOM element.\r\n   *\r\n   * You can use this on any HTML or SVG element, to add interactive features\r\n   * to it.\r\n   *\r\n   * @param element  Element\r\n   * @return InteractionObject\r\n   */\n  Interaction.prototype.getInteraction = function (element) {\n    return new InteractionObject(element);\n  };\n  /**\r\n   * Sets a style property on an element. Stores original value to be restored\r\n   * later with [[restoreStyle]].\r\n   *\r\n   * @see {@link restoreStyle}\r\n   * @param io        Element\r\n   * @param property  Property\r\n   * @param value     Value\r\n   */\n  Interaction.prototype.setTemporaryStyle = function (io, property, value) {\n    // Get element\n    //let el = io.element.tagName == \"g\" ? <SVGSVGElement>io.element.parentNode : io.element;\n    var el = io.element;\n    // Save original property if it is set and hasn't been saved before already\n    if ($type.hasValue(el.style[property]) && !io.replacedStyles.hasKey(property)) {\n      io.replacedStyles.setKey(property, el.style[property]);\n    }\n    // Replace with the new one\n    $dom.setStyle(el, property, value);\n  };\n  /**\r\n   * Restores specific style on an element.\r\n   *\r\n   * @param io        Element\r\n   * @param property  Style property\r\n   */\n  Interaction.prototype.restoreStyle = function (io, property) {\n    // Reset style\n    if (io.replacedStyles.hasKey(property)) {\n      io.element.style[property] = io.replacedStyles.getKey(property);\n      io.replacedStyles.removeKey(property);\n    } else {\n      delete io.element.style[property];\n    }\n  };\n  /**\r\n   * Restore temporarily reset styles on an element.\r\n   *\r\n   * @param io Element\r\n   */\n  Interaction.prototype.restoreAllStyles = function (io) {\n    $iter.each(io.replacedStyles.iterator(), function (a) {\n      var key = a[0];\n      var value = a[1];\n      io.element.style[key] = value;\n      io.replacedStyles.removeKey(key);\n    });\n  };\n  /**\r\n   * Disposes this object and cleans up after itself.\r\n   */\n  Interaction.prototype.dispose = function () {\n    if (!this.isDisposed()) {\n      _super.prototype.dispose.call(this);\n      this.restoreAllStyles(this.body);\n      this.unlockWheel();\n    }\n  };\n  // @ts-ignore Used for debugging\n  Interaction.prototype.log = function (text, ev, io) {\n    var show = true;\n    if (show) {\n      // Touchlist?\n      if (ev.changedTouches) {\n        for (var i = 0; i < ev.changedTouches.length; i++) {\n          this.logTouch(text, ev.type, ev.changedTouches[i]);\n        }\n        return;\n      }\n      // Get type\n      var type = \"\";\n      if (ev.pointerType) {\n        switch (ev.pointerType) {\n          case 2:\n            type = \"touch\";\n            break;\n          case 4:\n            type = \"mouse\";\n            break;\n          default:\n            type = ev.pointerType;\n            break;\n        }\n      } else if (typeof TouchEvent != \"undefined\" && ev instanceof TouchEvent) {\n        type = \"touch\";\n      } else if (ev.type.match(/^mouse/)) {\n        type = \"mouse\";\n      } else {\n        type = \"???\";\n      }\n      // Get ID\n      var id = \"\";\n      if ($type.hasValue(ev.identifier)) {\n        id = ev.identifier;\n      } else if ($type.hasValue(ev.pointerId)) {\n        id = ev.pointerId;\n      } else {\n        id = \"???\";\n      }\n      if (io) {\n        console.log(text + \" (\" + io.uid + \")  \" + ev.type + \"  \" + type + \"  \" + id);\n      } else {\n        console.log(text + \"  \" + ev.type + \"  \" + type + \"  \" + id);\n      }\n    }\n  };\n  /**\r\n   * Checks whether there are currently any objects being transformed (dragged\r\n   * or resized).\r\n   *\r\n   * If `except` is set, that object will be ignored.\r\n   *\r\n   * @since 4.9.3\r\n   * @param   except  Ignore this object(s)\r\n   * @return          Objects are being transformed\r\n   */\n  Interaction.prototype.areTransformed = function (except) {\n    var count = this.transformedObjects.length;\n    if (except) {\n      var ex = $type.isArray(except) ? except : [except];\n      for (var i = 0; i < ex.length; i++) {\n        if (this.transformedObjects.contains(ex[i])) {\n          count--;\n        }\n      }\n    }\n    return count > 0;\n  };\n  /**\r\n   * Log.\r\n   */\n  Interaction.prototype.logTouch = function (text, type, ev) {\n    console.log(text + \"  \" + type + \"  \" + \"touch\" + \"  \" + ev.identifier);\n  };\n  Object.defineProperty(Interaction, \"passiveSupported\", {\n    /**\r\n     * Indicates if passive mode options is supported by this browser.\r\n     */\n    get: function () {\n      var _this = this;\n      if (this._passiveSupported == null) {\n        // Check for passive mode support\n        try {\n          var options_1 = Object.defineProperty({}, \"passive\", {\n            get: function () {\n              _this._passiveSupported = true;\n            }\n          });\n          window.addEventListener(\"test\", options_1, options_1);\n          window.removeEventListener(\"test\", options_1, options_1);\n        } catch (err) {\n          this._passiveSupported = false;\n        }\n      }\n      return this._passiveSupported;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Interaction;\n}(BaseObjectEvents);\nexport { Interaction };\nvar interaction = null;\n/**\r\n * Returns a single unified global instance of [[Interaction]].\r\n *\r\n * All code should use this function, rather than create their own instances\r\n * of [[Interaction]].\r\n */\nexport function getInteraction() {\n  if (interaction == null) {\n    interaction = new Interaction();\n  }\n  return interaction;\n}","map":{"version":3,"names":["__extends","BaseObjectEvents","List","Animation","MultiDisposer","InteractionObject","InteractionKeyboardObject","Dictionary","Inertia","addEventListener","keyboard","system","options","$ease","$math","$array","$dom","$iter","$type","$time","Interaction","_super","_this","call","_globalEventsAdded","_pointerEvents","_usePointerEventsOnly","_useTouchEventsOnly","_addHoverEvents","_passiveSupported","_delayedEvents","out","overObjects","downObjects","trackedObjects","transformedObjects","pointers","inertiaOptions","hitOptions","hoverOptions","swipeOptions","keyboardOptions","mouseOptions","className","body","getInteraction","document","_disposers","push","window","hasOwnProperty","pointerdown","pointerup","pointermove","pointercancel","pointerover","pointerout","matchMedia","matches","navigator","userAgent","match","fullFF","createElement","wheel","hasValue","onmousewheel","setKey","polyOut3","passiveSupported","applyTheme","prototype","debug","addGlobalEvents","ev","handleGlobalPointerDown","handleGlobalPointerMove","handleGlobalPointerUp","relatedTarget","buttons","which","handleDocumentLeave","handleGlobalTouchStart","handleGlobalTouchMove","handleGlobalTouchEnd","handleGlobalKeyDown","handleGlobalKeyUp","processClickable","io","processTouchable","processContextMenu","contextMenuDisabled","eventDisposers","hasKey","element","e","preventDefault","getKey","dispose","processHoverable","hoverable","trackable","applyCursorOverStyle","handlePointerOut","handlePointerOver","disposer","removeKey","processMovable","draggable","swipeable","resizable","isGlobalElement","isTouchProtected","prepElement","processTrackable","moveValue","removeValue","processDraggable","processSwipeable","processResizable","processWheelable","wheelable","handleMouseWheel","passive","events","on","unlockWheel","lockWheel","processFocusable","focusable","tabindex","handleFocus","handleBlur","handleFocusBlur","clickable","handlePointerDown","handleTouchDown","isFocused","isEnabled","isPaused","imev","type","target","event","dispatchImmediately","getHitOption","once","disableType","blur","sprite","enableType","focusedObject","isKey","disposerKey","ko","getEventKey","directionY","directionX","showTooltipOn","pointer","getPointer","point","getPointerPoint","touch","addBreadCrumb","handleGlobalMove","processDelayed","preventTouchAction","defaultPrevented","cancelled","handleGlobalUp","i","changedTouches","length","button","resetPointer","handleDown","handleOver","handleOut","deltaX","deltaY","mod","deltaMode","getMouseOption","WheelEvent","Math","round","wheelDeltaX","wheelDeltaY","Error","handleWheel","maybePreventDefault","handleHit","now","getTime","lastHit","undefined","lastHitPointer","soft","hoversPaused","shouldCancelHovers","areTransformed","moved","cancelAllHovers","overPointers","isRealHover","isHover","handleTrack","force","hasDelayedOut","old","behavior","getHoverOption","keepUntil","timeout","setTimeout","isDisposed","clear","delayedEvent","pop","inert","stopInertia","downPointers","applyCursorDownStyle","isDown","processDragStart","processResizeStart","sorted","values","slice","sort","x","y","pos","compareDocumentPosition","Node","DOCUMENT_POSITION_CONTAINED_BY","DOCUMENT_POSITION_CONTAINS","each","contains","handleUp","backwards","iterator","restoreCursorDownStyle","swiped","handleSwipe","handleInertia","processDragStop","processResizeStop","cancelable","getIndex","disableHoverOnTransform","target_1","eventTarget","lastEvent","reset","swiping","handleTransform","skipCheck","startPoint","shift","handleMoveInertia","handleResizeInertia","interaction","inertia","ref","getTrailPoint","getInertiaOption","lastUpEvent","factor","animationOptions","animation","start","done","inertias","pointer1","point1","startPoint1","pointer2","point2","startPoint2","originalPosition","singlePoint","nextPointer","pointer1Moved","dragStartEvents","handleTransformMove","pointer2Moved","handleTransformResize","ctrlKey","pointerMoved","scale","getScale","dragTarget","getDragPointer","dragStart","lastDownEvent","dragStop","getPointerId","id","identifier","pointerId","replace","clientX","clientY","isPointerTouch","lastPointer","Touch","PointerEvent","pointerType","MouseEvent","startTime","track","swipeCanceled","lockDocument","unlockDocument","restoreAllStyles","lockElement","unlockElement","wheelLockEvent","removeEventListener","isLocalElement","svg","cached","getCache","doc","getRoot","elementFromPoint","local","setCache","el","props","style","setTemporaryStyle","unprepElement","restoreStyle","option","res","getSwipeOption","getKeyboardOption","abs","cursorOptions","overStyle","setStyle","property","value","downStyle","setGlobalStyle","styles","isArray","restoreGlobalStyle","tolerance","minTime","getShift","timestamp","pointerExists","list","exists","item","replacedStyles","a","key","log","text","show","logTouch","TouchEvent","console","uid","except","count","ex","Object","defineProperty","get","options_1","err","enumerable","configurable"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/interaction/Interaction.js"],"sourcesContent":["/**\r\n * Interaction manages all aspects of user interaction - mouse move,\r\n * click, hover, drag events, touch gestures.\r\n *\r\n * [[InteractionObject]] elements that want to use certain events, must attach event\r\n * listeners to Interaction instance.\r\n *\r\n * Interaction itself will not modify [[InteractionObject]] elements, it will be up to\r\n * those elements to handle interaction information received via event triggers.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObjectEvents } from \"../Base\";\r\nimport { List } from \"../utils/List\";\r\nimport { Animation } from \"../utils/Animation\";\r\nimport { MultiDisposer } from \"../utils/Disposer\";\r\nimport { InteractionObject } from \"./InteractionObject\";\r\nimport { InteractionKeyboardObject } from \"./InteractionKeyboardObject\";\r\nimport { Dictionary } from \"../utils/Dictionary\";\r\nimport { Inertia } from \"./Inertia\";\r\nimport { addEventListener } from \"../utils/DOM\";\r\nimport { keyboard } from \"../utils/Keyboard\";\r\nimport { system } from \"./../System\";\r\nimport { options } from \"./../Options\";\r\nimport * as $ease from \"../utils/Ease\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $array from \"../utils/Array\";\r\nimport * as $dom from \"../utils/DOM\";\r\nimport * as $iter from \"../utils/Iterator\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $time from \"../utils/Time\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n* Interaction manages all aspects of user interaction - mouse move,\r\n* click, hover, drag events, touch gestures.\r\n*\r\n* [[InteractionObject]] elements that want to use certain events, must attach event\r\n* listeners to Interaction instance.\r\n*\r\n* Interaction itself will not modify [[InteractionObject]] elements, it will be up to\r\n* those elements to handle interaction information received via event triggers.\r\n*\r\n* @see {@link IInteractionEvents} for a list of available events\r\n*/\r\nvar Interaction = /** @class */ (function (_super) {\r\n    __extends(Interaction, _super);\r\n    /**\r\n     * Constructor. Sets up universal document-wide move events to handle stuff\r\n     * outside particular chart container.\r\n     */\r\n    function Interaction() {\r\n        var _this = \r\n        // Call super\r\n        _super.call(this) || this;\r\n        /**\r\n         * An indicator of global events were already initialized.\r\n         */\r\n        _this._globalEventsAdded = false;\r\n        /**\r\n         * Holds which mouse event listeners to use.\r\n         */\r\n        _this._pointerEvents = {\r\n            \"pointerdown\": \"mousedown\",\r\n            \"pointerup\": \"mouseup\",\r\n            \"pointermove\": \"mousemove\",\r\n            \"pointercancel\": \"mouseup\",\r\n            \"pointerover\": \"mouseover\",\r\n            \"pointerout\": \"mouseout\",\r\n            \"wheel\": \"wheel\"\r\n        };\r\n        /**\r\n         * Indicates if Interaction should use only \"pointer\" type events, like\r\n         * \"pointermove\", available in all modern browsers, ignoring \"legacy\"\r\n         * events, like \"touchmove\".\r\n         */\r\n        _this._usePointerEventsOnly = false;\r\n        /**\r\n         * Use only touch events (for touch only devices such as tablets and phones)\r\n         */\r\n        _this._useTouchEventsOnly = false;\r\n        /**\r\n         * Add special hover events. Normally, touch device tap will also simulate\r\n         * hover event. On some devices (ahem iOS) we want to prevent that so that\r\n         * over/out events are not duplicated.\r\n         */\r\n        _this._addHoverEvents = true;\r\n        /**\r\n         * Indicates if passive mode options is supported by this browser.\r\n         */\r\n        _this._passiveSupported = false;\r\n        /**\r\n         * Holds list of delayed events\r\n         */\r\n        _this._delayedEvents = { out: [] };\r\n        /**\r\n         * List of objects that current have a pointer hovered over them.\r\n         */\r\n        _this.overObjects = new List();\r\n        /**\r\n         * List of objects that currently has a pressed pointer.\r\n         */\r\n        _this.downObjects = new List();\r\n        /**\r\n         * List of objects that need mouse position to be reported to them.\r\n         */\r\n        _this.trackedObjects = new List();\r\n        /**\r\n         * List of objects that are currently being dragged.\r\n         */\r\n        _this.transformedObjects = new List();\r\n        /**\r\n         * Holds all known pointers.\r\n         */\r\n        _this.pointers = new Dictionary();\r\n        /**\r\n         * Inertia options that need to be applied to after element drag, if it's\r\n         * `inert = true`.\r\n         *\r\n         * This is just a default, which can and probably will be overridden by\r\n         * actual elements.\r\n         */\r\n        _this.inertiaOptions = new Dictionary();\r\n        /**\r\n         * Default options for click events. These can be overridden in\r\n         * [[InteractionObject]].\r\n         */\r\n        _this.hitOptions = {\r\n            \"doubleHitTime\": 300,\r\n            //\"delayFirstHit\": false,\r\n            \"hitTolerance\": 10,\r\n            \"noFocus\": true\r\n        };\r\n        /**\r\n         * Default options for hover events. These can be overridden in\r\n         * [[InteractionObject]].\r\n         */\r\n        _this.hoverOptions = {\r\n            \"touchOutBehavior\": \"leave\",\r\n            \"touchOutDelay\": 1000\r\n        };\r\n        /**\r\n         * Default options for detecting a swipe gesture. These can be overridden in\r\n         * [[InteractionObject]].\r\n         */\r\n        _this.swipeOptions = {\r\n            \"time\": 500,\r\n            \"verticalThreshold\": 75,\r\n            \"horizontalThreshold\": 30\r\n        };\r\n        /**\r\n         * Default options for keyboard operations. These can be overridden in\r\n         * [[InteractionObject]].\r\n         */\r\n        _this.keyboardOptions = {\r\n            \"speed\": 0.1,\r\n            \"accelleration\": 1.2,\r\n            \"accellerationDelay\": 2000\r\n        };\r\n        /**\r\n         * Default options for keyboard operations. These can be overridden in\r\n         * [[InteractionObject]].\r\n         *\r\n         * @since 4.5.14\r\n         */\r\n        _this.mouseOptions = {\r\n            \"sensitivity\": 1\r\n        };\r\n        // Set class name\r\n        _this.className = \"Interaction\";\r\n        // Create InteractionObject for <body>\r\n        _this.body = _this.getInteraction(document.body);\r\n        _this._disposers.push(_this.body);\r\n        // Detect browser capabilities and determine what event listeners to use\r\n        if (window.hasOwnProperty(\"PointerEvent\")) {\r\n            // IE10+/Edge without touch controls enabled\r\n            _this._pointerEvents.pointerdown = \"pointerdown\";\r\n            _this._pointerEvents.pointerup = \"pointerup\";\r\n            _this._pointerEvents.pointermove = \"pointermove\";\r\n            _this._pointerEvents.pointercancel = \"pointercancel\";\r\n            _this._pointerEvents.pointerover = \"pointerover\";\r\n            _this._pointerEvents.pointerout = \"pointerout\";\r\n            //this._usePointerEventsOnly = true;\r\n        }\r\n        else if (window.hasOwnProperty(\"MSPointerEvent\")) {\r\n            // IE9\r\n            _this._pointerEvents.pointerdown = \"MSPointerDown\";\r\n            _this._pointerEvents.pointerup = \"MSPointerUp\";\r\n            _this._pointerEvents.pointermove = \"MSPointerMove\";\r\n            _this._pointerEvents.pointercancel = \"MSPointerUp\";\r\n            _this._pointerEvents.pointerover = \"MSPointerOver\";\r\n            _this._pointerEvents.pointerout = \"MSPointerOut\";\r\n            //this._usePointerEventsOnly = true;\r\n        }\r\n        else if ((typeof matchMedia !== \"undefined\") && matchMedia('(pointer:fine)').matches) {\r\n            // This is only for Safari as it does not support PointerEvent\r\n            // Do nothing and let it use regular `mouse*` events\r\n            // Hi Apple ;)\r\n            // Additionally disable hover events for iOS devices\r\n            if ('ontouchstart' in window) {\r\n                _this._addHoverEvents = false;\r\n                _this._useTouchEventsOnly = true;\r\n            }\r\n        }\r\n        else if (window.navigator.userAgent.match(/MSIE /)) {\r\n            // Oh looky, an MSIE that does not support PointerEvent. Hi granpa IE9!\r\n            _this._usePointerEventsOnly = true;\r\n        }\r\n        else if (_this.fullFF()) {\r\n            // Old FF, let's use regular events.\r\n            // (Newer FFs would be detected by the PointerEvent availability check)\r\n            _this._usePointerEventsOnly = true;\r\n        }\r\n        else {\r\n            // Uses defaults for normal browsers\r\n            // We also assume that this must be a touch device that does not have\r\n            // any pointer events\r\n            _this._useTouchEventsOnly = true;\r\n        }\r\n        // Detect if device has a mouse\r\n        // This is turning out to be not reliable\r\n        // @todo remove\r\n        /*if (!window.navigator.msPointerEnabled && (typeof matchMedia !== \"undefined\") && !matchMedia('(pointer:fine)').matches && !this.fullFF()) {\r\n            this._useTouchEventsOnly = true;\r\n        }*/\r\n        // Detect proper mouse wheel events\r\n        if (\"onwheel\" in document.createElement(\"div\")) {\r\n            // Modern browsers\r\n            _this._pointerEvents.wheel = \"wheel\";\r\n        }\r\n        else if ($type.hasValue(document.onmousewheel)) {\r\n            // Webkit and IE support at least \"mousewheel\"\r\n            _this._pointerEvents.wheel = \"mousewheel\";\r\n        }\r\n        // Set up default inertia options\r\n        _this.inertiaOptions.setKey(\"move\", {\r\n            \"time\": 100,\r\n            \"duration\": 500,\r\n            \"factor\": 1,\r\n            \"easing\": $ease.polyOut3\r\n        });\r\n        _this.inertiaOptions.setKey(\"resize\", {\r\n            \"time\": 100,\r\n            \"duration\": 500,\r\n            \"factor\": 1,\r\n            \"easing\": $ease.polyOut3\r\n        });\r\n        // Set the passive mode support\r\n        _this._passiveSupported = Interaction.passiveSupported;\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * This is a nasty detection for Firefox. The reason why we have is that\r\n     * Firefox ESR version does not support matchMedia correctly.\r\n     *\r\n     * On iOS, Firefox uses different userAgent, so we don't have to detect iOS.\r\n     *\r\n     * @return Full Firefox?\r\n     */\r\n    Interaction.prototype.fullFF = function () {\r\n        return (window.navigator.userAgent.match(/Firefox/)) && !(window.navigator.userAgent.match(/Android/));\r\n    };\r\n    Interaction.prototype.debug = function () { };\r\n    /**\r\n     * ==========================================================================\r\n     * Processing\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Sets up global events.\r\n     *\r\n     * We need this so that we can track drag movement beyond chart's container.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Interaction.prototype.addGlobalEvents = function () {\r\n        var _this = this;\r\n        if (!this._globalEventsAdded) {\r\n            if (!this._useTouchEventsOnly) {\r\n                this._disposers.push(addEventListener(document, this._pointerEvents.pointerdown, function (ev) { _this.handleGlobalPointerDown(ev); }));\r\n                this._disposers.push(addEventListener(document, this._pointerEvents.pointermove, function (ev) { _this.handleGlobalPointerMove(ev); }));\r\n                this._disposers.push(addEventListener(document, this._pointerEvents.pointerup, function (ev) { _this.handleGlobalPointerUp(ev); }));\r\n                this._disposers.push(addEventListener(document, this._pointerEvents.pointercancel, function (ev) { _this.handleGlobalPointerUp(ev, true); }));\r\n                this._disposers.push(addEventListener(document, \"mouseenter\", function (ev) {\r\n                    if (!$type.hasValue(ev.relatedTarget) && (ev.buttons == 0 || ev.which == 0)) {\r\n                        _this.handleDocumentLeave(ev);\r\n                    }\r\n                }));\r\n            }\r\n            // No need to duplicate events for hubrid systems that support both\r\n            // pointer events and touch events. Touch events are need only for\r\n            // some touch-only systems, like Mobile Safari.\r\n            if (!this._usePointerEventsOnly) {\r\n                this._disposers.push(addEventListener(document, \"touchstart\", function (ev) { _this.handleGlobalTouchStart(ev); }));\r\n                this._disposers.push(addEventListener(document, \"touchmove\", function (ev) { _this.handleGlobalTouchMove(ev); }));\r\n                this._disposers.push(addEventListener(document, \"touchend\", function (ev) { _this.handleGlobalTouchEnd(ev); }));\r\n            }\r\n            this._disposers.push(addEventListener(document, \"keydown\", function (ev) { _this.handleGlobalKeyDown(ev); }));\r\n            this._disposers.push(addEventListener(document, \"keyup\", function (ev) { _this.handleGlobalKeyUp(ev); }));\r\n            this._globalEventsAdded = true;\r\n        }\r\n    };\r\n    /**\r\n     * Sets if [[InteractionObject]] is clickable.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io [[InteractionObject]] instance\r\n     */\r\n    Interaction.prototype.processClickable = function (io) {\r\n        // Add or remove touch events\r\n        this.processTouchable(io);\r\n    };\r\n    /**\r\n     * Sets if [[InteractionObject]] will display context menu when right-clicked.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io [[InteractionObject]] instance\r\n     */\r\n    Interaction.prototype.processContextMenu = function (io) {\r\n        if (io.contextMenuDisabled) {\r\n            if (!io.eventDisposers.hasKey(\"contextMenuDisabled\")) {\r\n                io.eventDisposers.setKey(\"contextMenuDisabled\", addEventListener(io.element, \"contextmenu\", function (e) {\r\n                    e.preventDefault();\r\n                }));\r\n            }\r\n        }\r\n        else {\r\n            if (io.eventDisposers.hasKey(\"contextMenuDisabled\")) {\r\n                io.eventDisposers.getKey(\"contextMenuDisabled\").dispose();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets if [[InteractionObject]] is hoverable.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io [[InteractionObject]] instance\r\n     */\r\n    Interaction.prototype.processHoverable = function (io) {\r\n        var _this = this;\r\n        if (io.hoverable || io.trackable) {\r\n            // Add global events\r\n            this.addGlobalEvents();\r\n            // Add hover styles\r\n            this.applyCursorOverStyle(io);\r\n            // Add local events\r\n            if (!io.eventDisposers.hasKey(\"hoverable\") && this._addHoverEvents) {\r\n                io.eventDisposers.setKey(\"hoverable\", new MultiDisposer([\r\n                    addEventListener(io.element, this._pointerEvents.pointerout, function (e) { return _this.handlePointerOut(io, e); }),\r\n                    addEventListener(io.element, this._pointerEvents.pointerover, function (e) { return _this.handlePointerOver(io, e); })\r\n                ]));\r\n            }\r\n            if (io.trackable) {\r\n                //sprite.addEventListener(\"touchmove\", this.handleTouchMove, false, this);\r\n            }\r\n        }\r\n        else {\r\n            var disposer = io.eventDisposers.getKey(\"hoverable\");\r\n            if (disposer != null) {\r\n                disposer.dispose();\r\n                io.eventDisposers.removeKey(\"hoverable\");\r\n            }\r\n        }\r\n        // Add or remove touch events\r\n        this.processTouchable(io);\r\n    };\r\n    /**\r\n     * Sets up [[InteractionObject]] as movable. Movable can be any\r\n     * transformation, e.g. drag, swipe, resize, track.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io  Element\r\n     */\r\n    Interaction.prototype.processMovable = function (io) {\r\n        // Add unified events\r\n        if (io.draggable || io.swipeable || io.trackable || io.resizable) {\r\n            // Prep the element\r\n            if (!this.isGlobalElement(io) && !io.isTouchProtected) {\r\n                this.prepElement(io);\r\n            }\r\n            // Add hover styles\r\n            this.applyCursorOverStyle(io);\r\n        }\r\n        // Add or remove touch events\r\n        this.processTouchable(io);\r\n    };\r\n    /**\r\n     * Checks if [[InteractionObject]] is trackable and sets relative events.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io  Element\r\n     */\r\n    Interaction.prototype.processTrackable = function (io) {\r\n        this.processHoverable(io);\r\n        this.processMovable(io);\r\n        if (io.trackable) {\r\n            this.trackedObjects.moveValue(io);\r\n        }\r\n        else {\r\n            this.trackedObjects.removeValue(io);\r\n        }\r\n    };\r\n    /**\r\n     * Checks if [[InteractionObject]] is draggable.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io  Element\r\n     */\r\n    Interaction.prototype.processDraggable = function (io) {\r\n        this.processMovable(io);\r\n    };\r\n    /**\r\n     * Checks if [[InteractionObject]] is swipeable and sets relative events.\r\n     *\r\n     * A swipe event is triggered when a horizontal drag of 75px or more (and\r\n     * less than 30px vertically) occurs within 700 milliseconds. This can be\r\n     * overridden in sprites [[swipeOptions]].\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io  Element\r\n     */\r\n    Interaction.prototype.processSwipeable = function (io) {\r\n        this.processMovable(io);\r\n    };\r\n    /**\r\n     * Checks if [[InteractionObject]] is resizable and attaches required events\r\n     * to it.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io  Element\r\n     */\r\n    Interaction.prototype.processResizable = function (io) {\r\n        this.processMovable(io);\r\n    };\r\n    /**\r\n     * Checks if [[InteractionObject]] is supposed to capture mouse wheel events\r\n     * and prepares it to catch those events.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io  Element\r\n     */\r\n    Interaction.prototype.processWheelable = function (io) {\r\n        var _this = this;\r\n        if (io.wheelable) {\r\n            //io.hoverable = true;\r\n            if (!io.eventDisposers.hasKey(\"wheelable\")) {\r\n                io.eventDisposers.setKey(\"wheelable\", new MultiDisposer([\r\n                    addEventListener(io.element, this._pointerEvents.wheel, function (e) { return _this.handleMouseWheel(io, e); }, this._passiveSupported ? { passive: false } : false),\r\n                    io.events.on(\"out\", function (e) {\r\n                        if (io.wheelable) {\r\n                            _this.unlockWheel();\r\n                        }\r\n                    }),\r\n                    io.events.on(\"over\", function (e) {\r\n                        //console.log(\"whelab over\")\r\n                        if (io.wheelable) {\r\n                            _this.lockWheel();\r\n                        }\r\n                    })\r\n                ]));\r\n            }\r\n        }\r\n        else {\r\n            var disposer = io.eventDisposers.getKey(\"wheelable\");\r\n            if (disposer != null) {\r\n                disposer.dispose();\r\n                io.eventDisposers.removeKey(\"wheelable\");\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Checks if [[InteractionObject]] is focusable. A focusable element is an\r\n     * element that will be highlighted when users presses TAB key. If the\r\n     * element is focusable, this function will attach relative focus/blur\r\n     * events to it.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io  Element\r\n     */\r\n    Interaction.prototype.processFocusable = function (io) {\r\n        var _this = this;\r\n        if (io.focusable === true && (io.tabindex > -1) && !this._useTouchEventsOnly) {\r\n            if (!io.eventDisposers.hasKey(\"focusable\")) {\r\n                io.eventDisposers.setKey(\"focusable\", new MultiDisposer([\r\n                    addEventListener(io.element, \"focus\", function (e) { return _this.handleFocus(io, e); }),\r\n                    addEventListener(io.element, \"blur\", function (e) { return _this.handleBlur(io, e); }),\r\n                    addEventListener(io.element, this._pointerEvents.pointerdown, function (e) { return _this.handleFocusBlur(io, e); }),\r\n                    addEventListener(io.element, \"touchstart\", function (e) { return _this.handleFocusBlur(io, e); }, this._passiveSupported ? { passive: false } : false)\r\n                ]));\r\n            }\r\n        }\r\n        else {\r\n            var disposer = io.eventDisposers.getKey(\"focusable\");\r\n            if (disposer != null) {\r\n                disposer.dispose();\r\n                io.eventDisposers.removeKey(\"focusable\");\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Checks if [[InteractionObject]] is \"touchable\". It means any interaction\r\n     * whatsoever: mouse click, touch screen tap, swipe, drag, resize, etc.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io  Element\r\n     */\r\n    Interaction.prototype.processTouchable = function (io) {\r\n        var _this = this;\r\n        // Add unified events\r\n        if (io.clickable || io.hoverable || io.trackable || io.draggable || io.swipeable || io.resizable) {\r\n            // Add global events\r\n            this.addGlobalEvents();\r\n            // Add local events\r\n            if (!io.eventDisposers.hasKey(\"touchable\")) {\r\n                if (!this._useTouchEventsOnly && !this._usePointerEventsOnly) {\r\n                    io.eventDisposers.setKey(\"touchable\", new MultiDisposer([\r\n                        addEventListener(io.element, this._pointerEvents.pointerdown, function (e) { return _this.handlePointerDown(io, e); }),\r\n                        addEventListener(io.element, \"touchstart\", function (e) { return _this.handleTouchDown(io, e); }, this._passiveSupported ? { passive: false } : false)\r\n                    ]));\r\n                }\r\n                else if (!this._useTouchEventsOnly) {\r\n                    io.eventDisposers.setKey(\"touchable\", addEventListener(io.element, this._pointerEvents.pointerdown, function (e) { return _this.handlePointerDown(io, e); }));\r\n                }\r\n                else if (!this._usePointerEventsOnly) {\r\n                    io.eventDisposers.setKey(\"touchable\", addEventListener(io.element, \"touchstart\", function (e) { return _this.handleTouchDown(io, e); }, this._passiveSupported ? { passive: false } : false));\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var disposer = io.eventDisposers.getKey(\"touchable\");\r\n            if (disposer != null) {\r\n                disposer.dispose();\r\n                io.eventDisposers.removeKey(\"touchable\");\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * ==========================================================================\r\n     * Non-pointer events\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Dispatches \"focus\" event when element gains focus.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io  Element\r\n     * @param ev  Original event\r\n     */\r\n    Interaction.prototype.handleFocus = function (io, ev) {\r\n        if (!io.focusable) {\r\n            ev.preventDefault();\r\n            return;\r\n        }\r\n        io.isFocused = true;\r\n        if (io.events.isEnabled(\"focus\") && !system.isPaused) {\r\n            var imev = {\r\n                type: \"focus\",\r\n                target: io,\r\n                event: ev\r\n            };\r\n            io.events.dispatchImmediately(\"focus\", imev);\r\n        }\r\n    };\r\n    /**\r\n     * Used by regular click events to prevent focus if \"noFocus\" is set.\r\n     *\r\n     * This should not be called by \"focus\" handlers.\r\n     *\r\n     * @param io  Element\r\n     * @param ev  Original event\r\n     */\r\n    Interaction.prototype.handleFocusBlur = function (io, ev) {\r\n        if (io.focusable !== false && this.getHitOption(io, \"noFocus\")) {\r\n            io.events.once(\"focus\", function () {\r\n                io.events.disableType(\"blur\");\r\n                $dom.blur();\r\n                if (io.sprite) {\r\n                    io.sprite.handleBlur();\r\n                }\r\n                io.events.enableType(\"blur\");\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Dispatches \"blur\" event when element loses focus.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io  Element\r\n     * @param ev  Original event\r\n     */\r\n    Interaction.prototype.handleBlur = function (io, ev) {\r\n        if (!io.focusable) {\r\n            ev.preventDefault();\r\n            return;\r\n        }\r\n        io.isFocused = false;\r\n        if (io.events.isEnabled(\"blur\") && !system.isPaused) {\r\n            var imev = {\r\n                type: \"blur\",\r\n                target: io,\r\n                event: ev\r\n            };\r\n            io.events.dispatchImmediately(\"blur\", imev);\r\n        }\r\n    };\r\n    /**\r\n     * ==========================================================================\r\n     * Global keyboard-related even handlers\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Checks if there is an item that has currently focus and that they key is\r\n     * one of the directional keys. If both of the conditions are true, it\r\n     * creates an object to simulate movement of dragable element with keyboard.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param ev An original keyboard event\r\n     */\r\n    Interaction.prototype.handleGlobalKeyDown = function (ev) {\r\n        if (this.focusedObject) {\r\n            if (keyboard.isKey(ev, \"esc\")) {\r\n                // ESC removes focus\r\n                $dom.blur();\r\n            }\r\n            else if (this.focusedObject.draggable && keyboard.isKey(ev, [\"up\", \"down\", \"left\", \"right\"])) {\r\n                // Prevent scrolling of the document\r\n                ev.preventDefault();\r\n                // Get focused object\r\n                var io = this.focusedObject;\r\n                // Get particular key\r\n                var disposerKey = \"interactionKeyboardObject\";\r\n                // If such disposer already exists we know the event is going on so we\r\n                // just move on\r\n                if (io.eventDisposers.hasKey(disposerKey)) {\r\n                    return;\r\n                }\r\n                // Create a keyboard mover\r\n                var ko = new InteractionKeyboardObject(io, ev);\r\n                io.eventDisposers.setKey(disposerKey, ko);\r\n                switch (keyboard.getEventKey(ev)) {\r\n                    case \"up\":\r\n                        ko.directionY = -1;\r\n                        break;\r\n                    case \"down\":\r\n                        ko.directionY = 1;\r\n                        break;\r\n                    case \"left\":\r\n                        ko.directionX = -1;\r\n                        break;\r\n                    case \"right\":\r\n                        ko.directionX = 1;\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Dispatches related events when the keyboard key is realeasd.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param ev An original keyboard event\r\n     */\r\n    Interaction.prototype.handleGlobalKeyUp = function (ev) {\r\n        var disposerKey = \"interactionKeyboardObject\";\r\n        if (this.focusedObject) {\r\n            var disposer = this.focusedObject.eventDisposers.getKey(disposerKey);\r\n            if (disposer != null) {\r\n                // Prevent scrolling of the document\r\n                ev.preventDefault();\r\n                // Dispose stuff\r\n                disposer.dispose();\r\n                this.focusedObject.eventDisposers.removeKey(disposerKey);\r\n            }\r\n            // Does focused object have \"hit\" event?\r\n            var sprite = this.focusedObject.sprite;\r\n            if (keyboard.isKey(ev, \"enter\") && sprite) {\r\n                if (sprite.events.isEnabled(\"hit\") || sprite.events.isEnabled(\"toggled\")) {\r\n                    this.focusedObject.dispatchImmediately(\"hit\");\r\n                }\r\n                else if (sprite.showTooltipOn == \"hit\") {\r\n                    this.focusedObject.dispatchImmediately(\"up\");\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * ==========================================================================\r\n     * Global pointer-related even handlers\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Handler for a global \"pointermove\" event.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param ev Event object\r\n     */\r\n    Interaction.prototype.handleGlobalPointerMove = function (ev) {\r\n        // Get pointer\r\n        var pointer = this.getPointer(ev);\r\n        // Update current point position\r\n        pointer.point = this.getPointerPoint(ev);\r\n        // Prepare and fire global event\r\n        if (this.events.isEnabled(\"track\") && !system.isPaused) {\r\n            var imev = {\r\n                type: \"track\",\r\n                target: this,\r\n                event: ev,\r\n                pointer: pointer,\r\n                touch: pointer.touch\r\n            };\r\n            this.events.dispatchImmediately(\"track\", imev);\r\n        }\r\n        // Track\r\n        this.addBreadCrumb(pointer, pointer.point);\r\n        // Process further\r\n        this.handleGlobalMove(pointer, ev);\r\n    };\r\n    /**\r\n     * Handler for a global \"pointerdown\" event.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param ev Event object\r\n     */\r\n    Interaction.prototype.handleGlobalPointerDown = function (ev) {\r\n        // Remove delayed hovers\r\n        this.processDelayed();\r\n        // Get pointer\r\n        var pointer = this.getPointer(ev);\r\n        // Prepare and fire global event\r\n        if (this.events.isEnabled(\"down\") && !system.isPaused) {\r\n            var imev = {\r\n                type: \"down\",\r\n                target: this,\r\n                event: ev,\r\n                pointer: pointer,\r\n                touch: pointer.touch\r\n            };\r\n            this.events.dispatchImmediately(\"down\", imev);\r\n        }\r\n    };\r\n    /**\r\n     * Prevents touch action from firing.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param ev Event\r\n     */\r\n    Interaction.prototype.preventTouchAction = function (ev) {\r\n        if (!ev.defaultPrevented) {\r\n            ev.preventDefault();\r\n        }\r\n    };\r\n    /**\r\n     * Handler for a global \"pointerup\" event.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param ev Event object\r\n     */\r\n    Interaction.prototype.handleGlobalPointerUp = function (ev, cancelled) {\r\n        if (cancelled === void 0) { cancelled = false; }\r\n        // Get pointer\r\n        var pointer = this.getPointer(ev);\r\n        // Prepare and fire global event\r\n        if (this.events.isEnabled(\"up\") && !system.isPaused) {\r\n            var imev = {\r\n                type: \"up\",\r\n                target: this,\r\n                event: ev,\r\n                pointer: pointer,\r\n                touch: pointer.touch\r\n            };\r\n            this.events.dispatchImmediately(\"up\", imev);\r\n        }\r\n        // Process further\r\n        this.handleGlobalUp(pointer, ev, cancelled);\r\n    };\r\n    /**\r\n * ==========================================================================\r\n * Global touch-related even handlers\r\n * ==========================================================================\r\n */\r\n    /**\r\n     * Handler for a global \"touchmove\" event.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param ev Event object\r\n     */\r\n    Interaction.prototype.handleGlobalTouchMove = function (ev) {\r\n        // Process each changed touch point\r\n        for (var i = 0; i < ev.changedTouches.length; i++) {\r\n            // Get pointer\r\n            var pointer = this.getPointer(ev.changedTouches[i]);\r\n            // Update current point position\r\n            pointer.point = this.getPointerPoint(ev.changedTouches[i]);\r\n            // Prepare and fire global event\r\n            if (this.events.isEnabled(\"track\") && !system.isPaused) {\r\n                var imev = {\r\n                    type: \"track\",\r\n                    target: this,\r\n                    event: ev,\r\n                    pointer: pointer,\r\n                    touch: pointer.touch\r\n                };\r\n                this.events.dispatchImmediately(\"track\", imev);\r\n            }\r\n            // Track\r\n            this.addBreadCrumb(pointer, pointer.point);\r\n            // Process further\r\n            this.handleGlobalMove(pointer, ev);\r\n        }\r\n    };\r\n    /**\r\n     * Handler for a global \"touchstart\" event.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param ev Event object\r\n     */\r\n    Interaction.prototype.handleGlobalTouchStart = function (ev) {\r\n        // Remove delayed hovers\r\n        this.processDelayed();\r\n        // Process each changed touch point\r\n        for (var i = 0; i < ev.changedTouches.length; i++) {\r\n            // Get pointer\r\n            var pointer = this.getPointer(ev.changedTouches[i]);\r\n            // Prepare and fire global event\r\n            if (!this._usePointerEventsOnly && this.events.isEnabled(\"down\") && !system.isPaused) {\r\n                var imev = {\r\n                    type: \"down\",\r\n                    target: this,\r\n                    event: ev,\r\n                    pointer: pointer,\r\n                    touch: pointer.touch\r\n                };\r\n                this.events.dispatchImmediately(\"down\", imev);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Handler for a global \"touchend\" event.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param ev Event object\r\n     */\r\n    Interaction.prototype.handleGlobalTouchEnd = function (ev) {\r\n        // Process each changed touch point\r\n        for (var i = 0; i < ev.changedTouches.length; i++) {\r\n            // Get pointer\r\n            var pointer = this.getPointer(ev.changedTouches[i]);\r\n            // Prepare and fire global event\r\n            if (this.events.isEnabled(\"up\") && !system.isPaused) {\r\n                var imev = {\r\n                    type: \"up\",\r\n                    target: this,\r\n                    event: ev,\r\n                    pointer: pointer,\r\n                    touch: pointer.touch\r\n                };\r\n                this.events.dispatchImmediately(\"up\", imev);\r\n            }\r\n            // Handle element-related events\r\n            this.handleGlobalUp(pointer, ev);\r\n        }\r\n    };\r\n    /**\r\n     * ==========================================================================\r\n     * Element-specific pointer-related even handlers\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Handles event when pointer is over [[InteractionObject]] and button is\r\n     * pressed.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io  Element\r\n     * @param ev  Original event\r\n     */\r\n    Interaction.prototype.handlePointerDown = function (io, ev) {\r\n        // Stop further propagation so we don't get multiple triggers on hybrid\r\n        // devices (both mouse and touch capabilities)\r\n        //ev.preventDefault();\r\n        //ev.stopPropagation();\r\n        //if (ev.defaultPrevented) {\r\n        //}\r\n        // Get pointer\r\n        var pointer = this.getPointer(ev);\r\n        // Ignore if it's anything but mouse's primary button\r\n        if (!pointer.touch && ev.which != 1 && ev.which != 3) {\r\n            return;\r\n        }\r\n        // Set mouse button\r\n        pointer.button = ev.which;\r\n        // Reset pointer\r\n        this.resetPointer(pointer, ev);\r\n        // Process down\r\n        this.handleDown(io, pointer, ev);\r\n    };\r\n    /**\r\n     * Handles event when [[InteractionObject]] is hovered by a mouse pointer.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io  Element\r\n     * @param ev  Original event\r\n     */\r\n    Interaction.prototype.handlePointerOver = function (io, ev) {\r\n        // Get pointer\r\n        var pointer = this.getPointer(ev);\r\n        // Process down\r\n        this.handleOver(io, pointer, ev);\r\n    };\r\n    /**\r\n     * Handles event when [[InteractionObject]] loses hover from a mouse pointer.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io  Element\r\n     * @param ev  Original event\r\n     */\r\n    Interaction.prototype.handlePointerOut = function (io, ev) {\r\n        // Get pointer\r\n        var pointer = this.getPointer(ev);\r\n        // Process down\r\n        this.handleOut(io, pointer, ev);\r\n    };\r\n    /**\r\n     * Handles event when mouse wheel is crolled over the [[InteractionObject]].\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io  Element\r\n     * @param ev  Original event\r\n     * @todo Investigate more-cross browser stuff https://developer.mozilla.org/en-US/docs/Web/Events/wheel\r\n     */\r\n    Interaction.prototype.handleMouseWheel = function (io, ev) {\r\n        // Get pointer\r\n        var pointer = this.getPointer(ev);\r\n        // Update current point position\r\n        pointer.point = this.getPointerPoint(ev);\r\n        // Init delta values\r\n        var deltaX = 0, deltaY = 0;\r\n        // Set up modifier\r\n        // This is needed because FireFox reports wheel deltas in \"lines\" instead\r\n        // of pixels so we have to approximate pixel value\r\n        var mod = 1;\r\n        if (ev.deltaMode == 1) {\r\n            mod = 50;\r\n        }\r\n        // Adjust configurable sensitivity\r\n        mod *= this.getMouseOption(io, \"sensitivity\");\r\n        // Calculate deltas\r\n        if (ev instanceof WheelEvent) {\r\n            deltaX = Math.round((-1 * ev.wheelDeltaX) || (ev.deltaX * mod));\r\n            deltaY = Math.round((-1 * ev.wheelDeltaY) || (ev.deltaY * mod));\r\n        }\r\n        else {\r\n            throw new Error(\"Invalid event type\");\r\n        }\r\n        // Handle the event\r\n        this.handleWheel(io, pointer, deltaX, deltaY, ev);\r\n    };\r\n    /**\r\n     * ==========================================================================\r\n     * Element-specific touch-related even handlers\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n      * Handles an event when an [[InteractionObject]] is touched on a touch\r\n      * device.\r\n      *\r\n      * @ignore Exclude from docs\r\n      * @param io  Element\r\n      * @param ev  Original event\r\n      */\r\n    Interaction.prototype.handleTouchDown = function (io, ev) {\r\n        // Stop further propagation so we don't get multiple triggers on hybrid\r\n        // devices (both mouse and touch capabilities)\r\n        //this.maybePreventDefault(io, ev);\r\n        //return;\r\n        // Process each changed touch point\r\n        for (var i = 0; i < ev.changedTouches.length; i++) {\r\n            // Get pointer\r\n            var pointer = this.getPointer(ev.changedTouches[i]);\r\n            this.maybePreventDefault(io, ev, pointer);\r\n            // Reset pointer\r\n            this.resetPointer(pointer, ev.changedTouches[i]);\r\n            // Process down\r\n            this.handleDown(io, pointer, ev);\r\n        }\r\n    };\r\n    /**\r\n     * ==========================================================================\r\n     * Universal handlers\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Handles click/tap. Checks for doublehit.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io       Interaction object\r\n     * @param pointer  Pointer\r\n     * @param ev       Original event\r\n     */\r\n    Interaction.prototype.handleHit = function (io, pointer, ev) {\r\n        // Check if this is a double-hit\r\n        var now = $time.getTime();\r\n        if (io.lastHit && (io.lastHit >= (now - this.getHitOption(io, \"doubleHitTime\")))) {\r\n            // Yup - it's a double-hit\r\n            // Cancel the hit\r\n            //clearTimeout(io.lastHitPointer.hitTimeout);\r\n            // If it happened too fast it probably means that hybrid device just\r\n            // generated two events for the same tap\r\n            if ((now - io.lastHit) < 100) {\r\n                // Ignore\r\n                return;\r\n            }\r\n            // Clear last hit\r\n            io.lastHit = undefined;\r\n            io.lastHitPointer = undefined;\r\n            // Dispatch event\r\n            if (io.events.isEnabled(\"doublehit\") && !system.isPaused) {\r\n                var imev = {\r\n                    type: \"doublehit\",\r\n                    target: io,\r\n                    point: pointer.point,\r\n                    event: ev,\r\n                    touch: pointer.touch\r\n                };\r\n                io.events.dispatchImmediately(\"doublehit\", imev);\r\n            }\r\n        }\r\n        else {\r\n            // Log last hit\r\n            io.lastHit = now;\r\n            io.lastHitPointer = pointer;\r\n            if (pointer.button === 3) {\r\n                // Execute HIT now\r\n                if (io.events.isEnabled(\"rightclick\") && !system.isPaused) {\r\n                    var imev = {\r\n                        type: \"rightclick\",\r\n                        target: io,\r\n                        event: ev\r\n                    };\r\n                    io.events.dispatchImmediately(\"rightclick\", imev);\r\n                }\r\n            }\r\n            else {\r\n                if (io.events.isEnabled(\"hit\") && !system.isPaused) {\r\n                    var imev = {\r\n                        type: \"hit\",\r\n                        target: io,\r\n                        event: ev,\r\n                        point: pointer.point,\r\n                        touch: pointer.touch\r\n                    };\r\n                    io.events.dispatchImmediately(\"hit\", imev);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Handles pointer hovering over [[InteractionObject]].\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io       Interaction object\r\n     * @param pointer  Pointer\r\n     * @param ev       Original event\r\n     * @param soft     Invoked by helper function\r\n     */\r\n    Interaction.prototype.handleOver = function (io, pointer, ev, soft) {\r\n        if (soft === void 0) { soft = false; }\r\n        if (!io.hoverable) {\r\n            return;\r\n        }\r\n        var hoversPaused = false;\r\n        if (this.shouldCancelHovers(pointer) && this.areTransformed() && this.moved(pointer, this.getHitOption(io, \"hitTolerance\"))) {\r\n            hoversPaused = true;\r\n            this.cancelAllHovers(ev);\r\n        }\r\n        // Remove any delayed outs\r\n        this.processDelayed();\r\n        // Add pointer\r\n        io.overPointers.moveValue(pointer);\r\n        // Check if object is not yet hovered\r\n        if (!io.isRealHover) {\r\n            // Set element as hovered\r\n            if (!hoversPaused) {\r\n                io.isHover = true;\r\n                io.isRealHover = true;\r\n                this.overObjects.moveValue(io);\r\n            }\r\n            // Generate body track event. This is needed so that if element loads\r\n            // under unmoved mouse cursor, we still need all the actions that are\r\n            // required to happen to kick in.\r\n            this.handleTrack(this.body, pointer, ev, true);\r\n            // Event\r\n            if (io.events.isEnabled(\"over\") && !system.isPaused && !hoversPaused) {\r\n                var imev = {\r\n                    type: \"over\",\r\n                    target: io,\r\n                    event: ev,\r\n                    pointer: pointer,\r\n                    touch: pointer.touch\r\n                };\r\n                io.events.dispatchImmediately(\"over\", imev);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Handles when [[InteractionObject]] is no longer hovered.\r\n     *\r\n     * If `soft = true`, this means that method is being invoked by some other\r\n     * code, not hard \"out\" function, like `handleUp` which implies we need to\r\n     * run additional checks before unhovering the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io       Interaction object\r\n     * @param pointer  Pointer\r\n     * @param ev       Original event\r\n     * @param soft     Invoked by helper function\r\n     * @param force    Force imediate out\r\n     */\r\n    Interaction.prototype.handleOut = function (io, pointer, ev, soft, force) {\r\n        var _this = this;\r\n        if (soft === void 0) { soft = false; }\r\n        if (force === void 0) { force = false; }\r\n        if (!io.hoverable) {\r\n            return;\r\n        }\r\n        // Remove pointer\r\n        io.overPointers.removeValue(pointer);\r\n        // Check if element is still hovered\r\n        if (io.isHover && (!io.hasDelayedOut || force)) {\r\n            // Should we run additional checks?\r\n            if (soft && io.overPointers.length) {\r\n                // There are still pointers hovering - don't do anything else and\r\n                // wait until either no over pointers are there or we get a hard out\r\n                // event.\r\n                return;\r\n            }\r\n            // Should we delay \"out\" if this is happening on a touch device?\r\n            if (pointer && pointer.touch && !force && !this.old(pointer)) {\r\n                // This is a touch pointer, and it hasn't moved, let's pretend\r\n                // the object is still hovered, and act as per \"behavior\" setting\r\n                var behavior = this.getHoverOption(io, \"touchOutBehavior\");\r\n                if (behavior == \"leave\") {\r\n                    // Set to \"leave\", so we do not execute any \"out\" event.\r\n                    // It will be handled by any other interaction that happens\r\n                    // afterwards.\r\n                    this._delayedEvents.out.push({\r\n                        type: \"out\",\r\n                        io: io,\r\n                        pointer: pointer,\r\n                        event: ev,\r\n                        keepUntil: $time.getTime() + 500\r\n                    });\r\n                    io.hasDelayedOut = true;\r\n                    return;\r\n                }\r\n                else if (behavior == \"delay\" && this.getHoverOption(io, \"touchOutDelay\")) {\r\n                    this._delayedEvents.out.push({\r\n                        type: \"out\",\r\n                        io: io,\r\n                        pointer: pointer,\r\n                        event: ev,\r\n                        keepUntil: $time.getTime() + 500,\r\n                        timeout: this.setTimeout(function () {\r\n                            _this.handleOut(io, pointer, ev, true);\r\n                        }, this.getHoverOption(io, \"touchOutDelay\"))\r\n                    });\r\n                    return;\r\n                }\r\n                else {\r\n                    // Nothing for \"remove\" - that's how it works \"out-of-the-box\"\r\n                }\r\n            }\r\n            // Set element as not hovered\r\n            io.isHover = false;\r\n            this.overObjects.removeValue(io);\r\n            // Invoke event\r\n            if (!io.isDisposed() && io.events.isEnabled(\"out\") && !system.isPaused) {\r\n                var imev = {\r\n                    type: \"out\",\r\n                    target: io,\r\n                    event: ev,\r\n                    pointer: pointer,\r\n                    touch: pointer.touch\r\n                };\r\n                io.events.dispatchImmediately(\"out\", imev);\r\n            }\r\n            // Reset object from lefover delayed outs, pointers\r\n            io.overPointers.clear();\r\n            io.hasDelayedOut = false;\r\n            // @todo (clean delayed)\r\n        }\r\n    };\r\n    /**\r\n     * Processes dalyed events, such as \"out\" event that was initiated for\r\n     * elements by touch.\r\n     */\r\n    Interaction.prototype.processDelayed = function () {\r\n        var delayedEvent;\r\n        while (true) {\r\n            delayedEvent = this._delayedEvents.out.pop();\r\n            if (!delayedEvent) {\r\n                break;\r\n            }\r\n            if (delayedEvent.timeout) {\r\n                delayedEvent.timeout.dispose();\r\n            }\r\n            this.handleOut(delayedEvent.io, delayedEvent.pointer, delayedEvent.event, false, true);\r\n        }\r\n    };\r\n    /**\r\n     * Performs tasks on pointer down.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io       Element\r\n     * @param pointer  Pointer\r\n     * @param ev       Original event\r\n     */\r\n    Interaction.prototype.handleDown = function (io, pointer, ev) {\r\n        // Need to prevent default event from happening on transformable objects\r\n        this.maybePreventDefault(io, ev, pointer);\r\n        // Stop inertia animations if they're currently being played out\r\n        if (io.inert) {\r\n            this.stopInertia(io);\r\n        }\r\n        // Trigger hover because some touch devices won't trigger over events\r\n        // on their own\r\n        this.handleOver(io, pointer, ev, true);\r\n        // Add pointer to list\r\n        io.downPointers.moveValue(pointer);\r\n        // Apply styles if necessary\r\n        this.applyCursorDownStyle(io, pointer);\r\n        // Check if object is already down\r\n        if (!io.isDown) {\r\n            // Lose focus if needed\r\n            if (io.focusable !== false && this.getHitOption(io, \"noFocus\") && this.focusedObject) {\r\n                $dom.blur();\r\n            }\r\n            // Set object as hovered\r\n            io.isDown = true;\r\n            this.downObjects.moveValue(io);\r\n            // Prep object for dragging and/or resizing\r\n            if (io.draggable) {\r\n                this.processDragStart(io, pointer, ev);\r\n            }\r\n            if (io.resizable) {\r\n                this.processResizeStart(io, pointer, ev);\r\n            }\r\n        }\r\n        // Dispatch \"down\" event\r\n        if (io.events.isEnabled(\"down\") && !system.isPaused) {\r\n            var imev = {\r\n                type: \"down\",\r\n                target: io,\r\n                event: ev,\r\n                pointer: pointer,\r\n                touch: pointer.touch\r\n            };\r\n            io.events.dispatchImmediately(\"down\", imev);\r\n        }\r\n    };\r\n    /**\r\n     * Performs tasks on pointer up.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param pointer  Pointer\r\n     * @param ev       Original event\r\n     */\r\n    Interaction.prototype.handleGlobalUp = function (pointer, ev, cancelled) {\r\n        var _this = this;\r\n        if (cancelled === void 0) { cancelled = false; }\r\n        var sorted = this.downObjects.values.slice();\r\n        sorted.sort(function (x, y) {\r\n            if (x && y) {\r\n                var pos = x.element.compareDocumentPosition(y.element);\r\n                if (pos & Node.DOCUMENT_POSITION_CONTAINED_BY) {\r\n                    return 1;\r\n                }\r\n                else if (pos & Node.DOCUMENT_POSITION_CONTAINS) {\r\n                    return -1;\r\n                }\r\n                else {\r\n                    return 0;\r\n                }\r\n            }\r\n            else {\r\n                return 0;\r\n            }\r\n        });\r\n        // Process all down objects\r\n        $array.each(sorted, function (io) {\r\n            // Check if this particular pointer is pressing down\r\n            // on object\r\n            if (io && io.downPointers.contains(pointer)) {\r\n                _this.handleUp(io, pointer, ev, cancelled);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Simulates all pointers being up once mouse leaves document area.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param ev       Original event\r\n     */\r\n    Interaction.prototype.handleDocumentLeave = function (ev) {\r\n        var _this = this;\r\n        // Process all down objects\r\n        $iter.each(this.downObjects.backwards().iterator(), function (io) {\r\n            io.downPointers.each(function (pointer) {\r\n                _this.handleUp(io, pointer, ev);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Handles when [[InteractionObject]] is no longer hovered.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io       Interaction object\r\n     * @param pointer  Pointer\r\n     * @param ev       Original event\r\n     */\r\n    Interaction.prototype.handleUp = function (io, pointer, ev, cancelled) {\r\n        if (cancelled === void 0) { cancelled = false; }\r\n        // Restore cursor style\r\n        this.restoreCursorDownStyle(io, pointer);\r\n        // Remove pointer from the list\r\n        io.downPointers.removeValue(pointer);\r\n        // Trigger out because some touch devices won't trigger out events\r\n        // on their own\r\n        if ((pointer && pointer.touch) || this._useTouchEventsOnly) {\r\n            this.handleOut(io, pointer, ev, true);\r\n        }\r\n        // Check if object still down\r\n        if (io.isDown) {\r\n            // Check if there are no other pointers hovering this element\r\n            if (io.downPointers.length == 0) {\r\n                // Set element as no longer down\r\n                io.isDown = false;\r\n                this.downObjects.removeValue(io);\r\n            }\r\n            // Dispatch \"up\" event\r\n            if (io.events.isEnabled(\"up\") && !system.isPaused && pointer) {\r\n                var imev = {\r\n                    type: \"up\",\r\n                    target: io,\r\n                    event: ev,\r\n                    pointer: pointer,\r\n                    touch: pointer.touch\r\n                };\r\n                io.events.dispatchImmediately(\"up\", imev);\r\n            }\r\n            // Check if this was not a cancelled event.\r\n            // If event was canelled (which might happen if gesture resulted in\r\n            // navigation or page scroll) there's no point in triggering hit and\r\n            // other actions.\r\n            if (!cancelled) {\r\n                // Handle swiping-related stuff\r\n                if (io.swipeable && this.swiped(io, pointer)) {\r\n                    // Swiped - nothing else should happen\r\n                    this.handleSwipe(io, pointer, ev);\r\n                }\r\n                else {\r\n                    // Check if it maybe a click\r\n                    if (io.clickable && !this.moved(pointer, this.getHitOption(io, \"hitTolerance\"))) {\r\n                        this.handleHit(io, pointer, ev);\r\n                    }\r\n                    // Handle inertia\r\n                    if (io.inert && this.moved(pointer, this.getHitOption(io, \"hitTolerance\"))) {\r\n                        this.handleInertia(io, pointer);\r\n                    }\r\n                    else if (io.draggable) {\r\n                        this.processDragStop(io, pointer, ev);\r\n                    }\r\n                    if (io.resizable) {\r\n                        this.processResizeStop(io, pointer, ev);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Checks if event needs to be prevented on draggable and such items, so that\r\n     * touch gestures like navigation and scroll do not kick in.\r\n     *\r\n     * @param io  Object\r\n     * @param ev  Event\r\n     */\r\n    Interaction.prototype.maybePreventDefault = function (io, ev, pointer) {\r\n        if ($type.hasValue(ev)\r\n            && (io.draggable || io.swipeable || io.trackable || io.resizable)\r\n            && !this.isGlobalElement(io)\r\n            && ev.cancelable !== false\r\n            && (!io.isTouchProtected || !pointer || !pointer.touch)) {\r\n            ev.preventDefault();\r\n        }\r\n    };\r\n    /**\r\n     * Cancels all hovers on all currently hovered objects.\r\n     *\r\n     * @param  pointer  Pointer\r\n     * @param  ev       Event\r\n     */\r\n    Interaction.prototype.cancelAllHovers = function (ev) {\r\n        var _this = this;\r\n        //this.overObjects.each((io) => {\r\n        $iter.each(this.overObjects.backwards().iterator(), function (io) {\r\n            if (io) {\r\n                var pointer = io.overPointers.getIndex(0);\r\n                _this.handleOut(io, pointer, ev, true, true);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Checks if hovers should be cancelled on transform as per global options.\r\n     * @param   pointer  Pointer\r\n     * @return           Cancel?\r\n     */\r\n    Interaction.prototype.shouldCancelHovers = function (pointer) {\r\n        return options.disableHoverOnTransform == \"always\" || (options.disableHoverOnTransform == \"touch\" && pointer.touch);\r\n    };\r\n    /**\r\n     * Handles pointer move.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param pointer  Pointer\r\n     * @param ev       Original event\r\n     */\r\n    Interaction.prototype.handleGlobalMove = function (pointer, ev) {\r\n        var _this = this;\r\n        // Process hovered elements\r\n        // We check if the element became unhovered without reporting the mouseout\r\n        // event. (it happens in some cases)\r\n        if (!pointer.touch) {\r\n            var target_1 = $dom.eventTarget(pointer.lastEvent);\r\n            $iter.each(this.overObjects.backwards().iterator(), function (io) {\r\n                // Is this pointer relevant to element?\r\n                if (io && io.overPointers.contains(pointer) && io.hoverable) {\r\n                    // Check if the element is still hovered\r\n                    var reset = false;\r\n                    if (io.element && pointer.lastEvent) {\r\n                        if (!$dom.contains(io.element, target_1)) {\r\n                            reset = true;\r\n                        }\r\n                    }\r\n                    else {\r\n                        reset = true;\r\n                    }\r\n                    if (reset) {\r\n                        _this.handleOut(io, pointer, ev, true);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        // Process down elements\r\n        $iter.each(this.transformedObjects.backwards().iterator(), function (io) {\r\n            // Is this pointer relevant to element?\r\n            if (io.downPointers.contains(pointer) &&\r\n                // Swipe still happening?\r\n                !(io.swipeable && _this.swiping(io, pointer)) &&\r\n                (io.draggable || io.resizable)) {\r\n                _this.handleTransform(io, ev);\r\n            }\r\n        });\r\n        // Process tracked elements\r\n        $iter.each(this.trackedObjects.backwards().iterator(), function (io) {\r\n            // Is this pointer relevant to element?\r\n            if (!io.overPointers.contains(pointer)) {\r\n                _this.handleTrack(io, pointer, ev);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Handles reporting of pointer movement.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io        Element\r\n     * @param pointer    Pointer\r\n     * @param ev         Original event\r\n     * @param skipCheck  Sould we skip check if cursor actually moved\r\n     */\r\n    Interaction.prototype.handleTrack = function (io, pointer, ev, skipCheck) {\r\n        if (skipCheck === void 0) { skipCheck = false; }\r\n        // Do nothing if the cursor did not actually move\r\n        if (!skipCheck && !this.moved(pointer, 0)) {\r\n            return;\r\n        }\r\n        // Initiate TRACK event\r\n        if (io.events.isEnabled(\"track\") && !system.isPaused) {\r\n            var imev = {\r\n                type: \"track\",\r\n                target: io,\r\n                event: ev,\r\n                point: pointer.point,\r\n                pointer: pointer,\r\n                touch: pointer.touch\r\n            };\r\n            io.events.dispatchImmediately(\"track\", imev);\r\n        }\r\n    };\r\n    /**\r\n     * Handles swipe action.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io       Element\r\n     * @param pointer  Pointer\r\n     * @param ev       Original event\r\n     */\r\n    Interaction.prototype.handleSwipe = function (io, pointer, ev) {\r\n        // We pass in InteractionEvent with shift in mouse coordinates\r\n        // between when the drag started and ended\r\n        if (io.events.isEnabled(\"swipe\") && !system.isPaused) {\r\n            var imev = {\r\n                type: \"swipe\",\r\n                target: io,\r\n                event: ev,\r\n                touch: pointer.touch\r\n            };\r\n            io.events.dispatchImmediately(\"swipe\", imev);\r\n        }\r\n        if (pointer.startPoint.x < pointer.point.x) {\r\n            if (io.events.isEnabled(\"swiperight\") && !system.isPaused) {\r\n                var imev = {\r\n                    type: \"swiperight\",\r\n                    target: io,\r\n                    event: ev,\r\n                    touch: pointer.touch\r\n                };\r\n                io.events.dispatchImmediately(\"swiperight\", imev);\r\n            }\r\n        }\r\n        else {\r\n            if (io.events.isEnabled(\"swipeleft\") && !system.isPaused) {\r\n                var imev = {\r\n                    type: \"swipeleft\",\r\n                    target: io,\r\n                    event: ev,\r\n                    touch: pointer.touch\r\n                };\r\n                io.events.dispatchImmediately(\"swipeleft\", imev);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Handles event triggering for wheel rotation.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io       Element\r\n     * @param pointer  Pointer\r\n     * @param deltaX   Horizontal shift\r\n     * @param deltaY   Vertical shift\r\n     * @param ev       Original event\r\n     */\r\n    Interaction.prototype.handleWheel = function (io, pointer, deltaX, deltaY, ev) {\r\n        var shift = {\r\n            x: deltaX,\r\n            y: deltaY\r\n        };\r\n        // Trigger generic WHEEL event\r\n        if (io.events.isEnabled(\"wheel\") && !system.isPaused) {\r\n            io.events.dispatchImmediately(\"wheel\", {\r\n                type: \"wheel\",\r\n                target: io,\r\n                event: ev,\r\n                point: pointer.point,\r\n                shift: shift\r\n            });\r\n        }\r\n        // Trigger direction-specific events\r\n        // Horizontal\r\n        if (deltaX < 0) {\r\n            if (io.events.isEnabled(\"wheelleft\") && !system.isPaused) {\r\n                io.events.dispatchImmediately(\"wheelleft\", {\r\n                    type: \"wheelleft\",\r\n                    target: io,\r\n                    event: ev,\r\n                    point: pointer.point,\r\n                    shift: shift\r\n                });\r\n            }\r\n        }\r\n        else if (deltaX > 0) {\r\n            if (io.events.isEnabled(\"swiperight\") && !system.isPaused) {\r\n                io.events.dispatchImmediately(\"wheelright\", {\r\n                    type: \"wheelright\",\r\n                    target: io,\r\n                    event: ev,\r\n                    point: pointer.point,\r\n                    shift: shift\r\n                });\r\n            }\r\n            // Vertical\r\n        }\r\n        else if (deltaY < 0) {\r\n            if (io.events.isEnabled(\"wheelup\") && !system.isPaused) {\r\n                io.events.dispatchImmediately(\"wheelup\", {\r\n                    type: \"wheelup\",\r\n                    target: io,\r\n                    event: ev,\r\n                    point: pointer.point,\r\n                    shift: shift\r\n                });\r\n            }\r\n        }\r\n        else if (deltaY > 0) {\r\n            if (io.events.isEnabled(\"wheeldown\") && !system.isPaused) {\r\n                io.events.dispatchImmediately(\"wheeldown\", {\r\n                    type: \"wheeldown\",\r\n                    target: io,\r\n                    event: ev,\r\n                    point: pointer.point,\r\n                    shift: shift\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Initiates inertia checking sub-routines for different movement types:\r\n     * drag, resize.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param sprite\r\n     * @param pointer\r\n     */\r\n    Interaction.prototype.handleInertia = function (io, pointer) {\r\n        if (io.draggable && io.downPointers.length === 0) {\r\n            this.handleMoveInertia(io, pointer);\r\n        }\r\n        if (io.resizable && io.downPointers.length > 1) {\r\n            this.handleResizeInertia(io, pointer);\r\n        }\r\n    };\r\n    /**\r\n     * Continues moving the element to simulate the effect of inertia. Happens\r\n     * when `inert` and `draggable` object is dragged and then released.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io       Element\r\n     * @param pointer  Pointer\r\n     */\r\n    Interaction.prototype.handleMoveInertia = function (io, pointer) {\r\n        var interaction = io;\r\n        var type = \"move\";\r\n        var point = {\r\n            \"x\": pointer.point.x,\r\n            \"y\": pointer.point.y\r\n        };\r\n        var startPoint = {\r\n            \"x\": pointer.startPoint.x,\r\n            \"y\": pointer.startPoint.y\r\n        };\r\n        // Init inertia object\r\n        var inertia = new Inertia(interaction, type, point, startPoint);\r\n        // Get inertia data\r\n        var ref = this.getTrailPoint(pointer, $time.getTime() - this.getInertiaOption(io, \"move\", \"time\"));\r\n        if (typeof ref === \"undefined\") {\r\n            this.processDragStop(io, pointer, pointer.lastUpEvent);\r\n            return;\r\n        }\r\n        // Init animation options\r\n        var factor = this.getInertiaOption(io, \"move\", \"factor\");\r\n        var animationOptions = [{\r\n                \"to\": pointer.point.x + (pointer.point.x - ref.point.x) * factor,\r\n                \"property\": \"x\"\r\n            }, {\r\n                \"to\": pointer.point.y + (pointer.point.y - ref.point.y) * factor,\r\n                \"property\": \"y\"\r\n            }];\r\n        // Start animation\r\n        var animation = new Animation(inertia, animationOptions, this.getInertiaOption(io, \"move\", \"duration\"), this.getInertiaOption(io, \"move\", \"easing\")).start();\r\n        this._disposers.push(animation.events.on(\"animationended\", function (ev) {\r\n            inertia.done();\r\n        }));\r\n        // Add inertia object\r\n        io.inertias.setKey(\"move\", inertia);\r\n    };\r\n    /**\r\n     * Continues resizing of a `resizable` element after it is resized and\r\n     * released.\r\n     *\r\n     * **NOTE:** this is is just a placeholder function. No actual fucntionality\r\n     * is implemented, yet.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io       Element\r\n     * @param pointer  Pointer\r\n     */\r\n    Interaction.prototype.handleResizeInertia = function (io, pointer) {\r\n        // Some day, folks. Some day...\r\n    };\r\n    /**\r\n     * Recalculates element's position and size based on position of\r\n     * all its related pointers.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io  Element\r\n     * @param ev  Original event\r\n     */\r\n    Interaction.prototype.handleTransform = function (io, ev) {\r\n        // Get primary pointer and its respective points\r\n        var pointer1 = io.downPointers.getIndex(0);\r\n        var point1 = null;\r\n        var startPoint1 = null;\r\n        if (pointer1) {\r\n            point1 = pointer1.point;\r\n            startPoint1 = pointer1.startPoint;\r\n        }\r\n        // Init secondary pointer\r\n        var pointer2;\r\n        var point2;\r\n        var startPoint2;\r\n        // Use center of the sprite to simulate \"second\" point of touch\r\n        point2 = {\r\n            \"x\": io.originalPosition.x,\r\n            \"y\": io.originalPosition.y\r\n        };\r\n        startPoint2 = point2;\r\n        // Determine if it's a sinngle pointer or multi\r\n        var singlePoint = true;\r\n        for (var i = 1; i < io.downPointers.length; i++) {\r\n            // Get pointer\r\n            var nextPointer = io.downPointers.getIndex(i);\r\n            // Doublecheck if it's not the same pointer by comparing original position\r\n            if (startPoint1.x != nextPointer.startPoint.x && startPoint1.y != nextPointer.startPoint.y) {\r\n                // Several pointers down\r\n                singlePoint = false;\r\n                // Get second pointer\r\n                pointer2 = nextPointer;\r\n                point2 = pointer2.point;\r\n                startPoint2 = pointer2.startPoint;\r\n                // Stop looking\r\n                break;\r\n            }\r\n        }\r\n        // Primary touch point moved?\r\n        var pointer1Moved = pointer1 && this.moved(pointer1, 0);\r\n        // Report DRAG_START if necessary\r\n        if (io.draggable && pointer1 && pointer1.dragStartEvents && pointer1.dragStartEvents.length && pointer1Moved) {\r\n            if (io.events.isEnabled(\"dragstart\") && !system.isPaused) {\r\n                io.events.dispatchImmediately(\"dragstart\", pointer1.dragStartEvents.shift());\r\n            }\r\n            //delete pointer1.dragStartEvents;\r\n        }\r\n        // Determine what we do in order of superiority\r\n        if (singlePoint && io.draggable) {\r\n            // We have only one pointer and the Sprite is draggable\r\n            // There's nothing else to be done - just move it\r\n            this.handleTransformMove(io, point1, startPoint1, ev, pointer1Moved, pointer1.touch);\r\n            if (this.shouldCancelHovers(pointer1) && this.moved(pointer1, this.getHitOption(io, \"hitTolerance\"))) {\r\n                this.cancelAllHovers(ev);\r\n            }\r\n        }\r\n        else {\r\n            // Check if second touch point moved\r\n            var pointer2Moved = pointer2 && this.moved(pointer2, 0);\r\n            if ((this.shouldCancelHovers(pointer1) && this.moved(pointer1, this.getHitOption(io, \"hitTolerance\")))\r\n                ||\r\n                    (this.shouldCancelHovers(pointer2) && this.moved(pointer2, this.getHitOption(io, \"hitTolerance\")))) {\r\n                this.cancelAllHovers(ev);\r\n            }\r\n            if (io.draggable && io.resizable) {\r\n                //this.handleTransformAll(io, point1, startPoint1, point2, startPoint2, ev, pointer1Moved && pointer2Moved);\r\n                this.handleTransformMove(io, point1, startPoint1, ev, pointer1Moved && pointer2Moved, pointer1.touch);\r\n                this.handleTransformResize(io, point1, startPoint1, point2, startPoint2, ev, pointer1Moved && pointer2Moved, pointer1.touch);\r\n            }\r\n            else {\r\n                if (io.draggable) {\r\n                    this.handleTransformMove(io, point1, startPoint1, ev, pointer1Moved, pointer1.touch);\r\n                }\r\n                if (io.resizable && (!singlePoint || ev.ctrlKey)) {\r\n                    this.handleTransformResize(io, point1, startPoint1, point2, startPoint2, ev, pointer1Moved && pointer2Moved, pointer1.touch);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Handles movement of the dragged element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io            Element\r\n     * @param point         Current point of the pointer\r\n     * @param startPoint    Starting point of the pointer\r\n     * @param ev            Original event\r\n     * @param pointerMoved  Did pointer move?\r\n     */\r\n    Interaction.prototype.handleTransformMove = function (io, point, startPoint, ev, pointerMoved, touch) {\r\n        if (pointerMoved) {\r\n            if (io.events.isEnabled(\"drag\") && !system.isPaused && (!io.isTouchProtected || !touch)) {\r\n                var imev = {\r\n                    type: \"drag\",\r\n                    target: io,\r\n                    event: ev,\r\n                    shift: {\r\n                        \"x\": point.x - startPoint.x,\r\n                        \"y\": point.y - startPoint.y\r\n                    },\r\n                    startPoint: startPoint,\r\n                    point: point,\r\n                    touch: touch\r\n                };\r\n                io.events.dispatchImmediately(\"drag\", imev);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Handles resizing of the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io            Element\r\n     * @param point1        Current position of reference point #1\r\n     * @param startPoint1   Original position of reference point #1\r\n     * @param point2        Current position of reference point #2\r\n     * @param startPoint2   Original position of reference point #2\r\n     * @param ev            Original event\r\n     * @param pointerMoved  Did pointer move?\r\n     */\r\n    Interaction.prototype.handleTransformResize = function (io, point1, startPoint1, point2, startPoint2, ev, pointerMoved, touch) {\r\n        if (io.events.isEnabled(\"resize\") && !system.isPaused && (!io.isTouchProtected || !touch)) {\r\n            var imev = {\r\n                type: \"resize\",\r\n                target: io,\r\n                event: ev,\r\n                scale: $math.getScale(point1, startPoint1, point2, startPoint2),\r\n                startPoint1: startPoint1,\r\n                point1: point1,\r\n                startPoint2: startPoint2,\r\n                point2: point2,\r\n                touch: touch\r\n            };\r\n            io.events.dispatchImmediately(\"resize\", imev);\r\n        }\r\n    };\r\n    /**\r\n     * Handles all the preparations of the element when it starts to be dragged.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io       Element\r\n     * @param pointer  Pointer\r\n     * @param ev       Original event\r\n     */\r\n    Interaction.prototype.processDragStart = function (io, pointer, ev) {\r\n        // Add to draggedObjects\r\n        this.transformedObjects.moveValue(io);\r\n        if (this.shouldCancelHovers(pointer)) {\r\n            this.cancelAllHovers(ev);\r\n        }\r\n        // Report \"dragstart\"\r\n        var imev = {\r\n            type: \"dragstart\",\r\n            target: io,\r\n            event: ev,\r\n            touch: pointer ? pointer.touch : false\r\n        };\r\n        // Log object that we are starting to drag, so we can check against and\r\n        // avoid hovers on other objects that might be in the path of movement.\r\n        if (pointer) {\r\n            pointer.dragTarget = io;\r\n            //pointer.startPoint = pointer.point;\r\n        }\r\n        /**\r\n         * If pointer is set we will not fire the event until the pointer has\r\n         * actually moved. If it's not set we don't have to wait for anything, so we\r\n         * just fire off the event right away.\r\n         */\r\n        if (pointer && pointer.dragStartEvents) {\r\n            pointer.dragStartEvents.push(imev);\r\n        }\r\n        else {\r\n            if (!system.isPaused) {\r\n                io.dispatchImmediately(\"dragstart\", imev);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Finishes up element drag operation.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io       Element\r\n     * @param pointer  Pointer\r\n     * @param ev       Original event\r\n     */\r\n    Interaction.prototype.processDragStop = function (io, pointer, ev) {\r\n        // Pointer set?\r\n        if (!pointer) {\r\n            pointer = this.getDragPointer(io);\r\n        }\r\n        // Unset drag object\r\n        if (pointer) {\r\n            pointer.dragTarget = undefined;\r\n        }\r\n        // Removed from transformedObjects\r\n        this.transformedObjects.removeValue(io);\r\n        // Unlock document\r\n        //this.unlockDocument();\r\n        // Report dragstop\r\n        if (!pointer || this.moved(pointer, 0)) {\r\n            if (io.events.isEnabled(\"dragstop\") && !system.isPaused) {\r\n                var imev = {\r\n                    type: \"dragstop\",\r\n                    target: io,\r\n                    touch: pointer ? pointer.touch : false\r\n                };\r\n                io.events.dispatchImmediately(\"dragstop\", imev);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Handles all the preparations of the element when it starts to be resized.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io       Element\r\n     * @param pointer  Pointer\r\n     * @param ev       Original event\r\n     */\r\n    Interaction.prototype.processResizeStart = function (io, pointer, ev) {\r\n        // Add to draggedObjects\r\n        this.transformedObjects.moveValue(io);\r\n    };\r\n    /**\r\n     * Finishes up element drag operation.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io       Element\r\n     * @param pointer  Pointer\r\n     * @param ev       Original event\r\n     */\r\n    Interaction.prototype.processResizeStop = function (io, pointer, ev) {\r\n        // Removed from transformedObjects\r\n        this.transformedObjects.removeValue(io);\r\n    };\r\n    /**\r\n     * ==========================================================================\r\n     * Controls for InteractionObjects initiating directly\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Manually triggers drag start on the element. Could be useful in cases\r\n     * where tracking or dragging one element can also influence dragging another\r\n     * element.\r\n     *\r\n     * Passing in `pointer` reference is advisable. If not passed in it will try\r\n     * to determine which pointer to attach to. However, it's better to specify\r\n     * it explicitly.\r\n     *\r\n     * @param io       Element\r\n     * @param pointer  Pointer\r\n     */\r\n    Interaction.prototype.dragStart = function (io, pointer) {\r\n        if (!pointer) {\r\n            pointer = this.getDragPointer(io);\r\n        }\r\n        if (pointer) {\r\n            this.handleDown(io, pointer, pointer.lastDownEvent);\r\n        }\r\n    };\r\n    /**\r\n     * Manually ends drag on the element.\r\n     *\r\n     * @param io       Element\r\n     * @param pointer  Pointer\r\n     */\r\n    Interaction.prototype.dragStop = function (io, pointer, cancelled) {\r\n        if (!pointer) {\r\n            pointer = this.getDragPointer(io);\r\n        }\r\n        if (pointer && !cancelled) {\r\n            this.handleGlobalUp(pointer, pointer.lastUpEvent, cancelled);\r\n        }\r\n    };\r\n    /**\r\n     * This method uses a fuzzy logic to find the pointer to be used for dragging.\r\n     * Beware that this is not a rock-solid solution. If there are a few objects\r\n     * being dragged at the same time, you may get unexepected results.\r\n     *\r\n     * @param io  InteractionObject to get pointers from\r\n     * @return Pointer currently being used for dragging\r\n     */\r\n    Interaction.prototype.getDragPointer = function (io) {\r\n        if (io) {\r\n            // InteractionObject is supplied\r\n            // Use it's first down pointer\r\n            return io.downPointers.getIndex(0);\r\n        }\r\n        else if (this.transformedObjects.length) {\r\n            // Use first dragged object\r\n            return this.getDragPointer(this.transformedObjects.getIndex(0));\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    };\r\n    /**\r\n     * ==========================================================================\r\n     * Utils\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Returns pointer id for the given event object.\r\n     *\r\n     * @param ev  Event\r\n     * @return Pointer ID\r\n     */\r\n    Interaction.prototype.getPointerId = function (ev) {\r\n        var id = \"\";\r\n        if ($type.hasValue(ev.identifier)) {\r\n            id = \"\" + ev.identifier;\r\n        }\r\n        else if ($type.hasValue(ev.pointerId)) {\r\n            id = \"\" + ev.pointerId;\r\n        }\r\n        else {\r\n            id = \"m\";\r\n        }\r\n        return id.replace(\"-\", \"\");\r\n    };\r\n    /**\r\n     * Returns a cursor position of the event.\r\n     *\r\n     * @param ev  Original event\r\n     * @return Event point\r\n     */\r\n    Interaction.prototype.getPointerPoint = function (ev) {\r\n        return {\r\n            \"x\": ev.clientX,\r\n            \"y\": ev.clientY\r\n        };\r\n    };\r\n    /**\r\n     * Returns [[Pointer]] object that is associated with the Event.\r\n     *\r\n     * If no such [[Pointer]] object exists, it is created.\r\n     *\r\n     * @param ev  Event\r\n     * @return Pointer\r\n     */\r\n    Interaction.prototype.getPointer = function (ev) {\r\n        // Get pointer id\r\n        var id = this.getPointerId(ev);\r\n        // Get current coordinates\r\n        var point = this.getPointerPoint(ev);\r\n        // Look for the pointer in the Dictionary if it maybe already exists\r\n        var pointer;\r\n        if (this.pointers.hasKey(id)) {\r\n            // We already have such pointer\r\n            pointer = this.pointers.getKey(id);\r\n            // We need this, because Edge reuses pointer ids across touch and mouse\r\n            pointer.touch = this.isPointerTouch(ev);\r\n            // Reset pointer\r\n            //pointer.point = point;\r\n        }\r\n        else {\r\n            // Init pointer\r\n            pointer = {\r\n                \"id\": id,\r\n                //\"touch\": !(ev instanceof MouseEvent) || ((<any>ev).pointerType && (<any>ev).pointerType != \"pointer\"),\r\n                //\"touch\": !(ev instanceof MouseEvent) || ((<any>ev).pointerType && (<any>ev).pointerType != \"mouse\"),\r\n                \"touch\": this.isPointerTouch(ev),\r\n                \"startPoint\": point,\r\n                \"startTime\": $time.getTime(),\r\n                \"point\": point,\r\n                \"track\": [],\r\n                \"swipeCanceled\": false,\r\n                \"dragStartEvents\": []\r\n            };\r\n            // Add first breadcrumb\r\n            this.addBreadCrumb(pointer, point);\r\n            // Add for re-use later\r\n            this.pointers.setKey(id, pointer);\r\n        }\r\n        // Log last event\r\n        pointer.lastEvent = ev;\r\n        this.lastPointer = pointer;\r\n        return pointer;\r\n    };\r\n    /**\r\n     * Determines if pointer event originated from a touch pointer or mouse.\r\n     *\r\n     * @param ev  Original event\r\n     * @return Touch pointer?\r\n     */\r\n    Interaction.prototype.isPointerTouch = function (ev) {\r\n        if (typeof Touch !== \"undefined\" && ev instanceof Touch) {\r\n            return true;\r\n        }\r\n        else if (typeof PointerEvent !== \"undefined\" && ev instanceof PointerEvent && $type.hasValue(ev.pointerType)) {\r\n            switch (ev.pointerType) {\r\n                case \"touch\":\r\n                case \"pen\":\r\n                case 2:\r\n                    return true;\r\n                case \"mouse\":\r\n                case 4:\r\n                    return false;\r\n                default:\r\n                    return !(ev instanceof MouseEvent);\r\n            }\r\n        }\r\n        else if ($type.hasValue(ev.type)) {\r\n            if (ev.type.match(/^mouse/)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Resets the poiner to original state, i.e. cleans movement information,\r\n     * starting point, etc.\r\n     *\r\n     * @param pointer Pointer\r\n     */\r\n    Interaction.prototype.resetPointer = function (pointer, ev) {\r\n        // Get current coordinates\r\n        var point = this.getPointerPoint(ev);\r\n        ;\r\n        pointer.startTime = $time.getTime();\r\n        pointer.startPoint = { x: point.x, y: point.y };\r\n        pointer.point = { x: point.x, y: point.y };\r\n        pointer.track = [];\r\n        pointer.swipeCanceled = false;\r\n        //clearTimeout(pointer.swipeTimeout);\r\n        //clearTimeout(pointer.holdTimeout);\r\n    };\r\n    /**\r\n     * Adds a \"breadcrumb\" point to the [[Pointer]] to log its movement path.\r\n     *\r\n     * @param pointer  Pointer\r\n     * @param point    Point coordinates\r\n     */\r\n    Interaction.prototype.addBreadCrumb = function (pointer, point) {\r\n        pointer.track.push({\r\n            \"timestamp\": $time.getTime(),\r\n            \"point\": point\r\n        });\r\n    };\r\n    /**\r\n     * Prepares the document for various touch-related operations.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Interaction.prototype.lockDocument = function () {\r\n        this.prepElement(this.body);\r\n    };\r\n    /**\r\n     * Restores document functionality.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Interaction.prototype.unlockDocument = function () {\r\n        if (this.transformedObjects.length == 0) {\r\n            this.restoreAllStyles(this.body);\r\n        }\r\n    };\r\n    /**\r\n     * Lock element (disable all touch)\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Interaction.prototype.lockElement = function (io) {\r\n        this.prepElement(io);\r\n    };\r\n    /**\r\n     * Restores element's functionality.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Interaction.prototype.unlockElement = function (io) {\r\n        this.restoreAllStyles(io);\r\n    };\r\n    /**\r\n     * Locks document's wheel scroll.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Interaction.prototype.lockWheel = function () {\r\n        window.addEventListener(this._pointerEvents.wheel, this.wheelLockEvent, this._passiveSupported ? { passive: false } : false);\r\n    };\r\n    /**\r\n     * Unlocks document's wheel scroll.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Interaction.prototype.unlockWheel = function () {\r\n        window.removeEventListener(this._pointerEvents.wheel, this.wheelLockEvent);\r\n    };\r\n    /**\r\n     * Checks if top element at pointer's position belongs to the SVG.\r\n     *\r\n     * @ignore Exlude from docs\r\n     * @param pointer  Pointer\r\n     * @param svg      The <svg> element\r\n     * @param id       A unique identifier of the object that is checking for locality\r\n     * @return Belongs to SVG\r\n     */\r\n    Interaction.prototype.isLocalElement = function (pointer, svg, id) {\r\n        var cached = this.getCache(\"local_pointer_\" + pointer.id);\r\n        if ($type.hasValue(cached)) {\r\n            return cached;\r\n        }\r\n        var doc = ($dom.getRoot(svg) || document);\r\n        if (doc.elementFromPoint) {\r\n            var target = doc.elementFromPoint(pointer.point.x, pointer.point.y);\r\n            var local = target && $dom.contains(svg, target);\r\n            this.setCache(\"local_pointer_\" + pointer.id + \"_\" + id, local, 100);\r\n            return local;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * A function that cancels mouse wheel scroll.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param ev  Event object\r\n     * @return Returns `false` to cancel\r\n     */\r\n    Interaction.prototype.wheelLockEvent = function (ev) {\r\n        ev.preventDefault();\r\n        return false;\r\n    };\r\n    /**\r\n     * Applies a set of styles to an element. Stores the original styles so they\r\n     * can be restored later.\r\n     *\r\n     * @ignore\r\n     * @param io      Element\r\n     */\r\n    Interaction.prototype.prepElement = function (io) {\r\n        var el = io.element;\r\n        if (el) {\r\n            // Define possible props\r\n            var props = [\r\n                \"touchAction\", \"webkitTouchAction\", \"MozTouchAction\", \"MSTouchAction\", \"msTouchAction\", \"oTouchAction\",\r\n                \"userSelect\", \"webkitUserSelect\", \"MozUserSelect\", \"MSUserSelect\", \"msUserSelect\", \"oUserSelect\",\r\n                \"touchSelect\", \"webkitTouchSelect\", \"MozTouchSelect\", \"MSTouchSelect\", \"msTouchSelect\", \"oTouchSelect\",\r\n                \"touchCallout\", \"webkitTouchCallout\", \"MozTouchCallout\", \"MSTouchCallout\", \"msTouchCallout\", \"oTouchCallout\",\r\n                \"contentZooming\", \"webkitContentZooming\", \"MozContentZooming\", \"MSContentZooming\", \"msContentZooming\", \"oContentZooming\",\r\n                \"userDrag\", \"webkitUserDrag\", \"MozUserDrag\", \"MSUserDrag\", \"msUserDrag\", \"oUserDrag\"\r\n            ];\r\n            for (var i = 0; i < props.length; i++) {\r\n                if (props[i] in el.style) {\r\n                    this.setTemporaryStyle(io, props[i], \"none\");\r\n                }\r\n            }\r\n            // Remove iOS-specific selection;\r\n            this.setTemporaryStyle(io, \"tapHighlightColor\", \"rgba(0, 0, 0, 0)\");\r\n            //this.setTemporaryStyle(io, \"webkitOverflowScrolling\", \"none\");\r\n        }\r\n    };\r\n    /**\r\n     * Restores replaced styles\r\n     *\r\n     * @ignore\r\n     * @param  io  Element\r\n     */\r\n    Interaction.prototype.unprepElement = function (io) {\r\n        var el = io.element;\r\n        if (el) {\r\n            // Define possible props\r\n            var props = [\r\n                \"touchAction\", \"webkitTouchAction\", \"MozTouchAction\", \"MSTouchAction\", \"msTouchAction\", \"oTouchAction\",\r\n                \"userSelect\", \"webkitUserSelect\", \"MozUserSelect\", \"MSUserSelect\", \"msUserSelect\", \"oUserSelect\",\r\n                \"touchSelect\", \"webkitTouchSelect\", \"MozTouchSelect\", \"MSTouchSelect\", \"msTouchSelect\", \"oTouchSelect\",\r\n                \"touchCallout\", \"webkitTouchCallout\", \"MozTouchCallout\", \"MSTouchCallout\", \"msTouchCallout\", \"oTouchCallout\",\r\n                \"contentZooming\", \"webkitContentZooming\", \"MozContentZooming\", \"MSContentZooming\", \"msContentZooming\", \"oContentZooming\",\r\n                \"userDrag\", \"webkitUserDrag\", \"MozUserDrag\", \"MSUserDrag\", \"msUserDrag\", \"oUserDrag\"\r\n            ];\r\n            for (var i = 0; i < props.length; i++) {\r\n                if (props[i] in el.style) {\r\n                    this.restoreStyle(io, props[i]);\r\n                }\r\n            }\r\n            // Remove iOS-specific selection;\r\n            this.restoreStyle(io, \"tapHighlightColor\");\r\n            //this.restoreStyle(io, \"webkitOverflowScrolling\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns an option associated with hit events.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io      Element\r\n     * @param option  Option key\r\n     * @return Option value\r\n     */\r\n    Interaction.prototype.getHitOption = function (io, option) {\r\n        var res = io.hitOptions[option];\r\n        if (typeof res === \"undefined\") {\r\n            res = this.hitOptions[option];\r\n        }\r\n        return res;\r\n    };\r\n    /**\r\n     * Returns an option associated with hover events.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io      Element\r\n     * @param option  Option key\r\n     * @return Option value\r\n     */\r\n    Interaction.prototype.getHoverOption = function (io, option) {\r\n        var res = io.hoverOptions[option];\r\n        if (typeof res === \"undefined\") {\r\n            res = this.hoverOptions[option];\r\n        }\r\n        return res;\r\n    };\r\n    /**\r\n     * Returns an option associated with swipe events.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io      Element\r\n     * @param option  Option key\r\n     * @return Option value\r\n     */\r\n    Interaction.prototype.getSwipeOption = function (io, option) {\r\n        var res = io.swipeOptions[option];\r\n        if (typeof res === \"undefined\") {\r\n            res = this.swipeOptions[option];\r\n        }\r\n        return res;\r\n    };\r\n    /**\r\n     * Returns an option for keyboard.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io      Element\r\n     * @param option  Option key\r\n     * @return Option value\r\n     */\r\n    Interaction.prototype.getKeyboardOption = function (io, option) {\r\n        var res = io.keyboardOptions[option];\r\n        if (typeof res === \"undefined\") {\r\n            res = this.keyboardOptions[option];\r\n        }\r\n        return res;\r\n    };\r\n    /**\r\n     * Returns an option for mouse.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io      Element\r\n     * @param option  Option key\r\n     * @return Option value\r\n     */\r\n    Interaction.prototype.getMouseOption = function (io, option) {\r\n        var res = io.mouseOptions[option];\r\n        if (typeof res === \"undefined\") {\r\n            res = this.mouseOptions[option];\r\n        }\r\n        return res;\r\n    };\r\n    /**\r\n     * Returns an option associated with inertia.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io      Element\r\n     * @param type    Inertia type\r\n     * @param option  Option key\r\n     * @return Option value\r\n     */\r\n    Interaction.prototype.getInertiaOption = function (io, type, option) {\r\n        var options = io.inertiaOptions.getKey(type);\r\n        var res;\r\n        if (options && $type.hasValue(options[option])) {\r\n            res = options[option];\r\n        }\r\n        else {\r\n            res = this.inertiaOptions.getKey(type)[option];\r\n        }\r\n        return res;\r\n    };\r\n    /**\r\n     * Stops currently going on inertia. Useful if inertia is currently being\r\n     * animated and the object is being interacted with.\r\n     *\r\n     * @param io Element\r\n     */\r\n    Interaction.prototype.stopInertia = function (io) {\r\n        var x;\r\n        var inertias = [\"move\", \"resize\"];\r\n        for (var i = 0; i < inertias.length; i++) {\r\n            x = inertias[i];\r\n            if (io.inertias.hasKey(x)) {\r\n                var inertia = io.inertias.getKey(x);\r\n                if (inertia) {\r\n                    inertia.dispose();\r\n                    //io.inertiaAnimations.removeKey(x);\r\n                    //this.processDragStop(io);\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Check if swiping is currently being performed on an object.\r\n     *\r\n     * @param io       Element\r\n     * @param pointer  Pointer to check\r\n     * @return `true` if swiping\r\n     */\r\n    Interaction.prototype.swiping = function (io, pointer) {\r\n        var now = $time.getTime();\r\n        if (pointer.swipeCanceled || !io.swipeable) {\r\n            return false;\r\n        }\r\n        else if ((Math.abs(pointer.startPoint.y - pointer.point.y) < this.getSwipeOption(io, \"verticalThreshold\")) &&\r\n            (pointer.startTime > (now - this.getSwipeOption(io, \"time\")))) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Returns `true` if a successfull swipe action was performed on an element.\r\n     *\r\n     * @param io       Element\r\n     * @param pointer  Pointer\r\n     * @return Swiped?\r\n     */\r\n    Interaction.prototype.swiped = function (io, pointer) {\r\n        var now = $time.getTime();\r\n        if (pointer.swipeCanceled) {\r\n            return false;\r\n        }\r\n        else if ((Math.abs(pointer.startPoint.x - pointer.point.x) > this.getSwipeOption(io, \"horizontalThreshold\")) &&\r\n            (Math.abs(pointer.startPoint.y - pointer.point.y) < this.getSwipeOption(io, \"verticalThreshold\")) &&\r\n            (pointer.startTime > (now - this.getSwipeOption(io, \"time\")))) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Applies style to mouse cursor based on its stage in relation to\r\n     * [[InteractionObject]].\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param Element\r\n     */\r\n    Interaction.prototype.applyCursorOverStyle = function (io) {\r\n        // Get sprite's cursor ooptions\r\n        var options = io.cursorOptions;\r\n        if (!$type.hasValue(options.overStyle)) {\r\n            return;\r\n        }\r\n        // Apply cursor down styles\r\n        for (var i = 0; i < options.overStyle.length; i++) {\r\n            $dom.setStyle(io.element, options.overStyle[i].property, options.overStyle[i].value);\r\n        }\r\n    };\r\n    /**\r\n     * Applies style to mouse cursor based on its stage in relation to\r\n     * [[InteractionObject]].\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io       Element\r\n     * @param pointer  Pointer\r\n     */\r\n    Interaction.prototype.applyCursorDownStyle = function (io, pointer) {\r\n        // Not applicable for touch pointers since they don't display a cursor\r\n        if (pointer && pointer.touch) {\r\n            return;\r\n        }\r\n        var downStyle = io.cursorOptions.downStyle;\r\n        // Is down?\r\n        if (io.downPointers.contains(pointer) && $type.hasValue(downStyle)) {\r\n            // Apply cursor down styles\r\n            for (var i = 0; i < downStyle.length; i++) {\r\n                this.setTemporaryStyle(this.body, downStyle[i].property, downStyle[i].value);\r\n                this.setTemporaryStyle(io, downStyle[i].property, downStyle[i].value);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Restores original cursor style for the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param io       Element\r\n     * @param pointer  Pointer\r\n     */\r\n    Interaction.prototype.restoreCursorDownStyle = function (io, pointer) {\r\n        // Not applicable for touch pointers since they don't display a cursor\r\n        if (pointer && pointer.touch) {\r\n            return;\r\n        }\r\n        var downStyle = io.cursorOptions.downStyle;\r\n        // Is down?\r\n        if (io.downPointers.contains(pointer) && $type.hasValue(downStyle)) {\r\n            // Apply cursor down styles\r\n            for (var i = 0; i < downStyle.length; i++) {\r\n                this.restoreStyle(this.body, downStyle[i].property);\r\n                this.restoreStyle(io, downStyle[i].property);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets style on the body of the document.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param style  Style definitions\r\n     */\r\n    Interaction.prototype.setGlobalStyle = function (style) {\r\n        var body = getInteraction().body;\r\n        var styles = ($type.isArray(style) ? style : [style]);\r\n        for (var i = 0; i < styles.length; i++) {\r\n            this.setTemporaryStyle(body, styles[i].property, styles[i].value);\r\n        }\r\n    };\r\n    /**\r\n     * Restores style on the body of the document.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param style  Style definitions\r\n     */\r\n    Interaction.prototype.restoreGlobalStyle = function (style) {\r\n        var body = getInteraction().body;\r\n        var styles = ($type.isArray(style) ? style : [style]);\r\n        for (var i = 0; i < styles.length; i++) {\r\n            this.restoreStyle(body, styles[i].property);\r\n        }\r\n    };\r\n    /**\r\n     * Checks if element is a non-cahrt element.\r\n     *\r\n     * @param io  InteractionObject\r\n     * @return Global element?\r\n     */\r\n    Interaction.prototype.isGlobalElement = function (io) {\r\n        return document.body === io.element;\r\n    };\r\n    /**\r\n     * Checks if pointer has moved since it was created.\r\n     *\r\n     * @param pointer    Pointer\r\n     * @param tolerance  Tolerance in pixels\r\n     * @param minTime    Minimum time required for the pointer to be down to be considered moved\r\n     * @return `true` if the pointer has moved\r\n     */\r\n    Interaction.prototype.moved = function (pointer, tolerance, minTime) {\r\n        /*// If there was more time, we don't care if cursor actually moved\r\n        let duration = $time.getTime() - pointer.startTime;\r\n        if ($type.hasValue(minTime) && (minTime > duration)) {\r\n            return false;\r\n        }*/\r\n        if (minTime === void 0) { minTime = 300; }\r\n        // That was quick measure shift\r\n        var shift = this.getShift(pointer);\r\n        return (Math.abs(shift.x) > tolerance) || (Math.abs(shift.y) > tolerance);\r\n    };\r\n    /**\r\n     * Returns if pointer is \"old\", meaning it has been pressing for more than\r\n     * X milliseconds.\r\n     *\r\n     * @ignore\r\n     * @param pointer  Pointer\r\n     * @param minTime  Minimum time to consider pointer old\r\n     * @return {boolean}\r\n     */\r\n    Interaction.prototype.old = function (pointer, minTime) {\r\n        if (minTime === void 0) { minTime = 300; }\r\n        return $time.getTime() - pointer.startTime > minTime;\r\n    };\r\n    /**\r\n     * Returns total a shift in pointers coordinates between its original\r\n     * position and now.\r\n     *\r\n     * @param pointer  Pointer\r\n     * @return Shift in coordinates (x/y)\r\n     */\r\n    Interaction.prototype.getShift = function (pointer) {\r\n        return {\r\n            \"x\": pointer.startPoint.x - pointer.point.x,\r\n            \"y\": pointer.startPoint.y - pointer.point.y\r\n        };\r\n    };\r\n    /**\r\n     * Returns a point from [[Pointer]]'s move history at a certain timetamp.\r\n     *\r\n     * @param pointer    Pointer\r\n     * @param timestamp  Timestamp\r\n     * @return Point\r\n     */\r\n    Interaction.prototype.getTrailPoint = function (pointer, timestamp) {\r\n        var res;\r\n        for (var i = 0; i < pointer.track.length; i++) {\r\n            if (pointer.track[i].timestamp >= timestamp) {\r\n                res = pointer.track[i];\r\n                break;\r\n            }\r\n        }\r\n        return res;\r\n    };\r\n    /**\r\n     * Checks if same pointer already exists in the list.\r\n     *\r\n     * @param list     List to check agains\r\n     * @param pointer  Pointer\r\n     * @return Exists?\r\n     */\r\n    Interaction.prototype.pointerExists = function (list, pointer) {\r\n        var exists = false;\r\n        list.each(function (item) {\r\n            if (item == pointer) {\r\n                return;\r\n            }\r\n            exists = item.point.x == pointer.point.x && item.point.y == pointer.point.y;\r\n        });\r\n        return exists;\r\n    };\r\n    /**\r\n     * Returns an [[InteractionObject]] representation of a DOM element.\r\n     *\r\n     * You can use this on any HTML or SVG element, to add interactive features\r\n     * to it.\r\n     *\r\n     * @param element  Element\r\n     * @return InteractionObject\r\n     */\r\n    Interaction.prototype.getInteraction = function (element) {\r\n        return new InteractionObject(element);\r\n    };\r\n    /**\r\n     * Sets a style property on an element. Stores original value to be restored\r\n     * later with [[restoreStyle]].\r\n     *\r\n     * @see {@link restoreStyle}\r\n     * @param io        Element\r\n     * @param property  Property\r\n     * @param value     Value\r\n     */\r\n    Interaction.prototype.setTemporaryStyle = function (io, property, value) {\r\n        // Get element\r\n        //let el = io.element.tagName == \"g\" ? <SVGSVGElement>io.element.parentNode : io.element;\r\n        var el = io.element;\r\n        // Save original property if it is set and hasn't been saved before already\r\n        if ($type.hasValue(el.style[property]) && !io.replacedStyles.hasKey(property)) {\r\n            io.replacedStyles.setKey(property, el.style[property]);\r\n        }\r\n        // Replace with the new one\r\n        $dom.setStyle(el, property, value);\r\n    };\r\n    /**\r\n     * Restores specific style on an element.\r\n     *\r\n     * @param io        Element\r\n     * @param property  Style property\r\n     */\r\n    Interaction.prototype.restoreStyle = function (io, property) {\r\n        // Reset style\r\n        if (io.replacedStyles.hasKey(property)) {\r\n            io.element.style[property] = io.replacedStyles.getKey(property);\r\n            io.replacedStyles.removeKey(property);\r\n        }\r\n        else {\r\n            delete io.element.style[property];\r\n        }\r\n    };\r\n    /**\r\n     * Restore temporarily reset styles on an element.\r\n     *\r\n     * @param io Element\r\n     */\r\n    Interaction.prototype.restoreAllStyles = function (io) {\r\n        $iter.each(io.replacedStyles.iterator(), function (a) {\r\n            var key = a[0];\r\n            var value = a[1];\r\n            io.element.style[key] = value;\r\n            io.replacedStyles.removeKey(key);\r\n        });\r\n    };\r\n    /**\r\n     * Disposes this object and cleans up after itself.\r\n     */\r\n    Interaction.prototype.dispose = function () {\r\n        if (!this.isDisposed()) {\r\n            _super.prototype.dispose.call(this);\r\n            this.restoreAllStyles(this.body);\r\n            this.unlockWheel();\r\n        }\r\n    };\r\n    // @ts-ignore Used for debugging\r\n    Interaction.prototype.log = function (text, ev, io) {\r\n        var show = true;\r\n        if (show) {\r\n            // Touchlist?\r\n            if (ev.changedTouches) {\r\n                for (var i = 0; i < ev.changedTouches.length; i++) {\r\n                    this.logTouch(text, ev.type, ev.changedTouches[i]);\r\n                }\r\n                return;\r\n            }\r\n            // Get type\r\n            var type = \"\";\r\n            if (ev.pointerType) {\r\n                switch (ev.pointerType) {\r\n                    case 2:\r\n                        type = \"touch\";\r\n                        break;\r\n                    case 4:\r\n                        type = \"mouse\";\r\n                        break;\r\n                    default:\r\n                        type = ev.pointerType;\r\n                        break;\r\n                }\r\n            }\r\n            else if (typeof TouchEvent != \"undefined\" && ev instanceof TouchEvent) {\r\n                type = \"touch\";\r\n            }\r\n            else if (ev.type.match(/^mouse/)) {\r\n                type = \"mouse\";\r\n            }\r\n            else {\r\n                type = \"???\";\r\n            }\r\n            // Get ID\r\n            var id = \"\";\r\n            if ($type.hasValue(ev.identifier)) {\r\n                id = ev.identifier;\r\n            }\r\n            else if ($type.hasValue(ev.pointerId)) {\r\n                id = ev.pointerId;\r\n            }\r\n            else {\r\n                id = \"???\";\r\n            }\r\n            if (io) {\r\n                console.log(text + \" (\" + io.uid + \")  \" + ev.type + \"  \" + type + \"  \" + id);\r\n            }\r\n            else {\r\n                console.log(text + \"  \" + ev.type + \"  \" + type + \"  \" + id);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Checks whether there are currently any objects being transformed (dragged\r\n     * or resized).\r\n     *\r\n     * If `except` is set, that object will be ignored.\r\n     *\r\n     * @since 4.9.3\r\n     * @param   except  Ignore this object(s)\r\n     * @return          Objects are being transformed\r\n     */\r\n    Interaction.prototype.areTransformed = function (except) {\r\n        var count = this.transformedObjects.length;\r\n        if (except) {\r\n            var ex = $type.isArray(except) ? except : [except];\r\n            for (var i = 0; i < ex.length; i++) {\r\n                if (this.transformedObjects.contains(ex[i])) {\r\n                    count--;\r\n                }\r\n            }\r\n        }\r\n        return count > 0;\r\n    };\r\n    /**\r\n     * Log.\r\n     */\r\n    Interaction.prototype.logTouch = function (text, type, ev) {\r\n        console.log(text + \"  \" + type + \"  \" + \"touch\" + \"  \" + ev.identifier);\r\n    };\r\n    Object.defineProperty(Interaction, \"passiveSupported\", {\r\n        /**\r\n         * Indicates if passive mode options is supported by this browser.\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            if (this._passiveSupported == null) {\r\n                // Check for passive mode support\r\n                try {\r\n                    var options_1 = Object.defineProperty({}, \"passive\", {\r\n                        get: function () {\r\n                            _this._passiveSupported = true;\r\n                        }\r\n                    });\r\n                    window.addEventListener(\"test\", options_1, options_1);\r\n                    window.removeEventListener(\"test\", options_1, options_1);\r\n                }\r\n                catch (err) {\r\n                    this._passiveSupported = false;\r\n                }\r\n            }\r\n            return this._passiveSupported;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Interaction;\r\n}(BaseObjectEvents));\r\nexport { Interaction };\r\nvar interaction = null;\r\n/**\r\n * Returns a single unified global instance of [[Interaction]].\r\n *\r\n * All code should use this function, rather than create their own instances\r\n * of [[Interaction]].\r\n */\r\nexport function getInteraction() {\r\n    if (interaction == null) {\r\n        interaction = new Interaction();\r\n    }\r\n    return interaction;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}