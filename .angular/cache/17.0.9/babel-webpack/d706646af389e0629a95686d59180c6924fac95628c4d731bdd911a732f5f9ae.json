{"ast":null,"code":"/**\r\n * Functionality for drawing triangles.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Sprite } from \"../Sprite\";\nimport { registry } from \"../Registry\";\nimport * as $path from \"../rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Used to draw a triangle.\r\n *\r\n * @see {@link ITriangleEvents} for a list of available events\r\n * @see {@link ITriangleAdapters} for a list of available Adapters\r\n */\nvar Triangle = /** @class */function (_super) {\n  __extends(Triangle, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Triangle() {\n    var _this = _super.call(this) || this;\n    _this.className = \"Triangle\";\n    _this.element = _this.paper.add(\"path\");\n    _this.direction = \"top\";\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Triangle.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n    var w = this.pixelWidth;\n    var h = this.pixelHeight;\n    var path;\n    switch (this.direction) {\n      case \"right\":\n        path = $path.moveTo({\n          x: 0,\n          y: 0\n        }) + $path.lineTo({\n          x: w,\n          y: h / 2\n        }) + $path.lineTo({\n          x: 0,\n          y: h\n        }) + $path.closePath();\n        break;\n      case \"left\":\n        path = $path.moveTo({\n          x: w,\n          y: 0\n        }) + $path.lineTo({\n          x: 0,\n          y: h / 2\n        }) + $path.lineTo({\n          x: w,\n          y: h\n        }) + $path.closePath();\n        break;\n      case \"bottom\":\n        path = $path.moveTo({\n          x: 0,\n          y: 0\n        }) + $path.lineTo({\n          x: w,\n          y: 0\n        }) + $path.lineTo({\n          x: w / 2,\n          y: h\n        }) + $path.closePath();\n        break;\n      case \"top\":\n        path = $path.moveTo({\n          x: w / 2,\n          y: 0\n        }) + $path.lineTo({\n          x: w,\n          y: h\n        }) + $path.lineTo({\n          x: 0,\n          y: h\n        }) + $path.closePath();\n        break;\n    }\n    this.path = path;\n  };\n  Object.defineProperty(Triangle.prototype, \"direction\", {\n    /**\r\n     * Returns direction of a triangle\r\n     *\r\n     * @return value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"direction\");\n    },\n    /**\r\n     * Sets direction of a triangle\r\n     *\r\n     * @param value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"direction\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Triangle;\n}(Sprite);\nexport { Triangle };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Triangle\"] = Triangle;","map":{"version":3,"names":["__extends","Sprite","registry","$path","Triangle","_super","_this","call","className","element","paper","add","direction","applyTheme","prototype","draw","w","pixelWidth","h","pixelHeight","path","moveTo","x","y","lineTo","closePath","Object","defineProperty","get","getPropertyValue","set","value","setPropertyValue","enumerable","configurable","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/elements/Triangle.js"],"sourcesContent":["/**\r\n * Functionality for drawing triangles.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../Sprite\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $path from \"../rendering/Path\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Used to draw a triangle.\r\n *\r\n * @see {@link ITriangleEvents} for a list of available events\r\n * @see {@link ITriangleAdapters} for a list of available Adapters\r\n */\r\nvar Triangle = /** @class */ (function (_super) {\r\n    __extends(Triangle, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Triangle() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"Triangle\";\r\n        _this.element = _this.paper.add(\"path\");\r\n        _this.direction = \"top\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Triangle.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        var w = this.pixelWidth;\r\n        var h = this.pixelHeight;\r\n        var path;\r\n        switch (this.direction) {\r\n            case \"right\":\r\n                path = $path.moveTo({ x: 0, y: 0 })\r\n                    + $path.lineTo({ x: w, y: h / 2 })\r\n                    + $path.lineTo({ x: 0, y: h })\r\n                    + $path.closePath();\r\n                break;\r\n            case \"left\":\r\n                path = $path.moveTo({ x: w, y: 0 })\r\n                    + $path.lineTo({ x: 0, y: h / 2 })\r\n                    + $path.lineTo({ x: w, y: h })\r\n                    + $path.closePath();\r\n                break;\r\n            case \"bottom\":\r\n                path = $path.moveTo({ x: 0, y: 0 })\r\n                    + $path.lineTo({ x: w, y: 0 })\r\n                    + $path.lineTo({ x: w / 2, y: h })\r\n                    + $path.closePath();\r\n                break;\r\n            case \"top\":\r\n                path = $path.moveTo({ x: w / 2, y: 0 })\r\n                    + $path.lineTo({ x: w, y: h })\r\n                    + $path.lineTo({ x: 0, y: h })\r\n                    + $path.closePath();\r\n                break;\r\n        }\r\n        this.path = path;\r\n    };\r\n    Object.defineProperty(Triangle.prototype, \"direction\", {\r\n        /**\r\n         * Returns direction of a triangle\r\n         *\r\n         * @return value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"direction\");\r\n        },\r\n        /**\r\n         * Sets direction of a triangle\r\n         *\r\n         * @param value\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"direction\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Triangle;\r\n}(Sprite));\r\nexport { Triangle };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Triangle\"] = Triangle;\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,SAAS,QAAQ,OAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,MAAM,QAAQ,WAAW;AAClC,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAO,KAAKC,KAAK,MAAM,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,QAAQ,GAAG,aAAe,UAAUC,MAAM,EAAE;EAC5CL,SAAS,CAACI,QAAQ,EAAEC,MAAM,CAAC;EAC3B;AACJ;AACA;EACI,SAASD,QAAQA,CAAA,EAAG;IAChB,IAAIE,KAAK,GAAGD,MAAM,CAACE,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI;IACrCD,KAAK,CAACE,SAAS,GAAG,UAAU;IAC5BF,KAAK,CAACG,OAAO,GAAGH,KAAK,CAACI,KAAK,CAACC,GAAG,CAAC,MAAM,CAAC;IACvCL,KAAK,CAACM,SAAS,GAAG,KAAK;IACvBN,KAAK,CAACO,UAAU,CAAC,CAAC;IAClB,OAAOP,KAAK;EAChB;EACA;AACJ;AACA;AACA;AACA;EACIF,QAAQ,CAACU,SAAS,CAACC,IAAI,GAAG,YAAY;IAClCV,MAAM,CAACS,SAAS,CAACC,IAAI,CAACR,IAAI,CAAC,IAAI,CAAC;IAChC,IAAIS,CAAC,GAAG,IAAI,CAACC,UAAU;IACvB,IAAIC,CAAC,GAAG,IAAI,CAACC,WAAW;IACxB,IAAIC,IAAI;IACR,QAAQ,IAAI,CAACR,SAAS;MAClB,KAAK,OAAO;QACRQ,IAAI,GAAGjB,KAAK,CAACkB,MAAM,CAAC;UAAEC,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAE;QAAE,CAAC,CAAC,GAC7BpB,KAAK,CAACqB,MAAM,CAAC;UAAEF,CAAC,EAAEN,CAAC;UAAEO,CAAC,EAAEL,CAAC,GAAG;QAAE,CAAC,CAAC,GAChCf,KAAK,CAACqB,MAAM,CAAC;UAAEF,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAEL;QAAE,CAAC,CAAC,GAC5Bf,KAAK,CAACsB,SAAS,CAAC,CAAC;QACvB;MACJ,KAAK,MAAM;QACPL,IAAI,GAAGjB,KAAK,CAACkB,MAAM,CAAC;UAAEC,CAAC,EAAEN,CAAC;UAAEO,CAAC,EAAE;QAAE,CAAC,CAAC,GAC7BpB,KAAK,CAACqB,MAAM,CAAC;UAAEF,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAEL,CAAC,GAAG;QAAE,CAAC,CAAC,GAChCf,KAAK,CAACqB,MAAM,CAAC;UAAEF,CAAC,EAAEN,CAAC;UAAEO,CAAC,EAAEL;QAAE,CAAC,CAAC,GAC5Bf,KAAK,CAACsB,SAAS,CAAC,CAAC;QACvB;MACJ,KAAK,QAAQ;QACTL,IAAI,GAAGjB,KAAK,CAACkB,MAAM,CAAC;UAAEC,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAE;QAAE,CAAC,CAAC,GAC7BpB,KAAK,CAACqB,MAAM,CAAC;UAAEF,CAAC,EAAEN,CAAC;UAAEO,CAAC,EAAE;QAAE,CAAC,CAAC,GAC5BpB,KAAK,CAACqB,MAAM,CAAC;UAAEF,CAAC,EAAEN,CAAC,GAAG,CAAC;UAAEO,CAAC,EAAEL;QAAE,CAAC,CAAC,GAChCf,KAAK,CAACsB,SAAS,CAAC,CAAC;QACvB;MACJ,KAAK,KAAK;QACNL,IAAI,GAAGjB,KAAK,CAACkB,MAAM,CAAC;UAAEC,CAAC,EAAEN,CAAC,GAAG,CAAC;UAAEO,CAAC,EAAE;QAAE,CAAC,CAAC,GACjCpB,KAAK,CAACqB,MAAM,CAAC;UAAEF,CAAC,EAAEN,CAAC;UAAEO,CAAC,EAAEL;QAAE,CAAC,CAAC,GAC5Bf,KAAK,CAACqB,MAAM,CAAC;UAAEF,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAEL;QAAE,CAAC,CAAC,GAC5Bf,KAAK,CAACsB,SAAS,CAAC,CAAC;QACvB;IACR;IACA,IAAI,CAACL,IAAI,GAAGA,IAAI;EACpB,CAAC;EACDM,MAAM,CAACC,cAAc,CAACvB,QAAQ,CAACU,SAAS,EAAE,WAAW,EAAE;IACnD;AACR;AACA;AACA;AACA;IACQc,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACC,gBAAgB,CAAC,WAAW,CAAC;IAC7C,CAAC;IACD;AACR;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAACC,gBAAgB,CAAC,WAAW,EAAED,KAAK,EAAE,IAAI,CAAC;IACnD,CAAC;IACDE,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF,OAAO9B,QAAQ;AACnB,CAAC,CAACH,MAAM,CAAE;AACV,SAASG,QAAQ;AACjB;AACA;AACA;AACA;AACA;AACA;AACAF,QAAQ,CAACiC,iBAAiB,CAAC,UAAU,CAAC,GAAG/B,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}