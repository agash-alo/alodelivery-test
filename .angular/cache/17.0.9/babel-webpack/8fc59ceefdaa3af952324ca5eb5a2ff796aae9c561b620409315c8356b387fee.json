{"ast":null,"code":"import { AccordionDirective } from './accordion.directive';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./accordion.directive\";\nexport class AccordionLinkDirective {\n  get selected() {\n    return this._selected;\n  }\n  set selected(value) {\n    this._selected = value;\n    if (value) {\n      this.nav.closeOtherLinks(this);\n    }\n  }\n  constructor(nav) {\n    this._selected = false;\n    this.nav = nav;\n  }\n  ngOnInit() {\n    this.nav.addLink(this);\n  }\n  ngOnDestroy() {\n    this.nav.removeGroup(this);\n  }\n  toggle() {\n    this.selected = !this.selected;\n  }\n  static #_ = this.ɵfac = function AccordionLinkDirective_Factory(t) {\n    return new (t || AccordionLinkDirective)(i0.ɵɵdirectiveInject(AccordionDirective));\n  };\n  static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: AccordionLinkDirective,\n    selectors: [[\"\", \"appAccordionLink\", \"\"]],\n    hostVars: 2,\n    hostBindings: function AccordionLinkDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"selected\", ctx.selected);\n      }\n    },\n    inputs: {\n      group: \"group\",\n      selected: \"selected\"\n    }\n  });\n}","map":{"version":3,"names":["AccordionDirective","AccordionLinkDirective","selected","_selected","value","nav","closeOtherLinks","constructor","ngOnInit","addLink","ngOnDestroy","removeGroup","toggle","_","i0","ɵɵdirectiveInject","_2","selectors","hostVars","hostBindings","AccordionLinkDirective_HostBindings","rf","ctx"],"sources":["D:\\alodelivery test\\src\\app\\shared\\accordion\\accordionlink.directive.ts"],"sourcesContent":["import {\r\n  Directive,\r\n  HostBinding,\r\n  Inject,\r\n  Input,\r\n  OnInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\n\r\nimport { AccordionDirective } from './accordion.directive';\r\n\r\n@Directive({\r\n  selector: '[appAccordionLink]'\r\n})\r\nexport class AccordionLinkDirective implements OnInit, OnDestroy {\r\n  @Input()\r\n  public group: any;\r\n\r\n  @HostBinding('class.selected')\r\n  @Input()\r\n  get selected(): boolean {\r\n    return this._selected;\r\n  }\r\n\r\n  set selected(value: boolean) {\r\n    this._selected = value;\r\n    if (value) {\r\n      this.nav.closeOtherLinks(this);\r\n    }\r\n  }\r\n\r\n  protected _selected = false;\r\n  protected nav: AccordionDirective;\r\n\r\n  constructor(@Inject(AccordionDirective) nav: AccordionDirective) {\r\n    this.nav = nav;\r\n  }\r\n\r\n  ngOnInit(): any {\r\n    this.nav.addLink(this);\r\n  }\r\n\r\n  ngOnDestroy(): any {\r\n    this.nav.removeGroup(this);\r\n  }\r\n\r\n  toggle(): any {\r\n    this.selected = !this.selected;\r\n  }\r\n}\r\n"],"mappings":"AASA,SAASA,kBAAkB,QAAQ,uBAAuB;;;AAK1D,OAAM,MAAOC,sBAAsB;EAIjC,IAEIC,QAAQA,CAAA;IACV,OAAO,IAAI,CAACC,SAAS;EACvB;EAEA,IAAID,QAAQA,CAACE,KAAc;IACzB,IAAI,CAACD,SAAS,GAAGC,KAAK;IACtB,IAAIA,KAAK,EAAE;MACT,IAAI,CAACC,GAAG,CAACC,eAAe,CAAC,IAAI,CAAC;;EAElC;EAKAC,YAAwCF,GAAuB;IAHrD,KAAAF,SAAS,GAAG,KAAK;IAIzB,IAAI,CAACE,GAAG,GAAGA,GAAG;EAChB;EAEAG,QAAQA,CAAA;IACN,IAAI,CAACH,GAAG,CAACI,OAAO,CAAC,IAAI,CAAC;EACxB;EAEAC,WAAWA,CAAA;IACT,IAAI,CAACL,GAAG,CAACM,WAAW,CAAC,IAAI,CAAC;EAC5B;EAEAC,MAAMA,CAAA;IACJ,IAAI,CAACV,QAAQ,GAAG,CAAC,IAAI,CAACA,QAAQ;EAChC;EAAC,QAAAW,CAAA,G;qBAlCUZ,sBAAsB,EAAAa,EAAA,CAAAC,iBAAA,CAoBbf,kBAAkB;EAAA;EAAA,QAAAgB,EAAA,G;UApB3Bf,sBAAsB;IAAAgB,SAAA;IAAAC,QAAA;IAAAC,YAAA,WAAAC,oCAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}