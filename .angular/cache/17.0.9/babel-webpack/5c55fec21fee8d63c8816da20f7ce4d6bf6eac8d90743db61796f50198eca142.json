{"ast":null,"code":"import { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { hasModifierKey, SPACE, ENTER } from '@angular/cdk/keycodes';\nimport { DOCUMENT } from '@angular/common';\nimport { Directive, ElementRef, TemplateRef, InjectionToken, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, forwardRef, Optional, ContentChild, ViewChild, Input, Output, QueryList, ChangeDetectorRef, ContentChildren, HostListener, NgModule } from '@angular/core';\nimport { Subject, of } from 'rxjs';\nimport { startWith, takeUntil } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass CdkStepHeader {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n  /** Focuses the step header. */\n  focus() {\n    this._elementRef.nativeElement.focus();\n  }\n}\nCdkStepHeader.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[cdkStepHeader]',\n    host: {\n      'role': 'tab'\n    }\n  }]\n}];\nCdkStepHeader.ctorParameters = () => [{\n  type: ElementRef\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass CdkStepLabel {\n  constructor( /** @docs-private */template) {\n    this.template = template;\n  }\n}\nCdkStepLabel.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[cdkStepLabel]'\n  }]\n}];\nCdkStepLabel.ctorParameters = () => [{\n  type: TemplateRef\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Used to generate unique ID for each stepper component. */\nlet nextId = 0;\n/** Change event emitted on selection changes. */\nclass StepperSelectionEvent {}\n/** Enum to represent the different states of the steps. */\nconst STEP_STATE = {\n  NUMBER: 'number',\n  EDIT: 'edit',\n  DONE: 'done',\n  ERROR: 'error'\n};\n/** InjectionToken that can be used to specify the global stepper options. */\nconst STEPPER_GLOBAL_OPTIONS = new InjectionToken('STEPPER_GLOBAL_OPTIONS');\nclass CdkStep {\n  constructor(_stepper, stepperOptions) {\n    this._stepper = _stepper;\n    /** Whether user has attempted to move away from the step. */\n    this.interacted = false;\n    /** Emits when the user has attempted to move away from the step. */\n    this.interactedStream = new EventEmitter();\n    this._editable = true;\n    this._optional = false;\n    this._completedOverride = null;\n    this._customError = null;\n    this._stepperOptions = stepperOptions ? stepperOptions : {};\n    this._displayDefaultIndicatorType = this._stepperOptions.displayDefaultIndicatorType !== false;\n    this._showError = !!this._stepperOptions.showError;\n  }\n  /** Whether the user can return to this step once it has been marked as completed. */\n  get editable() {\n    return this._editable;\n  }\n  set editable(value) {\n    this._editable = coerceBooleanProperty(value);\n  }\n  /** Whether the completion of step is optional. */\n  get optional() {\n    return this._optional;\n  }\n  set optional(value) {\n    this._optional = coerceBooleanProperty(value);\n  }\n  /** Whether step is marked as completed. */\n  get completed() {\n    return this._completedOverride == null ? this._getDefaultCompleted() : this._completedOverride;\n  }\n  set completed(value) {\n    this._completedOverride = coerceBooleanProperty(value);\n  }\n  _getDefaultCompleted() {\n    return this.stepControl ? this.stepControl.valid && this.interacted : this.interacted;\n  }\n  /** Whether step has an error. */\n  get hasError() {\n    return this._customError == null ? this._getDefaultError() : this._customError;\n  }\n  set hasError(value) {\n    this._customError = coerceBooleanProperty(value);\n  }\n  _getDefaultError() {\n    return this.stepControl && this.stepControl.invalid && this.interacted;\n  }\n  /** Selects this step component. */\n  select() {\n    this._stepper.selected = this;\n  }\n  /** Resets the step to its initial state. Note that this includes resetting form data. */\n  reset() {\n    this.interacted = false;\n    if (this._completedOverride != null) {\n      this._completedOverride = false;\n    }\n    if (this._customError != null) {\n      this._customError = false;\n    }\n    if (this.stepControl) {\n      this.stepControl.reset();\n    }\n  }\n  ngOnChanges() {\n    // Since basically all inputs of the MatStep get proxied through the view down to the\n    // underlying MatStepHeader, we have to make sure that change detection runs correctly.\n    this._stepper._stateChanged();\n  }\n  _markAsInteracted() {\n    if (!this.interacted) {\n      this.interacted = true;\n      this.interactedStream.emit(this);\n    }\n  }\n}\nCdkStep.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'cdk-step',\n    exportAs: 'cdkStep',\n    template: '<ng-template><ng-content></ng-content></ng-template>',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n  }]\n}];\nCdkStep.ctorParameters = () => [{\n  type: CdkStepper,\n  decorators: [{\n    type: Inject,\n    args: [forwardRef(() => CdkStepper)]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [STEPPER_GLOBAL_OPTIONS]\n  }]\n}];\nCdkStep.propDecorators = {\n  stepLabel: [{\n    type: ContentChild,\n    args: [CdkStepLabel]\n  }],\n  content: [{\n    type: ViewChild,\n    args: [TemplateRef, {\n      static: true\n    }]\n  }],\n  stepControl: [{\n    type: Input\n  }],\n  interactedStream: [{\n    type: Output,\n    args: ['interacted']\n  }],\n  label: [{\n    type: Input\n  }],\n  errorMessage: [{\n    type: Input\n  }],\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  state: [{\n    type: Input\n  }],\n  editable: [{\n    type: Input\n  }],\n  optional: [{\n    type: Input\n  }],\n  completed: [{\n    type: Input\n  }],\n  hasError: [{\n    type: Input\n  }]\n};\nclass CdkStepper {\n  constructor(_dir, _changeDetectorRef, _elementRef, _document) {\n    this._dir = _dir;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._elementRef = _elementRef;\n    /** Emits when the component is destroyed. */\n    this._destroyed = new Subject();\n    /** Steps that belong to the current stepper, excluding ones from nested steppers. */\n    this.steps = new QueryList();\n    this._linear = false;\n    this._selectedIndex = 0;\n    /** Event emitted when the selected step has changed. */\n    this.selectionChange = new EventEmitter();\n    /**\n     * @deprecated To be turned into a private property. Use `orientation` instead.\n     * @breaking-change 13.0.0\n     */\n    this._orientation = 'horizontal';\n    this._groupId = nextId++;\n    this._document = _document;\n  }\n  /** Whether the validity of previous steps should be checked or not. */\n  get linear() {\n    return this._linear;\n  }\n  set linear(value) {\n    this._linear = coerceBooleanProperty(value);\n  }\n  /** The index of the selected step. */\n  get selectedIndex() {\n    return this._selectedIndex;\n  }\n  set selectedIndex(index) {\n    var _a;\n    const newIndex = coerceNumberProperty(index);\n    if (this.steps && this._steps) {\n      // Ensure that the index can't be out of bounds.\n      if (!this._isValidIndex(index) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('cdkStepper: Cannot assign out-of-bounds value to `selectedIndex`.');\n      }\n      (_a = this.selected) === null || _a === void 0 ? void 0 : _a._markAsInteracted();\n      if (this._selectedIndex !== newIndex && !this._anyControlsInvalidOrPending(newIndex) && (newIndex >= this._selectedIndex || this.steps.toArray()[newIndex].editable)) {\n        this._updateSelectedItemIndex(index);\n      }\n    } else {\n      this._selectedIndex = newIndex;\n    }\n  }\n  /** The step that is selected. */\n  get selected() {\n    return this.steps ? this.steps.toArray()[this.selectedIndex] : undefined;\n  }\n  set selected(step) {\n    this.selectedIndex = step && this.steps ? this.steps.toArray().indexOf(step) : -1;\n  }\n  /** Orientation of the stepper. */\n  get orientation() {\n    return this._orientation;\n  }\n  set orientation(value) {\n    // This is a protected method so that `MatSteppter` can hook into it.\n    this._orientation = value;\n    if (this._keyManager) {\n      this._keyManager.withVerticalOrientation(value === 'vertical');\n    }\n  }\n  ngAfterContentInit() {\n    this._steps.changes.pipe(startWith(this._steps), takeUntil(this._destroyed)).subscribe(steps => {\n      this.steps.reset(steps.filter(step => step._stepper === this));\n      this.steps.notifyOnChanges();\n    });\n  }\n  ngAfterViewInit() {\n    // Note that while the step headers are content children by default, any components that\n    // extend this one might have them as view children. We initialize the keyboard handling in\n    // AfterViewInit so we're guaranteed for both view and content children to be defined.\n    this._keyManager = new FocusKeyManager(this._stepHeader).withWrap().withHomeAndEnd().withVerticalOrientation(this._orientation === 'vertical');\n    (this._dir ? this._dir.change : of()).pipe(startWith(this._layoutDirection()), takeUntil(this._destroyed)).subscribe(direction => this._keyManager.withHorizontalOrientation(direction));\n    this._keyManager.updateActiveItem(this._selectedIndex);\n    // No need to `takeUntil` here, because we're the ones destroying `steps`.\n    this.steps.changes.subscribe(() => {\n      if (!this.selected) {\n        this._selectedIndex = Math.max(this._selectedIndex - 1, 0);\n      }\n    });\n    // The logic which asserts that the selected index is within bounds doesn't run before the\n    // steps are initialized, because we don't how many steps there are yet so we may have an\n    // invalid index on init. If that's the case, auto-correct to the default so we don't throw.\n    if (!this._isValidIndex(this._selectedIndex)) {\n      this._selectedIndex = 0;\n    }\n  }\n  ngOnDestroy() {\n    this.steps.destroy();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n  /** Selects and focuses the next step in list. */\n  next() {\n    this.selectedIndex = Math.min(this._selectedIndex + 1, this.steps.length - 1);\n  }\n  /** Selects and focuses the previous step in list. */\n  previous() {\n    this.selectedIndex = Math.max(this._selectedIndex - 1, 0);\n  }\n  /** Resets the stepper to its initial state. Note that this includes clearing form data. */\n  reset() {\n    this._updateSelectedItemIndex(0);\n    this.steps.forEach(step => step.reset());\n    this._stateChanged();\n  }\n  /** Returns a unique id for each step label element. */\n  _getStepLabelId(i) {\n    return `cdk-step-label-${this._groupId}-${i}`;\n  }\n  /** Returns unique id for each step content element. */\n  _getStepContentId(i) {\n    return `cdk-step-content-${this._groupId}-${i}`;\n  }\n  /** Marks the component to be change detected. */\n  _stateChanged() {\n    this._changeDetectorRef.markForCheck();\n  }\n  /** Returns position state of the step with the given index. */\n  _getAnimationDirection(index) {\n    const position = index - this._selectedIndex;\n    if (position < 0) {\n      return this._layoutDirection() === 'rtl' ? 'next' : 'previous';\n    } else if (position > 0) {\n      return this._layoutDirection() === 'rtl' ? 'previous' : 'next';\n    }\n    return 'current';\n  }\n  /** Returns the type of icon to be displayed. */\n  _getIndicatorType(index, state = STEP_STATE.NUMBER) {\n    const step = this.steps.toArray()[index];\n    const isCurrentStep = this._isCurrentStep(index);\n    return step._displayDefaultIndicatorType ? this._getDefaultIndicatorLogic(step, isCurrentStep) : this._getGuidelineLogic(step, isCurrentStep, state);\n  }\n  _getDefaultIndicatorLogic(step, isCurrentStep) {\n    if (step._showError && step.hasError && !isCurrentStep) {\n      return STEP_STATE.ERROR;\n    } else if (!step.completed || isCurrentStep) {\n      return STEP_STATE.NUMBER;\n    } else {\n      return step.editable ? STEP_STATE.EDIT : STEP_STATE.DONE;\n    }\n  }\n  _getGuidelineLogic(step, isCurrentStep, state = STEP_STATE.NUMBER) {\n    if (step._showError && step.hasError && !isCurrentStep) {\n      return STEP_STATE.ERROR;\n    } else if (step.completed && !isCurrentStep) {\n      return STEP_STATE.DONE;\n    } else if (step.completed && isCurrentStep) {\n      return state;\n    } else if (step.editable && isCurrentStep) {\n      return STEP_STATE.EDIT;\n    } else {\n      return state;\n    }\n  }\n  _isCurrentStep(index) {\n    return this._selectedIndex === index;\n  }\n  /** Returns the index of the currently-focused step header. */\n  _getFocusIndex() {\n    return this._keyManager ? this._keyManager.activeItemIndex : this._selectedIndex;\n  }\n  _updateSelectedItemIndex(newIndex) {\n    const stepsArray = this.steps.toArray();\n    this.selectionChange.emit({\n      selectedIndex: newIndex,\n      previouslySelectedIndex: this._selectedIndex,\n      selectedStep: stepsArray[newIndex],\n      previouslySelectedStep: stepsArray[this._selectedIndex]\n    });\n    // If focus is inside the stepper, move it to the next header, otherwise it may become\n    // lost when the active step content is hidden. We can't be more granular with the check\n    // (e.g. checking whether focus is inside the active step), because we don't have a\n    // reference to the elements that are rendering out the content.\n    this._containsFocus() ? this._keyManager.setActiveItem(newIndex) : this._keyManager.updateActiveItem(newIndex);\n    this._selectedIndex = newIndex;\n    this._stateChanged();\n  }\n  _onKeydown(event) {\n    const hasModifier = hasModifierKey(event);\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    if (manager.activeItemIndex != null && !hasModifier && (keyCode === SPACE || keyCode === ENTER)) {\n      this.selectedIndex = manager.activeItemIndex;\n      event.preventDefault();\n    } else {\n      manager.onKeydown(event);\n    }\n  }\n  _anyControlsInvalidOrPending(index) {\n    if (this._linear && index >= 0) {\n      return this.steps.toArray().slice(0, index).some(step => {\n        const control = step.stepControl;\n        const isIncomplete = control ? control.invalid || control.pending || !step.interacted : !step.completed;\n        return isIncomplete && !step.optional && !step._completedOverride;\n      });\n    }\n    return false;\n  }\n  _layoutDirection() {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n  /** Checks whether the stepper contains the focused element. */\n  _containsFocus() {\n    const stepperElement = this._elementRef.nativeElement;\n    const focusedElement = this._document.activeElement;\n    return stepperElement === focusedElement || stepperElement.contains(focusedElement);\n  }\n  /** Checks whether the passed-in index is a valid step index. */\n  _isValidIndex(index) {\n    return index > -1 && (!this.steps || index < this.steps.length);\n  }\n}\nCdkStepper.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[cdkStepper]',\n    exportAs: 'cdkStepper'\n  }]\n}];\nCdkStepper.ctorParameters = () => [{\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: ElementRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\nCdkStepper.propDecorators = {\n  _steps: [{\n    type: ContentChildren,\n    args: [CdkStep, {\n      descendants: true\n    }]\n  }],\n  _stepHeader: [{\n    type: ContentChildren,\n    args: [CdkStepHeader, {\n      descendants: true\n    }]\n  }],\n  linear: [{\n    type: Input\n  }],\n  selectedIndex: [{\n    type: Input\n  }],\n  selected: [{\n    type: Input\n  }],\n  selectionChange: [{\n    type: Output\n  }],\n  orientation: [{\n    type: Input\n  }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Button that moves to the next step in a stepper workflow. */\nclass CdkStepperNext {\n  constructor(_stepper) {\n    this._stepper = _stepper;\n    /** Type of the next button. Defaults to \"submit\" if not specified. */\n    this.type = 'submit';\n  }\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  _handleClick() {\n    this._stepper.next();\n  }\n}\nCdkStepperNext.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'button[cdkStepperNext]',\n    host: {\n      '[type]': 'type'\n    }\n  }]\n}];\nCdkStepperNext.ctorParameters = () => [{\n  type: CdkStepper\n}];\nCdkStepperNext.propDecorators = {\n  type: [{\n    type: Input\n  }],\n  _handleClick: [{\n    type: HostListener,\n    args: ['click']\n  }]\n};\n/** Button that moves to the previous step in a stepper workflow. */\nclass CdkStepperPrevious {\n  constructor(_stepper) {\n    this._stepper = _stepper;\n    /** Type of the previous button. Defaults to \"button\" if not specified. */\n    this.type = 'button';\n  }\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  _handleClick() {\n    this._stepper.previous();\n  }\n}\nCdkStepperPrevious.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'button[cdkStepperPrevious]',\n    host: {\n      '[type]': 'type'\n    }\n  }]\n}];\nCdkStepperPrevious.ctorParameters = () => [{\n  type: CdkStepper\n}];\nCdkStepperPrevious.propDecorators = {\n  type: [{\n    type: Input\n  }],\n  _handleClick: [{\n    type: HostListener,\n    args: ['click']\n  }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass CdkStepperModule {}\nCdkStepperModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [BidiModule],\n    exports: [CdkStep, CdkStepper, CdkStepHeader, CdkStepLabel, CdkStepperNext, CdkStepperPrevious],\n    declarations: [CdkStep, CdkStepper, CdkStepHeader, CdkStepLabel, CdkStepperNext, CdkStepperPrevious]\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkStep, CdkStepHeader, CdkStepLabel, CdkStepper, CdkStepperModule, CdkStepperNext, CdkStepperPrevious, STEPPER_GLOBAL_OPTIONS, STEP_STATE, StepperSelectionEvent };","map":{"version":3,"names":["FocusKeyManager","Directionality","BidiModule","coerceBooleanProperty","coerceNumberProperty","hasModifierKey","SPACE","ENTER","DOCUMENT","Directive","ElementRef","TemplateRef","InjectionToken","EventEmitter","Component","ViewEncapsulation","ChangeDetectionStrategy","Inject","forwardRef","Optional","ContentChild","ViewChild","Input","Output","QueryList","ChangeDetectorRef","ContentChildren","HostListener","NgModule","Subject","of","startWith","takeUntil","CdkStepHeader","constructor","_elementRef","focus","nativeElement","decorators","type","args","selector","host","ctorParameters","CdkStepLabel","template","nextId","StepperSelectionEvent","STEP_STATE","NUMBER","EDIT","DONE","ERROR","STEPPER_GLOBAL_OPTIONS","CdkStep","_stepper","stepperOptions","interacted","interactedStream","_editable","_optional","_completedOverride","_customError","_stepperOptions","_displayDefaultIndicatorType","displayDefaultIndicatorType","_showError","showError","editable","value","optional","completed","_getDefaultCompleted","stepControl","valid","hasError","_getDefaultError","invalid","select","selected","reset","ngOnChanges","_stateChanged","_markAsInteracted","emit","exportAs","encapsulation","None","changeDetection","OnPush","CdkStepper","undefined","propDecorators","stepLabel","content","static","label","errorMessage","ariaLabel","ariaLabelledby","state","_dir","_changeDetectorRef","_document","_destroyed","steps","_linear","_selectedIndex","selectionChange","_orientation","_groupId","linear","selectedIndex","index","_a","newIndex","_steps","_isValidIndex","ngDevMode","Error","_anyControlsInvalidOrPending","toArray","_updateSelectedItemIndex","step","indexOf","orientation","_keyManager","withVerticalOrientation","ngAfterContentInit","changes","pipe","subscribe","filter","notifyOnChanges","ngAfterViewInit","_stepHeader","withWrap","withHomeAndEnd","change","_layoutDirection","direction","withHorizontalOrientation","updateActiveItem","Math","max","ngOnDestroy","destroy","next","complete","min","length","previous","forEach","_getStepLabelId","i","_getStepContentId","markForCheck","_getAnimationDirection","position","_getIndicatorType","isCurrentStep","_isCurrentStep","_getDefaultIndicatorLogic","_getGuidelineLogic","_getFocusIndex","activeItemIndex","stepsArray","previouslySelectedIndex","selectedStep","previouslySelectedStep","_containsFocus","setActiveItem","_onKeydown","event","hasModifier","keyCode","manager","preventDefault","onKeydown","slice","some","control","isIncomplete","pending","stepperElement","focusedElement","activeElement","contains","descendants","CdkStepperNext","_handleClick","CdkStepperPrevious","CdkStepperModule","imports","exports","declarations"],"sources":["D:/alodelivery test/node_modules/@angular/cdk/fesm2015/stepper.js"],"sourcesContent":["import { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { hasModifierKey, SPACE, ENTER } from '@angular/cdk/keycodes';\nimport { DOCUMENT } from '@angular/common';\nimport { Directive, ElementRef, TemplateRef, InjectionToken, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, forwardRef, Optional, ContentChild, ViewChild, Input, Output, QueryList, ChangeDetectorRef, ContentChildren, HostListener, NgModule } from '@angular/core';\nimport { Subject, of } from 'rxjs';\nimport { startWith, takeUntil } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass CdkStepHeader {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n    /** Focuses the step header. */\n    focus() {\n        this._elementRef.nativeElement.focus();\n    }\n}\nCdkStepHeader.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkStepHeader]',\n                host: {\n                    'role': 'tab',\n                },\n            },] }\n];\nCdkStepHeader.ctorParameters = () => [\n    { type: ElementRef }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass CdkStepLabel {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkStepLabel.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkStepLabel]',\n            },] }\n];\nCdkStepLabel.ctorParameters = () => [\n    { type: TemplateRef }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Used to generate unique ID for each stepper component. */\nlet nextId = 0;\n/** Change event emitted on selection changes. */\nclass StepperSelectionEvent {\n}\n/** Enum to represent the different states of the steps. */\nconst STEP_STATE = {\n    NUMBER: 'number',\n    EDIT: 'edit',\n    DONE: 'done',\n    ERROR: 'error'\n};\n/** InjectionToken that can be used to specify the global stepper options. */\nconst STEPPER_GLOBAL_OPTIONS = new InjectionToken('STEPPER_GLOBAL_OPTIONS');\nclass CdkStep {\n    constructor(_stepper, stepperOptions) {\n        this._stepper = _stepper;\n        /** Whether user has attempted to move away from the step. */\n        this.interacted = false;\n        /** Emits when the user has attempted to move away from the step. */\n        this.interactedStream = new EventEmitter();\n        this._editable = true;\n        this._optional = false;\n        this._completedOverride = null;\n        this._customError = null;\n        this._stepperOptions = stepperOptions ? stepperOptions : {};\n        this._displayDefaultIndicatorType = this._stepperOptions.displayDefaultIndicatorType !== false;\n        this._showError = !!this._stepperOptions.showError;\n    }\n    /** Whether the user can return to this step once it has been marked as completed. */\n    get editable() {\n        return this._editable;\n    }\n    set editable(value) {\n        this._editable = coerceBooleanProperty(value);\n    }\n    /** Whether the completion of step is optional. */\n    get optional() {\n        return this._optional;\n    }\n    set optional(value) {\n        this._optional = coerceBooleanProperty(value);\n    }\n    /** Whether step is marked as completed. */\n    get completed() {\n        return this._completedOverride == null ? this._getDefaultCompleted() : this._completedOverride;\n    }\n    set completed(value) {\n        this._completedOverride = coerceBooleanProperty(value);\n    }\n    _getDefaultCompleted() {\n        return this.stepControl ? this.stepControl.valid && this.interacted : this.interacted;\n    }\n    /** Whether step has an error. */\n    get hasError() {\n        return this._customError == null ? this._getDefaultError() : this._customError;\n    }\n    set hasError(value) {\n        this._customError = coerceBooleanProperty(value);\n    }\n    _getDefaultError() {\n        return this.stepControl && this.stepControl.invalid && this.interacted;\n    }\n    /** Selects this step component. */\n    select() {\n        this._stepper.selected = this;\n    }\n    /** Resets the step to its initial state. Note that this includes resetting form data. */\n    reset() {\n        this.interacted = false;\n        if (this._completedOverride != null) {\n            this._completedOverride = false;\n        }\n        if (this._customError != null) {\n            this._customError = false;\n        }\n        if (this.stepControl) {\n            this.stepControl.reset();\n        }\n    }\n    ngOnChanges() {\n        // Since basically all inputs of the MatStep get proxied through the view down to the\n        // underlying MatStepHeader, we have to make sure that change detection runs correctly.\n        this._stepper._stateChanged();\n    }\n    _markAsInteracted() {\n        if (!this.interacted) {\n            this.interacted = true;\n            this.interactedStream.emit(this);\n        }\n    }\n}\nCdkStep.decorators = [\n    { type: Component, args: [{\n                selector: 'cdk-step',\n                exportAs: 'cdkStep',\n                template: '<ng-template><ng-content></ng-content></ng-template>',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            },] }\n];\nCdkStep.ctorParameters = () => [\n    { type: CdkStepper, decorators: [{ type: Inject, args: [forwardRef(() => CdkStepper),] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [STEPPER_GLOBAL_OPTIONS,] }] }\n];\nCdkStep.propDecorators = {\n    stepLabel: [{ type: ContentChild, args: [CdkStepLabel,] }],\n    content: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\n    stepControl: [{ type: Input }],\n    interactedStream: [{ type: Output, args: ['interacted',] }],\n    label: [{ type: Input }],\n    errorMessage: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    state: [{ type: Input }],\n    editable: [{ type: Input }],\n    optional: [{ type: Input }],\n    completed: [{ type: Input }],\n    hasError: [{ type: Input }]\n};\nclass CdkStepper {\n    constructor(_dir, _changeDetectorRef, _elementRef, _document) {\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /** Steps that belong to the current stepper, excluding ones from nested steppers. */\n        this.steps = new QueryList();\n        this._linear = false;\n        this._selectedIndex = 0;\n        /** Event emitted when the selected step has changed. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * @deprecated To be turned into a private property. Use `orientation` instead.\n         * @breaking-change 13.0.0\n         */\n        this._orientation = 'horizontal';\n        this._groupId = nextId++;\n        this._document = _document;\n    }\n    /** Whether the validity of previous steps should be checked or not. */\n    get linear() {\n        return this._linear;\n    }\n    set linear(value) {\n        this._linear = coerceBooleanProperty(value);\n    }\n    /** The index of the selected step. */\n    get selectedIndex() {\n        return this._selectedIndex;\n    }\n    set selectedIndex(index) {\n        var _a;\n        const newIndex = coerceNumberProperty(index);\n        if (this.steps && this._steps) {\n            // Ensure that the index can't be out of bounds.\n            if (!this._isValidIndex(index) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('cdkStepper: Cannot assign out-of-bounds value to `selectedIndex`.');\n            }\n            (_a = this.selected) === null || _a === void 0 ? void 0 : _a._markAsInteracted();\n            if (this._selectedIndex !== newIndex && !this._anyControlsInvalidOrPending(newIndex) &&\n                (newIndex >= this._selectedIndex || this.steps.toArray()[newIndex].editable)) {\n                this._updateSelectedItemIndex(index);\n            }\n        }\n        else {\n            this._selectedIndex = newIndex;\n        }\n    }\n    /** The step that is selected. */\n    get selected() {\n        return this.steps ? this.steps.toArray()[this.selectedIndex] : undefined;\n    }\n    set selected(step) {\n        this.selectedIndex = (step && this.steps) ? this.steps.toArray().indexOf(step) : -1;\n    }\n    /** Orientation of the stepper. */\n    get orientation() { return this._orientation; }\n    set orientation(value) {\n        // This is a protected method so that `MatSteppter` can hook into it.\n        this._orientation = value;\n        if (this._keyManager) {\n            this._keyManager.withVerticalOrientation(value === 'vertical');\n        }\n    }\n    ngAfterContentInit() {\n        this._steps.changes\n            .pipe(startWith(this._steps), takeUntil(this._destroyed))\n            .subscribe((steps) => {\n            this.steps.reset(steps.filter(step => step._stepper === this));\n            this.steps.notifyOnChanges();\n        });\n    }\n    ngAfterViewInit() {\n        // Note that while the step headers are content children by default, any components that\n        // extend this one might have them as view children. We initialize the keyboard handling in\n        // AfterViewInit so we're guaranteed for both view and content children to be defined.\n        this._keyManager = new FocusKeyManager(this._stepHeader)\n            .withWrap()\n            .withHomeAndEnd()\n            .withVerticalOrientation(this._orientation === 'vertical');\n        (this._dir ? this._dir.change : of())\n            .pipe(startWith(this._layoutDirection()), takeUntil(this._destroyed))\n            .subscribe(direction => this._keyManager.withHorizontalOrientation(direction));\n        this._keyManager.updateActiveItem(this._selectedIndex);\n        // No need to `takeUntil` here, because we're the ones destroying `steps`.\n        this.steps.changes.subscribe(() => {\n            if (!this.selected) {\n                this._selectedIndex = Math.max(this._selectedIndex - 1, 0);\n            }\n        });\n        // The logic which asserts that the selected index is within bounds doesn't run before the\n        // steps are initialized, because we don't how many steps there are yet so we may have an\n        // invalid index on init. If that's the case, auto-correct to the default so we don't throw.\n        if (!this._isValidIndex(this._selectedIndex)) {\n            this._selectedIndex = 0;\n        }\n    }\n    ngOnDestroy() {\n        this.steps.destroy();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Selects and focuses the next step in list. */\n    next() {\n        this.selectedIndex = Math.min(this._selectedIndex + 1, this.steps.length - 1);\n    }\n    /** Selects and focuses the previous step in list. */\n    previous() {\n        this.selectedIndex = Math.max(this._selectedIndex - 1, 0);\n    }\n    /** Resets the stepper to its initial state. Note that this includes clearing form data. */\n    reset() {\n        this._updateSelectedItemIndex(0);\n        this.steps.forEach(step => step.reset());\n        this._stateChanged();\n    }\n    /** Returns a unique id for each step label element. */\n    _getStepLabelId(i) {\n        return `cdk-step-label-${this._groupId}-${i}`;\n    }\n    /** Returns unique id for each step content element. */\n    _getStepContentId(i) {\n        return `cdk-step-content-${this._groupId}-${i}`;\n    }\n    /** Marks the component to be change detected. */\n    _stateChanged() {\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Returns position state of the step with the given index. */\n    _getAnimationDirection(index) {\n        const position = index - this._selectedIndex;\n        if (position < 0) {\n            return this._layoutDirection() === 'rtl' ? 'next' : 'previous';\n        }\n        else if (position > 0) {\n            return this._layoutDirection() === 'rtl' ? 'previous' : 'next';\n        }\n        return 'current';\n    }\n    /** Returns the type of icon to be displayed. */\n    _getIndicatorType(index, state = STEP_STATE.NUMBER) {\n        const step = this.steps.toArray()[index];\n        const isCurrentStep = this._isCurrentStep(index);\n        return step._displayDefaultIndicatorType ? this._getDefaultIndicatorLogic(step, isCurrentStep) :\n            this._getGuidelineLogic(step, isCurrentStep, state);\n    }\n    _getDefaultIndicatorLogic(step, isCurrentStep) {\n        if (step._showError && step.hasError && !isCurrentStep) {\n            return STEP_STATE.ERROR;\n        }\n        else if (!step.completed || isCurrentStep) {\n            return STEP_STATE.NUMBER;\n        }\n        else {\n            return step.editable ? STEP_STATE.EDIT : STEP_STATE.DONE;\n        }\n    }\n    _getGuidelineLogic(step, isCurrentStep, state = STEP_STATE.NUMBER) {\n        if (step._showError && step.hasError && !isCurrentStep) {\n            return STEP_STATE.ERROR;\n        }\n        else if (step.completed && !isCurrentStep) {\n            return STEP_STATE.DONE;\n        }\n        else if (step.completed && isCurrentStep) {\n            return state;\n        }\n        else if (step.editable && isCurrentStep) {\n            return STEP_STATE.EDIT;\n        }\n        else {\n            return state;\n        }\n    }\n    _isCurrentStep(index) {\n        return this._selectedIndex === index;\n    }\n    /** Returns the index of the currently-focused step header. */\n    _getFocusIndex() {\n        return this._keyManager ? this._keyManager.activeItemIndex : this._selectedIndex;\n    }\n    _updateSelectedItemIndex(newIndex) {\n        const stepsArray = this.steps.toArray();\n        this.selectionChange.emit({\n            selectedIndex: newIndex,\n            previouslySelectedIndex: this._selectedIndex,\n            selectedStep: stepsArray[newIndex],\n            previouslySelectedStep: stepsArray[this._selectedIndex],\n        });\n        // If focus is inside the stepper, move it to the next header, otherwise it may become\n        // lost when the active step content is hidden. We can't be more granular with the check\n        // (e.g. checking whether focus is inside the active step), because we don't have a\n        // reference to the elements that are rendering out the content.\n        this._containsFocus() ? this._keyManager.setActiveItem(newIndex) :\n            this._keyManager.updateActiveItem(newIndex);\n        this._selectedIndex = newIndex;\n        this._stateChanged();\n    }\n    _onKeydown(event) {\n        const hasModifier = hasModifierKey(event);\n        const keyCode = event.keyCode;\n        const manager = this._keyManager;\n        if (manager.activeItemIndex != null && !hasModifier &&\n            (keyCode === SPACE || keyCode === ENTER)) {\n            this.selectedIndex = manager.activeItemIndex;\n            event.preventDefault();\n        }\n        else {\n            manager.onKeydown(event);\n        }\n    }\n    _anyControlsInvalidOrPending(index) {\n        if (this._linear && index >= 0) {\n            return this.steps.toArray().slice(0, index).some(step => {\n                const control = step.stepControl;\n                const isIncomplete = control ? (control.invalid || control.pending || !step.interacted) : !step.completed;\n                return isIncomplete && !step.optional && !step._completedOverride;\n            });\n        }\n        return false;\n    }\n    _layoutDirection() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /** Checks whether the stepper contains the focused element. */\n    _containsFocus() {\n        const stepperElement = this._elementRef.nativeElement;\n        const focusedElement = this._document.activeElement;\n        return stepperElement === focusedElement || stepperElement.contains(focusedElement);\n    }\n    /** Checks whether the passed-in index is a valid step index. */\n    _isValidIndex(index) {\n        return index > -1 && (!this.steps || index < this.steps.length);\n    }\n}\nCdkStepper.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkStepper]',\n                exportAs: 'cdkStepper',\n            },] }\n];\nCdkStepper.ctorParameters = () => [\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nCdkStepper.propDecorators = {\n    _steps: [{ type: ContentChildren, args: [CdkStep, { descendants: true },] }],\n    _stepHeader: [{ type: ContentChildren, args: [CdkStepHeader, { descendants: true },] }],\n    linear: [{ type: Input }],\n    selectedIndex: [{ type: Input }],\n    selected: [{ type: Input }],\n    selectionChange: [{ type: Output }],\n    orientation: [{ type: Input }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Button that moves to the next step in a stepper workflow. */\nclass CdkStepperNext {\n    constructor(_stepper) {\n        this._stepper = _stepper;\n        /** Type of the next button. Defaults to \"submit\" if not specified. */\n        this.type = 'submit';\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _handleClick() {\n        this._stepper.next();\n    }\n}\nCdkStepperNext.decorators = [\n    { type: Directive, args: [{\n                selector: 'button[cdkStepperNext]',\n                host: {\n                    '[type]': 'type',\n                }\n            },] }\n];\nCdkStepperNext.ctorParameters = () => [\n    { type: CdkStepper }\n];\nCdkStepperNext.propDecorators = {\n    type: [{ type: Input }],\n    _handleClick: [{ type: HostListener, args: ['click',] }]\n};\n/** Button that moves to the previous step in a stepper workflow. */\nclass CdkStepperPrevious {\n    constructor(_stepper) {\n        this._stepper = _stepper;\n        /** Type of the previous button. Defaults to \"button\" if not specified. */\n        this.type = 'button';\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _handleClick() {\n        this._stepper.previous();\n    }\n}\nCdkStepperPrevious.decorators = [\n    { type: Directive, args: [{\n                selector: 'button[cdkStepperPrevious]',\n                host: {\n                    '[type]': 'type',\n                }\n            },] }\n];\nCdkStepperPrevious.ctorParameters = () => [\n    { type: CdkStepper }\n];\nCdkStepperPrevious.propDecorators = {\n    type: [{ type: Input }],\n    _handleClick: [{ type: HostListener, args: ['click',] }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass CdkStepperModule {\n}\nCdkStepperModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [BidiModule],\n                exports: [\n                    CdkStep,\n                    CdkStepper,\n                    CdkStepHeader,\n                    CdkStepLabel,\n                    CdkStepperNext,\n                    CdkStepperPrevious,\n                ],\n                declarations: [\n                    CdkStep,\n                    CdkStepper,\n                    CdkStepHeader,\n                    CdkStepLabel,\n                    CdkStepperNext,\n                    CdkStepperPrevious,\n                ]\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkStep, CdkStepHeader, CdkStepLabel, CdkStepper, CdkStepperModule, CdkStepperNext, CdkStepperPrevious, STEPPER_GLOBAL_OPTIONS, STEP_STATE, StepperSelectionEvent };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}