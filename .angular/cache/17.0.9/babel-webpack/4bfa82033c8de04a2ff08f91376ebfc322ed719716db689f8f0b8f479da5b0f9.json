{"ast":null,"code":"/**\r\n * Axis break module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Container } from \"../../core/Container\";\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\nimport { WavedLine } from \"../../core/elements/WavedLine\";\nimport { List } from \"../../core/utils/List\";\nimport { registry } from \"../../core/Registry\";\nimport { color } from \"../../core/utils/Color\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Base class to define \"breaks\" on axes.\r\n *\r\n * @see {@link IAxisBreakEvents} for a list of available events\r\n * @see {@link IAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\nvar AxisBreak = /** @class */function (_super) {\n  __extends(AxisBreak, _super);\n  /**\r\n   * Constructor\r\n   */\n  function AxisBreak() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * Reference to parent Axis.\r\n     */\n    _this._axis = new MutableValueDisposer();\n    /**\r\n     * A list of axis data items which fall within this break.\r\n     */\n    _this.dataItems = new List();\n    _this.className = \"AxisBreak\";\n    // Set defaults\n    _this.breakSize = 0.01;\n    _this.marginLeft = -5;\n    _this.marginRight = -5;\n    _this.marginTop = -5;\n    _this.marginBottom = -5;\n    var interfaceColors = new InterfaceColorSet();\n    // Create elements\n    // (these won't be used actually, just for setting properties)\n    var fillShape = new WavedLine();\n    fillShape.fill = interfaceColors.getFor(\"background\");\n    fillShape.stroke = color();\n    fillShape.fillOpacity = 0.9;\n    fillShape.zIndex = 0;\n    _this._fillShape = fillShape;\n    var startLine = new WavedLine();\n    startLine.fill = color();\n    startLine.stroke = interfaceColors.getFor(\"grid\");\n    startLine.strokeOpacity = 0.3;\n    startLine.zIndex = 1;\n    _this._startLine = startLine;\n    var endLine = new WavedLine();\n    endLine.fill = color();\n    endLine.stroke = color(\"#000000\"); // interfaceColors.getFor(\"grid\");\n    endLine.strokeOpacity = 0.3;\n    endLine.zIndex = 2;\n    _this._endLine = endLine;\n    _this._disposers.push(_this._axis);\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  AxisBreak.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n    if (this._fillShape) {\n      this._fillShape.dispose();\n    }\n    if (this._startLine) {\n      this._startLine.dispose();\n    }\n    if (this._endLine) {\n      this._endLine.dispose();\n    }\n  };\n  Object.defineProperty(AxisBreak.prototype, \"startLine\", {\n    /**\r\n     * @return Element\r\n     */\n    get: function () {\n      return this._startLine;\n    },\n    /**\r\n     * An element used for the starting line of the break.\r\n     *\r\n     * @param sprite  Element\r\n     */\n    set: function (sprite) {\n      if (this._startLine) {\n        this._startLine.dispose();\n      }\n      this._startLine = sprite;\n      this.addBreakSprite(sprite);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"endLine\", {\n    /**\r\n     * @return Element\r\n     */\n    get: function () {\n      return this._endLine;\n    },\n    /**\r\n     * An element used for the end line of the break.\r\n     *\r\n     * @param sprite Element\r\n     */\n    set: function (sprite) {\n      if (this._endLine) {\n        this._endLine.dispose();\n      }\n      this._endLine = sprite;\n      this.addBreakSprite(sprite);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"fillShape\", {\n    /**\r\n     * @return Element\r\n     */\n    get: function () {\n      return this._fillShape;\n    },\n    /**\r\n     * An element used for fill of the break.\r\n     *\r\n     * @param sprite Element\r\n     */\n    set: function (sprite) {\n      if (this._fillShape) {\n        this._fillShape.dispose();\n      }\n      this._fillShape = sprite;\n      this.addBreakSprite(sprite);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Adds a break element (e.g. lines, fill) to the break, which is\r\n   * [[Container]].\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param sprite Element to add\r\n   */\n  AxisBreak.prototype.addBreakSprite = function (sprite) {\n    sprite.parent = this;\n    sprite.isMeasured = false;\n    this._disposers.push(sprite);\n  };\n  Object.defineProperty(AxisBreak.prototype, \"axis\", {\n    /**\r\n     * @return Axis\r\n     */\n    get: function () {\n      return this._axis.get();\n    },\n    /**\r\n     * An Axis this Break is associated with.\r\n     *\r\n     * @param axis  Axis\r\n     */\n    set: function (axis) {\n      if (this._axis.get() !== axis) {\n        this._axis.set(axis, axis.renderer.gridContainer.events.on(\"transformed\", this.invalidate, this, false));\n        axis.renderer.createBreakSprites(this);\n        // this can't go to copyFrom, as axis is set later\n        var breakTemplate = axis.axisBreaks.template;\n        this.startLine.copyFrom(breakTemplate.startLine);\n        this.endLine.copyFrom(breakTemplate.endLine);\n        this.fillShape.copyFrom(breakTemplate.fillShape);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"breakSize\", {\n    /**\r\n     * @return Relative axis break\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"breakSize\");\n    },\n    /**\r\n     * A size of the break relative to the actual size of the scope break spans.\r\n     *\r\n     * For example, if `breakSize = 0.1` and unbroken scope of values it spans\r\n     * would be 100 pixels, the break would be 10 pixels wide.\r\n     *\r\n     * 0 means the break will completely collapse and hide the values.\r\n     * 1 means break would be not collapse at all, which would make it\r\n     * effectively useless.\r\n     *\r\n     * @default 0.01\r\n     * @param value  Relative axis break\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"breakSize\", value)) {\n        if (this.axis) {\n          this.axis.invalidate();\n          this.axis.invalidateSeries();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"startPoint\", {\n    /**\r\n     * Returns pixel coordinates of axis break's start.\r\n     *\r\n     * @return Start point\r\n     */\n    get: function () {\n      var renderer = this.axis.renderer;\n      if (renderer) {\n        return renderer.positionToPoint(this.startPosition);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"endPoint\", {\n    /**\r\n     * Returns pixel coordinates of axis break's end.\r\n     *\r\n     * @return End point\r\n     */\n    get: function () {\n      var renderer = this.axis.renderer;\n      if (renderer) {\n        return renderer.positionToPoint(this.endPosition);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"startPosition\", {\n    /**\r\n     * Returns a relative position at which axis break starts.\r\n     *\r\n     * This is a calculated position, meaning it shows relative position of the\r\n     * break after break is applied.\r\n     *\r\n     * @return Start position\r\n     */\n    get: function () {\n      return;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"endPosition\", {\n    /**\r\n     * Returns a relative position at which axis break ends.\r\n     *\r\n     * This is a calculated position, meaning it shows relative position of the\r\n     * break after break is applied.\r\n     *\r\n     * @return End position\r\n     */\n    get: function () {\n      return;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Draws the axis break.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  AxisBreak.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n    if (this.axis) {\n      var renderer = this.axis.renderer;\n      renderer.updateBreakElement(this);\n    }\n  };\n  Object.defineProperty(AxisBreak.prototype, \"startValue\", {\n    /**\r\n     * @return Starting value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startValue\");\n    },\n    /**\r\n     * A starting value for the break.\r\n     *\r\n     * @param value  Starting value\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"startValue\", value)) {\n        if (this.axis) {\n          this.axis.invalidate();\n          this.axis.invalidateSeries();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisBreak.prototype, \"endValue\", {\n    /**\r\n     * @return End value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endValue\");\n    },\n    /**\r\n     * An end value for the break.\r\n     *\r\n     * @param value  End value\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"endValue\", value)) {\n        if (this.axis) {\n          this.axis.invalidate();\n          this.axis.invalidateSeries();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return AxisBreak;\n}(Container);\nexport { AxisBreak };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"AxisBreak\"] = AxisBreak;","map":{"version":3,"names":["__extends","Container","MutableValueDisposer","WavedLine","List","registry","color","InterfaceColorSet","AxisBreak","_super","_this","call","_axis","dataItems","className","breakSize","marginLeft","marginRight","marginTop","marginBottom","interfaceColors","fillShape","fill","getFor","stroke","fillOpacity","zIndex","_fillShape","startLine","strokeOpacity","_startLine","endLine","_endLine","_disposers","push","applyTheme","prototype","dispose","Object","defineProperty","get","set","sprite","addBreakSprite","enumerable","configurable","parent","isMeasured","axis","renderer","gridContainer","events","on","invalidate","createBreakSprites","breakTemplate","axisBreaks","template","copyFrom","getPropertyValue","value","setPropertyValue","invalidateSeries","positionToPoint","startPosition","endPosition","draw","updateBreakElement","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/charts/axes/AxisBreak.js"],"sourcesContent":["/**\r\n * Axis break module\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../../core/Container\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { WavedLine } from \"../../core/elements/WavedLine\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Base class to define \"breaks\" on axes.\r\n *\r\n * @see {@link IAxisBreakEvents} for a list of available events\r\n * @see {@link IAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar AxisBreak = /** @class */ (function (_super) {\r\n    __extends(AxisBreak, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function AxisBreak() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Reference to parent Axis.\r\n         */\r\n        _this._axis = new MutableValueDisposer();\r\n        /**\r\n         * A list of axis data items which fall within this break.\r\n         */\r\n        _this.dataItems = new List();\r\n        _this.className = \"AxisBreak\";\r\n        // Set defaults\r\n        _this.breakSize = 0.01;\r\n        _this.marginLeft = -5;\r\n        _this.marginRight = -5;\r\n        _this.marginTop = -5;\r\n        _this.marginBottom = -5;\r\n        var interfaceColors = new InterfaceColorSet();\r\n        // Create elements\r\n        // (these won't be used actually, just for setting properties)\r\n        var fillShape = new WavedLine();\r\n        fillShape.fill = interfaceColors.getFor(\"background\");\r\n        fillShape.stroke = color();\r\n        fillShape.fillOpacity = 0.9;\r\n        fillShape.zIndex = 0;\r\n        _this._fillShape = fillShape;\r\n        var startLine = new WavedLine();\r\n        startLine.fill = color();\r\n        startLine.stroke = interfaceColors.getFor(\"grid\");\r\n        startLine.strokeOpacity = 0.3;\r\n        startLine.zIndex = 1;\r\n        _this._startLine = startLine;\r\n        var endLine = new WavedLine();\r\n        endLine.fill = color();\r\n        endLine.stroke = color(\"#000000\"); // interfaceColors.getFor(\"grid\");\r\n        endLine.strokeOpacity = 0.3;\r\n        endLine.zIndex = 2;\r\n        _this._endLine = endLine;\r\n        _this._disposers.push(_this._axis);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    AxisBreak.prototype.dispose = function () {\r\n        _super.prototype.dispose.call(this);\r\n        if (this._fillShape) {\r\n            this._fillShape.dispose();\r\n        }\r\n        if (this._startLine) {\r\n            this._startLine.dispose();\r\n        }\r\n        if (this._endLine) {\r\n            this._endLine.dispose();\r\n        }\r\n    };\r\n    Object.defineProperty(AxisBreak.prototype, \"startLine\", {\r\n        /**\r\n         * @return Element\r\n         */\r\n        get: function () {\r\n            return this._startLine;\r\n        },\r\n        /**\r\n         * An element used for the starting line of the break.\r\n         *\r\n         * @param sprite  Element\r\n         */\r\n        set: function (sprite) {\r\n            if (this._startLine) {\r\n                this._startLine.dispose();\r\n            }\r\n            this._startLine = sprite;\r\n            this.addBreakSprite(sprite);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisBreak.prototype, \"endLine\", {\r\n        /**\r\n         * @return Element\r\n         */\r\n        get: function () {\r\n            return this._endLine;\r\n        },\r\n        /**\r\n         * An element used for the end line of the break.\r\n         *\r\n         * @param sprite Element\r\n         */\r\n        set: function (sprite) {\r\n            if (this._endLine) {\r\n                this._endLine.dispose();\r\n            }\r\n            this._endLine = sprite;\r\n            this.addBreakSprite(sprite);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisBreak.prototype, \"fillShape\", {\r\n        /**\r\n         * @return Element\r\n         */\r\n        get: function () {\r\n            return this._fillShape;\r\n        },\r\n        /**\r\n         * An element used for fill of the break.\r\n         *\r\n         * @param sprite Element\r\n         */\r\n        set: function (sprite) {\r\n            if (this._fillShape) {\r\n                this._fillShape.dispose();\r\n            }\r\n            this._fillShape = sprite;\r\n            this.addBreakSprite(sprite);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Adds a break element (e.g. lines, fill) to the break, which is\r\n     * [[Container]].\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param sprite Element to add\r\n     */\r\n    AxisBreak.prototype.addBreakSprite = function (sprite) {\r\n        sprite.parent = this;\r\n        sprite.isMeasured = false;\r\n        this._disposers.push(sprite);\r\n    };\r\n    Object.defineProperty(AxisBreak.prototype, \"axis\", {\r\n        /**\r\n         * @return Axis\r\n         */\r\n        get: function () {\r\n            return this._axis.get();\r\n        },\r\n        /**\r\n         * An Axis this Break is associated with.\r\n         *\r\n         * @param axis  Axis\r\n         */\r\n        set: function (axis) {\r\n            if (this._axis.get() !== axis) {\r\n                this._axis.set(axis, axis.renderer.gridContainer.events.on(\"transformed\", this.invalidate, this, false));\r\n                axis.renderer.createBreakSprites(this);\r\n                // this can't go to copyFrom, as axis is set later\r\n                var breakTemplate = axis.axisBreaks.template;\r\n                this.startLine.copyFrom(breakTemplate.startLine);\r\n                this.endLine.copyFrom(breakTemplate.endLine);\r\n                this.fillShape.copyFrom(breakTemplate.fillShape);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisBreak.prototype, \"breakSize\", {\r\n        /**\r\n         * @return Relative axis break\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"breakSize\");\r\n        },\r\n        /**\r\n         * A size of the break relative to the actual size of the scope break spans.\r\n         *\r\n         * For example, if `breakSize = 0.1` and unbroken scope of values it spans\r\n         * would be 100 pixels, the break would be 10 pixels wide.\r\n         *\r\n         * 0 means the break will completely collapse and hide the values.\r\n         * 1 means break would be not collapse at all, which would make it\r\n         * effectively useless.\r\n         *\r\n         * @default 0.01\r\n         * @param value  Relative axis break\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"breakSize\", value)) {\r\n                if (this.axis) {\r\n                    this.axis.invalidate();\r\n                    this.axis.invalidateSeries();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisBreak.prototype, \"startPoint\", {\r\n        /**\r\n         * Returns pixel coordinates of axis break's start.\r\n         *\r\n         * @return Start point\r\n         */\r\n        get: function () {\r\n            var renderer = this.axis.renderer;\r\n            if (renderer) {\r\n                return renderer.positionToPoint(this.startPosition);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisBreak.prototype, \"endPoint\", {\r\n        /**\r\n         * Returns pixel coordinates of axis break's end.\r\n         *\r\n         * @return End point\r\n         */\r\n        get: function () {\r\n            var renderer = this.axis.renderer;\r\n            if (renderer) {\r\n                return renderer.positionToPoint(this.endPosition);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisBreak.prototype, \"startPosition\", {\r\n        /**\r\n         * Returns a relative position at which axis break starts.\r\n         *\r\n         * This is a calculated position, meaning it shows relative position of the\r\n         * break after break is applied.\r\n         *\r\n         * @return Start position\r\n         */\r\n        get: function () {\r\n            return;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisBreak.prototype, \"endPosition\", {\r\n        /**\r\n         * Returns a relative position at which axis break ends.\r\n         *\r\n         * This is a calculated position, meaning it shows relative position of the\r\n         * break after break is applied.\r\n         *\r\n         * @return End position\r\n         */\r\n        get: function () {\r\n            return;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Draws the axis break.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    AxisBreak.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        if (this.axis) {\r\n            var renderer = this.axis.renderer;\r\n            renderer.updateBreakElement(this);\r\n        }\r\n    };\r\n    Object.defineProperty(AxisBreak.prototype, \"startValue\", {\r\n        /**\r\n         * @return Starting value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startValue\");\r\n        },\r\n        /**\r\n         * A starting value for the break.\r\n         *\r\n         * @param value  Starting value\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"startValue\", value)) {\r\n                if (this.axis) {\r\n                    this.axis.invalidate();\r\n                    this.axis.invalidateSeries();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AxisBreak.prototype, \"endValue\", {\r\n        /**\r\n         * @return End value\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endValue\");\r\n        },\r\n        /**\r\n         * An end value for the break.\r\n         *\r\n         * @param value  End value\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"endValue\", value)) {\r\n                if (this.axis) {\r\n                    this.axis.invalidate();\r\n                    this.axis.invalidateSeries();\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return AxisBreak;\r\n}(Container));\r\nexport { AxisBreak };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisBreak\"] = AxisBreak;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}