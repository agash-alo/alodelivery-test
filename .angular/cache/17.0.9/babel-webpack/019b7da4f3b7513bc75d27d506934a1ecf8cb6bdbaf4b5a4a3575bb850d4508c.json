{"ast":null,"code":"/**\r\n * Polyline module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Sprite } from \"../Sprite\";\nimport { color } from \"../utils/Color\";\nimport { registry } from \"../Registry\";\nimport * as $path from \"../rendering/Path\";\nimport * as $math from \"../utils/Math\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Draws a polyline.\r\n *\r\n * @see {@link IPolylineEvents} for a list of available events\r\n * @see {@link IPolylineAdapters} for a list of available Adapters\r\n */\nvar Polyline = /** @class */function (_super) {\n  __extends(Polyline, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Polyline() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * [_distance description]\r\n     *\r\n     * @todo Description\r\n     */\n    _this._distance = 0;\n    _this.className = \"Polyline\";\n    _this.element = _this.paper.add(\"path\");\n    _this.shapeRendering = \"auto\";\n    _this.fill = color();\n    _this.strokeOpacity = 1;\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Creats and adds an SVG path for the arc.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Polyline.prototype.makePath = function () {\n    this._distance = 0;\n    var segments = this.segments;\n    if (segments && segments.length > 0) {\n      var path = \"\";\n      for (var i = 0, len = segments.length; i < len; i++) {\n        var points = segments[i];\n        if (points.length > 0) {\n          path += $path.moveTo(points[0]);\n          for (var p = 1; p < points.length; p++) {\n            var point = points[p];\n            path += $path.lineTo(point);\n            this._distance += $math.getDistance(points[p - 1], point);\n          }\n        }\n      }\n      this.path = path;\n    }\n    this._realSegments = segments;\n  };\n  Object.defineProperty(Polyline.prototype, \"segments\", {\n    /**\r\n     * @return Segments\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"segments\");\n    },\n    /**\r\n     * A list of segment coordinates for the multi-part line.\r\n     *\r\n     * @todo Example\r\n     * @param segments  Segments\r\n     */\n    set: function (segments) {\n      this.setPropertyValue(\"segments\", segments);\n      this.makePath();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Polyline.prototype, \"distance\", {\n    /**\r\n     * [distance description]\r\n     *\r\n     * @todo Description\r\n     * @return [description]\r\n     */\n    get: function () {\n      return this._distance;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts relative position along the line (0-1) into pixel coordinates.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @return Coordinates\r\n   */\n  Polyline.prototype.positionToPoint = function (position) {\n    var deltaAngle = 0;\n    if (position < 0) {\n      position = Math.abs(position);\n      deltaAngle = 180;\n    }\n    var segments = this._realSegments;\n    if (segments) {\n      var totalDistance = this.distance;\n      var currentDistance = 0;\n      var distanceAB = void 0;\n      var positionA = 0;\n      var positionB = 0;\n      var pointA = void 0;\n      var pointB = void 0;\n      for (var s = 0; s < segments.length; s++) {\n        var points = segments[s];\n        if (points.length > 1) {\n          for (var p = 1; p < points.length; p++) {\n            pointA = points[p - 1];\n            pointB = points[p];\n            positionA = currentDistance / totalDistance;\n            distanceAB = $math.getDistance(pointA, pointB);\n            currentDistance += distanceAB;\n            positionB = currentDistance / totalDistance;\n            if (positionA <= position && positionB > position) {\n              s = segments.length;\n              break;\n            }\n          }\n        } else if (points.length == 1) {\n          pointA = points[0];\n          pointB = points[0];\n          positionA = 0;\n          positionB = 1;\n        }\n      }\n      if (pointA && pointB) {\n        var positionAB = (position - positionA) / (positionB - positionA);\n        var midPoint = $math.getMidPoint(pointA, pointB, positionAB);\n        return {\n          x: midPoint.x,\n          y: midPoint.y,\n          angle: deltaAngle + $math.getAngle(pointA, pointB)\n        };\n      }\n    }\n    return {\n      x: 0,\n      y: 0,\n      angle: 0\n    };\n  };\n  Object.defineProperty(Polyline.prototype, \"realSegments\", {\n    /**\r\n     * @ignore\r\n     */\n    get: function () {\n      return this._realSegments;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Polyline;\n}(Sprite);\nexport { Polyline };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Polyline\"] = Polyline;","map":{"version":3,"names":["__extends","Sprite","color","registry","$path","$math","Polyline","_super","_this","call","_distance","className","element","paper","add","shapeRendering","fill","strokeOpacity","applyTheme","prototype","makePath","segments","length","path","i","len","points","moveTo","p","point","lineTo","getDistance","_realSegments","Object","defineProperty","get","getPropertyValue","set","setPropertyValue","enumerable","configurable","positionToPoint","position","deltaAngle","Math","abs","totalDistance","distance","currentDistance","distanceAB","positionA","positionB","pointA","pointB","s","positionAB","midPoint","getMidPoint","x","y","angle","getAngle","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/elements/Polyline.js"],"sourcesContent":["/**\r\n * Polyline module\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../Sprite\";\r\nimport { color } from \"../utils/Color\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws a polyline.\r\n *\r\n * @see {@link IPolylineEvents} for a list of available events\r\n * @see {@link IPolylineAdapters} for a list of available Adapters\r\n */\r\nvar Polyline = /** @class */ (function (_super) {\r\n    __extends(Polyline, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Polyline() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * [_distance description]\r\n         *\r\n         * @todo Description\r\n         */\r\n        _this._distance = 0;\r\n        _this.className = \"Polyline\";\r\n        _this.element = _this.paper.add(\"path\");\r\n        _this.shapeRendering = \"auto\";\r\n        _this.fill = color();\r\n        _this.strokeOpacity = 1;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Creats and adds an SVG path for the arc.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Polyline.prototype.makePath = function () {\r\n        this._distance = 0;\r\n        var segments = this.segments;\r\n        if (segments && segments.length > 0) {\r\n            var path = \"\";\r\n            for (var i = 0, len = segments.length; i < len; i++) {\r\n                var points = segments[i];\r\n                if (points.length > 0) {\r\n                    path += $path.moveTo(points[0]);\r\n                    for (var p = 1; p < points.length; p++) {\r\n                        var point = points[p];\r\n                        path += $path.lineTo(point);\r\n                        this._distance += $math.getDistance(points[p - 1], point);\r\n                    }\r\n                }\r\n            }\r\n            this.path = path;\r\n        }\r\n        this._realSegments = segments;\r\n    };\r\n    Object.defineProperty(Polyline.prototype, \"segments\", {\r\n        /**\r\n         * @return Segments\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"segments\");\r\n        },\r\n        /**\r\n         * A list of segment coordinates for the multi-part line.\r\n         *\r\n         * @todo Example\r\n         * @param segments  Segments\r\n         */\r\n        set: function (segments) {\r\n            this.setPropertyValue(\"segments\", segments);\r\n            this.makePath();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Polyline.prototype, \"distance\", {\r\n        /**\r\n         * [distance description]\r\n         *\r\n         * @todo Description\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            return this._distance;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Converts relative position along the line (0-1) into pixel coordinates.\r\n     *\r\n     * @param position  Position (0-1)\r\n     * @return Coordinates\r\n     */\r\n    Polyline.prototype.positionToPoint = function (position) {\r\n        var deltaAngle = 0;\r\n        if (position < 0) {\r\n            position = Math.abs(position);\r\n            deltaAngle = 180;\r\n        }\r\n        var segments = this._realSegments;\r\n        if (segments) {\r\n            var totalDistance = this.distance;\r\n            var currentDistance = 0;\r\n            var distanceAB = void 0;\r\n            var positionA = 0;\r\n            var positionB = 0;\r\n            var pointA = void 0;\r\n            var pointB = void 0;\r\n            for (var s = 0; s < segments.length; s++) {\r\n                var points = segments[s];\r\n                if (points.length > 1) {\r\n                    for (var p = 1; p < points.length; p++) {\r\n                        pointA = points[p - 1];\r\n                        pointB = points[p];\r\n                        positionA = currentDistance / totalDistance;\r\n                        distanceAB = $math.getDistance(pointA, pointB);\r\n                        currentDistance += distanceAB;\r\n                        positionB = currentDistance / totalDistance;\r\n                        if (positionA <= position && positionB > position) {\r\n                            s = segments.length;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                else if (points.length == 1) {\r\n                    pointA = points[0];\r\n                    pointB = points[0];\r\n                    positionA = 0;\r\n                    positionB = 1;\r\n                }\r\n            }\r\n            if (pointA && pointB) {\r\n                var positionAB = (position - positionA) / (positionB - positionA);\r\n                var midPoint = $math.getMidPoint(pointA, pointB, positionAB);\r\n                return { x: midPoint.x, y: midPoint.y, angle: deltaAngle + $math.getAngle(pointA, pointB) };\r\n            }\r\n        }\r\n        return { x: 0, y: 0, angle: 0 };\r\n    };\r\n    Object.defineProperty(Polyline.prototype, \"realSegments\", {\r\n        /**\r\n         * @ignore\r\n         */\r\n        get: function () {\r\n            return this._realSegments;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Polyline;\r\n}(Sprite));\r\nexport { Polyline };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Polyline\"] = Polyline;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}