{"ast":null,"code":"/**\r\n * Interaction Object module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { InteractionObjectEventDispatcher } from \"./InteractionObjectEvents\";\nimport { BaseObjectEvents } from \"../Base\";\nimport { List } from \"../utils/List\";\nimport { Dictionary, DictionaryDisposer } from \"../utils/Dictionary\";\nimport { getInteraction } from \"./Interaction\";\nimport * as $type from \"../utils/Type\";\n/**\r\n * Re-exports\r\n */\nexport { InteractionObjectEventDispatcher };\n/**\r\n * Interaction object represents an object that is subject for any kind of\r\n * interaction with it with any input devices: mouse, touch or keyboard.\r\n *\r\n * Any DOM element can be wrapped into an Internaction object which in turn\r\n * enables attaching various interaction events to it, such as: hit, drag,\r\n * swipe, etc.\r\n *\r\n * To create an [[InteractionObject]] out of a [[Sprite]], use:\r\n * `interaction.getInteractionFromSprite(sprite: Sprite)`\r\n *\r\n * To create an [[InteractionObject]] out of a a regular element:\r\n * `interaction.getInteraction(element: HTMLElement)`\r\n */\nvar InteractionObject = /** @class */function (_super) {\n  __extends(InteractionObject, _super);\n  /**\r\n   * Constructor\r\n   */\n  function InteractionObject(element) {\n    var _this = _super.call(this) || this;\n    /**\r\n     * @ignore\r\n     * An [[EventDispatcher]] instance which holds events for this object\r\n     */\n    _this._eventDispatcher = new InteractionObjectEventDispatcher(_this);\n    /**\r\n     * Collection of Disposers for various events. (so that those get disposed\r\n     * when the whole InteractionObject is disposed)\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this.eventDisposers = new Dictionary();\n    /**\r\n     * A [[Dictionary]] that holds temporarily replaced original style values for\r\n     * HTML element, so that they can be restored when the functionality that\r\n     * replaced them is done.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this.replacedStyles = new Dictionary();\n    _this._clickable = false;\n    _this._contextMenuDisabled = false;\n    _this._hoverable = false;\n    _this._trackable = false;\n    _this._draggable = false;\n    _this._swipeable = false;\n    _this._resizable = false;\n    _this._wheelable = false;\n    _this._inert = false;\n    /**\r\n     * Is element currently hovered?\r\n     */\n    _this._isHover = false;\n    /**\r\n     * Was this element hovered via pointer or is it just \"pretenting\" to be\r\n     * hovered.\r\n     *\r\n     * @ignore\r\n     */\n    _this.isRealHover = false;\n    /**\r\n     * Is the element hovered by touch pointer?\r\n     */\n    _this._isHoverByTouch = false;\n    /**\r\n     * Has element got any pointers currently pressing down on it?\r\n     */\n    _this._isDown = false;\n    /**\r\n     * Does element have focus?\r\n     */\n    _this._isFocused = false;\n    /**\r\n     * Is element currently protected from touch interactions?\r\n     */\n    _this._isTouchProtected = false;\n    /**\r\n     * Options used for inertia functionality.\r\n     */\n    _this._inertiaOptions = new Dictionary();\n    /**\r\n     * A collection of different inertia types, currently playing out.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this.inertias = new Dictionary();\n    /**\r\n     * Click/tap options.\r\n     */\n    _this._hitOptions = {};\n    /**\r\n     * Hover options.\r\n     */\n    _this._hoverOptions = {};\n    /**\r\n     * Swipe gesture options.\r\n     */\n    _this._swipeOptions = {};\n    /**\r\n     * Keyboard options.\r\n     */\n    _this._keyboardOptions = {};\n    /**\r\n     * Mouse options.\r\n     */\n    _this._mouseOptions = {};\n    /**\r\n     * Cursor options.\r\n     */\n    _this._cursorOptions = {\n      \"defaultStyle\": [{\n        \"property\": \"cursor\",\n        \"value\": \"default\"\n      }]\n    };\n    _this._disposers.push(_this._eventDispatcher);\n    _this._element = element;\n    _this.className = \"InteractionObject\";\n    _this._disposers.push(new DictionaryDisposer(_this.inertias));\n    _this._disposers.push(new DictionaryDisposer(_this.eventDisposers));\n    _this.applyTheme();\n    return _this;\n  }\n  ;\n  Object.defineProperty(InteractionObject.prototype, \"events\", {\n    /**\r\n     * An [[EventDispatcher]] instance which holds events for this object\r\n     */\n    get: function () {\n      return this._eventDispatcher;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"isHover\", {\n    /**\r\n     * @return Hovered?\r\n     */\n    get: function () {\n      return this._isHover;\n    },\n    /**\r\n     * Indicates if this element is currently hovered.\r\n     *\r\n     * @param value Hovered?\r\n     */\n    set: function (value) {\n      if (this.isHover != value) {\n        this._isHover = value;\n        if (value) {\n          getInteraction().overObjects.moveValue(this);\n        } else {\n          this.isRealHover = false;\n          getInteraction().overObjects.removeValue(this);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"isHoverByTouch\", {\n    /**\r\n     * @return Hovered?\r\n     */\n    get: function () {\n      return this._isHoverByTouch;\n    },\n    /**\r\n     * Indicates if this element is currently hovered.\r\n     *\r\n     * @param value Hovered?\r\n     */\n    set: function (value) {\n      if (this.isHoverByTouch != value) {\n        this._isHoverByTouch = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"overPointers\", {\n    /**\r\n     * A list of pointers currently over the element.\r\n     *\r\n     * @see {@link Pointer}\r\n     * @return List if pointers currently hovering the element\r\n     */\n    get: function () {\n      if (!this._overPointers) {\n        this._overPointers = new List();\n      }\n      return this._overPointers;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"isDown\", {\n    /**\r\n     * @return Has down pointers?\r\n     */\n    get: function () {\n      return this._isDown;\n    },\n    /**\r\n     * Indicates if this element has currently any pointers pressing on it.\r\n     *\r\n     * @param value Has down pointers?\r\n     */\n    set: function (value) {\n      if (this.isDown != value) {\n        this._isDown = value;\n        if (value) {\n          getInteraction().downObjects.moveValue(this);\n        } else {\n          getInteraction().downObjects.removeValue(this);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"downPointers\", {\n    /**\r\n     * A list of pointers currently pressing down on this element.\r\n     *\r\n     * @see {@link Pointer}\r\n     * @return List of down pointers\r\n     */\n    get: function () {\n      if (!this._downPointers) {\n        this._downPointers = new List();\n      }\n      return this._downPointers;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"isFocused\", {\n    /**\r\n     * @return Focused?\r\n     */\n    get: function () {\n      return this._isFocused;\n    },\n    /**\r\n     * Indicates if this element is currently focused.\r\n     *\r\n     * @param value Focused?\r\n     */\n    set: function (value) {\n      if (this.isFocused != value) {\n        this._isFocused = value;\n        if (value) {\n          getInteraction().focusedObject = this;\n        } else {\n          getInteraction().focusedObject = undefined;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"isTouchProtected\", {\n    /**\r\n     * @ignore\r\n     * @return Touch protected?\r\n     */\n    get: function () {\n      return this._isTouchProtected;\n    },\n    /**\r\n     * Indicates if this element is currently being protected from touch actions.\r\n     *\r\n     * @ignore\r\n     * @param value Touch protected?\r\n     */\n    set: function (value) {\n      if (this._isTouchProtected != value) {\n        this._isTouchProtected = value;\n        if (value) {\n          getInteraction().unprepElement(this);\n        } else if (this.draggable || this.swipeable || this.trackable || this.resizable) {\n          getInteraction().prepElement(this);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"clickable\", {\n    /**\r\n     * @return Clickable?\r\n     */\n    get: function () {\n      return this._clickable;\n    },\n    /**\r\n     * Is element clickable? Clickable elements will generate \"hit\" events when\r\n     * clicked or tapped.\r\n     *\r\n     * @param value Clickable?\r\n     */\n    set: function (value) {\n      if (this._clickable !== value) {\n        this._clickable = value;\n        getInteraction().processClickable(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"contextMenuDisabled\", {\n    /**\r\n     * @return Context menu disabled?\r\n     */\n    get: function () {\n      return this._contextMenuDisabled;\n    },\n    /**\r\n     * Should element prevent context menu to be displayed, e.g. when\r\n     * right-clicked?\r\n     *\r\n     * @default false\r\n     * @param value Context menu disabled?\r\n     */\n    set: function (value) {\n      if (this._contextMenuDisabled !== value) {\n        this._contextMenuDisabled = value;\n        getInteraction().processContextMenu(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"hoverable\", {\n    /**\r\n     * @return Hoverable?\r\n     */\n    get: function () {\n      return this._hoverable;\n    },\n    /**\r\n     * Indicates if element should generate hover events.\r\n     *\r\n     * @param value Hoverable?\r\n     */\n    set: function (value) {\n      if (this._hoverable !== value) {\n        this._hoverable = value;\n        getInteraction().processHoverable(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"trackable\", {\n    /**\r\n     * @return Track pointer?\r\n     */\n    get: function () {\n      return this._trackable;\n    },\n    /**\r\n     * Indicates if pointer movement over element should be tracked.\r\n     *\r\n     * @param value Track pointer?\r\n     */\n    set: function (value) {\n      if (this._trackable !== value) {\n        this._trackable = value;\n        getInteraction().processTrackable(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"draggable\", {\n    /**\r\n     * @return Draggable?\r\n     */\n    get: function () {\n      return this._draggable;\n    },\n    /**\r\n     * Indicates if element can be dragged. (moved)\r\n     *\r\n     * @param value Draggable?\r\n     */\n    set: function (value) {\n      if (this._draggable !== value) {\n        this._draggable = value;\n        getInteraction().processDraggable(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"swipeable\", {\n    /**\r\n     * @return Track swipe?\r\n     */\n    get: function () {\n      return this._swipeable;\n    },\n    /**\r\n     * Indicates whether element should react to swipe gesture.\r\n     *\r\n     * @param value Track swipe?\r\n     */\n    set: function (value) {\n      if (this._swipeable !== value) {\n        this._swipeable = value;\n        getInteraction().processSwipeable(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"resizable\", {\n    /**\r\n     * @return Resizeble?\r\n     */\n    get: function () {\n      return this._resizable;\n    },\n    /**\r\n     * Indicates if element can be resized.\r\n     *\r\n     * @param value Resizeable?\r\n     */\n    set: function (value) {\n      if (this._resizable !== value) {\n        this._resizable = value;\n        getInteraction().processResizable(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"wheelable\", {\n    /**\r\n     * @return Track wheel?\r\n     */\n    get: function () {\n      return this._wheelable;\n    },\n    /**\r\n     * Indicates whether track moouse wheel rotation over element.\r\n     *\r\n     * @param value Track wheel?\r\n     */\n    set: function (value) {\n      if (this._wheelable !== value) {\n        this._wheelable = value;\n        getInteraction().processWheelable(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"inert\", {\n    /**\r\n     * @return Inert?\r\n     */\n    get: function () {\n      return this._inert;\n    },\n    /**\r\n     * Indicates if element is inert, i.e. if it should carry movement momentum\r\n     * after it is dragged and released.\r\n     *\r\n     * @param value Inert?\r\n     */\n    set: function (value) {\n      if (this._inert !== value) {\n        this._inert = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"focusable\", {\n    /**\r\n     * @return Focusable?\r\n     */\n    get: function () {\n      return this._focusable;\n    },\n    /**\r\n     * Indicates if element can gain focus.\r\n     *\r\n     * @param value Focusable?\r\n     */\n    set: function (value) {\n      if (this._focusable !== value) {\n        this._focusable = value;\n        if (this._focusable && this.tabindex == -1) {\n          this._tabindex = 1;\n        }\n        getInteraction().processFocusable(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"tabindex\", {\n    /**\r\n     * @return Tab index\r\n     */\n    get: function () {\n      return $type.getValueDefault(this._tabindex, -1);\n    },\n    /**\r\n     * Element's tab index.\r\n     *\r\n     * @param value Tab index\r\n     */\n    set: function (value) {\n      if (this._tabindex !== value) {\n        this._tabindex = value;\n        if (value > -1) {\n          this.focusable = true;\n        }\n        getInteraction().processFocusable(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"element\", {\n    /**\r\n     * @return Element\r\n     */\n    get: function () {\n      return this._element;\n    },\n    /**\r\n     * A DOM element associated with this element.\r\n     *\r\n     * @param element Element\r\n     */\n    set: function (element) {\n      this._element = element;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"originalPosition\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Position.\r\n     */\n    get: function () {\n      return this._originalPosition || {\n        x: 0,\n        y: 0\n      };\n    },\n    /**\r\n     * Element's original position.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Position\r\n     */\n    set: function (value) {\n      this._originalPosition = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"originalScale\", {\n    /**\r\n     * @return Scale\r\n     */\n    get: function () {\n      return $type.getValueDefault(this._originalScale, 1);\n    },\n    /**\r\n     * Element's original scale.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Scale\r\n     */\n    set: function (value) {\n      if (this._originalScale !== value) {\n        this._originalScale = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"originalAngle\", {\n    /**\r\n     * @return Angle\r\n     */\n    get: function () {\n      return $type.getValueDefault(this._originalAngle, 0);\n    },\n    /**\r\n     * Element's original angle.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Angle\r\n     */\n    set: function (value) {\n      if (this._originalAngle !== value) {\n        this._originalAngle = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"inertiaOptions\", {\n    /**\r\n     * @return Options\r\n     */\n    get: function () {\n      if (this.sprite && this.sprite._adapterO) {\n        return this.sprite._adapterO.apply(\"inertiaOptions\", this._inertiaOptions);\n      } else {\n        return this._inertiaOptions;\n      }\n    },\n    /**\r\n     * Inertia options.\r\n     *\r\n     * @param value  Options\r\n     */\n    set: function (value) {\n      this._inertiaOptions = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"hitOptions\", {\n    /**\r\n     * @return Options\r\n     */\n    get: function () {\n      if (this.sprite && this.sprite._adapterO) {\n        return this.sprite._adapterO.apply(\"hitOptions\", this._hitOptions);\n      } else {\n        return this._hitOptions;\n      }\n    },\n    /**\r\n     * Hit options.\r\n     *\r\n     * @param value  Options\r\n     */\n    set: function (value) {\n      this._hitOptions = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"hoverOptions\", {\n    /**\r\n     * @return Options\r\n     */\n    get: function () {\n      if (this.sprite && this.sprite._adapterO) {\n        return this.sprite._adapterO.apply(\"hoverOptions\", this._hoverOptions);\n      } else {\n        return this._hoverOptions;\n      }\n    },\n    /**\r\n     * Hover options.\r\n     *\r\n     * @param value  Options\r\n     */\n    set: function (value) {\n      this._hoverOptions = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"swipeOptions\", {\n    /**\r\n     * @return Options\r\n     */\n    get: function () {\n      if (this.sprite && this.sprite._adapterO) {\n        return this.sprite._adapterO.apply(\"swipeOptions\", this._swipeOptions);\n      } else {\n        return this._swipeOptions;\n      }\n    },\n    /**\r\n     * Swipe options.\r\n     *\r\n     * @param value  Options\r\n     */\n    set: function (value) {\n      this._swipeOptions = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"keyboardOptions\", {\n    /**\r\n     * @return Options\r\n     */\n    get: function () {\n      if (this.sprite && this.sprite._adapterO) {\n        return this.sprite._adapterO.apply(\"keyboardOptions\", this._keyboardOptions);\n      } else {\n        return this._keyboardOptions;\n      }\n    },\n    /**\r\n     * Keyboard options.\r\n     *\r\n     * @param value  Options\r\n     */\n    set: function (value) {\n      this._keyboardOptions = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"mouseOptions\", {\n    /**\r\n     * @return Options\r\n     */\n    get: function () {\n      if (this.sprite && this.sprite._adapterO) {\n        return this.sprite._adapterO.apply(\"mouseOptions\", this._mouseOptions);\n      } else {\n        return this._mouseOptions;\n      }\n    },\n    /**\r\n     * Mouse options.\r\n     *\r\n     * Enables controlling options related to the mouse, for example sensitivity\r\n     * of its mouse wheel.\r\n     *\r\n     * E.g. the below will reduce chart's wheel-zoom speed to half its default\r\n     * speed:\r\n     *\r\n     * ```TypeScript\r\n     * chart.plotContainer.mouseOptions.sensitivity = 0.5;\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.plotContainer.mouseOptions.sensitivity = 0.5;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"plotContainer\": {\r\n     *     \"mouseOptions\": {\r\n     *       \"sensitivity\": 0.5\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * @since 4.5.14\r\n     * @param value  Options\r\n     */\n    set: function (value) {\n      this._mouseOptions = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"cursorOptions\", {\n    /**\r\n     * @return Options\r\n     */\n    get: function () {\n      if (this.sprite && this.sprite._adapterO) {\n        return this.sprite._adapterO.apply(\"cursorOptions\", this._cursorOptions);\n      } else {\n        return this._cursorOptions;\n      }\n    },\n    /**\r\n     * Cursor options.\r\n     *\r\n     * @param value  Options\r\n     */\n    set: function (value) {\n      this._cursorOptions = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all properties and related assets from another object of the same\r\n   * type.\r\n   *\r\n   * @param source Source object\r\n   */\n  InteractionObject.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    this.inertiaOptions = source.inertiaOptions;\n    this.hitOptions = source.hitOptions;\n    this.hoverOptions = source.hoverOptions;\n    this.swipeOptions = source.swipeOptions;\n    this.keyboardOptions = source.keyboardOptions;\n    this.cursorOptions = source.cursorOptions;\n    this.contextMenuDisabled = source.contextMenuDisabled;\n    getInteraction().applyCursorOverStyle(this);\n  };\n  /**\r\n   * @ignore Exclude from docs\r\n   */\n  InteractionObject.prototype.setEventDisposer = function (key, value, f) {\n    var disposer = this.eventDisposers.getKey(key);\n    if (value) {\n      if (disposer == null) {\n        this.eventDisposers.setKey(key, f());\n      }\n    } else {\n      if (disposer != null) {\n        disposer.dispose();\n        this.eventDisposers.removeKey(key);\n      }\n    }\n  };\n  /**\r\n   * Disposes object.\r\n   */\n  InteractionObject.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n    // Remove from all interaction registries\n    var interaction = getInteraction();\n    interaction.overObjects.removeValue(this);\n    interaction.downObjects.removeValue(this);\n    interaction.trackedObjects.removeValue(this);\n    interaction.transformedObjects.removeValue(this);\n    // Unlock document wheel\n    if (this.isHover && this.wheelable) {\n      interaction.unlockWheel();\n    }\n    if (interaction.focusedObject === this) {\n      interaction.focusedObject = undefined;\n    }\n  };\n  return InteractionObject;\n}(BaseObjectEvents);\nexport { InteractionObject };","map":{"version":3,"names":["__extends","InteractionObjectEventDispatcher","BaseObjectEvents","List","Dictionary","DictionaryDisposer","getInteraction","$type","InteractionObject","_super","element","_this","call","_eventDispatcher","eventDisposers","replacedStyles","_clickable","_contextMenuDisabled","_hoverable","_trackable","_draggable","_swipeable","_resizable","_wheelable","_inert","_isHover","isRealHover","_isHoverByTouch","_isDown","_isFocused","_isTouchProtected","_inertiaOptions","inertias","_hitOptions","_hoverOptions","_swipeOptions","_keyboardOptions","_mouseOptions","_cursorOptions","_disposers","push","_element","className","applyTheme","Object","defineProperty","prototype","get","enumerable","configurable","set","value","isHover","overObjects","moveValue","removeValue","isHoverByTouch","_overPointers","isDown","downObjects","_downPointers","isFocused","focusedObject","undefined","unprepElement","draggable","swipeable","trackable","resizable","prepElement","processClickable","processContextMenu","processHoverable","processTrackable","processDraggable","processSwipeable","processResizable","processWheelable","_focusable","tabindex","_tabindex","processFocusable","getValueDefault","focusable","_originalPosition","x","y","_originalScale","_originalAngle","sprite","_adapterO","apply","copyFrom","source","inertiaOptions","hitOptions","hoverOptions","swipeOptions","keyboardOptions","cursorOptions","contextMenuDisabled","applyCursorOverStyle","setEventDisposer","key","f","disposer","getKey","setKey","dispose","removeKey","interaction","trackedObjects","transformedObjects","wheelable","unlockWheel"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/interaction/InteractionObject.js"],"sourcesContent":["/**\r\n * Interaction Object module\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { InteractionObjectEventDispatcher } from \"./InteractionObjectEvents\";\r\nimport { BaseObjectEvents } from \"../Base\";\r\nimport { List } from \"../utils/List\";\r\nimport { Dictionary, DictionaryDisposer } from \"../utils/Dictionary\";\r\nimport { getInteraction } from \"./Interaction\";\r\nimport * as $type from \"../utils/Type\";\r\n/**\r\n * Re-exports\r\n */\r\nexport { InteractionObjectEventDispatcher };\r\n/**\r\n * Interaction object represents an object that is subject for any kind of\r\n * interaction with it with any input devices: mouse, touch or keyboard.\r\n *\r\n * Any DOM element can be wrapped into an Internaction object which in turn\r\n * enables attaching various interaction events to it, such as: hit, drag,\r\n * swipe, etc.\r\n *\r\n * To create an [[InteractionObject]] out of a [[Sprite]], use:\r\n * `interaction.getInteractionFromSprite(sprite: Sprite)`\r\n *\r\n * To create an [[InteractionObject]] out of a a regular element:\r\n * `interaction.getInteraction(element: HTMLElement)`\r\n */\r\nvar InteractionObject = /** @class */ (function (_super) {\r\n    __extends(InteractionObject, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function InteractionObject(element) {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * @ignore\r\n         * An [[EventDispatcher]] instance which holds events for this object\r\n         */\r\n        _this._eventDispatcher = new InteractionObjectEventDispatcher(_this);\r\n        /**\r\n         * Collection of Disposers for various events. (so that those get disposed\r\n         * when the whole InteractionObject is disposed)\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this.eventDisposers = new Dictionary();\r\n        /**\r\n         * A [[Dictionary]] that holds temporarily replaced original style values for\r\n         * HTML element, so that they can be restored when the functionality that\r\n         * replaced them is done.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this.replacedStyles = new Dictionary();\r\n        _this._clickable = false;\r\n        _this._contextMenuDisabled = false;\r\n        _this._hoverable = false;\r\n        _this._trackable = false;\r\n        _this._draggable = false;\r\n        _this._swipeable = false;\r\n        _this._resizable = false;\r\n        _this._wheelable = false;\r\n        _this._inert = false;\r\n        /**\r\n         * Is element currently hovered?\r\n         */\r\n        _this._isHover = false;\r\n        /**\r\n         * Was this element hovered via pointer or is it just \"pretenting\" to be\r\n         * hovered.\r\n         *\r\n         * @ignore\r\n         */\r\n        _this.isRealHover = false;\r\n        /**\r\n         * Is the element hovered by touch pointer?\r\n         */\r\n        _this._isHoverByTouch = false;\r\n        /**\r\n         * Has element got any pointers currently pressing down on it?\r\n         */\r\n        _this._isDown = false;\r\n        /**\r\n         * Does element have focus?\r\n         */\r\n        _this._isFocused = false;\r\n        /**\r\n         * Is element currently protected from touch interactions?\r\n         */\r\n        _this._isTouchProtected = false;\r\n        /**\r\n         * Options used for inertia functionality.\r\n         */\r\n        _this._inertiaOptions = new Dictionary();\r\n        /**\r\n         * A collection of different inertia types, currently playing out.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this.inertias = new Dictionary();\r\n        /**\r\n         * Click/tap options.\r\n         */\r\n        _this._hitOptions = {};\r\n        /**\r\n         * Hover options.\r\n         */\r\n        _this._hoverOptions = {};\r\n        /**\r\n         * Swipe gesture options.\r\n         */\r\n        _this._swipeOptions = {};\r\n        /**\r\n         * Keyboard options.\r\n         */\r\n        _this._keyboardOptions = {};\r\n        /**\r\n         * Mouse options.\r\n         */\r\n        _this._mouseOptions = {};\r\n        /**\r\n         * Cursor options.\r\n         */\r\n        _this._cursorOptions = {\r\n            \"defaultStyle\": [{\r\n                    \"property\": \"cursor\",\r\n                    \"value\": \"default\"\r\n                }]\r\n        };\r\n        _this._disposers.push(_this._eventDispatcher);\r\n        _this._element = element;\r\n        _this.className = \"InteractionObject\";\r\n        _this._disposers.push(new DictionaryDisposer(_this.inertias));\r\n        _this._disposers.push(new DictionaryDisposer(_this.eventDisposers));\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    ;\r\n    Object.defineProperty(InteractionObject.prototype, \"events\", {\r\n        /**\r\n         * An [[EventDispatcher]] instance which holds events for this object\r\n         */\r\n        get: function () {\r\n            return this._eventDispatcher;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"isHover\", {\r\n        /**\r\n         * @return Hovered?\r\n         */\r\n        get: function () {\r\n            return this._isHover;\r\n        },\r\n        /**\r\n         * Indicates if this element is currently hovered.\r\n         *\r\n         * @param value Hovered?\r\n         */\r\n        set: function (value) {\r\n            if (this.isHover != value) {\r\n                this._isHover = value;\r\n                if (value) {\r\n                    getInteraction().overObjects.moveValue(this);\r\n                }\r\n                else {\r\n                    this.isRealHover = false;\r\n                    getInteraction().overObjects.removeValue(this);\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"isHoverByTouch\", {\r\n        /**\r\n         * @return Hovered?\r\n         */\r\n        get: function () {\r\n            return this._isHoverByTouch;\r\n        },\r\n        /**\r\n         * Indicates if this element is currently hovered.\r\n         *\r\n         * @param value Hovered?\r\n         */\r\n        set: function (value) {\r\n            if (this.isHoverByTouch != value) {\r\n                this._isHoverByTouch = value;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"overPointers\", {\r\n        /**\r\n         * A list of pointers currently over the element.\r\n         *\r\n         * @see {@link Pointer}\r\n         * @return List if pointers currently hovering the element\r\n         */\r\n        get: function () {\r\n            if (!this._overPointers) {\r\n                this._overPointers = new List();\r\n            }\r\n            return this._overPointers;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"isDown\", {\r\n        /**\r\n         * @return Has down pointers?\r\n         */\r\n        get: function () {\r\n            return this._isDown;\r\n        },\r\n        /**\r\n         * Indicates if this element has currently any pointers pressing on it.\r\n         *\r\n         * @param value Has down pointers?\r\n         */\r\n        set: function (value) {\r\n            if (this.isDown != value) {\r\n                this._isDown = value;\r\n                if (value) {\r\n                    getInteraction().downObjects.moveValue(this);\r\n                }\r\n                else {\r\n                    getInteraction().downObjects.removeValue(this);\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"downPointers\", {\r\n        /**\r\n         * A list of pointers currently pressing down on this element.\r\n         *\r\n         * @see {@link Pointer}\r\n         * @return List of down pointers\r\n         */\r\n        get: function () {\r\n            if (!this._downPointers) {\r\n                this._downPointers = new List();\r\n            }\r\n            return this._downPointers;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"isFocused\", {\r\n        /**\r\n         * @return Focused?\r\n         */\r\n        get: function () {\r\n            return this._isFocused;\r\n        },\r\n        /**\r\n         * Indicates if this element is currently focused.\r\n         *\r\n         * @param value Focused?\r\n         */\r\n        set: function (value) {\r\n            if (this.isFocused != value) {\r\n                this._isFocused = value;\r\n                if (value) {\r\n                    getInteraction().focusedObject = this;\r\n                }\r\n                else {\r\n                    getInteraction().focusedObject = undefined;\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"isTouchProtected\", {\r\n        /**\r\n         * @ignore\r\n         * @return Touch protected?\r\n         */\r\n        get: function () {\r\n            return this._isTouchProtected;\r\n        },\r\n        /**\r\n         * Indicates if this element is currently being protected from touch actions.\r\n         *\r\n         * @ignore\r\n         * @param value Touch protected?\r\n         */\r\n        set: function (value) {\r\n            if (this._isTouchProtected != value) {\r\n                this._isTouchProtected = value;\r\n                if (value) {\r\n                    getInteraction().unprepElement(this);\r\n                }\r\n                else if (this.draggable || this.swipeable || this.trackable || this.resizable) {\r\n                    getInteraction().prepElement(this);\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"clickable\", {\r\n        /**\r\n         * @return Clickable?\r\n         */\r\n        get: function () {\r\n            return this._clickable;\r\n        },\r\n        /**\r\n         * Is element clickable? Clickable elements will generate \"hit\" events when\r\n         * clicked or tapped.\r\n         *\r\n         * @param value Clickable?\r\n         */\r\n        set: function (value) {\r\n            if (this._clickable !== value) {\r\n                this._clickable = value;\r\n                getInteraction().processClickable(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"contextMenuDisabled\", {\r\n        /**\r\n         * @return Context menu disabled?\r\n         */\r\n        get: function () {\r\n            return this._contextMenuDisabled;\r\n        },\r\n        /**\r\n         * Should element prevent context menu to be displayed, e.g. when\r\n         * right-clicked?\r\n         *\r\n         * @default false\r\n         * @param value Context menu disabled?\r\n         */\r\n        set: function (value) {\r\n            if (this._contextMenuDisabled !== value) {\r\n                this._contextMenuDisabled = value;\r\n                getInteraction().processContextMenu(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"hoverable\", {\r\n        /**\r\n         * @return Hoverable?\r\n         */\r\n        get: function () {\r\n            return this._hoverable;\r\n        },\r\n        /**\r\n         * Indicates if element should generate hover events.\r\n         *\r\n         * @param value Hoverable?\r\n         */\r\n        set: function (value) {\r\n            if (this._hoverable !== value) {\r\n                this._hoverable = value;\r\n                getInteraction().processHoverable(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"trackable\", {\r\n        /**\r\n         * @return Track pointer?\r\n         */\r\n        get: function () {\r\n            return this._trackable;\r\n        },\r\n        /**\r\n         * Indicates if pointer movement over element should be tracked.\r\n         *\r\n         * @param value Track pointer?\r\n         */\r\n        set: function (value) {\r\n            if (this._trackable !== value) {\r\n                this._trackable = value;\r\n                getInteraction().processTrackable(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"draggable\", {\r\n        /**\r\n         * @return Draggable?\r\n         */\r\n        get: function () {\r\n            return this._draggable;\r\n        },\r\n        /**\r\n         * Indicates if element can be dragged. (moved)\r\n         *\r\n         * @param value Draggable?\r\n         */\r\n        set: function (value) {\r\n            if (this._draggable !== value) {\r\n                this._draggable = value;\r\n                getInteraction().processDraggable(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"swipeable\", {\r\n        /**\r\n         * @return Track swipe?\r\n         */\r\n        get: function () {\r\n            return this._swipeable;\r\n        },\r\n        /**\r\n         * Indicates whether element should react to swipe gesture.\r\n         *\r\n         * @param value Track swipe?\r\n         */\r\n        set: function (value) {\r\n            if (this._swipeable !== value) {\r\n                this._swipeable = value;\r\n                getInteraction().processSwipeable(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"resizable\", {\r\n        /**\r\n         * @return Resizeble?\r\n         */\r\n        get: function () {\r\n            return this._resizable;\r\n        },\r\n        /**\r\n         * Indicates if element can be resized.\r\n         *\r\n         * @param value Resizeable?\r\n         */\r\n        set: function (value) {\r\n            if (this._resizable !== value) {\r\n                this._resizable = value;\r\n                getInteraction().processResizable(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"wheelable\", {\r\n        /**\r\n         * @return Track wheel?\r\n         */\r\n        get: function () {\r\n            return this._wheelable;\r\n        },\r\n        /**\r\n         * Indicates whether track moouse wheel rotation over element.\r\n         *\r\n         * @param value Track wheel?\r\n         */\r\n        set: function (value) {\r\n            if (this._wheelable !== value) {\r\n                this._wheelable = value;\r\n                getInteraction().processWheelable(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"inert\", {\r\n        /**\r\n         * @return Inert?\r\n         */\r\n        get: function () {\r\n            return this._inert;\r\n        },\r\n        /**\r\n         * Indicates if element is inert, i.e. if it should carry movement momentum\r\n         * after it is dragged and released.\r\n         *\r\n         * @param value Inert?\r\n         */\r\n        set: function (value) {\r\n            if (this._inert !== value) {\r\n                this._inert = value;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"focusable\", {\r\n        /**\r\n         * @return Focusable?\r\n         */\r\n        get: function () {\r\n            return this._focusable;\r\n        },\r\n        /**\r\n         * Indicates if element can gain focus.\r\n         *\r\n         * @param value Focusable?\r\n         */\r\n        set: function (value) {\r\n            if (this._focusable !== value) {\r\n                this._focusable = value;\r\n                if (this._focusable && this.tabindex == -1) {\r\n                    this._tabindex = 1;\r\n                }\r\n                getInteraction().processFocusable(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"tabindex\", {\r\n        /**\r\n         * @return Tab index\r\n         */\r\n        get: function () {\r\n            return $type.getValueDefault(this._tabindex, -1);\r\n        },\r\n        /**\r\n         * Element's tab index.\r\n         *\r\n         * @param value Tab index\r\n         */\r\n        set: function (value) {\r\n            if (this._tabindex !== value) {\r\n                this._tabindex = value;\r\n                if (value > -1) {\r\n                    this.focusable = true;\r\n                }\r\n                getInteraction().processFocusable(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"element\", {\r\n        /**\r\n         * @return Element\r\n         */\r\n        get: function () {\r\n            return this._element;\r\n        },\r\n        /**\r\n         * A DOM element associated with this element.\r\n         *\r\n         * @param element Element\r\n         */\r\n        set: function (element) {\r\n            this._element = element;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"originalPosition\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Position.\r\n         */\r\n        get: function () {\r\n            return this._originalPosition || { x: 0, y: 0 };\r\n        },\r\n        /**\r\n         * Element's original position.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value Position\r\n         */\r\n        set: function (value) {\r\n            this._originalPosition = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"originalScale\", {\r\n        /**\r\n         * @return Scale\r\n         */\r\n        get: function () {\r\n            return $type.getValueDefault(this._originalScale, 1);\r\n        },\r\n        /**\r\n         * Element's original scale.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value Scale\r\n         */\r\n        set: function (value) {\r\n            if (this._originalScale !== value) {\r\n                this._originalScale = value;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"originalAngle\", {\r\n        /**\r\n         * @return Angle\r\n         */\r\n        get: function () {\r\n            return $type.getValueDefault(this._originalAngle, 0);\r\n        },\r\n        /**\r\n         * Element's original angle.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value Angle\r\n         */\r\n        set: function (value) {\r\n            if (this._originalAngle !== value) {\r\n                this._originalAngle = value;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"inertiaOptions\", {\r\n        /**\r\n         * @return Options\r\n         */\r\n        get: function () {\r\n            if (this.sprite && this.sprite._adapterO) {\r\n                return this.sprite._adapterO.apply(\"inertiaOptions\", this._inertiaOptions);\r\n            }\r\n            else {\r\n                return this._inertiaOptions;\r\n            }\r\n        },\r\n        /**\r\n         * Inertia options.\r\n         *\r\n         * @param value  Options\r\n         */\r\n        set: function (value) {\r\n            this._inertiaOptions = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"hitOptions\", {\r\n        /**\r\n         * @return Options\r\n         */\r\n        get: function () {\r\n            if (this.sprite && this.sprite._adapterO) {\r\n                return this.sprite._adapterO.apply(\"hitOptions\", this._hitOptions);\r\n            }\r\n            else {\r\n                return this._hitOptions;\r\n            }\r\n        },\r\n        /**\r\n         * Hit options.\r\n         *\r\n         * @param value  Options\r\n         */\r\n        set: function (value) {\r\n            this._hitOptions = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"hoverOptions\", {\r\n        /**\r\n         * @return Options\r\n         */\r\n        get: function () {\r\n            if (this.sprite && this.sprite._adapterO) {\r\n                return this.sprite._adapterO.apply(\"hoverOptions\", this._hoverOptions);\r\n            }\r\n            else {\r\n                return this._hoverOptions;\r\n            }\r\n        },\r\n        /**\r\n         * Hover options.\r\n         *\r\n         * @param value  Options\r\n         */\r\n        set: function (value) {\r\n            this._hoverOptions = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"swipeOptions\", {\r\n        /**\r\n         * @return Options\r\n         */\r\n        get: function () {\r\n            if (this.sprite && this.sprite._adapterO) {\r\n                return this.sprite._adapterO.apply(\"swipeOptions\", this._swipeOptions);\r\n            }\r\n            else {\r\n                return this._swipeOptions;\r\n            }\r\n        },\r\n        /**\r\n         * Swipe options.\r\n         *\r\n         * @param value  Options\r\n         */\r\n        set: function (value) {\r\n            this._swipeOptions = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"keyboardOptions\", {\r\n        /**\r\n         * @return Options\r\n         */\r\n        get: function () {\r\n            if (this.sprite && this.sprite._adapterO) {\r\n                return this.sprite._adapterO.apply(\"keyboardOptions\", this._keyboardOptions);\r\n            }\r\n            else {\r\n                return this._keyboardOptions;\r\n            }\r\n        },\r\n        /**\r\n         * Keyboard options.\r\n         *\r\n         * @param value  Options\r\n         */\r\n        set: function (value) {\r\n            this._keyboardOptions = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"mouseOptions\", {\r\n        /**\r\n         * @return Options\r\n         */\r\n        get: function () {\r\n            if (this.sprite && this.sprite._adapterO) {\r\n                return this.sprite._adapterO.apply(\"mouseOptions\", this._mouseOptions);\r\n            }\r\n            else {\r\n                return this._mouseOptions;\r\n            }\r\n        },\r\n        /**\r\n         * Mouse options.\r\n         *\r\n         * Enables controlling options related to the mouse, for example sensitivity\r\n         * of its mouse wheel.\r\n         *\r\n         * E.g. the below will reduce chart's wheel-zoom speed to half its default\r\n         * speed:\r\n         *\r\n         * ```TypeScript\r\n         * chart.plotContainer.mouseOptions.sensitivity = 0.5;\r\n         * ```\r\n         * ```JavaScript\r\n         * chart.plotContainer.mouseOptions.sensitivity = 0.5;\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"plotContainer\": {\r\n         *     \"mouseOptions\": {\r\n         *       \"sensitivity\": 0.5\r\n         *     }\r\n         *   }\r\n         * }\r\n         * ```\r\n         *\r\n         * @since 4.5.14\r\n         * @param value  Options\r\n         */\r\n        set: function (value) {\r\n            this._mouseOptions = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InteractionObject.prototype, \"cursorOptions\", {\r\n        /**\r\n         * @return Options\r\n         */\r\n        get: function () {\r\n            if (this.sprite && this.sprite._adapterO) {\r\n                return this.sprite._adapterO.apply(\"cursorOptions\", this._cursorOptions);\r\n            }\r\n            else {\r\n                return this._cursorOptions;\r\n            }\r\n        },\r\n        /**\r\n         * Cursor options.\r\n         *\r\n         * @param value  Options\r\n         */\r\n        set: function (value) {\r\n            this._cursorOptions = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies all properties and related assets from another object of the same\r\n     * type.\r\n     *\r\n     * @param source Source object\r\n     */\r\n    InteractionObject.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.inertiaOptions = source.inertiaOptions;\r\n        this.hitOptions = source.hitOptions;\r\n        this.hoverOptions = source.hoverOptions;\r\n        this.swipeOptions = source.swipeOptions;\r\n        this.keyboardOptions = source.keyboardOptions;\r\n        this.cursorOptions = source.cursorOptions;\r\n        this.contextMenuDisabled = source.contextMenuDisabled;\r\n        getInteraction().applyCursorOverStyle(this);\r\n    };\r\n    /**\r\n     * @ignore Exclude from docs\r\n     */\r\n    InteractionObject.prototype.setEventDisposer = function (key, value, f) {\r\n        var disposer = this.eventDisposers.getKey(key);\r\n        if (value) {\r\n            if (disposer == null) {\r\n                this.eventDisposers.setKey(key, f());\r\n            }\r\n        }\r\n        else {\r\n            if (disposer != null) {\r\n                disposer.dispose();\r\n                this.eventDisposers.removeKey(key);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Disposes object.\r\n     */\r\n    InteractionObject.prototype.dispose = function () {\r\n        _super.prototype.dispose.call(this);\r\n        // Remove from all interaction registries\r\n        var interaction = getInteraction();\r\n        interaction.overObjects.removeValue(this);\r\n        interaction.downObjects.removeValue(this);\r\n        interaction.trackedObjects.removeValue(this);\r\n        interaction.transformedObjects.removeValue(this);\r\n        // Unlock document wheel\r\n        if (this.isHover && this.wheelable) {\r\n            interaction.unlockWheel();\r\n        }\r\n        if (interaction.focusedObject === this) {\r\n            interaction.focusedObject = undefined;\r\n        }\r\n    };\r\n    return InteractionObject;\r\n}(BaseObjectEvents));\r\nexport { InteractionObject };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}