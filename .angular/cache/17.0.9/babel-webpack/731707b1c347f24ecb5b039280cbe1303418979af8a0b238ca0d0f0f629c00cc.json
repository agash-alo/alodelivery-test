{"ast":null,"code":"/**\r\n * A collection of keyboard-related utilities accessible via `keyboard`\r\n * instance.\r\n */\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport * as $type from \"./Type\";\n/**\r\n * A class that represents collection of keyboard-related utilities.\r\n *\r\n * Do not instantiate this class directly, but rather use `keyboard` variable.\r\n */\nvar Keyboard = /** @class */function () {\n  function Keyboard() {}\n  /**\r\n   * Returns a named key based on information contained in the event or\r\n   * \"other\".\r\n   *\r\n   * @param ev  A keyboard event\r\n   * @return Keyboard named key\r\n   */\n  Keyboard.prototype.getEventKey = function (ev) {\n    // Get the key code\n    var code = ev.keyCode || ev.which,\n      key;\n    // Map to internal key\n    switch (code) {\n      case 38:\n        key = \"up\";\n        break;\n      case 40:\n        key = \"down\";\n        break;\n      case 37:\n        key = \"left\";\n        break;\n      case 39:\n        key = \"right\";\n        break;\n      case 13:\n        key = \"enter\";\n        break;\n      case 27:\n        key = \"esc\";\n        break;\n      case 36:\n        key = \"home\";\n        break;\n      case 35:\n        key = \"end\";\n        break;\n      case 9:\n        key = \"tab\";\n        break;\n      case 17:\n        key = \"ctrl\";\n        break;\n      case 18:\n        key = \"alt\";\n        break;\n      case 16:\n        key = \"shift\";\n        break;\n      case 32:\n        key = \"space\";\n        break;\n      case 36:\n        key = \"home\";\n        break;\n      case 35:\n        key = \"end\";\n        break;\n      case 33:\n        key = \"pgup\";\n        break;\n      case 34:\n        key = \"pgdn\";\n        break;\n      case 45:\n        key = \"ins\";\n        break;\n      case 46:\n        key = \"del\";\n        break;\n      case 107:\n        key = \"plus\";\n        break;\n      case 109:\n        key = \"minus\";\n        break;\n      default:\n        key = \"other\";\n        break;\n    }\n    return key;\n  };\n  /**\r\n   * Checks if event key is one or more of the selected named keys.\r\n   *\r\n   * @param ev   Keyboard event\r\n   * @param key  Named key or array of keys\r\n   * @return Is event key one of the list?\r\n   */\n  Keyboard.prototype.isKey = function (ev, key) {\n    var eventKey = this.getEventKey(ev);\n    if ($type.isString(key)) {\n      key = [key];\n    }\n    return key.indexOf(eventKey) !== -1;\n  };\n  /**\r\n   * Returns `true` if shift key was presset at the moment of the event.\r\n   *\r\n   * @param ev  Event object\r\n   * @return Was shift pressed?\r\n   */\n  Keyboard.prototype.shiftKey = function (ev) {\n    return ev.shiftKey;\n  };\n  /**\r\n   * Returns `true` if ctrl key was presset at the moment of the event.\r\n   *\r\n   * @param ev  Event object\r\n   * @return Was ctrl pressed?\r\n   */\n  Keyboard.prototype.ctrlKey = function (ev) {\n    return ev.ctrlKey;\n  };\n  /**\r\n   * Returns `true` if alt key was presset at the moment of the event\r\n   * @param ev  Event object\r\n   * @return Was alt pressed?\r\n   */\n  Keyboard.prototype.altKey = function (ev) {\n    return ev.altKey;\n  };\n  /**\r\n   * Returns `true` if meta key was presset at the moment of the event\r\n   * @param ev  Event object\r\n   * @return Was meta pressed?\r\n   */\n  Keyboard.prototype.metaKey = function (ev) {\n    return ev.metaKey;\n  };\n  return Keyboard;\n}();\nexport { Keyboard };\n/**\r\n * A single [[Keyboard]] instance to be reused across all elements so that\r\n * they don't need to instantiate their own.\r\n *\r\n * @ignore Exclude from docs\r\n */\nexport var keyboard = new Keyboard();","map":{"version":3,"names":["$type","Keyboard","prototype","getEventKey","ev","code","keyCode","which","key","isKey","eventKey","isString","indexOf","shiftKey","ctrlKey","altKey","metaKey","keyboard"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/utils/Keyboard.js"],"sourcesContent":["/**\r\n * A collection of keyboard-related utilities accessible via `keyboard`\r\n * instance.\r\n */\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $type from \"./Type\";\r\n/**\r\n * A class that represents collection of keyboard-related utilities.\r\n *\r\n * Do not instantiate this class directly, but rather use `keyboard` variable.\r\n */\r\nvar Keyboard = /** @class */ (function () {\r\n    function Keyboard() {\r\n    }\r\n    /**\r\n     * Returns a named key based on information contained in the event or\r\n     * \"other\".\r\n     *\r\n     * @param ev  A keyboard event\r\n     * @return Keyboard named key\r\n     */\r\n    Keyboard.prototype.getEventKey = function (ev) {\r\n        // Get the key code\r\n        var code = ev.keyCode || ev.which, key;\r\n        // Map to internal key\r\n        switch (code) {\r\n            case 38:\r\n                key = \"up\";\r\n                break;\r\n            case 40:\r\n                key = \"down\";\r\n                break;\r\n            case 37:\r\n                key = \"left\";\r\n                break;\r\n            case 39:\r\n                key = \"right\";\r\n                break;\r\n            case 13:\r\n                key = \"enter\";\r\n                break;\r\n            case 27:\r\n                key = \"esc\";\r\n                break;\r\n            case 36:\r\n                key = \"home\";\r\n                break;\r\n            case 35:\r\n                key = \"end\";\r\n                break;\r\n            case 9:\r\n                key = \"tab\";\r\n                break;\r\n            case 17:\r\n                key = \"ctrl\";\r\n                break;\r\n            case 18:\r\n                key = \"alt\";\r\n                break;\r\n            case 16:\r\n                key = \"shift\";\r\n                break;\r\n            case 32:\r\n                key = \"space\";\r\n                break;\r\n            case 36:\r\n                key = \"home\";\r\n                break;\r\n            case 35:\r\n                key = \"end\";\r\n                break;\r\n            case 33:\r\n                key = \"pgup\";\r\n                break;\r\n            case 34:\r\n                key = \"pgdn\";\r\n                break;\r\n            case 45:\r\n                key = \"ins\";\r\n                break;\r\n            case 46:\r\n                key = \"del\";\r\n                break;\r\n            case 107:\r\n                key = \"plus\";\r\n                break;\r\n            case 109:\r\n                key = \"minus\";\r\n                break;\r\n            default:\r\n                key = \"other\";\r\n                break;\r\n        }\r\n        return key;\r\n    };\r\n    /**\r\n     * Checks if event key is one or more of the selected named keys.\r\n     *\r\n     * @param ev   Keyboard event\r\n     * @param key  Named key or array of keys\r\n     * @return Is event key one of the list?\r\n     */\r\n    Keyboard.prototype.isKey = function (ev, key) {\r\n        var eventKey = this.getEventKey(ev);\r\n        if ($type.isString(key)) {\r\n            key = [key];\r\n        }\r\n        return key.indexOf(eventKey) !== -1;\r\n    };\r\n    /**\r\n     * Returns `true` if shift key was presset at the moment of the event.\r\n     *\r\n     * @param ev  Event object\r\n     * @return Was shift pressed?\r\n     */\r\n    Keyboard.prototype.shiftKey = function (ev) {\r\n        return ev.shiftKey;\r\n    };\r\n    /**\r\n     * Returns `true` if ctrl key was presset at the moment of the event.\r\n     *\r\n     * @param ev  Event object\r\n     * @return Was ctrl pressed?\r\n     */\r\n    Keyboard.prototype.ctrlKey = function (ev) {\r\n        return ev.ctrlKey;\r\n    };\r\n    /**\r\n     * Returns `true` if alt key was presset at the moment of the event\r\n     * @param ev  Event object\r\n     * @return Was alt pressed?\r\n     */\r\n    Keyboard.prototype.altKey = function (ev) {\r\n        return ev.altKey;\r\n    };\r\n    /**\r\n     * Returns `true` if meta key was presset at the moment of the event\r\n     * @param ev  Event object\r\n     * @return Was meta pressed?\r\n     */\r\n    Keyboard.prototype.metaKey = function (ev) {\r\n        return ev.metaKey;\r\n    };\r\n    return Keyboard;\r\n}());\r\nexport { Keyboard };\r\n/**\r\n * A single [[Keyboard]] instance to be reused across all elements so that\r\n * they don't need to instantiate their own.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport var keyboard = new Keyboard();\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,KAAKA,KAAK,MAAM,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA,IAAIC,QAAQ,GAAG,aAAe,YAAY;EACtC,SAASA,QAAQA,CAAA,EAAG,CACpB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIA,QAAQ,CAACC,SAAS,CAACC,WAAW,GAAG,UAAUC,EAAE,EAAE;IAC3C;IACA,IAAIC,IAAI,GAAGD,EAAE,CAACE,OAAO,IAAIF,EAAE,CAACG,KAAK;MAAEC,GAAG;IACtC;IACA,QAAQH,IAAI;MACR,KAAK,EAAE;QACHG,GAAG,GAAG,IAAI;QACV;MACJ,KAAK,EAAE;QACHA,GAAG,GAAG,MAAM;QACZ;MACJ,KAAK,EAAE;QACHA,GAAG,GAAG,MAAM;QACZ;MACJ,KAAK,EAAE;QACHA,GAAG,GAAG,OAAO;QACb;MACJ,KAAK,EAAE;QACHA,GAAG,GAAG,OAAO;QACb;MACJ,KAAK,EAAE;QACHA,GAAG,GAAG,KAAK;QACX;MACJ,KAAK,EAAE;QACHA,GAAG,GAAG,MAAM;QACZ;MACJ,KAAK,EAAE;QACHA,GAAG,GAAG,KAAK;QACX;MACJ,KAAK,CAAC;QACFA,GAAG,GAAG,KAAK;QACX;MACJ,KAAK,EAAE;QACHA,GAAG,GAAG,MAAM;QACZ;MACJ,KAAK,EAAE;QACHA,GAAG,GAAG,KAAK;QACX;MACJ,KAAK,EAAE;QACHA,GAAG,GAAG,OAAO;QACb;MACJ,KAAK,EAAE;QACHA,GAAG,GAAG,OAAO;QACb;MACJ,KAAK,EAAE;QACHA,GAAG,GAAG,MAAM;QACZ;MACJ,KAAK,EAAE;QACHA,GAAG,GAAG,KAAK;QACX;MACJ,KAAK,EAAE;QACHA,GAAG,GAAG,MAAM;QACZ;MACJ,KAAK,EAAE;QACHA,GAAG,GAAG,MAAM;QACZ;MACJ,KAAK,EAAE;QACHA,GAAG,GAAG,KAAK;QACX;MACJ,KAAK,EAAE;QACHA,GAAG,GAAG,KAAK;QACX;MACJ,KAAK,GAAG;QACJA,GAAG,GAAG,MAAM;QACZ;MACJ,KAAK,GAAG;QACJA,GAAG,GAAG,OAAO;QACb;MACJ;QACIA,GAAG,GAAG,OAAO;QACb;IACR;IACA,OAAOA,GAAG;EACd,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIP,QAAQ,CAACC,SAAS,CAACO,KAAK,GAAG,UAAUL,EAAE,EAAEI,GAAG,EAAE;IAC1C,IAAIE,QAAQ,GAAG,IAAI,CAACP,WAAW,CAACC,EAAE,CAAC;IACnC,IAAIJ,KAAK,CAACW,QAAQ,CAACH,GAAG,CAAC,EAAE;MACrBA,GAAG,GAAG,CAACA,GAAG,CAAC;IACf;IACA,OAAOA,GAAG,CAACI,OAAO,CAACF,QAAQ,CAAC,KAAK,CAAC,CAAC;EACvC,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIT,QAAQ,CAACC,SAAS,CAACW,QAAQ,GAAG,UAAUT,EAAE,EAAE;IACxC,OAAOA,EAAE,CAACS,QAAQ;EACtB,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIZ,QAAQ,CAACC,SAAS,CAACY,OAAO,GAAG,UAAUV,EAAE,EAAE;IACvC,OAAOA,EAAE,CAACU,OAAO;EACrB,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIb,QAAQ,CAACC,SAAS,CAACa,MAAM,GAAG,UAAUX,EAAE,EAAE;IACtC,OAAOA,EAAE,CAACW,MAAM;EACpB,CAAC;EACD;AACJ;AACA;AACA;AACA;EACId,QAAQ,CAACC,SAAS,CAACc,OAAO,GAAG,UAAUZ,EAAE,EAAE;IACvC,OAAOA,EAAE,CAACY,OAAO;EACrB,CAAC;EACD,OAAOf,QAAQ;AACnB,CAAC,CAAC,CAAE;AACJ,SAASA,QAAQ;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIgB,QAAQ,GAAG,IAAIhB,QAAQ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}