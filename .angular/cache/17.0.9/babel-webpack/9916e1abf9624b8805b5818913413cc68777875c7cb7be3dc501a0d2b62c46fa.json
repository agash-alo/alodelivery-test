{"ast":null,"code":"import { Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';\nimport { CdkTable, CDK_TABLE_TEMPLATE, CDK_TABLE, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, STICKY_POSITIONING_LISTENER, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkHeaderCell, CdkFooterCell, CdkCell, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkHeaderRow, CDK_ROW_TEMPLATE, CdkFooterRow, CdkRow, CdkNoDataRow, CdkTextColumn, CdkTableModule, DataSource } from '@angular/cdk/table';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nimport { MatCommonModule } from '@angular/material/core';\nimport { _isNumberValue } from '@angular/cdk/coercion';\nimport { BehaviorSubject, Subject, merge, of, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\nclass MatRecycleRows {}\nMatRecycleRows.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-table[recycleRows], table[mat-table][recycleRows]',\n    providers: [{\n      provide: _VIEW_REPEATER_STRATEGY,\n      useClass: _RecycleViewRepeaterStrategy\n    }]\n  }]\n}];\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nclass MatTable extends CdkTable {\n  constructor() {\n    super(...arguments);\n    /** Overrides the sticky CSS class set by the `CdkTable`. */\n    this.stickyCssClass = 'mat-table-sticky';\n    /** Overrides the need to add position: sticky on every sticky cell element in `CdkTable`. */\n    this.needsPositionStickyOnElement = false;\n  }\n}\nMatTable.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-table, table[mat-table]',\n    exportAs: 'matTable',\n    template: CDK_TABLE_TEMPLATE,\n    host: {\n      'class': 'mat-table',\n      '[class.mat-table-fixed-layout]': 'fixedLayout'\n    },\n    providers: [\n    // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n    //  is only included in the build if used.\n    {\n      provide: _VIEW_REPEATER_STRATEGY,\n      useClass: _DisposeViewRepeaterStrategy\n    }, {\n      provide: CdkTable,\n      useExisting: MatTable\n    }, {\n      provide: CDK_TABLE,\n      useExisting: MatTable\n    }, {\n      provide: _COALESCED_STYLE_SCHEDULER,\n      useClass: _CoalescedStyleScheduler\n    },\n    // Prevent nested tables from seeing this table's StickyPositioningListener.\n    {\n      provide: STICKY_POSITIONING_LISTENER,\n      useValue: null\n    }],\n    encapsulation: ViewEncapsulation.None,\n    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n    // tslint:disable-next-line:validate-decorators\n    changeDetection: ChangeDetectionStrategy.Default,\n    styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-row::after,mat-header-row::after,mat-footer-row::after{display:inline-block;min-height:inherit;content:\\\"\\\"}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-row,tr.mat-footer-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}th.mat-header-cell,td.mat-cell,td.mat-footer-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}th.mat-header-cell:first-of-type,td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] th.mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}th.mat-header-cell:last-of-type,td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] th.mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}.mat-table-sticky{position:-webkit-sticky !important;position:sticky !important}.mat-table-fixed-layout{table-layout:fixed}\\n\"]\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass MatCellDef extends CdkCellDef {}\nMatCellDef.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matCellDef]',\n    providers: [{\n      provide: CdkCellDef,\n      useExisting: MatCellDef\n    }]\n  }]\n}];\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass MatHeaderCellDef extends CdkHeaderCellDef {}\nMatHeaderCellDef.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matHeaderCellDef]',\n    providers: [{\n      provide: CdkHeaderCellDef,\n      useExisting: MatHeaderCellDef\n    }]\n  }]\n}];\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass MatFooterCellDef extends CdkFooterCellDef {}\nMatFooterCellDef.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matFooterCellDef]',\n    providers: [{\n      provide: CdkFooterCellDef,\n      useExisting: MatFooterCellDef\n    }]\n  }]\n}];\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\nclass MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  get name() {\n    return this._name;\n  }\n  set name(name) {\n    this._setNameInput(name);\n  }\n  /**\n   * Add \"mat-column-\" prefix in addition to \"cdk-column-\" prefix.\n   * In the future, this will only add \"mat-column-\" and columnCssClassName\n   * will change from type string[] to string.\n   * @docs-private\n   */\n  _updateColumnCssClassName() {\n    super._updateColumnCssClassName();\n    this._columnCssClassName.push(`mat-column-${this.cssClassFriendlyName}`);\n  }\n}\nMatColumnDef.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matColumnDef]',\n    inputs: ['sticky'],\n    providers: [{\n      provide: CdkColumnDef,\n      useExisting: MatColumnDef\n    }, {\n      provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n      useExisting: MatColumnDef\n    }]\n  }]\n}];\nMatColumnDef.propDecorators = {\n  name: [{\n    type: Input,\n    args: ['matColumnDef']\n  }]\n};\n/** Header cell template container that adds the right classes and role. */\nclass MatHeaderCell extends CdkHeaderCell {}\nMatHeaderCell.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-header-cell, th[mat-header-cell]',\n    host: {\n      'class': 'mat-header-cell',\n      'role': 'columnheader'\n    }\n  }]\n}];\n/** Footer cell template container that adds the right classes and role. */\nclass MatFooterCell extends CdkFooterCell {}\nMatFooterCell.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-footer-cell, td[mat-footer-cell]',\n    host: {\n      'class': 'mat-footer-cell',\n      'role': 'gridcell'\n    }\n  }]\n}];\n/** Cell template container that adds the right classes and role. */\nclass MatCell extends CdkCell {}\nMatCell.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-cell, td[mat-cell]',\n    host: {\n      'class': 'mat-cell',\n      'role': 'gridcell'\n    }\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass MatHeaderRowDef extends CdkHeaderRowDef {}\nMatHeaderRowDef.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matHeaderRowDef]',\n    providers: [{\n      provide: CdkHeaderRowDef,\n      useExisting: MatHeaderRowDef\n    }],\n    inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky']\n  }]\n}];\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass MatFooterRowDef extends CdkFooterRowDef {}\nMatFooterRowDef.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matFooterRowDef]',\n    providers: [{\n      provide: CdkFooterRowDef,\n      useExisting: MatFooterRowDef\n    }],\n    inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky']\n  }]\n}];\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nclass MatRowDef extends CdkRowDef {}\nMatRowDef.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matRowDef]',\n    providers: [{\n      provide: CdkRowDef,\n      useExisting: MatRowDef\n    }],\n    inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen']\n  }]\n}];\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass MatHeaderRow extends CdkHeaderRow {}\nMatHeaderRow.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-header-row, tr[mat-header-row]',\n    template: CDK_ROW_TEMPLATE,\n    host: {\n      'class': 'mat-header-row',\n      'role': 'row'\n    },\n    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n    // tslint:disable-next-line:validate-decorators\n    changeDetection: ChangeDetectionStrategy.Default,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'matHeaderRow',\n    providers: [{\n      provide: CdkHeaderRow,\n      useExisting: MatHeaderRow\n    }]\n  }]\n}];\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass MatFooterRow extends CdkFooterRow {}\nMatFooterRow.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-footer-row, tr[mat-footer-row]',\n    template: CDK_ROW_TEMPLATE,\n    host: {\n      'class': 'mat-footer-row',\n      'role': 'row'\n    },\n    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n    // tslint:disable-next-line:validate-decorators\n    changeDetection: ChangeDetectionStrategy.Default,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'matFooterRow',\n    providers: [{\n      provide: CdkFooterRow,\n      useExisting: MatFooterRow\n    }]\n  }]\n}];\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass MatRow extends CdkRow {}\nMatRow.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-row, tr[mat-row]',\n    template: CDK_ROW_TEMPLATE,\n    host: {\n      'class': 'mat-row',\n      'role': 'row'\n    },\n    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n    // tslint:disable-next-line:validate-decorators\n    changeDetection: ChangeDetectionStrategy.Default,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'matRow',\n    providers: [{\n      provide: CdkRow,\n      useExisting: MatRow\n    }]\n  }]\n}];\n/** Row that can be used to display a message when no data is shown in the table. */\nclass MatNoDataRow extends CdkNoDataRow {}\nMatNoDataRow.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'ng-template[matNoDataRow]',\n    providers: [{\n      provide: CdkNoDataRow,\n      useExisting: MatNoDataRow\n    }]\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nclass MatTextColumn extends CdkTextColumn {}\nMatTextColumn.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-text-column',\n    template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n    encapsulation: ViewEncapsulation.None,\n    // Change detection is intentionally not set to OnPush. This component's template will be provided\n    // to the table to be inserted into its view. This is problematic when change detection runs since\n    // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n    // mean's the template in the table's view will not have the updated value (and in fact will cause\n    // an ExpressionChangedAfterItHasBeenCheckedError).\n    // tslint:disable-next-line:validate-decorators\n    changeDetection: ChangeDetectionStrategy.Default\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EXPORTED_DECLARATIONS = [\n// Table\nMatTable, MatRecycleRows,\n// Template defs\nMatHeaderCellDef, MatHeaderRowDef, MatColumnDef, MatCellDef, MatRowDef, MatFooterCellDef, MatFooterRowDef,\n// Cell directives\nMatHeaderCell, MatCell, MatFooterCell,\n// Row directives\nMatHeaderRow, MatRow, MatFooterRow, MatNoDataRow, MatTextColumn];\nclass MatTableModule {}\nMatTableModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CdkTableModule, MatCommonModule],\n    exports: [MatCommonModule, EXPORTED_DECLARATIONS],\n    declarations: EXPORTED_DECLARATIONS\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n/** Shared base class with MDC-based implementation. */\nclass _MatTableDataSource extends DataSource {\n  constructor(initialData = []) {\n    super();\n    /** Stream emitting render data to the table (depends on ordered data changes). */\n    this._renderData = new BehaviorSubject([]);\n    /** Stream that emits when a new filter string is set on the data source. */\n    this._filter = new BehaviorSubject('');\n    /** Used to react to internal changes of the paginator that are made by the data source itself. */\n    this._internalPageChanges = new Subject();\n    /**\n     * Subscription to the changes that should trigger an update to the table's rendered rows, such\n     * as filtering, sorting, pagination, or base data changes.\n     */\n    this._renderChangesSubscription = null;\n    /**\n     * Data accessor function that is used for accessing data properties for sorting through\n     * the default sortData function.\n     * This default function assumes that the sort header IDs (which defaults to the column name)\n     * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n     * May be set to a custom function for different behavior.\n     * @param data Data object that is being accessed.\n     * @param sortHeaderId The name of the column that represents the data.\n     */\n    this.sortingDataAccessor = (data, sortHeaderId) => {\n      const value = data[sortHeaderId];\n      if (_isNumberValue(value)) {\n        const numberValue = Number(value);\n        // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n        // leave them as strings. For more info: https://goo.gl/y5vbSg\n        return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n      }\n      return value;\n    };\n    /**\n     * Gets a sorted copy of the data array based on the state of the MatSort. Called\n     * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n     * By default, the function retrieves the active sort and its direction and compares data\n     * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n     * of data ordering.\n     * @param data The array of data that should be sorted.\n     * @param sort The connected MatSort that holds the current sort state.\n     */\n    this.sortData = (data, sort) => {\n      const active = sort.active;\n      const direction = sort.direction;\n      if (!active || direction == '') {\n        return data;\n      }\n      return data.sort((a, b) => {\n        let valueA = this.sortingDataAccessor(a, active);\n        let valueB = this.sortingDataAccessor(b, active);\n        // If there are data in the column that can be converted to a number,\n        // it must be ensured that the rest of the data\n        // is of the same type so as not to order incorrectly.\n        const valueAType = typeof valueA;\n        const valueBType = typeof valueB;\n        if (valueAType !== valueBType) {\n          if (valueAType === 'number') {\n            valueA += '';\n          }\n          if (valueBType === 'number') {\n            valueB += '';\n          }\n        }\n        // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n        // one value exists while the other doesn't. In this case, existing value should come last.\n        // This avoids inconsistent results when comparing values to undefined/null.\n        // If neither value exists, return 0 (equal).\n        let comparatorResult = 0;\n        if (valueA != null && valueB != null) {\n          // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n          if (valueA > valueB) {\n            comparatorResult = 1;\n          } else if (valueA < valueB) {\n            comparatorResult = -1;\n          }\n        } else if (valueA != null) {\n          comparatorResult = 1;\n        } else if (valueB != null) {\n          comparatorResult = -1;\n        }\n        return comparatorResult * (direction == 'asc' ? 1 : -1);\n      });\n    };\n    /**\n     * Checks if a data object matches the data source's filter string. By default, each data object\n     * is converted to a string of its properties and returns true if the filter has\n     * at least one occurrence in that string. By default, the filter string has its whitespace\n     * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n     * filter matching.\n     * @param data Data object used to check against the filter.\n     * @param filter Filter string that has been set on the data source.\n     * @returns Whether the filter matches against the data\n     */\n    this.filterPredicate = (data, filter) => {\n      // Transform the data into a lowercase string of all property values.\n      const dataStr = Object.keys(data).reduce((currentTerm, key) => {\n        // Use an obscure Unicode character to delimit the words in the concatenated string.\n        // This avoids matches where the values of two columns combined will match the user's query\n        // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n        // that has a very low chance of being typed in by somebody in a text field. This one in\n        // particular is \"White up-pointing triangle with dot\" from\n        // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n        return currentTerm + data[key] + '◬';\n      }, '').toLowerCase();\n      // Transform the filter by converting it to lowercase and removing whitespace.\n      const transformedFilter = filter.trim().toLowerCase();\n      return dataStr.indexOf(transformedFilter) != -1;\n    };\n    this._data = new BehaviorSubject(initialData);\n    this._updateChangeSubscription();\n  }\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() {\n    return this._data.value;\n  }\n  set data(data) {\n    this._data.next(data);\n    // Normally the `filteredData` is updated by the re-render\n    // subscription, but that won't happen if it's inactive.\n    if (!this._renderChangesSubscription) {\n      this._filterData(data);\n    }\n  }\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter() {\n    return this._filter.value;\n  }\n  set filter(filter) {\n    this._filter.next(filter);\n    // Normally the `filteredData` is updated by the re-render\n    // subscription, but that won't happen if it's inactive.\n    if (!this._renderChangesSubscription) {\n      this._filterData(this.data);\n    }\n  }\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort() {\n    return this._sort;\n  }\n  set sort(sort) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator() {\n    return this._paginator;\n  }\n  set paginator(paginator) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    var _a;\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange = this._sort ? merge(this._sort.sortChange, this._sort.initialized) : of(null);\n    const pageChange = this._paginator ? merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized) : of(null);\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest([dataStream, this._filter]).pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest([filteredData, sortChange]).pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest([orderedData, pageChange]).pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    (_a = this._renderChangesSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData = this.filter == null || this.filter === '' ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n    if (this.paginator) {\n      this._updatePaginator(this.filteredData.length);\n    }\n    return this.filteredData;\n  }\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data) {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) {\n      return data;\n    }\n    return this.sortData(data.slice(), this.sort);\n  }\n  /**\n   * Returns a paged slice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data) {\n    if (!this.paginator) {\n      return data;\n    }\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice(startIndex, startIndex + this.paginator.pageSize);\n  }\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength) {\n    Promise.resolve().then(() => {\n      const paginator = this.paginator;\n      if (!paginator) {\n        return;\n      }\n      paginator.length = filteredDataLength;\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n        const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n        if (newPageIndex !== paginator.pageIndex) {\n          paginator.pageIndex = newPageIndex;\n          // Since the paginator only emits after user-generated changes,\n          // we need our own stream so we know to should re-render the data.\n          this._internalPageChanges.next();\n        }\n      }\n    });\n  }\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() {\n    if (!this._renderChangesSubscription) {\n      this._updateChangeSubscription();\n    }\n    return this._renderData;\n  }\n  /**\n   * Used by the MatTable. Called when it disconnects from the data source.\n   * @docs-private\n   */\n  disconnect() {\n    var _a;\n    (_a = this._renderChangesSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n    this._renderChangesSubscription = null;\n  }\n}\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n */\nclass MatTableDataSource extends _MatTableDataSource {}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatCell, MatCellDef, MatColumnDef, MatFooterCell, MatFooterCellDef, MatFooterRow, MatFooterRowDef, MatHeaderCell, MatHeaderCellDef, MatHeaderRow, MatHeaderRowDef, MatNoDataRow, MatRecycleRows, MatRow, MatRowDef, MatTable, MatTableDataSource, MatTableModule, MatTextColumn, _MatTableDataSource };","map":{"version":3,"names":["Directive","Component","ViewEncapsulation","ChangeDetectionStrategy","Input","NgModule","CdkTable","CDK_TABLE_TEMPLATE","CDK_TABLE","_COALESCED_STYLE_SCHEDULER","_CoalescedStyleScheduler","STICKY_POSITIONING_LISTENER","CdkCellDef","CdkHeaderCellDef","CdkFooterCellDef","CdkColumnDef","CdkHeaderCell","CdkFooterCell","CdkCell","CdkHeaderRowDef","CdkFooterRowDef","CdkRowDef","CdkHeaderRow","CDK_ROW_TEMPLATE","CdkFooterRow","CdkRow","CdkNoDataRow","CdkTextColumn","CdkTableModule","DataSource","_VIEW_REPEATER_STRATEGY","_RecycleViewRepeaterStrategy","_DisposeViewRepeaterStrategy","MatCommonModule","_isNumberValue","BehaviorSubject","Subject","merge","of","combineLatest","map","MatRecycleRows","decorators","type","args","selector","providers","provide","useClass","MatTable","constructor","arguments","stickyCssClass","needsPositionStickyOnElement","exportAs","template","host","useExisting","useValue","encapsulation","None","changeDetection","Default","styles","MatCellDef","MatHeaderCellDef","MatFooterCellDef","MatColumnDef","name","_name","_setNameInput","_updateColumnCssClassName","_columnCssClassName","push","cssClassFriendlyName","inputs","propDecorators","MatHeaderCell","MatFooterCell","MatCell","MatHeaderRowDef","MatFooterRowDef","MatRowDef","MatHeaderRow","MatFooterRow","MatRow","MatNoDataRow","MatTextColumn","EXPORTED_DECLARATIONS","MatTableModule","imports","exports","declarations","MAX_SAFE_INTEGER","_MatTableDataSource","initialData","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","sortingDataAccessor","data","sortHeaderId","value","numberValue","Number","sortData","sort","active","direction","a","b","valueA","valueB","valueAType","valueBType","comparatorResult","filterPredicate","filter","dataStr","Object","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","trim","indexOf","_data","_updateChangeSubscription","next","_filterData","_sort","paginator","_paginator","_a","sortChange","initialized","pageChange","page","dataStream","filteredData","pipe","orderedData","_orderData","paginatedData","_pageData","unsubscribe","subscribe","obj","_updatePaginator","length","slice","startIndex","pageIndex","pageSize","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","newPageIndex","min","connect","disconnect","MatTableDataSource"],"sources":["D:/alodelivery test/node_modules/@angular/material/fesm2015/table.js"],"sourcesContent":["import { Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';\nimport { CdkTable, CDK_TABLE_TEMPLATE, CDK_TABLE, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, STICKY_POSITIONING_LISTENER, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkHeaderCell, CdkFooterCell, CdkCell, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkHeaderRow, CDK_ROW_TEMPLATE, CdkFooterRow, CdkRow, CdkNoDataRow, CdkTextColumn, CdkTableModule, DataSource } from '@angular/cdk/table';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nimport { MatCommonModule } from '@angular/material/core';\nimport { _isNumberValue } from '@angular/cdk/coercion';\nimport { BehaviorSubject, Subject, merge, of, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\nclass MatRecycleRows {\n}\nMatRecycleRows.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-table[recycleRows], table[mat-table][recycleRows]',\n                providers: [\n                    { provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy },\n                ],\n            },] }\n];\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nclass MatTable extends CdkTable {\n    constructor() {\n        super(...arguments);\n        /** Overrides the sticky CSS class set by the `CdkTable`. */\n        this.stickyCssClass = 'mat-table-sticky';\n        /** Overrides the need to add position: sticky on every sticky cell element in `CdkTable`. */\n        this.needsPositionStickyOnElement = false;\n    }\n}\nMatTable.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-table, table[mat-table]',\n                exportAs: 'matTable',\n                template: CDK_TABLE_TEMPLATE,\n                host: {\n                    'class': 'mat-table',\n                    '[class.mat-table-fixed-layout]': 'fixedLayout',\n                },\n                providers: [\n                    // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n                    //  is only included in the build if used.\n                    { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n                    { provide: CdkTable, useExisting: MatTable },\n                    { provide: CDK_TABLE, useExisting: MatTable },\n                    { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n                    // Prevent nested tables from seeing this table's StickyPositioningListener.\n                    { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n                ],\n                encapsulation: ViewEncapsulation.None,\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-row::after,mat-header-row::after,mat-footer-row::after{display:inline-block;min-height:inherit;content:\\\"\\\"}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-row,tr.mat-footer-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}th.mat-header-cell,td.mat-cell,td.mat-footer-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}th.mat-header-cell:first-of-type,td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] th.mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}th.mat-header-cell:last-of-type,td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] th.mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}.mat-table-sticky{position:-webkit-sticky !important;position:sticky !important}.mat-table-fixed-layout{table-layout:fixed}\\n\"]\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass MatCellDef extends CdkCellDef {\n}\nMatCellDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matCellDef]',\n                providers: [{ provide: CdkCellDef, useExisting: MatCellDef }]\n            },] }\n];\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass MatHeaderCellDef extends CdkHeaderCellDef {\n}\nMatHeaderCellDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matHeaderCellDef]',\n                providers: [{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }]\n            },] }\n];\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass MatFooterCellDef extends CdkFooterCellDef {\n}\nMatFooterCellDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matFooterCellDef]',\n                providers: [{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }]\n            },] }\n];\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\nclass MatColumnDef extends CdkColumnDef {\n    /** Unique name for this column. */\n    get name() { return this._name; }\n    set name(name) { this._setNameInput(name); }\n    /**\n     * Add \"mat-column-\" prefix in addition to \"cdk-column-\" prefix.\n     * In the future, this will only add \"mat-column-\" and columnCssClassName\n     * will change from type string[] to string.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n        super._updateColumnCssClassName();\n        this._columnCssClassName.push(`mat-column-${this.cssClassFriendlyName}`);\n    }\n}\nMatColumnDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matColumnDef]',\n                inputs: ['sticky'],\n                providers: [\n                    { provide: CdkColumnDef, useExisting: MatColumnDef },\n                    { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef }\n                ],\n            },] }\n];\nMatColumnDef.propDecorators = {\n    name: [{ type: Input, args: ['matColumnDef',] }]\n};\n/** Header cell template container that adds the right classes and role. */\nclass MatHeaderCell extends CdkHeaderCell {\n}\nMatHeaderCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-header-cell, th[mat-header-cell]',\n                host: {\n                    'class': 'mat-header-cell',\n                    'role': 'columnheader',\n                },\n            },] }\n];\n/** Footer cell template container that adds the right classes and role. */\nclass MatFooterCell extends CdkFooterCell {\n}\nMatFooterCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-footer-cell, td[mat-footer-cell]',\n                host: {\n                    'class': 'mat-footer-cell',\n                    'role': 'gridcell',\n                },\n            },] }\n];\n/** Cell template container that adds the right classes and role. */\nclass MatCell extends CdkCell {\n}\nMatCell.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-cell, td[mat-cell]',\n                host: {\n                    'class': 'mat-cell',\n                    'role': 'gridcell',\n                },\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass MatHeaderRowDef extends CdkHeaderRowDef {\n}\nMatHeaderRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matHeaderRowDef]',\n                providers: [{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }],\n                inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n            },] }\n];\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass MatFooterRowDef extends CdkFooterRowDef {\n}\nMatFooterRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matFooterRowDef]',\n                providers: [{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }],\n                inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n            },] }\n];\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nclass MatRowDef extends CdkRowDef {\n}\nMatRowDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matRowDef]',\n                providers: [{ provide: CdkRowDef, useExisting: MatRowDef }],\n                inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n            },] }\n];\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass MatHeaderRow extends CdkHeaderRow {\n}\nMatHeaderRow.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-header-row, tr[mat-header-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'mat-header-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matHeaderRow',\n                providers: [{ provide: CdkHeaderRow, useExisting: MatHeaderRow }]\n            },] }\n];\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass MatFooterRow extends CdkFooterRow {\n}\nMatFooterRow.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-footer-row, tr[mat-footer-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'mat-footer-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matFooterRow',\n                providers: [{ provide: CdkFooterRow, useExisting: MatFooterRow }]\n            },] }\n];\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass MatRow extends CdkRow {\n}\nMatRow.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-row, tr[mat-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'mat-row',\n                    'role': 'row',\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matRow',\n                providers: [{ provide: CdkRow, useExisting: MatRow }]\n            },] }\n];\n/** Row that can be used to display a message when no data is shown in the table. */\nclass MatNoDataRow extends CdkNoDataRow {\n}\nMatNoDataRow.decorators = [\n    { type: Directive, args: [{\n                selector: 'ng-template[matNoDataRow]',\n                providers: [{ provide: CdkNoDataRow, useExisting: MatNoDataRow }],\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nclass MatTextColumn extends CdkTextColumn {\n}\nMatTextColumn.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-text-column',\n                template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                encapsulation: ViewEncapsulation.None,\n                // Change detection is intentionally not set to OnPush. This component's template will be provided\n                // to the table to be inserted into its view. This is problematic when change detection runs since\n                // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                // mean's the template in the table's view will not have the updated value (and in fact will cause\n                // an ExpressionChangedAfterItHasBeenCheckedError).\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EXPORTED_DECLARATIONS = [\n    // Table\n    MatTable,\n    MatRecycleRows,\n    // Template defs\n    MatHeaderCellDef,\n    MatHeaderRowDef,\n    MatColumnDef,\n    MatCellDef,\n    MatRowDef,\n    MatFooterCellDef,\n    MatFooterRowDef,\n    // Cell directives\n    MatHeaderCell,\n    MatCell,\n    MatFooterCell,\n    // Row directives\n    MatHeaderRow,\n    MatRow,\n    MatFooterRow,\n    MatNoDataRow,\n    MatTextColumn,\n];\nclass MatTableModule {\n}\nMatTableModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CdkTableModule,\n                    MatCommonModule,\n                ],\n                exports: [MatCommonModule, EXPORTED_DECLARATIONS],\n                declarations: EXPORTED_DECLARATIONS,\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n/** Shared base class with MDC-based implementation. */\nclass _MatTableDataSource extends DataSource {\n    constructor(initialData = []) {\n        super();\n        /** Stream emitting render data to the table (depends on ordered data changes). */\n        this._renderData = new BehaviorSubject([]);\n        /** Stream that emits when a new filter string is set on the data source. */\n        this._filter = new BehaviorSubject('');\n        /** Used to react to internal changes of the paginator that are made by the data source itself. */\n        this._internalPageChanges = new Subject();\n        /**\n         * Subscription to the changes that should trigger an update to the table's rendered rows, such\n         * as filtering, sorting, pagination, or base data changes.\n         */\n        this._renderChangesSubscription = null;\n        /**\n         * Data accessor function that is used for accessing data properties for sorting through\n         * the default sortData function.\n         * This default function assumes that the sort header IDs (which defaults to the column name)\n         * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n         * May be set to a custom function for different behavior.\n         * @param data Data object that is being accessed.\n         * @param sortHeaderId The name of the column that represents the data.\n         */\n        this.sortingDataAccessor = (data, sortHeaderId) => {\n            const value = data[sortHeaderId];\n            if (_isNumberValue(value)) {\n                const numberValue = Number(value);\n                // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n                // leave them as strings. For more info: https://goo.gl/y5vbSg\n                return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n            }\n            return value;\n        };\n        /**\n         * Gets a sorted copy of the data array based on the state of the MatSort. Called\n         * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n         * By default, the function retrieves the active sort and its direction and compares data\n         * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n         * of data ordering.\n         * @param data The array of data that should be sorted.\n         * @param sort The connected MatSort that holds the current sort state.\n         */\n        this.sortData = (data, sort) => {\n            const active = sort.active;\n            const direction = sort.direction;\n            if (!active || direction == '') {\n                return data;\n            }\n            return data.sort((a, b) => {\n                let valueA = this.sortingDataAccessor(a, active);\n                let valueB = this.sortingDataAccessor(b, active);\n                // If there are data in the column that can be converted to a number,\n                // it must be ensured that the rest of the data\n                // is of the same type so as not to order incorrectly.\n                const valueAType = typeof valueA;\n                const valueBType = typeof valueB;\n                if (valueAType !== valueBType) {\n                    if (valueAType === 'number') {\n                        valueA += '';\n                    }\n                    if (valueBType === 'number') {\n                        valueB += '';\n                    }\n                }\n                // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n                // one value exists while the other doesn't. In this case, existing value should come last.\n                // This avoids inconsistent results when comparing values to undefined/null.\n                // If neither value exists, return 0 (equal).\n                let comparatorResult = 0;\n                if (valueA != null && valueB != null) {\n                    // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n                    if (valueA > valueB) {\n                        comparatorResult = 1;\n                    }\n                    else if (valueA < valueB) {\n                        comparatorResult = -1;\n                    }\n                }\n                else if (valueA != null) {\n                    comparatorResult = 1;\n                }\n                else if (valueB != null) {\n                    comparatorResult = -1;\n                }\n                return comparatorResult * (direction == 'asc' ? 1 : -1);\n            });\n        };\n        /**\n         * Checks if a data object matches the data source's filter string. By default, each data object\n         * is converted to a string of its properties and returns true if the filter has\n         * at least one occurrence in that string. By default, the filter string has its whitespace\n         * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n         * filter matching.\n         * @param data Data object used to check against the filter.\n         * @param filter Filter string that has been set on the data source.\n         * @returns Whether the filter matches against the data\n         */\n        this.filterPredicate = (data, filter) => {\n            // Transform the data into a lowercase string of all property values.\n            const dataStr = Object.keys(data).reduce((currentTerm, key) => {\n                // Use an obscure Unicode character to delimit the words in the concatenated string.\n                // This avoids matches where the values of two columns combined will match the user's query\n                // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n                // that has a very low chance of being typed in by somebody in a text field. This one in\n                // particular is \"White up-pointing triangle with dot\" from\n                // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n                return currentTerm + data[key] + '◬';\n            }, '').toLowerCase();\n            // Transform the filter by converting it to lowercase and removing whitespace.\n            const transformedFilter = filter.trim().toLowerCase();\n            return dataStr.indexOf(transformedFilter) != -1;\n        };\n        this._data = new BehaviorSubject(initialData);\n        this._updateChangeSubscription();\n    }\n    /** Array of data that should be rendered by the table, where each object represents one row. */\n    get data() { return this._data.value; }\n    set data(data) {\n        this._data.next(data);\n        // Normally the `filteredData` is updated by the re-render\n        // subscription, but that won't happen if it's inactive.\n        if (!this._renderChangesSubscription) {\n            this._filterData(data);\n        }\n    }\n    /**\n     * Filter term that should be used to filter out objects from the data array. To override how\n     * data objects match to this filter string, provide a custom function for filterPredicate.\n     */\n    get filter() { return this._filter.value; }\n    set filter(filter) {\n        this._filter.next(filter);\n        // Normally the `filteredData` is updated by the re-render\n        // subscription, but that won't happen if it's inactive.\n        if (!this._renderChangesSubscription) {\n            this._filterData(this.data);\n        }\n    }\n    /**\n     * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n     * emitted by the MatSort will trigger an update to the table's rendered data.\n     */\n    get sort() { return this._sort; }\n    set sort(sort) {\n        this._sort = sort;\n        this._updateChangeSubscription();\n    }\n    /**\n     * Instance of the MatPaginator component used by the table to control what page of the data is\n     * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n     * table's rendered data.\n     *\n     * Note that the data source uses the paginator's properties to calculate which page of data\n     * should be displayed. If the paginator receives its properties as template inputs,\n     * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n     * initialized before assigning it to this data source.\n     */\n    get paginator() { return this._paginator; }\n    set paginator(paginator) {\n        this._paginator = paginator;\n        this._updateChangeSubscription();\n    }\n    /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with\n     * the provided base data and send it to the table for rendering.\n     */\n    _updateChangeSubscription() {\n        var _a;\n        // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n        // The events should emit whenever the component emits a change or initializes, or if no\n        // component is provided, a stream with just a null event should be provided.\n        // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n        // pipeline can progress to the next step. Note that the value from these streams are not used,\n        // they purely act as a signal to progress in the pipeline.\n        const sortChange = this._sort ?\n            merge(this._sort.sortChange, this._sort.initialized) :\n            of(null);\n        const pageChange = this._paginator ?\n            merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized) :\n            of(null);\n        const dataStream = this._data;\n        // Watch for base data or filter changes to provide a filtered set of data.\n        const filteredData = combineLatest([dataStream, this._filter])\n            .pipe(map(([data]) => this._filterData(data)));\n        // Watch for filtered data or sort changes to provide an ordered set of data.\n        const orderedData = combineLatest([filteredData, sortChange])\n            .pipe(map(([data]) => this._orderData(data)));\n        // Watch for ordered data or page changes to provide a paged set of data.\n        const paginatedData = combineLatest([orderedData, pageChange])\n            .pipe(map(([data]) => this._pageData(data)));\n        // Watched for paged data changes and send the result to the table to render.\n        (_a = this._renderChangesSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n        this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n    }\n    /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterTermAccessor function. If no filter is set, returns the data array\n     * as provided.\n     */\n    _filterData(data) {\n        // If there is a filter string, filter out data that does not contain it.\n        // Each data object is converted to a string using the function defined by filterTermAccessor.\n        // May be overridden for customization.\n        this.filteredData = (this.filter == null || this.filter === '') ? data :\n            data.filter(obj => this.filterPredicate(obj, this.filter));\n        if (this.paginator) {\n            this._updatePaginator(this.filteredData.length);\n        }\n        return this.filteredData;\n    }\n    /**\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     */\n    _orderData(data) {\n        // If there is no active sort or direction, return the data without trying to sort.\n        if (!this.sort) {\n            return data;\n        }\n        return this.sortData(data.slice(), this.sort);\n    }\n    /**\n     * Returns a paged slice of the provided data array according to the provided MatPaginator's page\n     * index and length. If there is no paginator provided, returns the data array as provided.\n     */\n    _pageData(data) {\n        if (!this.paginator) {\n            return data;\n        }\n        const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n        return data.slice(startIndex, startIndex + this.paginator.pageSize);\n    }\n    /**\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     */\n    _updatePaginator(filteredDataLength) {\n        Promise.resolve().then(() => {\n            const paginator = this.paginator;\n            if (!paginator) {\n                return;\n            }\n            paginator.length = filteredDataLength;\n            // If the page index is set beyond the page, reduce it to the last page.\n            if (paginator.pageIndex > 0) {\n                const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n                const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n                if (newPageIndex !== paginator.pageIndex) {\n                    paginator.pageIndex = newPageIndex;\n                    // Since the paginator only emits after user-generated changes,\n                    // we need our own stream so we know to should re-render the data.\n                    this._internalPageChanges.next();\n                }\n            }\n        });\n    }\n    /**\n     * Used by the MatTable. Called when it connects to the data source.\n     * @docs-private\n     */\n    connect() {\n        if (!this._renderChangesSubscription) {\n            this._updateChangeSubscription();\n        }\n        return this._renderData;\n    }\n    /**\n     * Used by the MatTable. Called when it disconnects from the data source.\n     * @docs-private\n     */\n    disconnect() {\n        var _a;\n        (_a = this._renderChangesSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n        this._renderChangesSubscription = null;\n    }\n}\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n */\nclass MatTableDataSource extends _MatTableDataSource {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatCell, MatCellDef, MatColumnDef, MatFooterCell, MatFooterCellDef, MatFooterRow, MatFooterRowDef, MatHeaderCell, MatHeaderCellDef, MatHeaderRow, MatHeaderRowDef, MatNoDataRow, MatRecycleRows, MatRow, MatRowDef, MatTable, MatTableDataSource, MatTableModule, MatTextColumn, _MatTableDataSource };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}