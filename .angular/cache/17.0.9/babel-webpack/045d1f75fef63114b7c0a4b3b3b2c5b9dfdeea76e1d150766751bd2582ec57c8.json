{"ast":null,"code":"/**\r\n * Slice module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Container } from \"../Container\";\nimport { Sprite } from \"../Sprite\";\nimport { registry } from \"../Registry\";\nimport * as $math from \"../utils/Math\";\nimport * as $path from \"../rendering/Path\";\nimport * as $type from \"../utils/Type\";\nimport * as $utils from \"../utils/Utils\";\nimport { Percent } from \"../utils/Percent\";\nimport { RadialGradient } from \"../rendering/fills/RadialGradient\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Draws a wedged semi-circle - slice. Usually used for Pie/Donut charts.\r\n *\r\n * @see {@link ISliceEvents} for a list of available events\r\n * @see {@link ISliceAdapters} for a list of available Adapters\r\n */\nvar Slice = /** @class */function (_super) {\n  __extends(Slice, _super);\n  /**\r\n   * Constructor\r\n   */\n  function Slice() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    _this.className = \"Slice\";\n    // Set defaults\n    _this.setPropertyValue(\"cornerRadius\", 0);\n    _this.setPropertyValue(\"startAngle\", 0);\n    _this.setPercentProperty(\"innerRadius\", 0);\n    _this.setPercentProperty(\"radius\", 0);\n    _this.setPropertyValue(\"arc\", 0);\n    _this.setPropertyValue(\"shiftRadius\", 0);\n    _this.strokeOpacity = 1;\n    _this.setPropertyValue(\"layout\", \"none\");\n    // Create a slice wedge element\n    _this.slice = _this.createChild(Sprite);\n    _this.slice.isMeasured = false;\n    _this._disposers.push(_this.slice);\n    //this.element.attr({ \"stroke-linejoin\": \"round\" });\n    //this.element.attr({ \"stroke-linecap\": \"round\" });\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  Slice.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n    var radiusY = this.radiusY;\n    if (this.radius > 0 && radiusY == 0) {\n      radiusY = 0.01;\n    }\n    this.slice.path = $path.arc(this.startAngle, this.arc, this.radius, this.pixelInnerRadius, radiusY, this.cornerRadius, this.innerCornerRadius);\n    this.slice.invalidate();\n    this.shiftRadius = this.shiftRadius;\n    if (this.realFill instanceof RadialGradient) {\n      this.updateGradient(this.realFill);\n    }\n    if (this.realStroke instanceof RadialGradient) {\n      this.updateGradient(this.realStroke);\n    }\n  };\n  Slice.prototype.updateGradient = function (gradient) {\n    gradient.element.attr({\n      \"gradientUnits\": \"userSpaceOnUse\"\n    });\n    gradient.element.attr({\n      \"r\": this.radius\n    });\n    gradient.cx = 0;\n    gradient.cy = 0;\n    gradient.element.attr({\n      radius: this.radius\n    });\n  };\n  Object.defineProperty(Slice.prototype, \"bbox\", {\n    /**\r\n     * Returns bounding box (square) for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    get: function () {\n      if (this.definedBBox) {\n        return this.definedBBox;\n      }\n      if (this.isMeasured) {\n        var innerRect = $math.getArcRect(this.startAngle, this.startAngle + this.arc, this.pixelInnerRadius);\n        var outerRect = $math.getArcRect(this.startAngle, this.startAngle + this.arc, this.radius);\n        return $math.getCommonRectangle([innerRect, outerRect]);\n      } else {\n        return {\n          x: 0,\n          y: 0,\n          width: 0,\n          height: 0\n        };\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"startAngle\", {\n    /**\r\n     * @return Angle (0-360)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startAngle\");\n    },\n    /**\r\n     * The angle at which left edge of the slice is drawn. (0-360)\r\n     *\r\n     * 0 is to the right of the center.\r\n     *\r\n     * @param value  Angle (0-360)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"arc\", {\n    /**\r\n     * @return [description]\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"arc\");\n    },\n    /**\r\n     * [arc description]\r\n     *\r\n     * @todo Description\r\n     * @param value [description]\r\n     */\n    set: function (value) {\n      if (!$type.isNumber(value)) {\n        value = 0;\n      }\n      this.setPropertyValue(\"arc\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"radius\", {\n    /**\r\n     * @return Radius (px)\r\n     */\n    get: function () {\n      var radius = this.getPropertyValue(\"radius\");\n      if (!$type.isNumber(radius)) {\n        radius = 0;\n      }\n      return radius;\n    },\n    /**\r\n     * Radius of the slice in pixels.\r\n     *\r\n     * @param value  Radius (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"radius\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"radiusY\", {\n    /**\r\n     * @return Vertical radius (0-1)\r\n     */\n    get: function () {\n      var value = this.getPropertyValue(\"radiusY\");\n      if (!$type.isNumber(value)) {\n        value = this.radius;\n      }\n      return value;\n    },\n    /**\r\n     * Vertical radius for creating skewed slices.\r\n     *\r\n     * This is relevant to `radius`, e.g. 0.5 will set vertical radius to half\r\n     * the `radius`.\r\n     *\r\n     * @param value Vertical radius (0-1)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"radiusY\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"innerRadius\", {\n    /**\r\n     * @return Radius (px or %)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n    /**\r\n     * Inner radius of the slice for creating cut out (donut) slices.\r\n     *\r\n     * @default 0\r\n     * @param value  Radius (px or %)\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"pixelInnerRadius\", {\n    /**\r\n     * @return Radius px\r\n     */\n    get: function () {\n      return $utils.relativeToValue(this.innerRadius, this.radius);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"cornerRadius\", {\n    /**\r\n     * @return Radius (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"cornerRadius\");\n    },\n    /**\r\n     * Radius of slice's outer corners in pixels.\r\n     *\r\n     * @default 0\r\n     * @param value  Radius (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"cornerRadius\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"innerCornerRadius\", {\n    /**\r\n     * @return Radius (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"innerCornerRadius\");\n    },\n    /**\r\n     * Radius of slice's inner corners in pixels.\r\n     *\r\n     * @default 0\r\n     * @param value  Radius (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"innerCornerRadius\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"shiftRadius\", {\n    /**\r\n     * @return Radius shift\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"shiftRadius\");\n    },\n    /**\r\n     * Indicates how far (relatively to center) a slice should be moved.\r\n     *\r\n     * The value is relative to the radius of the slice. Meaning 0 no shift,\r\n     * 1 - slice shifted outside by whole of its radius.\r\n     *\r\n     * @param  value  Radius shift\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"shiftRadius\", value);\n      value = this.getPropertyValue(\"shiftRadius\");\n      this.dx = value * this.radius * this.ix;\n      this.dy = value * this.radiusY * this.iy;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"ix\", {\n    /**\r\n     * [ix description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @return [description]\r\n     */\n    get: function () {\n      return $math.cos(this.middleAngle);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"iy\", {\n    /**\r\n     * [iy description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     * @return [description]\r\n     */\n    get: function () {\n      return $math.sin(this.middleAngle);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice.prototype, \"middleAngle\", {\n    /**\r\n     * An angle of the slice's middle.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Angle\r\n     */\n    get: function () {\n      return this.startAngle + this.arc / 2;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * X coordinate for the slice tooltip.\r\n   *\r\n   * @return X\r\n   */\n  Slice.prototype.getTooltipX = function () {\n    var value = this.getPropertyValue(\"tooltipX\");\n    if ($type.isNumber(value)) {\n      return value;\n    }\n    var p = 0.5;\n    if (value instanceof Percent) {\n      p = value.value;\n    }\n    var innerRadius = $utils.relativeToValue(this.innerRadius, this.radius);\n    return this.ix * (innerRadius + (this.radius - innerRadius) * p);\n  };\n  /**\r\n   * Y coordinate for the slice tooltip.\r\n   *\r\n   * @return Y\r\n   */\n  Slice.prototype.getTooltipY = function () {\n    var value = this.getPropertyValue(\"tooltipY\");\n    if ($type.isNumber(value)) {\n      return value;\n    }\n    var p = 0.5;\n    if (value instanceof Percent) {\n      p = value.value;\n    }\n    var innerRadius = $utils.relativeToValue(this.innerRadius, this.radius);\n    return this.iy * (innerRadius + (this.radius - innerRadius) * p) + this.slice.dy;\n  };\n  return Slice;\n}(Container);\nexport { Slice };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"Slice\"] = Slice;","map":{"version":3,"names":["__extends","Container","Sprite","registry","$math","$path","$type","$utils","Percent","RadialGradient","Slice","_super","_this","call","className","setPropertyValue","setPercentProperty","strokeOpacity","slice","createChild","isMeasured","_disposers","push","applyTheme","prototype","draw","radiusY","radius","path","arc","startAngle","pixelInnerRadius","cornerRadius","innerCornerRadius","invalidate","shiftRadius","realFill","updateGradient","realStroke","gradient","element","attr","cx","cy","Object","defineProperty","get","definedBBox","innerRect","getArcRect","outerRect","getCommonRectangle","x","y","width","height","enumerable","configurable","getPropertyValue","set","value","normalizeAngle","isNumber","relativeToValue","innerRadius","dx","ix","dy","iy","cos","middleAngle","sin","getTooltipX","p","getTooltipY","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/elements/Slice.js"],"sourcesContent":["/**\r\n * Slice module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container } from \"../Container\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport { Percent } from \"../utils/Percent\";\r\nimport { RadialGradient } from \"../rendering/fills/RadialGradient\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Draws a wedged semi-circle - slice. Usually used for Pie/Donut charts.\r\n *\r\n * @see {@link ISliceEvents} for a list of available events\r\n * @see {@link ISliceAdapters} for a list of available Adapters\r\n */\r\nvar Slice = /** @class */ (function (_super) {\r\n    __extends(Slice, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Slice() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"Slice\";\r\n        // Set defaults\r\n        _this.setPropertyValue(\"cornerRadius\", 0);\r\n        _this.setPropertyValue(\"startAngle\", 0);\r\n        _this.setPercentProperty(\"innerRadius\", 0);\r\n        _this.setPercentProperty(\"radius\", 0);\r\n        _this.setPropertyValue(\"arc\", 0);\r\n        _this.setPropertyValue(\"shiftRadius\", 0);\r\n        _this.strokeOpacity = 1;\r\n        _this.setPropertyValue(\"layout\", \"none\");\r\n        // Create a slice wedge element\r\n        _this.slice = _this.createChild(Sprite);\r\n        _this.slice.isMeasured = false;\r\n        _this._disposers.push(_this.slice);\r\n        //this.element.attr({ \"stroke-linejoin\": \"round\" });\r\n        //this.element.attr({ \"stroke-linecap\": \"round\" });\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Draws the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    Slice.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        var radiusY = this.radiusY;\r\n        if (this.radius > 0 && radiusY == 0) {\r\n            radiusY = 0.01;\r\n        }\r\n        this.slice.path = $path.arc(this.startAngle, this.arc, this.radius, this.pixelInnerRadius, radiusY, this.cornerRadius, this.innerCornerRadius);\r\n        this.slice.invalidate();\r\n        this.shiftRadius = this.shiftRadius;\r\n        if (this.realFill instanceof RadialGradient) {\r\n            this.updateGradient(this.realFill);\r\n        }\r\n        if (this.realStroke instanceof RadialGradient) {\r\n            this.updateGradient(this.realStroke);\r\n        }\r\n    };\r\n    Slice.prototype.updateGradient = function (gradient) {\r\n        gradient.element.attr({ \"gradientUnits\": \"userSpaceOnUse\" });\r\n        gradient.element.attr({ \"r\": this.radius });\r\n        gradient.cx = 0;\r\n        gradient.cy = 0;\r\n        gradient.element.attr({ radius: this.radius });\r\n    };\r\n    Object.defineProperty(Slice.prototype, \"bbox\", {\r\n        /**\r\n         * Returns bounding box (square) for this element.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        get: function () {\r\n            if (this.definedBBox) {\r\n                return this.definedBBox;\r\n            }\r\n            if (this.isMeasured) {\r\n                var innerRect = $math.getArcRect(this.startAngle, this.startAngle + this.arc, this.pixelInnerRadius);\r\n                var outerRect = $math.getArcRect(this.startAngle, this.startAngle + this.arc, this.radius);\r\n                return $math.getCommonRectangle([innerRect, outerRect]);\r\n            }\r\n            else {\r\n                return { x: 0, y: 0, width: 0, height: 0 };\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice.prototype, \"startAngle\", {\r\n        /**\r\n         * @return Angle (0-360)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startAngle\");\r\n        },\r\n        /**\r\n         * The angle at which left edge of the slice is drawn. (0-360)\r\n         *\r\n         * 0 is to the right of the center.\r\n         *\r\n         * @param value  Angle (0-360)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"startAngle\", $math.normalizeAngle(value), true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice.prototype, \"arc\", {\r\n        /**\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"arc\");\r\n        },\r\n        /**\r\n         * [arc description]\r\n         *\r\n         * @todo Description\r\n         * @param value [description]\r\n         */\r\n        set: function (value) {\r\n            if (!$type.isNumber(value)) {\r\n                value = 0;\r\n            }\r\n            this.setPropertyValue(\"arc\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice.prototype, \"radius\", {\r\n        /**\r\n         * @return Radius (px)\r\n         */\r\n        get: function () {\r\n            var radius = this.getPropertyValue(\"radius\");\r\n            if (!$type.isNumber(radius)) {\r\n                radius = 0;\r\n            }\r\n            return radius;\r\n        },\r\n        /**\r\n         * Radius of the slice in pixels.\r\n         *\r\n         * @param value  Radius (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"radius\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice.prototype, \"radiusY\", {\r\n        /**\r\n         * @return Vertical radius (0-1)\r\n         */\r\n        get: function () {\r\n            var value = this.getPropertyValue(\"radiusY\");\r\n            if (!$type.isNumber(value)) {\r\n                value = this.radius;\r\n            }\r\n            return value;\r\n        },\r\n        /**\r\n         * Vertical radius for creating skewed slices.\r\n         *\r\n         * This is relevant to `radius`, e.g. 0.5 will set vertical radius to half\r\n         * the `radius`.\r\n         *\r\n         * @param value Vertical radius (0-1)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"radiusY\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice.prototype, \"innerRadius\", {\r\n        /**\r\n         * @return Radius (px or %)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"innerRadius\");\r\n        },\r\n        /**\r\n         * Inner radius of the slice for creating cut out (donut) slices.\r\n         *\r\n         * @default 0\r\n         * @param value  Radius (px or %)\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice.prototype, \"pixelInnerRadius\", {\r\n        /**\r\n         * @return Radius px\r\n         */\r\n        get: function () {\r\n            return $utils.relativeToValue(this.innerRadius, this.radius);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice.prototype, \"cornerRadius\", {\r\n        /**\r\n         * @return Radius (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"cornerRadius\");\r\n        },\r\n        /**\r\n         * Radius of slice's outer corners in pixels.\r\n         *\r\n         * @default 0\r\n         * @param value  Radius (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"cornerRadius\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice.prototype, \"innerCornerRadius\", {\r\n        /**\r\n         * @return Radius (px)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"innerCornerRadius\");\r\n        },\r\n        /**\r\n         * Radius of slice's inner corners in pixels.\r\n         *\r\n         * @default 0\r\n         * @param value  Radius (px)\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"innerCornerRadius\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice.prototype, \"shiftRadius\", {\r\n        /**\r\n         * @return Radius shift\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"shiftRadius\");\r\n        },\r\n        /**\r\n         * Indicates how far (relatively to center) a slice should be moved.\r\n         *\r\n         * The value is relative to the radius of the slice. Meaning 0 no shift,\r\n         * 1 - slice shifted outside by whole of its radius.\r\n         *\r\n         * @param  value  Radius shift\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"shiftRadius\", value);\r\n            value = this.getPropertyValue(\"shiftRadius\");\r\n            this.dx = value * this.radius * this.ix;\r\n            this.dy = value * this.radiusY * this.iy;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice.prototype, \"ix\", {\r\n        /**\r\n         * [ix description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            return $math.cos(this.middleAngle);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice.prototype, \"iy\", {\r\n        /**\r\n         * [iy description]\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            return $math.sin(this.middleAngle);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Slice.prototype, \"middleAngle\", {\r\n        /**\r\n         * An angle of the slice's middle.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return Angle\r\n         */\r\n        get: function () {\r\n            return this.startAngle + this.arc / 2;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * X coordinate for the slice tooltip.\r\n     *\r\n     * @return X\r\n     */\r\n    Slice.prototype.getTooltipX = function () {\r\n        var value = this.getPropertyValue(\"tooltipX\");\r\n        if ($type.isNumber(value)) {\r\n            return value;\r\n        }\r\n        var p = 0.5;\r\n        if (value instanceof Percent) {\r\n            p = value.value;\r\n        }\r\n        var innerRadius = $utils.relativeToValue(this.innerRadius, this.radius);\r\n        return this.ix * (innerRadius + (this.radius - innerRadius) * p);\r\n    };\r\n    /**\r\n     * Y coordinate for the slice tooltip.\r\n     *\r\n     * @return Y\r\n     */\r\n    Slice.prototype.getTooltipY = function () {\r\n        var value = this.getPropertyValue(\"tooltipY\");\r\n        if ($type.isNumber(value)) {\r\n            return value;\r\n        }\r\n        var p = 0.5;\r\n        if (value instanceof Percent) {\r\n            p = value.value;\r\n        }\r\n        var innerRadius = $utils.relativeToValue(this.innerRadius, this.radius);\r\n        return this.iy * (innerRadius + (this.radius - innerRadius) * p) + this.slice.dy;\r\n    };\r\n    return Slice;\r\n}(Container));\r\nexport { Slice };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Slice\"] = Slice;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}