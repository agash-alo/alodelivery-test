{"ast":null,"code":"/**\r\n * ChordNode module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { FlowDiagramNode } from \"./FlowDiagramNode\";\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\nimport { registry } from \"../../core/Registry\";\nimport { Slice } from \"../../core/elements/Slice\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport { Bullet } from \"../elements/Bullet\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Creates a node in a Chord Diagram.\r\n *\r\n * A Chord node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[ChordLink]] elements.\r\n *\r\n * @see {@link IChordNodeEvents} for a list of available events\r\n * @see {@link IChordNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\nvar ChordNode = /** @class */function (_super) {\n  __extends(ChordNode, _super);\n  /**\r\n   * Constructor\r\n   */\n  function ChordNode() {\n    var _this = _super.call(this) || this;\n    _this.className = \"ChordNode\";\n    var label = _this.createChild(AxisLabelCircular);\n    label.location = 0.5;\n    label.radius = 5;\n    label.text = \"{name}\";\n    label.zIndex = 1;\n    label.shouldClone = false;\n    _this.label = label;\n    _this.layout = \"none\";\n    _this.events.on(\"positionchanged\", _this.updateRotation, _this, false);\n    _this.isMeasured = false;\n    _this.slice = _this.createChild(Slice);\n    _this.slice.isMeasured = false;\n    var hiddenState = _this.hiddenState;\n    hiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\n    hiddenState.properties.opacity = 0.5;\n    hiddenState.properties.visible = true;\n    _this.setStateOnChildren = false;\n    _this.slice.hiddenState.properties.visible = true;\n    _this.adapter.add(\"tooltipX\", function (tooltipX, target) {\n      return target.slice.ix * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\n    });\n    _this.adapter.add(\"tooltipY\", function (tooltipY, target) {\n      return target.slice.iy * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\n    });\n    return _this;\n  }\n  /**\r\n   * Invalidates all links, attached to this node.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  ChordNode.prototype.invalidateLinks = function () {\n    var _this = this;\n    _super.prototype.invalidateLinks.call(this);\n    var label = this.label;\n    var slice = this.slice;\n    var chart = this.chart;\n    if (chart && slice) {\n      var sum = this.total;\n      var arc_1 = slice.arc;\n      var sliceStartAngle_1 = slice.startAngle;\n      this.children.each(function (child) {\n        if (child instanceof Bullet) {\n          var locationX = child.locationX;\n          if (!$type.isNumber(locationX)) {\n            locationX = 0.5;\n          }\n          var locationY = child.locationY;\n          if (!$type.isNumber(locationY)) {\n            locationY = 1;\n          }\n          var childAngle = sliceStartAngle_1 + arc_1 * locationX;\n          var childRadius = locationY * slice.radius;\n          child.x = childRadius * $math.cos(childAngle);\n          child.y = childRadius * $math.sin(childAngle);\n        }\n      });\n      var labelAngle = sliceStartAngle_1 + arc_1 * label.location;\n      var startAngle = sliceStartAngle_1 + (1 - sum / this.adjustedTotal) * arc_1 * 0.5; // if value of a node is > then sum of the links, add to center link\n      if ($type.isNaN(startAngle)) {\n        startAngle = sliceStartAngle_1;\n      }\n      label.fixPosition(labelAngle, slice.radius);\n      this.nextAngle = startAngle;\n      if (this._outgoingSorted) {\n        $iter.each(this._outgoingSorted, function (dataItem) {\n          var link = dataItem.link;\n          link.parent = _this.chart.linksContainer;\n          var value = dataItem.getWorkingValue(\"value\");\n          if ($type.isNumber(value)) {\n            if (chart.nonRibbon) {\n              var percentWidth = link.percentWidth;\n              if (!$type.isNumber(percentWidth)) {\n                percentWidth = 5;\n              }\n              percentWidth = percentWidth / 100;\n              link.startAngle = sliceStartAngle_1 + arc_1 / 2 - arc_1 / 2 * percentWidth;\n              link.arc = arc_1 * percentWidth;\n            } else {\n              link.arc = value * chart.valueAngle;\n              link.startAngle = _this.nextAngle;\n              _this.nextAngle += link.arc;\n            }\n            if (!dataItem.toNode) {\n              link.endAngle = link.startAngle;\n            }\n            link.radius = slice.pixelInnerRadius;\n          }\n          //link.validate();\n        });\n      }\n\n      if (this._incomingSorted) {\n        $iter.each(this._incomingSorted, function (dataItem) {\n          var link = dataItem.link;\n          link.radius = slice.pixelInnerRadius;\n          if (chart.nonRibbon) {\n            var percentWidth = link.percentWidth;\n            if (!$type.isNumber(percentWidth)) {\n              percentWidth = 5;\n            }\n            percentWidth = percentWidth / 100;\n            link.endAngle = sliceStartAngle_1 + arc_1 / 2 - arc_1 / 2 * percentWidth;\n            link.arc = arc_1 * percentWidth;\n          } else {\n            link.endAngle = _this.nextAngle;\n            var value = dataItem.getWorkingValue(\"value\");\n            if ($type.isNumber(value)) {\n              link.arc = value * chart.valueAngle; // yes, this is needed\n              _this.nextAngle += link.arc;\n            }\n          }\n          if (!dataItem.fromNode) {\n            link.startAngle = link.endAngle;\n          }\n          //link.validate();\n        });\n      }\n    }\n  };\n  /**\r\n   * @ignore\r\n   * updates slice start angle so that when we drag a node it would face the center\r\n   */\n  ChordNode.prototype.updateRotation = function () {\n    var slice = this.slice;\n    var mAngle = this.trueStartAngle + slice.arc / 2;\n    var radius = slice.radius;\n    var tx = radius * $math.cos(mAngle);\n    var ty = radius * $math.sin(mAngle);\n    var angle = $math.getAngle({\n      x: tx + this.pixelX,\n      y: ty + this.pixelY\n    });\n    slice.startAngle = this.trueStartAngle + (angle - mAngle);\n    this.dx = -this.pixelX;\n    this.dy = -this.pixelY;\n  };\n  /**\r\n   * Copies properties and labels from another [[ChordNode]].\r\n   *\r\n   * @param source  Source node\r\n   */\n  ChordNode.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n    this.label.copyFrom(source.label);\n    this.slice.copyFrom(source.slice);\n  };\n  return ChordNode;\n}(FlowDiagramNode);\nexport { ChordNode };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"ChordNode\"] = ChordNode;","map":{"version":3,"names":["__extends","FlowDiagramNode","AxisLabelCircular","registry","Slice","InterfaceColorSet","$iter","$math","$type","Bullet","ChordNode","_super","_this","call","className","label","createChild","location","radius","text","zIndex","shouldClone","layout","events","on","updateRotation","isMeasured","slice","hiddenState","properties","fill","getFor","opacity","visible","setStateOnChildren","adapter","add","tooltipX","target","ix","pixelInnerRadius","tooltipY","iy","prototype","invalidateLinks","chart","sum","total","arc_1","arc","sliceStartAngle_1","startAngle","children","each","child","locationX","isNumber","locationY","childAngle","childRadius","x","cos","y","sin","labelAngle","adjustedTotal","isNaN","fixPosition","nextAngle","_outgoingSorted","dataItem","link","parent","linksContainer","value","getWorkingValue","nonRibbon","percentWidth","valueAngle","toNode","endAngle","_incomingSorted","fromNode","mAngle","trueStartAngle","tx","ty","angle","getAngle","pixelX","pixelY","dx","dy","copyFrom","source","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/charts/elements/ChordNode.js"],"sourcesContent":["/**\r\n * ChordNode module\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode } from \"./FlowDiagramNode\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a node in a Chord Diagram.\r\n *\r\n * A Chord node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[ChordLink]] elements.\r\n *\r\n * @see {@link IChordNodeEvents} for a list of available events\r\n * @see {@link IChordNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nvar ChordNode = /** @class */ (function (_super) {\r\n    __extends(ChordNode, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function ChordNode() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"ChordNode\";\r\n        var label = _this.createChild(AxisLabelCircular);\r\n        label.location = 0.5;\r\n        label.radius = 5;\r\n        label.text = \"{name}\";\r\n        label.zIndex = 1;\r\n        label.shouldClone = false;\r\n        _this.label = label;\r\n        _this.layout = \"none\";\r\n        _this.events.on(\"positionchanged\", _this.updateRotation, _this, false);\r\n        _this.isMeasured = false;\r\n        _this.slice = _this.createChild(Slice);\r\n        _this.slice.isMeasured = false;\r\n        var hiddenState = _this.hiddenState;\r\n        hiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n        hiddenState.properties.opacity = 0.5;\r\n        hiddenState.properties.visible = true;\r\n        _this.setStateOnChildren = false;\r\n        _this.slice.hiddenState.properties.visible = true;\r\n        _this.adapter.add(\"tooltipX\", function (tooltipX, target) {\r\n            return target.slice.ix * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n        });\r\n        _this.adapter.add(\"tooltipY\", function (tooltipY, target) {\r\n            return target.slice.iy * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n        });\r\n        return _this;\r\n    }\r\n    /**\r\n     * Invalidates all links, attached to this node.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    ChordNode.prototype.invalidateLinks = function () {\r\n        var _this = this;\r\n        _super.prototype.invalidateLinks.call(this);\r\n        var label = this.label;\r\n        var slice = this.slice;\r\n        var chart = this.chart;\r\n        if (chart && slice) {\r\n            var sum = this.total;\r\n            var arc_1 = slice.arc;\r\n            var sliceStartAngle_1 = slice.startAngle;\r\n            this.children.each(function (child) {\r\n                if (child instanceof Bullet) {\r\n                    var locationX = child.locationX;\r\n                    if (!$type.isNumber(locationX)) {\r\n                        locationX = 0.5;\r\n                    }\r\n                    var locationY = child.locationY;\r\n                    if (!$type.isNumber(locationY)) {\r\n                        locationY = 1;\r\n                    }\r\n                    var childAngle = sliceStartAngle_1 + arc_1 * locationX;\r\n                    var childRadius = locationY * slice.radius;\r\n                    child.x = childRadius * $math.cos(childAngle);\r\n                    child.y = childRadius * $math.sin(childAngle);\r\n                }\r\n            });\r\n            var labelAngle = sliceStartAngle_1 + arc_1 * label.location;\r\n            var startAngle = sliceStartAngle_1 + (1 - sum / this.adjustedTotal) * arc_1 * 0.5; // if value of a node is > then sum of the links, add to center link\r\n            if ($type.isNaN(startAngle)) {\r\n                startAngle = sliceStartAngle_1;\r\n            }\r\n            label.fixPosition(labelAngle, slice.radius);\r\n            this.nextAngle = startAngle;\r\n            if (this._outgoingSorted) {\r\n                $iter.each(this._outgoingSorted, function (dataItem) {\r\n                    var link = dataItem.link;\r\n                    link.parent = _this.chart.linksContainer;\r\n                    var value = dataItem.getWorkingValue(\"value\");\r\n                    if ($type.isNumber(value)) {\r\n                        if (chart.nonRibbon) {\r\n                            var percentWidth = link.percentWidth;\r\n                            if (!$type.isNumber(percentWidth)) {\r\n                                percentWidth = 5;\r\n                            }\r\n                            percentWidth = percentWidth / 100;\r\n                            link.startAngle = sliceStartAngle_1 + arc_1 / 2 - arc_1 / 2 * percentWidth;\r\n                            link.arc = arc_1 * percentWidth;\r\n                        }\r\n                        else {\r\n                            link.arc = value * chart.valueAngle;\r\n                            link.startAngle = _this.nextAngle;\r\n                            _this.nextAngle += link.arc;\r\n                        }\r\n                        if (!dataItem.toNode) {\r\n                            link.endAngle = link.startAngle;\r\n                        }\r\n                        link.radius = slice.pixelInnerRadius;\r\n                    }\r\n                    //link.validate();\r\n                });\r\n            }\r\n            if (this._incomingSorted) {\r\n                $iter.each(this._incomingSorted, function (dataItem) {\r\n                    var link = dataItem.link;\r\n                    link.radius = slice.pixelInnerRadius;\r\n                    if (chart.nonRibbon) {\r\n                        var percentWidth = link.percentWidth;\r\n                        if (!$type.isNumber(percentWidth)) {\r\n                            percentWidth = 5;\r\n                        }\r\n                        percentWidth = percentWidth / 100;\r\n                        link.endAngle = sliceStartAngle_1 + arc_1 / 2 - arc_1 / 2 * percentWidth;\r\n                        link.arc = arc_1 * percentWidth;\r\n                    }\r\n                    else {\r\n                        link.endAngle = _this.nextAngle;\r\n                        var value = dataItem.getWorkingValue(\"value\");\r\n                        if ($type.isNumber(value)) {\r\n                            link.arc = value * chart.valueAngle; // yes, this is needed\r\n                            _this.nextAngle += link.arc;\r\n                        }\r\n                    }\r\n                    if (!dataItem.fromNode) {\r\n                        link.startAngle = link.endAngle;\r\n                    }\r\n                    //link.validate();\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     * updates slice start angle so that when we drag a node it would face the center\r\n     */\r\n    ChordNode.prototype.updateRotation = function () {\r\n        var slice = this.slice;\r\n        var mAngle = this.trueStartAngle + slice.arc / 2;\r\n        var radius = slice.radius;\r\n        var tx = radius * $math.cos(mAngle);\r\n        var ty = radius * $math.sin(mAngle);\r\n        var angle = $math.getAngle({ x: tx + this.pixelX, y: ty + this.pixelY });\r\n        slice.startAngle = this.trueStartAngle + (angle - mAngle);\r\n        this.dx = -this.pixelX;\r\n        this.dy = -this.pixelY;\r\n    };\r\n    /**\r\n     * Copies properties and labels from another [[ChordNode]].\r\n     *\r\n     * @param source  Source node\r\n     */\r\n    ChordNode.prototype.copyFrom = function (source) {\r\n        _super.prototype.copyFrom.call(this, source);\r\n        this.label.copyFrom(source.label);\r\n        this.slice.copyFrom(source.slice);\r\n    };\r\n    return ChordNode;\r\n}(FlowDiagramNode));\r\nexport { ChordNode };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordNode\"] = ChordNode;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}