{"ast":null,"code":"/**\r\n * TreeMap chart module.\r\n *\r\n * Parts of the functionality used in this module are taken from D3.js library\r\n * (https://d3js.org/)\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { XYChart, XYChartDataItem } from \"./XYChart\";\nimport { registry } from \"../../core/Registry\";\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\nimport { ValueAxis } from \"../axes/ValueAxis\";\nimport { TreeMapSeries } from \"../series/TreeMapSeries\";\nimport { ColorSet } from \"../../core/utils/ColorSet\";\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $array from \"../../core/utils/Array\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines a [[DataItem]] for [[TreeMap]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar TreeMapDataItem = /** @class */function (_super) {\n  __extends(TreeMapDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function TreeMapDataItem() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Required for squarify functionality.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    _this.rows = [];\n    _this.className = \"TreeMapDataItem\";\n    _this.values.value = {\n      workingValue: 0\n    };\n    _this.values.x0 = {};\n    _this.values.y0 = {};\n    _this.values.x1 = {};\n    _this.values.y1 = {};\n    _this.hasChildren.children = true;\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(TreeMapDataItem.prototype, \"legendDataItem\", {\n    /**\r\n     * @return Legend data item\r\n     */\n    get: function () {\n      return this._legendDataItem;\n    },\n    /**\r\n     * A legend's data item, that corresponds to this data item.\r\n     *\r\n     * @param value  Legend data item\r\n     */\n    set: function (value) {\n      this._legendDataItem = value;\n      if (value.label) {\n        value.label.dataItem = this;\n      }\n      if (value.valueLabel) {\n        value.valueLabel.dataItem = this;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a duration (ms) the Data Item should take to animate from one\r\n   * value to another.\r\n   *\r\n   * If the duration is not specified via parameter, this method will try to\r\n   * request a default duration from the related `Component`.\r\n   *\r\n   * @param duration  Default duration (ms)\r\n   * @return Duration (ms)\r\n   */\n  TreeMapDataItem.prototype.getDuration = function () {\n    return 0;\n  };\n  Object.defineProperty(TreeMapDataItem.prototype, \"value\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      var value = 0;\n      if (!this.children || this.children.length == 0) {\n        value = this.values[\"value\"].workingValue;\n      } else {\n        $iter.each(this.children.iterator(), function (child) {\n          var childValue = child.value;\n          if ($type.isNumber(childValue)) {\n            value += childValue;\n          }\n        });\n      }\n      return value;\n      /*\r\n      let value = this.values[\"value\"].workingValue;\r\n            if (!$type.isNumber(value)) {\r\n          value = 0;\r\n          if (this.children) {\r\n              $iter.each(this.children.iterator(), (child) => {\r\n                  if ($type.isNumber(child.value)) {\r\n                      value += child.value;\r\n                  }\r\n              });\r\n          }\r\n      }\r\n      return value;*/\n    },\n\n    /**\r\n     * Numeric value of the item.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function (value) {\n      this.setValue(\"value\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"percent\", {\n    /**\r\n     * Percent value of a node\r\n     */\n    get: function () {\n      if (this.parent) {\n        return this.value / this.parent.value * 100;\n      }\n      return 100;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"x0\", {\n    /**\r\n     * @return X\r\n     */\n    get: function () {\n      return this.values.x0.value;\n    },\n    /**\r\n     * Item's X position.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param value  X\r\n     */\n    set: function (value) {\n      this.setValue(\"x0\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"x1\", {\n    /**\r\n     * @return X\r\n     */\n    get: function () {\n      return this.values.x1.value;\n    },\n    /**\r\n     * Item's X position.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param value  X\r\n     */\n    set: function (value) {\n      this.setValue(\"x1\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"y0\", {\n    /**\r\n     * @return Y\r\n     */\n    get: function () {\n      return this.values.y0.value;\n    },\n    /**\r\n     * Item's Y position.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param value  Y\r\n     */\n    set: function (value) {\n      this.setValue(\"y0\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"y1\", {\n    /**\r\n     * @return Y\r\n     */\n    get: function () {\n      return this.values.y1.value;\n    },\n    /**\r\n     * Item's Y position.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param value  Y\r\n     */\n    set: function (value) {\n      this.setValue(\"y1\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"name\", {\n    /**\r\n     * @return Name\r\n     */\n    get: function () {\n      return this.properties.name;\n    },\n    /**\r\n     * Item's name.\r\n     *\r\n     * @param name  Name\r\n     */\n    set: function (name) {\n      this.setProperty(\"name\", name);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"children\", {\n    /**\r\n     * @return Item's children\r\n     */\n    get: function () {\n      return this.properties.children;\n    },\n    /**\r\n     * A list of item's sub-children.\r\n     *\r\n     * Having children means that the TreeMap chat will automatically be\r\n     * \"drillable\". Clicking on an item with children will zoom to the item, then\r\n     * display its children.\r\n     *\r\n     * Treemap can have any level of nesting.\r\n     *\r\n     * @param children  Item's children\r\n     */\n    set: function (children) {\n      this.setProperty(\"children\", children);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"level\", {\n    /**\r\n     * Depth level in the treemap hierarchy.\r\n     *\r\n     * The top-level item will have level set at 0. Its children will have\r\n     * level 1, and so on.\r\n     *\r\n     * @readonly\r\n     * @return Level\r\n     */\n    get: function () {\n      if (!this.parent) {\n        return 0;\n      } else {\n        return this.parent.level + 1;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"color\", {\n    /**\r\n     * @return Color\r\n     */\n    get: function () {\n      var color = this.properties.color;\n      if (color == undefined) {\n        if (this.parent) {\n          color = this.parent.color;\n        }\n      }\n      if (color == undefined) {\n        if (this.component) {\n          color = this.component.colors.getIndex(this.component.colors.step * this.index);\n        }\n      }\n      return color;\n    },\n    /**\r\n     * Item's color.\r\n     *\r\n     * If not set, will use parent's color, or, if that is not set either,\r\n     * automatically assigned color from chart's color set. (`chart.colors`)\r\n     *\r\n     * @param value  Color\r\n     */\n    set: function (value) {\n      this.setProperty(\"color\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"fill\", {\n    /**\r\n     * @ignore\r\n     * For the legend to work properly\r\n     */\n    get: function () {\n      return this.color;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"series\", {\n    get: function () {\n      return this._series;\n    },\n    /**\r\n     * Series of children data items\r\n     * @todo: proper descrition\r\n     */\n    set: function (series) {\n      if (series != this._series) {\n        if (this._series) {\n          this.component.series.removeValue(this._series);\n          this._series.dispose();\n        }\n        this._series = series;\n        this._disposers.push(series);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Hides the Data Item and related visual elements.\r\n   *\r\n   * @param duration  Animation duration (ms)\r\n   * @param delay     Delay animation (ms)\r\n   * @param toValue   A value to set to `fields` when hiding\r\n   * @param fields    A list of data fields to set value to `toValue`\r\n   */\n  TreeMapDataItem.prototype.hide = function (duration, delay, toValue, fields) {\n    this.setWorkingValue(\"value\", 0);\n    if (this.children) {\n      this.children.each(function (child) {\n        child.hide(duration, delay, toValue, fields);\n      });\n    }\n    var seriesDataItem = this.seriesDataItem;\n    if (seriesDataItem) {\n      seriesDataItem.bullets.each(function (key, value) {\n        value.hide();\n        value.preventShow = true;\n      });\n    }\n    return _super.prototype.hide.call(this, duration, delay, toValue, fields);\n  };\n  /**\r\n   * Shows the Data Item and related visual elements.\r\n   *\r\n   * @param duration  Animation duration (ms)\r\n   * @param delay     Delay animation (ms)\r\n   * @param fields    A list of fields to set values of\r\n   */\n  TreeMapDataItem.prototype.show = function (duration, delay, fields) {\n    this.setWorkingValue(\"value\", this.values.value.value);\n    if (this.children) {\n      this.children.each(function (child) {\n        child.show(duration, delay, fields);\n      });\n    }\n    var seriesDataItem = this.seriesDataItem;\n    if (seriesDataItem) {\n      seriesDataItem.bullets.each(function (key, value) {\n        value.preventShow = false;\n      });\n    }\n    return _super.prototype.show.call(this, duration, delay, fields);\n  };\n  return TreeMapDataItem;\n}(XYChartDataItem);\nexport { TreeMapDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Creates a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapEvents} for a list of available Events\r\n * @see {@link ITreeMapAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/} for documentation\r\n */\nvar TreeMap = /** @class */function (_super) {\n  __extends(TreeMap, _super);\n  /**\r\n   * Constructor\r\n   */\n  function TreeMap() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    /**\r\n     * An algorithm used to divide area into squares based on their value.\r\n     *\r\n     * Available options: squarify (default), binaryTree, slice, dice, sliceDice.\r\n     *\r\n     * ```TypeScript\r\n     * chart.layoutAlgorithm = chart.sliceDice;\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.layoutAlgorithm = chart.sliceDice;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"layoutAlgorithm\": \"sliceDice\",\r\n     *   // ...\r\n     * }\r\n     * ```\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/#Area_division_methods} For more info and examples.\r\n     * @default squarify\r\n     */\n    _this.layoutAlgorithm = _this.squarify;\n    /**\r\n     * Is the chart zoomable?\r\n     *\r\n     * If the chart is `zoomable`, and items have sub-items, the chart will\r\n     * drill-down to sub-items when click on their parent item.\r\n     *\r\n     * @default true\r\n     */\n    _this.zoomable = true;\n    _this.className = \"TreeMap\";\n    _this._usesData = true;\n    _this.maxLevels = 2;\n    _this.currentLevel = 0;\n    _this.hideParentColumns = false;\n    _this.colors = new ColorSet();\n    _this.sorting = \"descending\";\n    // create two value axes for the chart\n    var xAxis = _this.xAxes.push(new ValueAxis());\n    xAxis.title.disabled = true;\n    xAxis.strictMinMax = true;\n    var xRenderer = xAxis.renderer;\n    xRenderer.inside = true;\n    xRenderer.labels.template.disabled = true;\n    xRenderer.ticks.template.disabled = true;\n    xRenderer.grid.template.disabled = true;\n    xRenderer.axisFills.template.disabled = true;\n    xRenderer.minGridDistance = 100;\n    xRenderer.line.disabled = true;\n    xRenderer.baseGrid.disabled = true;\n    //xRenderer.inversed = true;\n    var yAxis = _this.yAxes.push(new ValueAxis());\n    yAxis.title.disabled = true;\n    yAxis.strictMinMax = true;\n    var yRenderer = yAxis.renderer;\n    yRenderer.inside = true;\n    yRenderer.labels.template.disabled = true;\n    yRenderer.ticks.template.disabled = true;\n    yRenderer.grid.template.disabled = true;\n    yRenderer.axisFills.template.disabled = true;\n    yRenderer.minGridDistance = 100;\n    yRenderer.line.disabled = true;\n    yRenderer.baseGrid.disabled = true;\n    yRenderer.inversed = true;\n    // shortcuts\n    _this.xAxis = xAxis;\n    _this.yAxis = yAxis;\n    var template = new TreeMapSeries();\n    _this.seriesTemplates = new DictionaryTemplate(template);\n    template.virtualParent = _this;\n    _this._disposers.push(new DictionaryDisposer(_this.seriesTemplates));\n    _this._disposers.push(template);\n    _this.zoomOutButton.events.on(\"hit\", function () {\n      _this.zoomToChartDataItem(_this._homeDataItem);\n    }, undefined, false);\n    _this.seriesTemplates.events.on(\"insertKey\", function (event) {\n      event.newValue.isTemplate = true;\n    }, undefined, false);\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(TreeMap.prototype, \"navigationBar\", {\n    /**\r\n     * Returns navigationBar if it is added to a chart\r\n     */\n    get: function () {\n      return this._navigationBar;\n    },\n    /**\r\n     * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n     * drill-down path.\r\n     */\n    set: function (navigationBar) {\n      var _this = this;\n      if (this._navigationBar != navigationBar) {\n        this._navigationBar = navigationBar;\n        navigationBar.parent = this;\n        navigationBar.toBack();\n        navigationBar.links.template.events.on(\"hit\", function (event) {\n          var dataItem = event.target.dataItem.dataContext;\n          if (!dataItem.isDisposed()) {\n            _this.zoomToChartDataItem(dataItem);\n            _this.createTreeSeries(dataItem);\n          }\n        }, undefined, true);\n        this._disposers.push(navigationBar);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * (Re)validates chart's data.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  TreeMap.prototype.validateData = function () {\n    this.series.clear();\n    this._tempSeries = [];\n    _super.prototype.validateData.call(this);\n    if (this._homeDataItem) {\n      this._homeDataItem.dispose();\n    }\n    var homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\n    this._homeDataItem = homeDataItem;\n    $iter.each(this.dataItems.iterator(), function (dataItem) {\n      dataItem.parent = homeDataItem;\n    });\n    homeDataItem.children = this.dataItems;\n    homeDataItem.x0 = 0;\n    homeDataItem.y0 = 0;\n    homeDataItem.name = this._homeText;\n    var maxX = 1000;\n    var maxY = Math.round(maxX * this.pixelHeight / this.pixelWidth / 10) * 10 || 1000;\n    homeDataItem.x1 = maxX;\n    homeDataItem.y1 = maxY;\n    this.xAxis.min = 0;\n    this.xAxis.max = maxX;\n    this.xAxis.getMinMax();\n    this.yAxis.min = 0;\n    this.yAxis.max = maxY;\n    this.yAxis.getMinMax();\n    this.layoutItems(homeDataItem);\n    this.createTreeSeries(homeDataItem);\n    this.feedLegend();\n  };\n  /**\r\n   * Layouts and sizes all items according to their value and\r\n   * `layoutAlgorithm`.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param parent  Parent data item\r\n   */\n  TreeMap.prototype.layoutItems = function (parent, sorting) {\n    if (parent) {\n      var children = parent.children;\n      if (!sorting) {\n        sorting = this.sorting;\n      }\n      if (sorting == \"ascending\") {\n        children.values.sort(function (a, b) {\n          return a.value - b.value;\n        });\n      }\n      if (sorting == \"descending\") {\n        children.values.sort(function (a, b) {\n          return b.value - a.value;\n        });\n      }\n      this._updateDataItemIndexes(0);\n      this.layoutAlgorithm(parent);\n      for (var i = 0, len = children.length; i < len; i++) {\n        var node = children.getIndex(i);\n        if (node.children) {\n          this.layoutItems(node);\n        }\n      }\n    }\n  };\n  /**\r\n   * Creates and returns a new treemap series.\r\n   *\r\n   * @todo Description\r\n   * @param dataItem  Data item to create series out of\r\n   */\n  TreeMap.prototype.createTreeSeries = function (dataItem) {\n    var _this = this;\n    this._tempSeries = [];\n    var navigationData = [dataItem];\n    // create parent series and navigation data\n    var parentDataItem = dataItem.parent;\n    while (parentDataItem != undefined) {\n      this.initSeries(parentDataItem);\n      navigationData.push(parentDataItem);\n      parentDataItem = parentDataItem.parent;\n    }\n    navigationData.reverse();\n    if (this.navigationBar) {\n      this.navigationBar.data = navigationData;\n    }\n    // create series and children series\n    this.createTreeSeriesReal(dataItem);\n    // add those which are not in the list\n    $array.each(this._tempSeries, function (series) {\n      if (_this.series.indexOf(series) == -1) {\n        _this.series.push(series);\n      }\n      series.zIndex = series.level;\n    });\n  };\n  /**\r\n   * [createTreeSeriesReal description]\r\n   *\r\n   * @todo Description\r\n   * @param dataItem [description]\r\n   */\n  TreeMap.prototype.createTreeSeriesReal = function (dataItem) {\n    if (dataItem.children) {\n      var level = dataItem.level;\n      if (level < this.currentLevel + this.maxLevels) {\n        this.initSeries(dataItem);\n        for (var i = 0; i < dataItem.children.length; i++) {\n          var child = dataItem.children.getIndex(i);\n          if (child.children) {\n            this.createTreeSeriesReal(child);\n          }\n        }\n      }\n    }\n  };\n  TreeMap.prototype.setData = function (value) {\n    this.currentLevel = 0;\n    this.currentlyZoomed = undefined;\n    this.xAxis.start = 0;\n    this.xAxis.end = 1;\n    this.yAxis.start = 0;\n    this.yAxis.end = 1;\n    _super.prototype.setData.call(this, value);\n  };\n  /**\r\n   * @ignore\r\n   * Overriding, as tree map series are created on the fly all the time\r\n   */\n  TreeMap.prototype.seriesAppeared = function () {\n    return true;\n  };\n  /**\r\n   * Initializes the treemap series.\r\n   *\r\n   * @todo Description\r\n   * @param dataItem  Chart data item\r\n   */\n  TreeMap.prototype.initSeries = function (dataItem) {\n    var _this = this;\n    if (!dataItem.series) {\n      var series = void 0;\n      var template = this.seriesTemplates.getKey(dataItem.level.toString());\n      if (template) {\n        series = template.clone();\n      } else {\n        series = this.series.create();\n      }\n      // for the legend to get {value}\n      series.dataItem.dataContext = dataItem;\n      series.name = dataItem.name;\n      series.parentDataItem = dataItem;\n      dataItem.series = series;\n      var level = dataItem.level;\n      series.level = level;\n      var dataContext = dataItem.dataContext;\n      if (dataContext) {\n        series.config = dataContext.config;\n      }\n      this.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it\n      series.data = dataItem.children.values;\n      series.fill = dataItem.color;\n      series.columnsContainer.hide(0);\n      series.bulletsContainer.hide(0);\n      series.columns.template.adapter.add(\"fill\", function (fill, target) {\n        var dataItem = target.dataItem;\n        if (dataItem) {\n          var treeMapDataItem = dataItem.treeMapDataItem;\n          if (treeMapDataItem) {\n            target.fill = treeMapDataItem.color;\n            target.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\n            return treeMapDataItem.color;\n          }\n        }\n      });\n      if (this.zoomable && (dataItem.level > this.currentLevel || dataItem.children && dataItem.children.length > 0)) {\n        series.columns.template.cursorOverStyle = MouseCursorStyle.pointer;\n        if (this.zoomable) {\n          series.columns.template.events.on(\"hit\", function (event) {\n            var seriesDataItem = event.target.dataItem;\n            if (dataItem.level > _this.currentLevel) {\n              _this.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);\n            } else {\n              _this.zoomToSeriesDataItem(seriesDataItem);\n            }\n          }, this, undefined);\n        }\n      }\n    }\n    this._tempSeries.push(dataItem.series);\n  };\n  /**\r\n   * Toggles bullets so that labels that belong to current drill level are\r\n   * shown.\r\n   *\r\n   * @param duration  Animation duration (ms)\r\n   */\n  TreeMap.prototype.toggleBullets = function (duration) {\n    var _this = this;\n    // hide all series which are not in tempSeries\n    $iter.each(this.series.iterator(), function (series) {\n      if (_this._tempSeries.indexOf(series) == -1) {\n        //series.hideReal(duration);\n        series.columnsContainer.hide();\n        series.bulletsContainer.hide(duration);\n      } else {\n        //series.showReal(duration);\n        series.columnsContainer.show();\n        series.bulletsContainer.show(duration);\n        series.dataItems.each(function (dataItem) {\n          dataItem.bullets.each(function (key, bullet) {\n            bullet.show();\n          });\n        });\n        if (series.level < _this.currentLevel) {\n          if (_this.hideParentColumns) {\n            series.columnsContainer.hide();\n          }\n          series.bulletsContainer.hide(duration);\n        } else if (series.level == _this.currentLevel) {\n          if (_this.maxLevels > 1) {\n            series.dataItems.each(function (dataItem) {\n              if (dataItem.treeMapDataItem.children) {\n                dataItem.bullets.each(function (key, bullet) {\n                  bullet.hide();\n                });\n              }\n            });\n          }\n        }\n      }\n    });\n  };\n  /**\r\n   * Zooms to particular item in series.\r\n   *\r\n   * @param dataItem  Data item\r\n   */\n  TreeMap.prototype.zoomToSeriesDataItem = function (dataItem) {\n    this.zoomToChartDataItem(dataItem.treeMapDataItem);\n  };\n  /**\r\n   * Zooms to particular item. If dataItem is not specified, the chart will zoom-out.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n  TreeMap.prototype.zoomToChartDataItem = function (dataItem) {\n    var _this = this;\n    if (!dataItem) {\n      dataItem = this._homeDataItem;\n    }\n    var zoomOutButton = this.zoomOutButton;\n    // this is needed because if there is only one fist level, it won't be shown\n    if (zoomOutButton) {\n      if (dataItem != this._homeDataItem) {\n        zoomOutButton.show();\n      } else {\n        zoomOutButton.hide();\n      }\n    }\n    if (dataItem && dataItem.children) {\n      this.xAxis.zoomToValues(dataItem.x0, dataItem.x1);\n      this.yAxis.zoomToValues(dataItem.y0, dataItem.y1);\n      this.currentLevel = dataItem.level;\n      this.currentlyZoomed = dataItem;\n      this.createTreeSeries(dataItem);\n      var rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;\n      if (rangeChangeAnimation && !rangeChangeAnimation.isDisposed() && !rangeChangeAnimation.isFinished()) {\n        this._dataDisposers.push(rangeChangeAnimation);\n        rangeChangeAnimation.events.once(\"animationended\", function () {\n          _this.toggleBullets();\n        });\n      } else {\n        this.toggleBullets();\n      }\n    }\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n  TreeMap.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n    // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"TreeMap chart\");\n    }\n    //this.homeText = this.language.translate(\"Home\");\n  };\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n  TreeMap.prototype.createDataItem = function () {\n    return new TreeMapDataItem();\n  };\n  Object.defineProperty(TreeMap.prototype, \"maxLevels\", {\n    /**\r\n     * @return Maximum drill-down level\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxLevels\");\n    },\n    /**\r\n     * Maximum number of levels the chart will display initially.\r\n     *\r\n     * @default 2\r\n     * @param value  Maximum drill-down level\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"maxLevels\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMap.prototype, \"currentLevel\", {\n    /**\r\n     * @return Current level\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"currentLevel\");\n    },\n    /**\r\n     * Current drill-down level the chart is at.\r\n     *\r\n     * @param value  Current level\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"currentLevel\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMap.prototype, \"hideParentColumns\", {\n    /**\r\n     * @return Hide?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"hideParentColumns\");\n    },\n    /**\r\n     * If set to `true`, columns of parent nodes will be hidden when user\r\n     * drills-down into deeper levels.\r\n     *\r\n     * @sice 4.7.4\r\n     * @default false\r\n     * @param  value  Hide?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"hideParentColumns\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMap.prototype, \"sorting\", {\n    get: function () {\n      return this.getPropertyValue(\"sorting\");\n    },\n    /**\r\n     * Sorting direction of treemap items.\r\n     *\r\n     * Available options: \"none\", \"ascending\", and \"descending\" (default).\r\n     *\r\n     * @default \"descending\"\r\n     * @param value [description]\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"sorting\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates and returns a new series of the suitable type.\r\n   *\r\n   * @return new series\r\n   */\n  TreeMap.prototype.createSeries = function () {\n    return new TreeMapSeries();\n  };\n  Object.defineProperty(TreeMap.prototype, \"homeText\", {\n    /**\r\n     * @return Home text\r\n     */\n    get: function () {\n      return this._homeText;\n    },\n    /**\r\n     * A text displayed on the \"home\" button which is used to go back to level 0\r\n     * after drill into sub-items.\r\n     *\r\n     * @param value  Home text\r\n     */\n    set: function (value) {\n      this._homeText = value;\n      if (this._homeDataItem) {\n        this._homeDataItem.name = this._homeText;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n  TreeMap.prototype.processConfig = function (config) {\n    if (config) {\n      // Instantiate layout algorithm\n      if ($type.hasValue(config[\"layoutAlgorithm\"]) && $type.isString(config[\"layoutAlgorithm\"])) {\n        switch (config[\"layoutAlgorithm\"]) {\n          case \"squarify\":\n            config[\"layoutAlgorithm\"] = this.squarify;\n            break;\n          case \"binaryTree\":\n            config[\"layoutAlgorithm\"] = this.binaryTree;\n            break;\n          case \"slice\":\n            config[\"layoutAlgorithm\"] = this.slice;\n            break;\n          case \"dice\":\n            config[\"layoutAlgorithm\"] = this.dice;\n            break;\n          case \"sliceDice\":\n            config[\"layoutAlgorithm\"] = this.sliceDice;\n            break;\n          default:\n            delete config[\"layoutAlgorithm\"];\n            break;\n        }\n      }\n      // Set type for navigation bar\n      if ($type.hasValue(config.navigationBar) && !$type.hasValue(config.navigationBar.type)) {\n        config.navigationBar.type = \"NavigationBar\";\n      }\n      _super.prototype.processConfig.call(this, config);\n    }\n  };\n  /**\r\n   * Measures the size of container and informs its children of how much size\r\n   * they can occupy, by setting their relative `maxWidth` and `maxHeight`\r\n   * properties.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  TreeMap.prototype.validateLayout = function () {\n    _super.prototype.validateLayout.call(this);\n    this.layoutItems(this.currentlyZoomed);\n  };\n  /**\r\n   * Validates (processes) data items.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  TreeMap.prototype.validateDataItems = function () {\n    _super.prototype.validateDataItems.call(this);\n    this.layoutItems(this._homeDataItem);\n    $iter.each(this.series.iterator(), function (series) {\n      series.validateRawData();\n    });\n    this.zoomToChartDataItem(this._homeDataItem);\n  };\n  /**\r\n   * ==========================================================================\r\n   * TREEMAP LAYOUT FUNCTIONS\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n  /**\r\n   * The functions below are from D3.js library (https://d3js.org/)\r\n   *\r\n   * --------------------------------------------------------------------------\r\n   * Copyright 2017 Mike Bostock\r\n   *\r\n   * Redistribution and use in source and binary forms, with or without\r\n   * modification, are permitted provided that the following conditions are met:\r\n   *\r\n   * 1. Redistributions of source code must retain the above copyright notice,\r\n   *    this list of conditions and the following disclaimer.\r\n   *\r\n   * 2. Redistributions in binary form must reproduce the above copyright\r\n   *    notice,this list of conditions and the following disclaimer in the\r\n   *    documentation and/or other materials provided with the distribution.\r\n   *\r\n   * 3. Neither the name of the copyright holder nor the names of its\r\n   *    contributors may be used to endorse or promote products derived from\r\n   *    this software without specific prior written permission.\r\n   *\r\n   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n   * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n   * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n   * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n   * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n   * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n   * POSSIBILITY OF SUCH DAMAGE.\r\n   * --------------------------------------------------------------------------\r\n   * @hidden\r\n   */\n  /**\r\n   * Treemap layout algorithm: binaryTree.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param parent  Data item\r\n   */\n  TreeMap.prototype.binaryTree = function (parent) {\n    var nodes = parent.children,\n      i,\n      n = nodes.length,\n      sum,\n      sums = new Array(n + 1);\n    for (sums[0] = sum = i = 0; i < n; ++i) {\n      sums[i + 1] = sum += nodes.getIndex(i).value;\n    }\n    if (n > 0) {\n      partition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);\n    }\n    function partition(i, j, value, x0, y0, x1, y1) {\n      if (i >= j - 1) {\n        var node = nodes.getIndex(i);\n        node.x0 = x0;\n        node.y0 = y0;\n        node.x1 = x1;\n        node.y1 = y1;\n        return;\n      }\n      var valueOffset = sums[i],\n        valueTarget = value / 2 + valueOffset,\n        k = i + 1,\n        hi = j - 1;\n      while (k < hi) {\n        var mid = k + hi >>> 1;\n        if (sums[mid] < valueTarget) {\n          k = mid + 1;\n        } else {\n          hi = mid;\n        }\n      }\n      if (valueTarget - sums[k - 1] < sums[k] - valueTarget && i + 1 < k) {\n        --k;\n      }\n      var valueLeft = sums[k] - valueOffset,\n        valueRight = value - valueLeft;\n      if (value == 0) {\n        var node = nodes.getIndex(i);\n        node.x0 = x0;\n        node.y0 = y0;\n        node.x1 = x1;\n        node.y1 = y1;\n        return;\n      }\n      if (x1 - x0 > y1 - y0) {\n        var xk = (x0 * valueRight + x1 * valueLeft) / value;\n        partition(i, k, valueLeft, x0, y0, xk, y1);\n        partition(k, j, valueRight, xk, y0, x1, y1);\n      } else {\n        var yk = (y0 * valueRight + y1 * valueLeft) / value;\n        partition(i, k, valueLeft, x0, y0, x1, yk);\n        partition(k, j, valueRight, x0, yk, x1, y1);\n      }\n    }\n  };\n  /**\r\n   * Treemap layout algorithm: slice.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param parent  Data item\r\n   */\n  TreeMap.prototype.slice = function (parent) {\n    var x0 = parent.x0;\n    var x1 = parent.x1;\n    var y0 = parent.y0;\n    var y1 = parent.y1;\n    var nodes = parent.children;\n    var node;\n    var i = -1;\n    var n = nodes.length;\n    var k = parent.value && (y1 - y0) / parent.value;\n    while (++i < n) {\n      node = nodes.getIndex(i);\n      node.x0 = x0;\n      node.x1 = x1;\n      node.y0 = y0;\n      y0 += node.value * k;\n      node.y1 = y0;\n    }\n  };\n  /**\r\n   * Treemap layout algorithm: dice.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param parent  Data item\r\n   */\n  TreeMap.prototype.dice = function (parent) {\n    var x0 = parent.x0;\n    var x1 = parent.x1;\n    var y0 = parent.y0;\n    var y1 = parent.y1;\n    var nodes = parent.children,\n      node,\n      i = -1,\n      n = nodes.length,\n      k = parent.value && (x1 - x0) / parent.value;\n    while (++i < n) {\n      node = nodes.getIndex(i);\n      node.y0 = y0;\n      node.y1 = y1;\n      node.x0 = x0;\n      x0 += node.value * k;\n      node.x1 = x0;\n    }\n  };\n  /**\r\n   * Treemap layout algorithm: slideDice.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param parent  Data item\r\n   */\n  TreeMap.prototype.sliceDice = function (parent) {\n    if (parent.level & 1) {\n      this.slice(parent);\n    } else {\n      this.dice(parent);\n    }\n  };\n  /**\r\n   * Treemap layout algorithm: squarify.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param parent  Data item\r\n   */\n  TreeMap.prototype.squarify = function (parent) {\n    var ratio = (1 + Math.sqrt(5)) / 2;\n    var x0 = parent.x0;\n    var x1 = parent.x1;\n    var y0 = parent.y0;\n    var y1 = parent.y1;\n    var nodes = parent.children;\n    var nodeValue;\n    var i0 = 0;\n    var i1 = 0;\n    var n = nodes.length;\n    var dx;\n    var dy;\n    var value = parent.value;\n    var sumValue;\n    var minValue;\n    var maxValue;\n    var newRatio;\n    var minRatio;\n    var alpha;\n    var beta;\n    while (i0 < n) {\n      dx = x1 - x0;\n      dy = y1 - y0;\n      // Find the next non-empty node.\n      do {\n        sumValue = nodes.getIndex(i1++).value;\n      } while (!sumValue && i1 < n);\n      minValue = maxValue = sumValue;\n      alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\n      beta = sumValue * sumValue * alpha;\n      minRatio = Math.max(maxValue / beta, beta / minValue);\n      // Keep adding nodes while the aspect ratio maintains or improves.\n      for (; i1 < n; ++i1) {\n        sumValue += nodeValue = nodes.getIndex(i1).value;\n        if (nodeValue < minValue) {\n          minValue = nodeValue;\n        }\n        if (nodeValue > maxValue) {\n          maxValue = nodeValue;\n        }\n        beta = sumValue * sumValue * alpha;\n        newRatio = Math.max(maxValue / beta, beta / minValue);\n        if (newRatio > minRatio) {\n          sumValue -= nodeValue;\n          break;\n        }\n        minRatio = newRatio;\n      }\n      // Position and record the row orientation.\n      var row = this.dataItems.template.clone();\n      row.value = sumValue;\n      row.dice = dx < dy;\n      row.children = nodes.slice(i0, i1);\n      row.x0 = x0;\n      row.y0 = y0;\n      row.x1 = x1;\n      row.y1 = y1;\n      if (row.dice) {\n        row.y1 = value ? y0 += dy * sumValue / value : y1;\n        this.dice(row);\n      } else {\n        row.x1 = value ? x0 += dx * sumValue / value : x1;\n        this.slice(row);\n      }\n      value -= sumValue;\n      i0 = i1;\n    }\n  };\n  TreeMap.prototype.handleSeriesAdded2 = function () {\n    // void\n  };\n  /**\r\n   * [handleDataItemValueChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n  TreeMap.prototype.handleDataItemValueChange = function (dataItem, name) {\n    if (name == \"value\") {\n      this.invalidateDataItems();\n    }\n  };\n  TreeMap.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {\n    if (name == \"value\") {\n      this.invalidateDataItems();\n    }\n  };\n  TreeMap.prototype.getLegendLevel = function (dataItem) {\n    if (!dataItem) {\n      return;\n    }\n    if (!dataItem.children) {\n      return;\n    }\n    if (dataItem.children.length > 1) {\n      return dataItem;\n    } else if (dataItem.children.length == 1) {\n      var child = dataItem.children.getIndex(0);\n      if (child.children) {\n        return this.getLegendLevel(child);\n      } else {\n        return dataItem;\n      }\n    } else {\n      return dataItem;\n    }\n  };\n  TreeMap.prototype.handleLegendSeriesAdded = function (series) {\n    // void\n  };\n  Object.defineProperty(TreeMap.prototype, \"homeDataItem\", {\n    /**\r\n     * A data item associated with top node.\r\n     *\r\n     * @since 4.8.2\r\n     */\n    get: function () {\n      return this._homeDataItem;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Setups the legend to use the chart's data.\r\n   * @ignore\r\n   */\n  TreeMap.prototype.feedLegend = function () {\n    var legend = this.legend;\n    if (legend) {\n      legend.dataFields.name = \"name\";\n      var legendParent = this.getLegendLevel(this._homeDataItem);\n      if (legendParent) {\n        var legendData_1 = [];\n        legendParent.children.each(function (dataItem) {\n          //if (!dataItem.hiddenInLegend) {\n          legendData_1.push(dataItem);\n          //}\n        });\n\n        legend.data = legendData_1;\n      }\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n  TreeMap.prototype.disposeData = function () {\n    _super.prototype.disposeData.call(this);\n    this._homeDataItem = undefined;\n    this.series.clear();\n    if (this.navigationBar) {\n      this.navigationBar.disposeData();\n    }\n    this.xAxis.disposeData();\n    this.yAxis.disposeData();\n  };\n  /**\r\n   * Since this chart uses hierarchical data, we need to remove childrent\r\n   * dataField from export of non-hierarchical formats such as CSV and XSLX.\r\n   *\r\n   * @return Export\r\n   */\n  TreeMap.prototype.getExporting = function () {\n    var _this = this;\n    var exporting = _super.prototype.getExporting.call(this);\n    exporting.adapter.add(\"formatDataFields\", function (info) {\n      if (info.format == \"csv\" || info.format == \"xlsx\") {\n        if ($type.hasValue(_this.dataFields.children)) {\n          delete info.dataFields[_this.dataFields.children];\n        }\n      }\n      return info;\n    });\n    return exporting;\n  };\n  return TreeMap;\n}(XYChart);\nexport { TreeMap };\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"TreeMap\"] = TreeMap;","map":{"version":3,"names":["__extends","XYChart","XYChartDataItem","registry","DictionaryTemplate","DictionaryDisposer","ValueAxis","TreeMapSeries","ColorSet","MouseCursorStyle","$iter","$type","$array","TreeMapDataItem","_super","_this","call","rows","className","values","value","workingValue","x0","y0","x1","y1","hasChildren","children","applyTheme","Object","defineProperty","prototype","get","_legendDataItem","set","label","dataItem","valueLabel","enumerable","configurable","getDuration","length","each","iterator","child","childValue","isNumber","setValue","parent","properties","name","setProperty","level","color","undefined","component","colors","getIndex","step","index","_series","series","removeValue","dispose","_disposers","push","hide","duration","delay","toValue","fields","setWorkingValue","seriesDataItem","bullets","key","preventShow","show","TreeMap","layoutAlgorithm","squarify","zoomable","_usesData","maxLevels","currentLevel","hideParentColumns","sorting","xAxis","xAxes","title","disabled","strictMinMax","xRenderer","renderer","inside","labels","template","ticks","grid","axisFills","minGridDistance","line","baseGrid","yAxis","yAxes","yRenderer","inversed","seriesTemplates","virtualParent","zoomOutButton","events","on","zoomToChartDataItem","_homeDataItem","event","newValue","isTemplate","_navigationBar","navigationBar","toBack","links","target","dataContext","isDisposed","createTreeSeries","validateData","clear","_tempSeries","homeDataItem","dataItems","clone","_homeText","maxX","maxY","Math","round","pixelHeight","pixelWidth","min","max","getMinMax","layoutItems","feedLegend","sort","a","b","_updateDataItemIndexes","i","len","node","navigationData","parentDataItem","initSeries","reverse","data","createTreeSeriesReal","indexOf","zIndex","setData","currentlyZoomed","start","end","seriesAppeared","getKey","toString","create","config","dataUsers","fill","columnsContainer","bulletsContainer","columns","adapter","add","treeMapDataItem","remove","cursorOverStyle","pointer","zoomToSeriesDataItem","toggleBullets","bullet","zoomToValues","rangeChangeAnimation","isFinished","_dataDisposers","once","applyInternalDefaults","hasValue","readerTitle","language","translate","createDataItem","getPropertyValue","setPropertyValue","createSeries","processConfig","isString","binaryTree","slice","dice","sliceDice","type","validateLayout","validateDataItems","validateRawData","nodes","n","sum","sums","Array","partition","j","valueOffset","valueTarget","k","hi","mid","valueLeft","valueRight","xk","yk","ratio","sqrt","nodeValue","i0","i1","dx","dy","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","row","handleSeriesAdded2","handleDataItemValueChange","invalidateDataItems","handleDataItemWorkingValueChange","getLegendLevel","handleLegendSeriesAdded","legend","dataFields","legendParent","legendData_1","disposeData","getExporting","exporting","info","format","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/charts/types/TreeMap.js"],"sourcesContent":["/**\r\n * TreeMap chart module.\r\n *\r\n * Parts of the functionality used in this module are taken from D3.js library\r\n * (https://d3js.org/)\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, XYChartDataItem } from \"./XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { TreeMapSeries } from \"../series/TreeMapSeries\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMap]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar TreeMapDataItem = /** @class */ (function (_super) {\r\n    __extends(TreeMapDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function TreeMapDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Required for squarify functionality.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        _this.rows = [];\r\n        _this.className = \"TreeMapDataItem\";\r\n        _this.values.value = { workingValue: 0 };\r\n        _this.values.x0 = {};\r\n        _this.values.y0 = {};\r\n        _this.values.x1 = {};\r\n        _this.values.y1 = {};\r\n        _this.hasChildren.children = true;\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"legendDataItem\", {\r\n        /**\r\n         * @return Legend data item\r\n         */\r\n        get: function () {\r\n            return this._legendDataItem;\r\n        },\r\n        /**\r\n         * A legend's data item, that corresponds to this data item.\r\n         *\r\n         * @param value  Legend data item\r\n         */\r\n        set: function (value) {\r\n            this._legendDataItem = value;\r\n            if (value.label) {\r\n                value.label.dataItem = this;\r\n            }\r\n            if (value.valueLabel) {\r\n                value.valueLabel.dataItem = this;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a duration (ms) the Data Item should take to animate from one\r\n     * value to another.\r\n     *\r\n     * If the duration is not specified via parameter, this method will try to\r\n     * request a default duration from the related `Component`.\r\n     *\r\n     * @param duration  Default duration (ms)\r\n     * @return Duration (ms)\r\n     */\r\n    TreeMapDataItem.prototype.getDuration = function () {\r\n        return 0;\r\n    };\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"value\", {\r\n        /**\r\n         * @return Value\r\n         */\r\n        get: function () {\r\n            var value = 0;\r\n            if (!this.children || this.children.length == 0) {\r\n                value = this.values[\"value\"].workingValue;\r\n            }\r\n            else {\r\n                $iter.each(this.children.iterator(), function (child) {\r\n                    var childValue = child.value;\r\n                    if ($type.isNumber(childValue)) {\r\n                        value += childValue;\r\n                    }\r\n                });\r\n            }\r\n            return value;\r\n            /*\r\n            let value = this.values[\"value\"].workingValue;\r\n    \r\n            if (!$type.isNumber(value)) {\r\n                value = 0;\r\n                if (this.children) {\r\n                    $iter.each(this.children.iterator(), (child) => {\r\n                        if ($type.isNumber(child.value)) {\r\n                            value += child.value;\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            return value;*/\r\n        },\r\n        /**\r\n         * Numeric value of the item.\r\n         *\r\n         * @param value  Value\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"value\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"percent\", {\r\n        /**\r\n         * Percent value of a node\r\n         */\r\n        get: function () {\r\n            if (this.parent) {\r\n                return this.value / this.parent.value * 100;\r\n            }\r\n            return 100;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"x0\", {\r\n        /**\r\n         * @return X\r\n         */\r\n        get: function () {\r\n            return this.values.x0.value;\r\n        },\r\n        /**\r\n         * Item's X position.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description (review)\r\n         * @param value  X\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"x0\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"x1\", {\r\n        /**\r\n         * @return X\r\n         */\r\n        get: function () {\r\n            return this.values.x1.value;\r\n        },\r\n        /**\r\n         * Item's X position.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description (review)\r\n         * @param value  X\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"x1\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"y0\", {\r\n        /**\r\n         * @return Y\r\n         */\r\n        get: function () {\r\n            return this.values.y0.value;\r\n        },\r\n        /**\r\n         * Item's Y position.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description (review)\r\n         * @param value  Y\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"y0\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"y1\", {\r\n        /**\r\n         * @return Y\r\n         */\r\n        get: function () {\r\n            return this.values.y1.value;\r\n        },\r\n        /**\r\n         * Item's Y position.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @todo Description (review)\r\n         * @param value  Y\r\n         */\r\n        set: function (value) {\r\n            this.setValue(\"y1\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"name\", {\r\n        /**\r\n         * @return Name\r\n         */\r\n        get: function () {\r\n            return this.properties.name;\r\n        },\r\n        /**\r\n         * Item's name.\r\n         *\r\n         * @param name  Name\r\n         */\r\n        set: function (name) {\r\n            this.setProperty(\"name\", name);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"children\", {\r\n        /**\r\n         * @return Item's children\r\n         */\r\n        get: function () {\r\n            return this.properties.children;\r\n        },\r\n        /**\r\n         * A list of item's sub-children.\r\n         *\r\n         * Having children means that the TreeMap chat will automatically be\r\n         * \"drillable\". Clicking on an item with children will zoom to the item, then\r\n         * display its children.\r\n         *\r\n         * Treemap can have any level of nesting.\r\n         *\r\n         * @param children  Item's children\r\n         */\r\n        set: function (children) {\r\n            this.setProperty(\"children\", children);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"level\", {\r\n        /**\r\n         * Depth level in the treemap hierarchy.\r\n         *\r\n         * The top-level item will have level set at 0. Its children will have\r\n         * level 1, and so on.\r\n         *\r\n         * @readonly\r\n         * @return Level\r\n         */\r\n        get: function () {\r\n            if (!this.parent) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return this.parent.level + 1;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"color\", {\r\n        /**\r\n         * @return Color\r\n         */\r\n        get: function () {\r\n            var color = this.properties.color;\r\n            if (color == undefined) {\r\n                if (this.parent) {\r\n                    color = this.parent.color;\r\n                }\r\n            }\r\n            if (color == undefined) {\r\n                if (this.component) {\r\n                    color = this.component.colors.getIndex(this.component.colors.step * this.index);\r\n                }\r\n            }\r\n            return color;\r\n        },\r\n        /**\r\n         * Item's color.\r\n         *\r\n         * If not set, will use parent's color, or, if that is not set either,\r\n         * automatically assigned color from chart's color set. (`chart.colors`)\r\n         *\r\n         * @param value  Color\r\n         */\r\n        set: function (value) {\r\n            this.setProperty(\"color\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"fill\", {\r\n        /**\r\n         * @ignore\r\n         * For the legend to work properly\r\n         */\r\n        get: function () {\r\n            return this.color;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMapDataItem.prototype, \"series\", {\r\n        get: function () {\r\n            return this._series;\r\n        },\r\n        /**\r\n         * Series of children data items\r\n         * @todo: proper descrition\r\n         */\r\n        set: function (series) {\r\n            if (series != this._series) {\r\n                if (this._series) {\r\n                    this.component.series.removeValue(this._series);\r\n                    this._series.dispose();\r\n                }\r\n                this._series = series;\r\n                this._disposers.push(series);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Hides the Data Item and related visual elements.\r\n     *\r\n     * @param duration  Animation duration (ms)\r\n     * @param delay     Delay animation (ms)\r\n     * @param toValue   A value to set to `fields` when hiding\r\n     * @param fields    A list of data fields to set value to `toValue`\r\n     */\r\n    TreeMapDataItem.prototype.hide = function (duration, delay, toValue, fields) {\r\n        this.setWorkingValue(\"value\", 0);\r\n        if (this.children) {\r\n            this.children.each(function (child) {\r\n                child.hide(duration, delay, toValue, fields);\r\n            });\r\n        }\r\n        var seriesDataItem = this.seriesDataItem;\r\n        if (seriesDataItem) {\r\n            seriesDataItem.bullets.each(function (key, value) {\r\n                value.hide();\r\n                value.preventShow = true;\r\n            });\r\n        }\r\n        return _super.prototype.hide.call(this, duration, delay, toValue, fields);\r\n    };\r\n    /**\r\n     * Shows the Data Item and related visual elements.\r\n     *\r\n     * @param duration  Animation duration (ms)\r\n     * @param delay     Delay animation (ms)\r\n     * @param fields    A list of fields to set values of\r\n     */\r\n    TreeMapDataItem.prototype.show = function (duration, delay, fields) {\r\n        this.setWorkingValue(\"value\", this.values.value.value);\r\n        if (this.children) {\r\n            this.children.each(function (child) {\r\n                child.show(duration, delay, fields);\r\n            });\r\n        }\r\n        var seriesDataItem = this.seriesDataItem;\r\n        if (seriesDataItem) {\r\n            seriesDataItem.bullets.each(function (key, value) {\r\n                value.preventShow = false;\r\n            });\r\n        }\r\n        return _super.prototype.show.call(this, duration, delay, fields);\r\n    };\r\n    return TreeMapDataItem;\r\n}(XYChartDataItem));\r\nexport { TreeMapDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapEvents} for a list of available Events\r\n * @see {@link ITreeMapAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/} for documentation\r\n */\r\nvar TreeMap = /** @class */ (function (_super) {\r\n    __extends(TreeMap, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function TreeMap() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * An algorithm used to divide area into squares based on their value.\r\n         *\r\n         * Available options: squarify (default), binaryTree, slice, dice, sliceDice.\r\n         *\r\n         * ```TypeScript\r\n         * chart.layoutAlgorithm = chart.sliceDice;\r\n         * ```\r\n         * ```JavaScript\r\n         * chart.layoutAlgorithm = chart.sliceDice;\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"layoutAlgorithm\": \"sliceDice\",\r\n         *   // ...\r\n         * }\r\n         * ```\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/#Area_division_methods} For more info and examples.\r\n         * @default squarify\r\n         */\r\n        _this.layoutAlgorithm = _this.squarify;\r\n        /**\r\n         * Is the chart zoomable?\r\n         *\r\n         * If the chart is `zoomable`, and items have sub-items, the chart will\r\n         * drill-down to sub-items when click on their parent item.\r\n         *\r\n         * @default true\r\n         */\r\n        _this.zoomable = true;\r\n        _this.className = \"TreeMap\";\r\n        _this._usesData = true;\r\n        _this.maxLevels = 2;\r\n        _this.currentLevel = 0;\r\n        _this.hideParentColumns = false;\r\n        _this.colors = new ColorSet();\r\n        _this.sorting = \"descending\";\r\n        // create two value axes for the chart\r\n        var xAxis = _this.xAxes.push(new ValueAxis());\r\n        xAxis.title.disabled = true;\r\n        xAxis.strictMinMax = true;\r\n        var xRenderer = xAxis.renderer;\r\n        xRenderer.inside = true;\r\n        xRenderer.labels.template.disabled = true;\r\n        xRenderer.ticks.template.disabled = true;\r\n        xRenderer.grid.template.disabled = true;\r\n        xRenderer.axisFills.template.disabled = true;\r\n        xRenderer.minGridDistance = 100;\r\n        xRenderer.line.disabled = true;\r\n        xRenderer.baseGrid.disabled = true;\r\n        //xRenderer.inversed = true;\r\n        var yAxis = _this.yAxes.push(new ValueAxis());\r\n        yAxis.title.disabled = true;\r\n        yAxis.strictMinMax = true;\r\n        var yRenderer = yAxis.renderer;\r\n        yRenderer.inside = true;\r\n        yRenderer.labels.template.disabled = true;\r\n        yRenderer.ticks.template.disabled = true;\r\n        yRenderer.grid.template.disabled = true;\r\n        yRenderer.axisFills.template.disabled = true;\r\n        yRenderer.minGridDistance = 100;\r\n        yRenderer.line.disabled = true;\r\n        yRenderer.baseGrid.disabled = true;\r\n        yRenderer.inversed = true;\r\n        // shortcuts\r\n        _this.xAxis = xAxis;\r\n        _this.yAxis = yAxis;\r\n        var template = new TreeMapSeries();\r\n        _this.seriesTemplates = new DictionaryTemplate(template);\r\n        template.virtualParent = _this;\r\n        _this._disposers.push(new DictionaryDisposer(_this.seriesTemplates));\r\n        _this._disposers.push(template);\r\n        _this.zoomOutButton.events.on(\"hit\", function () {\r\n            _this.zoomToChartDataItem(_this._homeDataItem);\r\n        }, undefined, false);\r\n        _this.seriesTemplates.events.on(\"insertKey\", function (event) {\r\n            event.newValue.isTemplate = true;\r\n        }, undefined, false);\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(TreeMap.prototype, \"navigationBar\", {\r\n        /**\r\n         * Returns navigationBar if it is added to a chart\r\n         */\r\n        get: function () {\r\n            return this._navigationBar;\r\n        },\r\n        /**\r\n         * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n         * drill-down path.\r\n         */\r\n        set: function (navigationBar) {\r\n            var _this = this;\r\n            if (this._navigationBar != navigationBar) {\r\n                this._navigationBar = navigationBar;\r\n                navigationBar.parent = this;\r\n                navigationBar.toBack();\r\n                navigationBar.links.template.events.on(\"hit\", function (event) {\r\n                    var dataItem = event.target.dataItem.dataContext;\r\n                    if (!dataItem.isDisposed()) {\r\n                        _this.zoomToChartDataItem(dataItem);\r\n                        _this.createTreeSeries(dataItem);\r\n                    }\r\n                }, undefined, true);\r\n                this._disposers.push(navigationBar);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * (Re)validates chart's data.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    TreeMap.prototype.validateData = function () {\r\n        this.series.clear();\r\n        this._tempSeries = [];\r\n        _super.prototype.validateData.call(this);\r\n        if (this._homeDataItem) {\r\n            this._homeDataItem.dispose();\r\n        }\r\n        var homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\r\n        this._homeDataItem = homeDataItem;\r\n        $iter.each(this.dataItems.iterator(), function (dataItem) {\r\n            dataItem.parent = homeDataItem;\r\n        });\r\n        homeDataItem.children = this.dataItems;\r\n        homeDataItem.x0 = 0;\r\n        homeDataItem.y0 = 0;\r\n        homeDataItem.name = this._homeText;\r\n        var maxX = 1000;\r\n        var maxY = Math.round((maxX * this.pixelHeight / this.pixelWidth) / 10) * 10 || 1000;\r\n        homeDataItem.x1 = maxX;\r\n        homeDataItem.y1 = maxY;\r\n        this.xAxis.min = 0;\r\n        this.xAxis.max = maxX;\r\n        this.xAxis.getMinMax();\r\n        this.yAxis.min = 0;\r\n        this.yAxis.max = maxY;\r\n        this.yAxis.getMinMax();\r\n        this.layoutItems(homeDataItem);\r\n        this.createTreeSeries(homeDataItem);\r\n        this.feedLegend();\r\n    };\r\n    /**\r\n     * Layouts and sizes all items according to their value and\r\n     * `layoutAlgorithm`.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param parent  Parent data item\r\n     */\r\n    TreeMap.prototype.layoutItems = function (parent, sorting) {\r\n        if (parent) {\r\n            var children = parent.children;\r\n            if (!sorting) {\r\n                sorting = this.sorting;\r\n            }\r\n            if (sorting == \"ascending\") {\r\n                children.values.sort(function (a, b) {\r\n                    return a.value - b.value;\r\n                });\r\n            }\r\n            if (sorting == \"descending\") {\r\n                children.values.sort(function (a, b) {\r\n                    return b.value - a.value;\r\n                });\r\n            }\r\n            this._updateDataItemIndexes(0);\r\n            this.layoutAlgorithm(parent);\r\n            for (var i = 0, len = children.length; i < len; i++) {\r\n                var node = children.getIndex(i);\r\n                if (node.children) {\r\n                    this.layoutItems(node);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Creates and returns a new treemap series.\r\n     *\r\n     * @todo Description\r\n     * @param dataItem  Data item to create series out of\r\n     */\r\n    TreeMap.prototype.createTreeSeries = function (dataItem) {\r\n        var _this = this;\r\n        this._tempSeries = [];\r\n        var navigationData = [dataItem];\r\n        // create parent series and navigation data\r\n        var parentDataItem = dataItem.parent;\r\n        while (parentDataItem != undefined) {\r\n            this.initSeries(parentDataItem);\r\n            navigationData.push(parentDataItem);\r\n            parentDataItem = parentDataItem.parent;\r\n        }\r\n        navigationData.reverse();\r\n        if (this.navigationBar) {\r\n            this.navigationBar.data = navigationData;\r\n        }\r\n        // create series and children series\r\n        this.createTreeSeriesReal(dataItem);\r\n        // add those which are not in the list\r\n        $array.each(this._tempSeries, function (series) {\r\n            if (_this.series.indexOf(series) == -1) {\r\n                _this.series.push(series);\r\n            }\r\n            series.zIndex = series.level;\r\n        });\r\n    };\r\n    /**\r\n     * [createTreeSeriesReal description]\r\n     *\r\n     * @todo Description\r\n     * @param dataItem [description]\r\n     */\r\n    TreeMap.prototype.createTreeSeriesReal = function (dataItem) {\r\n        if (dataItem.children) {\r\n            var level = dataItem.level;\r\n            if (level < this.currentLevel + this.maxLevels) {\r\n                this.initSeries(dataItem);\r\n                for (var i = 0; i < dataItem.children.length; i++) {\r\n                    var child = dataItem.children.getIndex(i);\r\n                    if (child.children) {\r\n                        this.createTreeSeriesReal(child);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    TreeMap.prototype.setData = function (value) {\r\n        this.currentLevel = 0;\r\n        this.currentlyZoomed = undefined;\r\n        this.xAxis.start = 0;\r\n        this.xAxis.end = 1;\r\n        this.yAxis.start = 0;\r\n        this.yAxis.end = 1;\r\n        _super.prototype.setData.call(this, value);\r\n    };\r\n    /**\r\n     * @ignore\r\n     * Overriding, as tree map series are created on the fly all the time\r\n     */\r\n    TreeMap.prototype.seriesAppeared = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * Initializes the treemap series.\r\n     *\r\n     * @todo Description\r\n     * @param dataItem  Chart data item\r\n     */\r\n    TreeMap.prototype.initSeries = function (dataItem) {\r\n        var _this = this;\r\n        if (!dataItem.series) {\r\n            var series = void 0;\r\n            var template = this.seriesTemplates.getKey(dataItem.level.toString());\r\n            if (template) {\r\n                series = template.clone();\r\n            }\r\n            else {\r\n                series = this.series.create();\r\n            }\r\n            // for the legend to get {value}\r\n            series.dataItem.dataContext = dataItem;\r\n            series.name = dataItem.name;\r\n            series.parentDataItem = dataItem;\r\n            dataItem.series = series;\r\n            var level = dataItem.level;\r\n            series.level = level;\r\n            var dataContext = dataItem.dataContext;\r\n            if (dataContext) {\r\n                series.config = dataContext.config;\r\n            }\r\n            this.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it\r\n            series.data = dataItem.children.values;\r\n            series.fill = dataItem.color;\r\n            series.columnsContainer.hide(0);\r\n            series.bulletsContainer.hide(0);\r\n            series.columns.template.adapter.add(\"fill\", function (fill, target) {\r\n                var dataItem = target.dataItem;\r\n                if (dataItem) {\r\n                    var treeMapDataItem = dataItem.treeMapDataItem;\r\n                    if (treeMapDataItem) {\r\n                        target.fill = treeMapDataItem.color;\r\n                        target.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\r\n                        return treeMapDataItem.color;\r\n                    }\r\n                }\r\n            });\r\n            if (this.zoomable && (dataItem.level > this.currentLevel || (dataItem.children && dataItem.children.length > 0))) {\r\n                series.columns.template.cursorOverStyle = MouseCursorStyle.pointer;\r\n                if (this.zoomable) {\r\n                    series.columns.template.events.on(\"hit\", function (event) {\r\n                        var seriesDataItem = event.target.dataItem;\r\n                        if (dataItem.level > _this.currentLevel) {\r\n                            _this.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);\r\n                        }\r\n                        else {\r\n                            _this.zoomToSeriesDataItem(seriesDataItem);\r\n                        }\r\n                    }, this, undefined);\r\n                }\r\n            }\r\n        }\r\n        this._tempSeries.push(dataItem.series);\r\n    };\r\n    /**\r\n     * Toggles bullets so that labels that belong to current drill level are\r\n     * shown.\r\n     *\r\n     * @param duration  Animation duration (ms)\r\n     */\r\n    TreeMap.prototype.toggleBullets = function (duration) {\r\n        var _this = this;\r\n        // hide all series which are not in tempSeries\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            if (_this._tempSeries.indexOf(series) == -1) {\r\n                //series.hideReal(duration);\r\n                series.columnsContainer.hide();\r\n                series.bulletsContainer.hide(duration);\r\n            }\r\n            else {\r\n                //series.showReal(duration);\r\n                series.columnsContainer.show();\r\n                series.bulletsContainer.show(duration);\r\n                series.dataItems.each(function (dataItem) {\r\n                    dataItem.bullets.each(function (key, bullet) {\r\n                        bullet.show();\r\n                    });\r\n                });\r\n                if (series.level < _this.currentLevel) {\r\n                    if (_this.hideParentColumns) {\r\n                        series.columnsContainer.hide();\r\n                    }\r\n                    series.bulletsContainer.hide(duration);\r\n                }\r\n                else if (series.level == _this.currentLevel) {\r\n                    if (_this.maxLevels > 1) {\r\n                        series.dataItems.each(function (dataItem) {\r\n                            if (dataItem.treeMapDataItem.children) {\r\n                                dataItem.bullets.each(function (key, bullet) {\r\n                                    bullet.hide();\r\n                                });\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Zooms to particular item in series.\r\n     *\r\n     * @param dataItem  Data item\r\n     */\r\n    TreeMap.prototype.zoomToSeriesDataItem = function (dataItem) {\r\n        this.zoomToChartDataItem(dataItem.treeMapDataItem);\r\n    };\r\n    /**\r\n     * Zooms to particular item. If dataItem is not specified, the chart will zoom-out.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param dataItem  Data item\r\n     */\r\n    TreeMap.prototype.zoomToChartDataItem = function (dataItem) {\r\n        var _this = this;\r\n        if (!dataItem) {\r\n            dataItem = this._homeDataItem;\r\n        }\r\n        var zoomOutButton = this.zoomOutButton;\r\n        // this is needed because if there is only one fist level, it won't be shown\r\n        if (zoomOutButton) {\r\n            if (dataItem != this._homeDataItem) {\r\n                zoomOutButton.show();\r\n            }\r\n            else {\r\n                zoomOutButton.hide();\r\n            }\r\n        }\r\n        if (dataItem && dataItem.children) {\r\n            this.xAxis.zoomToValues(dataItem.x0, dataItem.x1);\r\n            this.yAxis.zoomToValues(dataItem.y0, dataItem.y1);\r\n            this.currentLevel = dataItem.level;\r\n            this.currentlyZoomed = dataItem;\r\n            this.createTreeSeries(dataItem);\r\n            var rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;\r\n            if (rangeChangeAnimation && !rangeChangeAnimation.isDisposed() && !rangeChangeAnimation.isFinished()) {\r\n                this._dataDisposers.push(rangeChangeAnimation);\r\n                rangeChangeAnimation.events.once(\"animationended\", function () {\r\n                    _this.toggleBullets();\r\n                });\r\n            }\r\n            else {\r\n                this.toggleBullets();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    TreeMap.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        // Add a default screen reader title for accessibility\r\n        // This will be overridden in screen reader if there are any `titles` set\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"TreeMap chart\");\r\n        }\r\n        //this.homeText = this.language.translate(\"Home\");\r\n    };\r\n    /**\r\n     * Returns a new/empty DataItem of the type appropriate for this object.\r\n     *\r\n     * @see {@link DataItem}\r\n     * @return Data Item\r\n     */\r\n    TreeMap.prototype.createDataItem = function () {\r\n        return new TreeMapDataItem();\r\n    };\r\n    Object.defineProperty(TreeMap.prototype, \"maxLevels\", {\r\n        /**\r\n         * @return Maximum drill-down level\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"maxLevels\");\r\n        },\r\n        /**\r\n         * Maximum number of levels the chart will display initially.\r\n         *\r\n         * @default 2\r\n         * @param value  Maximum drill-down level\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"maxLevels\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMap.prototype, \"currentLevel\", {\r\n        /**\r\n         * @return Current level\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"currentLevel\");\r\n        },\r\n        /**\r\n         * Current drill-down level the chart is at.\r\n         *\r\n         * @param value  Current level\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"currentLevel\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMap.prototype, \"hideParentColumns\", {\r\n        /**\r\n         * @return Hide?\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"hideParentColumns\");\r\n        },\r\n        /**\r\n         * If set to `true`, columns of parent nodes will be hidden when user\r\n         * drills-down into deeper levels.\r\n         *\r\n         * @sice 4.7.4\r\n         * @default false\r\n         * @param  value  Hide?\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"hideParentColumns\", value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeMap.prototype, \"sorting\", {\r\n        get: function () {\r\n            return this.getPropertyValue(\"sorting\");\r\n        },\r\n        /**\r\n         * Sorting direction of treemap items.\r\n         *\r\n         * Available options: \"none\", \"ascending\", and \"descending\" (default).\r\n         *\r\n         * @default \"descending\"\r\n         * @param value [description]\r\n         */\r\n        set: function (value) {\r\n            this.setPropertyValue(\"sorting\", value, true);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates and returns a new series of the suitable type.\r\n     *\r\n     * @return new series\r\n     */\r\n    TreeMap.prototype.createSeries = function () {\r\n        return new TreeMapSeries();\r\n    };\r\n    Object.defineProperty(TreeMap.prototype, \"homeText\", {\r\n        /**\r\n         * @return Home text\r\n         */\r\n        get: function () {\r\n            return this._homeText;\r\n        },\r\n        /**\r\n         * A text displayed on the \"home\" button which is used to go back to level 0\r\n         * after drill into sub-items.\r\n         *\r\n         * @param value  Home text\r\n         */\r\n        set: function (value) {\r\n            this._homeText = value;\r\n            if (this._homeDataItem) {\r\n                this._homeDataItem.name = this._homeText;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param config  Config\r\n     */\r\n    TreeMap.prototype.processConfig = function (config) {\r\n        if (config) {\r\n            // Instantiate layout algorithm\r\n            if ($type.hasValue(config[\"layoutAlgorithm\"]) && $type.isString(config[\"layoutAlgorithm\"])) {\r\n                switch (config[\"layoutAlgorithm\"]) {\r\n                    case \"squarify\":\r\n                        config[\"layoutAlgorithm\"] = this.squarify;\r\n                        break;\r\n                    case \"binaryTree\":\r\n                        config[\"layoutAlgorithm\"] = this.binaryTree;\r\n                        break;\r\n                    case \"slice\":\r\n                        config[\"layoutAlgorithm\"] = this.slice;\r\n                        break;\r\n                    case \"dice\":\r\n                        config[\"layoutAlgorithm\"] = this.dice;\r\n                        break;\r\n                    case \"sliceDice\":\r\n                        config[\"layoutAlgorithm\"] = this.sliceDice;\r\n                        break;\r\n                    default:\r\n                        delete config[\"layoutAlgorithm\"];\r\n                        break;\r\n                }\r\n            }\r\n            // Set type for navigation bar\r\n            if ($type.hasValue(config.navigationBar) && !$type.hasValue(config.navigationBar.type)) {\r\n                config.navigationBar.type = \"NavigationBar\";\r\n            }\r\n            _super.prototype.processConfig.call(this, config);\r\n        }\r\n    };\r\n    /**\r\n     * Measures the size of container and informs its children of how much size\r\n     * they can occupy, by setting their relative `maxWidth` and `maxHeight`\r\n     * properties.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    TreeMap.prototype.validateLayout = function () {\r\n        _super.prototype.validateLayout.call(this);\r\n        this.layoutItems(this.currentlyZoomed);\r\n    };\r\n    /**\r\n     * Validates (processes) data items.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    TreeMap.prototype.validateDataItems = function () {\r\n        _super.prototype.validateDataItems.call(this);\r\n        this.layoutItems(this._homeDataItem);\r\n        $iter.each(this.series.iterator(), function (series) {\r\n            series.validateRawData();\r\n        });\r\n        this.zoomToChartDataItem(this._homeDataItem);\r\n    };\r\n    /**\r\n     * ==========================================================================\r\n     * TREEMAP LAYOUT FUNCTIONS\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\r\n    /**\r\n     * The functions below are from D3.js library (https://d3js.org/)\r\n     *\r\n     * --------------------------------------------------------------------------\r\n     * Copyright 2017 Mike Bostock\r\n     *\r\n     * Redistribution and use in source and binary forms, with or without\r\n     * modification, are permitted provided that the following conditions are met:\r\n     *\r\n     * 1. Redistributions of source code must retain the above copyright notice,\r\n     *    this list of conditions and the following disclaimer.\r\n     *\r\n     * 2. Redistributions in binary form must reproduce the above copyright\r\n     *    notice,this list of conditions and the following disclaimer in the\r\n     *    documentation and/or other materials provided with the distribution.\r\n     *\r\n     * 3. Neither the name of the copyright holder nor the names of its\r\n     *    contributors may be used to endorse or promote products derived from\r\n     *    this software without specific prior written permission.\r\n     *\r\n     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n     * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n     * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n     * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n     * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n     * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n     * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n     * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n     * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n     * POSSIBILITY OF SUCH DAMAGE.\r\n     * --------------------------------------------------------------------------\r\n     * @hidden\r\n     */\r\n    /**\r\n     * Treemap layout algorithm: binaryTree.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param parent  Data item\r\n     */\r\n    TreeMap.prototype.binaryTree = function (parent) {\r\n        var nodes = parent.children, i, n = nodes.length, sum, sums = new Array(n + 1);\r\n        for (sums[0] = sum = i = 0; i < n; ++i) {\r\n            sums[i + 1] = sum += nodes.getIndex(i).value;\r\n        }\r\n        if (n > 0) {\r\n            partition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);\r\n        }\r\n        function partition(i, j, value, x0, y0, x1, y1) {\r\n            if (i >= j - 1) {\r\n                var node = nodes.getIndex(i);\r\n                node.x0 = x0;\r\n                node.y0 = y0;\r\n                node.x1 = x1;\r\n                node.y1 = y1;\r\n                return;\r\n            }\r\n            var valueOffset = sums[i], valueTarget = (value / 2) + valueOffset, k = i + 1, hi = j - 1;\r\n            while (k < hi) {\r\n                var mid = k + hi >>> 1;\r\n                if (sums[mid] < valueTarget) {\r\n                    k = mid + 1;\r\n                }\r\n                else {\r\n                    hi = mid;\r\n                }\r\n            }\r\n            if ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) {\r\n                --k;\r\n            }\r\n            var valueLeft = sums[k] - valueOffset, valueRight = value - valueLeft;\r\n            if (value == 0) {\r\n                var node = nodes.getIndex(i);\r\n                node.x0 = x0;\r\n                node.y0 = y0;\r\n                node.x1 = x1;\r\n                node.y1 = y1;\r\n                return;\r\n            }\r\n            if ((x1 - x0) > (y1 - y0)) {\r\n                var xk = (x0 * valueRight + x1 * valueLeft) / value;\r\n                partition(i, k, valueLeft, x0, y0, xk, y1);\r\n                partition(k, j, valueRight, xk, y0, x1, y1);\r\n            }\r\n            else {\r\n                var yk = (y0 * valueRight + y1 * valueLeft) / value;\r\n                partition(i, k, valueLeft, x0, y0, x1, yk);\r\n                partition(k, j, valueRight, x0, yk, x1, y1);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Treemap layout algorithm: slice.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param parent  Data item\r\n     */\r\n    TreeMap.prototype.slice = function (parent) {\r\n        var x0 = parent.x0;\r\n        var x1 = parent.x1;\r\n        var y0 = parent.y0;\r\n        var y1 = parent.y1;\r\n        var nodes = parent.children;\r\n        var node;\r\n        var i = -1;\r\n        var n = nodes.length;\r\n        var k = parent.value && (y1 - y0) / parent.value;\r\n        while (++i < n) {\r\n            node = nodes.getIndex(i);\r\n            node.x0 = x0;\r\n            node.x1 = x1;\r\n            node.y0 = y0;\r\n            y0 += node.value * k;\r\n            node.y1 = y0;\r\n        }\r\n    };\r\n    /**\r\n     * Treemap layout algorithm: dice.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param parent  Data item\r\n     */\r\n    TreeMap.prototype.dice = function (parent) {\r\n        var x0 = parent.x0;\r\n        var x1 = parent.x1;\r\n        var y0 = parent.y0;\r\n        var y1 = parent.y1;\r\n        var nodes = parent.children, node, i = -1, n = nodes.length, k = parent.value && (x1 - x0) / parent.value;\r\n        while (++i < n) {\r\n            node = nodes.getIndex(i);\r\n            node.y0 = y0;\r\n            node.y1 = y1;\r\n            node.x0 = x0;\r\n            x0 += node.value * k;\r\n            node.x1 = x0;\r\n        }\r\n    };\r\n    /**\r\n     * Treemap layout algorithm: slideDice.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param parent  Data item\r\n     */\r\n    TreeMap.prototype.sliceDice = function (parent) {\r\n        if (parent.level & 1) {\r\n            this.slice(parent);\r\n        }\r\n        else {\r\n            this.dice(parent);\r\n        }\r\n    };\r\n    /**\r\n     * Treemap layout algorithm: squarify.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param parent  Data item\r\n     */\r\n    TreeMap.prototype.squarify = function (parent) {\r\n        var ratio = (1 + Math.sqrt(5)) / 2;\r\n        var x0 = parent.x0;\r\n        var x1 = parent.x1;\r\n        var y0 = parent.y0;\r\n        var y1 = parent.y1;\r\n        var nodes = parent.children;\r\n        var nodeValue;\r\n        var i0 = 0;\r\n        var i1 = 0;\r\n        var n = nodes.length;\r\n        var dx;\r\n        var dy;\r\n        var value = parent.value;\r\n        var sumValue;\r\n        var minValue;\r\n        var maxValue;\r\n        var newRatio;\r\n        var minRatio;\r\n        var alpha;\r\n        var beta;\r\n        while (i0 < n) {\r\n            dx = x1 - x0;\r\n            dy = y1 - y0;\r\n            // Find the next non-empty node.\r\n            do {\r\n                sumValue = nodes.getIndex(i1++).value;\r\n            } while (!sumValue && i1 < n);\r\n            minValue = maxValue = sumValue;\r\n            alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\r\n            beta = sumValue * sumValue * alpha;\r\n            minRatio = Math.max(maxValue / beta, beta / minValue);\r\n            // Keep adding nodes while the aspect ratio maintains or improves.\r\n            for (; i1 < n; ++i1) {\r\n                sumValue += nodeValue = nodes.getIndex(i1).value;\r\n                if (nodeValue < minValue) {\r\n                    minValue = nodeValue;\r\n                }\r\n                if (nodeValue > maxValue) {\r\n                    maxValue = nodeValue;\r\n                }\r\n                beta = sumValue * sumValue * alpha;\r\n                newRatio = Math.max(maxValue / beta, beta / minValue);\r\n                if (newRatio > minRatio) {\r\n                    sumValue -= nodeValue;\r\n                    break;\r\n                }\r\n                minRatio = newRatio;\r\n            }\r\n            // Position and record the row orientation.\r\n            var row = this.dataItems.template.clone();\r\n            row.value = sumValue;\r\n            row.dice = dx < dy;\r\n            row.children = nodes.slice(i0, i1);\r\n            row.x0 = x0;\r\n            row.y0 = y0;\r\n            row.x1 = x1;\r\n            row.y1 = y1;\r\n            if (row.dice) {\r\n                row.y1 = value ? (y0 += (dy * sumValue) / value) : y1;\r\n                this.dice(row);\r\n            }\r\n            else {\r\n                row.x1 = value ? (x0 += (dx * sumValue) / value) : x1;\r\n                this.slice(row);\r\n            }\r\n            value -= sumValue;\r\n            i0 = i1;\r\n        }\r\n    };\r\n    TreeMap.prototype.handleSeriesAdded2 = function () {\r\n        // void\r\n    };\r\n    /**\r\n     * [handleDataItemValueChange description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\r\n    TreeMap.prototype.handleDataItemValueChange = function (dataItem, name) {\r\n        if (name == \"value\") {\r\n            this.invalidateDataItems();\r\n        }\r\n    };\r\n    TreeMap.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {\r\n        if (name == \"value\") {\r\n            this.invalidateDataItems();\r\n        }\r\n    };\r\n    TreeMap.prototype.getLegendLevel = function (dataItem) {\r\n        if (!dataItem) {\r\n            return;\r\n        }\r\n        if (!dataItem.children) {\r\n            return;\r\n        }\r\n        if (dataItem.children.length > 1) {\r\n            return dataItem;\r\n        }\r\n        else if (dataItem.children.length == 1) {\r\n            var child = dataItem.children.getIndex(0);\r\n            if (child.children) {\r\n                return this.getLegendLevel(child);\r\n            }\r\n            else {\r\n                return dataItem;\r\n            }\r\n        }\r\n        else {\r\n            return dataItem;\r\n        }\r\n    };\r\n    TreeMap.prototype.handleLegendSeriesAdded = function (series) {\r\n        // void\r\n    };\r\n    Object.defineProperty(TreeMap.prototype, \"homeDataItem\", {\r\n        /**\r\n         * A data item associated with top node.\r\n         *\r\n         * @since 4.8.2\r\n         */\r\n        get: function () {\r\n            return this._homeDataItem;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Setups the legend to use the chart's data.\r\n     * @ignore\r\n     */\r\n    TreeMap.prototype.feedLegend = function () {\r\n        var legend = this.legend;\r\n        if (legend) {\r\n            legend.dataFields.name = \"name\";\r\n            var legendParent = this.getLegendLevel(this._homeDataItem);\r\n            if (legendParent) {\r\n                var legendData_1 = [];\r\n                legendParent.children.each(function (dataItem) {\r\n                    //if (!dataItem.hiddenInLegend) {\r\n                    legendData_1.push(dataItem);\r\n                    //}\r\n                });\r\n                legend.data = legendData_1;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    TreeMap.prototype.disposeData = function () {\r\n        _super.prototype.disposeData.call(this);\r\n        this._homeDataItem = undefined;\r\n        this.series.clear();\r\n        if (this.navigationBar) {\r\n            this.navigationBar.disposeData();\r\n        }\r\n        this.xAxis.disposeData();\r\n        this.yAxis.disposeData();\r\n    };\r\n    /**\r\n     * Since this chart uses hierarchical data, we need to remove childrent\r\n     * dataField from export of non-hierarchical formats such as CSV and XSLX.\r\n     *\r\n     * @return Export\r\n     */\r\n    TreeMap.prototype.getExporting = function () {\r\n        var _this = this;\r\n        var exporting = _super.prototype.getExporting.call(this);\r\n        exporting.adapter.add(\"formatDataFields\", function (info) {\r\n            if (info.format == \"csv\" || info.format == \"xlsx\") {\r\n                if ($type.hasValue(_this.dataFields.children)) {\r\n                    delete info.dataFields[_this.dataFields.children];\r\n                }\r\n            }\r\n            return info;\r\n        });\r\n        return exporting;\r\n    };\r\n    return TreeMap;\r\n}(XYChart));\r\nexport { TreeMap };\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMap\"] = TreeMap;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}