{"ast":null,"code":"/**\r\n * Pie chart module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { PercentChart, PercentChartDataItem } from \"./PercentChart\";\nimport { percent, Percent } from \"../../core/utils/Percent\";\nimport { PieSeries } from \"../series/PieSeries\";\nimport { registry } from \"../../core/Registry\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Defines a [[DataItem]] for [[PieChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\nvar PieChartDataItem = /** @class */function (_super) {\n  __extends(PieChartDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n  function PieChartDataItem() {\n    var _this = _super.call(this) || this;\n    _this.className = \"PieChartDataItem\";\n    _this.applyTheme();\n    return _this;\n  }\n  return PieChartDataItem;\n}(PercentChartDataItem);\nexport { PieChartDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Creates a Pie chart.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"PieChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"PieSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czechia\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"PieChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChartEvents} for a list of available Events\r\n * @see {@link IPieChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\nvar PieChart = /** @class */function (_super) {\n  __extends(PieChart, _super);\n  /**\r\n   * Constructor\r\n   */\n  function PieChart() {\n    var _this =\n    // Init\n    _super.call(this) || this;\n    _this.className = \"PieChart\";\n    // Set defaults\n    _this.innerRadius = 0;\n    _this.radius = percent(80);\n    _this.align = \"none\";\n    _this.valign = \"none\";\n    _this.startAngle = -90;\n    _this.endAngle = 270;\n    var seriesContainer = _this.seriesContainer;\n    seriesContainer.isMeasured = true;\n    seriesContainer.valign = \"middle\";\n    seriesContainer.align = \"center\";\n    seriesContainer.layout = \"absolute\";\n    seriesContainer.width = undefined;\n    seriesContainer.height = undefined;\n    // so that the pie is always drawn, even the legend wants all the space\n    _this.chartContainer.minHeight = 50;\n    _this.chartContainer.minWidth = 50;\n    _this.chartContainer.events.on(\"maxsizechanged\", _this.updateRadius, _this, false); // need this for the chart to change radius if legend is removed/disabled\n    _this._disposers.push(_this.seriesContainer.events.on(\"positionchanged\", function () {\n      _this.bulletsContainer.x = _this.seriesContainer.x;\n      _this.bulletsContainer.y = _this.seriesContainer.y;\n    }));\n    // Apply theme\n    _this.applyTheme();\n    return _this;\n  }\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n  PieChart.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n    // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Pie chart\");\n    }\n  };\n  /**\r\n   * (Re)validates the chart, causing it to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  PieChart.prototype.validateLayout = function () {\n    _super.prototype.validateLayout.call(this);\n    this.updateRadius();\n  };\n  /**\r\n   * Decorates a new [[Series]] object with required parameters when it is\r\n   * added to the chart.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event  Event\r\n   */\n  PieChart.prototype.handleSeriesAdded = function (event) {\n    _super.prototype.handleSeriesAdded.call(this, event);\n    this._chartPixelRadius = undefined;\n    this.updateSeriesAngles();\n  };\n  PieChart.prototype.updateSeriesAngles = function () {\n    var _this = this;\n    this.series.each(function (series) {\n      series._startAngleInternal = _this.startAngle;\n      series._endAngleInternal = _this.endAngle;\n      //series.defaultState.properties.startAngle = this.startAngle;\n      //series.defaultState.properties.endAngle = this.endAngle;\n    });\n  };\n  /**\r\n   * Recalculates pie's radius, based on a number of criteria.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n  PieChart.prototype.updateRadius = function () {\n    var chartCont = this.chartContainer;\n    var rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\n    var innerRect = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n    var innerRadius = this.innerRadius;\n    if (innerRadius instanceof Percent) {\n      innerRect = $math.getArcRect(this.startAngle, this.endAngle, innerRadius.value);\n    }\n    // @todo handle this when innerRadius set in pixels (do it for radar also)\n    rect = $math.getCommonRectangle([rect, innerRect]);\n    var maxRadius = Math.min(chartCont.innerWidth / rect.width, chartCont.innerHeight / rect.height);\n    if (!$type.isNumber(maxRadius)) {\n      maxRadius = 0;\n    }\n    var chartRadius = $utils.relativeRadiusToValue(this.radius, maxRadius);\n    var chartPixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, maxRadius);\n    var seriesRadius = (chartRadius - chartPixelInnerRadius) / this.series.length;\n    if (chartRadius != this._chartPixelRadius || chartPixelInnerRadius != this._chartPixelInnerRadius) {\n      this._chartPixelRadius = chartRadius;\n      this._chartPixelInnerRadius = chartPixelInnerRadius;\n      //@todo: make it possible to set series radius in percent\n      $iter.each($iter.indexed(this.series.iterator()), function (a) {\n        var i = a[0];\n        var series = a[1];\n        var radius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.radius, chartRadius - chartPixelInnerRadius);\n        var innerRadius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.innerRadius, chartRadius - chartPixelInnerRadius);\n        if (!$type.isNumber(radius)) {\n          radius = chartPixelInnerRadius + seriesRadius * (i + 1);\n        }\n        if (!$type.isNumber(innerRadius)) {\n          innerRadius = chartPixelInnerRadius + seriesRadius * i;\n        }\n        series.pixelRadius = radius;\n        series.pixelInnerRadius = innerRadius;\n      });\n      this.seriesContainer.definedBBox = {\n        x: chartRadius * rect.x,\n        y: chartRadius * rect.y,\n        width: chartRadius * rect.width,\n        height: chartRadius * rect.height\n      };\n      this.seriesContainer.invalidateLayout();\n    }\n  };\n  Object.defineProperty(PieChart.prototype, \"radius\", {\n    /**\r\n     * @return Radius (px or relative)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n    /**\r\n     * Sets radius of the pie chart.\r\n     *\r\n     * Setting to a number will mean a fixed pixel radius.\r\n     *\r\n     * Setting to an instance of [[Percent]] will mean a relative radius to\r\n     * available space.\r\n     *\r\n     * E.g.:\r\n     *\r\n     * ```TypeScript\r\n     * // Set pie chart to be at 50% of the available space\r\n     * pieChart.radius = am4core.percent(50);\r\n     * ```\r\n     * ```JavaScript\r\n     * // Set pie chart to be at 50% of the available space\r\n     * pieChart.radius = am4core.percent(50);\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // Set pie chart to be at 50% of the available space\r\n     *   \"radius\": \"50%\"\r\n     * }\r\n     * ```\r\n     *\r\n     * @default 80%\r\n     * @param value  Radius (px or relative)\r\n     */\n    set: function (value) {\n      if (this.setPercentProperty(\"radius\", value, true, false, 10, false)) {\n        this.invalidateLayout();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PieChart.prototype, \"innerRadius\", {\n    /**\r\n     * @return Relative inner radius (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"innerRadius\");\n    },\n    /**\r\n     * Sets relative inner radius (to create a donut chart).\r\n     *\r\n     * Setting to a number will mean a fixed pixel radius.\r\n     *\r\n     * Setting to an instance of [[Percent]] will mean a relative radius to\r\n     * available space.\r\n     *\r\n     * NOTE: it's not related to `radius`.\r\n     *\r\n     * E.g.:\r\n     *\r\n     * ```TypeScript\r\n     * // Set pie chart to be at 50% of the available space\r\n     * pieChart.innerRadius = am4core.percent(50);\r\n     * ```\r\n     * ```JavaScript\r\n     * // Set pie chart to be at 50% of the available space\r\n     * pieChart.innerRadius = am4core.percent(50);\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // Set pie chart to be at 50% of the available space\r\n     *   \"innerRadius\": \"50%\"\r\n     * }\r\n     * ```\r\n     *\r\n     * @default 0\r\n     * @param value  Relative inner radius (0-1)\r\n     * @todo Setting things like `innerRadius` modifies `slice.radius` and it then looks like it is not the same value as in default state\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates a new [[PieSeries]].\r\n   *\r\n   * @return New series\r\n   */\n  PieChart.prototype.createSeries = function () {\n    return new PieSeries();\n  };\n  Object.defineProperty(PieChart.prototype, \"startAngle\", {\n    /**\r\n     * @return Start angle (degrees)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startAngle\");\n    },\n    /**\r\n     * Starting angle of the Pie circle. (degrees)\r\n     *\r\n     * Normally, a pie chart begins (the left side of the first slice is drawn)\r\n     * at the top center. (at -90 degrees)\r\n     *\r\n     * You can use `startAngle` to change this setting.\r\n     *\r\n     * E.g. setting this to 0 will make the first slice be drawn to the right.\r\n     *\r\n     * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n     * needs to be 360.\r\n     *\r\n     * However, it's **not** necessary to do so. You can set to those lesser\r\n     * numbers, to create semi-circles.\r\n     *\r\n     * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n     * looks like a quarter of a circle.\r\n     *\r\n     * NOTE: This setting is not supported in a 3D pie chart.\r\n     *\r\n     * @default -90\r\n     * @param value  Start angle (degrees)\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"startAngle\", value)) {\n        this.updateRadius();\n        this.updateSeriesAngles();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PieChart.prototype, \"endAngle\", {\n    /**\r\n     * @return End angle (degrees)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endAngle\");\n    },\n    /**\r\n     * End angle of the Pie circle. (degrees)\r\n     *\r\n     * Normally, a pie chart ends (the right side of the last slice is drawn)\r\n     * at the top center. (at 270 degrees)\r\n     *\r\n     * You can use `endAngle` to change this setting.\r\n     *\r\n     * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n     * needs to be 360.\r\n     *\r\n     * However, it's **not** necessary to do so. You can set to those lesser\r\n     * numbers, to create semi-circles.\r\n     *\r\n     * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n     * looks like a quarter of a circle.\r\n     *\r\n     * NOTE: This setting is not supported in a 3D pie chart.\r\n     *\r\n     * @default 270\r\n     * @param value  End angle (degrees)\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"endAngle\", value)) {\n        this.updateRadius();\n        this.updateSeriesAngles();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PieChart;\n}(PercentChart);\nexport { PieChart };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"PieChart\"] = PieChart;\nregistry.registeredClasses[\"PieChartDataItem\"] = PieChartDataItem;","map":{"version":3,"names":["__extends","PercentChart","PercentChartDataItem","percent","Percent","PieSeries","registry","$iter","$utils","$math","$type","PieChartDataItem","_super","_this","call","className","applyTheme","PieChart","innerRadius","radius","align","valign","startAngle","endAngle","seriesContainer","isMeasured","layout","width","undefined","height","chartContainer","minHeight","minWidth","events","on","updateRadius","_disposers","push","bulletsContainer","x","y","prototype","applyInternalDefaults","hasValue","readerTitle","language","translate","validateLayout","handleSeriesAdded","event","_chartPixelRadius","updateSeriesAngles","series","each","_startAngleInternal","_endAngleInternal","chartCont","rect","getArcRect","innerRect","value","getCommonRectangle","maxRadius","Math","min","innerWidth","innerHeight","isNumber","chartRadius","relativeRadiusToValue","chartPixelInnerRadius","seriesRadius","length","_chartPixelInnerRadius","indexed","iterator","a","i","pixelRadius","pixelInnerRadius","definedBBox","invalidateLayout","Object","defineProperty","get","getPropertyValue","set","setPercentProperty","enumerable","configurable","createSeries","setPropertyValue","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/charts/types/PieChart.js"],"sourcesContent":["/**\r\n * Pie chart module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentChart, PercentChartDataItem } from \"./PercentChart\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { PieSeries } from \"../series/PieSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nvar PieChartDataItem = /** @class */ (function (_super) {\r\n    __extends(PieChartDataItem, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PieChartDataItem() {\r\n        var _this = _super.call(this) || this;\r\n        _this.className = \"PieChartDataItem\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    return PieChartDataItem;\r\n}(PercentChartDataItem));\r\nexport { PieChartDataItem };\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Creates a Pie chart.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.PieChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"PieChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.PieSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"PieSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czechia\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"PieChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChartEvents} for a list of available Events\r\n * @see {@link IPieChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nvar PieChart = /** @class */ (function (_super) {\r\n    __extends(PieChart, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function PieChart() {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        _this.className = \"PieChart\";\r\n        // Set defaults\r\n        _this.innerRadius = 0;\r\n        _this.radius = percent(80);\r\n        _this.align = \"none\";\r\n        _this.valign = \"none\";\r\n        _this.startAngle = -90;\r\n        _this.endAngle = 270;\r\n        var seriesContainer = _this.seriesContainer;\r\n        seriesContainer.isMeasured = true;\r\n        seriesContainer.valign = \"middle\";\r\n        seriesContainer.align = \"center\";\r\n        seriesContainer.layout = \"absolute\";\r\n        seriesContainer.width = undefined;\r\n        seriesContainer.height = undefined;\r\n        // so that the pie is always drawn, even the legend wants all the space\r\n        _this.chartContainer.minHeight = 50;\r\n        _this.chartContainer.minWidth = 50;\r\n        _this.chartContainer.events.on(\"maxsizechanged\", _this.updateRadius, _this, false); // need this for the chart to change radius if legend is removed/disabled\r\n        _this._disposers.push(_this.seriesContainer.events.on(\"positionchanged\", function () {\r\n            _this.bulletsContainer.x = _this.seriesContainer.x;\r\n            _this.bulletsContainer.y = _this.seriesContainer.y;\r\n        }));\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Sets defaults that instantiate some objects that rely on parent, so they\r\n     * cannot be set in constructor.\r\n     */\r\n    PieChart.prototype.applyInternalDefaults = function () {\r\n        _super.prototype.applyInternalDefaults.call(this);\r\n        // Add a default screen reader title for accessibility\r\n        // This will be overridden in screen reader if there are any `titles` set\r\n        if (!$type.hasValue(this.readerTitle)) {\r\n            this.readerTitle = this.language.translate(\"Pie chart\");\r\n        }\r\n    };\r\n    /**\r\n     * (Re)validates the chart, causing it to redraw.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    PieChart.prototype.validateLayout = function () {\r\n        _super.prototype.validateLayout.call(this);\r\n        this.updateRadius();\r\n    };\r\n    /**\r\n     * Decorates a new [[Series]] object with required parameters when it is\r\n     * added to the chart.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param event  Event\r\n     */\r\n    PieChart.prototype.handleSeriesAdded = function (event) {\r\n        _super.prototype.handleSeriesAdded.call(this, event);\r\n        this._chartPixelRadius = undefined;\r\n        this.updateSeriesAngles();\r\n    };\r\n    PieChart.prototype.updateSeriesAngles = function () {\r\n        var _this = this;\r\n        this.series.each(function (series) {\r\n            series._startAngleInternal = _this.startAngle;\r\n            series._endAngleInternal = _this.endAngle;\r\n            //series.defaultState.properties.startAngle = this.startAngle;\r\n            //series.defaultState.properties.endAngle = this.endAngle;\r\n        });\r\n    };\r\n    /**\r\n     * Recalculates pie's radius, based on a number of criteria.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    PieChart.prototype.updateRadius = function () {\r\n        var chartCont = this.chartContainer;\r\n        var rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n        var innerRect = { x: 0, y: 0, width: 0, height: 0 };\r\n        var innerRadius = this.innerRadius;\r\n        if (innerRadius instanceof Percent) {\r\n            innerRect = $math.getArcRect(this.startAngle, this.endAngle, innerRadius.value);\r\n        }\r\n        // @todo handle this when innerRadius set in pixels (do it for radar also)\r\n        rect = $math.getCommonRectangle([rect, innerRect]);\r\n        var maxRadius = Math.min(chartCont.innerWidth / rect.width, chartCont.innerHeight / rect.height);\r\n        if (!$type.isNumber(maxRadius)) {\r\n            maxRadius = 0;\r\n        }\r\n        var chartRadius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n        var chartPixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, maxRadius);\r\n        var seriesRadius = (chartRadius - chartPixelInnerRadius) / this.series.length;\r\n        if (chartRadius != this._chartPixelRadius || chartPixelInnerRadius != this._chartPixelInnerRadius) {\r\n            this._chartPixelRadius = chartRadius;\r\n            this._chartPixelInnerRadius = chartPixelInnerRadius;\r\n            //@todo: make it possible to set series radius in percent\r\n            $iter.each($iter.indexed(this.series.iterator()), function (a) {\r\n                var i = a[0];\r\n                var series = a[1];\r\n                var radius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.radius, chartRadius - chartPixelInnerRadius);\r\n                var innerRadius = chartPixelInnerRadius + $utils.relativeRadiusToValue(series.innerRadius, chartRadius - chartPixelInnerRadius);\r\n                if (!$type.isNumber(radius)) {\r\n                    radius = chartPixelInnerRadius + seriesRadius * (i + 1);\r\n                }\r\n                if (!$type.isNumber(innerRadius)) {\r\n                    innerRadius = chartPixelInnerRadius + seriesRadius * i;\r\n                }\r\n                series.pixelRadius = radius;\r\n                series.pixelInnerRadius = innerRadius;\r\n            });\r\n            this.seriesContainer.definedBBox = { x: chartRadius * rect.x, y: chartRadius * rect.y, width: chartRadius * rect.width, height: chartRadius * rect.height };\r\n            this.seriesContainer.invalidateLayout();\r\n        }\r\n    };\r\n    Object.defineProperty(PieChart.prototype, \"radius\", {\r\n        /**\r\n         * @return Radius (px or relative)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"radius\");\r\n        },\r\n        /**\r\n         * Sets radius of the pie chart.\r\n         *\r\n         * Setting to a number will mean a fixed pixel radius.\r\n         *\r\n         * Setting to an instance of [[Percent]] will mean a relative radius to\r\n         * available space.\r\n         *\r\n         * E.g.:\r\n         *\r\n         * ```TypeScript\r\n         * // Set pie chart to be at 50% of the available space\r\n         * pieChart.radius = am4core.percent(50);\r\n         * ```\r\n         * ```JavaScript\r\n         * // Set pie chart to be at 50% of the available space\r\n         * pieChart.radius = am4core.percent(50);\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // Set pie chart to be at 50% of the available space\r\n         *   \"radius\": \"50%\"\r\n         * }\r\n         * ```\r\n         *\r\n         * @default 80%\r\n         * @param value  Radius (px or relative)\r\n         */\r\n        set: function (value) {\r\n            if (this.setPercentProperty(\"radius\", value, true, false, 10, false)) {\r\n                this.invalidateLayout();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PieChart.prototype, \"innerRadius\", {\r\n        /**\r\n         * @return Relative inner radius (0-1)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"innerRadius\");\r\n        },\r\n        /**\r\n         * Sets relative inner radius (to create a donut chart).\r\n         *\r\n         * Setting to a number will mean a fixed pixel radius.\r\n         *\r\n         * Setting to an instance of [[Percent]] will mean a relative radius to\r\n         * available space.\r\n         *\r\n         * NOTE: it's not related to `radius`.\r\n         *\r\n         * E.g.:\r\n         *\r\n         * ```TypeScript\r\n         * // Set pie chart to be at 50% of the available space\r\n         * pieChart.innerRadius = am4core.percent(50);\r\n         * ```\r\n         * ```JavaScript\r\n         * // Set pie chart to be at 50% of the available space\r\n         * pieChart.innerRadius = am4core.percent(50);\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // Set pie chart to be at 50% of the available space\r\n         *   \"innerRadius\": \"50%\"\r\n         * }\r\n         * ```\r\n         *\r\n         * @default 0\r\n         * @param value  Relative inner radius (0-1)\r\n         * @todo Setting things like `innerRadius` modifies `slice.radius` and it then looks like it is not the same value as in default state\r\n         */\r\n        set: function (value) {\r\n            this.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates a new [[PieSeries]].\r\n     *\r\n     * @return New series\r\n     */\r\n    PieChart.prototype.createSeries = function () {\r\n        return new PieSeries();\r\n    };\r\n    Object.defineProperty(PieChart.prototype, \"startAngle\", {\r\n        /**\r\n         * @return Start angle (degrees)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"startAngle\");\r\n        },\r\n        /**\r\n         * Starting angle of the Pie circle. (degrees)\r\n         *\r\n         * Normally, a pie chart begins (the left side of the first slice is drawn)\r\n         * at the top center. (at -90 degrees)\r\n         *\r\n         * You can use `startAngle` to change this setting.\r\n         *\r\n         * E.g. setting this to 0 will make the first slice be drawn to the right.\r\n         *\r\n         * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n         * needs to be 360.\r\n         *\r\n         * However, it's **not** necessary to do so. You can set to those lesser\r\n         * numbers, to create semi-circles.\r\n         *\r\n         * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n         * looks like a quarter of a circle.\r\n         *\r\n         * NOTE: This setting is not supported in a 3D pie chart.\r\n         *\r\n         * @default -90\r\n         * @param value  Start angle (degrees)\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"startAngle\", value)) {\r\n                this.updateRadius();\r\n                this.updateSeriesAngles();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PieChart.prototype, \"endAngle\", {\r\n        /**\r\n         * @return End angle (degrees)\r\n         */\r\n        get: function () {\r\n            return this.getPropertyValue(\"endAngle\");\r\n        },\r\n        /**\r\n         * End angle of the Pie circle. (degrees)\r\n         *\r\n         * Normally, a pie chart ends (the right side of the last slice is drawn)\r\n         * at the top center. (at 270 degrees)\r\n         *\r\n         * You can use `endAngle` to change this setting.\r\n         *\r\n         * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n         * needs to be 360.\r\n         *\r\n         * However, it's **not** necessary to do so. You can set to those lesser\r\n         * numbers, to create semi-circles.\r\n         *\r\n         * E.g. `startAngle = -90` with `endAngle = 0` will create a Pie chart that\r\n         * looks like a quarter of a circle.\r\n         *\r\n         * NOTE: This setting is not supported in a 3D pie chart.\r\n         *\r\n         * @default 270\r\n         * @param value  End angle (degrees)\r\n         */\r\n        set: function (value) {\r\n            if (this.setPropertyValue(\"endAngle\", value)) {\r\n                this.updateRadius();\r\n                this.updateSeriesAngles();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return PieChart;\r\n}(PercentChart));\r\nexport { PieChart };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart\"] = PieChart;\r\nregistry.registeredClasses[\"PieChartDataItem\"] = PieChartDataItem;\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,SAAS,QAAQ,OAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,YAAY,EAAEC,oBAAoB,QAAQ,gBAAgB;AACnE,SAASC,OAAO,EAAEC,OAAO,QAAQ,0BAA0B;AAC3D,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,OAAO,KAAKC,KAAK,MAAM,2BAA2B;AAClD,OAAO,KAAKC,MAAM,MAAM,wBAAwB;AAChD,OAAO,KAAKC,KAAK,MAAM,uBAAuB;AAC9C,OAAO,KAAKC,KAAK,MAAM,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,gBAAgB,GAAG,aAAe,UAAUC,MAAM,EAAE;EACpDZ,SAAS,CAACW,gBAAgB,EAAEC,MAAM,CAAC;EACnC;AACJ;AACA;EACI,SAASD,gBAAgBA,CAAA,EAAG;IACxB,IAAIE,KAAK,GAAGD,MAAM,CAACE,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI;IACrCD,KAAK,CAACE,SAAS,GAAG,kBAAkB;IACpCF,KAAK,CAACG,UAAU,CAAC,CAAC;IAClB,OAAOH,KAAK;EAChB;EACA,OAAOF,gBAAgB;AAC3B,CAAC,CAACT,oBAAoB,CAAE;AACxB,SAASS,gBAAgB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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"},"metadata":{},"sourceType":"module","externalDependencies":[]}