{"ast":null,"code":"/**\r\n * Handles date and time formatting\r\n */\nimport { __extends } from \"tslib\";\nimport { Language } from \"../utils/Language\";\nimport { BaseObject } from \"../Base\";\nimport { getTextFormatter } from \"../formatters/TextFormatter\";\nimport { registry } from \"../Registry\";\nimport * as $strings from \"../utils/Strings\";\nimport * as $utils from \"../utils/Utils\";\nimport * as $type from \"../utils/Type\";\nimport * as $time from \"../utils/Time\";\n/**\r\n * Handles date and time formatting.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/} Tutorial on date/time formatting\r\n * @todo Better type casting of passed in date?\r\n * @todo Quarter support?\r\n * @todo When parsing named months make the search case-insensitive\r\n * @todo Escape a.m./p.m. properly when used in RegEx\r\n */\nvar DateFormatter = /** @class */function (_super) {\n  __extends(DateFormatter, _super);\n  /**\r\n   * Constructor\r\n   */\n  function DateFormatter() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Date format.\r\n     */\n    _this._dateFormat = \"yyyy-MM-dd\";\n    /**\r\n     * Input date format.\r\n     */\n    _this._inputDateFormat = \"yyyy-MM-dd\";\n    /**\r\n     * Assume UTC time zone.\r\n     */\n    _this._utc = false;\n    /**\r\n     * If `timezone` is set, this will hold minute fraction of the timezone.\r\n     *\r\n     * @readonly\r\n     * @ignore\r\n     */\n    _this.timezoneMinutes = 0;\n    /**\r\n     * First day of week.\r\n     *\r\n     * 0 - Sunday\r\n     * 1 - Monday\r\n     *\r\n     * Etc.\r\n     */\n    _this._firstDayOfWeek = 1;\n    /**\r\n     * A list of month names.\r\n     */\n    _this.months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    /**\r\n     * A list of short month names.\r\n     */\n    _this.monthsShort = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May(short)\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    /**\r\n     * A list of weekday names.\r\n     */\n    _this.weekdays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    /**\r\n     * A list of short weekday names.\r\n     */\n    _this.weekdaysShort = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    /**\r\n     * Output format to produce. If the format calls for applying color to the\r\n     * formatted value, this setting will determine what markup to use: SVG or\r\n     * HTML.\r\n     *\r\n     * Available options: svg, html.\r\n     *\r\n     * @default \"svg\"\r\n     */\n    _this._outputFormat = \"svg\";\n    /**\r\n     * Should the first letter of the formatted date be capitalized?\r\n     *\r\n     * @default true\r\n     */\n    _this.capitalize = true;\n    _this.className = \"DateFormatter\";\n    _this.applyTheme();\n    return _this;\n  }\n  Object.defineProperty(DateFormatter.prototype, \"language\", {\n    /**\r\n     * @return Language\r\n     */\n    get: function () {\n      return this._language;\n    },\n    /**\r\n     * A reference to [[Language]] object.\r\n     *\r\n     * @param  value  Language\r\n     */\n    set: function (value) {\n      this._language = value;\n      this.dateFormat = this._language.translate(\"_date\");\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Formats the date value according to specified format.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/} Tutorial on date/time formatting\r\n   * @param source  Date value\r\n   * @param format  Format\r\n   * @return Formatted date string\r\n   */\n  DateFormatter.prototype.format = function (source, format, applyTimezone) {\n    // No language?\n    if (!this.language) {\n      if (this.sprite) {\n        this.language = this.sprite.language;\n      } else {\n        this.language = new Language();\n      }\n    }\n    // No format passed in or it's empty\n    if (typeof format === \"undefined\" || format === \"\") {\n      format = this._dateFormat;\n    }\n    // Init return value\n    var formatted;\n    // Do casting if required\n    // This will take care of timestamps as well as Date objects\n    var date;\n    if ($type.isString(source)) {\n      // If it's a string, let's try parsing it using our own functionality\n      date = this.parse(source);\n    } else {\n      date = $utils.anyToDate(source);\n    }\n    // Is it a built-in format or Intl.DateTimeFormat\n    if ($type.isObject(format)) {\n      try {\n        if (this.intlLocales) {\n          return new Intl.DateTimeFormat(this.intlLocales, format).format(date);\n        } else {\n          return new Intl.DateTimeFormat(undefined, format).format(date);\n        }\n      } catch (e) {\n        return \"Invalid\";\n      }\n    } else {\n      // Clean format\n      format = $utils.cleanFormat(format);\n      // get format info (it will also deal with parser caching)\n      var info = this.parseFormat(format);\n      // Should we apply custom time zone?\n      if ($type.hasValue(this.timezoneOffset)) {\n        date.setMinutes(date.getMinutes() + date.getTimezoneOffset() - this.timezoneOffset);\n      } else if ($type.hasValue(this.timezone) && applyTimezone !== false) {\n        date = $time.setTimezone(date, this.timezone);\n      }\n      // Check if it's a valid date\n      if (!$type.isNumber(date.getTime())) {\n        return this.language.translate(\"Invalid date\");\n      }\n      // Apply format\n      formatted = this.applyFormat(date, info, this.language);\n      // Capitalize\n      if (this.capitalize) {\n        formatted = formatted.replace(/^.{1}/, formatted.substr(0, 1).toUpperCase());\n      }\n    }\n    // We're done\n    return formatted;\n  };\n  /**\r\n   * Parses format into structured infromation.\r\n   *\r\n   * @param format Format template\r\n   */\n  DateFormatter.prototype.parseFormat = function (format) {\n    // Check cache\n    var cached = this.getCache(format);\n    if ($type.hasValue(cached)) {\n      return cached;\n    }\n    // Init format parse info holder\n    var info = {\n      \"template\": \"\",\n      \"parts\": []\n    };\n    // Let TextFormatter split into chunks\n    var chunks = getTextFormatter().chunk(format, true);\n    for (var i = 0; i < chunks.length; i++) {\n      var chunk = chunks[i];\n      if (chunk.type === \"value\") {\n        // Just \"Date\"?\n        if (chunk.text.match(/^date$/i) && $type.isString(this._dateFormat)) {\n          chunk.text = this._dateFormat;\n        }\n        // Find all possible parts\n        var matches = chunk.text.match(/G|yyyy|yyy|yy|y|YYYY|YYY|YY|Y|u|q|MMMMM|MMMM|MMM|MM|M|ww|w|W|dd|d|DDD|DD|D|F|g|EEEEE|EEEE|EEE|EE|E|eeeee|eeee|eee|ee|e|aaa|aa|a|hh|h|HH|H|KK|K|kk|k|mm|m|ss|s|SSS|SS|S|A|zzzz|zzz|zz|z|ZZ|Z|t|x|nnn|nn|n|i|I/g);\n        // Found?\n        if (matches) {\n          // Populate template\n          for (var x = 0; x < matches.length; x++) {\n            info.parts.push(matches[x]);\n            chunk.text = chunk.text.replace(matches[x], $strings.PLACEHOLDER);\n          }\n        }\n      }\n      // Apply to template\n      info.template += chunk.text;\n    }\n    // Apply style formatting\n    //info.template = getTextFormatter().format(info.template, this.outputFormat);\n    // Save cache\n    this.setCache(format, info);\n    return info;\n  };\n  /**\r\n   * Applies format to Date.\r\n   *\r\n   * @param date      Date object\r\n   * @param info      Parsed format information\r\n   * @param language  Language\r\n   * @return Formatted date string\r\n   */\n  DateFormatter.prototype.applyFormat = function (date, info, language) {\n    // Init return value\n    var res = info.template;\n    // Get values\n    var fullYear,\n      month,\n      weekday,\n      day,\n      hours,\n      minutes,\n      seconds,\n      milliseconds,\n      offset = date.getTimezoneOffset(),\n      timestamp = date.getTime();\n    if (this.utc) {\n      fullYear = date.getUTCFullYear();\n      month = date.getUTCMonth();\n      weekday = date.getUTCDay();\n      day = date.getUTCDate();\n      hours = date.getUTCHours();\n      minutes = date.getUTCMinutes();\n      seconds = date.getUTCSeconds();\n      milliseconds = date.getUTCMilliseconds();\n    } else {\n      fullYear = date.getFullYear();\n      month = date.getMonth();\n      weekday = date.getDay();\n      day = date.getDate();\n      hours = date.getHours();\n      minutes = date.getMinutes();\n      seconds = date.getSeconds();\n      milliseconds = date.getMilliseconds();\n    }\n    // Go through each part and format/replace it in template\n    for (var i = 0, len = info.parts.length; i < len; i++) {\n      var value = \"\";\n      switch (info.parts[i]) {\n        case \"G\":\n          value = language.translate(fullYear < 0 ? \"_era_bc\" : \"_era_ad\");\n          break;\n        case \"yyyy\":\n          value = Math.abs(fullYear).toString();\n          if (fullYear < 0) {\n            value += language.translate(\"_era_bc\");\n          }\n          break;\n        case \"yyy\":\n        case \"yy\":\n        case \"y\":\n          value = Math.abs(fullYear).toString().substr(-info.parts[i].length);\n          if (fullYear < 0) {\n            value += language.translate(\"_era_bc\");\n          }\n          break;\n        case \"YYYY\":\n        case \"YYY\":\n        case \"YY\":\n        case \"Y\":\n          var week = $utils.getWeek(date);\n          var year = fullYear;\n          if (week == 1 && weekday > 4) {\n            year--;\n          }\n          if (info.parts[i] == \"YYYY\") {\n            value = Math.abs(year).toString();\n          } else {\n            value = Math.abs(year).toString().substr(-info.parts[i].length);\n          }\n          if (year < 0) {\n            value += language.translate(\"_era_bc\");\n          }\n          break;\n        case \"u\":\n          // @todo\n          break;\n        case \"q\":\n          value = \"\" + Math.ceil((date.getMonth() + 1) / 3);\n          break;\n        case \"MMMMM\":\n          value = language.translate(this.months[month]).substr(0, 1);\n          break;\n        case \"MMMM\":\n          value = language.translate(this.months[month]);\n          break;\n        case \"MMM\":\n          value = language.translate(this.monthsShort[month]);\n          break;\n        case \"MM\":\n          value = $utils.padString(month + 1, 2, \"0\");\n          break;\n        case \"M\":\n          value = (month + 1).toString();\n          break;\n        case \"ww\":\n          value = $utils.padString($utils.getWeek(date, this.utc), 2, \"0\");\n          break;\n        case \"w\":\n          value = $utils.getWeek(date, this.utc).toString();\n          break;\n        case \"W\":\n          value = $utils.getMonthWeek(date, this.utc).toString();\n          break;\n        case \"dd\":\n          value = $utils.padString(day, 2, \"0\");\n          break;\n        case \"d\":\n          value = day.toString();\n          break;\n        case \"DD\":\n        case \"DDD\":\n          value = $utils.padString($utils.getYearDay(date, this.utc).toString(), info.parts[i].length, \"0\");\n          break;\n        case \"D\":\n          value = $utils.getYearDay(date, this.utc).toString();\n          break;\n        case \"F\":\n          // @todo\n          break;\n        case \"g\":\n          // @todo\n          break;\n        case \"t\":\n          value = language.translateFunc(\"_dateOrd\").call(this, day);\n          break;\n        case \"E\":\n          value = (weekday || 7).toString();\n          break;\n        case \"EE\":\n          value = $utils.padString((weekday || 7).toString(), 2, \"0\");\n          break;\n        case \"EEE\":\n        case \"eee\":\n          value = language.translate(this.weekdaysShort[weekday]);\n          break;\n        case \"EEEE\":\n        case \"eeee\":\n          value = language.translate(this.weekdays[weekday]);\n          break;\n        case \"EEEEE\":\n        case \"eeeee\":\n          value = language.translate(this.weekdays[weekday]).substr(0, 1);\n          break;\n        case \"e\":\n        case \"ee\":\n          value = (weekday - this.firstDayOfWeek + 1).toString();\n          if (info.parts[i] == \"ee\") {\n            value = $utils.padString(value, 2, \"0\");\n          }\n          break;\n        case \"a\":\n          if (hours >= 12) {\n            value = language.translate(\"PM\");\n          } else {\n            value = language.translate(\"AM\");\n          }\n          break;\n        case \"aa\":\n          if (hours >= 12) {\n            value = language.translate(\"P.M.\");\n          } else {\n            value = language.translate(\"A.M.\");\n          }\n          break;\n        case \"aaa\":\n          if (hours >= 12) {\n            value = language.translate(\"P\");\n          } else {\n            value = language.translate(\"A\");\n          }\n          break;\n        case \"h\":\n          value = $utils.get12Hours(hours).toString();\n          break;\n        case \"hh\":\n          value = $utils.padString($utils.get12Hours(hours), 2, \"0\");\n          break;\n        case \"H\":\n          value = hours.toString();\n          break;\n        case \"HH\":\n          value = $utils.padString(hours, 2, \"0\");\n          break;\n        case \"K\":\n          value = $utils.get12Hours(hours, 0).toString();\n          break;\n        case \"KK\":\n          value = $utils.padString($utils.get12Hours(hours, 0), 2, \"0\");\n          break;\n        case \"k\":\n          value = (hours + 1).toString();\n          break;\n        case \"kk\":\n          value = $utils.padString(hours + 1, 2, \"0\");\n          break;\n        case \"m\":\n          value = minutes.toString();\n          break;\n        case \"mm\":\n          value = $utils.padString(minutes, 2, \"0\");\n          break;\n        case \"s\":\n          value = seconds.toString();\n          break;\n        case \"ss\":\n          value = $utils.padString(seconds, 2, \"0\");\n          break;\n        case \"S\":\n        case \"SS\":\n        case \"SSS\":\n          value = Math.round(milliseconds / 1000 * Math.pow(10, info.parts[i].length)).toString();\n          break;\n        case \"x\":\n          value = timestamp.toString();\n          break;\n        case \"n\":\n        case \"nn\":\n        case \"nnn\":\n          value = $utils.padString(milliseconds, info.parts[i].length, \"0\");\n          break;\n        case \"z\":\n          value = $utils.getTimeZone(date, false, false, this.utc);\n          break;\n        case \"zz\":\n          value = $utils.getTimeZone(date, true, false, this.utc);\n          break;\n        case \"zzz\":\n          value = $utils.getTimeZone(date, false, true, this.utc);\n          break;\n        case \"zzzz\":\n          value = $utils.getTimeZone(date, true, true, this.utc);\n          break;\n        case \"Z\":\n        case \"ZZ\":\n          var tz = Math.abs(offset) / 60;\n          var tzh = Math.floor(tz);\n          var tzm = tz * 60 - tzh * 60;\n          if (this.utc) {\n            tzh = 0;\n            tzm = 0;\n          }\n          if (info.parts[i] == \"Z\") {\n            value = \"GMT\";\n            value += offset > 0 ? \"-\" : \"+\";\n            value += $utils.padString(tzh, 2) + \":\" + $utils.padString(tzm, 2);\n          } else {\n            value = offset > 0 ? \"-\" : \"+\";\n            value += $utils.padString(tzh, 2) + $utils.padString(tzm, 2);\n          }\n          break;\n        case \"i\":\n          value = date.toISOString();\n          break;\n        case \"I\":\n          value = date.toUTCString();\n          break;\n      }\n      res = res.replace($strings.PLACEHOLDER, value);\n    }\n    return res;\n  };\n  /**\r\n   * Parses any input value into Date object.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/#Parsing_Dates} Tutorial on date/time parsing\r\n   * @param source  Source value\r\n   * @param format  Source format\r\n   * @return Date object\r\n   */\n  DateFormatter.prototype.parse = function (source, format) {\n    // Format set?\n    if (!$type.hasValue(format)) {\n      format = this.inputDateFormat;\n    }\n    // Is it already a Date\n    if (source instanceof Date) {\n      return source;\n    }\n    // Is it a numeric timestamp\n    if (typeof source === \"number\") {\n      return new Date(source);\n    }\n    // No? Let's check if it's string, and try converting to it if nec\n    if (typeof source !== \"string\") {\n      source = source.toString();\n    }\n    // no language?\n    if (!this.language) {\n      if (this.sprite) {\n        this.language = this.sprite.language;\n      } else {\n        this.language = new Language();\n      }\n    }\n    // Init return value\n    var res;\n    // Init RegEx for parsing\n    var reg = \"\";\n    // Clean format\n    format = $utils.cleanFormat(format);\n    // Clip format to length of the source string\n    format = format.substr(0, source.length);\n    // Parse format\n    var info = this.parseFormat(format);\n    // Init parsed items holder\n    var parsedIndexes = {\n      \"year\": -1,\n      \"year3\": -1,\n      \"year2\": -1,\n      \"year1\": -1,\n      \"month\": -1,\n      \"monthShort\": -1,\n      \"monthLong\": -1,\n      \"weekdayShort\": -1,\n      \"weekdayLong\": -1,\n      \"day\": -1,\n      \"yearDay\": -1,\n      \"week\": -1,\n      \"hourBase0\": -1,\n      \"hour12Base0\": -1,\n      \"hourBase1\": -1,\n      \"hour12Base1\": -1,\n      \"minute\": -1,\n      \"second\": -1,\n      \"millisecond\": -1,\n      \"millisecondDigits\": -1,\n      \"am\": -1,\n      \"zone\": -1,\n      \"timestamp\": -1,\n      \"iso\": -1\n    };\n    // Init values\n    var resValues = {\n      \"year\": 1970,\n      \"month\": 0,\n      \"day\": 1,\n      \"hour\": 0,\n      \"minute\": 0,\n      \"second\": 0,\n      \"millisecond\": 0,\n      \"timestamp\": null,\n      \"offset\": 0,\n      \"utc\": this.utc\n    };\n    // Index adjuster\n    var indexAdjust = 0,\n      index = 0;\n    // Iterate through all of the parts\n    for (var i = 0; i < info.parts.length; i++) {\n      // Set current match index\n      index = i + indexAdjust + 1;\n      switch (info.parts[i]) {\n        case \"yyyy\":\n        case \"YYYY\":\n          reg += \"([0-9]{4})\";\n          parsedIndexes.year = index;\n          break;\n        case \"yyy\":\n        case \"YYY\":\n          reg += \"([0-9]{3})\";\n          parsedIndexes.year3 = index;\n          break;\n        case \"yy\":\n        case \"YY\":\n          reg += \"([0-9]{2})\";\n          parsedIndexes.year2 = index;\n          break;\n        case \"y\":\n        case \"Y\":\n          reg += \"([0-9]{1})\";\n          parsedIndexes.year1 = index;\n          break;\n        case \"MMMM\":\n          reg += \"(\" + this.getStringList(this.months).join(\"|\") + \")\";\n          parsedIndexes.monthLong = index;\n          break;\n        case \"MMM\":\n          reg += \"(\" + this.getStringList(this.monthsShort).join(\"|\") + \")\";\n          parsedIndexes.monthShort = index;\n          break;\n        case \"MM\":\n        case \"M\":\n          reg += \"([0-9]{2}|[0-9]{1})\";\n          parsedIndexes.month = index;\n          break;\n        case \"ww\":\n        case \"w\":\n          reg += \"([0-9]{2}|[0-9]{1})\";\n          parsedIndexes.week = index;\n          break;\n        case \"dd\":\n        case \"d\":\n          reg += \"([0-9]{2}|[0-9]{1})\";\n          parsedIndexes.day = index;\n          break;\n        case \"DDD\":\n        case \"DD\":\n        case \"D\":\n          reg += \"([0-9]{3}|[0-9]{2}|[0-9]{1})\";\n          parsedIndexes.yearDay = index;\n          break;\n        case \"dddd\":\n          reg += \"(\" + this.getStringList(this.weekdays).join(\"|\") + \")\";\n          parsedIndexes.weekdayLong = index;\n          break;\n        case \"ddd\":\n          reg += \"(\" + this.getStringList(this.weekdaysShort).join(\"|\") + \")\";\n          parsedIndexes.weekdayShort = index;\n          break;\n        case \"aaa\":\n        case \"aa\":\n        case \"a\":\n          // TODO: fix (escape regex)\n          reg += \"(\" + this.getStringList([\"AM\", \"PM\", \"A\\.M\\.\", \"P\\.M\\.\", \"A\", \"P\"]).join(\"|\") + \")\";\n          parsedIndexes.am = index;\n          break;\n        case \"hh\":\n        case \"h\":\n          reg += \"([0-9]{2}|[0-9]{1})\";\n          parsedIndexes.hour12Base1 = index;\n          break;\n        case \"HH\":\n        case \"H\":\n          reg += \"([0-9]{2}|[0-9]{1})\";\n          parsedIndexes.hourBase0 = index;\n          break;\n        case \"KK\":\n        case \"K\":\n          reg += \"([0-9]{2}|[0-9]{1})\";\n          parsedIndexes.hour12Base0 = index;\n          break;\n        case \"kk\":\n        case \"k\":\n          reg += \"([0-9]{2}|[0-9]{1})\";\n          parsedIndexes.hourBase1 = index;\n          break;\n        case \"mm\":\n        case \"m\":\n          reg += \"([0-9]{2}|[0-9]{1})\";\n          parsedIndexes.minute = index;\n          break;\n        case \"ss\":\n        case \"s\":\n          reg += \"([0-9]{2}|[0-9]{1})\";\n          parsedIndexes.second = index;\n          break;\n        case \"SSS\":\n        case \"SS\":\n        case \"S\":\n          reg += \"([0-9]{3}|[0-9]{2}|[0-9]{1})\";\n          parsedIndexes.millisecond = index;\n          parsedIndexes.millisecondDigits = info.parts[i].length;\n          break;\n        case \"nnn\":\n        case \"nn\":\n        case \"n\":\n          reg += \"([0-9]{3}|[0-9]{2}|[0-9]{1})\";\n          parsedIndexes.millisecond = index;\n          break;\n        case \"x\":\n          reg += \"([0-9]{1,})\";\n          parsedIndexes.timestamp = index;\n          break;\n        case \"Z\":\n          reg += \"GMT([-+]+[0-9]{2}:[0-9]{2})\";\n          parsedIndexes.zone = index;\n          break;\n        case \"ZZ\":\n          reg += \"([\\\\-+]+[0-9]{2}[0-9]{2})\";\n          parsedIndexes.zone = index;\n          break;\n        case \"i\":\n          reg += \"([0-9]{4})-?([0-9]{2})-?([0-9]{2})T?([0-9]{2}):?([0-9]{2}):?([0-9]{2})\\.?([0-9]{0,3})([zZ]|[+\\-][0-9]{2}:?[0-9]{2}|$)\";\n          parsedIndexes.iso = index;\n          indexAdjust += 7;\n          break;\n        case \"G\":\n        case \"YYYY\":\n        case \"YYY\":\n        case \"YY\":\n        case \"Y\":\n        case \"MMMMM\":\n        case \"W\":\n        case \"EEEEE\":\n        case \"EEEE\":\n        case \"EEE\":\n        case \"EE\":\n        case \"E\":\n        case \"eeeee\":\n        case \"eeee\":\n        case \"eee\":\n        case \"ee\":\n        case \"e\":\n        case \"zzzz\":\n        case \"zzz\":\n        case \"zz\":\n        case \"z\":\n        case \"t\":\n          // Ignore\n          indexAdjust--;\n          break;\n      }\n      reg += \"[^0-9]*\";\n    }\n    // Try matching\n    var regex = new RegExp(reg);\n    var matches = source.match(regex);\n    if (matches) {\n      // Populate the date object\n      // Full year\n      if (parsedIndexes.year > -1) {\n        resValues.year = parseInt(matches[parsedIndexes.year]);\n      }\n      // 3-digit year\n      if (parsedIndexes.year3 > -1) {\n        var val = parseInt(matches[parsedIndexes.year3]);\n        val += 1000;\n        resValues.year = val;\n      }\n      // 2-digit year\n      if (parsedIndexes.year2 > -1) {\n        var val = parseInt(matches[parsedIndexes.year2]);\n        if (val > 50) {\n          val += 1000;\n        } else {\n          val += 2000;\n        }\n        resValues.year = val;\n      }\n      // 1-digit year\n      if (parsedIndexes.year1 > -1) {\n        var val = parseInt(matches[parsedIndexes.year1]);\n        val = Math.floor(new Date().getFullYear() / 10) * 10 + val;\n        resValues.year = val;\n      }\n      // Full month\n      if (parsedIndexes.monthLong > -1) {\n        resValues.month = this.resolveMonth(matches[parsedIndexes.monthLong]);\n      }\n      // Short month\n      if (parsedIndexes.monthShort > -1) {\n        resValues.month = this.resolveShortMonth(matches[parsedIndexes.monthShort]);\n      }\n      // Numeric month\n      if (parsedIndexes.month > -1) {\n        resValues.month = parseInt(matches[parsedIndexes.month]) - 1;\n      }\n      // Weekday\n      // @todo\n      // Week\n      if (parsedIndexes.week > -1 && parsedIndexes.day === -1) {\n        // We parse weeks ONLY if day is not explicitly set\n        // TODO: this needs work\n        // (but maybe later - I can hardly imagine anyone passing their dates in weeks)\n        resValues.month = 0;\n        resValues.day = $utils.getDayFromWeek(parseInt(matches[parsedIndexes.week]), resValues.year, 1, this.utc);\n      }\n      // Day\n      if (parsedIndexes.day > -1) {\n        resValues.day = parseInt(matches[parsedIndexes.day]);\n      }\n      // Year day\n      if (parsedIndexes.yearDay > -1) {\n        resValues.month = 0;\n        resValues.day = parseInt(matches[parsedIndexes.yearDay]);\n      }\n      // 24 Hour (0-23)\n      if (parsedIndexes.hourBase0 > -1) {\n        resValues.hour = parseInt(matches[parsedIndexes.hourBase0]);\n      }\n      // 24 Hour (1-24)\n      if (parsedIndexes.hourBase1 > -1) {\n        resValues.hour = parseInt(matches[parsedIndexes.hourBase1]) - 1;\n      }\n      // 12 Hour (0-11)\n      if (parsedIndexes.hour12Base0 > -1) {\n        var val = parseInt(matches[parsedIndexes.hour12Base0]);\n        if (val == 11) {\n          val = 0;\n        }\n        if (parsedIndexes.am > -1 && !this.isAm(matches[parsedIndexes.am])) {\n          val += 12;\n        }\n        resValues.hour = val;\n      }\n      // 12 Hour (1-12)\n      if (parsedIndexes.hour12Base1 > -1) {\n        var val = parseInt(matches[parsedIndexes.hour12Base1]);\n        if (val == 12) {\n          val = 0;\n        }\n        if (parsedIndexes.am > -1 && !this.isAm(matches[parsedIndexes.am])) {\n          val += 12;\n        }\n        resValues.hour = val;\n      }\n      // Minute\n      if (parsedIndexes.minute > -1) {\n        resValues.minute = parseInt(matches[parsedIndexes.minute]);\n      }\n      // Second\n      if (parsedIndexes.second > -1) {\n        resValues.second = parseInt(matches[parsedIndexes.second]);\n      }\n      // Millisecond\n      if (parsedIndexes.millisecond > -1) {\n        var val = parseInt(matches[parsedIndexes.millisecond]);\n        if (parsedIndexes.millisecondDigits == 2) {\n          val *= 10;\n        } else if (parsedIndexes.millisecondDigits == 1) {\n          val *= 100;\n        }\n        resValues.millisecond = val;\n      }\n      // Timestamp\n      if (parsedIndexes.timestamp > -1) {\n        resValues.timestamp = parseInt(matches[parsedIndexes.timestamp]);\n        var ts = new Date(resValues.timestamp);\n        resValues.year = ts.getUTCFullYear();\n        resValues.month = ts.getUTCMonth();\n        resValues.day = ts.getUTCDate();\n        resValues.hour = ts.getUTCHours();\n        resValues.minute = ts.getUTCMinutes();\n        resValues.second = ts.getUTCSeconds();\n        resValues.millisecond = ts.getUTCMilliseconds();\n      }\n      // Adjust time zone\n      if (parsedIndexes.zone > -1) {\n        resValues.offset = this.resolveTimezoneOffset(new Date(resValues.year, resValues.month, resValues.day), matches[parsedIndexes.zone]);\n      }\n      // ISO\n      if (parsedIndexes.iso > -1) {\n        resValues.year = $type.toNumber(matches[parsedIndexes.iso + 0]);\n        resValues.month = $type.toNumber(matches[parsedIndexes.iso + 1]) - 1;\n        resValues.day = $type.toNumber(matches[parsedIndexes.iso + 2]);\n        resValues.hour = $type.toNumber(matches[parsedIndexes.iso + 3]);\n        resValues.minute = $type.toNumber(matches[parsedIndexes.iso + 4]);\n        resValues.second = $type.toNumber(matches[parsedIndexes.iso + 5]);\n        resValues.millisecond = $type.toNumber(matches[parsedIndexes.iso + 6]);\n        if (matches[parsedIndexes.iso + 7] == \"Z\" || matches[parsedIndexes.iso + 7] == \"z\") {\n          resValues.utc = true;\n        } else if (matches[parsedIndexes.iso + 7] != \"\") {\n          resValues.offset = this.resolveTimezoneOffset(new Date(resValues.year, resValues.month, resValues.day), matches[parsedIndexes.iso + 7]);\n        }\n      }\n      // Create Date object\n      if (resValues.utc) {\n        res = new Date(Date.UTC(resValues.year, resValues.month, resValues.day, resValues.hour, resValues.minute, resValues.second, resValues.millisecond));\n      } else {\n        res = new Date(resValues.year, resValues.month, resValues.day, resValues.hour, resValues.minute + resValues.offset, resValues.second, resValues.millisecond);\n      }\n    } else {\n      // Didn't match anything\n      // Let's try dropping it into Date constructor and hope for the best\n      res = new Date(source);\n    }\n    return res;\n  };\n  DateFormatter.prototype.resolveTimezoneOffset = function (date, zone) {\n    var value = zone.match(/([+\\-]?)([0-9]{2}):?([0-9]{2})/);\n    if (value) {\n      var match = $type.getValue(zone.match(/([+\\-]?)([0-9]{2}):?([0-9]{2})/));\n      var dir = match[1];\n      var hour = match[2];\n      var minute = match[3];\n      var offset = parseInt(hour) * 60 + parseInt(minute);\n      // Adjust offset\n      // Making it negative does not seem to make sense, but it's right\n      // because of how JavaScript calculates GMT offsets\n      if (dir == \"+\") {\n        offset *= -1;\n      }\n      // Check the difference in offset\n      var originalOffset = (date || new Date()).getTimezoneOffset();\n      var diff = offset - originalOffset;\n      return diff;\n    }\n    return 0;\n  };\n  /**\r\n   * Resolves month name (i.e. \"December\") into a month number (11).\r\n   *\r\n   * @param value  Month name\r\n   * @return Month number\r\n   */\n  DateFormatter.prototype.resolveMonth = function (value) {\n    // Let's try English first\n    var month = this.months.indexOf(value);\n    if (month > -1) {\n      return month;\n    }\n    // Try the translation\n    if (this.language && !this.language.isDefault()) {\n      month = this.language.translateAll(this.months).indexOf(value);\n      if (month > -1) {\n        return month;\n      }\n    }\n    return 0;\n  };\n  /**\r\n   * Resolves short month name (i.e. \"Dec\") into a month number.\r\n   *\r\n   * @param value  Short month name\r\n   * @return Month number\r\n   */\n  DateFormatter.prototype.resolveShortMonth = function (value) {\n    // Let's try English first\n    var month = this.monthsShort.indexOf(value);\n    if (month > -1) {\n      return month;\n    }\n    // Maybe long month (workaround for May)\n    month = this.months.indexOf(value);\n    if (month > -1) {\n      return month;\n    }\n    // Try the translation\n    if (this.language && !this.language.isDefault()) {\n      month = this.language.translateAll(this.monthsShort).indexOf(value);\n      if (month > -1) {\n        return month;\n      }\n    }\n    return 0;\n  };\n  /**\r\n   * Checks if passed in string represents AM/PM notation in many of its\r\n   * versions.\r\n   *\r\n   * @param value  Source string\r\n   * @return Is it AM/PM?\r\n   */\n  DateFormatter.prototype.isAm = function (value) {\n    var list = this.getStringList([\"AM\", \"A.M.\", \"A\"]);\n    return list.indexOf(value.toUpperCase()) > -1;\n  };\n  /**\r\n   * Invalidates related [[Sprite]] causing it to redraw.\r\n   */\n  DateFormatter.prototype.invalidateSprite = function () {\n    if (this.sprite) {\n      this.sprite.invalidate();\n    }\n  };\n  /**\r\n   * Translates list of strings.\r\n   *\r\n   * @param list  Source strings\r\n   * @return Translated strings\r\n   */\n  DateFormatter.prototype.getStringList = function (list) {\n    var res = [];\n    for (var i = 0; i < list.length; i++) {\n      // translate?\n      if (this.language) {\n        res.push($utils.escapeForRgex(this.language.translate(list[i])));\n      } else {\n        res.push($utils.escapeForRgex(list[i]));\n      }\n    }\n    return res;\n  };\n  Object.defineProperty(DateFormatter.prototype, \"dateFormat\", {\n    /**\r\n     * @return Date format\r\n     */\n    get: function () {\n      return this._dateFormat;\n    },\n    /**\r\n     * Date format to use.\r\n     *\r\n     * If format is not supplied in-line in the string, this setting will be\r\n     * used.\r\n     *\r\n     * @default \"yyyy-MM-dd\"\r\n     * @param value Date format\r\n     */\n    set: function (value) {\n      this._dateFormat = value;\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateFormatter.prototype, \"inputDateFormat\", {\n    /**\r\n     * @return Date format\r\n     */\n    get: function () {\n      return this._inputDateFormat;\n    },\n    /**\r\n     * Date format to use when parsing dates.\r\n     *\r\n     * @default \"yyyy-MM-dd\"\r\n     * @param value Date format\r\n     */\n    set: function (value) {\n      this._inputDateFormat = value;\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateFormatter.prototype, \"intlLocales\", {\n    /**\r\n     * @return Date format\r\n     */\n    get: function () {\n      return this._intlLocales;\n    },\n    /**\r\n     * Locales if you are using date formats in `Intl.DateTimeFormatOptions` syntax.\r\n     *\r\n     * @param value Locales\r\n     */\n    set: function (value) {\n      this._intlLocales = value;\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateFormatter.prototype, \"utc\", {\n    /**\r\n     * @return Use UTC?\r\n     */\n    get: function () {\n      return this._utc;\n    },\n    /**\r\n     * Should formatter use UTC functions?\r\n     *\r\n     * If UTC is used, all date/time values will be independent on client's\r\n     * time zone.\r\n     *\r\n     * @param value Use UTC?\r\n     */\n    set: function (value) {\n      this._utc = value;\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateFormatter.prototype, \"timezoneOffset\", {\n    /**\r\n     * @return Offset (minutes)\r\n     */\n    get: function () {\n      return this._timezoneOffset;\n    },\n    /**\r\n     * If set, will apply specific offset in minutes before formatting the date\r\n     * text.\r\n     *\r\n     * The value is a number of minutes from target time zone to UTC.\r\n     *\r\n     * E.g. `300` will recalculate Dates in \"GMT-5\" time zone.\r\n     *\r\n     * @param  value  Offset (minutes)\r\n     */\n    set: function (value) {\n      if (this._timezoneOffset != value) {\n        this._timezoneOffset = value;\n        this.invalidateSprite();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateFormatter.prototype, \"timezone\", {\n    /**\r\n     * @return Timezone\r\n     */\n    get: function () {\n      return this._timezone;\n    },\n    /**\r\n     * If set, will format date/time in specific time zone.\r\n     *\r\n     * The value should be named time zone, e.g.:\r\n     * `\"America/Vancouver\"`, `\"Australia/Sydney\"`, `\"UTC\"`.\r\n     *\r\n     * @since 4.10.1\r\n     * @param  value  Timezone\r\n     */\n    set: function (value) {\n      if (this._timezone != value) {\n        this._timezone = value;\n        this.timezoneMinutes = $time.getTimezoneMinutes(value);\n        this.invalidateSprite();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateFormatter.prototype, \"firstDayOfWeek\", {\n    /**\r\n     * @return First day of week\r\n     */\n    get: function () {\n      return this._firstDayOfWeek;\n    },\n    /**\r\n     * First day of the week:\r\n     *\r\n     * * 0 - Sunday\r\n     * * 1 - Monday\r\n     * * 2 - Tuesday\r\n     *\r\n     * Etc.\r\n     *\r\n     * @param value First day of week\r\n     */\n    set: function (value) {\n      this._firstDayOfWeek = value;\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateFormatter.prototype, \"outputFormat\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Format\r\n     */\n    get: function () {\n      return this._outputFormat;\n    },\n    /**\r\n     * Output format for the formatted date.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Format\r\n     */\n    set: function (value) {\n      this._outputFormat = value.toLowerCase();\n      this.invalidateSprite();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return DateFormatter;\n}(BaseObject);\nexport { DateFormatter };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"DateFormatter\"] = DateFormatter;","map":{"version":3,"names":["__extends","Language","BaseObject","getTextFormatter","registry","$strings","$utils","$type","$time","DateFormatter","_super","_this","call","_dateFormat","_inputDateFormat","_utc","timezoneMinutes","_firstDayOfWeek","months","monthsShort","weekdays","weekdaysShort","_outputFormat","capitalize","className","applyTheme","Object","defineProperty","prototype","get","_language","set","value","dateFormat","translate","enumerable","configurable","format","source","applyTimezone","language","sprite","formatted","date","isString","parse","anyToDate","isObject","intlLocales","Intl","DateTimeFormat","undefined","e","cleanFormat","info","parseFormat","hasValue","timezoneOffset","setMinutes","getMinutes","getTimezoneOffset","timezone","setTimezone","isNumber","getTime","applyFormat","replace","substr","toUpperCase","cached","getCache","chunks","chunk","i","length","type","text","match","matches","x","parts","push","PLACEHOLDER","template","setCache","res","fullYear","month","weekday","day","hours","minutes","seconds","milliseconds","offset","timestamp","utc","getUTCFullYear","getUTCMonth","getUTCDay","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","getFullYear","getMonth","getDay","getDate","getHours","getSeconds","getMilliseconds","len","Math","abs","toString","week","getWeek","year","ceil","padString","getMonthWeek","getYearDay","translateFunc","firstDayOfWeek","get12Hours","round","pow","getTimeZone","tz","tzh","floor","tzm","toISOString","toUTCString","inputDateFormat","Date","reg","parsedIndexes","resValues","indexAdjust","index","year3","year2","year1","getStringList","join","monthLong","monthShort","yearDay","weekdayLong","weekdayShort","am","hour12Base1","hourBase0","hour12Base0","hourBase1","minute","second","millisecond","millisecondDigits","zone","iso","regex","RegExp","parseInt","val","resolveMonth","resolveShortMonth","getDayFromWeek","hour","isAm","ts","resolveTimezoneOffset","toNumber","UTC","getValue","dir","originalOffset","diff","indexOf","isDefault","translateAll","list","invalidateSprite","invalidate","escapeForRgex","_intlLocales","_timezoneOffset","_timezone","getTimezoneMinutes","toLowerCase","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/formatters/DateFormatter.js"],"sourcesContent":["/**\r\n * Handles date and time formatting\r\n */\r\nimport { __extends } from \"tslib\";\r\nimport { Language } from \"../utils/Language\";\r\nimport { BaseObject } from \"../Base\";\r\nimport { getTextFormatter } from \"../formatters/TextFormatter\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $strings from \"../utils/Strings\";\r\nimport * as $utils from \"../utils/Utils\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $time from \"../utils/Time\";\r\n/**\r\n * Handles date and time formatting.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/} Tutorial on date/time formatting\r\n * @todo Better type casting of passed in date?\r\n * @todo Quarter support?\r\n * @todo When parsing named months make the search case-insensitive\r\n * @todo Escape a.m./p.m. properly when used in RegEx\r\n */\r\nvar DateFormatter = /** @class */ (function (_super) {\r\n    __extends(DateFormatter, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function DateFormatter() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Date format.\r\n         */\r\n        _this._dateFormat = \"yyyy-MM-dd\";\r\n        /**\r\n         * Input date format.\r\n         */\r\n        _this._inputDateFormat = \"yyyy-MM-dd\";\r\n        /**\r\n         * Assume UTC time zone.\r\n         */\r\n        _this._utc = false;\r\n        /**\r\n         * If `timezone` is set, this will hold minute fraction of the timezone.\r\n         *\r\n         * @readonly\r\n         * @ignore\r\n         */\r\n        _this.timezoneMinutes = 0;\r\n        /**\r\n         * First day of week.\r\n         *\r\n         * 0 - Sunday\r\n         * 1 - Monday\r\n         *\r\n         * Etc.\r\n         */\r\n        _this._firstDayOfWeek = 1;\r\n        /**\r\n         * A list of month names.\r\n         */\r\n        _this.months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n        /**\r\n         * A list of short month names.\r\n         */\r\n        _this.monthsShort = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May(short)\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\n        /**\r\n         * A list of weekday names.\r\n         */\r\n        _this.weekdays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n        /**\r\n         * A list of short weekday names.\r\n         */\r\n        _this.weekdaysShort = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n        /**\r\n         * Output format to produce. If the format calls for applying color to the\r\n         * formatted value, this setting will determine what markup to use: SVG or\r\n         * HTML.\r\n         *\r\n         * Available options: svg, html.\r\n         *\r\n         * @default \"svg\"\r\n         */\r\n        _this._outputFormat = \"svg\";\r\n        /**\r\n         * Should the first letter of the formatted date be capitalized?\r\n         *\r\n         * @default true\r\n         */\r\n        _this.capitalize = true;\r\n        _this.className = \"DateFormatter\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DateFormatter.prototype, \"language\", {\r\n        /**\r\n         * @return Language\r\n         */\r\n        get: function () {\r\n            return this._language;\r\n        },\r\n        /**\r\n         * A reference to [[Language]] object.\r\n         *\r\n         * @param  value  Language\r\n         */\r\n        set: function (value) {\r\n            this._language = value;\r\n            this.dateFormat = this._language.translate(\"_date\");\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Formats the date value according to specified format.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/} Tutorial on date/time formatting\r\n     * @param source  Date value\r\n     * @param format  Format\r\n     * @return Formatted date string\r\n     */\r\n    DateFormatter.prototype.format = function (source, format, applyTimezone) {\r\n        // No language?\r\n        if (!this.language) {\r\n            if (this.sprite) {\r\n                this.language = this.sprite.language;\r\n            }\r\n            else {\r\n                this.language = new Language();\r\n            }\r\n        }\r\n        // No format passed in or it's empty\r\n        if (typeof format === \"undefined\" || format === \"\") {\r\n            format = this._dateFormat;\r\n        }\r\n        // Init return value\r\n        var formatted;\r\n        // Do casting if required\r\n        // This will take care of timestamps as well as Date objects\r\n        var date;\r\n        if ($type.isString(source)) {\r\n            // If it's a string, let's try parsing it using our own functionality\r\n            date = this.parse(source);\r\n        }\r\n        else {\r\n            date = $utils.anyToDate(source);\r\n        }\r\n        // Is it a built-in format or Intl.DateTimeFormat\r\n        if ($type.isObject(format)) {\r\n            try {\r\n                if (this.intlLocales) {\r\n                    return new Intl.DateTimeFormat(this.intlLocales, format).format(date);\r\n                }\r\n                else {\r\n                    return new Intl.DateTimeFormat(undefined, format).format(date);\r\n                }\r\n            }\r\n            catch (e) {\r\n                return \"Invalid\";\r\n            }\r\n        }\r\n        else {\r\n            // Clean format\r\n            format = $utils.cleanFormat(format);\r\n            // get format info (it will also deal with parser caching)\r\n            var info = this.parseFormat(format);\r\n            // Should we apply custom time zone?\r\n            if ($type.hasValue(this.timezoneOffset)) {\r\n                date.setMinutes(date.getMinutes() + date.getTimezoneOffset() - this.timezoneOffset);\r\n            }\r\n            else if ($type.hasValue(this.timezone) && applyTimezone !== false) {\r\n                date = $time.setTimezone(date, this.timezone);\r\n            }\r\n            // Check if it's a valid date\r\n            if (!$type.isNumber(date.getTime())) {\r\n                return this.language.translate(\"Invalid date\");\r\n            }\r\n            // Apply format\r\n            formatted = this.applyFormat(date, info, this.language);\r\n            // Capitalize\r\n            if (this.capitalize) {\r\n                formatted = formatted.replace(/^.{1}/, formatted.substr(0, 1).toUpperCase());\r\n            }\r\n        }\r\n        // We're done\r\n        return formatted;\r\n    };\r\n    /**\r\n     * Parses format into structured infromation.\r\n     *\r\n     * @param format Format template\r\n     */\r\n    DateFormatter.prototype.parseFormat = function (format) {\r\n        // Check cache\r\n        var cached = this.getCache(format);\r\n        if ($type.hasValue(cached)) {\r\n            return cached;\r\n        }\r\n        // Init format parse info holder\r\n        var info = {\r\n            \"template\": \"\",\r\n            \"parts\": []\r\n        };\r\n        // Let TextFormatter split into chunks\r\n        var chunks = getTextFormatter().chunk(format, true);\r\n        for (var i = 0; i < chunks.length; i++) {\r\n            var chunk = chunks[i];\r\n            if (chunk.type === \"value\") {\r\n                // Just \"Date\"?\r\n                if (chunk.text.match(/^date$/i) && $type.isString(this._dateFormat)) {\r\n                    chunk.text = this._dateFormat;\r\n                }\r\n                // Find all possible parts\r\n                var matches = chunk.text.match(/G|yyyy|yyy|yy|y|YYYY|YYY|YY|Y|u|q|MMMMM|MMMM|MMM|MM|M|ww|w|W|dd|d|DDD|DD|D|F|g|EEEEE|EEEE|EEE|EE|E|eeeee|eeee|eee|ee|e|aaa|aa|a|hh|h|HH|H|KK|K|kk|k|mm|m|ss|s|SSS|SS|S|A|zzzz|zzz|zz|z|ZZ|Z|t|x|nnn|nn|n|i|I/g);\r\n                // Found?\r\n                if (matches) {\r\n                    // Populate template\r\n                    for (var x = 0; x < matches.length; x++) {\r\n                        info.parts.push(matches[x]);\r\n                        chunk.text = chunk.text.replace(matches[x], $strings.PLACEHOLDER);\r\n                    }\r\n                }\r\n            }\r\n            // Apply to template\r\n            info.template += chunk.text;\r\n        }\r\n        // Apply style formatting\r\n        //info.template = getTextFormatter().format(info.template, this.outputFormat);\r\n        // Save cache\r\n        this.setCache(format, info);\r\n        return info;\r\n    };\r\n    /**\r\n     * Applies format to Date.\r\n     *\r\n     * @param date      Date object\r\n     * @param info      Parsed format information\r\n     * @param language  Language\r\n     * @return Formatted date string\r\n     */\r\n    DateFormatter.prototype.applyFormat = function (date, info, language) {\r\n        // Init return value\r\n        var res = info.template;\r\n        // Get values\r\n        var fullYear, month, weekday, day, hours, minutes, seconds, milliseconds, offset = date.getTimezoneOffset(), timestamp = date.getTime();\r\n        if (this.utc) {\r\n            fullYear = date.getUTCFullYear();\r\n            month = date.getUTCMonth();\r\n            weekday = date.getUTCDay();\r\n            day = date.getUTCDate();\r\n            hours = date.getUTCHours();\r\n            minutes = date.getUTCMinutes();\r\n            seconds = date.getUTCSeconds();\r\n            milliseconds = date.getUTCMilliseconds();\r\n        }\r\n        else {\r\n            fullYear = date.getFullYear();\r\n            month = date.getMonth();\r\n            weekday = date.getDay();\r\n            day = date.getDate();\r\n            hours = date.getHours();\r\n            minutes = date.getMinutes();\r\n            seconds = date.getSeconds();\r\n            milliseconds = date.getMilliseconds();\r\n        }\r\n        // Go through each part and format/replace it in template\r\n        for (var i = 0, len = info.parts.length; i < len; i++) {\r\n            var value = \"\";\r\n            switch (info.parts[i]) {\r\n                case \"G\":\r\n                    value = language.translate(fullYear < 0\r\n                        ? \"_era_bc\"\r\n                        : \"_era_ad\");\r\n                    break;\r\n                case \"yyyy\":\r\n                    value = Math.abs(fullYear).toString();\r\n                    if (fullYear < 0) {\r\n                        value += language.translate(\"_era_bc\");\r\n                    }\r\n                    break;\r\n                case \"yyy\":\r\n                case \"yy\":\r\n                case \"y\":\r\n                    value = Math.abs(fullYear).toString().substr(-info.parts[i].length);\r\n                    if (fullYear < 0) {\r\n                        value += language.translate(\"_era_bc\");\r\n                    }\r\n                    break;\r\n                case \"YYYY\":\r\n                case \"YYY\":\r\n                case \"YY\":\r\n                case \"Y\":\r\n                    var week = $utils.getWeek(date);\r\n                    var year = fullYear;\r\n                    if (week == 1 && (weekday > 4)) {\r\n                        year--;\r\n                    }\r\n                    if (info.parts[i] == \"YYYY\") {\r\n                        value = Math.abs(year).toString();\r\n                    }\r\n                    else {\r\n                        value = Math.abs(year).toString().substr(-info.parts[i].length);\r\n                    }\r\n                    if (year < 0) {\r\n                        value += language.translate(\"_era_bc\");\r\n                    }\r\n                    break;\r\n                case \"u\":\r\n                    // @todo\r\n                    break;\r\n                case \"q\":\r\n                    value = \"\" + Math.ceil((date.getMonth() + 1) / 3);\r\n                    break;\r\n                case \"MMMMM\":\r\n                    value = language.translate(this.months[month]).substr(0, 1);\r\n                    break;\r\n                case \"MMMM\":\r\n                    value = language.translate(this.months[month]);\r\n                    break;\r\n                case \"MMM\":\r\n                    value = language.translate(this.monthsShort[month]);\r\n                    break;\r\n                case \"MM\":\r\n                    value = $utils.padString(month + 1, 2, \"0\");\r\n                    break;\r\n                case \"M\":\r\n                    value = (month + 1).toString();\r\n                    break;\r\n                case \"ww\":\r\n                    value = $utils.padString($utils.getWeek(date, this.utc), 2, \"0\");\r\n                    break;\r\n                case \"w\":\r\n                    value = $utils.getWeek(date, this.utc).toString();\r\n                    break;\r\n                case \"W\":\r\n                    value = $utils.getMonthWeek(date, this.utc).toString();\r\n                    break;\r\n                case \"dd\":\r\n                    value = $utils.padString(day, 2, \"0\");\r\n                    break;\r\n                case \"d\":\r\n                    value = day.toString();\r\n                    break;\r\n                case \"DD\":\r\n                case \"DDD\":\r\n                    value = $utils.padString($utils.getYearDay(date, this.utc).toString(), info.parts[i].length, \"0\");\r\n                    break;\r\n                case \"D\":\r\n                    value = $utils.getYearDay(date, this.utc).toString();\r\n                    break;\r\n                case \"F\":\r\n                    // @todo\r\n                    break;\r\n                case \"g\":\r\n                    // @todo\r\n                    break;\r\n                case \"t\":\r\n                    value = language.translateFunc(\"_dateOrd\").call(this, day);\r\n                    break;\r\n                case \"E\":\r\n                    value = (weekday || 7).toString();\r\n                    break;\r\n                case \"EE\":\r\n                    value = $utils.padString((weekday || 7).toString(), 2, \"0\");\r\n                    break;\r\n                case \"EEE\":\r\n                case \"eee\":\r\n                    value = language.translate(this.weekdaysShort[weekday]);\r\n                    break;\r\n                case \"EEEE\":\r\n                case \"eeee\":\r\n                    value = language.translate(this.weekdays[weekday]);\r\n                    break;\r\n                case \"EEEEE\":\r\n                case \"eeeee\":\r\n                    value = language.translate(this.weekdays[weekday]).substr(0, 1);\r\n                    break;\r\n                case \"e\":\r\n                case \"ee\":\r\n                    value = (weekday - this.firstDayOfWeek + 1).toString();\r\n                    if (info.parts[i] == \"ee\") {\r\n                        value = $utils.padString(value, 2, \"0\");\r\n                    }\r\n                    break;\r\n                case \"a\":\r\n                    if (hours >= 12) {\r\n                        value = language.translate(\"PM\");\r\n                    }\r\n                    else {\r\n                        value = language.translate(\"AM\");\r\n                    }\r\n                    break;\r\n                case \"aa\":\r\n                    if (hours >= 12) {\r\n                        value = language.translate(\"P.M.\");\r\n                    }\r\n                    else {\r\n                        value = language.translate(\"A.M.\");\r\n                    }\r\n                    break;\r\n                case \"aaa\":\r\n                    if (hours >= 12) {\r\n                        value = language.translate(\"P\");\r\n                    }\r\n                    else {\r\n                        value = language.translate(\"A\");\r\n                    }\r\n                    break;\r\n                case \"h\":\r\n                    value = $utils.get12Hours(hours).toString();\r\n                    break;\r\n                case \"hh\":\r\n                    value = $utils.padString($utils.get12Hours(hours), 2, \"0\");\r\n                    break;\r\n                case \"H\":\r\n                    value = hours.toString();\r\n                    break;\r\n                case \"HH\":\r\n                    value = $utils.padString(hours, 2, \"0\");\r\n                    break;\r\n                case \"K\":\r\n                    value = $utils.get12Hours(hours, 0).toString();\r\n                    break;\r\n                case \"KK\":\r\n                    value = $utils.padString($utils.get12Hours(hours, 0), 2, \"0\");\r\n                    break;\r\n                case \"k\":\r\n                    value = (hours + 1).toString();\r\n                    break;\r\n                case \"kk\":\r\n                    value = $utils.padString(hours + 1, 2, \"0\");\r\n                    break;\r\n                case \"m\":\r\n                    value = minutes.toString();\r\n                    break;\r\n                case \"mm\":\r\n                    value = $utils.padString(minutes, 2, \"0\");\r\n                    break;\r\n                case \"s\":\r\n                    value = seconds.toString();\r\n                    break;\r\n                case \"ss\":\r\n                    value = $utils.padString(seconds, 2, \"0\");\r\n                    break;\r\n                case \"S\":\r\n                case \"SS\":\r\n                case \"SSS\":\r\n                    value = Math.round((milliseconds / 1000) * Math.pow(10, info.parts[i].length)).toString();\r\n                    break;\r\n                case \"x\":\r\n                    value = timestamp.toString();\r\n                    break;\r\n                case \"n\":\r\n                case \"nn\":\r\n                case \"nnn\":\r\n                    value = $utils.padString(milliseconds, info.parts[i].length, \"0\");\r\n                    break;\r\n                case \"z\":\r\n                    value = $utils.getTimeZone(date, false, false, this.utc);\r\n                    break;\r\n                case \"zz\":\r\n                    value = $utils.getTimeZone(date, true, false, this.utc);\r\n                    break;\r\n                case \"zzz\":\r\n                    value = $utils.getTimeZone(date, false, true, this.utc);\r\n                    break;\r\n                case \"zzzz\":\r\n                    value = $utils.getTimeZone(date, true, true, this.utc);\r\n                    break;\r\n                case \"Z\":\r\n                case \"ZZ\":\r\n                    var tz = Math.abs(offset) / 60;\r\n                    var tzh = Math.floor(tz);\r\n                    var tzm = tz * 60 - tzh * 60;\r\n                    if (this.utc) {\r\n                        tzh = 0;\r\n                        tzm = 0;\r\n                    }\r\n                    if (info.parts[i] == \"Z\") {\r\n                        value = \"GMT\";\r\n                        value += offset > 0 ? \"-\" : \"+\";\r\n                        value += $utils.padString(tzh, 2) + \":\" + $utils.padString(tzm, 2);\r\n                    }\r\n                    else {\r\n                        value = offset > 0 ? \"-\" : \"+\";\r\n                        value += $utils.padString(tzh, 2) + $utils.padString(tzm, 2);\r\n                    }\r\n                    break;\r\n                case \"i\":\r\n                    value = date.toISOString();\r\n                    break;\r\n                case \"I\":\r\n                    value = date.toUTCString();\r\n                    break;\r\n            }\r\n            res = res.replace($strings.PLACEHOLDER, value);\r\n        }\r\n        return res;\r\n    };\r\n    /**\r\n     * Parses any input value into Date object.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-date-time/#Parsing_Dates} Tutorial on date/time parsing\r\n     * @param source  Source value\r\n     * @param format  Source format\r\n     * @return Date object\r\n     */\r\n    DateFormatter.prototype.parse = function (source, format) {\r\n        // Format set?\r\n        if (!$type.hasValue(format)) {\r\n            format = this.inputDateFormat;\r\n        }\r\n        // Is it already a Date\r\n        if (source instanceof Date) {\r\n            return source;\r\n        }\r\n        // Is it a numeric timestamp\r\n        if (typeof source === \"number\") {\r\n            return new Date(source);\r\n        }\r\n        // No? Let's check if it's string, and try converting to it if nec\r\n        if (typeof source !== \"string\") {\r\n            source = source.toString();\r\n        }\r\n        // no language?\r\n        if (!this.language) {\r\n            if (this.sprite) {\r\n                this.language = this.sprite.language;\r\n            }\r\n            else {\r\n                this.language = new Language;\r\n            }\r\n        }\r\n        // Init return value\r\n        var res;\r\n        // Init RegEx for parsing\r\n        var reg = \"\";\r\n        // Clean format\r\n        format = $utils.cleanFormat(format);\r\n        // Clip format to length of the source string\r\n        format = format.substr(0, source.length);\r\n        // Parse format\r\n        var info = this.parseFormat(format);\r\n        // Init parsed items holder\r\n        var parsedIndexes = {\r\n            \"year\": -1,\r\n            \"year3\": -1,\r\n            \"year2\": -1,\r\n            \"year1\": -1,\r\n            \"month\": -1,\r\n            \"monthShort\": -1,\r\n            \"monthLong\": -1,\r\n            \"weekdayShort\": -1,\r\n            \"weekdayLong\": -1,\r\n            \"day\": -1,\r\n            \"yearDay\": -1,\r\n            \"week\": -1,\r\n            \"hourBase0\": -1,\r\n            \"hour12Base0\": -1,\r\n            \"hourBase1\": -1,\r\n            \"hour12Base1\": -1,\r\n            \"minute\": -1,\r\n            \"second\": -1,\r\n            \"millisecond\": -1,\r\n            \"millisecondDigits\": -1,\r\n            \"am\": -1,\r\n            \"zone\": -1,\r\n            \"timestamp\": -1,\r\n            \"iso\": -1\r\n        };\r\n        // Init values\r\n        var resValues = {\r\n            \"year\": 1970,\r\n            \"month\": 0,\r\n            \"day\": 1,\r\n            \"hour\": 0,\r\n            \"minute\": 0,\r\n            \"second\": 0,\r\n            \"millisecond\": 0,\r\n            \"timestamp\": null,\r\n            \"offset\": 0,\r\n            \"utc\": this.utc\r\n        };\r\n        // Index adjuster\r\n        var indexAdjust = 0, index = 0;\r\n        // Iterate through all of the parts\r\n        for (var i = 0; i < info.parts.length; i++) {\r\n            // Set current match index\r\n            index = i + indexAdjust + 1;\r\n            switch (info.parts[i]) {\r\n                case \"yyyy\":\r\n                case \"YYYY\":\r\n                    reg += \"([0-9]{4})\";\r\n                    parsedIndexes.year = index;\r\n                    break;\r\n                case \"yyy\":\r\n                case \"YYY\":\r\n                    reg += \"([0-9]{3})\";\r\n                    parsedIndexes.year3 = index;\r\n                    break;\r\n                case \"yy\":\r\n                case \"YY\":\r\n                    reg += \"([0-9]{2})\";\r\n                    parsedIndexes.year2 = index;\r\n                    break;\r\n                case \"y\":\r\n                case \"Y\":\r\n                    reg += \"([0-9]{1})\";\r\n                    parsedIndexes.year1 = index;\r\n                    break;\r\n                case \"MMMM\":\r\n                    reg += \"(\" + this.getStringList(this.months).join(\"|\") + \")\";\r\n                    parsedIndexes.monthLong = index;\r\n                    break;\r\n                case \"MMM\":\r\n                    reg += \"(\" + this.getStringList(this.monthsShort).join(\"|\") + \")\";\r\n                    parsedIndexes.monthShort = index;\r\n                    break;\r\n                case \"MM\":\r\n                case \"M\":\r\n                    reg += \"([0-9]{2}|[0-9]{1})\";\r\n                    parsedIndexes.month = index;\r\n                    break;\r\n                case \"ww\":\r\n                case \"w\":\r\n                    reg += \"([0-9]{2}|[0-9]{1})\";\r\n                    parsedIndexes.week = index;\r\n                    break;\r\n                case \"dd\":\r\n                case \"d\":\r\n                    reg += \"([0-9]{2}|[0-9]{1})\";\r\n                    parsedIndexes.day = index;\r\n                    break;\r\n                case \"DDD\":\r\n                case \"DD\":\r\n                case \"D\":\r\n                    reg += \"([0-9]{3}|[0-9]{2}|[0-9]{1})\";\r\n                    parsedIndexes.yearDay = index;\r\n                    break;\r\n                case \"dddd\":\r\n                    reg += \"(\" + this.getStringList(this.weekdays).join(\"|\") + \")\";\r\n                    parsedIndexes.weekdayLong = index;\r\n                    break;\r\n                case \"ddd\":\r\n                    reg += \"(\" + this.getStringList(this.weekdaysShort).join(\"|\") + \")\";\r\n                    parsedIndexes.weekdayShort = index;\r\n                    break;\r\n                case \"aaa\":\r\n                case \"aa\":\r\n                case \"a\":\r\n                    // TODO: fix (escape regex)\r\n                    reg += \"(\" + this.getStringList([\"AM\", \"PM\", \"A\\.M\\.\", \"P\\.M\\.\", \"A\", \"P\"]).join(\"|\") + \")\";\r\n                    parsedIndexes.am = index;\r\n                    break;\r\n                case \"hh\":\r\n                case \"h\":\r\n                    reg += \"([0-9]{2}|[0-9]{1})\";\r\n                    parsedIndexes.hour12Base1 = index;\r\n                    break;\r\n                case \"HH\":\r\n                case \"H\":\r\n                    reg += \"([0-9]{2}|[0-9]{1})\";\r\n                    parsedIndexes.hourBase0 = index;\r\n                    break;\r\n                case \"KK\":\r\n                case \"K\":\r\n                    reg += \"([0-9]{2}|[0-9]{1})\";\r\n                    parsedIndexes.hour12Base0 = index;\r\n                    break;\r\n                case \"kk\":\r\n                case \"k\":\r\n                    reg += \"([0-9]{2}|[0-9]{1})\";\r\n                    parsedIndexes.hourBase1 = index;\r\n                    break;\r\n                case \"mm\":\r\n                case \"m\":\r\n                    reg += \"([0-9]{2}|[0-9]{1})\";\r\n                    parsedIndexes.minute = index;\r\n                    break;\r\n                case \"ss\":\r\n                case \"s\":\r\n                    reg += \"([0-9]{2}|[0-9]{1})\";\r\n                    parsedIndexes.second = index;\r\n                    break;\r\n                case \"SSS\":\r\n                case \"SS\":\r\n                case \"S\":\r\n                    reg += \"([0-9]{3}|[0-9]{2}|[0-9]{1})\";\r\n                    parsedIndexes.millisecond = index;\r\n                    parsedIndexes.millisecondDigits = info.parts[i].length;\r\n                    break;\r\n                case \"nnn\":\r\n                case \"nn\":\r\n                case \"n\":\r\n                    reg += \"([0-9]{3}|[0-9]{2}|[0-9]{1})\";\r\n                    parsedIndexes.millisecond = index;\r\n                    break;\r\n                case \"x\":\r\n                    reg += \"([0-9]{1,})\";\r\n                    parsedIndexes.timestamp = index;\r\n                    break;\r\n                case \"Z\":\r\n                    reg += \"GMT([-+]+[0-9]{2}:[0-9]{2})\";\r\n                    parsedIndexes.zone = index;\r\n                    break;\r\n                case \"ZZ\":\r\n                    reg += \"([\\\\-+]+[0-9]{2}[0-9]{2})\";\r\n                    parsedIndexes.zone = index;\r\n                    break;\r\n                case \"i\":\r\n                    reg += \"([0-9]{4})-?([0-9]{2})-?([0-9]{2})T?([0-9]{2}):?([0-9]{2}):?([0-9]{2})\\.?([0-9]{0,3})([zZ]|[+\\-][0-9]{2}:?[0-9]{2}|$)\";\r\n                    parsedIndexes.iso = index;\r\n                    indexAdjust += 7;\r\n                    break;\r\n                case \"G\":\r\n                case \"YYYY\":\r\n                case \"YYY\":\r\n                case \"YY\":\r\n                case \"Y\":\r\n                case \"MMMMM\":\r\n                case \"W\":\r\n                case \"EEEEE\":\r\n                case \"EEEE\":\r\n                case \"EEE\":\r\n                case \"EE\":\r\n                case \"E\":\r\n                case \"eeeee\":\r\n                case \"eeee\":\r\n                case \"eee\":\r\n                case \"ee\":\r\n                case \"e\":\r\n                case \"zzzz\":\r\n                case \"zzz\":\r\n                case \"zz\":\r\n                case \"z\":\r\n                case \"t\":\r\n                    // Ignore\r\n                    indexAdjust--;\r\n                    break;\r\n            }\r\n            reg += \"[^0-9]*\";\r\n        }\r\n        // Try matching\r\n        var regex = new RegExp(reg);\r\n        var matches = source.match(regex);\r\n        if (matches) {\r\n            // Populate the date object\r\n            // Full year\r\n            if (parsedIndexes.year > -1) {\r\n                resValues.year = parseInt(matches[parsedIndexes.year]);\r\n            }\r\n            // 3-digit year\r\n            if (parsedIndexes.year3 > -1) {\r\n                var val = parseInt(matches[parsedIndexes.year3]);\r\n                val += 1000;\r\n                resValues.year = val;\r\n            }\r\n            // 2-digit year\r\n            if (parsedIndexes.year2 > -1) {\r\n                var val = parseInt(matches[parsedIndexes.year2]);\r\n                if (val > 50) {\r\n                    val += 1000;\r\n                }\r\n                else {\r\n                    val += 2000;\r\n                }\r\n                resValues.year = val;\r\n            }\r\n            // 1-digit year\r\n            if (parsedIndexes.year1 > -1) {\r\n                var val = parseInt(matches[parsedIndexes.year1]);\r\n                val = Math.floor((new Date().getFullYear()) / 10) * 10 + val;\r\n                resValues.year = val;\r\n            }\r\n            // Full month\r\n            if (parsedIndexes.monthLong > -1) {\r\n                resValues.month = this.resolveMonth(matches[parsedIndexes.monthLong]);\r\n            }\r\n            // Short month\r\n            if (parsedIndexes.monthShort > -1) {\r\n                resValues.month = this.resolveShortMonth(matches[parsedIndexes.monthShort]);\r\n            }\r\n            // Numeric month\r\n            if (parsedIndexes.month > -1) {\r\n                resValues.month = parseInt(matches[parsedIndexes.month]) - 1;\r\n            }\r\n            // Weekday\r\n            // @todo\r\n            // Week\r\n            if ((parsedIndexes.week > -1) && (parsedIndexes.day === -1)) {\r\n                // We parse weeks ONLY if day is not explicitly set\r\n                // TODO: this needs work\r\n                // (but maybe later - I can hardly imagine anyone passing their dates in weeks)\r\n                resValues.month = 0;\r\n                resValues.day = $utils.getDayFromWeek(parseInt(matches[parsedIndexes.week]), resValues.year, 1, this.utc);\r\n            }\r\n            // Day\r\n            if (parsedIndexes.day > -1) {\r\n                resValues.day = parseInt(matches[parsedIndexes.day]);\r\n            }\r\n            // Year day\r\n            if (parsedIndexes.yearDay > -1) {\r\n                resValues.month = 0;\r\n                resValues.day = parseInt(matches[parsedIndexes.yearDay]);\r\n            }\r\n            // 24 Hour (0-23)\r\n            if (parsedIndexes.hourBase0 > -1) {\r\n                resValues.hour = parseInt(matches[parsedIndexes.hourBase0]);\r\n            }\r\n            // 24 Hour (1-24)\r\n            if (parsedIndexes.hourBase1 > -1) {\r\n                resValues.hour = parseInt(matches[parsedIndexes.hourBase1]) - 1;\r\n            }\r\n            // 12 Hour (0-11)\r\n            if (parsedIndexes.hour12Base0 > -1) {\r\n                var val = parseInt(matches[parsedIndexes.hour12Base0]);\r\n                if (val == 11) {\r\n                    val = 0;\r\n                }\r\n                if ((parsedIndexes.am > -1) && !this.isAm(matches[parsedIndexes.am])) {\r\n                    val += 12;\r\n                }\r\n                resValues.hour = val;\r\n            }\r\n            // 12 Hour (1-12)\r\n            if (parsedIndexes.hour12Base1 > -1) {\r\n                var val = parseInt(matches[parsedIndexes.hour12Base1]);\r\n                if (val == 12) {\r\n                    val = 0;\r\n                }\r\n                if ((parsedIndexes.am > -1) && !this.isAm(matches[parsedIndexes.am])) {\r\n                    val += 12;\r\n                }\r\n                resValues.hour = val;\r\n            }\r\n            // Minute\r\n            if (parsedIndexes.minute > -1) {\r\n                resValues.minute = parseInt(matches[parsedIndexes.minute]);\r\n            }\r\n            // Second\r\n            if (parsedIndexes.second > -1) {\r\n                resValues.second = parseInt(matches[parsedIndexes.second]);\r\n            }\r\n            // Millisecond\r\n            if (parsedIndexes.millisecond > -1) {\r\n                var val = parseInt(matches[parsedIndexes.millisecond]);\r\n                if (parsedIndexes.millisecondDigits == 2) {\r\n                    val *= 10;\r\n                }\r\n                else if (parsedIndexes.millisecondDigits == 1) {\r\n                    val *= 100;\r\n                }\r\n                resValues.millisecond = val;\r\n            }\r\n            // Timestamp\r\n            if (parsedIndexes.timestamp > -1) {\r\n                resValues.timestamp = parseInt(matches[parsedIndexes.timestamp]);\r\n                var ts = new Date(resValues.timestamp);\r\n                resValues.year = ts.getUTCFullYear();\r\n                resValues.month = ts.getUTCMonth();\r\n                resValues.day = ts.getUTCDate();\r\n                resValues.hour = ts.getUTCHours();\r\n                resValues.minute = ts.getUTCMinutes();\r\n                resValues.second = ts.getUTCSeconds();\r\n                resValues.millisecond = ts.getUTCMilliseconds();\r\n            }\r\n            // Adjust time zone\r\n            if (parsedIndexes.zone > -1) {\r\n                resValues.offset = this.resolveTimezoneOffset(new Date(resValues.year, resValues.month, resValues.day), matches[parsedIndexes.zone]);\r\n            }\r\n            // ISO\r\n            if (parsedIndexes.iso > -1) {\r\n                resValues.year = $type.toNumber(matches[parsedIndexes.iso + 0]);\r\n                resValues.month = $type.toNumber(matches[parsedIndexes.iso + 1]) - 1;\r\n                resValues.day = $type.toNumber(matches[parsedIndexes.iso + 2]);\r\n                resValues.hour = $type.toNumber(matches[parsedIndexes.iso + 3]);\r\n                resValues.minute = $type.toNumber(matches[parsedIndexes.iso + 4]);\r\n                resValues.second = $type.toNumber(matches[parsedIndexes.iso + 5]);\r\n                resValues.millisecond = $type.toNumber(matches[parsedIndexes.iso + 6]);\r\n                if (matches[parsedIndexes.iso + 7] == \"Z\" || matches[parsedIndexes.iso + 7] == \"z\") {\r\n                    resValues.utc = true;\r\n                }\r\n                else if (matches[parsedIndexes.iso + 7] != \"\") {\r\n                    resValues.offset = this.resolveTimezoneOffset(new Date(resValues.year, resValues.month, resValues.day), matches[parsedIndexes.iso + 7]);\r\n                }\r\n            }\r\n            // Create Date object\r\n            if (resValues.utc) {\r\n                res = new Date(Date.UTC(resValues.year, resValues.month, resValues.day, resValues.hour, resValues.minute, resValues.second, resValues.millisecond));\r\n            }\r\n            else {\r\n                res = new Date(resValues.year, resValues.month, resValues.day, resValues.hour, resValues.minute + resValues.offset, resValues.second, resValues.millisecond);\r\n            }\r\n        }\r\n        else {\r\n            // Didn't match anything\r\n            // Let's try dropping it into Date constructor and hope for the best\r\n            res = new Date(source);\r\n        }\r\n        return res;\r\n    };\r\n    DateFormatter.prototype.resolveTimezoneOffset = function (date, zone) {\r\n        var value = zone.match(/([+\\-]?)([0-9]{2}):?([0-9]{2})/);\r\n        if (value) {\r\n            var match = $type.getValue(zone.match(/([+\\-]?)([0-9]{2}):?([0-9]{2})/));\r\n            var dir = match[1];\r\n            var hour = match[2];\r\n            var minute = match[3];\r\n            var offset = parseInt(hour) * 60 + parseInt(minute);\r\n            // Adjust offset\r\n            // Making it negative does not seem to make sense, but it's right\r\n            // because of how JavaScript calculates GMT offsets\r\n            if (dir == \"+\") {\r\n                offset *= -1;\r\n            }\r\n            // Check the difference in offset\r\n            var originalOffset = (date || new Date()).getTimezoneOffset();\r\n            var diff = offset - originalOffset;\r\n            return diff;\r\n        }\r\n        return 0;\r\n    };\r\n    /**\r\n     * Resolves month name (i.e. \"December\") into a month number (11).\r\n     *\r\n     * @param value  Month name\r\n     * @return Month number\r\n     */\r\n    DateFormatter.prototype.resolveMonth = function (value) {\r\n        // Let's try English first\r\n        var month = this.months.indexOf(value);\r\n        if (month > -1) {\r\n            return month;\r\n        }\r\n        // Try the translation\r\n        if (this.language && !this.language.isDefault()) {\r\n            month = this.language.translateAll(this.months).indexOf(value);\r\n            if (month > -1) {\r\n                return month;\r\n            }\r\n        }\r\n        return 0;\r\n    };\r\n    /**\r\n     * Resolves short month name (i.e. \"Dec\") into a month number.\r\n     *\r\n     * @param value  Short month name\r\n     * @return Month number\r\n     */\r\n    DateFormatter.prototype.resolveShortMonth = function (value) {\r\n        // Let's try English first\r\n        var month = this.monthsShort.indexOf(value);\r\n        if (month > -1) {\r\n            return month;\r\n        }\r\n        // Maybe long month (workaround for May)\r\n        month = this.months.indexOf(value);\r\n        if (month > -1) {\r\n            return month;\r\n        }\r\n        // Try the translation\r\n        if (this.language && !this.language.isDefault()) {\r\n            month = this.language.translateAll(this.monthsShort).indexOf(value);\r\n            if (month > -1) {\r\n                return month;\r\n            }\r\n        }\r\n        return 0;\r\n    };\r\n    /**\r\n     * Checks if passed in string represents AM/PM notation in many of its\r\n     * versions.\r\n     *\r\n     * @param value  Source string\r\n     * @return Is it AM/PM?\r\n     */\r\n    DateFormatter.prototype.isAm = function (value) {\r\n        var list = this.getStringList([\"AM\", \"A.M.\", \"A\"]);\r\n        return list.indexOf(value.toUpperCase()) > -1;\r\n    };\r\n    /**\r\n     * Invalidates related [[Sprite]] causing it to redraw.\r\n     */\r\n    DateFormatter.prototype.invalidateSprite = function () {\r\n        if (this.sprite) {\r\n            this.sprite.invalidate();\r\n        }\r\n    };\r\n    /**\r\n     * Translates list of strings.\r\n     *\r\n     * @param list  Source strings\r\n     * @return Translated strings\r\n     */\r\n    DateFormatter.prototype.getStringList = function (list) {\r\n        var res = [];\r\n        for (var i = 0; i < list.length; i++) {\r\n            // translate?\r\n            if (this.language) {\r\n                res.push($utils.escapeForRgex(this.language.translate(list[i])));\r\n            }\r\n            else {\r\n                res.push($utils.escapeForRgex(list[i]));\r\n            }\r\n        }\r\n        return res;\r\n    };\r\n    Object.defineProperty(DateFormatter.prototype, \"dateFormat\", {\r\n        /**\r\n         * @return Date format\r\n         */\r\n        get: function () {\r\n            return this._dateFormat;\r\n        },\r\n        /**\r\n         * Date format to use.\r\n         *\r\n         * If format is not supplied in-line in the string, this setting will be\r\n         * used.\r\n         *\r\n         * @default \"yyyy-MM-dd\"\r\n         * @param value Date format\r\n         */\r\n        set: function (value) {\r\n            this._dateFormat = value;\r\n            this.invalidateSprite();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DateFormatter.prototype, \"inputDateFormat\", {\r\n        /**\r\n         * @return Date format\r\n         */\r\n        get: function () {\r\n            return this._inputDateFormat;\r\n        },\r\n        /**\r\n         * Date format to use when parsing dates.\r\n         *\r\n         * @default \"yyyy-MM-dd\"\r\n         * @param value Date format\r\n         */\r\n        set: function (value) {\r\n            this._inputDateFormat = value;\r\n            this.invalidateSprite();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DateFormatter.prototype, \"intlLocales\", {\r\n        /**\r\n         * @return Date format\r\n         */\r\n        get: function () {\r\n            return this._intlLocales;\r\n        },\r\n        /**\r\n         * Locales if you are using date formats in `Intl.DateTimeFormatOptions` syntax.\r\n         *\r\n         * @param value Locales\r\n         */\r\n        set: function (value) {\r\n            this._intlLocales = value;\r\n            this.invalidateSprite();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DateFormatter.prototype, \"utc\", {\r\n        /**\r\n         * @return Use UTC?\r\n         */\r\n        get: function () {\r\n            return this._utc;\r\n        },\r\n        /**\r\n         * Should formatter use UTC functions?\r\n         *\r\n         * If UTC is used, all date/time values will be independent on client's\r\n         * time zone.\r\n         *\r\n         * @param value Use UTC?\r\n         */\r\n        set: function (value) {\r\n            this._utc = value;\r\n            this.invalidateSprite();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DateFormatter.prototype, \"timezoneOffset\", {\r\n        /**\r\n         * @return Offset (minutes)\r\n         */\r\n        get: function () {\r\n            return this._timezoneOffset;\r\n        },\r\n        /**\r\n         * If set, will apply specific offset in minutes before formatting the date\r\n         * text.\r\n         *\r\n         * The value is a number of minutes from target time zone to UTC.\r\n         *\r\n         * E.g. `300` will recalculate Dates in \"GMT-5\" time zone.\r\n         *\r\n         * @param  value  Offset (minutes)\r\n         */\r\n        set: function (value) {\r\n            if (this._timezoneOffset != value) {\r\n                this._timezoneOffset = value;\r\n                this.invalidateSprite();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DateFormatter.prototype, \"timezone\", {\r\n        /**\r\n         * @return Timezone\r\n         */\r\n        get: function () {\r\n            return this._timezone;\r\n        },\r\n        /**\r\n         * If set, will format date/time in specific time zone.\r\n         *\r\n         * The value should be named time zone, e.g.:\r\n         * `\"America/Vancouver\"`, `\"Australia/Sydney\"`, `\"UTC\"`.\r\n         *\r\n         * @since 4.10.1\r\n         * @param  value  Timezone\r\n         */\r\n        set: function (value) {\r\n            if (this._timezone != value) {\r\n                this._timezone = value;\r\n                this.timezoneMinutes = $time.getTimezoneMinutes(value);\r\n                this.invalidateSprite();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DateFormatter.prototype, \"firstDayOfWeek\", {\r\n        /**\r\n         * @return First day of week\r\n         */\r\n        get: function () {\r\n            return this._firstDayOfWeek;\r\n        },\r\n        /**\r\n         * First day of the week:\r\n         *\r\n         * * 0 - Sunday\r\n         * * 1 - Monday\r\n         * * 2 - Tuesday\r\n         *\r\n         * Etc.\r\n         *\r\n         * @param value First day of week\r\n         */\r\n        set: function (value) {\r\n            this._firstDayOfWeek = value;\r\n            this.invalidateSprite();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DateFormatter.prototype, \"outputFormat\", {\r\n        /**\r\n         * @ignore Exclude from docs\r\n         * @return Format\r\n         */\r\n        get: function () {\r\n            return this._outputFormat;\r\n        },\r\n        /**\r\n         * Output format for the formatted date.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @param value  Format\r\n         */\r\n        set: function (value) {\r\n            this._outputFormat = value.toLowerCase();\r\n            this.invalidateSprite();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return DateFormatter;\r\n}(BaseObject));\r\nexport { DateFormatter };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateFormatter\"] = DateFormatter;\r\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,SAASC,UAAU,QAAQ,SAAS;AACpC,SAASC,gBAAgB,QAAQ,6BAA6B;AAC9D,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAO,KAAKC,QAAQ,MAAM,kBAAkB;AAC5C,OAAO,KAAKC,MAAM,MAAM,gBAAgB;AACxC,OAAO,KAAKC,KAAK,MAAM,eAAe;AACtC,OAAO,KAAKC,KAAK,MAAM,eAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,aAAa,GAAG,aAAe,UAAUC,MAAM,EAAE;EACjDV,SAAS,CAACS,aAAa,EAAEC,MAAM,CAAC;EAChC;AACJ;AACA;EACI,SAASD,aAAaA,CAAA,EAAG;IACrB,IAAIE,KAAK,GAAGD,MAAM,CAACE,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI;IACrC;AACR;AACA;IACQD,KAAK,CAACE,WAAW,GAAG,YAAY;IAChC;AACR;AACA;IACQF,KAAK,CAACG,gBAAgB,GAAG,YAAY;IACrC;AACR;AACA;IACQH,KAAK,CAACI,IAAI,GAAG,KAAK;IAClB;AACR;AACA;AACA;AACA;AACA;IACQJ,KAAK,CAACK,eAAe,GAAG,CAAC;IACzB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQL,KAAK,CAACM,eAAe,GAAG,CAAC;IACzB;AACR;AACA;IACQN,KAAK,CAACO,MAAM,GAAG,CAAC,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,CAAC;IACzI;AACR;AACA;IACQP,KAAK,CAACQ,WAAW,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,YAAY,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;IAC/G;AACR;AACA;IACQR,KAAK,CAACS,QAAQ,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,CAAC;IAC/F;AACR;AACA;IACQT,KAAK,CAACU,aAAa,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;IACvE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQV,KAAK,CAACW,aAAa,GAAG,KAAK;IAC3B;AACR;AACA;AACA;AACA;IACQX,KAAK,CAACY,UAAU,GAAG,IAAI;IACvBZ,KAAK,CAACa,SAAS,GAAG,eAAe;IACjCb,KAAK,CAACc,UAAU,CAAC,CAAC;IAClB,OAAOd,KAAK;EAChB;EACAe,MAAM,CAACC,cAAc,CAAClB,aAAa,CAACmB,SAAS,EAAE,UAAU,EAAE;IACvD;AACR;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACC,SAAS;IACzB,CAAC;IACD;AACR;AACA;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAACF,SAAS,GAAGE,KAAK;MACtB,IAAI,CAACC,UAAU,GAAG,IAAI,CAACH,SAAS,CAACI,SAAS,CAAC,OAAO,CAAC;IACvD,CAAC;IACDC,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI3B,aAAa,CAACmB,SAAS,CAACS,MAAM,GAAG,UAAUC,MAAM,EAAED,MAAM,EAAEE,aAAa,EAAE;IACtE;IACA,IAAI,CAAC,IAAI,CAACC,QAAQ,EAAE;MAChB,IAAI,IAAI,CAACC,MAAM,EAAE;QACb,IAAI,CAACD,QAAQ,GAAG,IAAI,CAACC,MAAM,CAACD,QAAQ;MACxC,CAAC,MACI;QACD,IAAI,CAACA,QAAQ,GAAG,IAAIvC,QAAQ,CAAC,CAAC;MAClC;IACJ;IACA;IACA,IAAI,OAAOoC,MAAM,KAAK,WAAW,IAAIA,MAAM,KAAK,EAAE,EAAE;MAChDA,MAAM,GAAG,IAAI,CAACxB,WAAW;IAC7B;IACA;IACA,IAAI6B,SAAS;IACb;IACA;IACA,IAAIC,IAAI;IACR,IAAIpC,KAAK,CAACqC,QAAQ,CAACN,MAAM,CAAC,EAAE;MACxB;MACAK,IAAI,GAAG,IAAI,CAACE,KAAK,CAACP,MAAM,CAAC;IAC7B,CAAC,MACI;MACDK,IAAI,GAAGrC,MAAM,CAACwC,SAAS,CAACR,MAAM,CAAC;IACnC;IACA;IACA,IAAI/B,KAAK,CAACwC,QAAQ,CAACV,MAAM,CAAC,EAAE;MACxB,IAAI;QACA,IAAI,IAAI,CAACW,WAAW,EAAE;UAClB,OAAO,IAAIC,IAAI,CAACC,cAAc,CAAC,IAAI,CAACF,WAAW,EAAEX,MAAM,CAAC,CAACA,MAAM,CAACM,IAAI,CAAC;QACzE,CAAC,MACI;UACD,OAAO,IAAIM,IAAI,CAACC,cAAc,CAACC,SAAS,EAAEd,MAAM,CAAC,CAACA,MAAM,CAACM,IAAI,CAAC;QAClE;MACJ,CAAC,CACD,OAAOS,CAAC,EAAE;QACN,OAAO,SAAS;MACpB;IACJ,CAAC,MACI;MACD;MACAf,MAAM,GAAG/B,MAAM,CAAC+C,WAAW,CAAChB,MAAM,CAAC;MACnC;MACA,IAAIiB,IAAI,GAAG,IAAI,CAACC,WAAW,CAAClB,MAAM,CAAC;MACnC;MACA,IAAI9B,KAAK,CAACiD,QAAQ,CAAC,IAAI,CAACC,cAAc,CAAC,EAAE;QACrCd,IAAI,CAACe,UAAU,CAACf,IAAI,CAACgB,UAAU,CAAC,CAAC,GAAGhB,IAAI,CAACiB,iBAAiB,CAAC,CAAC,GAAG,IAAI,CAACH,cAAc,CAAC;MACvF,CAAC,MACI,IAAIlD,KAAK,CAACiD,QAAQ,CAAC,IAAI,CAACK,QAAQ,CAAC,IAAItB,aAAa,KAAK,KAAK,EAAE;QAC/DI,IAAI,GAAGnC,KAAK,CAACsD,WAAW,CAACnB,IAAI,EAAE,IAAI,CAACkB,QAAQ,CAAC;MACjD;MACA;MACA,IAAI,CAACtD,KAAK,CAACwD,QAAQ,CAACpB,IAAI,CAACqB,OAAO,CAAC,CAAC,CAAC,EAAE;QACjC,OAAO,IAAI,CAACxB,QAAQ,CAACN,SAAS,CAAC,cAAc,CAAC;MAClD;MACA;MACAQ,SAAS,GAAG,IAAI,CAACuB,WAAW,CAACtB,IAAI,EAAEW,IAAI,EAAE,IAAI,CAACd,QAAQ,CAAC;MACvD;MACA,IAAI,IAAI,CAACjB,UAAU,EAAE;QACjBmB,SAAS,GAAGA,SAAS,CAACwB,OAAO,CAAC,OAAO,EAAExB,SAAS,CAACyB,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC;MAChF;IACJ;IACA;IACA,OAAO1B,SAAS;EACpB,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIjC,aAAa,CAACmB,SAAS,CAAC2B,WAAW,GAAG,UAAUlB,MAAM,EAAE;IACpD;IACA,IAAIgC,MAAM,GAAG,IAAI,CAACC,QAAQ,CAACjC,MAAM,CAAC;IAClC,IAAI9B,KAAK,CAACiD,QAAQ,CAACa,MAAM,CAAC,EAAE;MACxB,OAAOA,MAAM;IACjB;IACA;IACA,IAAIf,IAAI,GAAG;MACP,UAAU,EAAE,EAAE;MACd,OAAO,EAAE;IACb,CAAC;IACD;IACA,IAAIiB,MAAM,GAAGpE,gBAAgB,CAAC,CAAC,CAACqE,KAAK,CAACnC,MAAM,EAAE,IAAI,CAAC;IACnD,KAAK,IAAIoC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,MAAM,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MACpC,IAAID,KAAK,GAAGD,MAAM,CAACE,CAAC,CAAC;MACrB,IAAID,KAAK,CAACG,IAAI,KAAK,OAAO,EAAE;QACxB;QACA,IAAIH,KAAK,CAACI,IAAI,CAACC,KAAK,CAAC,SAAS,CAAC,IAAItE,KAAK,CAACqC,QAAQ,CAAC,IAAI,CAAC/B,WAAW,CAAC,EAAE;UACjE2D,KAAK,CAACI,IAAI,GAAG,IAAI,CAAC/D,WAAW;QACjC;QACA;QACA,IAAIiE,OAAO,GAAGN,KAAK,CAACI,IAAI,CAACC,KAAK,CAAC,+MAA+M,CAAC;QAC/O;QACA,IAAIC,OAAO,EAAE;UACT;UACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,OAAO,CAACJ,MAAM,EAAEK,CAAC,EAAE,EAAE;YACrCzB,IAAI,CAAC0B,KAAK,CAACC,IAAI,CAACH,OAAO,CAACC,CAAC,CAAC,CAAC;YAC3BP,KAAK,CAACI,IAAI,GAAGJ,KAAK,CAACI,IAAI,CAACV,OAAO,CAACY,OAAO,CAACC,CAAC,CAAC,EAAE1E,QAAQ,CAAC6E,WAAW,CAAC;UACrE;QACJ;MACJ;MACA;MACA5B,IAAI,CAAC6B,QAAQ,IAAIX,KAAK,CAACI,IAAI;IAC/B;IACA;IACA;IACA;IACA,IAAI,CAACQ,QAAQ,CAAC/C,MAAM,EAAEiB,IAAI,CAAC;IAC3B,OAAOA,IAAI;EACf,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI7C,aAAa,CAACmB,SAAS,CAACqC,WAAW,GAAG,UAAUtB,IAAI,EAAEW,IAAI,EAAEd,QAAQ,EAAE;IAClE;IACA,IAAI6C,GAAG,GAAG/B,IAAI,CAAC6B,QAAQ;IACvB;IACA,IAAIG,QAAQ;MAAEC,KAAK;MAAEC,OAAO;MAAEC,GAAG;MAAEC,KAAK;MAAEC,OAAO;MAAEC,OAAO;MAAEC,YAAY;MAAEC,MAAM,GAAGnD,IAAI,CAACiB,iBAAiB,CAAC,CAAC;MAAEmC,SAAS,GAAGpD,IAAI,CAACqB,OAAO,CAAC,CAAC;IACvI,IAAI,IAAI,CAACgC,GAAG,EAAE;MACVV,QAAQ,GAAG3C,IAAI,CAACsD,cAAc,CAAC,CAAC;MAChCV,KAAK,GAAG5C,IAAI,CAACuD,WAAW,CAAC,CAAC;MAC1BV,OAAO,GAAG7C,IAAI,CAACwD,SAAS,CAAC,CAAC;MAC1BV,GAAG,GAAG9C,IAAI,CAACyD,UAAU,CAAC,CAAC;MACvBV,KAAK,GAAG/C,IAAI,CAAC0D,WAAW,CAAC,CAAC;MAC1BV,OAAO,GAAGhD,IAAI,CAAC2D,aAAa,CAAC,CAAC;MAC9BV,OAAO,GAAGjD,IAAI,CAAC4D,aAAa,CAAC,CAAC;MAC9BV,YAAY,GAAGlD,IAAI,CAAC6D,kBAAkB,CAAC,CAAC;IAC5C,CAAC,MACI;MACDlB,QAAQ,GAAG3C,IAAI,CAAC8D,WAAW,CAAC,CAAC;MAC7BlB,KAAK,GAAG5C,IAAI,CAAC+D,QAAQ,CAAC,CAAC;MACvBlB,OAAO,GAAG7C,IAAI,CAACgE,MAAM,CAAC,CAAC;MACvBlB,GAAG,GAAG9C,IAAI,CAACiE,OAAO,CAAC,CAAC;MACpBlB,KAAK,GAAG/C,IAAI,CAACkE,QAAQ,CAAC,CAAC;MACvBlB,OAAO,GAAGhD,IAAI,CAACgB,UAAU,CAAC,CAAC;MAC3BiC,OAAO,GAAGjD,IAAI,CAACmE,UAAU,CAAC,CAAC;MAC3BjB,YAAY,GAAGlD,IAAI,CAACoE,eAAe,CAAC,CAAC;IACzC;IACA;IACA,KAAK,IAAItC,CAAC,GAAG,CAAC,EAAEuC,GAAG,GAAG1D,IAAI,CAAC0B,KAAK,CAACN,MAAM,EAAED,CAAC,GAAGuC,GAAG,EAAEvC,CAAC,EAAE,EAAE;MACnD,IAAIzC,KAAK,GAAG,EAAE;MACd,QAAQsB,IAAI,CAAC0B,KAAK,CAACP,CAAC,CAAC;QACjB,KAAK,GAAG;UACJzC,KAAK,GAAGQ,QAAQ,CAACN,SAAS,CAACoD,QAAQ,GAAG,CAAC,GACjC,SAAS,GACT,SAAS,CAAC;UAChB;QACJ,KAAK,MAAM;UACPtD,KAAK,GAAGiF,IAAI,CAACC,GAAG,CAAC5B,QAAQ,CAAC,CAAC6B,QAAQ,CAAC,CAAC;UACrC,IAAI7B,QAAQ,GAAG,CAAC,EAAE;YACdtD,KAAK,IAAIQ,QAAQ,CAACN,SAAS,CAAC,SAAS,CAAC;UAC1C;UACA;QACJ,KAAK,KAAK;QACV,KAAK,IAAI;QACT,KAAK,GAAG;UACJF,KAAK,GAAGiF,IAAI,CAACC,GAAG,CAAC5B,QAAQ,CAAC,CAAC6B,QAAQ,CAAC,CAAC,CAAChD,MAAM,CAAC,CAACb,IAAI,CAAC0B,KAAK,CAACP,CAAC,CAAC,CAACC,MAAM,CAAC;UACnE,IAAIY,QAAQ,GAAG,CAAC,EAAE;YACdtD,KAAK,IAAIQ,QAAQ,CAACN,SAAS,CAAC,SAAS,CAAC;UAC1C;UACA;QACJ,KAAK,MAAM;QACX,KAAK,KAAK;QACV,KAAK,IAAI;QACT,KAAK,GAAG;UACJ,IAAIkF,IAAI,GAAG9G,MAAM,CAAC+G,OAAO,CAAC1E,IAAI,CAAC;UAC/B,IAAI2E,IAAI,GAAGhC,QAAQ;UACnB,IAAI8B,IAAI,IAAI,CAAC,IAAK5B,OAAO,GAAG,CAAE,EAAE;YAC5B8B,IAAI,EAAE;UACV;UACA,IAAIhE,IAAI,CAAC0B,KAAK,CAACP,CAAC,CAAC,IAAI,MAAM,EAAE;YACzBzC,KAAK,GAAGiF,IAAI,CAACC,GAAG,CAACI,IAAI,CAAC,CAACH,QAAQ,CAAC,CAAC;UACrC,CAAC,MACI;YACDnF,KAAK,GAAGiF,IAAI,CAACC,GAAG,CAACI,IAAI,CAAC,CAACH,QAAQ,CAAC,CAAC,CAAChD,MAAM,CAAC,CAACb,IAAI,CAAC0B,KAAK,CAACP,CAAC,CAAC,CAACC,MAAM,CAAC;UACnE;UACA,IAAI4C,IAAI,GAAG,CAAC,EAAE;YACVtF,KAAK,IAAIQ,QAAQ,CAACN,SAAS,CAAC,SAAS,CAAC;UAC1C;UACA;QACJ,KAAK,GAAG;UACJ;UACA;QACJ,KAAK,GAAG;UACJF,KAAK,GAAG,EAAE,GAAGiF,IAAI,CAACM,IAAI,CAAC,CAAC5E,IAAI,CAAC+D,QAAQ,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;UACjD;QACJ,KAAK,OAAO;UACR1E,KAAK,GAAGQ,QAAQ,CAACN,SAAS,CAAC,IAAI,CAAChB,MAAM,CAACqE,KAAK,CAAC,CAAC,CAACpB,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;UAC3D;QACJ,KAAK,MAAM;UACPnC,KAAK,GAAGQ,QAAQ,CAACN,SAAS,CAAC,IAAI,CAAChB,MAAM,CAACqE,KAAK,CAAC,CAAC;UAC9C;QACJ,KAAK,KAAK;UACNvD,KAAK,GAAGQ,QAAQ,CAACN,SAAS,CAAC,IAAI,CAACf,WAAW,CAACoE,KAAK,CAAC,CAAC;UACnD;QACJ,KAAK,IAAI;UACLvD,KAAK,GAAG1B,MAAM,CAACkH,SAAS,CAACjC,KAAK,GAAG,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC;UAC3C;QACJ,KAAK,GAAG;UACJvD,KAAK,GAAG,CAACuD,KAAK,GAAG,CAAC,EAAE4B,QAAQ,CAAC,CAAC;UAC9B;QACJ,KAAK,IAAI;UACLnF,KAAK,GAAG1B,MAAM,CAACkH,SAAS,CAAClH,MAAM,CAAC+G,OAAO,CAAC1E,IAAI,EAAE,IAAI,CAACqD,GAAG,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC;UAChE;QACJ,KAAK,GAAG;UACJhE,KAAK,GAAG1B,MAAM,CAAC+G,OAAO,CAAC1E,IAAI,EAAE,IAAI,CAACqD,GAAG,CAAC,CAACmB,QAAQ,CAAC,CAAC;UACjD;QACJ,KAAK,GAAG;UACJnF,KAAK,GAAG1B,MAAM,CAACmH,YAAY,CAAC9E,IAAI,EAAE,IAAI,CAACqD,GAAG,CAAC,CAACmB,QAAQ,CAAC,CAAC;UACtD;QACJ,KAAK,IAAI;UACLnF,KAAK,GAAG1B,MAAM,CAACkH,SAAS,CAAC/B,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC;UACrC;QACJ,KAAK,GAAG;UACJzD,KAAK,GAAGyD,GAAG,CAAC0B,QAAQ,CAAC,CAAC;UACtB;QACJ,KAAK,IAAI;QACT,KAAK,KAAK;UACNnF,KAAK,GAAG1B,MAAM,CAACkH,SAAS,CAAClH,MAAM,CAACoH,UAAU,CAAC/E,IAAI,EAAE,IAAI,CAACqD,GAAG,CAAC,CAACmB,QAAQ,CAAC,CAAC,EAAE7D,IAAI,CAAC0B,KAAK,CAACP,CAAC,CAAC,CAACC,MAAM,EAAE,GAAG,CAAC;UACjG;QACJ,KAAK,GAAG;UACJ1C,KAAK,GAAG1B,MAAM,CAACoH,UAAU,CAAC/E,IAAI,EAAE,IAAI,CAACqD,GAAG,CAAC,CAACmB,QAAQ,CAAC,CAAC;UACpD;QACJ,KAAK,GAAG;UACJ;UACA;QACJ,KAAK,GAAG;UACJ;UACA;QACJ,KAAK,GAAG;UACJnF,KAAK,GAAGQ,QAAQ,CAACmF,aAAa,CAAC,UAAU,CAAC,CAAC/G,IAAI,CAAC,IAAI,EAAE6E,GAAG,CAAC;UAC1D;QACJ,KAAK,GAAG;UACJzD,KAAK,GAAG,CAACwD,OAAO,IAAI,CAAC,EAAE2B,QAAQ,CAAC,CAAC;UACjC;QACJ,KAAK,IAAI;UACLnF,KAAK,GAAG1B,MAAM,CAACkH,SAAS,CAAC,CAAChC,OAAO,IAAI,CAAC,EAAE2B,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC;UAC3D;QACJ,KAAK,KAAK;QACV,KAAK,KAAK;UACNnF,KAAK,GAAGQ,QAAQ,CAACN,SAAS,CAAC,IAAI,CAACb,aAAa,CAACmE,OAAO,CAAC,CAAC;UACvD;QACJ,KAAK,MAAM;QACX,KAAK,MAAM;UACPxD,KAAK,GAAGQ,QAAQ,CAACN,SAAS,CAAC,IAAI,CAACd,QAAQ,CAACoE,OAAO,CAAC,CAAC;UAClD;QACJ,KAAK,OAAO;QACZ,KAAK,OAAO;UACRxD,KAAK,GAAGQ,QAAQ,CAACN,SAAS,CAAC,IAAI,CAACd,QAAQ,CAACoE,OAAO,CAAC,CAAC,CAACrB,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;UAC/D;QACJ,KAAK,GAAG;QACR,KAAK,IAAI;UACLnC,KAAK,GAAG,CAACwD,OAAO,GAAG,IAAI,CAACoC,cAAc,GAAG,CAAC,EAAET,QAAQ,CAAC,CAAC;UACtD,IAAI7D,IAAI,CAAC0B,KAAK,CAACP,CAAC,CAAC,IAAI,IAAI,EAAE;YACvBzC,KAAK,GAAG1B,MAAM,CAACkH,SAAS,CAACxF,KAAK,EAAE,CAAC,EAAE,GAAG,CAAC;UAC3C;UACA;QACJ,KAAK,GAAG;UACJ,IAAI0D,KAAK,IAAI,EAAE,EAAE;YACb1D,KAAK,GAAGQ,QAAQ,CAACN,SAAS,CAAC,IAAI,CAAC;UACpC,CAAC,MACI;YACDF,KAAK,GAAGQ,QAAQ,CAACN,SAAS,CAAC,IAAI,CAAC;UACpC;UACA;QACJ,KAAK,IAAI;UACL,IAAIwD,KAAK,IAAI,EAAE,EAAE;YACb1D,KAAK,GAAGQ,QAAQ,CAACN,SAAS,CAAC,MAAM,CAAC;UACtC,CAAC,MACI;YACDF,KAAK,GAAGQ,QAAQ,CAACN,SAAS,CAAC,MAAM,CAAC;UACtC;UACA;QACJ,KAAK,KAAK;UACN,IAAIwD,KAAK,IAAI,EAAE,EAAE;YACb1D,KAAK,GAAGQ,QAAQ,CAACN,SAAS,CAAC,GAAG,CAAC;UACnC,CAAC,MACI;YACDF,KAAK,GAAGQ,QAAQ,CAACN,SAAS,CAAC,GAAG,CAAC;UACnC;UACA;QACJ,KAAK,GAAG;UACJF,KAAK,GAAG1B,MAAM,CAACuH,UAAU,CAACnC,KAAK,CAAC,CAACyB,QAAQ,CAAC,CAAC;UAC3C;QACJ,KAAK,IAAI;UACLnF,KAAK,GAAG1B,MAAM,CAACkH,SAAS,CAAClH,MAAM,CAACuH,UAAU,CAACnC,KAAK,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC;UAC1D;QACJ,KAAK,GAAG;UACJ1D,KAAK,GAAG0D,KAAK,CAACyB,QAAQ,CAAC,CAAC;UACxB;QACJ,KAAK,IAAI;UACLnF,KAAK,GAAG1B,MAAM,CAACkH,SAAS,CAAC9B,KAAK,EAAE,CAAC,EAAE,GAAG,CAAC;UACvC;QACJ,KAAK,GAAG;UACJ1D,KAAK,GAAG1B,MAAM,CAACuH,UAAU,CAACnC,KAAK,EAAE,CAAC,CAAC,CAACyB,QAAQ,CAAC,CAAC;UAC9C;QACJ,KAAK,IAAI;UACLnF,KAAK,GAAG1B,MAAM,CAACkH,SAAS,CAAClH,MAAM,CAACuH,UAAU,CAACnC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC;UAC7D;QACJ,KAAK,GAAG;UACJ1D,KAAK,GAAG,CAAC0D,KAAK,GAAG,CAAC,EAAEyB,QAAQ,CAAC,CAAC;UAC9B;QACJ,KAAK,IAAI;UACLnF,KAAK,GAAG1B,MAAM,CAACkH,SAAS,CAAC9B,KAAK,GAAG,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC;UAC3C;QACJ,KAAK,GAAG;UACJ1D,KAAK,GAAG2D,OAAO,CAACwB,QAAQ,CAAC,CAAC;UAC1B;QACJ,KAAK,IAAI;UACLnF,KAAK,GAAG1B,MAAM,CAACkH,SAAS,CAAC7B,OAAO,EAAE,CAAC,EAAE,GAAG,CAAC;UACzC;QACJ,KAAK,GAAG;UACJ3D,KAAK,GAAG4D,OAAO,CAACuB,QAAQ,CAAC,CAAC;UAC1B;QACJ,KAAK,IAAI;UACLnF,KAAK,GAAG1B,MAAM,CAACkH,SAAS,CAAC5B,OAAO,EAAE,CAAC,EAAE,GAAG,CAAC;UACzC;QACJ,KAAK,GAAG;QACR,KAAK,IAAI;QACT,KAAK,KAAK;UACN5D,KAAK,GAAGiF,IAAI,CAACa,KAAK,CAAEjC,YAAY,GAAG,IAAI,GAAIoB,IAAI,CAACc,GAAG,CAAC,EAAE,EAAEzE,IAAI,CAAC0B,KAAK,CAACP,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC,CAACyC,QAAQ,CAAC,CAAC;UACzF;QACJ,KAAK,GAAG;UACJnF,KAAK,GAAG+D,SAAS,CAACoB,QAAQ,CAAC,CAAC;UAC5B;QACJ,KAAK,GAAG;QACR,KAAK,IAAI;QACT,KAAK,KAAK;UACNnF,KAAK,GAAG1B,MAAM,CAACkH,SAAS,CAAC3B,YAAY,EAAEvC,IAAI,CAAC0B,KAAK,CAACP,CAAC,CAAC,CAACC,MAAM,EAAE,GAAG,CAAC;UACjE;QACJ,KAAK,GAAG;UACJ1C,KAAK,GAAG1B,MAAM,CAAC0H,WAAW,CAACrF,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,CAACqD,GAAG,CAAC;UACxD;QACJ,KAAK,IAAI;UACLhE,KAAK,GAAG1B,MAAM,CAAC0H,WAAW,CAACrF,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,CAACqD,GAAG,CAAC;UACvD;QACJ,KAAK,KAAK;UACNhE,KAAK,GAAG1B,MAAM,CAAC0H,WAAW,CAACrF,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAACqD,GAAG,CAAC;UACvD;QACJ,KAAK,MAAM;UACPhE,KAAK,GAAG1B,MAAM,CAAC0H,WAAW,CAACrF,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAACqD,GAAG,CAAC;UACtD;QACJ,KAAK,GAAG;QACR,KAAK,IAAI;UACL,IAAIiC,EAAE,GAAGhB,IAAI,CAACC,GAAG,CAACpB,MAAM,CAAC,GAAG,EAAE;UAC9B,IAAIoC,GAAG,GAAGjB,IAAI,CAACkB,KAAK,CAACF,EAAE,CAAC;UACxB,IAAIG,GAAG,GAAGH,EAAE,GAAG,EAAE,GAAGC,GAAG,GAAG,EAAE;UAC5B,IAAI,IAAI,CAAClC,GAAG,EAAE;YACVkC,GAAG,GAAG,CAAC;YACPE,GAAG,GAAG,CAAC;UACX;UACA,IAAI9E,IAAI,CAAC0B,KAAK,CAACP,CAAC,CAAC,IAAI,GAAG,EAAE;YACtBzC,KAAK,GAAG,KAAK;YACbA,KAAK,IAAI8D,MAAM,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG;YAC/B9D,KAAK,IAAI1B,MAAM,CAACkH,SAAS,CAACU,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG5H,MAAM,CAACkH,SAAS,CAACY,GAAG,EAAE,CAAC,CAAC;UACtE,CAAC,MACI;YACDpG,KAAK,GAAG8D,MAAM,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG;YAC9B9D,KAAK,IAAI1B,MAAM,CAACkH,SAAS,CAACU,GAAG,EAAE,CAAC,CAAC,GAAG5H,MAAM,CAACkH,SAAS,CAACY,GAAG,EAAE,CAAC,CAAC;UAChE;UACA;QACJ,KAAK,GAAG;UACJpG,KAAK,GAAGW,IAAI,CAAC0F,WAAW,CAAC,CAAC;UAC1B;QACJ,KAAK,GAAG;UACJrG,KAAK,GAAGW,IAAI,CAAC2F,WAAW,CAAC,CAAC;UAC1B;MACR;MACAjD,GAAG,GAAGA,GAAG,CAACnB,OAAO,CAAC7D,QAAQ,CAAC6E,WAAW,EAAElD,KAAK,CAAC;IAClD;IACA,OAAOqD,GAAG;EACd,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI5E,aAAa,CAACmB,SAAS,CAACiB,KAAK,GAAG,UAAUP,MAAM,EAAED,MAAM,EAAE;IACtD;IACA,IAAI,CAAC9B,KAAK,CAACiD,QAAQ,CAACnB,MAAM,CAAC,EAAE;MACzBA,MAAM,GAAG,IAAI,CAACkG,eAAe;IACjC;IACA;IACA,IAAIjG,MAAM,YAAYkG,IAAI,EAAE;MACxB,OAAOlG,MAAM;IACjB;IACA;IACA,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;MAC5B,OAAO,IAAIkG,IAAI,CAAClG,MAAM,CAAC;IAC3B;IACA;IACA,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;MAC5BA,MAAM,GAAGA,MAAM,CAAC6E,QAAQ,CAAC,CAAC;IAC9B;IACA;IACA,IAAI,CAAC,IAAI,CAAC3E,QAAQ,EAAE;MAChB,IAAI,IAAI,CAACC,MAAM,EAAE;QACb,IAAI,CAACD,QAAQ,GAAG,IAAI,CAACC,MAAM,CAACD,QAAQ;MACxC,CAAC,MACI;QACD,IAAI,CAACA,QAAQ,GAAG,IAAIvC,QAAQ,CAAD,CAAC;MAChC;IACJ;IACA;IACA,IAAIoF,GAAG;IACP;IACA,IAAIoD,GAAG,GAAG,EAAE;IACZ;IACApG,MAAM,GAAG/B,MAAM,CAAC+C,WAAW,CAAChB,MAAM,CAAC;IACnC;IACAA,MAAM,GAAGA,MAAM,CAAC8B,MAAM,CAAC,CAAC,EAAE7B,MAAM,CAACoC,MAAM,CAAC;IACxC;IACA,IAAIpB,IAAI,GAAG,IAAI,CAACC,WAAW,CAAClB,MAAM,CAAC;IACnC;IACA,IAAIqG,aAAa,GAAG;MAChB,MAAM,EAAE,CAAC,CAAC;MACV,OAAO,EAAE,CAAC,CAAC;MACX,OAAO,EAAE,CAAC,CAAC;MACX,OAAO,EAAE,CAAC,CAAC;MACX,OAAO,EAAE,CAAC,CAAC;MACX,YAAY,EAAE,CAAC,CAAC;MAChB,WAAW,EAAE,CAAC,CAAC;MACf,cAAc,EAAE,CAAC,CAAC;MAClB,aAAa,EAAE,CAAC,CAAC;MACjB,KAAK,EAAE,CAAC,CAAC;MACT,SAAS,EAAE,CAAC,CAAC;MACb,MAAM,EAAE,CAAC,CAAC;MACV,WAAW,EAAE,CAAC,CAAC;MACf,aAAa,EAAE,CAAC,CAAC;MACjB,WAAW,EAAE,CAAC,CAAC;MACf,aAAa,EAAE,CAAC,CAAC;MACjB,QAAQ,EAAE,CAAC,CAAC;MACZ,QAAQ,EAAE,CAAC,CAAC;MACZ,aAAa,EAAE,CAAC,CAAC;MACjB,mBAAmB,EAAE,CAAC,CAAC;MACvB,IAAI,EAAE,CAAC,CAAC;MACR,MAAM,EAAE,CAAC,CAAC;MACV,WAAW,EAAE,CAAC,CAAC;MACf,KAAK,EAAE,CAAC;IACZ,CAAC;IACD;IACA,IAAIC,SAAS,GAAG;MACZ,MAAM,EAAE,IAAI;MACZ,OAAO,EAAE,CAAC;MACV,KAAK,EAAE,CAAC;MACR,MAAM,EAAE,CAAC;MACT,QAAQ,EAAE,CAAC;MACX,QAAQ,EAAE,CAAC;MACX,aAAa,EAAE,CAAC;MAChB,WAAW,EAAE,IAAI;MACjB,QAAQ,EAAE,CAAC;MACX,KAAK,EAAE,IAAI,CAAC3C;IAChB,CAAC;IACD;IACA,IAAI4C,WAAW,GAAG,CAAC;MAAEC,KAAK,GAAG,CAAC;IAC9B;IACA,KAAK,IAAIpE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnB,IAAI,CAAC0B,KAAK,CAACN,MAAM,EAAED,CAAC,EAAE,EAAE;MACxC;MACAoE,KAAK,GAAGpE,CAAC,GAAGmE,WAAW,GAAG,CAAC;MAC3B,QAAQtF,IAAI,CAAC0B,KAAK,CAACP,CAAC,CAAC;QACjB,KAAK,MAAM;QACX,KAAK,MAAM;UACPgE,GAAG,IAAI,YAAY;UACnBC,aAAa,CAACpB,IAAI,GAAGuB,KAAK;UAC1B;QACJ,KAAK,KAAK;QACV,KAAK,KAAK;UACNJ,GAAG,IAAI,YAAY;UACnBC,aAAa,CAACI,KAAK,GAAGD,KAAK;UAC3B;QACJ,KAAK,IAAI;QACT,KAAK,IAAI;UACLJ,GAAG,IAAI,YAAY;UACnBC,aAAa,CAACK,KAAK,GAAGF,KAAK;UAC3B;QACJ,KAAK,GAAG;QACR,KAAK,GAAG;UACJJ,GAAG,IAAI,YAAY;UACnBC,aAAa,CAACM,KAAK,GAAGH,KAAK;UAC3B;QACJ,KAAK,MAAM;UACPJ,GAAG,IAAI,GAAG,GAAG,IAAI,CAACQ,aAAa,CAAC,IAAI,CAAC/H,MAAM,CAAC,CAACgI,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG;UAC5DR,aAAa,CAACS,SAAS,GAAGN,KAAK;UAC/B;QACJ,KAAK,KAAK;UACNJ,GAAG,IAAI,GAAG,GAAG,IAAI,CAACQ,aAAa,CAAC,IAAI,CAAC9H,WAAW,CAAC,CAAC+H,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG;UACjER,aAAa,CAACU,UAAU,GAAGP,KAAK;UAChC;QACJ,KAAK,IAAI;QACT,KAAK,GAAG;UACJJ,GAAG,IAAI,qBAAqB;UAC5BC,aAAa,CAACnD,KAAK,GAAGsD,KAAK;UAC3B;QACJ,KAAK,IAAI;QACT,KAAK,GAAG;UACJJ,GAAG,IAAI,qBAAqB;UAC5BC,aAAa,CAACtB,IAAI,GAAGyB,KAAK;UAC1B;QACJ,KAAK,IAAI;QACT,KAAK,GAAG;UACJJ,GAAG,IAAI,qBAAqB;UAC5BC,aAAa,CAACjD,GAAG,GAAGoD,KAAK;UACzB;QACJ,KAAK,KAAK;QACV,KAAK,IAAI;QACT,KAAK,GAAG;UACJJ,GAAG,IAAI,8BAA8B;UACrCC,aAAa,CAACW,OAAO,GAAGR,KAAK;UAC7B;QACJ,KAAK,MAAM;UACPJ,GAAG,IAAI,GAAG,GAAG,IAAI,CAACQ,aAAa,CAAC,IAAI,CAAC7H,QAAQ,CAAC,CAAC8H,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG;UAC9DR,aAAa,CAACY,WAAW,GAAGT,KAAK;UACjC;QACJ,KAAK,KAAK;UACNJ,GAAG,IAAI,GAAG,GAAG,IAAI,CAACQ,aAAa,CAAC,IAAI,CAAC5H,aAAa,CAAC,CAAC6H,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG;UACnER,aAAa,CAACa,YAAY,GAAGV,KAAK;UAClC;QACJ,KAAK,KAAK;QACV,KAAK,IAAI;QACT,KAAK,GAAG;UACJ;UACAJ,GAAG,IAAI,GAAG,GAAG,IAAI,CAACQ,aAAa,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG;UAC3FR,aAAa,CAACc,EAAE,GAAGX,KAAK;UACxB;QACJ,KAAK,IAAI;QACT,KAAK,GAAG;UACJJ,GAAG,IAAI,qBAAqB;UAC5BC,aAAa,CAACe,WAAW,GAAGZ,KAAK;UACjC;QACJ,KAAK,IAAI;QACT,KAAK,GAAG;UACJJ,GAAG,IAAI,qBAAqB;UAC5BC,aAAa,CAACgB,SAAS,GAAGb,KAAK;UAC/B;QACJ,KAAK,IAAI;QACT,KAAK,GAAG;UACJJ,GAAG,IAAI,qBAAqB;UAC5BC,aAAa,CAACiB,WAAW,GAAGd,KAAK;UACjC;QACJ,KAAK,IAAI;QACT,KAAK,GAAG;UACJJ,GAAG,IAAI,qBAAqB;UAC5BC,aAAa,CAACkB,SAAS,GAAGf,KAAK;UAC/B;QACJ,KAAK,IAAI;QACT,KAAK,GAAG;UACJJ,GAAG,IAAI,qBAAqB;UAC5BC,aAAa,CAACmB,MAAM,GAAGhB,KAAK;UAC5B;QACJ,KAAK,IAAI;QACT,KAAK,GAAG;UACJJ,GAAG,IAAI,qBAAqB;UAC5BC,aAAa,CAACoB,MAAM,GAAGjB,KAAK;UAC5B;QACJ,KAAK,KAAK;QACV,KAAK,IAAI;QACT,KAAK,GAAG;UACJJ,GAAG,IAAI,8BAA8B;UACrCC,aAAa,CAACqB,WAAW,GAAGlB,KAAK;UACjCH,aAAa,CAACsB,iBAAiB,GAAG1G,IAAI,CAAC0B,KAAK,CAACP,CAAC,CAAC,CAACC,MAAM;UACtD;QACJ,KAAK,KAAK;QACV,KAAK,IAAI;QACT,KAAK,GAAG;UACJ+D,GAAG,IAAI,8BAA8B;UACrCC,aAAa,CAACqB,WAAW,GAAGlB,KAAK;UACjC;QACJ,KAAK,GAAG;UACJJ,GAAG,IAAI,aAAa;UACpBC,aAAa,CAAC3C,SAAS,GAAG8C,KAAK;UAC/B;QACJ,KAAK,GAAG;UACJJ,GAAG,IAAI,6BAA6B;UACpCC,aAAa,CAACuB,IAAI,GAAGpB,KAAK;UAC1B;QACJ,KAAK,IAAI;UACLJ,GAAG,IAAI,2BAA2B;UAClCC,aAAa,CAACuB,IAAI,GAAGpB,KAAK;UAC1B;QACJ,KAAK,GAAG;UACJJ,GAAG,IAAI,uHAAuH;UAC9HC,aAAa,CAACwB,GAAG,GAAGrB,KAAK;UACzBD,WAAW,IAAI,CAAC;UAChB;QACJ,KAAK,GAAG;QACR,KAAK,MAAM;QACX,KAAK,KAAK;QACV,KAAK,IAAI;QACT,KAAK,GAAG;QACR,KAAK,OAAO;QACZ,KAAK,GAAG;QACR,KAAK,OAAO;QACZ,KAAK,MAAM;QACX,KAAK,KAAK;QACV,KAAK,IAAI;QACT,KAAK,GAAG;QACR,KAAK,OAAO;QACZ,KAAK,MAAM;QACX,KAAK,KAAK;QACV,KAAK,IAAI;QACT,KAAK,GAAG;QACR,KAAK,MAAM;QACX,KAAK,KAAK;QACV,KAAK,IAAI;QACT,KAAK,GAAG;QACR,KAAK,GAAG;UACJ;UACAA,WAAW,EAAE;UACb;MACR;MACAH,GAAG,IAAI,SAAS;IACpB;IACA;IACA,IAAI0B,KAAK,GAAG,IAAIC,MAAM,CAAC3B,GAAG,CAAC;IAC3B,IAAI3D,OAAO,GAAGxC,MAAM,CAACuC,KAAK,CAACsF,KAAK,CAAC;IACjC,IAAIrF,OAAO,EAAE;MACT;MACA;MACA,IAAI4D,aAAa,CAACpB,IAAI,GAAG,CAAC,CAAC,EAAE;QACzBqB,SAAS,CAACrB,IAAI,GAAG+C,QAAQ,CAACvF,OAAO,CAAC4D,aAAa,CAACpB,IAAI,CAAC,CAAC;MAC1D;MACA;MACA,IAAIoB,aAAa,CAACI,KAAK,GAAG,CAAC,CAAC,EAAE;QAC1B,IAAIwB,GAAG,GAAGD,QAAQ,CAACvF,OAAO,CAAC4D,aAAa,CAACI,KAAK,CAAC,CAAC;QAChDwB,GAAG,IAAI,IAAI;QACX3B,SAAS,CAACrB,IAAI,GAAGgD,GAAG;MACxB;MACA;MACA,IAAI5B,aAAa,CAACK,KAAK,GAAG,CAAC,CAAC,EAAE;QAC1B,IAAIuB,GAAG,GAAGD,QAAQ,CAACvF,OAAO,CAAC4D,aAAa,CAACK,KAAK,CAAC,CAAC;QAChD,IAAIuB,GAAG,GAAG,EAAE,EAAE;UACVA,GAAG,IAAI,IAAI;QACf,CAAC,MACI;UACDA,GAAG,IAAI,IAAI;QACf;QACA3B,SAAS,CAACrB,IAAI,GAAGgD,GAAG;MACxB;MACA;MACA,IAAI5B,aAAa,CAACM,KAAK,GAAG,CAAC,CAAC,EAAE;QAC1B,IAAIsB,GAAG,GAAGD,QAAQ,CAACvF,OAAO,CAAC4D,aAAa,CAACM,KAAK,CAAC,CAAC;QAChDsB,GAAG,GAAGrD,IAAI,CAACkB,KAAK,CAAE,IAAIK,IAAI,CAAC,CAAC,CAAC/B,WAAW,CAAC,CAAC,GAAI,EAAE,CAAC,GAAG,EAAE,GAAG6D,GAAG;QAC5D3B,SAAS,CAACrB,IAAI,GAAGgD,GAAG;MACxB;MACA;MACA,IAAI5B,aAAa,CAACS,SAAS,GAAG,CAAC,CAAC,EAAE;QAC9BR,SAAS,CAACpD,KAAK,GAAG,IAAI,CAACgF,YAAY,CAACzF,OAAO,CAAC4D,aAAa,CAACS,SAAS,CAAC,CAAC;MACzE;MACA;MACA,IAAIT,aAAa,CAACU,UAAU,GAAG,CAAC,CAAC,EAAE;QAC/BT,SAAS,CAACpD,KAAK,GAAG,IAAI,CAACiF,iBAAiB,CAAC1F,OAAO,CAAC4D,aAAa,CAACU,UAAU,CAAC,CAAC;MAC/E;MACA;MACA,IAAIV,aAAa,CAACnD,KAAK,GAAG,CAAC,CAAC,EAAE;QAC1BoD,SAAS,CAACpD,KAAK,GAAG8E,QAAQ,CAACvF,OAAO,CAAC4D,aAAa,CAACnD,KAAK,CAAC,CAAC,GAAG,CAAC;MAChE;MACA;MACA;MACA;MACA,IAAKmD,aAAa,CAACtB,IAAI,GAAG,CAAC,CAAC,IAAMsB,aAAa,CAACjD,GAAG,KAAK,CAAC,CAAE,EAAE;QACzD;QACA;QACA;QACAkD,SAAS,CAACpD,KAAK,GAAG,CAAC;QACnBoD,SAAS,CAAClD,GAAG,GAAGnF,MAAM,CAACmK,cAAc,CAACJ,QAAQ,CAACvF,OAAO,CAAC4D,aAAa,CAACtB,IAAI,CAAC,CAAC,EAAEuB,SAAS,CAACrB,IAAI,EAAE,CAAC,EAAE,IAAI,CAACtB,GAAG,CAAC;MAC7G;MACA;MACA,IAAI0C,aAAa,CAACjD,GAAG,GAAG,CAAC,CAAC,EAAE;QACxBkD,SAAS,CAAClD,GAAG,GAAG4E,QAAQ,CAACvF,OAAO,CAAC4D,aAAa,CAACjD,GAAG,CAAC,CAAC;MACxD;MACA;MACA,IAAIiD,aAAa,CAACW,OAAO,GAAG,CAAC,CAAC,EAAE;QAC5BV,SAAS,CAACpD,KAAK,GAAG,CAAC;QACnBoD,SAAS,CAAClD,GAAG,GAAG4E,QAAQ,CAACvF,OAAO,CAAC4D,aAAa,CAACW,OAAO,CAAC,CAAC;MAC5D;MACA;MACA,IAAIX,aAAa,CAACgB,SAAS,GAAG,CAAC,CAAC,EAAE;QAC9Bf,SAAS,CAAC+B,IAAI,GAAGL,QAAQ,CAACvF,OAAO,CAAC4D,aAAa,CAACgB,SAAS,CAAC,CAAC;MAC/D;MACA;MACA,IAAIhB,aAAa,CAACkB,SAAS,GAAG,CAAC,CAAC,EAAE;QAC9BjB,SAAS,CAAC+B,IAAI,GAAGL,QAAQ,CAACvF,OAAO,CAAC4D,aAAa,CAACkB,SAAS,CAAC,CAAC,GAAG,CAAC;MACnE;MACA;MACA,IAAIlB,aAAa,CAACiB,WAAW,GAAG,CAAC,CAAC,EAAE;QAChC,IAAIW,GAAG,GAAGD,QAAQ,CAACvF,OAAO,CAAC4D,aAAa,CAACiB,WAAW,CAAC,CAAC;QACtD,IAAIW,GAAG,IAAI,EAAE,EAAE;UACXA,GAAG,GAAG,CAAC;QACX;QACA,IAAK5B,aAAa,CAACc,EAAE,GAAG,CAAC,CAAC,IAAK,CAAC,IAAI,CAACmB,IAAI,CAAC7F,OAAO,CAAC4D,aAAa,CAACc,EAAE,CAAC,CAAC,EAAE;UAClEc,GAAG,IAAI,EAAE;QACb;QACA3B,SAAS,CAAC+B,IAAI,GAAGJ,GAAG;MACxB;MACA;MACA,IAAI5B,aAAa,CAACe,WAAW,GAAG,CAAC,CAAC,EAAE;QAChC,IAAIa,GAAG,GAAGD,QAAQ,CAACvF,OAAO,CAAC4D,aAAa,CAACe,WAAW,CAAC,CAAC;QACtD,IAAIa,GAAG,IAAI,EAAE,EAAE;UACXA,GAAG,GAAG,CAAC;QACX;QACA,IAAK5B,aAAa,CAACc,EAAE,GAAG,CAAC,CAAC,IAAK,CAAC,IAAI,CAACmB,IAAI,CAAC7F,OAAO,CAAC4D,aAAa,CAACc,EAAE,CAAC,CAAC,EAAE;UAClEc,GAAG,IAAI,EAAE;QACb;QACA3B,SAAS,CAAC+B,IAAI,GAAGJ,GAAG;MACxB;MACA;MACA,IAAI5B,aAAa,CAACmB,MAAM,GAAG,CAAC,CAAC,EAAE;QAC3BlB,SAAS,CAACkB,MAAM,GAAGQ,QAAQ,CAACvF,OAAO,CAAC4D,aAAa,CAACmB,MAAM,CAAC,CAAC;MAC9D;MACA;MACA,IAAInB,aAAa,CAACoB,MAAM,GAAG,CAAC,CAAC,EAAE;QAC3BnB,SAAS,CAACmB,MAAM,GAAGO,QAAQ,CAACvF,OAAO,CAAC4D,aAAa,CAACoB,MAAM,CAAC,CAAC;MAC9D;MACA;MACA,IAAIpB,aAAa,CAACqB,WAAW,GAAG,CAAC,CAAC,EAAE;QAChC,IAAIO,GAAG,GAAGD,QAAQ,CAACvF,OAAO,CAAC4D,aAAa,CAACqB,WAAW,CAAC,CAAC;QACtD,IAAIrB,aAAa,CAACsB,iBAAiB,IAAI,CAAC,EAAE;UACtCM,GAAG,IAAI,EAAE;QACb,CAAC,MACI,IAAI5B,aAAa,CAACsB,iBAAiB,IAAI,CAAC,EAAE;UAC3CM,GAAG,IAAI,GAAG;QACd;QACA3B,SAAS,CAACoB,WAAW,GAAGO,GAAG;MAC/B;MACA;MACA,IAAI5B,aAAa,CAAC3C,SAAS,GAAG,CAAC,CAAC,EAAE;QAC9B4C,SAAS,CAAC5C,SAAS,GAAGsE,QAAQ,CAACvF,OAAO,CAAC4D,aAAa,CAAC3C,SAAS,CAAC,CAAC;QAChE,IAAI6E,EAAE,GAAG,IAAIpC,IAAI,CAACG,SAAS,CAAC5C,SAAS,CAAC;QACtC4C,SAAS,CAACrB,IAAI,GAAGsD,EAAE,CAAC3E,cAAc,CAAC,CAAC;QACpC0C,SAAS,CAACpD,KAAK,GAAGqF,EAAE,CAAC1E,WAAW,CAAC,CAAC;QAClCyC,SAAS,CAAClD,GAAG,GAAGmF,EAAE,CAACxE,UAAU,CAAC,CAAC;QAC/BuC,SAAS,CAAC+B,IAAI,GAAGE,EAAE,CAACvE,WAAW,CAAC,CAAC;QACjCsC,SAAS,CAACkB,MAAM,GAAGe,EAAE,CAACtE,aAAa,CAAC,CAAC;QACrCqC,SAAS,CAACmB,MAAM,GAAGc,EAAE,CAACrE,aAAa,CAAC,CAAC;QACrCoC,SAAS,CAACoB,WAAW,GAAGa,EAAE,CAACpE,kBAAkB,CAAC,CAAC;MACnD;MACA;MACA,IAAIkC,aAAa,CAACuB,IAAI,GAAG,CAAC,CAAC,EAAE;QACzBtB,SAAS,CAAC7C,MAAM,GAAG,IAAI,CAAC+E,qBAAqB,CAAC,IAAIrC,IAAI,CAACG,SAAS,CAACrB,IAAI,EAAEqB,SAAS,CAACpD,KAAK,EAAEoD,SAAS,CAAClD,GAAG,CAAC,EAAEX,OAAO,CAAC4D,aAAa,CAACuB,IAAI,CAAC,CAAC;MACxI;MACA;MACA,IAAIvB,aAAa,CAACwB,GAAG,GAAG,CAAC,CAAC,EAAE;QACxBvB,SAAS,CAACrB,IAAI,GAAG/G,KAAK,CAACuK,QAAQ,CAAChG,OAAO,CAAC4D,aAAa,CAACwB,GAAG,GAAG,CAAC,CAAC,CAAC;QAC/DvB,SAAS,CAACpD,KAAK,GAAGhF,KAAK,CAACuK,QAAQ,CAAChG,OAAO,CAAC4D,aAAa,CAACwB,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;QACpEvB,SAAS,CAAClD,GAAG,GAAGlF,KAAK,CAACuK,QAAQ,CAAChG,OAAO,CAAC4D,aAAa,CAACwB,GAAG,GAAG,CAAC,CAAC,CAAC;QAC9DvB,SAAS,CAAC+B,IAAI,GAAGnK,KAAK,CAACuK,QAAQ,CAAChG,OAAO,CAAC4D,aAAa,CAACwB,GAAG,GAAG,CAAC,CAAC,CAAC;QAC/DvB,SAAS,CAACkB,MAAM,GAAGtJ,KAAK,CAACuK,QAAQ,CAAChG,OAAO,CAAC4D,aAAa,CAACwB,GAAG,GAAG,CAAC,CAAC,CAAC;QACjEvB,SAAS,CAACmB,MAAM,GAAGvJ,KAAK,CAACuK,QAAQ,CAAChG,OAAO,CAAC4D,aAAa,CAACwB,GAAG,GAAG,CAAC,CAAC,CAAC;QACjEvB,SAAS,CAACoB,WAAW,GAAGxJ,KAAK,CAACuK,QAAQ,CAAChG,OAAO,CAAC4D,aAAa,CAACwB,GAAG,GAAG,CAAC,CAAC,CAAC;QACtE,IAAIpF,OAAO,CAAC4D,aAAa,CAACwB,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,IAAIpF,OAAO,CAAC4D,aAAa,CAACwB,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE;UAChFvB,SAAS,CAAC3C,GAAG,GAAG,IAAI;QACxB,CAAC,MACI,IAAIlB,OAAO,CAAC4D,aAAa,CAACwB,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;UAC3CvB,SAAS,CAAC7C,MAAM,GAAG,IAAI,CAAC+E,qBAAqB,CAAC,IAAIrC,IAAI,CAACG,SAAS,CAACrB,IAAI,EAAEqB,SAAS,CAACpD,KAAK,EAAEoD,SAAS,CAAClD,GAAG,CAAC,EAAEX,OAAO,CAAC4D,aAAa,CAACwB,GAAG,GAAG,CAAC,CAAC,CAAC;QAC3I;MACJ;MACA;MACA,IAAIvB,SAAS,CAAC3C,GAAG,EAAE;QACfX,GAAG,GAAG,IAAImD,IAAI,CAACA,IAAI,CAACuC,GAAG,CAACpC,SAAS,CAACrB,IAAI,EAAEqB,SAAS,CAACpD,KAAK,EAAEoD,SAAS,CAAClD,GAAG,EAAEkD,SAAS,CAAC+B,IAAI,EAAE/B,SAAS,CAACkB,MAAM,EAAElB,SAAS,CAACmB,MAAM,EAAEnB,SAAS,CAACoB,WAAW,CAAC,CAAC;MACvJ,CAAC,MACI;QACD1E,GAAG,GAAG,IAAImD,IAAI,CAACG,SAAS,CAACrB,IAAI,EAAEqB,SAAS,CAACpD,KAAK,EAAEoD,SAAS,CAAClD,GAAG,EAAEkD,SAAS,CAAC+B,IAAI,EAAE/B,SAAS,CAACkB,MAAM,GAAGlB,SAAS,CAAC7C,MAAM,EAAE6C,SAAS,CAACmB,MAAM,EAAEnB,SAAS,CAACoB,WAAW,CAAC;MAChK;IACJ,CAAC,MACI;MACD;MACA;MACA1E,GAAG,GAAG,IAAImD,IAAI,CAAClG,MAAM,CAAC;IAC1B;IACA,OAAO+C,GAAG;EACd,CAAC;EACD5E,aAAa,CAACmB,SAAS,CAACiJ,qBAAqB,GAAG,UAAUlI,IAAI,EAAEsH,IAAI,EAAE;IAClE,IAAIjI,KAAK,GAAGiI,IAAI,CAACpF,KAAK,CAAC,gCAAgC,CAAC;IACxD,IAAI7C,KAAK,EAAE;MACP,IAAI6C,KAAK,GAAGtE,KAAK,CAACyK,QAAQ,CAACf,IAAI,CAACpF,KAAK,CAAC,gCAAgC,CAAC,CAAC;MACxE,IAAIoG,GAAG,GAAGpG,KAAK,CAAC,CAAC,CAAC;MAClB,IAAI6F,IAAI,GAAG7F,KAAK,CAAC,CAAC,CAAC;MACnB,IAAIgF,MAAM,GAAGhF,KAAK,CAAC,CAAC,CAAC;MACrB,IAAIiB,MAAM,GAAGuE,QAAQ,CAACK,IAAI,CAAC,GAAG,EAAE,GAAGL,QAAQ,CAACR,MAAM,CAAC;MACnD;MACA;MACA;MACA,IAAIoB,GAAG,IAAI,GAAG,EAAE;QACZnF,MAAM,IAAI,CAAC,CAAC;MAChB;MACA;MACA,IAAIoF,cAAc,GAAG,CAACvI,IAAI,IAAI,IAAI6F,IAAI,CAAC,CAAC,EAAE5E,iBAAiB,CAAC,CAAC;MAC7D,IAAIuH,IAAI,GAAGrF,MAAM,GAAGoF,cAAc;MAClC,OAAOC,IAAI;IACf;IACA,OAAO,CAAC;EACZ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACI1K,aAAa,CAACmB,SAAS,CAAC2I,YAAY,GAAG,UAAUvI,KAAK,EAAE;IACpD;IACA,IAAIuD,KAAK,GAAG,IAAI,CAACrE,MAAM,CAACkK,OAAO,CAACpJ,KAAK,CAAC;IACtC,IAAIuD,KAAK,GAAG,CAAC,CAAC,EAAE;MACZ,OAAOA,KAAK;IAChB;IACA;IACA,IAAI,IAAI,CAAC/C,QAAQ,IAAI,CAAC,IAAI,CAACA,QAAQ,CAAC6I,SAAS,CAAC,CAAC,EAAE;MAC7C9F,KAAK,GAAG,IAAI,CAAC/C,QAAQ,CAAC8I,YAAY,CAAC,IAAI,CAACpK,MAAM,CAAC,CAACkK,OAAO,CAACpJ,KAAK,CAAC;MAC9D,IAAIuD,KAAK,GAAG,CAAC,CAAC,EAAE;QACZ,OAAOA,KAAK;MAChB;IACJ;IACA,OAAO,CAAC;EACZ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACI9E,aAAa,CAACmB,SAAS,CAAC4I,iBAAiB,GAAG,UAAUxI,KAAK,EAAE;IACzD;IACA,IAAIuD,KAAK,GAAG,IAAI,CAACpE,WAAW,CAACiK,OAAO,CAACpJ,KAAK,CAAC;IAC3C,IAAIuD,KAAK,GAAG,CAAC,CAAC,EAAE;MACZ,OAAOA,KAAK;IAChB;IACA;IACAA,KAAK,GAAG,IAAI,CAACrE,MAAM,CAACkK,OAAO,CAACpJ,KAAK,CAAC;IAClC,IAAIuD,KAAK,GAAG,CAAC,CAAC,EAAE;MACZ,OAAOA,KAAK;IAChB;IACA;IACA,IAAI,IAAI,CAAC/C,QAAQ,IAAI,CAAC,IAAI,CAACA,QAAQ,CAAC6I,SAAS,CAAC,CAAC,EAAE;MAC7C9F,KAAK,GAAG,IAAI,CAAC/C,QAAQ,CAAC8I,YAAY,CAAC,IAAI,CAACnK,WAAW,CAAC,CAACiK,OAAO,CAACpJ,KAAK,CAAC;MACnE,IAAIuD,KAAK,GAAG,CAAC,CAAC,EAAE;QACZ,OAAOA,KAAK;MAChB;IACJ;IACA,OAAO,CAAC;EACZ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACI9E,aAAa,CAACmB,SAAS,CAAC+I,IAAI,GAAG,UAAU3I,KAAK,EAAE;IAC5C,IAAIuJ,IAAI,GAAG,IAAI,CAACtC,aAAa,CAAC,CAAC,IAAI,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;IAClD,OAAOsC,IAAI,CAACH,OAAO,CAACpJ,KAAK,CAACoC,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACjD,CAAC;EACD;AACJ;AACA;EACI3D,aAAa,CAACmB,SAAS,CAAC4J,gBAAgB,GAAG,YAAY;IACnD,IAAI,IAAI,CAAC/I,MAAM,EAAE;MACb,IAAI,CAACA,MAAM,CAACgJ,UAAU,CAAC,CAAC;IAC5B;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIhL,aAAa,CAACmB,SAAS,CAACqH,aAAa,GAAG,UAAUsC,IAAI,EAAE;IACpD,IAAIlG,GAAG,GAAG,EAAE;IACZ,KAAK,IAAIZ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8G,IAAI,CAAC7G,MAAM,EAAED,CAAC,EAAE,EAAE;MAClC;MACA,IAAI,IAAI,CAACjC,QAAQ,EAAE;QACf6C,GAAG,CAACJ,IAAI,CAAC3E,MAAM,CAACoL,aAAa,CAAC,IAAI,CAAClJ,QAAQ,CAACN,SAAS,CAACqJ,IAAI,CAAC9G,CAAC,CAAC,CAAC,CAAC,CAAC;MACpE,CAAC,MACI;QACDY,GAAG,CAACJ,IAAI,CAAC3E,MAAM,CAACoL,aAAa,CAACH,IAAI,CAAC9G,CAAC,CAAC,CAAC,CAAC;MAC3C;IACJ;IACA,OAAOY,GAAG;EACd,CAAC;EACD3D,MAAM,CAACC,cAAc,CAAClB,aAAa,CAACmB,SAAS,EAAE,YAAY,EAAE;IACzD;AACR;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAAChB,WAAW;IAC3B,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQkB,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAACnB,WAAW,GAAGmB,KAAK;MACxB,IAAI,CAACwJ,gBAAgB,CAAC,CAAC;IAC3B,CAAC;IACDrJ,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFV,MAAM,CAACC,cAAc,CAAClB,aAAa,CAACmB,SAAS,EAAE,iBAAiB,EAAE;IAC9D;AACR;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACf,gBAAgB;IAChC,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;IACQiB,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAAClB,gBAAgB,GAAGkB,KAAK;MAC7B,IAAI,CAACwJ,gBAAgB,CAAC,CAAC;IAC3B,CAAC;IACDrJ,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFV,MAAM,CAACC,cAAc,CAAClB,aAAa,CAACmB,SAAS,EAAE,aAAa,EAAE;IAC1D;AACR;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAAC8J,YAAY;IAC5B,CAAC;IACD;AACR;AACA;AACA;AACA;IACQ5J,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAAC2J,YAAY,GAAG3J,KAAK;MACzB,IAAI,CAACwJ,gBAAgB,CAAC,CAAC;IAC3B,CAAC;IACDrJ,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFV,MAAM,CAACC,cAAc,CAAClB,aAAa,CAACmB,SAAS,EAAE,KAAK,EAAE;IAClD;AACR;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACd,IAAI;IACpB,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQgB,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAACjB,IAAI,GAAGiB,KAAK;MACjB,IAAI,CAACwJ,gBAAgB,CAAC,CAAC;IAC3B,CAAC;IACDrJ,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFV,MAAM,CAACC,cAAc,CAAClB,aAAa,CAACmB,SAAS,EAAE,gBAAgB,EAAE;IAC7D;AACR;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAAC+J,eAAe;IAC/B,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ7J,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,IAAI,CAAC4J,eAAe,IAAI5J,KAAK,EAAE;QAC/B,IAAI,CAAC4J,eAAe,GAAG5J,KAAK;QAC5B,IAAI,CAACwJ,gBAAgB,CAAC,CAAC;MAC3B;IACJ,CAAC;IACDrJ,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFV,MAAM,CAACC,cAAc,CAAClB,aAAa,CAACmB,SAAS,EAAE,UAAU,EAAE;IACvD;AACR;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACgK,SAAS;IACzB,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ9J,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,IAAI,CAAC6J,SAAS,IAAI7J,KAAK,EAAE;QACzB,IAAI,CAAC6J,SAAS,GAAG7J,KAAK;QACtB,IAAI,CAAChB,eAAe,GAAGR,KAAK,CAACsL,kBAAkB,CAAC9J,KAAK,CAAC;QACtD,IAAI,CAACwJ,gBAAgB,CAAC,CAAC;MAC3B;IACJ,CAAC;IACDrJ,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFV,MAAM,CAACC,cAAc,CAAClB,aAAa,CAACmB,SAAS,EAAE,gBAAgB,EAAE;IAC7D;AACR;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACZ,eAAe;IAC/B,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQc,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAACf,eAAe,GAAGe,KAAK;MAC5B,IAAI,CAACwJ,gBAAgB,CAAC,CAAC;IAC3B,CAAC;IACDrJ,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFV,MAAM,CAACC,cAAc,CAAClB,aAAa,CAACmB,SAAS,EAAE,cAAc,EAAE;IAC3D;AACR;AACA;AACA;IACQC,GAAG,EAAE,SAAAA,CAAA,EAAY;MACb,OAAO,IAAI,CAACP,aAAa;IAC7B,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;IACQS,GAAG,EAAE,SAAAA,CAAUC,KAAK,EAAE;MAClB,IAAI,CAACV,aAAa,GAAGU,KAAK,CAAC+J,WAAW,CAAC,CAAC;MACxC,IAAI,CAACP,gBAAgB,CAAC,CAAC;IAC3B,CAAC;IACDrJ,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF,OAAO3B,aAAa;AACxB,CAAC,CAACP,UAAU,CAAE;AACd,SAASO,aAAa;AACtB;AACA;AACA;AACA;AACA;AACA;AACAL,QAAQ,CAAC4L,iBAAiB,CAAC,eAAe,CAAC,GAAGvL,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}