{"ast":null,"code":"/**\r\n * This module contains a version of ColorSet that can (and should) be used for\r\n * coloring UI elements.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { BaseObject } from \"../Base\";\nimport { registry } from \"../Registry\";\nimport { color } from \"./Color\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * This module contains a version of ColorSet that can (and should) be used for\r\n * coloring UI elements.\r\n *\r\n * The main difference from the basic [[ColorSet]] is that instead of sequenced\r\n * colors, it uses a concept of named colors.\r\n *\r\n * This way, every element in the UI can extract an exact color theme author\r\n * meant for the specific purpose, like strokes, backgrounds, etc.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info\r\n */\nvar InterfaceColorSet = /** @class */function (_super) {\n  __extends(InterfaceColorSet, _super);\n  /**\r\n   * Constructor\r\n   */\n  function InterfaceColorSet() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Maps the list of purposes (like \"stroke\") to an index of color of the\r\n     * color set.\r\n     */\n    _this._purposes = {\n      stroke: color(\"#e5e5e5\"),\n      fill: color(\"#f3f3f3\"),\n      primaryButton: color(\"#6794dc\"),\n      primaryButtonHover: color(\"#6771dc\"),\n      primaryButtonDown: color(\"#68dc75\"),\n      primaryButtonActive: color(\"#68dc75\"),\n      primaryButtonText: color(\"#FFFFFF\"),\n      primaryButtonStroke: color(\"#FFFFFF\"),\n      secondaryButton: color(\"#d9d9d9\"),\n      secondaryButtonHover: color(\"#d9d9d9\").brighten(-0.25),\n      secondaryButtonDown: color(\"#d9d9d9\").brighten(-0.35),\n      secondaryButtonActive: color(\"#d9d9d9\").brighten(0.35),\n      secondaryButtonText: color(\"#000000\"),\n      secondaryButtonStroke: color(\"#FFFFFF\"),\n      grid: color(\"#000000\"),\n      background: color(\"#ffffff\"),\n      alternativeBackground: color(\"#000000\"),\n      text: color(\"#000000\"),\n      alternativeText: color(\"#FFFFFF\"),\n      disabledBackground: color(\"#999999\"),\n      positive: color(\"#67dc75\"),\n      negative: color(\"#dc6788\")\n    };\n    _this.className = \"InterfaceColorSet\";\n    _this.applyTheme();\n    return _this;\n  }\n  InterfaceColorSet.prototype.debug = function () {};\n  /**\r\n   * Returns a color to be used for the specific purpose.\r\n   *\r\n   * ```TypeScript\r\n   * let uicolors = new am4core.InterfaceColorSet();\r\n   * console.log(uicolors.getFor(\"stroke\"));\r\n   * ```\r\n   * ```JavaScript\r\n   * var uicolors = new am4core.InterfaceColorSet();\r\n   * console.log(uicolors.getFor(\"stroke\"));\r\n   * ```\r\n   *\r\n   * @param purpose  Color use purpuse\r\n   * @return Color\r\n   */\n  InterfaceColorSet.prototype.getFor = function (purpose) {\n    return this._purposes[purpose];\n  };\n  /**\r\n   * Sets color to be used for the specific purpose.\r\n   *\r\n   * @param purpose  Color use purpose\r\n   * @param color    Color\r\n   */\n  InterfaceColorSet.prototype.setFor = function (purpose, color) {\n    this._purposes[purpose] = color;\n  };\n  return InterfaceColorSet;\n}(BaseObject);\nexport { InterfaceColorSet };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\nregistry.registeredClasses[\"InterfaceColorSet\"] = InterfaceColorSet;","map":{"version":3,"names":["__extends","BaseObject","registry","color","InterfaceColorSet","_super","_this","call","_purposes","stroke","fill","primaryButton","primaryButtonHover","primaryButtonDown","primaryButtonActive","primaryButtonText","primaryButtonStroke","secondaryButton","secondaryButtonHover","brighten","secondaryButtonDown","secondaryButtonActive","secondaryButtonText","secondaryButtonStroke","grid","background","alternativeBackground","text","alternativeText","disabledBackground","positive","negative","className","applyTheme","prototype","debug","getFor","purpose","setFor","registeredClasses"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/utils/InterfaceColorSet.js"],"sourcesContent":["/**\r\n * This module contains a version of ColorSet that can (and should) be used for\r\n * coloring UI elements.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObject } from \"../Base\";\r\nimport { registry } from \"../Registry\";\r\nimport { color } from \"./Color\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * This module contains a version of ColorSet that can (and should) be used for\r\n * coloring UI elements.\r\n *\r\n * The main difference from the basic [[ColorSet]] is that instead of sequenced\r\n * colors, it uses a concept of named colors.\r\n *\r\n * This way, every element in the UI can extract an exact color theme author\r\n * meant for the specific purpose, like strokes, backgrounds, etc.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/colors/} for color-related info\r\n */\r\nvar InterfaceColorSet = /** @class */ (function (_super) {\r\n    __extends(InterfaceColorSet, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function InterfaceColorSet() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Maps the list of purposes (like \"stroke\") to an index of color of the\r\n         * color set.\r\n         */\r\n        _this._purposes = {\r\n            stroke: color(\"#e5e5e5\"),\r\n            fill: color(\"#f3f3f3\"),\r\n            primaryButton: color(\"#6794dc\"),\r\n            primaryButtonHover: color(\"#6771dc\"),\r\n            primaryButtonDown: color(\"#68dc75\"),\r\n            primaryButtonActive: color(\"#68dc75\"),\r\n            primaryButtonText: color(\"#FFFFFF\"),\r\n            primaryButtonStroke: color(\"#FFFFFF\"),\r\n            secondaryButton: color(\"#d9d9d9\"),\r\n            secondaryButtonHover: color(\"#d9d9d9\").brighten(-0.25),\r\n            secondaryButtonDown: color(\"#d9d9d9\").brighten(-0.35),\r\n            secondaryButtonActive: color(\"#d9d9d9\").brighten(0.35),\r\n            secondaryButtonText: color(\"#000000\"),\r\n            secondaryButtonStroke: color(\"#FFFFFF\"),\r\n            grid: color(\"#000000\"),\r\n            background: color(\"#ffffff\"),\r\n            alternativeBackground: color(\"#000000\"),\r\n            text: color(\"#000000\"),\r\n            alternativeText: color(\"#FFFFFF\"),\r\n            disabledBackground: color(\"#999999\"),\r\n            positive: color(\"#67dc75\"),\r\n            negative: color(\"#dc6788\")\r\n        };\r\n        _this.className = \"InterfaceColorSet\";\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    InterfaceColorSet.prototype.debug = function () { };\r\n    /**\r\n     * Returns a color to be used for the specific purpose.\r\n     *\r\n     * ```TypeScript\r\n     * let uicolors = new am4core.InterfaceColorSet();\r\n     * console.log(uicolors.getFor(\"stroke\"));\r\n     * ```\r\n     * ```JavaScript\r\n     * var uicolors = new am4core.InterfaceColorSet();\r\n     * console.log(uicolors.getFor(\"stroke\"));\r\n     * ```\r\n     *\r\n     * @param purpose  Color use purpuse\r\n     * @return Color\r\n     */\r\n    InterfaceColorSet.prototype.getFor = function (purpose) {\r\n        return this._purposes[purpose];\r\n    };\r\n    /**\r\n     * Sets color to be used for the specific purpose.\r\n     *\r\n     * @param purpose  Color use purpose\r\n     * @param color    Color\r\n     */\r\n    InterfaceColorSet.prototype.setFor = function (purpose, color) {\r\n        this._purposes[purpose] = color;\r\n    };\r\n    return InterfaceColorSet;\r\n}(BaseObject));\r\nexport { InterfaceColorSet };\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"InterfaceColorSet\"] = InterfaceColorSet;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}