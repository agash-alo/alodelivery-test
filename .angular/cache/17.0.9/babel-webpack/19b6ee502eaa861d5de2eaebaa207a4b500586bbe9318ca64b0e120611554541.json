{"ast":null,"code":"import { __extends, __generator } from \"tslib\";\nimport { Disposer, MultiDisposer } from \"./Disposer\";\nimport { EventDispatcher } from \"./EventDispatcher\";\nimport * as $array from \"./Array\";\nimport * as $iter from \"./Iterator\";\n/**\r\n * @todo Description\r\n */\nvar IndexedIterable = /** @class */function () {\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param array  List items\r\n   * @param start  Start index\r\n   * @param end    End index\r\n   */\n  function IndexedIterable(array, start, end) {\n    this._array = array;\n    this._start = start;\n    this._end = end;\n  }\n  /**\r\n   * Returns a list item iterator.\r\n   *\r\n   * @return Iterator\r\n   */\n  IndexedIterable.prototype.iterator = function () {\n    var _this = this;\n    return function (push) {\n      if (_this._start !== _this._end) {\n        if (_this._start < _this._end) {\n          for (var i = _this._start; i < _this._end; ++i) {\n            if (!push(_this._array[i])) {\n              break;\n            }\n          }\n        } else {\n          for (var i = _this._start - 1; i >= _this._end; --i) {\n            if (!push(_this._array[i])) {\n              break;\n            }\n          }\n        }\n      }\n    };\n  };\n  /**\r\n   * Returns an interable list sorted backwards than current list.\r\n   *\r\n   * @return List\r\n   */\n  IndexedIterable.prototype.backwards = function () {\n    return new IndexedIterable(this._array, this._end, this._start);\n  };\n  /**\r\n   * Returns a new list consisting only of specific range of items between\r\n   * `start` and `end` indexes.\r\n   *\r\n   * @param start  Start index\r\n   * @param end    End index\r\n   * @return List\r\n   */\n  IndexedIterable.prototype.range = function (start, end) {\n    if (start <= end) {\n      if (this._start === this._end) {\n        return this;\n      } else if (this._start < this._end) {\n        var diff = end - start;\n        start = Math.max(this._start + start, this._start);\n        end = Math.min(start + diff, this._end);\n        return new IndexedIterable(this._array, start, end);\n      } else {\n        var diff = end - start;\n        start = Math.max(this._start - start, this._end);\n        end = Math.max(start - diff, this._end);\n        return new IndexedIterable(this._array, start, end);\n      }\n    } else {\n      throw new Error(\"Start index must be lower than end index\");\n    }\n  };\n  return IndexedIterable;\n}();\nexport { IndexedIterable };\n/**\r\n * ListGrouper organizes [[List]] items into groups.\r\n *\r\n * @ignore Exclude from docs\r\n */\nvar ListGrouper = /** @class */function (_super) {\n  __extends(ListGrouper, _super);\n  /**\r\n   * Constructor.\r\n   */\n  function ListGrouper(list, getKey, sort) {\n    var _this = _super.call(this, [list.events.on(\"inserted\", function (x) {\n      var value = x.newValue;\n      var key = _this._getKey(value);\n      var index = 0;\n      $iter.eachContinue(list.iterator(), function (x) {\n        if (x === value) {\n          return false;\n        } else if (_this._getKey(x) === key) {\n          ++index;\n        }\n        return true;\n      });\n      _this._insert(value, key, index);\n    }, undefined, false), list.events.on(\"removed\", function (x) {\n      _this._remove(x.oldValue);\n    }, undefined, false)]) || this;\n    /**\r\n     * Grouping keys.\r\n     */\n    _this._keys = [];\n    /**\r\n     * List item groups.\r\n     */\n    _this._groups = {};\n    _this._getKey = getKey;\n    _this._sort = sort;\n    $iter.each(list.iterator(), function (x) {\n      _this._insert(x, getKey(x));\n    });\n    return _this;\n  }\n  /**\r\n   * Inserts an item (`x`) to a specific group (`key`) and specific `index`.\r\n   *\r\n   * @param x      Item\r\n   * @param key    Group name\r\n   * @param index  Index\r\n   */\n  ListGrouper.prototype._insert = function (x, key, index) {\n    if (this._groups[key] == null) {\n      this._groups[key] = [];\n      // TODO code duplication with SortedList\n      var _a = $array.getSortedIndex(this._keys, this._sort, key),\n        found = _a.found,\n        index_1 = _a.index;\n      if (found) {\n        throw new Error(\"Key already exists: \" + key);\n      } else {\n        $array.insertIndex(this._keys, index_1, key);\n      }\n    }\n    if (index == null) {\n      this._groups[key].push(x);\n    } else {\n      $array.insertIndex(this._groups[key], index, x);\n    }\n  };\n  /**\r\n   * Removes an item from the list.\r\n   *\r\n   * @param x Item to remove\r\n   */\n  ListGrouper.prototype._remove = function (x) {\n    var key = this._getKey(x);\n    var values = this._groups[key];\n    if (values != null) {\n      $array.remove(values, x);\n      if (values.length === 0) {\n        delete this._groups[key];\n        var _a = $array.getSortedIndex(this._keys, this._sort, key),\n          found = _a.found,\n          index = _a.index;\n        if (found) {\n          $array.removeIndex(this._keys, index);\n        } else {\n          throw new Error(\"Key doesn't exist: \" + key);\n        }\n      }\n    }\n  };\n  /**\r\n   * Returns an iterator for the list.\r\n   *\r\n   * The iterator will iterate through all items in all groups.\r\n   *\r\n   * @return Iterator\r\n   */\n  ListGrouper.prototype.iterator = function () {\n    var _this = this;\n    return $iter.flatten($iter.map($iter.fromArray(this._keys), function (key) {\n      return $iter.fromArray(_this._groups[key]);\n    }));\n  };\n  return ListGrouper;\n}(MultiDisposer);\nexport { ListGrouper };\n/**\r\n * A disposable list, which when disposed itself will call `dispose()` method\r\n * on all its items.\r\n */\nvar ListDisposer = /** @class */function (_super) {\n  __extends(ListDisposer, _super);\n  function ListDisposer(list, disposeOnRemove) {\n    if (disposeOnRemove === void 0) {\n      disposeOnRemove = true;\n    }\n    var _this = this;\n    if (disposeOnRemove) {\n      var disposer_1 = list.events.on(\"removed\", function (x) {\n        x.oldValue.dispose();\n      }, undefined, false);\n      _this = _super.call(this, function () {\n        disposer_1.dispose();\n        // TODO clear the list ?\n        $iter.each(list.iterator(), function (x) {\n          x.dispose();\n        });\n      }) || this;\n    } else {\n      _this = _super.call(this, function () {\n        // TODO clear the list ?\n        $iter.each(list.iterator(), function (x) {\n          x.dispose();\n        });\n      }) || this;\n    }\n    return _this;\n  }\n  return ListDisposer;\n}(Disposer);\nexport { ListDisposer };\n/**\r\n * Checks if specific index fits into length.\r\n *\r\n * @param index  Index\r\n * @param len    Length\r\n */\nfunction checkBounds(index, len) {\n  if (!(index >= 0 && index < len)) {\n    throw new Error(\"Index out of bounds: \" + index);\n  }\n}\n/**\r\n * A List class is used to hold a number of indexed items of the same type.\r\n */\nvar List = /** @class */function () {\n  /**\r\n   * Constructor\r\n   *\r\n   * @param initial  Inital list of values to add to list\r\n   */\n  function List(initial) {\n    if (initial === void 0) {\n      initial = [];\n    }\n    /**\r\n     * Event dispatcher.\r\n     */\n    this.events = new EventDispatcher();\n    this._values = initial;\n  }\n  Object.defineProperty(List.prototype, \"values\", {\n    /**\r\n     * An array of values in the list.\r\n     *\r\n     * Do not use this property to add values. Rather use dedicated methods, like\r\n     * `push()`, `removeIndex()`, etc.\r\n     *\r\n     * @readonly\r\n     * @return List values\r\n     */\n    get: function () {\n      return this._values;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Checks if list contains specific item reference.\r\n   *\r\n   * @param item  Item to search for\r\n   * @return `true` if found, `false` if not found\r\n   */\n  List.prototype.contains = function (value) {\n    return this._values.indexOf(value) !== -1;\n  };\n  /**\r\n   * Removes specific item from the list.\r\n   *\r\n   * @param item An item to remove\r\n   */\n  List.prototype.removeValue = function (value) {\n    var i = 0;\n    var length = this._values.length;\n    while (i < length) {\n      // TODO handle NaN\n      if (this._values[i] === value) {\n        this.removeIndex(i);\n        --length;\n      } else {\n        ++i;\n      }\n    }\n  };\n  /**\r\n   * Searches the list for specific item and returns its index.\r\n   *\r\n   * @param item  An item to search for\r\n   * @return Index or -1 if not found\r\n   */\n  List.prototype.indexOf = function (value) {\n    return $array.indexOf(this._values, value);\n  };\n  Object.defineProperty(List.prototype, \"length\", {\n    /**\r\n     * Number of items in list.\r\n     *\r\n     * @readonly\r\n     * @return Number of items\r\n     */\n    get: function () {\n      return this._values.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Checks if there's a value at specific index.\r\n   *\r\n   * @param index  Index\r\n   * @return Value exists?\r\n   */\n  List.prototype.hasIndex = function (index) {\n    return index >= 0 && index < this._values.length;\n  };\n  /**\r\n   * Returns an item at specified index.\r\n   *\r\n   * @param index  Index\r\n   * @return List item\r\n   */\n  List.prototype.getIndex = function (index) {\n    return this._values[index];\n  };\n  /**\r\n   * Sets value at specific index.\r\n   *\r\n   * If there's already a value at the index, it is overwritten.\r\n   *\r\n   * @param index  Index\r\n   * @param value  New value\r\n   * @return New value\r\n   */\n  List.prototype.setIndex = function (index, value) {\n    checkBounds(index, this._values.length);\n    var oldValue = this._values[index];\n    // Do nothing if the old value and the new value are the same\n    if (oldValue !== value) {\n      this._values[index] = value;\n      if (this.events.isEnabled(\"setIndex\")) {\n        this.events.dispatchImmediately(\"setIndex\", {\n          type: \"setIndex\",\n          target: this,\n          index: index,\n          oldValue: oldValue,\n          newValue: value\n        });\n      }\n      if (this.events.isEnabled(\"removed\")) {\n        this.events.dispatchImmediately(\"removed\", {\n          type: \"removed\",\n          target: this,\n          oldValue: oldValue\n        });\n      }\n      if (this.events.isEnabled(\"inserted\")) {\n        this.events.dispatchImmediately(\"inserted\", {\n          type: \"inserted\",\n          target: this,\n          newValue: value\n        });\n      }\n    }\n    return oldValue;\n  };\n  /**\r\n   * Adds an item to the list at a specific index, which pushes all the other\r\n   * items further down the list.\r\n   *\r\n   * @param index Index\r\n   * @param item  An item to add\r\n   */\n  List.prototype.insertIndex = function (index, value) {\n    checkBounds(index, this._values.length + 1);\n    $array.insertIndex(this._values, index, value);\n    if (this.events.isEnabled(\"insertIndex\")) {\n      this.events.dispatchImmediately(\"insertIndex\", {\n        type: \"insertIndex\",\n        target: this,\n        index: index,\n        newValue: value\n      });\n    }\n    if (this.events.isEnabled(\"inserted\")) {\n      this.events.dispatchImmediately(\"inserted\", {\n        type: \"inserted\",\n        target: this,\n        newValue: value\n      });\n    }\n  };\n  /**\r\n   * [_sortQuicksort description]\r\n   *\r\n   * @todo Description\r\n   * @param low    [description]\r\n   * @param high   [description]\r\n   * @param order  [description]\r\n   */\n  List.prototype._sortQuicksort = function (low, high, order) {\n    if (low < high) {\n      var p = this._sortPartition(low, high, order);\n      this._sortQuicksort(low, p, order);\n      this._sortQuicksort(p + 1, high, order);\n    }\n  };\n  /**\r\n   * [_sortPartition description]\r\n   *\r\n   * @todo Description\r\n   * @param low    [description]\r\n   * @param high   [description]\r\n   * @param order  [description]\r\n   * @return [description]\r\n   */\n  List.prototype._sortPartition = function (low, high, order) {\n    var values = this._values;\n    var pivot = values[low];\n    var i = low - 1;\n    var j = high + 1;\n    for (;;) {\n      do {\n        ++i;\n      } while (order(values[i], pivot) < 0);\n      do {\n        --j;\n      } while (order(values[j], pivot) > 0);\n      if (i >= j) {\n        return j;\n      } else {\n        this.swap(i, j);\n      }\n    }\n  };\n  /**\r\n   * Reorders list items according to specific ordering function.\r\n   *\r\n   * @param order  Ordering function\r\n   */\n  List.prototype.sort = function (order) {\n    // https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme\n    // @todo faster implementation of this\n    // @todo test this\n    this._sortQuicksort(0, this._values.length - 1, order);\n  };\n  /**\r\n   * Swaps indexes of two items in the list.\r\n   *\r\n   * @param a  Item 1\r\n   * @param b  Item 2\r\n   */\n  List.prototype.swap = function (a, b) {\n    var len = this._values.length;\n    checkBounds(a, len);\n    checkBounds(b, len);\n    if (a !== b) {\n      var value_a = this._values[a];\n      var value_b = this._values[b];\n      this._values[a] = value_b;\n      if (this.events.isEnabled(\"setIndex\")) {\n        this.events.dispatchImmediately(\"setIndex\", {\n          type: \"setIndex\",\n          target: this,\n          index: a,\n          oldValue: value_a,\n          newValue: value_b\n        });\n      }\n      this._values[b] = value_a;\n      if (this.events.isEnabled(\"setIndex\")) {\n        this.events.dispatchImmediately(\"setIndex\", {\n          type: \"setIndex\",\n          target: this,\n          index: b,\n          oldValue: value_b,\n          newValue: value_a\n        });\n      }\n    }\n  };\n  /**\r\n   * Removes a value at specific index.\r\n   *\r\n   * @param index  Index of value to remove\r\n   * @return Removed value\r\n   */\n  List.prototype.removeIndex = function (index) {\n    checkBounds(index, this._values.length);\n    var oldValue = this._values[index];\n    $array.removeIndex(this._values, index);\n    if (this.events.isEnabled(\"removeIndex\")) {\n      this.events.dispatchImmediately(\"removeIndex\", {\n        type: \"removeIndex\",\n        target: this,\n        index: index,\n        oldValue: oldValue\n      });\n    }\n    if (this.events.isEnabled(\"removed\")) {\n      this.events.dispatchImmediately(\"removed\", {\n        type: \"removed\",\n        target: this,\n        oldValue: oldValue\n      });\n    }\n    return oldValue;\n  };\n  /**\r\n   * Moves an item to a specific index within the list.\r\n   *\r\n   * If the index is not specified it will move the item to the end of the\r\n   * list.\r\n   *\r\n   * @param value  Item to move\r\n   * @param index  Index to place item at\r\n   */\n  List.prototype.moveValue = function (value, toIndex) {\n    // TODO don't do anything if the desired index is the same as the current index\n    var index = this.indexOf(value);\n    // TODO remove all old values rather than only the first ?\n    if (index !== -1) {\n      var oldValue = this._values[index];\n      $array.removeIndex(this._values, index);\n      if (this.events.isEnabled(\"removeIndex\")) {\n        this.events.dispatchImmediately(\"removeIndex\", {\n          type: \"removeIndex\",\n          target: this,\n          index: index,\n          oldValue: oldValue\n        });\n      }\n    }\n    if (toIndex == null) {\n      toIndex = this._values.length;\n      this._values.push(value);\n    } else {\n      $array.insertIndex(this._values, toIndex, value);\n    }\n    if (this.events.isEnabled(\"insertIndex\")) {\n      this.events.dispatchImmediately(\"insertIndex\", {\n        type: \"insertIndex\",\n        target: this,\n        index: toIndex,\n        newValue: value\n      });\n    }\n    if (index === -1) {\n      if (this.events.isEnabled(\"inserted\")) {\n        this.events.dispatchImmediately(\"inserted\", {\n          type: \"inserted\",\n          target: this,\n          newValue: value\n        });\n      }\n    }\n  };\n  /**\r\n   * Adds an item to the end of the list.\r\n   *\r\n   * @param item  An item to add\r\n   */\n  List.prototype.push = function (value) {\n    var index = this._values.push(value) - 1;\n    if (this.events.isEnabled(\"insertIndex\")) {\n      this.events.dispatchImmediately(\"insertIndex\", {\n        type: \"insertIndex\",\n        target: this,\n        index: index,\n        newValue: value\n      });\n    }\n    if (this.events.isEnabled(\"inserted\")) {\n      this.events.dispatchImmediately(\"inserted\", {\n        type: \"inserted\",\n        target: this,\n        newValue: value\n      });\n    }\n    return value;\n  };\n  /**\r\n   * Adds an item as a first item in the list.\r\n   *\r\n   * @param item  An item to add\r\n   */\n  List.prototype.unshift = function (value) {\n    this.insertIndex(0, value);\n  };\n  /**\r\n   * Adds multiple items to the list.\r\n   *\r\n   * @param items  An Array of items to add\r\n   */\n  List.prototype.pushAll = function (values) {\n    var _this = this;\n    $array.each(values, function (value) {\n      _this.push(value);\n    });\n  };\n  /**\r\n   * Copies and adds items from abother list.\r\n   *\r\n   * @param source  A list top copy items from\r\n   */\n  List.prototype.copyFrom = function (source) {\n    this.pushAll(source._values);\n  };\n  /**\r\n   * Returns the last item from the list, and removes it.\r\n   *\r\n   * @return Item\r\n   */\n  List.prototype.pop = function () {\n    var index = this._values.length - 1;\n    return index < 0 ? undefined : this.removeIndex(this._values.length - 1);\n  };\n  /**\r\n   * Returns the first item from the list, and removes it.\r\n   *\r\n   * @return Item\r\n   */\n  List.prototype.shift = function () {\n    return this._values.length ? this.removeIndex(0) : undefined;\n  };\n  /**\r\n   * Sets multiple items to the list.\r\n   *\r\n   * All current items are removed.\r\n   *\r\n   * @param newArray  New items\r\n   */\n  List.prototype.setAll = function (newArray) {\n    var _this = this;\n    // @tod if a value exists in both the new and old arrays, don't send remove/insert events\n    var oldArray = $array.copy(this._values);\n    this._values.length = 0;\n    $array.each(newArray, function (value) {\n      _this._values.push(value);\n    });\n    if (this.events.isEnabled(\"setAll\")) {\n      this.events.dispatchImmediately(\"setAll\", {\n        type: \"setAll\",\n        target: this,\n        oldArray: oldArray,\n        newArray: this._values // TODO make a copy ?\n      });\n    }\n\n    if (this.events.isEnabled(\"removed\")) {\n      $array.each(oldArray, function (x) {\n        _this.events.dispatchImmediately(\"removed\", {\n          type: \"removed\",\n          target: _this,\n          oldValue: x\n        });\n      });\n    }\n    if (this.events.isEnabled(\"inserted\")) {\n      $array.each(this._values, function (x) {\n        _this.events.dispatchImmediately(\"inserted\", {\n          type: \"inserted\",\n          target: _this,\n          newValue: x\n        });\n      });\n    }\n  };\n  /**\r\n   * Removes all items from the list.\r\n   */\n  List.prototype.clear = function () {\n    this.setAll([]);\n  };\n  /**\r\n   * Returns a list iterator.\r\n   *\r\n   * @return Iterator\r\n   */\n  List.prototype.iterator = function () {\n    return $iter.fromArray(this._values);\n  };\n  /**\r\n   * Returns an ES6 iterator for the list.\r\n   */\n  List.prototype[Symbol.iterator] = function () {\n    var length, i;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          length = this._values.length;\n          i = 0;\n          _a.label = 1;\n        case 1:\n          if (!(i < length)) return [3 /*break*/, 4];\n          return [4 /*yield*/, this._values[i]];\n        case 2:\n          _a.sent();\n          _a.label = 3;\n        case 3:\n          ++i;\n          return [3 /*break*/, 1];\n        case 4:\n          return [2 /*return*/];\n      }\n    });\n  };\n  /**\r\n   * Calls `f` for each element in the list.\r\n   *\r\n   * `f` should have at least one parameter defined which will get a current\r\n   * item, with optional second argument - index.\r\n   */\n  List.prototype.each = function (f) {\n    $array.each(this._values, f);\n  };\n  /**\r\n   * Returns a specific range of list items, which can be iterated.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Code duplication with IndexedIterable\r\n   * @param start  Start index\r\n   * @param end    End index\r\n   * @return Range\r\n   */\n  List.prototype.range = function (start, end) {\n    if (start <= end) {\n      var diff = end - start;\n      start = Math.max(start, 0);\n      end = Math.min(start + diff, this._values.length);\n      return new IndexedIterable(this._values, start, end);\n    } else {\n      throw new Error(\"Start index must be lower than end index\");\n    }\n  };\n  /**\r\n   * Returns an iterator that has list items sorted backwards.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return List\r\n   */\n  List.prototype.backwards = function () {\n    return new IndexedIterable(this._values, this._values.length, 0);\n  };\n  return List;\n}();\nexport { List };\n/**\r\n * A version of a [[List]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\nvar ListTemplate = /** @class */function (_super) {\n  __extends(ListTemplate, _super);\n  /**\r\n   * Constructor\r\n   *\r\n   * @param t Template object\r\n   */\n  function ListTemplate(t) {\n    var _this = _super.call(this) || this;\n    _this.template = t;\n    return _this;\n  }\n  Object.defineProperty(ListTemplate.prototype, \"template\", {\n    /**\r\n     * @return Template object\r\n     */\n    get: function () {\n      return this._template;\n    },\n    /**\r\n     * A \"template\" object to copy all properties from when creating new list\r\n     * items.\r\n     *\r\n     * @param v  Template object\r\n     */\n    set: function (v) {\n      v.isTemplate = true;\n      this._template = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all elements from other list.\r\n   *\r\n   * @param source  Source list\r\n   */\n  ListTemplate.prototype.copyFrom = function (source) {\n    var _this = this;\n    $iter.each(source.iterator(), function (value) {\n      _this.push(value.clone());\n    });\n  };\n  ListTemplate.prototype.create = function (make) {\n    var clone = make != null ? new make() : this.template.clone();\n    this.push(clone);\n    return clone;\n  };\n  /**\r\n   * Creates an exact clone of the list, including its items and template.\r\n   *\r\n   * @return New list\r\n   */\n  ListTemplate.prototype.clone = function () {\n    var out = new ListTemplate(this.template);\n    var values = this.values;\n    var length = values.length;\n    for (var i = 0; i < length; ++i) {\n      out.push(values[i].clone());\n    }\n    return out;\n  };\n  return ListTemplate;\n}(List);\nexport { ListTemplate };","map":{"version":3,"names":["__extends","__generator","Disposer","MultiDisposer","EventDispatcher","$array","$iter","IndexedIterable","array","start","end","_array","_start","_end","prototype","iterator","_this","push","i","backwards","range","diff","Math","max","min","Error","ListGrouper","_super","list","getKey","sort","call","events","on","x","value","newValue","key","_getKey","index","eachContinue","_insert","undefined","_remove","oldValue","_keys","_groups","_sort","each","_a","getSortedIndex","found","index_1","insertIndex","values","remove","length","removeIndex","flatten","map","fromArray","ListDisposer","disposeOnRemove","disposer_1","dispose","checkBounds","len","List","initial","_values","Object","defineProperty","get","enumerable","configurable","contains","indexOf","removeValue","hasIndex","getIndex","setIndex","isEnabled","dispatchImmediately","type","target","_sortQuicksort","low","high","order","p","_sortPartition","pivot","j","swap","a","b","value_a","value_b","moveValue","toIndex","unshift","pushAll","copyFrom","source","pop","shift","setAll","newArray","oldArray","copy","clear","Symbol","label","sent","f","ListTemplate","t","template","_template","set","v","isTemplate","clone","create","make","out"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/utils/List.js"],"sourcesContent":["import { __extends, __generator } from \"tslib\";\r\nimport { Disposer, MultiDisposer } from \"./Disposer\";\r\nimport { EventDispatcher } from \"./EventDispatcher\";\r\nimport * as $array from \"./Array\";\r\nimport * as $iter from \"./Iterator\";\r\n/**\r\n * @todo Description\r\n */\r\nvar IndexedIterable = /** @class */ (function () {\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param array  List items\r\n     * @param start  Start index\r\n     * @param end    End index\r\n     */\r\n    function IndexedIterable(array, start, end) {\r\n        this._array = array;\r\n        this._start = start;\r\n        this._end = end;\r\n    }\r\n    /**\r\n     * Returns a list item iterator.\r\n     *\r\n     * @return Iterator\r\n     */\r\n    IndexedIterable.prototype.iterator = function () {\r\n        var _this = this;\r\n        return function (push) {\r\n            if (_this._start !== _this._end) {\r\n                if (_this._start < _this._end) {\r\n                    for (var i = _this._start; i < _this._end; ++i) {\r\n                        if (!push(_this._array[i])) {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    for (var i = _this._start - 1; i >= _this._end; --i) {\r\n                        if (!push(_this._array[i])) {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    };\r\n    /**\r\n     * Returns an interable list sorted backwards than current list.\r\n     *\r\n     * @return List\r\n     */\r\n    IndexedIterable.prototype.backwards = function () {\r\n        return new IndexedIterable(this._array, this._end, this._start);\r\n    };\r\n    /**\r\n     * Returns a new list consisting only of specific range of items between\r\n     * `start` and `end` indexes.\r\n     *\r\n     * @param start  Start index\r\n     * @param end    End index\r\n     * @return List\r\n     */\r\n    IndexedIterable.prototype.range = function (start, end) {\r\n        if (start <= end) {\r\n            if (this._start === this._end) {\r\n                return this;\r\n            }\r\n            else if (this._start < this._end) {\r\n                var diff = end - start;\r\n                start = Math.max(this._start + start, this._start);\r\n                end = Math.min(start + diff, this._end);\r\n                return new IndexedIterable(this._array, start, end);\r\n            }\r\n            else {\r\n                var diff = end - start;\r\n                start = Math.max(this._start - start, this._end);\r\n                end = Math.max(start - diff, this._end);\r\n                return new IndexedIterable(this._array, start, end);\r\n            }\r\n        }\r\n        else {\r\n            throw new Error(\"Start index must be lower than end index\");\r\n        }\r\n    };\r\n    return IndexedIterable;\r\n}());\r\nexport { IndexedIterable };\r\n/**\r\n * ListGrouper organizes [[List]] items into groups.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nvar ListGrouper = /** @class */ (function (_super) {\r\n    __extends(ListGrouper, _super);\r\n    /**\r\n     * Constructor.\r\n     */\r\n    function ListGrouper(list, getKey, sort) {\r\n        var _this = _super.call(this, [\r\n            list.events.on(\"inserted\", function (x) {\r\n                var value = x.newValue;\r\n                var key = _this._getKey(value);\r\n                var index = 0;\r\n                $iter.eachContinue(list.iterator(), function (x) {\r\n                    if (x === value) {\r\n                        return false;\r\n                    }\r\n                    else if (_this._getKey(x) === key) {\r\n                        ++index;\r\n                    }\r\n                    return true;\r\n                });\r\n                _this._insert(value, key, index);\r\n            }, undefined, false),\r\n            list.events.on(\"removed\", function (x) {\r\n                _this._remove(x.oldValue);\r\n            }, undefined, false)\r\n        ]) || this;\r\n        /**\r\n         * Grouping keys.\r\n         */\r\n        _this._keys = [];\r\n        /**\r\n         * List item groups.\r\n         */\r\n        _this._groups = {};\r\n        _this._getKey = getKey;\r\n        _this._sort = sort;\r\n        $iter.each(list.iterator(), function (x) {\r\n            _this._insert(x, getKey(x));\r\n        });\r\n        return _this;\r\n    }\r\n    /**\r\n     * Inserts an item (`x`) to a specific group (`key`) and specific `index`.\r\n     *\r\n     * @param x      Item\r\n     * @param key    Group name\r\n     * @param index  Index\r\n     */\r\n    ListGrouper.prototype._insert = function (x, key, index) {\r\n        if (this._groups[key] == null) {\r\n            this._groups[key] = [];\r\n            // TODO code duplication with SortedList\r\n            var _a = $array.getSortedIndex(this._keys, this._sort, key), found = _a.found, index_1 = _a.index;\r\n            if (found) {\r\n                throw new Error(\"Key already exists: \" + key);\r\n            }\r\n            else {\r\n                $array.insertIndex(this._keys, index_1, key);\r\n            }\r\n        }\r\n        if (index == null) {\r\n            this._groups[key].push(x);\r\n        }\r\n        else {\r\n            $array.insertIndex(this._groups[key], index, x);\r\n        }\r\n    };\r\n    /**\r\n     * Removes an item from the list.\r\n     *\r\n     * @param x Item to remove\r\n     */\r\n    ListGrouper.prototype._remove = function (x) {\r\n        var key = this._getKey(x);\r\n        var values = this._groups[key];\r\n        if (values != null) {\r\n            $array.remove(values, x);\r\n            if (values.length === 0) {\r\n                delete this._groups[key];\r\n                var _a = $array.getSortedIndex(this._keys, this._sort, key), found = _a.found, index = _a.index;\r\n                if (found) {\r\n                    $array.removeIndex(this._keys, index);\r\n                }\r\n                else {\r\n                    throw new Error(\"Key doesn't exist: \" + key);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns an iterator for the list.\r\n     *\r\n     * The iterator will iterate through all items in all groups.\r\n     *\r\n     * @return Iterator\r\n     */\r\n    ListGrouper.prototype.iterator = function () {\r\n        var _this = this;\r\n        return $iter.flatten($iter.map($iter.fromArray(this._keys), function (key) {\r\n            return $iter.fromArray(_this._groups[key]);\r\n        }));\r\n    };\r\n    return ListGrouper;\r\n}(MultiDisposer));\r\nexport { ListGrouper };\r\n/**\r\n * A disposable list, which when disposed itself will call `dispose()` method\r\n * on all its items.\r\n */\r\nvar ListDisposer = /** @class */ (function (_super) {\r\n    __extends(ListDisposer, _super);\r\n    function ListDisposer(list, disposeOnRemove) {\r\n        if (disposeOnRemove === void 0) { disposeOnRemove = true; }\r\n        var _this = this;\r\n        if (disposeOnRemove) {\r\n            var disposer_1 = list.events.on(\"removed\", function (x) {\r\n                x.oldValue.dispose();\r\n            }, undefined, false);\r\n            _this = _super.call(this, function () {\r\n                disposer_1.dispose();\r\n                // TODO clear the list ?\r\n                $iter.each(list.iterator(), function (x) {\r\n                    x.dispose();\r\n                });\r\n            }) || this;\r\n        }\r\n        else {\r\n            _this = _super.call(this, function () {\r\n                // TODO clear the list ?\r\n                $iter.each(list.iterator(), function (x) {\r\n                    x.dispose();\r\n                });\r\n            }) || this;\r\n        }\r\n        return _this;\r\n    }\r\n    return ListDisposer;\r\n}(Disposer));\r\nexport { ListDisposer };\r\n/**\r\n * Checks if specific index fits into length.\r\n *\r\n * @param index  Index\r\n * @param len    Length\r\n */\r\nfunction checkBounds(index, len) {\r\n    if (!(index >= 0 && index < len)) {\r\n        throw new Error(\"Index out of bounds: \" + index);\r\n    }\r\n}\r\n/**\r\n * A List class is used to hold a number of indexed items of the same type.\r\n */\r\nvar List = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param initial  Inital list of values to add to list\r\n     */\r\n    function List(initial) {\r\n        if (initial === void 0) { initial = []; }\r\n        /**\r\n         * Event dispatcher.\r\n         */\r\n        this.events = new EventDispatcher();\r\n        this._values = initial;\r\n    }\r\n    Object.defineProperty(List.prototype, \"values\", {\r\n        /**\r\n         * An array of values in the list.\r\n         *\r\n         * Do not use this property to add values. Rather use dedicated methods, like\r\n         * `push()`, `removeIndex()`, etc.\r\n         *\r\n         * @readonly\r\n         * @return List values\r\n         */\r\n        get: function () {\r\n            return this._values;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Checks if list contains specific item reference.\r\n     *\r\n     * @param item  Item to search for\r\n     * @return `true` if found, `false` if not found\r\n     */\r\n    List.prototype.contains = function (value) {\r\n        return this._values.indexOf(value) !== -1;\r\n    };\r\n    /**\r\n     * Removes specific item from the list.\r\n     *\r\n     * @param item An item to remove\r\n     */\r\n    List.prototype.removeValue = function (value) {\r\n        var i = 0;\r\n        var length = this._values.length;\r\n        while (i < length) {\r\n            // TODO handle NaN\r\n            if (this._values[i] === value) {\r\n                this.removeIndex(i);\r\n                --length;\r\n            }\r\n            else {\r\n                ++i;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Searches the list for specific item and returns its index.\r\n     *\r\n     * @param item  An item to search for\r\n     * @return Index or -1 if not found\r\n     */\r\n    List.prototype.indexOf = function (value) {\r\n        return $array.indexOf(this._values, value);\r\n    };\r\n    Object.defineProperty(List.prototype, \"length\", {\r\n        /**\r\n         * Number of items in list.\r\n         *\r\n         * @readonly\r\n         * @return Number of items\r\n         */\r\n        get: function () {\r\n            return this._values.length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Checks if there's a value at specific index.\r\n     *\r\n     * @param index  Index\r\n     * @return Value exists?\r\n     */\r\n    List.prototype.hasIndex = function (index) {\r\n        return index >= 0 && index < this._values.length;\r\n    };\r\n    /**\r\n     * Returns an item at specified index.\r\n     *\r\n     * @param index  Index\r\n     * @return List item\r\n     */\r\n    List.prototype.getIndex = function (index) {\r\n        return this._values[index];\r\n    };\r\n    /**\r\n     * Sets value at specific index.\r\n     *\r\n     * If there's already a value at the index, it is overwritten.\r\n     *\r\n     * @param index  Index\r\n     * @param value  New value\r\n     * @return New value\r\n     */\r\n    List.prototype.setIndex = function (index, value) {\r\n        checkBounds(index, this._values.length);\r\n        var oldValue = this._values[index];\r\n        // Do nothing if the old value and the new value are the same\r\n        if (oldValue !== value) {\r\n            this._values[index] = value;\r\n            if (this.events.isEnabled(\"setIndex\")) {\r\n                this.events.dispatchImmediately(\"setIndex\", {\r\n                    type: \"setIndex\",\r\n                    target: this,\r\n                    index: index,\r\n                    oldValue: oldValue,\r\n                    newValue: value\r\n                });\r\n            }\r\n            if (this.events.isEnabled(\"removed\")) {\r\n                this.events.dispatchImmediately(\"removed\", {\r\n                    type: \"removed\",\r\n                    target: this,\r\n                    oldValue: oldValue\r\n                });\r\n            }\r\n            if (this.events.isEnabled(\"inserted\")) {\r\n                this.events.dispatchImmediately(\"inserted\", {\r\n                    type: \"inserted\",\r\n                    target: this,\r\n                    newValue: value\r\n                });\r\n            }\r\n        }\r\n        return oldValue;\r\n    };\r\n    /**\r\n     * Adds an item to the list at a specific index, which pushes all the other\r\n     * items further down the list.\r\n     *\r\n     * @param index Index\r\n     * @param item  An item to add\r\n     */\r\n    List.prototype.insertIndex = function (index, value) {\r\n        checkBounds(index, this._values.length + 1);\r\n        $array.insertIndex(this._values, index, value);\r\n        if (this.events.isEnabled(\"insertIndex\")) {\r\n            this.events.dispatchImmediately(\"insertIndex\", {\r\n                type: \"insertIndex\",\r\n                target: this,\r\n                index: index,\r\n                newValue: value\r\n            });\r\n        }\r\n        if (this.events.isEnabled(\"inserted\")) {\r\n            this.events.dispatchImmediately(\"inserted\", {\r\n                type: \"inserted\",\r\n                target: this,\r\n                newValue: value\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * [_sortQuicksort description]\r\n     *\r\n     * @todo Description\r\n     * @param low    [description]\r\n     * @param high   [description]\r\n     * @param order  [description]\r\n     */\r\n    List.prototype._sortQuicksort = function (low, high, order) {\r\n        if (low < high) {\r\n            var p = this._sortPartition(low, high, order);\r\n            this._sortQuicksort(low, p, order);\r\n            this._sortQuicksort(p + 1, high, order);\r\n        }\r\n    };\r\n    /**\r\n     * [_sortPartition description]\r\n     *\r\n     * @todo Description\r\n     * @param low    [description]\r\n     * @param high   [description]\r\n     * @param order  [description]\r\n     * @return [description]\r\n     */\r\n    List.prototype._sortPartition = function (low, high, order) {\r\n        var values = this._values;\r\n        var pivot = values[low];\r\n        var i = low - 1;\r\n        var j = high + 1;\r\n        for (;;) {\r\n            do {\r\n                ++i;\r\n            } while (order(values[i], pivot) < 0);\r\n            do {\r\n                --j;\r\n            } while (order(values[j], pivot) > 0);\r\n            if (i >= j) {\r\n                return j;\r\n            }\r\n            else {\r\n                this.swap(i, j);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Reorders list items according to specific ordering function.\r\n     *\r\n     * @param order  Ordering function\r\n     */\r\n    List.prototype.sort = function (order) {\r\n        // https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme\r\n        // @todo faster implementation of this\r\n        // @todo test this\r\n        this._sortQuicksort(0, this._values.length - 1, order);\r\n    };\r\n    /**\r\n     * Swaps indexes of two items in the list.\r\n     *\r\n     * @param a  Item 1\r\n     * @param b  Item 2\r\n     */\r\n    List.prototype.swap = function (a, b) {\r\n        var len = this._values.length;\r\n        checkBounds(a, len);\r\n        checkBounds(b, len);\r\n        if (a !== b) {\r\n            var value_a = this._values[a];\r\n            var value_b = this._values[b];\r\n            this._values[a] = value_b;\r\n            if (this.events.isEnabled(\"setIndex\")) {\r\n                this.events.dispatchImmediately(\"setIndex\", {\r\n                    type: \"setIndex\",\r\n                    target: this,\r\n                    index: a,\r\n                    oldValue: value_a,\r\n                    newValue: value_b\r\n                });\r\n            }\r\n            this._values[b] = value_a;\r\n            if (this.events.isEnabled(\"setIndex\")) {\r\n                this.events.dispatchImmediately(\"setIndex\", {\r\n                    type: \"setIndex\",\r\n                    target: this,\r\n                    index: b,\r\n                    oldValue: value_b,\r\n                    newValue: value_a\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Removes a value at specific index.\r\n     *\r\n     * @param index  Index of value to remove\r\n     * @return Removed value\r\n     */\r\n    List.prototype.removeIndex = function (index) {\r\n        checkBounds(index, this._values.length);\r\n        var oldValue = this._values[index];\r\n        $array.removeIndex(this._values, index);\r\n        if (this.events.isEnabled(\"removeIndex\")) {\r\n            this.events.dispatchImmediately(\"removeIndex\", {\r\n                type: \"removeIndex\",\r\n                target: this,\r\n                index: index,\r\n                oldValue: oldValue\r\n            });\r\n        }\r\n        if (this.events.isEnabled(\"removed\")) {\r\n            this.events.dispatchImmediately(\"removed\", {\r\n                type: \"removed\",\r\n                target: this,\r\n                oldValue: oldValue\r\n            });\r\n        }\r\n        return oldValue;\r\n    };\r\n    /**\r\n     * Moves an item to a specific index within the list.\r\n     *\r\n     * If the index is not specified it will move the item to the end of the\r\n     * list.\r\n     *\r\n     * @param value  Item to move\r\n     * @param index  Index to place item at\r\n     */\r\n    List.prototype.moveValue = function (value, toIndex) {\r\n        // TODO don't do anything if the desired index is the same as the current index\r\n        var index = this.indexOf(value);\r\n        // TODO remove all old values rather than only the first ?\r\n        if (index !== -1) {\r\n            var oldValue = this._values[index];\r\n            $array.removeIndex(this._values, index);\r\n            if (this.events.isEnabled(\"removeIndex\")) {\r\n                this.events.dispatchImmediately(\"removeIndex\", {\r\n                    type: \"removeIndex\",\r\n                    target: this,\r\n                    index: index,\r\n                    oldValue: oldValue\r\n                });\r\n            }\r\n        }\r\n        if (toIndex == null) {\r\n            toIndex = this._values.length;\r\n            this._values.push(value);\r\n        }\r\n        else {\r\n            $array.insertIndex(this._values, toIndex, value);\r\n        }\r\n        if (this.events.isEnabled(\"insertIndex\")) {\r\n            this.events.dispatchImmediately(\"insertIndex\", {\r\n                type: \"insertIndex\",\r\n                target: this,\r\n                index: toIndex,\r\n                newValue: value\r\n            });\r\n        }\r\n        if (index === -1) {\r\n            if (this.events.isEnabled(\"inserted\")) {\r\n                this.events.dispatchImmediately(\"inserted\", {\r\n                    type: \"inserted\",\r\n                    target: this,\r\n                    newValue: value\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Adds an item to the end of the list.\r\n     *\r\n     * @param item  An item to add\r\n     */\r\n    List.prototype.push = function (value) {\r\n        var index = this._values.push(value) - 1;\r\n        if (this.events.isEnabled(\"insertIndex\")) {\r\n            this.events.dispatchImmediately(\"insertIndex\", {\r\n                type: \"insertIndex\",\r\n                target: this,\r\n                index: index,\r\n                newValue: value\r\n            });\r\n        }\r\n        if (this.events.isEnabled(\"inserted\")) {\r\n            this.events.dispatchImmediately(\"inserted\", {\r\n                type: \"inserted\",\r\n                target: this,\r\n                newValue: value\r\n            });\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * Adds an item as a first item in the list.\r\n     *\r\n     * @param item  An item to add\r\n     */\r\n    List.prototype.unshift = function (value) {\r\n        this.insertIndex(0, value);\r\n    };\r\n    /**\r\n     * Adds multiple items to the list.\r\n     *\r\n     * @param items  An Array of items to add\r\n     */\r\n    List.prototype.pushAll = function (values) {\r\n        var _this = this;\r\n        $array.each(values, function (value) {\r\n            _this.push(value);\r\n        });\r\n    };\r\n    /**\r\n     * Copies and adds items from abother list.\r\n     *\r\n     * @param source  A list top copy items from\r\n     */\r\n    List.prototype.copyFrom = function (source) {\r\n        this.pushAll(source._values);\r\n    };\r\n    /**\r\n     * Returns the last item from the list, and removes it.\r\n     *\r\n     * @return Item\r\n     */\r\n    List.prototype.pop = function () {\r\n        var index = this._values.length - 1;\r\n        return index < 0 ? undefined : this.removeIndex(this._values.length - 1);\r\n    };\r\n    /**\r\n     * Returns the first item from the list, and removes it.\r\n     *\r\n     * @return Item\r\n     */\r\n    List.prototype.shift = function () {\r\n        return this._values.length ? this.removeIndex(0) : undefined;\r\n    };\r\n    /**\r\n     * Sets multiple items to the list.\r\n     *\r\n     * All current items are removed.\r\n     *\r\n     * @param newArray  New items\r\n     */\r\n    List.prototype.setAll = function (newArray) {\r\n        var _this = this;\r\n        // @tod if a value exists in both the new and old arrays, don't send remove/insert events\r\n        var oldArray = $array.copy(this._values);\r\n        this._values.length = 0;\r\n        $array.each(newArray, function (value) {\r\n            _this._values.push(value);\r\n        });\r\n        if (this.events.isEnabled(\"setAll\")) {\r\n            this.events.dispatchImmediately(\"setAll\", {\r\n                type: \"setAll\",\r\n                target: this,\r\n                oldArray: oldArray,\r\n                newArray: this._values // TODO make a copy ?\r\n            });\r\n        }\r\n        if (this.events.isEnabled(\"removed\")) {\r\n            $array.each(oldArray, function (x) {\r\n                _this.events.dispatchImmediately(\"removed\", {\r\n                    type: \"removed\",\r\n                    target: _this,\r\n                    oldValue: x\r\n                });\r\n            });\r\n        }\r\n        if (this.events.isEnabled(\"inserted\")) {\r\n            $array.each(this._values, function (x) {\r\n                _this.events.dispatchImmediately(\"inserted\", {\r\n                    type: \"inserted\",\r\n                    target: _this,\r\n                    newValue: x\r\n                });\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Removes all items from the list.\r\n     */\r\n    List.prototype.clear = function () {\r\n        this.setAll([]);\r\n    };\r\n    /**\r\n     * Returns a list iterator.\r\n     *\r\n     * @return Iterator\r\n     */\r\n    List.prototype.iterator = function () {\r\n        return $iter.fromArray(this._values);\r\n    };\r\n    /**\r\n     * Returns an ES6 iterator for the list.\r\n     */\r\n    List.prototype[Symbol.iterator] = function () {\r\n        var length, i;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    length = this._values.length;\r\n                    i = 0;\r\n                    _a.label = 1;\r\n                case 1:\r\n                    if (!(i < length)) return [3 /*break*/, 4];\r\n                    return [4 /*yield*/, this._values[i]];\r\n                case 2:\r\n                    _a.sent();\r\n                    _a.label = 3;\r\n                case 3:\r\n                    ++i;\r\n                    return [3 /*break*/, 1];\r\n                case 4: return [2 /*return*/];\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Calls `f` for each element in the list.\r\n     *\r\n     * `f` should have at least one parameter defined which will get a current\r\n     * item, with optional second argument - index.\r\n     */\r\n    List.prototype.each = function (f) {\r\n        $array.each(this._values, f);\r\n    };\r\n    /**\r\n     * Returns a specific range of list items, which can be iterated.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Code duplication with IndexedIterable\r\n     * @param start  Start index\r\n     * @param end    End index\r\n     * @return Range\r\n     */\r\n    List.prototype.range = function (start, end) {\r\n        if (start <= end) {\r\n            var diff = end - start;\r\n            start = Math.max(start, 0);\r\n            end = Math.min(start + diff, this._values.length);\r\n            return new IndexedIterable(this._values, start, end);\r\n        }\r\n        else {\r\n            throw new Error(\"Start index must be lower than end index\");\r\n        }\r\n    };\r\n    /**\r\n     * Returns an iterator that has list items sorted backwards.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return List\r\n     */\r\n    List.prototype.backwards = function () {\r\n        return new IndexedIterable(this._values, this._values.length, 0);\r\n    };\r\n    return List;\r\n}());\r\nexport { List };\r\n/**\r\n * A version of a [[List]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\r\nvar ListTemplate = /** @class */ (function (_super) {\r\n    __extends(ListTemplate, _super);\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param t Template object\r\n     */\r\n    function ListTemplate(t) {\r\n        var _this = _super.call(this) || this;\r\n        _this.template = t;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ListTemplate.prototype, \"template\", {\r\n        /**\r\n         * @return Template object\r\n         */\r\n        get: function () {\r\n            return this._template;\r\n        },\r\n        /**\r\n         * A \"template\" object to copy all properties from when creating new list\r\n         * items.\r\n         *\r\n         * @param v  Template object\r\n         */\r\n        set: function (v) {\r\n            v.isTemplate = true;\r\n            this._template = v;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies all elements from other list.\r\n     *\r\n     * @param source  Source list\r\n     */\r\n    ListTemplate.prototype.copyFrom = function (source) {\r\n        var _this = this;\r\n        $iter.each(source.iterator(), function (value) {\r\n            _this.push(value.clone());\r\n        });\r\n    };\r\n    ListTemplate.prototype.create = function (make) {\r\n        var clone = (make != null\r\n            ? new make()\r\n            : this.template.clone());\r\n        this.push(clone);\r\n        return clone;\r\n    };\r\n    /**\r\n     * Creates an exact clone of the list, including its items and template.\r\n     *\r\n     * @return New list\r\n     */\r\n    ListTemplate.prototype.clone = function () {\r\n        var out = new ListTemplate(this.template);\r\n        var values = this.values;\r\n        var length = values.length;\r\n        for (var i = 0; i < length; ++i) {\r\n            out.push(values[i].clone());\r\n        }\r\n        return out;\r\n    };\r\n    return ListTemplate;\r\n}(List));\r\nexport { ListTemplate };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}