{"ast":null,"code":"import { EventDispatcher } from \"./utils/EventDispatcher\";\nimport { Dictionary } from \"./utils/Dictionary\";\nimport { cache } from \"./utils/Cache\";\nimport * as $type from \"./utils/Type\";\nimport * as $string from \"./utils/String\";\nimport * as $array from \"./utils/Array\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Registry is used to store miscellaneous system-wide information, like ids,\r\n * maps, themes, and registered classes.\r\n *\r\n * @ignore Exclude from docs\r\n */\nvar Registry = /** @class */function () {\n  function Registry() {\n    var _this = this;\n    /**\r\n     * Event dispacther.\r\n     */\n    this.events = new EventDispatcher();\n    /**\r\n     * All currently applied themes. All new chart instances created will\r\n     * automatically inherit and retain System's themes.\r\n     */\n    this.themes = [];\n    /**\r\n     * List of all loaded available themes.\r\n     *\r\n     * Whenever a theme loads, it registers itself in System's `loadedThemes`\r\n     * collection.\r\n     */\n    this.loadedThemes = {};\n    /**\r\n     * An indeternal counter used to generate unique IDs.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    this._uidCount = 0;\n    /**\r\n     * Keeps register of class references so that they can be instnatiated using\r\n     * string key.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    this.registeredClasses = {};\n    /**\r\n     * Holds all generated placeholders.\r\n     */\n    this._placeholders = {};\n    /**\r\n     * A list of invalid(ated) [[Sprite]] objects that need to be re-validated\r\n     * during next cycle.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    this.invalidSprites = {};\n    /**\r\n     * Components are added to this list when their data provider changes to\r\n     * a new one or data is added/removed from their data provider.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    this.invalidDatas = {};\n    /**\r\n     * Components are added to this list when values of their raw data change.\r\n     * Used when we want a smooth animation from one set of values to another.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    this.invalidRawDatas = [];\n    /**\r\n     * Components are added to this list when values of their data changes\r\n     * (but not data provider itself).\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    this.invalidDataItems = [];\n    /**\r\n     * Components are added to this list when their data range (selection) is\r\n     * changed, e.g. zoomed.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    this.invalidDataRange = [];\n    /**\r\n     * A list of [[Sprite]] objects that have invalid(ated) positions, that need\r\n     * to be recalculated.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    this.invalidPositions = {};\n    /**\r\n     * A list of [[Container]] objects with invalid(ated) layouts.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    this.invalidLayouts = {};\n    /**\r\n     * An array holding all active (non-disposed) top level elemens.\r\n     *\r\n     * When, for example, a new chart is created, its instance will be added to\r\n     * this array, and will be removed when the chart is disposed.\r\n     */\n    this.baseSprites = [];\n    /**\r\n     * An UID-based map of base sprites (top-level charts).\r\n     */\n    this.baseSpritesByUid = {};\n    /**\r\n     * Queued charts (waiting for their turn) to initialize.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/performance/#Daisy_chaining_multiple_charts} for more information\r\n     */\n    this.queue = [];\n    /**\r\n     * An array of deferred charts that haven't been created yet.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/performance/#Deferred_daisy_chained_instantiation} for more information\r\n     * @since 4.10.0\r\n     */\n    this.deferred = [];\n    this.uid = this.getUniqueId();\n    this.invalidSprites.noBase = [];\n    this.invalidDatas.noBase = [];\n    this.invalidLayouts.noBase = [];\n    this.invalidPositions.noBase = [];\n    // This is needed for Angular Universal SSR\n    if (typeof addEventListener !== \"undefined\") {\n      // This is needed to prevent charts from being cut off when printing\n      addEventListener(\"beforeprint\", function () {\n        $array.each(_this.baseSprites, function (sprite) {\n          var svg = sprite.paper.svg;\n          svg.setAttribute(\"viewBox\", \"0 0 \" + svg.clientWidth + \" \" + svg.clientHeight);\n        });\n      });\n      addEventListener(\"afterprint\", function () {\n        $array.each(_this.baseSprites, function (sprite) {\n          var svg = sprite.paper.svg;\n          svg.removeAttribute(\"viewBox\");\n        });\n      });\n    }\n  }\n  /**\r\n   * Generates a unique chart system-wide ID.\r\n   *\r\n   * @return Generated ID\r\n   */\n  Registry.prototype.getUniqueId = function () {\n    var uid = this._uidCount;\n    this._uidCount += 1;\n    return \"id-\" + uid;\n  };\n  Object.defineProperty(Registry.prototype, \"map\", {\n    /**\r\n     * Returns a universal collection for mapping ids with objects.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Map collection\r\n     */\n    get: function () {\n      if (!this._map) {\n        this._map = new Dictionary();\n      }\n      return this._map;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Caches value in object's cache.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param key    Key\r\n   * @param value  Value\r\n   * @param ttl    TTL in seconds\r\n   */\n  Registry.prototype.setCache = function (key, value, ttl) {\n    cache.set(this.uid, key, value, ttl);\n  };\n  /**\r\n   * Retrieves cached value.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param key    Key\r\n   * @param value  Value to return if cache is not available\r\n   * @return Value\r\n   */\n  Registry.prototype.getCache = function (key, value) {\n    if (value === void 0) {\n      value = undefined;\n    }\n    return cache.get(this.uid, key, value);\n  };\n  /**\r\n   * Dispatches an event using own event dispatcher. Will automatically\r\n   * populate event data object with event type and target (this element).\r\n   * It also checks if there are any handlers registered for this sepecific\r\n   * event.\r\n   *\r\n   * @param eventType Event type (name)\r\n   * @param data      Data to pass into event handler(s)\r\n   */\n  Registry.prototype.dispatch = function (eventType, data) {\n    // @todo Implement proper type check\n    if (this.events.isEnabled(eventType)) {\n      if (data) {\n        data.type = eventType;\n        data.target = data.target || this;\n        this.events.dispatch(eventType, {\n          type: eventType,\n          target: this\n        });\n      } else {\n        this.events.dispatch(eventType, {\n          type: eventType,\n          target: this\n        });\n      }\n    }\n  };\n  /**\r\n   * Works like `dispatch`, except event is triggered immediately, without\r\n   * waiting for the next frame cycle.\r\n   *\r\n   * @param eventType Event type (name)\r\n   * @param data      Data to pass into event handler(s)\r\n   */\n  Registry.prototype.dispatchImmediately = function (eventType, data) {\n    // @todo Implement proper type check\n    if (this.events.isEnabled(eventType)) {\n      if (data) {\n        data.type = eventType;\n        data.target = data.target || this;\n        this.events.dispatchImmediately(eventType, data);\n      } else {\n        this.events.dispatchImmediately(eventType, {\n          type: eventType,\n          target: this\n        });\n      }\n    }\n  };\n  /**\r\n   * Returns a unique placeholder suitable for the key.\r\n   *\r\n   * @param key  Key\r\n   * @return Random string to be used as placeholder\r\n   */\n  Registry.prototype.getPlaceholder = function (key) {\n    if ($type.hasValue(this._placeholders[key])) {\n      return this._placeholders[key];\n    }\n    this._placeholders[key] = \"__amcharts_\" + key + \"_\" + $string.random(8) + \"__\";\n    return this._placeholders[key];\n  };\n  /**\r\n   * @ignore\r\n   */\n  Registry.prototype.addToInvalidComponents = function (component) {\n    if (component.baseId) {\n      $array.move(this.invalidDatas[component.baseId], component);\n    } else {\n      $array.move(this.invalidDatas[\"noBase\"], component);\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n  Registry.prototype.removeFromInvalidComponents = function (component) {\n    if (component.baseId) {\n      $array.remove(this.invalidDatas[component.baseId], component);\n    }\n    $array.remove(this.invalidDatas[\"noBase\"], component);\n  };\n  /**\r\n   * @ignore\r\n   */\n  Registry.prototype.addToInvalidSprites = function (sprite) {\n    if (sprite.baseId) {\n      $array.add(this.invalidSprites[sprite.baseId], sprite);\n    } else {\n      $array.add(this.invalidSprites[\"noBase\"], sprite);\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n  Registry.prototype.removeFromInvalidSprites = function (sprite) {\n    if (sprite.baseId) {\n      $array.remove(this.invalidSprites[sprite.baseId], sprite);\n    }\n    $array.remove(this.invalidSprites[\"noBase\"], sprite);\n  };\n  /**\r\n   * @ignore\r\n   */\n  Registry.prototype.addToInvalidPositions = function (sprite) {\n    if (sprite.baseId) {\n      $array.add(this.invalidPositions[sprite.baseId], sprite);\n    } else {\n      $array.add(this.invalidPositions[\"noBase\"], sprite);\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n  Registry.prototype.removeFromInvalidPositions = function (sprite) {\n    if (sprite.baseId) {\n      $array.remove(this.invalidPositions[sprite.baseId], sprite);\n    }\n    $array.remove(this.invalidPositions[\"noBase\"], sprite);\n  };\n  /**\r\n   * @ignore\r\n   */\n  Registry.prototype.addToInvalidLayouts = function (sprite) {\n    if (sprite.baseId) {\n      $array.add(this.invalidLayouts[sprite.baseId], sprite);\n    } else {\n      $array.add(this.invalidLayouts[\"noBase\"], sprite);\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n  Registry.prototype.removeFromInvalidLayouts = function (sprite) {\n    if (sprite.baseId) {\n      $array.remove(this.invalidLayouts[sprite.baseId], sprite);\n    }\n    $array.remove(this.invalidLayouts[\"noBase\"], sprite);\n  };\n  return Registry;\n}();\nexport { Registry };\n/**\r\n * A singleton global instance of [[Registry]].\r\n *\r\n * @ignore Exclude from docs\r\n */\nexport var registry = new Registry();\n/**\r\n * Returns `true` if object is an instance of the class. It's the same as `instanceof` except it doesn't need to import the class.\r\n *\r\n * @param object Object\r\n * @param name Class name\r\n * @return Is instance of class\r\n */\nexport function is(object, name) {\n  var x = registry.registeredClasses[name];\n  return x != null && object instanceof x;\n}","map":{"version":3,"names":["EventDispatcher","Dictionary","cache","$type","$string","$array","Registry","_this","events","themes","loadedThemes","_uidCount","registeredClasses","_placeholders","invalidSprites","invalidDatas","invalidRawDatas","invalidDataItems","invalidDataRange","invalidPositions","invalidLayouts","baseSprites","baseSpritesByUid","queue","deferred","uid","getUniqueId","noBase","addEventListener","each","sprite","svg","paper","setAttribute","clientWidth","clientHeight","removeAttribute","prototype","Object","defineProperty","get","_map","enumerable","configurable","setCache","key","value","ttl","set","getCache","undefined","dispatch","eventType","data","isEnabled","type","target","dispatchImmediately","getPlaceholder","hasValue","random","addToInvalidComponents","component","baseId","move","removeFromInvalidComponents","remove","addToInvalidSprites","add","removeFromInvalidSprites","addToInvalidPositions","removeFromInvalidPositions","addToInvalidLayouts","removeFromInvalidLayouts","registry","is","object","name","x"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/Registry.js"],"sourcesContent":["import { EventDispatcher } from \"./utils/EventDispatcher\";\r\nimport { Dictionary } from \"./utils/Dictionary\";\r\nimport { cache } from \"./utils/Cache\";\r\nimport * as $type from \"./utils/Type\";\r\nimport * as $string from \"./utils/String\";\r\nimport * as $array from \"./utils/Array\";\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Registry is used to store miscellaneous system-wide information, like ids,\r\n * maps, themes, and registered classes.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nvar Registry = /** @class */ (function () {\r\n    function Registry() {\r\n        var _this = this;\r\n        /**\r\n         * Event dispacther.\r\n         */\r\n        this.events = new EventDispatcher();\r\n        /**\r\n         * All currently applied themes. All new chart instances created will\r\n         * automatically inherit and retain System's themes.\r\n         */\r\n        this.themes = [];\r\n        /**\r\n         * List of all loaded available themes.\r\n         *\r\n         * Whenever a theme loads, it registers itself in System's `loadedThemes`\r\n         * collection.\r\n         */\r\n        this.loadedThemes = {};\r\n        /**\r\n         * An indeternal counter used to generate unique IDs.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        this._uidCount = 0;\r\n        /**\r\n         * Keeps register of class references so that they can be instnatiated using\r\n         * string key.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        this.registeredClasses = {};\r\n        /**\r\n         * Holds all generated placeholders.\r\n         */\r\n        this._placeholders = {};\r\n        /**\r\n         * A list of invalid(ated) [[Sprite]] objects that need to be re-validated\r\n         * during next cycle.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        this.invalidSprites = {};\r\n        /**\r\n         * Components are added to this list when their data provider changes to\r\n         * a new one or data is added/removed from their data provider.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        this.invalidDatas = {};\r\n        /**\r\n         * Components are added to this list when values of their raw data change.\r\n         * Used when we want a smooth animation from one set of values to another.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        this.invalidRawDatas = [];\r\n        /**\r\n         * Components are added to this list when values of their data changes\r\n         * (but not data provider itself).\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        this.invalidDataItems = [];\r\n        /**\r\n         * Components are added to this list when their data range (selection) is\r\n         * changed, e.g. zoomed.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        this.invalidDataRange = [];\r\n        /**\r\n         * A list of [[Sprite]] objects that have invalid(ated) positions, that need\r\n         * to be recalculated.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        this.invalidPositions = {};\r\n        /**\r\n         * A list of [[Container]] objects with invalid(ated) layouts.\r\n         *\r\n         * @ignore Exclude from docs\r\n         */\r\n        this.invalidLayouts = {};\r\n        /**\r\n         * An array holding all active (non-disposed) top level elemens.\r\n         *\r\n         * When, for example, a new chart is created, its instance will be added to\r\n         * this array, and will be removed when the chart is disposed.\r\n         */\r\n        this.baseSprites = [];\r\n        /**\r\n         * An UID-based map of base sprites (top-level charts).\r\n         */\r\n        this.baseSpritesByUid = {};\r\n        /**\r\n         * Queued charts (waiting for their turn) to initialize.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/performance/#Daisy_chaining_multiple_charts} for more information\r\n         */\r\n        this.queue = [];\r\n        /**\r\n         * An array of deferred charts that haven't been created yet.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v4/concepts/performance/#Deferred_daisy_chained_instantiation} for more information\r\n         * @since 4.10.0\r\n         */\r\n        this.deferred = [];\r\n        this.uid = this.getUniqueId();\r\n        this.invalidSprites.noBase = [];\r\n        this.invalidDatas.noBase = [];\r\n        this.invalidLayouts.noBase = [];\r\n        this.invalidPositions.noBase = [];\r\n        // This is needed for Angular Universal SSR\r\n        if (typeof addEventListener !== \"undefined\") {\r\n            // This is needed to prevent charts from being cut off when printing\r\n            addEventListener(\"beforeprint\", function () {\r\n                $array.each(_this.baseSprites, function (sprite) {\r\n                    var svg = sprite.paper.svg;\r\n                    svg.setAttribute(\"viewBox\", \"0 0 \" + svg.clientWidth + \" \" + svg.clientHeight);\r\n                });\r\n            });\r\n            addEventListener(\"afterprint\", function () {\r\n                $array.each(_this.baseSprites, function (sprite) {\r\n                    var svg = sprite.paper.svg;\r\n                    svg.removeAttribute(\"viewBox\");\r\n                });\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Generates a unique chart system-wide ID.\r\n     *\r\n     * @return Generated ID\r\n     */\r\n    Registry.prototype.getUniqueId = function () {\r\n        var uid = this._uidCount;\r\n        this._uidCount += 1;\r\n        return \"id-\" + uid;\r\n    };\r\n    Object.defineProperty(Registry.prototype, \"map\", {\r\n        /**\r\n         * Returns a universal collection for mapping ids with objects.\r\n         *\r\n         * @ignore Exclude from docs\r\n         * @return Map collection\r\n         */\r\n        get: function () {\r\n            if (!this._map) {\r\n                this._map = new Dictionary();\r\n            }\r\n            return this._map;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Caches value in object's cache.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param key    Key\r\n     * @param value  Value\r\n     * @param ttl    TTL in seconds\r\n     */\r\n    Registry.prototype.setCache = function (key, value, ttl) {\r\n        cache.set(this.uid, key, value, ttl);\r\n    };\r\n    /**\r\n     * Retrieves cached value.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param key    Key\r\n     * @param value  Value to return if cache is not available\r\n     * @return Value\r\n     */\r\n    Registry.prototype.getCache = function (key, value) {\r\n        if (value === void 0) { value = undefined; }\r\n        return cache.get(this.uid, key, value);\r\n    };\r\n    /**\r\n     * Dispatches an event using own event dispatcher. Will automatically\r\n     * populate event data object with event type and target (this element).\r\n     * It also checks if there are any handlers registered for this sepecific\r\n     * event.\r\n     *\r\n     * @param eventType Event type (name)\r\n     * @param data      Data to pass into event handler(s)\r\n     */\r\n    Registry.prototype.dispatch = function (eventType, data) {\r\n        // @todo Implement proper type check\r\n        if (this.events.isEnabled(eventType)) {\r\n            if (data) {\r\n                data.type = eventType;\r\n                data.target = data.target || this;\r\n                this.events.dispatch(eventType, {\r\n                    type: eventType,\r\n                    target: this\r\n                });\r\n            }\r\n            else {\r\n                this.events.dispatch(eventType, {\r\n                    type: eventType,\r\n                    target: this\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Works like `dispatch`, except event is triggered immediately, without\r\n     * waiting for the next frame cycle.\r\n     *\r\n     * @param eventType Event type (name)\r\n     * @param data      Data to pass into event handler(s)\r\n     */\r\n    Registry.prototype.dispatchImmediately = function (eventType, data) {\r\n        // @todo Implement proper type check\r\n        if (this.events.isEnabled(eventType)) {\r\n            if (data) {\r\n                data.type = eventType;\r\n                data.target = data.target || this;\r\n                this.events.dispatchImmediately(eventType, data);\r\n            }\r\n            else {\r\n                this.events.dispatchImmediately(eventType, {\r\n                    type: eventType,\r\n                    target: this\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a unique placeholder suitable for the key.\r\n     *\r\n     * @param key  Key\r\n     * @return Random string to be used as placeholder\r\n     */\r\n    Registry.prototype.getPlaceholder = function (key) {\r\n        if ($type.hasValue(this._placeholders[key])) {\r\n            return this._placeholders[key];\r\n        }\r\n        this._placeholders[key] = \"__amcharts_\" + key + \"_\" + $string.random(8) + \"__\";\r\n        return this._placeholders[key];\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Registry.prototype.addToInvalidComponents = function (component) {\r\n        if (component.baseId) {\r\n            $array.move(this.invalidDatas[component.baseId], component);\r\n        }\r\n        else {\r\n            $array.move(this.invalidDatas[\"noBase\"], component);\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Registry.prototype.removeFromInvalidComponents = function (component) {\r\n        if (component.baseId) {\r\n            $array.remove(this.invalidDatas[component.baseId], component);\r\n        }\r\n        $array.remove(this.invalidDatas[\"noBase\"], component);\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Registry.prototype.addToInvalidSprites = function (sprite) {\r\n        if (sprite.baseId) {\r\n            $array.add(this.invalidSprites[sprite.baseId], sprite);\r\n        }\r\n        else {\r\n            $array.add(this.invalidSprites[\"noBase\"], sprite);\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Registry.prototype.removeFromInvalidSprites = function (sprite) {\r\n        if (sprite.baseId) {\r\n            $array.remove(this.invalidSprites[sprite.baseId], sprite);\r\n        }\r\n        $array.remove(this.invalidSprites[\"noBase\"], sprite);\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Registry.prototype.addToInvalidPositions = function (sprite) {\r\n        if (sprite.baseId) {\r\n            $array.add(this.invalidPositions[sprite.baseId], sprite);\r\n        }\r\n        else {\r\n            $array.add(this.invalidPositions[\"noBase\"], sprite);\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Registry.prototype.removeFromInvalidPositions = function (sprite) {\r\n        if (sprite.baseId) {\r\n            $array.remove(this.invalidPositions[sprite.baseId], sprite);\r\n        }\r\n        $array.remove(this.invalidPositions[\"noBase\"], sprite);\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Registry.prototype.addToInvalidLayouts = function (sprite) {\r\n        if (sprite.baseId) {\r\n            $array.add(this.invalidLayouts[sprite.baseId], sprite);\r\n        }\r\n        else {\r\n            $array.add(this.invalidLayouts[\"noBase\"], sprite);\r\n        }\r\n    };\r\n    /**\r\n     * @ignore\r\n     */\r\n    Registry.prototype.removeFromInvalidLayouts = function (sprite) {\r\n        if (sprite.baseId) {\r\n            $array.remove(this.invalidLayouts[sprite.baseId], sprite);\r\n        }\r\n        $array.remove(this.invalidLayouts[\"noBase\"], sprite);\r\n    };\r\n    return Registry;\r\n}());\r\nexport { Registry };\r\n/**\r\n * A singleton global instance of [[Registry]].\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport var registry = new Registry();\r\n/**\r\n * Returns `true` if object is an instance of the class. It's the same as `instanceof` except it doesn't need to import the class.\r\n *\r\n * @param object Object\r\n * @param name Class name\r\n * @return Is instance of class\r\n */\r\nexport function is(object, name) {\r\n    var x = registry.registeredClasses[name];\r\n    return x != null && object instanceof x;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}