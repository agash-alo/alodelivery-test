{"ast":null,"code":"import { Overlay, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, EventEmitter, ChangeDetectorRef, NgZone, ElementRef, Optional, Inject, Self, Attribute, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, ErrorStateMatcher, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { MatFormField, MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nconst matSelectAnimations = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [transition('* => void', query('@transformPanel', [animateChild()], {\n    optional: true\n  }))]),\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [state('void', style({\n    transform: 'scaleY(0.8)',\n    minWidth: '100%',\n    opacity: 0\n  })), state('showing', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 32px)',\n    transform: 'scaleY(1)'\n  })), state('showing-multiple', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 64px)',\n    transform: 'scaleY(1)'\n  })), transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')), transition('* => void', animate('100ms 25ms linear', style({\n    opacity: 0\n  })))])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n  return Error('`compareWith` must be a function.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId = 0;\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n/** The max height of the select's overlay panel. */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/** The panel's padding on the x-axis. */\nconst SELECT_PANEL_PADDING_X = 16;\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/** The height of the select items in `em` units. */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n  constructor( /** Reference to the select that emitted the change event. */\n  source, /** Current value of the select that emitted the event. */\n  value) {\n    this.source = source;\n    this.value = value;\n  }\n}\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nclass MatSelectBase {\n  constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n    this._elementRef = _elementRef;\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n  }\n}\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {}\nMatSelectTrigger.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-select-trigger',\n    providers: [{\n      provide: MAT_SELECT_TRIGGER,\n      useExisting: MatSelectTrigger\n    }]\n  }]\n}];\n/** Base class with all of the `MatSelect` functionality. */\nclass _MatSelectBase extends _MatSelectMixinBase {\n  constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n    var _a, _b, _c;\n    super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    this._viewportRuler = _viewportRuler;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._ngZone = _ngZone;\n    this._dir = _dir;\n    this._parentFormField = _parentFormField;\n    this.ngControl = ngControl;\n    this._liveAnnouncer = _liveAnnouncer;\n    this._defaultOptions = _defaultOptions;\n    /** Whether or not the overlay panel is open. */\n    this._panelOpen = false;\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    this._compareWith = (o1, o2) => o1 === o2;\n    /** Unique id for this input. */\n    this._uid = `mat-select-${nextUniqueId++}`;\n    /** Current `ariar-labelledby` value for the select trigger. */\n    this._triggerAriaLabelledBy = null;\n    /** Emits whenever the component is destroyed. */\n    this._destroy = new Subject();\n    /** `View -> model callback called when value changes` */\n    this._onChange = () => {};\n    /** `View -> model callback called when select has been touched` */\n    this._onTouched = () => {};\n    /** ID for the DOM node containing the select's value. */\n    this._valueId = `mat-select-value-${nextUniqueId++}`;\n    /** Emits when the panel element is finished transforming in. */\n    this._panelDoneAnimatingStream = new Subject();\n    this._overlayPanelClass = ((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.overlayPanelClass) || '';\n    this._focused = false;\n    /** A name for this control that can be used by `mat-form-field`. */\n    this.controlType = 'mat-select';\n    this._required = false;\n    this._multiple = false;\n    this._disableOptionCentering = (_c = (_b = this._defaultOptions) === null || _b === void 0 ? void 0 : _b.disableOptionCentering) !== null && _c !== void 0 ? _c : false;\n    /** Aria label of the select. */\n    this.ariaLabel = '';\n    /** Combined stream of all of the child options' change events. */\n    this.optionSelectionChanges = defer(() => {\n      const options = this.options;\n      if (options) {\n        return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n      }\n      return this._ngZone.onStable.pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    });\n    /** Event emitted when the select panel has been toggled. */\n    this.openedChange = new EventEmitter();\n    /** Event emitted when the select has been opened. */\n    this._openedStream = this.openedChange.pipe(filter(o => o), map(() => {}));\n    /** Event emitted when the select has been closed. */\n    this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => {}));\n    /** Event emitted when the selected value has been changed by the user. */\n    this.selectionChange = new EventEmitter();\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    this.valueChange = new EventEmitter();\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n    // Note that we only want to set this when the defaults pass it in, otherwise it should\n    // stay as `undefined` so that it falls back to the default in the key manager.\n    if ((_defaultOptions === null || _defaultOptions === void 0 ? void 0 : _defaultOptions.typeaheadDebounceInterval) != null) {\n      this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n    }\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n  /** Whether the select is focused. */\n  get focused() {\n    return this._focused || this._panelOpen;\n  }\n  /** Placeholder to be shown if no value has been selected. */\n  get placeholder() {\n    return this._placeholder;\n  }\n  set placeholder(value) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  /** Whether the component is required. */\n  get required() {\n    return this._required;\n  }\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  /** Whether the user should be allowed to select multiple options. */\n  get multiple() {\n    return this._multiple;\n  }\n  set multiple(value) {\n    if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatSelectDynamicMultipleError();\n    }\n    this._multiple = coerceBooleanProperty(value);\n  }\n  /** Whether to center the active option over the trigger. */\n  get disableOptionCentering() {\n    return this._disableOptionCentering;\n  }\n  set disableOptionCentering(value) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  get compareWith() {\n    return this._compareWith;\n  }\n  set compareWith(fn) {\n    if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  /** Value of the select control. */\n  get value() {\n    return this._value;\n  }\n  set value(newValue) {\n    // Always re-assign an array, because it might have been mutated.\n    if (newValue !== this._value || this._multiple && Array.isArray(newValue)) {\n      if (this.options) {\n        this._setSelectionByValue(newValue);\n      }\n      this._value = newValue;\n    }\n  }\n  /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n  get typeaheadDebounceInterval() {\n    return this._typeaheadDebounceInterval;\n  }\n  set typeaheadDebounceInterval(value) {\n    this._typeaheadDebounceInterval = coerceNumberProperty(value);\n  }\n  /** Unique id of the element. */\n  get id() {\n    return this._id;\n  }\n  set id(value) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  ngOnInit() {\n    this._selectionModel = new SelectionModel(this.multiple);\n    this.stateChanges.next();\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream.pipe(distinctUntilChanged(), takeUntil(this._destroy)).subscribe(() => this._panelDoneAnimating(this.panelOpen));\n  }\n  ngAfterContentInit() {\n    this._initKeyManager();\n    this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n  ngDoCheck() {\n    const newAriaLabelledby = this._getTriggerAriaLabelledby();\n    // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n    // is computed as a result of a content query which can cause this binding to trigger a\n    // \"changed after checked\" error.\n    if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n      const element = this._elementRef.nativeElement;\n      this._triggerAriaLabelledBy = newAriaLabelledby;\n      if (newAriaLabelledby) {\n        element.setAttribute('aria-labelledby', newAriaLabelledby);\n      } else {\n        element.removeAttribute('aria-labelledby');\n      }\n    }\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n  ngOnChanges(changes) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n    if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n      this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n    }\n  }\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n  /** Toggles the overlay panel open or closed. */\n  toggle() {\n    this.panelOpen ? this.close() : this.open();\n  }\n  /** Opens the overlay panel. */\n  open() {\n    if (this._canOpen()) {\n      this._panelOpen = true;\n      this._keyManager.withHorizontalOrientation(null);\n      this._highlightCorrectOption();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /** Closes the overlay panel and focuses the host element. */\n  close() {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value) {\n    this.value = value;\n  }\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n  /** Whether or not the overlay panel is open. */\n  get panelOpen() {\n    return this._panelOpen;\n  }\n  /** The currently selected option. */\n  get selected() {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n  /** The value displayed in the trigger. */\n  get triggerValue() {\n    if (this.empty) {\n      return '';\n    }\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n    return this._selectionModel.selected[0].viewValue;\n  }\n  /** Whether the element is in RTL mode. */\n  _isRtl() {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event) {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n  /** Handles keyboard events while the select is closed. */\n  _handleClosedKeydown(event) {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW || keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n    // Open the select on ALT + arrow key to match the native <select>\n    if (!manager.isTyping() && isOpenKey && !hasModifierKey(event) || (this.multiple || event.altKey) && isArrowKey) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const previouslySelectedOption = this.selected;\n      manager.onKeydown(event);\n      const selectedOption = this.selected;\n      // Since the value has changed, we need to announce it ourselves.\n      if (selectedOption && previouslySelectedOption !== selectedOption) {\n        // We set a duration on the live announcement, because we want the live element to be\n        // cleared after a while so that users can't navigate to it using the arrow keys.\n        this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n      }\n    }\n  }\n  /** Handles keyboard events when the selected is open. */\n  _handleOpenKeydown(event) {\n    const manager = this._keyManager;\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const isTyping = manager.isTyping();\n    if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n      // Don't do anything in this case if the user is typing,\n      // because the typing sequence can include the space key.\n    } else if (!isTyping && (keyCode === ENTER || keyCode === SPACE) && manager.activeItem && !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n      manager.onKeydown(event);\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem && manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached() {\n    this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._positioningSettled();\n    });\n  }\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme() {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n  /** Whether the select has a value. */\n  get empty() {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n  _initializeSelection() {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  _setSelectionByValue(value) {\n    this._selectionModel.selected.forEach(option => option.setInactiveStyles());\n    this._selectionModel.clear();\n    if (this.multiple && value) {\n      if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatSelectNonArrayValueError();\n      }\n      value.forEach(currentValue => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      const correspondingOption = this._selectValue(value);\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.updateActiveItem(correspondingOption);\n      } else if (!this.panelOpen) {\n        // Otherwise reset the highlighted option. Note that we only want to do this while\n        // closed, because doing it while open can shift the user's focus unnecessarily.\n        this._keyManager.updateActiveItem(-1);\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  _selectValue(value) {\n    const correspondingOption = this.options.find(option => {\n      // Skip options that are already in the model. This allows us to handle cases\n      // where the same primitive value is selected multiple times.\n      if (this._selectionModel.isSelected(option)) {\n        return false;\n      }\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value, value);\n      } catch (error) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n    return correspondingOption;\n  }\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager(this.options).withTypeAhead(this._typeaheadDebounceInterval).withVerticalOrientation().withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr').withHomeAndEnd().withAllowedModifierKeys(['shiftKey']);\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this.panelOpen) {\n        // Select the active item when tabbing away. This is consistent with how the native\n        // select behaves. Note that we only want to do this in single selection mode.\n        if (!this.multiple && this._keyManager.activeItem) {\n          this._keyManager.activeItem._selectViaInteraction();\n        }\n        // Restore focus to the trigger before closing. Ensures that the focus\n        // position won't be lost if the user got focus into the overlay.\n        this.focus();\n        this.close();\n      }\n    });\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  _resetOptions() {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges)).pipe(takeUntil(changedOrDestroyed)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n  /** Invoked when an option is clicked. */\n  _onSelect(option, isUserInput) {\n    const wasSelected = this._selectionModel.isSelected(option);\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      if (this.value != null) {\n        this._propagateChanges(option.value);\n      }\n    } else {\n      if (wasSelected !== option.selected) {\n        option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n      }\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n      if (this.multiple) {\n        this._sortValues();\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n    this.stateChanges.next();\n  }\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) : options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n  /** Emits change event to set the model value. */\n  _propagateChanges(fallbackValue) {\n    let valueToEmit = null;\n    if (this.multiple) {\n      valueToEmit = this.selected.map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  _highlightCorrectOption() {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n  /** Whether the panel is allowed to open. */\n  _canOpen() {\n    var _a;\n    return !this._panelOpen && !this.disabled && ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) > 0;\n  }\n  /** Focuses the select element. */\n  focus(options) {\n    this._elementRef.nativeElement.focus(options);\n  }\n  /** Gets the aria-labelledby for the select panel. */\n  _getPanelAriaLabelledby() {\n    var _a;\n    if (this.ariaLabel) {\n      return null;\n    }\n    const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n    const labelExpression = labelId ? labelId + ' ' : '';\n    return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n  }\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant() {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n    return null;\n  }\n  /** Gets the aria-labelledby of the select component trigger. */\n  _getTriggerAriaLabelledby() {\n    var _a;\n    if (this.ariaLabel) {\n      return null;\n    }\n    const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n    let value = (labelId ? labelId + ' ' : '') + this._valueId;\n    if (this.ariaLabelledby) {\n      value += ' ' + this.ariaLabelledby;\n    }\n    return value;\n  }\n  /** Called when the overlay panel is done animating. */\n  _panelDoneAnimating(isOpen) {\n    this.openedChange.emit(isOpen);\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat() {\n    return this._panelOpen || !this.empty || this._focused && !!this._placeholder;\n  }\n}\n_MatSelectBase.decorators = [{\n  type: Directive\n}];\n_MatSelectBase.ctorParameters = () => [{\n  type: ViewportRuler\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: NgZone\n}, {\n  type: ErrorStateMatcher\n}, {\n  type: ElementRef\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: NgForm,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: FormGroupDirective,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: MatFormField,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_FORM_FIELD]\n  }]\n}, {\n  type: NgControl,\n  decorators: [{\n    type: Self\n  }, {\n    type: Optional\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_SELECT_SCROLL_STRATEGY]\n  }]\n}, {\n  type: LiveAnnouncer\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_SELECT_CONFIG]\n  }]\n}];\n_MatSelectBase.propDecorators = {\n  trigger: [{\n    type: ViewChild,\n    args: ['trigger']\n  }],\n  panel: [{\n    type: ViewChild,\n    args: ['panel']\n  }],\n  _overlayDir: [{\n    type: ViewChild,\n    args: [CdkConnectedOverlay]\n  }],\n  panelClass: [{\n    type: Input\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  multiple: [{\n    type: Input\n  }],\n  disableOptionCentering: [{\n    type: Input\n  }],\n  compareWith: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  errorStateMatcher: [{\n    type: Input\n  }],\n  typeaheadDebounceInterval: [{\n    type: Input\n  }],\n  sortComparator: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  openedChange: [{\n    type: Output\n  }],\n  _openedStream: [{\n    type: Output,\n    args: ['opened']\n  }],\n  _closedStream: [{\n    type: Output,\n    args: ['closed']\n  }],\n  selectionChange: [{\n    type: Output\n  }],\n  valueChange: [{\n    type: Output\n  }]\n};\nclass MatSelect extends _MatSelectBase {\n  constructor() {\n    super(...arguments);\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    this._scrollTop = 0;\n    /** The cached font-size of the trigger element. */\n    this._triggerFontSize = 0;\n    /** The value of the select panel's transform-origin property. */\n    this._transformOrigin = 'top';\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    this._offsetY = 0;\n    this._positions = [{\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top'\n    }, {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom'\n    }];\n  }\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n  ngOnInit() {\n    super.ngOnInit();\n    this._viewportRuler.change().pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this.panelOpen) {\n        this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        this._changeDetectorRef.markForCheck();\n      }\n    });\n  }\n  open() {\n    if (super._canOpen()) {\n      super.open();\n      this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n      // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n      // `parseInt` ignores the trailing 'px' and converts this to a number.\n      this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n      this._calculateOverlayPosition();\n      // Set the font size on the panel element once it exists.\n      this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n        if (this._triggerFontSize && this._overlayDir.overlayRef && this._overlayDir.overlayRef.overlayElement) {\n          this._overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n        }\n      });\n    }\n  }\n  /** Scrolls the active option into view. */\n  _scrollOptionIntoView(index) {\n    const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n    const itemHeight = this._getItemHeight();\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n  }\n  _positioningSettled() {\n    this._calculateOverlayOffsetX();\n    this.panel.nativeElement.scrollTop = this._scrollTop;\n  }\n  _panelDoneAnimating(isOpen) {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n    } else {\n      this._overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n    super._panelDoneAnimating(isOpen);\n  }\n  _getChangeEvent(value) {\n    return new MatSelectChange(this, value);\n  }\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  _calculateOverlayOffsetX() {\n    const overlayRect = this._overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X : SELECT_PANEL_PADDING_X * 2;\n    let offsetX;\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else if (this.disableOptionCentering) {\n      offsetX = SELECT_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width + (isRtl ? 0 : paddingWidth);\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this._overlayDir.offsetX = Math.round(offsetX);\n    this._overlayDir.overlayRef.updatePosition();\n  }\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop;\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this.disableOptionCentering) {\n      return 0;\n    }\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  _checkOverlayWithinViewport(maxScroll) {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n      this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  _calculateOverlayPosition() {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset;\n    if (this.empty) {\n      selectedOptionOffset = 0;\n    } else {\n      selectedOptionOffset = Math.max(this.options.toArray().indexOf(this._selectionModel.selected[0]), 0);\n    }\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n  /** Sets the transform origin point based on the selected option. */\n  _getOriginBasedOnOption() {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n  /** Calculates the height of the select's options. */\n  _getItemHeight() {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  _getItemCount() {\n    return this.options.length + this.optionGroups.length;\n  }\n}\nMatSelect.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-select',\n    exportAs: 'matSelect',\n    template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width!\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\n    inputs: ['disabled', 'disableRipple', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n      'role': 'combobox',\n      'aria-autocomplete': 'none',\n      // TODO(crisbeto): the value for aria-haspopup should be `listbox`, but currently it's difficult\n      // to sync into Google, because of an outdated automated a11y check which flags it as an invalid\n      // value. At some point we should try to switch it back to being `listbox`.\n      'aria-haspopup': 'true',\n      'class': 'mat-select',\n      '[attr.id]': 'id',\n      '[attr.tabindex]': 'tabIndex',\n      '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n      '[attr.aria-expanded]': 'panelOpen',\n      '[attr.aria-label]': 'ariaLabel || null',\n      '[attr.aria-required]': 'required.toString()',\n      '[attr.aria-disabled]': 'disabled.toString()',\n      '[attr.aria-invalid]': 'errorState',\n      '[attr.aria-describedby]': '_ariaDescribedby || null',\n      '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n      '[class.mat-select-disabled]': 'disabled',\n      '[class.mat-select-invalid]': 'errorState',\n      '[class.mat-select-required]': 'required',\n      '[class.mat-select-empty]': 'empty',\n      '[class.mat-select-multiple]': 'multiple',\n      '(keydown)': '_handleKeydown($event)',\n      '(focus)': '_onFocus()',\n      '(blur)': '_onBlur()'\n    },\n    animations: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel],\n    providers: [{\n      provide: MatFormFieldControl,\n      useExisting: MatSelect\n    }, {\n      provide: MAT_OPTION_PARENT_COMPONENT,\n      useExisting: MatSelect\n    }],\n    styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px}\\n\"]\n  }]\n}];\nMatSelect.propDecorators = {\n  options: [{\n    type: ContentChildren,\n    args: [MatOption, {\n      descendants: true\n    }]\n  }],\n  optionGroups: [{\n    type: ContentChildren,\n    args: [MAT_OPTGROUP, {\n      descendants: true\n    }]\n  }],\n  customTrigger: [{\n    type: ContentChild,\n    args: [MAT_SELECT_TRIGGER]\n  }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSelectModule {}\nMatSelectModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule],\n    exports: [CdkScrollableModule, MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n    declarations: [MatSelect, MatSelectTrigger],\n    providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, _MatSelectBase, matSelectAnimations };","map":{"version":3,"names":["Overlay","CdkConnectedOverlay","OverlayModule","CommonModule","InjectionToken","Directive","EventEmitter","ChangeDetectorRef","NgZone","ElementRef","Optional","Inject","Self","Attribute","ViewChild","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","ContentChildren","ContentChild","NgModule","mixinDisableRipple","mixinTabIndex","mixinDisabled","mixinErrorState","ErrorStateMatcher","_countGroupLabelsBeforeOption","_getOptionScrollPosition","MAT_OPTION_PARENT_COMPONENT","MatOption","MAT_OPTGROUP","MatOptionModule","MatCommonModule","MatFormField","MAT_FORM_FIELD","MatFormFieldControl","MatFormFieldModule","ViewportRuler","CdkScrollableModule","ActiveDescendantKeyManager","LiveAnnouncer","Directionality","coerceBooleanProperty","coerceNumberProperty","SelectionModel","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","hasModifierKey","A","NgForm","FormGroupDirective","NgControl","Subject","defer","merge","startWith","switchMap","take","filter","map","distinctUntilChanged","takeUntil","trigger","transition","query","animateChild","state","style","animate","matSelectAnimations","transformPanelWrap","optional","transformPanel","transform","minWidth","opacity","getMatSelectDynamicMultipleError","Error","getMatSelectNonArrayValueError","getMatSelectNonFunctionValueError","nextUniqueId","SELECT_PANEL_MAX_HEIGHT","SELECT_PANEL_PADDING_X","SELECT_PANEL_INDENT_PADDING_X","SELECT_ITEM_HEIGHT_EM","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_VIEWPORT_PADDING","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MatSelectChange","constructor","source","value","MatSelectBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","MAT_SELECT_TRIGGER","MatSelectTrigger","decorators","type","args","selector","providers","useExisting","_MatSelectBase","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","_defaultOptions","_a","_b","_c","_panelOpen","_compareWith","o1","o2","_uid","_triggerAriaLabelledBy","_destroy","_onChange","_onTouched","_valueId","_panelDoneAnimatingStream","_overlayPanelClass","overlayPanelClass","_focused","controlType","_required","_multiple","_disableOptionCentering","disableOptionCentering","ariaLabel","optionSelectionChanges","options","changes","pipe","option","onSelectionChange","onStable","openedChange","_openedStream","o","_closedStream","selectionChange","valueChange","valueAccessor","typeaheadDebounceInterval","_typeaheadDebounceInterval","_scrollStrategyFactory","_scrollStrategy","parseInt","id","focused","placeholder","_placeholder","stateChanges","next","required","multiple","_selectionModel","ngDevMode","compareWith","fn","_initializeSelection","_value","newValue","Array","isArray","_setSelectionByValue","_id","ngOnInit","subscribe","_panelDoneAnimating","panelOpen","ngAfterContentInit","_initKeyManager","changed","event","added","forEach","select","removed","deselect","_resetOptions","ngDoCheck","newAriaLabelledby","_getTriggerAriaLabelledby","element","nativeElement","setAttribute","removeAttribute","updateErrorState","ngOnChanges","_keyManager","withTypeAhead","ngOnDestroy","complete","toggle","close","open","_canOpen","withHorizontalOrientation","_highlightCorrectOption","markForCheck","_isRtl","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","disabled","selected","triggerValue","empty","selectedOptions","viewValue","reverse","join","_handleKeydown","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","isOpenKey","manager","isTyping","altKey","preventDefault","previouslySelectedOption","onKeydown","selectedOption","announce","activeItem","_selectViaInteraction","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_onFocus","_onBlur","_onAttached","_overlayDir","positionChange","detectChanges","_positioningSettled","_getPanelTheme","color","isEmpty","Promise","resolve","then","setInactiveStyles","clear","currentValue","_selectValue","_sortValues","correspondingOption","updateActiveItem","find","isSelected","error","console","warn","withVerticalOrientation","withHomeAndEnd","withAllowedModifierKeys","tabOut","focus","change","panel","_scrollOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","wasSelected","_propagateChanges","setActiveItem","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","emit","_getChangeEvent","setFirstItemActive","length","_getPanelAriaLabelledby","labelId","getLabelId","labelExpression","ariaLabelledby","_getAriaActiveDescendant","isOpen","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","shouldLabelFloat","ctorParameters","String","undefined","propDecorators","panelClass","errorStateMatcher","MatSelect","arguments","_scrollTop","_triggerFontSize","_transformOrigin","_offsetY","_positions","originX","originY","overlayX","overlayY","_calculateOverlayScroll","selectedIndex","scrollBuffer","maxScroll","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","Math","min","max","_triggerRect","getBoundingClientRect","getComputedStyle","fontSize","_calculateOverlayPosition","overlayRef","overlayElement","index","labelCount","optionGroups","scrollTop","_calculateOverlayOffsetX","offsetX","overlayRect","viewportSize","getViewportSize","isRtl","paddingWidth","first","group","leftOverflow","left","rightOverflow","right","width","round","updatePosition","_calculateOverlayOffsetY","optionHeightAdjustment","height","maxOptionsDisplayed","floor","optionOffsetFromPanelTop","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","_checkOverlayWithinViewport","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","items","panelHeight","scrollContainerHeight","selectedOptionOffset","exportAs","template","inputs","encapsulation","None","changeDetection","OnPush","host","animations","styles","descendants","customTrigger","MatSelectModule","imports","exports","declarations"],"sources":["D:/alodelivery test/node_modules/@angular/material/fesm2015/select.js"],"sourcesContent":["import { Overlay, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, EventEmitter, ChangeDetectorRef, NgZone, ElementRef, Optional, Inject, Self, Attribute, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, ErrorStateMatcher, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { MatFormField, MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true }))\n    ]),\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        state('showing', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            transform: 'scaleY(1)'\n        })),\n        state('showing-multiple', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            transform: 'scaleY(1)'\n        })),\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId = 0;\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n/** The max height of the select's overlay panel. */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/** The panel's padding on the x-axis. */\nconst SELECT_PANEL_PADDING_X = 16;\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/** The height of the select items in `em` units. */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nclass MatSelectBase {\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n}\nMatSelectTrigger.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-select-trigger',\n                providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }],\n            },] }\n];\n/** Base class with all of the `MatSelect` functionality. */\nclass _MatSelectBase extends _MatSelectMixinBase {\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n        var _a, _b, _c;\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this.ngControl = ngControl;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._defaultOptions = _defaultOptions;\n        /** Whether or not the overlay panel is open. */\n        this._panelOpen = false;\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /** Unique id for this input. */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /** Current `ariar-labelledby` value for the select trigger. */\n        this._triggerAriaLabelledBy = null;\n        /** Emits whenever the component is destroyed. */\n        this._destroy = new Subject();\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when select has been touched` */\n        this._onTouched = () => { };\n        /** ID for the DOM node containing the select's value. */\n        this._valueId = `mat-select-value-${nextUniqueId++}`;\n        /** Emits when the panel element is finished transforming in. */\n        this._panelDoneAnimatingStream = new Subject();\n        this._overlayPanelClass = ((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.overlayPanelClass) || '';\n        this._focused = false;\n        /** A name for this control that can be used by `mat-form-field`. */\n        this.controlType = 'mat-select';\n        this._required = false;\n        this._multiple = false;\n        this._disableOptionCentering = (_c = (_b = this._defaultOptions) === null || _b === void 0 ? void 0 : _b.disableOptionCentering) !== null && _c !== void 0 ? _c : false;\n        /** Aria label of the select. */\n        this.ariaLabel = '';\n        /** Combined stream of all of the child options' change events. */\n        this.optionSelectionChanges = defer(() => {\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            return this._ngZone.onStable\n                .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n        });\n        /** Event emitted when the select panel has been toggled. */\n        this.openedChange = new EventEmitter();\n        /** Event emitted when the select has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the select has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the selected value has been changed by the user. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\n        // stay as `undefined` so that it falls back to the default in the key manager.\n        if ((_defaultOptions === null || _defaultOptions === void 0 ? void 0 : _defaultOptions.typeaheadDebounceInterval) != null) {\n            this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() { return this._placeholder; }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() { return this._required; }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether to center the active option over the trigger. */\n    get disableOptionCentering() { return this._disableOptionCentering; }\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() { return this._compareWith; }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() { return this._value; }\n    set value(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n        }\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    get typeaheadDebounceInterval() { return this._typeaheadDebounceInterval; }\n    set typeaheadDebounceInterval(value) {\n        this._typeaheadDebounceInterval = coerceNumberProperty(value);\n    }\n    /** Unique id of the element. */\n    get id() { return this._id; }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => this._panelDoneAnimating(this.panelOpen));\n    }\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (this.ngControl) {\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (this._canOpen()) {\n            this._panelOpen = true;\n            this._keyManager.withHorizontalOrientation(null);\n            this._highlightCorrectOption();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this.value = value;\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if (!manager.isTyping() && (isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping && (keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._positioningSettled();\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        this._selectionModel.selected.forEach(option => option.setInactiveStyles());\n        this._selectionModel.clear();\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            value.forEach((currentValue) => this._selectValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            const correspondingOption = this._selectValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            // Skip options that are already in the model. This allows us to handle cases\n            // where the same primitive value is selected multiple times.\n            if (this._selectionModel.isSelected(option)) {\n                return false;\n            }\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this._typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withAllowedModifierKeys(['shiftKey']);\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected ? this._selectionModel.select(option) :\n                    this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n        var _a;\n        return !this._panelOpen && !this.disabled && ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        var _a;\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n        const labelExpression = (labelId ? labelId + ' ' : '');\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        var _a;\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n        let value = (labelId ? labelId + ' ' : '') + this._valueId;\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        return value;\n    }\n    /** Called when the overlay panel is done animating. */\n    _panelDoneAnimating(isOpen) {\n        this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty || (this._focused && !!this._placeholder);\n    }\n}\n_MatSelectBase.decorators = [\n    { type: Directive }\n];\n_MatSelectBase.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: ErrorStateMatcher },\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }] },\n    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SELECT_SCROLL_STRATEGY,] }] },\n    { type: LiveAnnouncer },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_SELECT_CONFIG,] }] }\n];\n_MatSelectBase.propDecorators = {\n    trigger: [{ type: ViewChild, args: ['trigger',] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    _overlayDir: [{ type: ViewChild, args: [CdkConnectedOverlay,] }],\n    panelClass: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    multiple: [{ type: Input }],\n    disableOptionCentering: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    errorStateMatcher: [{ type: Input }],\n    typeaheadDebounceInterval: [{ type: Input }],\n    sortComparator: [{ type: Input }],\n    id: [{ type: Input }],\n    openedChange: [{ type: Output }],\n    _openedStream: [{ type: Output, args: ['opened',] }],\n    _closedStream: [{ type: Output, args: ['closed',] }],\n    selectionChange: [{ type: Output }],\n    valueChange: [{ type: Output }]\n};\nclass MatSelect extends _MatSelectBase {\n    constructor() {\n        super(...arguments);\n        /** The scroll position of the overlay panel, calculated to center the selected option. */\n        this._scrollTop = 0;\n        /** The cached font-size of the trigger element. */\n        this._triggerFontSize = 0;\n        /** The value of the select panel's transform-origin property. */\n        this._transformOrigin = 'top';\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        this._offsetY = 0;\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        const halfOptionHeight = itemHeight / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this._viewportRuler.change().pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this.panelOpen) {\n                this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    open() {\n        if (super._canOpen()) {\n            super.open();\n            this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n            // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n            // `parseInt` ignores the trailing 'px' and converts this to a number.\n            this._triggerFontSize =\n                parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n            this._calculateOverlayPosition();\n            // Set the font size on the panel element once it exists.\n            this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n                if (this._triggerFontSize && this._overlayDir.overlayRef &&\n                    this._overlayDir.overlayRef.overlayElement) {\n                    this._overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n                }\n            });\n        }\n    }\n    /** Scrolls the active option into view. */\n    _scrollOptionIntoView(index) {\n        const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n        const itemHeight = this._getItemHeight();\n        this.panel.nativeElement.scrollTop = _getOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n    }\n    _positioningSettled() {\n        this._calculateOverlayOffsetX();\n        this.panel.nativeElement.scrollTop = this._scrollTop;\n    }\n    _panelDoneAnimating(isOpen) {\n        if (this.panelOpen) {\n            this._scrollTop = 0;\n        }\n        else {\n            this._overlayDir.offsetX = 0;\n            this._changeDetectorRef.markForCheck();\n        }\n        super._panelDoneAnimating(isOpen);\n    }\n    _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    _calculateOverlayOffsetX() {\n        const overlayRect = this._overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this._isRtl();\n        const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n            SELECT_PANEL_PADDING_X * 2;\n        let offsetX;\n        // Adjust the offset, depending on the option padding.\n        if (this.multiple) {\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        }\n        else if (this.disableOptionCentering) {\n            offsetX = SELECT_PANEL_PADDING_X;\n        }\n        else {\n            let selected = this._selectionModel.selected[0] || this.options.first;\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        }\n        // Invert the offset in LTR.\n        if (!isRtl) {\n            offsetX *= -1;\n        }\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this._overlayDir.offsetX = Math.round(offsetX);\n        this._overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        let optionOffsetFromPanelTop;\n        // Disable offset if requested by user by returning 0 as value to offset\n        if (this.disableOptionCentering) {\n            return 0;\n        }\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        }\n        else if (this._scrollTop === maxScroll) {\n            const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n            const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // The first item is partially out of the viewport. Therefore we need to calculate what\n            // portion of it is shown in the viewport and account for it in our offset.\n            let partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    _checkOverlayWithinViewport(maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        const panelHeightTop = Math.abs(this._offsetY);\n        const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n            return;\n        }\n    }\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    _calculateOverlayPosition() {\n        const itemHeight = this._getItemHeight();\n        const items = this._getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset;\n        if (this.empty) {\n            selectedOptionOffset = 0;\n        }\n        else {\n            selectedOptionOffset =\n                Math.max(this.options.toArray().indexOf(this._selectionModel.selected[0]), 0);\n        }\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n    /** Sets the transform origin point based on the selected option. */\n    _getOriginBasedOnOption() {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return `50% ${originY}px 0px`;\n    }\n    /** Calculates the height of the select's options. */\n    _getItemHeight() {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    _getItemCount() {\n        return this.options.length + this.optionGroups.length;\n    }\n}\nMatSelect.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-select',\n                exportAs: 'matSelect',\n                template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width!\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\n                inputs: ['disabled', 'disableRipple', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'role': 'combobox',\n                    'aria-autocomplete': 'none',\n                    // TODO(crisbeto): the value for aria-haspopup should be `listbox`, but currently it's difficult\n                    // to sync into Google, because of an outdated automated a11y check which flags it as an invalid\n                    // value. At some point we should try to switch it back to being `listbox`.\n                    'aria-haspopup': 'true',\n                    'class': 'mat-select',\n                    '[attr.id]': 'id',\n                    '[attr.tabindex]': 'tabIndex',\n                    '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                    '[attr.aria-expanded]': 'panelOpen',\n                    '[attr.aria-label]': 'ariaLabel || null',\n                    '[attr.aria-required]': 'required.toString()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                    '[class.mat-select-disabled]': 'disabled',\n                    '[class.mat-select-invalid]': 'errorState',\n                    '[class.mat-select-required]': 'required',\n                    '[class.mat-select-empty]': 'empty',\n                    '[class.mat-select-multiple]': 'multiple',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': '_onFocus()',\n                    '(blur)': '_onBlur()',\n                },\n                animations: [\n                    matSelectAnimations.transformPanelWrap,\n                    matSelectAnimations.transformPanel\n                ],\n                providers: [\n                    { provide: MatFormFieldControl, useExisting: MatSelect },\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n                ],\n                styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px}\\n\"]\n            },] }\n];\nMatSelect.propDecorators = {\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n    optionGroups: [{ type: ContentChildren, args: [MAT_OPTGROUP, { descendants: true },] }],\n    customTrigger: [{ type: ContentChild, args: [MAT_SELECT_TRIGGER,] }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSelectModule {\n}\nMatSelectModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule,\n                    OverlayModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    MatFormFieldModule,\n                    MatSelect,\n                    MatSelectTrigger,\n                    MatOptionModule,\n                    MatCommonModule\n                ],\n                declarations: [MatSelect, MatSelectTrigger],\n                providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, _MatSelectBase, matSelectAnimations };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}