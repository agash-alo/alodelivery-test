{"ast":null,"code":"import { ObserversModule } from '@angular/cdk/observers';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, Attribute, ElementRef, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, Inject, Optional, NgZone, ViewChild, ContentChild, ContentChildren, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject, merge, fromEvent } from 'rxjs';\nimport { startWith, takeUntil, take } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { Platform } from '@angular/cdk/platform';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId$2 = 0;\n/**\n * Injection token that can be used to reference instances of `MatError`. It serves as\n * alternative token to the actual `MatError` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_ERROR = new InjectionToken('MatError');\n/** Single error message to be shown underneath the form field. */\nclass MatError {\n  constructor(ariaLive, elementRef) {\n    this.id = `mat-error-${nextUniqueId$2++}`;\n    // If no aria-live value is set add 'polite' as a default. This is preferred over setting\n    // role='alert' so that screen readers do not interrupt the current task to read this aloud.\n    if (!ariaLive) {\n      elementRef.nativeElement.setAttribute('aria-live', 'polite');\n    }\n  }\n}\nMatError.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-error',\n    host: {\n      'class': 'mat-error',\n      '[attr.id]': 'id',\n      'aria-atomic': 'true'\n    },\n    providers: [{\n      provide: MAT_ERROR,\n      useExisting: MatError\n    }]\n  }]\n}];\nMatError.ctorParameters = () => [{\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['aria-live']\n  }]\n}, {\n  type: ElementRef\n}];\nMatError.propDecorators = {\n  id: [{\n    type: Input\n  }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nconst matFormFieldAnimations = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n  // TODO(mmalerba): Use angular animations for label animation as well.\n  state('enter', style({\n    opacity: 1,\n    transform: 'translateY(0%)'\n  })), transition('void => enter', [style({\n    opacity: 0,\n    transform: 'translateY(-5px)'\n  }), animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')])])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** An interface which allows a control to work inside of a `MatFormField`. */\nclass MatFormFieldControl {}\nMatFormFieldControl.decorators = [{\n  type: Directive\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction getMatFormFieldPlaceholderConflictError() {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n/** @docs-private */\nfunction getMatFormFieldDuplicatedHintError(align) {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n/** @docs-private */\nfunction getMatFormFieldMissingControlError() {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId$1 = 0;\n/**\n * Injection token that can be used to reference instances of `MatHint`. It serves as\n * alternative token to the actual `MatHint` class which could cause unnecessary\n * retention of the class and its directive metadata.\n *\n * *Note*: This is not part of the public API as the MDC-based form-field will not\n * need a lightweight token for `MatHint` and we want to reduce breaking changes.\n */\nconst _MAT_HINT = new InjectionToken('MatHint');\n/** Hint text to be shown underneath the form field control. */\nclass MatHint {\n  constructor() {\n    /** Whether to align the hint label at the start or end of the line. */\n    this.align = 'start';\n    /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n    this.id = `mat-hint-${nextUniqueId$1++}`;\n  }\n}\nMatHint.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-hint',\n    host: {\n      'class': 'mat-hint',\n      '[class.mat-form-field-hint-end]': 'align === \"end\"',\n      '[attr.id]': 'id',\n      // Remove align attribute to prevent it from interfering with layout.\n      '[attr.align]': 'null'\n    },\n    providers: [{\n      provide: _MAT_HINT,\n      useExisting: MatHint\n    }]\n  }]\n}];\nMatHint.propDecorators = {\n  align: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The floating label for a `mat-form-field`. */\nclass MatLabel {}\nMatLabel.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-label'\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\nclass MatPlaceholder {}\nMatPlaceholder.decorators = [{\n  type: Directive,\n  args: [{\n    selector: 'mat-placeholder'\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `MatPrefix`. It serves as\n * alternative token to the actual `MatPrefix` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_PREFIX = new InjectionToken('MatPrefix');\n/** Prefix to be placed in front of the form field. */\nclass MatPrefix {}\nMatPrefix.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matPrefix]',\n    providers: [{\n      provide: MAT_PREFIX,\n      useExisting: MatPrefix\n    }]\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `MatSuffix`. It serves as\n * alternative token to the actual `MatSuffix` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SUFFIX = new InjectionToken('MatSuffix');\n/** Suffix to be placed at the end of the form field. */\nclass MatSuffix {}\nMatSuffix.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[matSuffix]',\n    providers: [{\n      provide: MAT_SUFFIX,\n      useExisting: MatSuffix\n    }]\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nclass MatFormFieldBase {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n}\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nconst _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nconst MAT_FORM_FIELD_DEFAULT_OPTIONS = new InjectionToken('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n/**\n * Injection token that can be used to inject an instances of `MatFormField`. It serves\n * as alternative token to the actual `MatFormField` class which would cause unnecessary\n * retention of the `MatFormField` class and its component metadata.\n */\nconst MAT_FORM_FIELD = new InjectionToken('MatFormField');\n/** Container for form controls that applies Material Design styling and behavior. */\nclass MatFormField extends _MatFormFieldMixinBase {\n  constructor(_elementRef, _changeDetectorRef,\n  /**\n   * @deprecated `_labelOptions` parameter no longer being used. To be removed.\n   * @breaking-change 12.0.0\n   */\n  // Use `ElementRef` here so Angular has something to inject.\n  _labelOptions, _dir, _defaults, _platform, _ngZone, _animationMode) {\n    super(_elementRef);\n    this._elementRef = _elementRef;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dir = _dir;\n    this._defaults = _defaults;\n    this._platform = _platform;\n    this._ngZone = _ngZone;\n    /**\n     * Whether the outline gap needs to be calculated\n     * immediately on the next change detection run.\n     */\n    this._outlineGapCalculationNeededImmediately = false;\n    /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n    this._outlineGapCalculationNeededOnStable = false;\n    this._destroyed = new Subject();\n    /** Override for the logic that disables the label animation in certain cases. */\n    this._showAlwaysAnimate = false;\n    /** State of the mat-hint and mat-error animations. */\n    this._subscriptAnimationState = '';\n    this._hintLabel = '';\n    // Unique id for the hint label.\n    this._hintLabelId = `mat-hint-${nextUniqueId++}`;\n    // Unique id for the label element.\n    this._labelId = `mat-form-field-label-${nextUniqueId++}`;\n    this.floatLabel = this._getDefaultFloatLabelState();\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = _defaults && _defaults.appearance ? _defaults.appearance : 'legacy';\n    this._hideRequiredMarker = _defaults && _defaults.hideRequiredMarker != null ? _defaults.hideRequiredMarker : false;\n  }\n  /** The form-field appearance style. */\n  get appearance() {\n    return this._appearance;\n  }\n  set appearance(value) {\n    const oldValue = this._appearance;\n    this._appearance = value || this._defaults && this._defaults.appearance || 'legacy';\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._outlineGapCalculationNeededOnStable = true;\n    }\n  }\n  /** Whether the required marker should be hidden. */\n  get hideRequiredMarker() {\n    return this._hideRequiredMarker;\n  }\n  set hideRequiredMarker(value) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  /** Whether the floating label should always float or not. */\n  _shouldAlwaysFloat() {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n  /** Whether the label can float or not. */\n  _canLabelFloat() {\n    return this.floatLabel !== 'never';\n  }\n  /** Text for the form field hint. */\n  get hintLabel() {\n    return this._hintLabel;\n  }\n  set hintLabel(value) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  get floatLabel() {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._getDefaultFloatLabelState();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  get _control() {\n    // TODO(crisbeto): we need this workaround in order to support both Ivy and ViewEngine.\n    //  We should clean this up once Ivy is the default renderer.\n    return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;\n  }\n  set _control(value) {\n    this._explicitFormFieldControl = value;\n  }\n  /**\n   * Gets the id of the label element. If no label is present, returns `null`.\n   */\n  getLabelId() {\n    return this._hasFloatingLabel() ? this._labelId : null;\n  }\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin() {\n    return this._connectionContainerRef || this._elementRef;\n  }\n  ngAfterContentInit() {\n    this._validateControlChild();\n    const control = this._control;\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith(null)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges.pipe(takeUntil(this._destroyed)).subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n    // Note that we have to run outside of the `NgZone` explicitly,\n    // in order to avoid throwing users into an infinite loop\n    // if `zone-patch-rxjs` is included.\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (this._outlineGapCalculationNeededOnStable) {\n          this.updateOutlineGap();\n        }\n      });\n    });\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._outlineGapCalculationNeededOnStable = true;\n      this._changeDetectorRef.markForCheck();\n    });\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (typeof requestAnimationFrame === 'function') {\n          this._ngZone.runOutsideAngular(() => {\n            requestAnimationFrame(() => this.updateOutlineGap());\n          });\n        } else {\n          this.updateOutlineGap();\n        }\n      });\n    }\n  }\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop) {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n  _hasLabel() {\n    return !!(this._labelChildNonStatic || this._labelChildStatic);\n  }\n  _shouldLabelFloat() {\n    return this._canLabelFloat() && (this._control && this._control.shouldLabelFloat || this._shouldAlwaysFloat());\n  }\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() || this._hasLabel() && !this._shouldLabelFloat();\n  }\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages() {\n    return this._errorChildren && this._errorChildren.length > 0 && this._control.errorState ? 'error' : 'hint';\n  }\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel() {\n    if (this._hasFloatingLabel() && this._canLabelFloat()) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled && this._label) {\n        this._showAlwaysAnimate = true;\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n  /** Does any extra processing that is required when handling the hints. */\n  _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  _validateHints() {\n    if (this._hintChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      let startHint;\n      let endHint;\n      this._hintChildren.forEach(hint => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n  /** Gets the default float label state. */\n  _getDefaultFloatLabelState() {\n    return this._defaults && this._defaults.floatLabel || 'auto';\n  }\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  _syncDescribedByIds() {\n    if (this._control) {\n      let ids = [];\n      // TODO(wagnermaciel): Remove the type check when we find the root cause of this bug.\n      if (this._control.userAriaDescribedBy && typeof this._control.userAriaDescribedBy === 'string') {\n        ids.push(...this._control.userAriaDescribedBy.split(' '));\n      }\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ? this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ? this._hintChildren.find(hint => hint.align === 'end') : null;\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids.push(...this._errorChildren.map(error => error.id));\n      }\n      this._control.setDescribedByIds(ids);\n    }\n  }\n  /** Throws an error if the form field's control is missing. */\n  _validateControlChild() {\n    if (!this._control && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length || !labelEl.textContent.trim()) {\n      return;\n    }\n    if (!this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!this._isAttachedToDOM()) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n    let startWidth = 0;\n    let gapWidth = 0;\n    const container = this._connectionContainerRef.nativeElement;\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n      const containerStart = this._getStartEnd(containerRect);\n      const labelChildren = labelEl.children;\n      const labelStart = this._getStartEnd(labelChildren[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (let i = 0; i < labelChildren.length; i++) {\n        labelWidth += labelChildren[i].offsetWidth;\n      }\n      startWidth = Math.abs(labelStart - containerStart) - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n    for (let i = 0; i < startEls.length; i++) {\n      startEls[i].style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls[i].style.width = `${gapWidth}px`;\n    }\n    this._outlineGapCalculationNeededOnStable = this._outlineGapCalculationNeededImmediately = false;\n  }\n  /** Gets the start end of the rect considering the current directionality. */\n  _getStartEnd(rect) {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n  /** Checks whether the form field is attached to the DOM. */\n  _isAttachedToDOM() {\n    const element = this._elementRef.nativeElement;\n    if (element.getRootNode) {\n      const rootNode = element.getRootNode();\n      // If the element is inside the DOM the root node will be either the document\n      // or the closest shadow root, otherwise it'll be the element itself.\n      return rootNode && rootNode !== element;\n    }\n    // Otherwise fall back to checking if it's in the document. This doesn't account for\n    // shadow DOM, however browser that support shadow DOM should support `getRootNode` as well.\n    return document.documentElement.contains(element);\n  }\n}\nMatFormField.decorators = [{\n  type: Component,\n  args: [{\n    selector: 'mat-form-field',\n    exportAs: 'matFormField',\n    template: \"<div class=\\\"mat-form-field-wrapper\\\">\\n  <div class=\\\"mat-form-field-flex\\\" #connectionContainer\\n       (click)=\\\"_control.onContainerClick && _control.onContainerClick($event)\\\">\\n\\n    <!-- Outline used for outline appearance. -->\\n    <ng-container *ngIf=\\\"appearance == 'outline'\\\">\\n      <div class=\\\"mat-form-field-outline\\\">\\n        <div class=\\\"mat-form-field-outline-start\\\"></div>\\n        <div class=\\\"mat-form-field-outline-gap\\\"></div>\\n        <div class=\\\"mat-form-field-outline-end\\\"></div>\\n      </div>\\n      <div class=\\\"mat-form-field-outline mat-form-field-outline-thick\\\">\\n        <div class=\\\"mat-form-field-outline-start\\\"></div>\\n        <div class=\\\"mat-form-field-outline-gap\\\"></div>\\n        <div class=\\\"mat-form-field-outline-end\\\"></div>\\n      </div>\\n    </ng-container>\\n\\n    <div class=\\\"mat-form-field-prefix\\\" *ngIf=\\\"_prefixChildren.length\\\">\\n      <ng-content select=\\\"[matPrefix]\\\"></ng-content>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-infix\\\" #inputContainer>\\n      <ng-content></ng-content>\\n\\n      <span class=\\\"mat-form-field-label-wrapper\\\">\\n        <!-- We add aria-owns as a workaround for an issue in JAWS & NVDA where the label isn't\\n             read if it comes before the control in the DOM. -->\\n        <label class=\\\"mat-form-field-label\\\"\\n               (cdkObserveContent)=\\\"updateOutlineGap()\\\"\\n               [cdkObserveContentDisabled]=\\\"appearance != 'outline'\\\"\\n               [id]=\\\"_labelId\\\"\\n               [attr.for]=\\\"_control.id\\\"\\n               [attr.aria-owns]=\\\"_control.id\\\"\\n               [class.mat-empty]=\\\"_control.empty && !_shouldAlwaysFloat()\\\"\\n               [class.mat-form-field-empty]=\\\"_control.empty && !_shouldAlwaysFloat()\\\"\\n               [class.mat-accent]=\\\"color == 'accent'\\\"\\n               [class.mat-warn]=\\\"color == 'warn'\\\"\\n               #label\\n               *ngIf=\\\"_hasFloatingLabel()\\\"\\n               [ngSwitch]=\\\"_hasLabel()\\\">\\n\\n          <!-- @breaking-change 8.0.0 remove in favor of mat-label element an placeholder attr. -->\\n          <ng-container *ngSwitchCase=\\\"false\\\">\\n            <ng-content select=\\\"mat-placeholder\\\"></ng-content>\\n            <span>{{_control.placeholder}}</span>\\n          </ng-container>\\n\\n          <ng-content select=\\\"mat-label\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n\\n          <!-- @breaking-change 8.0.0 remove `mat-placeholder-required` class -->\\n          <span\\n            class=\\\"mat-placeholder-required mat-form-field-required-marker\\\"\\n            aria-hidden=\\\"true\\\"\\n            *ngIf=\\\"!hideRequiredMarker && _control.required && !_control.disabled\\\">&#32;*</span>\\n        </label>\\n      </span>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-suffix\\\" *ngIf=\\\"_suffixChildren.length\\\">\\n      <ng-content select=\\\"[matSuffix]\\\"></ng-content>\\n    </div>\\n  </div>\\n\\n  <!-- Underline used for legacy, standard, and box appearances. -->\\n  <div class=\\\"mat-form-field-underline\\\" #underline\\n       *ngIf=\\\"appearance != 'outline'\\\">\\n    <span class=\\\"mat-form-field-ripple\\\"\\n          [class.mat-accent]=\\\"color == 'accent'\\\"\\n          [class.mat-warn]=\\\"color == 'warn'\\\"></span>\\n  </div>\\n\\n  <div class=\\\"mat-form-field-subscript-wrapper\\\"\\n       [ngSwitch]=\\\"_getDisplayedMessages()\\\">\\n    <div *ngSwitchCase=\\\"'error'\\\" [@transitionMessages]=\\\"_subscriptAnimationState\\\">\\n      <ng-content select=\\\"mat-error\\\"></ng-content>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-hint-wrapper\\\" *ngSwitchCase=\\\"'hint'\\\"\\n      [@transitionMessages]=\\\"_subscriptAnimationState\\\">\\n      <!-- TODO(mmalerba): use an actual <mat-hint> once all selectors are switched to mat-* -->\\n      <div *ngIf=\\\"hintLabel\\\" [id]=\\\"_hintLabelId\\\" class=\\\"mat-hint\\\">{{hintLabel}}</div>\\n      <ng-content select=\\\"mat-hint:not([align='end'])\\\"></ng-content>\\n      <div class=\\\"mat-form-field-hint-spacer\\\"></div>\\n      <ng-content select=\\\"mat-hint[align='end']\\\"></ng-content>\\n    </div>\\n  </div>\\n</div>\\n\",\n    animations: [matFormFieldAnimations.transitionMessages],\n    host: {\n      'class': 'mat-form-field',\n      '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n      '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n      '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n      '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n      '[class.mat-form-field-invalid]': '_control.errorState',\n      '[class.mat-form-field-can-float]': '_canLabelFloat()',\n      '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n      '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n      '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n      '[class.mat-form-field-disabled]': '_control.disabled',\n      '[class.mat-form-field-autofilled]': '_control.autofilled',\n      '[class.mat-focused]': '_control.focused',\n      '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n      '[class.ng-touched]': '_shouldForward(\"touched\")',\n      '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n      '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n      '[class.ng-valid]': '_shouldForward(\"valid\")',\n      '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n      '[class.ng-pending]': '_shouldForward(\"pending\")',\n      '[class._mat-animation-noopable]': '!_animationsEnabled'\n    },\n    inputs: ['color'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{\n      provide: MAT_FORM_FIELD,\n      useExisting: MatFormField\n    }],\n    styles: [\".mat-form-field{display:inline-block;position:relative;text-align:left}[dir=rtl] .mat-form-field{text-align:right}.mat-form-field-wrapper{position:relative}.mat-form-field-flex{display:inline-flex;align-items:baseline;box-sizing:border-box;width:100%}.mat-form-field-prefix,.mat-form-field-suffix{white-space:nowrap;flex:none;position:relative}.mat-form-field-infix{display:block;position:relative;flex:auto;min-width:0;width:180px}.cdk-high-contrast-active .mat-form-field-infix{border-image:linear-gradient(transparent, transparent)}.mat-form-field-label-wrapper{position:absolute;left:0;box-sizing:content-box;width:100%;height:100%;overflow:hidden;pointer-events:none}[dir=rtl] .mat-form-field-label-wrapper{left:auto;right:0}.mat-form-field-label{position:absolute;left:0;font:inherit;pointer-events:none;width:100%;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),width 400ms cubic-bezier(0.25, 0.8, 0.25, 1);display:none}[dir=rtl] .mat-form-field-label{transform-origin:100% 0;left:auto;right:0}.mat-form-field-empty.mat-form-field-label,.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label{display:block}.mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:block;transition:none}.mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-form-field-can-float .mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:block}.mat-form-field-label:not(.mat-form-field-empty){transition:none}.mat-form-field-underline{position:absolute;width:100%;pointer-events:none;transform:scale3d(1, 1.0001, 1)}.mat-form-field-ripple{position:absolute;left:0;width:100%;transform-origin:50%;transform:scaleX(0.5);opacity:0;transition:background-color 300ms cubic-bezier(0.55, 0, 0.55, 0.2)}.mat-form-field.mat-focused .mat-form-field-ripple,.mat-form-field.mat-form-field-invalid .mat-form-field-ripple{opacity:1;transform:none;transition:transform 300ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 100ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 300ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-subscript-wrapper{position:absolute;box-sizing:border-box;width:100%;overflow:hidden}.mat-form-field-subscript-wrapper .mat-icon,.mat-form-field-label-wrapper .mat-icon{width:1em;height:1em;font-size:inherit;vertical-align:baseline}.mat-form-field-hint-wrapper{display:flex}.mat-form-field-hint-spacer{flex:1 0 1em}.mat-error{display:block}.mat-form-field-control-wrapper{position:relative}.mat-form-field-hint-end{order:1}.mat-form-field._mat-animation-noopable .mat-form-field-label,.mat-form-field._mat-animation-noopable .mat-form-field-ripple{transition:none}\\n\", \".mat-form-field-appearance-fill .mat-form-field-flex{border-radius:4px 4px 0 0;padding:.75em .75em 0 .75em}.cdk-high-contrast-active .mat-form-field-appearance-fill .mat-form-field-flex{outline:solid 1px}.mat-form-field-appearance-fill .mat-form-field-underline::before{content:\\\"\\\";display:block;position:absolute;bottom:0;height:1px;width:100%}.mat-form-field-appearance-fill .mat-form-field-ripple{bottom:0;height:2px}.cdk-high-contrast-active .mat-form-field-appearance-fill .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-fill:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-fill._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}.mat-form-field-appearance-fill .mat-form-field-subscript-wrapper{padding:0 1em}\\n\", \".mat-input-element{font:inherit;background:transparent;color:currentColor;border:none;outline:none;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit;box-sizing:content-box}.mat-input-element:-moz-ui-invalid{box-shadow:none}.mat-input-element::-ms-clear,.mat-input-element::-ms-reveal{display:none}.mat-input-element,.mat-input-element::-webkit-search-cancel-button,.mat-input-element::-webkit-search-decoration,.mat-input-element::-webkit-search-results-button,.mat-input-element::-webkit-search-results-decoration{-webkit-appearance:none}.mat-input-element::-webkit-contacts-auto-fill-button,.mat-input-element::-webkit-caps-lock-indicator,.mat-input-element::-webkit-credentials-auto-fill-button{visibility:hidden}.mat-input-element[type=date],.mat-input-element[type=datetime],.mat-input-element[type=datetime-local],.mat-input-element[type=month],.mat-input-element[type=week],.mat-input-element[type=time]{line-height:1}.mat-input-element[type=date]::after,.mat-input-element[type=datetime]::after,.mat-input-element[type=datetime-local]::after,.mat-input-element[type=month]::after,.mat-input-element[type=week]::after,.mat-input-element[type=time]::after{content:\\\" \\\";white-space:pre;width:1px}.mat-input-element::-webkit-inner-spin-button,.mat-input-element::-webkit-calendar-picker-indicator,.mat-input-element::-webkit-clear-button{font-size:.75em}.mat-input-element::placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element::-moz-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::-moz-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element::-webkit-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::-webkit-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element:-ms-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element:-ms-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-form-field-hide-placeholder .mat-input-element::placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-moz-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-webkit-input-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element:-ms-input-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}textarea.mat-input-element{resize:vertical;overflow:auto}textarea.mat-input-element.cdk-textarea-autosize{resize:none}textarea.mat-input-element{padding:2px 0;margin:-2px 0}select.mat-input-element{-moz-appearance:none;-webkit-appearance:none;position:relative;background-color:transparent;display:inline-flex;box-sizing:border-box;padding-top:1em;top:-1em;margin-bottom:-1em}select.mat-input-element::-ms-expand{display:none}select.mat-input-element::-moz-focus-inner{border:0}select.mat-input-element:not(:disabled){cursor:pointer}select.mat-input-element::-ms-value{color:inherit;background:none}.mat-focused .cdk-high-contrast-active select.mat-input-element::-ms-value{color:inherit}.mat-form-field-type-mat-native-select .mat-form-field-infix::after{content:\\\"\\\";width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;position:absolute;top:50%;right:0;margin-top:-2.5px;pointer-events:none}[dir=rtl] .mat-form-field-type-mat-native-select .mat-form-field-infix::after{right:auto;left:0}.mat-form-field-type-mat-native-select .mat-input-element{padding-right:15px}[dir=rtl] .mat-form-field-type-mat-native-select .mat-input-element{padding-right:0;padding-left:15px}.mat-form-field-type-mat-native-select .mat-form-field-label-wrapper{max-width:calc(100% - 10px)}.mat-form-field-type-mat-native-select.mat-form-field-appearance-outline .mat-form-field-infix::after{margin-top:-5px}.mat-form-field-type-mat-native-select.mat-form-field-appearance-fill .mat-form-field-infix::after{margin-top:-10px}\\n\", \".mat-form-field-appearance-legacy .mat-form-field-label{transform:perspective(100px);-ms-transform:none}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon{width:1em}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button{font:inherit;vertical-align:baseline}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button .mat-icon{font-size:inherit}.mat-form-field-appearance-legacy .mat-form-field-underline{height:1px}.cdk-high-contrast-active .mat-form-field-appearance-legacy .mat-form-field-underline{height:0;border-top:solid 1px}.mat-form-field-appearance-legacy .mat-form-field-ripple{top:0;height:2px;overflow:hidden}.cdk-high-contrast-active .mat-form-field-appearance-legacy .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}.cdk-high-contrast-active .mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}.mat-form-field-appearance-legacy.mat-form-field-invalid:not(.mat-focused) .mat-form-field-ripple{height:1px}\\n\", \".mat-form-field-appearance-outline .mat-form-field-wrapper{margin:.25em 0}.mat-form-field-appearance-outline .mat-form-field-flex{padding:0 .75em 0 .75em;margin-top:-0.25em;position:relative}.mat-form-field-appearance-outline .mat-form-field-prefix,.mat-form-field-appearance-outline .mat-form-field-suffix{top:.25em}.mat-form-field-appearance-outline .mat-form-field-outline{display:flex;position:absolute;top:.25em;left:0;right:0;bottom:0;pointer-events:none}.mat-form-field-appearance-outline .mat-form-field-outline-start,.mat-form-field-appearance-outline .mat-form-field-outline-end{border:1px solid currentColor;min-width:5px}.mat-form-field-appearance-outline .mat-form-field-outline-start{border-radius:5px 0 0 5px;border-right-style:none}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-start{border-right-style:solid;border-left-style:none;border-radius:0 5px 5px 0}.mat-form-field-appearance-outline .mat-form-field-outline-end{border-radius:0 5px 5px 0;border-left-style:none;flex-grow:1}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-end{border-left-style:solid;border-right-style:none;border-radius:5px 0 0 5px}.mat-form-field-appearance-outline .mat-form-field-outline-gap{border-radius:.000001px;border:1px solid currentColor;border-left-style:none;border-right-style:none}.mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-outline-gap{border-top-color:transparent}.mat-form-field-appearance-outline .mat-form-field-outline-thick{opacity:0}.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-start,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-end,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-gap{border-width:2px}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline{opacity:0;transition:opacity 100ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline{opacity:0;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline .mat-form-field-subscript-wrapper{padding:0 1em}.mat-form-field-appearance-outline._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-start,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-end,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-gap{transition:none}\\n\", \".mat-form-field-appearance-standard .mat-form-field-flex{padding-top:.75em}.mat-form-field-appearance-standard .mat-form-field-underline{height:1px}.cdk-high-contrast-active .mat-form-field-appearance-standard .mat-form-field-underline{height:0;border-top:solid 1px}.mat-form-field-appearance-standard .mat-form-field-ripple{bottom:0;height:2px}.cdk-high-contrast-active .mat-form-field-appearance-standard .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}.cdk-high-contrast-active .mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}.mat-form-field-appearance-standard:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-standard._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}\\n\"]\n  }]\n}];\nMatFormField.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [ElementRef]\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [MAT_FORM_FIELD_DEFAULT_OPTIONS]\n  }]\n}, {\n  type: Platform\n}, {\n  type: NgZone\n}, {\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ANIMATION_MODULE_TYPE]\n  }]\n}];\nMatFormField.propDecorators = {\n  appearance: [{\n    type: Input\n  }],\n  hideRequiredMarker: [{\n    type: Input\n  }],\n  hintLabel: [{\n    type: Input\n  }],\n  floatLabel: [{\n    type: Input\n  }],\n  underlineRef: [{\n    type: ViewChild,\n    args: ['underline']\n  }],\n  _connectionContainerRef: [{\n    type: ViewChild,\n    args: ['connectionContainer', {\n      static: true\n    }]\n  }],\n  _inputContainerRef: [{\n    type: ViewChild,\n    args: ['inputContainer']\n  }],\n  _label: [{\n    type: ViewChild,\n    args: ['label']\n  }],\n  _controlNonStatic: [{\n    type: ContentChild,\n    args: [MatFormFieldControl]\n  }],\n  _controlStatic: [{\n    type: ContentChild,\n    args: [MatFormFieldControl, {\n      static: true\n    }]\n  }],\n  _labelChildNonStatic: [{\n    type: ContentChild,\n    args: [MatLabel]\n  }],\n  _labelChildStatic: [{\n    type: ContentChild,\n    args: [MatLabel, {\n      static: true\n    }]\n  }],\n  _placeholderChild: [{\n    type: ContentChild,\n    args: [MatPlaceholder]\n  }],\n  _errorChildren: [{\n    type: ContentChildren,\n    args: [MAT_ERROR, {\n      descendants: true\n    }]\n  }],\n  _hintChildren: [{\n    type: ContentChildren,\n    args: [_MAT_HINT, {\n      descendants: true\n    }]\n  }],\n  _prefixChildren: [{\n    type: ContentChildren,\n    args: [MAT_PREFIX, {\n      descendants: true\n    }]\n  }],\n  _suffixChildren: [{\n    type: ContentChildren,\n    args: [MAT_SUFFIX, {\n      descendants: true\n    }]\n  }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatFormFieldModule {}\nMatFormFieldModule.decorators = [{\n  type: NgModule,\n  args: [{\n    declarations: [MatError, MatFormField, MatHint, MatLabel, MatPlaceholder, MatPrefix, MatSuffix],\n    imports: [CommonModule, MatCommonModule, ObserversModule],\n    exports: [MatCommonModule, MatError, MatFormField, MatHint, MatLabel, MatPlaceholder, MatPrefix, MatSuffix]\n  }]\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_ERROR, MAT_FORM_FIELD, MAT_FORM_FIELD_DEFAULT_OPTIONS, MAT_PREFIX, MAT_SUFFIX, MatError, MatFormField, MatFormFieldControl, MatFormFieldModule, MatHint, MatLabel, MatPlaceholder, MatPrefix, MatSuffix, _MAT_HINT, getMatFormFieldDuplicatedHintError, getMatFormFieldMissingControlError, getMatFormFieldPlaceholderConflictError, matFormFieldAnimations };","map":{"version":3,"names":["ObserversModule","CommonModule","InjectionToken","Directive","Attribute","ElementRef","Input","Component","ViewEncapsulation","ChangeDetectionStrategy","ChangeDetectorRef","Inject","Optional","NgZone","ViewChild","ContentChild","ContentChildren","NgModule","mixinColor","MatCommonModule","Directionality","coerceBooleanProperty","Subject","merge","fromEvent","startWith","takeUntil","take","trigger","state","style","transition","animate","Platform","ANIMATION_MODULE_TYPE","nextUniqueId$2","MAT_ERROR","MatError","constructor","ariaLive","elementRef","id","nativeElement","setAttribute","decorators","type","args","selector","host","providers","provide","useExisting","ctorParameters","String","propDecorators","matFormFieldAnimations","transitionMessages","opacity","transform","MatFormFieldControl","getMatFormFieldPlaceholderConflictError","Error","getMatFormFieldDuplicatedHintError","align","getMatFormFieldMissingControlError","nextUniqueId$1","_MAT_HINT","MatHint","MatLabel","MatPlaceholder","MAT_PREFIX","MatPrefix","MAT_SUFFIX","MatSuffix","nextUniqueId","floatingLabelScale","outlineGapPadding","MatFormFieldBase","_elementRef","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","MAT_FORM_FIELD","MatFormField","_changeDetectorRef","_labelOptions","_dir","_defaults","_platform","_ngZone","_animationMode","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_destroyed","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelId","floatLabel","_getDefaultFloatLabelState","_animationsEnabled","appearance","_hideRequiredMarker","hideRequiredMarker","_appearance","value","oldValue","_shouldAlwaysFloat","_canLabelFloat","hintLabel","_processHints","_floatLabel","markForCheck","_control","_explicitFormFieldControl","_controlNonStatic","_controlStatic","getLabelId","_hasFloatingLabel","getConnectedOverlayOrigin","_connectionContainerRef","ngAfterContentInit","_validateControlChild","control","controlType","classList","add","stateChanges","pipe","subscribe","_validatePlaceholders","_syncDescribedByIds","ngControl","valueChanges","runOutsideAngular","onStable","updateOutlineGap","_prefixChildren","changes","_suffixChildren","_hintChildren","_errorChildren","change","requestAnimationFrame","ngAfterContentChecked","ngAfterViewInit","detectChanges","ngOnDestroy","next","complete","_shouldForward","prop","_hasPlaceholder","placeholder","_placeholderChild","_hasLabel","_labelChildNonStatic","_labelChildStatic","_shouldLabelFloat","shouldLabelFloat","_hideControlPlaceholder","_getDisplayedMessages","length","errorState","_animateAndLockLabel","_label","ngDevMode","_validateHints","startHint","endHint","forEach","hint","ids","userAriaDescribedBy","push","split","find","map","error","setDescribedByIds","labelEl","children","textContent","trim","isBrowser","_isAttachedToDOM","startWidth","gapWidth","container","startEls","querySelectorAll","gapEls","containerRect","getBoundingClientRect","width","height","containerStart","_getStartEnd","labelChildren","labelStart","labelWidth","i","offsetWidth","Math","abs","rect","right","left","element","getRootNode","rootNode","document","documentElement","contains","exportAs","template","animations","inputs","encapsulation","None","changeDetection","OnPush","styles","undefined","underlineRef","static","_inputContainerRef","descendants","MatFormFieldModule","declarations","imports","exports"],"sources":["D:/alodelivery test/node_modules/@angular/material/fesm2015/form-field.js"],"sourcesContent":["import { ObserversModule } from '@angular/cdk/observers';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, Attribute, ElementRef, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, Inject, Optional, NgZone, ViewChild, ContentChild, ContentChildren, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject, merge, fromEvent } from 'rxjs';\nimport { startWith, takeUntil, take } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { Platform } from '@angular/cdk/platform';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId$2 = 0;\n/**\n * Injection token that can be used to reference instances of `MatError`. It serves as\n * alternative token to the actual `MatError` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_ERROR = new InjectionToken('MatError');\n/** Single error message to be shown underneath the form field. */\nclass MatError {\n    constructor(ariaLive, elementRef) {\n        this.id = `mat-error-${nextUniqueId$2++}`;\n        // If no aria-live value is set add 'polite' as a default. This is preferred over setting\n        // role='alert' so that screen readers do not interrupt the current task to read this aloud.\n        if (!ariaLive) {\n            elementRef.nativeElement.setAttribute('aria-live', 'polite');\n        }\n    }\n}\nMatError.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-error',\n                host: {\n                    'class': 'mat-error',\n                    '[attr.id]': 'id',\n                    'aria-atomic': 'true',\n                },\n                providers: [{ provide: MAT_ERROR, useExisting: MatError }],\n            },] }\n];\nMatError.ctorParameters = () => [\n    { type: String, decorators: [{ type: Attribute, args: ['aria-live',] }] },\n    { type: ElementRef }\n];\nMatError.propDecorators = {\n    id: [{ type: Input }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nconst matFormFieldAnimations = {\n    /** Animation that transitions the form field's error and hint messages. */\n    transitionMessages: trigger('transitionMessages', [\n        // TODO(mmalerba): Use angular animations for label animation as well.\n        state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n        transition('void => enter', [\n            style({ opacity: 0, transform: 'translateY(-5px)' }),\n            animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n        ]),\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** An interface which allows a control to work inside of a `MatFormField`. */\nclass MatFormFieldControl {\n}\nMatFormFieldControl.decorators = [\n    { type: Directive }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction getMatFormFieldPlaceholderConflictError() {\n    return Error('Placeholder attribute and child element were both specified.');\n}\n/** @docs-private */\nfunction getMatFormFieldDuplicatedHintError(align) {\n    return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n/** @docs-private */\nfunction getMatFormFieldMissingControlError() {\n    return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId$1 = 0;\n/**\n * Injection token that can be used to reference instances of `MatHint`. It serves as\n * alternative token to the actual `MatHint` class which could cause unnecessary\n * retention of the class and its directive metadata.\n *\n * *Note*: This is not part of the public API as the MDC-based form-field will not\n * need a lightweight token for `MatHint` and we want to reduce breaking changes.\n */\nconst _MAT_HINT = new InjectionToken('MatHint');\n/** Hint text to be shown underneath the form field control. */\nclass MatHint {\n    constructor() {\n        /** Whether to align the hint label at the start or end of the line. */\n        this.align = 'start';\n        /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n        this.id = `mat-hint-${nextUniqueId$1++}`;\n    }\n}\nMatHint.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-hint',\n                host: {\n                    'class': 'mat-hint',\n                    '[class.mat-form-field-hint-end]': 'align === \"end\"',\n                    '[attr.id]': 'id',\n                    // Remove align attribute to prevent it from interfering with layout.\n                    '[attr.align]': 'null',\n                },\n                providers: [{ provide: _MAT_HINT, useExisting: MatHint }],\n            },] }\n];\nMatHint.propDecorators = {\n    align: [{ type: Input }],\n    id: [{ type: Input }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The floating label for a `mat-form-field`. */\nclass MatLabel {\n}\nMatLabel.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-label'\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\nclass MatPlaceholder {\n}\nMatPlaceholder.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-placeholder'\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `MatPrefix`. It serves as\n * alternative token to the actual `MatPrefix` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_PREFIX = new InjectionToken('MatPrefix');\n/** Prefix to be placed in front of the form field. */\nclass MatPrefix {\n}\nMatPrefix.decorators = [\n    { type: Directive, args: [{\n                selector: '[matPrefix]',\n                providers: [{ provide: MAT_PREFIX, useExisting: MatPrefix }],\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `MatSuffix`. It serves as\n * alternative token to the actual `MatSuffix` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SUFFIX = new InjectionToken('MatSuffix');\n/** Suffix to be placed at the end of the form field. */\nclass MatSuffix {\n}\nMatSuffix.decorators = [\n    { type: Directive, args: [{\n                selector: '[matSuffix]',\n                providers: [{ provide: MAT_SUFFIX, useExisting: MatSuffix }],\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nclass MatFormFieldBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nconst _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nconst MAT_FORM_FIELD_DEFAULT_OPTIONS = new InjectionToken('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n/**\n * Injection token that can be used to inject an instances of `MatFormField`. It serves\n * as alternative token to the actual `MatFormField` class which would cause unnecessary\n * retention of the `MatFormField` class and its component metadata.\n */\nconst MAT_FORM_FIELD = new InjectionToken('MatFormField');\n/** Container for form controls that applies Material Design styling and behavior. */\nclass MatFormField extends _MatFormFieldMixinBase {\n    constructor(_elementRef, _changeDetectorRef, \n    /**\n     * @deprecated `_labelOptions` parameter no longer being used. To be removed.\n     * @breaking-change 12.0.0\n     */\n    // Use `ElementRef` here so Angular has something to inject.\n    _labelOptions, _dir, _defaults, _platform, _ngZone, _animationMode) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._defaults = _defaults;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        /**\n         * Whether the outline gap needs to be calculated\n         * immediately on the next change detection run.\n         */\n        this._outlineGapCalculationNeededImmediately = false;\n        /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n        this._outlineGapCalculationNeededOnStable = false;\n        this._destroyed = new Subject();\n        /** Override for the logic that disables the label animation in certain cases. */\n        this._showAlwaysAnimate = false;\n        /** State of the mat-hint and mat-error animations. */\n        this._subscriptAnimationState = '';\n        this._hintLabel = '';\n        // Unique id for the hint label.\n        this._hintLabelId = `mat-hint-${nextUniqueId++}`;\n        // Unique id for the label element.\n        this._labelId = `mat-form-field-label-${nextUniqueId++}`;\n        this.floatLabel = this._getDefaultFloatLabelState();\n        this._animationsEnabled = _animationMode !== 'NoopAnimations';\n        // Set the default through here so we invoke the setter on the first run.\n        this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n        this._hideRequiredMarker = (_defaults && _defaults.hideRequiredMarker != null) ?\n            _defaults.hideRequiredMarker : false;\n    }\n    /** The form-field appearance style. */\n    get appearance() { return this._appearance; }\n    set appearance(value) {\n        const oldValue = this._appearance;\n        this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n        if (this._appearance === 'outline' && oldValue !== value) {\n            this._outlineGapCalculationNeededOnStable = true;\n        }\n    }\n    /** Whether the required marker should be hidden. */\n    get hideRequiredMarker() { return this._hideRequiredMarker; }\n    set hideRequiredMarker(value) {\n        this._hideRequiredMarker = coerceBooleanProperty(value);\n    }\n    /** Whether the floating label should always float or not. */\n    _shouldAlwaysFloat() {\n        return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n    }\n    /** Whether the label can float or not. */\n    _canLabelFloat() { return this.floatLabel !== 'never'; }\n    /** Text for the form field hint. */\n    get hintLabel() { return this._hintLabel; }\n    set hintLabel(value) {\n        this._hintLabel = value;\n        this._processHints();\n    }\n    /**\n     * Whether the label should always float, never float or float as the user types.\n     *\n     * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n     * way to make the floating label emulate the behavior of a standard input placeholder. However\n     * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n     * appearances the `never` option has been disabled in favor of just using the placeholder.\n     */\n    get floatLabel() {\n        return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n    }\n    set floatLabel(value) {\n        if (value !== this._floatLabel) {\n            this._floatLabel = value || this._getDefaultFloatLabelState();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    get _control() {\n        // TODO(crisbeto): we need this workaround in order to support both Ivy and ViewEngine.\n        //  We should clean this up once Ivy is the default renderer.\n        return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;\n    }\n    set _control(value) {\n        this._explicitFormFieldControl = value;\n    }\n    /**\n     * Gets the id of the label element. If no label is present, returns `null`.\n     */\n    getLabelId() {\n        return this._hasFloatingLabel() ? this._labelId : null;\n    }\n    /**\n     * Gets an ElementRef for the element that a overlay attached to the form-field should be\n     * positioned relative to.\n     */\n    getConnectedOverlayOrigin() {\n        return this._connectionContainerRef || this._elementRef;\n    }\n    ngAfterContentInit() {\n        this._validateControlChild();\n        const control = this._control;\n        if (control.controlType) {\n            this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n        }\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        control.stateChanges.pipe(startWith(null)).subscribe(() => {\n            this._validatePlaceholders();\n            this._syncDescribedByIds();\n            this._changeDetectorRef.markForCheck();\n        });\n        // Run change detection if the value changes.\n        if (control.ngControl && control.ngControl.valueChanges) {\n            control.ngControl.valueChanges\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(() => this._changeDetectorRef.markForCheck());\n        }\n        // Note that we have to run outside of the `NgZone` explicitly,\n        // in order to avoid throwing users into an infinite loop\n        // if `zone-patch-rxjs` is included.\n        this._ngZone.runOutsideAngular(() => {\n            this._ngZone.onStable.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                if (this._outlineGapCalculationNeededOnStable) {\n                    this.updateOutlineGap();\n                }\n            });\n        });\n        // Run change detection and update the outline if the suffix or prefix changes.\n        merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n            this._outlineGapCalculationNeededOnStable = true;\n            this._changeDetectorRef.markForCheck();\n        });\n        // Re-validate when the number of hints changes.\n        this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n            this._processHints();\n            this._changeDetectorRef.markForCheck();\n        });\n        // Update the aria-described by when the number of errors changes.\n        this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n            this._syncDescribedByIds();\n            this._changeDetectorRef.markForCheck();\n        });\n        if (this._dir) {\n            this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                if (typeof requestAnimationFrame === 'function') {\n                    this._ngZone.runOutsideAngular(() => {\n                        requestAnimationFrame(() => this.updateOutlineGap());\n                    });\n                }\n                else {\n                    this.updateOutlineGap();\n                }\n            });\n        }\n    }\n    ngAfterContentChecked() {\n        this._validateControlChild();\n        if (this._outlineGapCalculationNeededImmediately) {\n            this.updateOutlineGap();\n        }\n    }\n    ngAfterViewInit() {\n        // Avoid animations on load.\n        this._subscriptAnimationState = 'enter';\n        this._changeDetectorRef.detectChanges();\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    _shouldForward(prop) {\n        const ngControl = this._control ? this._control.ngControl : null;\n        return ngControl && ngControl[prop];\n    }\n    _hasPlaceholder() {\n        return !!(this._control && this._control.placeholder || this._placeholderChild);\n    }\n    _hasLabel() {\n        return !!(this._labelChildNonStatic || this._labelChildStatic);\n    }\n    _shouldLabelFloat() {\n        return this._canLabelFloat() &&\n            ((this._control && this._control.shouldLabelFloat) || this._shouldAlwaysFloat());\n    }\n    _hideControlPlaceholder() {\n        // In the legacy appearance the placeholder is promoted to a label if no label is given.\n        return this.appearance === 'legacy' && !this._hasLabel() ||\n            this._hasLabel() && !this._shouldLabelFloat();\n    }\n    _hasFloatingLabel() {\n        // In the legacy appearance the placeholder is promoted to a label if no label is given.\n        return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n    }\n    /** Determines whether to display hints or errors. */\n    _getDisplayedMessages() {\n        return (this._errorChildren && this._errorChildren.length > 0 &&\n            this._control.errorState) ? 'error' : 'hint';\n    }\n    /** Animates the placeholder up and locks it in position. */\n    _animateAndLockLabel() {\n        if (this._hasFloatingLabel() && this._canLabelFloat()) {\n            // If animations are disabled, we shouldn't go in here,\n            // because the `transitionend` will never fire.\n            if (this._animationsEnabled && this._label) {\n                this._showAlwaysAnimate = true;\n                fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n                    this._showAlwaysAnimate = false;\n                });\n            }\n            this.floatLabel = 'always';\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n     * or child element with the `mat-placeholder` directive).\n     */\n    _validatePlaceholders() {\n        if (this._control.placeholder && this._placeholderChild &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatFormFieldPlaceholderConflictError();\n        }\n    }\n    /** Does any extra processing that is required when handling the hints. */\n    _processHints() {\n        this._validateHints();\n        this._syncDescribedByIds();\n    }\n    /**\n     * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n     * attribute being considered as `align=\"start\"`.\n     */\n    _validateHints() {\n        if (this._hintChildren && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            let startHint;\n            let endHint;\n            this._hintChildren.forEach((hint) => {\n                if (hint.align === 'start') {\n                    if (startHint || this.hintLabel) {\n                        throw getMatFormFieldDuplicatedHintError('start');\n                    }\n                    startHint = hint;\n                }\n                else if (hint.align === 'end') {\n                    if (endHint) {\n                        throw getMatFormFieldDuplicatedHintError('end');\n                    }\n                    endHint = hint;\n                }\n            });\n        }\n    }\n    /** Gets the default float label state. */\n    _getDefaultFloatLabelState() {\n        return (this._defaults && this._defaults.floatLabel) || 'auto';\n    }\n    /**\n     * Sets the list of element IDs that describe the child control. This allows the control to update\n     * its `aria-describedby` attribute accordingly.\n     */\n    _syncDescribedByIds() {\n        if (this._control) {\n            let ids = [];\n            // TODO(wagnermaciel): Remove the type check when we find the root cause of this bug.\n            if (this._control.userAriaDescribedBy &&\n                typeof this._control.userAriaDescribedBy === 'string') {\n                ids.push(...this._control.userAriaDescribedBy.split(' '));\n            }\n            if (this._getDisplayedMessages() === 'hint') {\n                const startHint = this._hintChildren ?\n                    this._hintChildren.find(hint => hint.align === 'start') : null;\n                const endHint = this._hintChildren ?\n                    this._hintChildren.find(hint => hint.align === 'end') : null;\n                if (startHint) {\n                    ids.push(startHint.id);\n                }\n                else if (this._hintLabel) {\n                    ids.push(this._hintLabelId);\n                }\n                if (endHint) {\n                    ids.push(endHint.id);\n                }\n            }\n            else if (this._errorChildren) {\n                ids.push(...this._errorChildren.map(error => error.id));\n            }\n            this._control.setDescribedByIds(ids);\n        }\n    }\n    /** Throws an error if the form field's control is missing. */\n    _validateControlChild() {\n        if (!this._control && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatFormFieldMissingControlError();\n        }\n    }\n    /**\n     * Updates the width and position of the gap in the outline. Only relevant for the outline\n     * appearance.\n     */\n    updateOutlineGap() {\n        const labelEl = this._label ? this._label.nativeElement : null;\n        if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n            !labelEl.textContent.trim()) {\n            return;\n        }\n        if (!this._platform.isBrowser) {\n            // getBoundingClientRect isn't available on the server.\n            return;\n        }\n        // If the element is not present in the DOM, the outline gap will need to be calculated\n        // the next time it is checked and in the DOM.\n        if (!this._isAttachedToDOM()) {\n            this._outlineGapCalculationNeededImmediately = true;\n            return;\n        }\n        let startWidth = 0;\n        let gapWidth = 0;\n        const container = this._connectionContainerRef.nativeElement;\n        const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n        const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n        if (this._label && this._label.nativeElement.children.length) {\n            const containerRect = container.getBoundingClientRect();\n            // If the container's width and height are zero, it means that the element is\n            // invisible and we can't calculate the outline gap. Mark the element as needing\n            // to be checked the next time the zone stabilizes. We can't do this immediately\n            // on the next change detection, because even if the element becomes visible,\n            // the `ClientRect` won't be reclaculated immediately. We reset the\n            // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n            if (containerRect.width === 0 && containerRect.height === 0) {\n                this._outlineGapCalculationNeededOnStable = true;\n                this._outlineGapCalculationNeededImmediately = false;\n                return;\n            }\n            const containerStart = this._getStartEnd(containerRect);\n            const labelChildren = labelEl.children;\n            const labelStart = this._getStartEnd(labelChildren[0].getBoundingClientRect());\n            let labelWidth = 0;\n            for (let i = 0; i < labelChildren.length; i++) {\n                labelWidth += labelChildren[i].offsetWidth;\n            }\n            startWidth = Math.abs(labelStart - containerStart) - outlineGapPadding;\n            gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n        }\n        for (let i = 0; i < startEls.length; i++) {\n            startEls[i].style.width = `${startWidth}px`;\n        }\n        for (let i = 0; i < gapEls.length; i++) {\n            gapEls[i].style.width = `${gapWidth}px`;\n        }\n        this._outlineGapCalculationNeededOnStable =\n            this._outlineGapCalculationNeededImmediately = false;\n    }\n    /** Gets the start end of the rect considering the current directionality. */\n    _getStartEnd(rect) {\n        return (this._dir && this._dir.value === 'rtl') ? rect.right : rect.left;\n    }\n    /** Checks whether the form field is attached to the DOM. */\n    _isAttachedToDOM() {\n        const element = this._elementRef.nativeElement;\n        if (element.getRootNode) {\n            const rootNode = element.getRootNode();\n            // If the element is inside the DOM the root node will be either the document\n            // or the closest shadow root, otherwise it'll be the element itself.\n            return rootNode && rootNode !== element;\n        }\n        // Otherwise fall back to checking if it's in the document. This doesn't account for\n        // shadow DOM, however browser that support shadow DOM should support `getRootNode` as well.\n        return document.documentElement.contains(element);\n    }\n}\nMatFormField.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-form-field',\n                exportAs: 'matFormField',\n                template: \"<div class=\\\"mat-form-field-wrapper\\\">\\n  <div class=\\\"mat-form-field-flex\\\" #connectionContainer\\n       (click)=\\\"_control.onContainerClick && _control.onContainerClick($event)\\\">\\n\\n    <!-- Outline used for outline appearance. -->\\n    <ng-container *ngIf=\\\"appearance == 'outline'\\\">\\n      <div class=\\\"mat-form-field-outline\\\">\\n        <div class=\\\"mat-form-field-outline-start\\\"></div>\\n        <div class=\\\"mat-form-field-outline-gap\\\"></div>\\n        <div class=\\\"mat-form-field-outline-end\\\"></div>\\n      </div>\\n      <div class=\\\"mat-form-field-outline mat-form-field-outline-thick\\\">\\n        <div class=\\\"mat-form-field-outline-start\\\"></div>\\n        <div class=\\\"mat-form-field-outline-gap\\\"></div>\\n        <div class=\\\"mat-form-field-outline-end\\\"></div>\\n      </div>\\n    </ng-container>\\n\\n    <div class=\\\"mat-form-field-prefix\\\" *ngIf=\\\"_prefixChildren.length\\\">\\n      <ng-content select=\\\"[matPrefix]\\\"></ng-content>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-infix\\\" #inputContainer>\\n      <ng-content></ng-content>\\n\\n      <span class=\\\"mat-form-field-label-wrapper\\\">\\n        <!-- We add aria-owns as a workaround for an issue in JAWS & NVDA where the label isn't\\n             read if it comes before the control in the DOM. -->\\n        <label class=\\\"mat-form-field-label\\\"\\n               (cdkObserveContent)=\\\"updateOutlineGap()\\\"\\n               [cdkObserveContentDisabled]=\\\"appearance != 'outline'\\\"\\n               [id]=\\\"_labelId\\\"\\n               [attr.for]=\\\"_control.id\\\"\\n               [attr.aria-owns]=\\\"_control.id\\\"\\n               [class.mat-empty]=\\\"_control.empty && !_shouldAlwaysFloat()\\\"\\n               [class.mat-form-field-empty]=\\\"_control.empty && !_shouldAlwaysFloat()\\\"\\n               [class.mat-accent]=\\\"color == 'accent'\\\"\\n               [class.mat-warn]=\\\"color == 'warn'\\\"\\n               #label\\n               *ngIf=\\\"_hasFloatingLabel()\\\"\\n               [ngSwitch]=\\\"_hasLabel()\\\">\\n\\n          <!-- @breaking-change 8.0.0 remove in favor of mat-label element an placeholder attr. -->\\n          <ng-container *ngSwitchCase=\\\"false\\\">\\n            <ng-content select=\\\"mat-placeholder\\\"></ng-content>\\n            <span>{{_control.placeholder}}</span>\\n          </ng-container>\\n\\n          <ng-content select=\\\"mat-label\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n\\n          <!-- @breaking-change 8.0.0 remove `mat-placeholder-required` class -->\\n          <span\\n            class=\\\"mat-placeholder-required mat-form-field-required-marker\\\"\\n            aria-hidden=\\\"true\\\"\\n            *ngIf=\\\"!hideRequiredMarker && _control.required && !_control.disabled\\\">&#32;*</span>\\n        </label>\\n      </span>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-suffix\\\" *ngIf=\\\"_suffixChildren.length\\\">\\n      <ng-content select=\\\"[matSuffix]\\\"></ng-content>\\n    </div>\\n  </div>\\n\\n  <!-- Underline used for legacy, standard, and box appearances. -->\\n  <div class=\\\"mat-form-field-underline\\\" #underline\\n       *ngIf=\\\"appearance != 'outline'\\\">\\n    <span class=\\\"mat-form-field-ripple\\\"\\n          [class.mat-accent]=\\\"color == 'accent'\\\"\\n          [class.mat-warn]=\\\"color == 'warn'\\\"></span>\\n  </div>\\n\\n  <div class=\\\"mat-form-field-subscript-wrapper\\\"\\n       [ngSwitch]=\\\"_getDisplayedMessages()\\\">\\n    <div *ngSwitchCase=\\\"'error'\\\" [@transitionMessages]=\\\"_subscriptAnimationState\\\">\\n      <ng-content select=\\\"mat-error\\\"></ng-content>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-hint-wrapper\\\" *ngSwitchCase=\\\"'hint'\\\"\\n      [@transitionMessages]=\\\"_subscriptAnimationState\\\">\\n      <!-- TODO(mmalerba): use an actual <mat-hint> once all selectors are switched to mat-* -->\\n      <div *ngIf=\\\"hintLabel\\\" [id]=\\\"_hintLabelId\\\" class=\\\"mat-hint\\\">{{hintLabel}}</div>\\n      <ng-content select=\\\"mat-hint:not([align='end'])\\\"></ng-content>\\n      <div class=\\\"mat-form-field-hint-spacer\\\"></div>\\n      <ng-content select=\\\"mat-hint[align='end']\\\"></ng-content>\\n    </div>\\n  </div>\\n</div>\\n\",\n                animations: [matFormFieldAnimations.transitionMessages],\n                host: {\n                    'class': 'mat-form-field',\n                    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n                    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n                    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n                    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n                    '[class.mat-form-field-invalid]': '_control.errorState',\n                    '[class.mat-form-field-can-float]': '_canLabelFloat()',\n                    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n                    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n                    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n                    '[class.mat-form-field-disabled]': '_control.disabled',\n                    '[class.mat-form-field-autofilled]': '_control.autofilled',\n                    '[class.mat-focused]': '_control.focused',\n                    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n                    '[class.ng-touched]': '_shouldForward(\"touched\")',\n                    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n                    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n                    '[class.ng-valid]': '_shouldForward(\"valid\")',\n                    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n                    '[class.ng-pending]': '_shouldForward(\"pending\")',\n                    '[class._mat-animation-noopable]': '!_animationsEnabled',\n                },\n                inputs: ['color'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                providers: [\n                    { provide: MAT_FORM_FIELD, useExisting: MatFormField },\n                ],\n                styles: [\".mat-form-field{display:inline-block;position:relative;text-align:left}[dir=rtl] .mat-form-field{text-align:right}.mat-form-field-wrapper{position:relative}.mat-form-field-flex{display:inline-flex;align-items:baseline;box-sizing:border-box;width:100%}.mat-form-field-prefix,.mat-form-field-suffix{white-space:nowrap;flex:none;position:relative}.mat-form-field-infix{display:block;position:relative;flex:auto;min-width:0;width:180px}.cdk-high-contrast-active .mat-form-field-infix{border-image:linear-gradient(transparent, transparent)}.mat-form-field-label-wrapper{position:absolute;left:0;box-sizing:content-box;width:100%;height:100%;overflow:hidden;pointer-events:none}[dir=rtl] .mat-form-field-label-wrapper{left:auto;right:0}.mat-form-field-label{position:absolute;left:0;font:inherit;pointer-events:none;width:100%;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),width 400ms cubic-bezier(0.25, 0.8, 0.25, 1);display:none}[dir=rtl] .mat-form-field-label{transform-origin:100% 0;left:auto;right:0}.mat-form-field-empty.mat-form-field-label,.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label{display:block}.mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:block;transition:none}.mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-form-field-can-float .mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:block}.mat-form-field-label:not(.mat-form-field-empty){transition:none}.mat-form-field-underline{position:absolute;width:100%;pointer-events:none;transform:scale3d(1, 1.0001, 1)}.mat-form-field-ripple{position:absolute;left:0;width:100%;transform-origin:50%;transform:scaleX(0.5);opacity:0;transition:background-color 300ms cubic-bezier(0.55, 0, 0.55, 0.2)}.mat-form-field.mat-focused .mat-form-field-ripple,.mat-form-field.mat-form-field-invalid .mat-form-field-ripple{opacity:1;transform:none;transition:transform 300ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 100ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 300ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-subscript-wrapper{position:absolute;box-sizing:border-box;width:100%;overflow:hidden}.mat-form-field-subscript-wrapper .mat-icon,.mat-form-field-label-wrapper .mat-icon{width:1em;height:1em;font-size:inherit;vertical-align:baseline}.mat-form-field-hint-wrapper{display:flex}.mat-form-field-hint-spacer{flex:1 0 1em}.mat-error{display:block}.mat-form-field-control-wrapper{position:relative}.mat-form-field-hint-end{order:1}.mat-form-field._mat-animation-noopable .mat-form-field-label,.mat-form-field._mat-animation-noopable .mat-form-field-ripple{transition:none}\\n\", \".mat-form-field-appearance-fill .mat-form-field-flex{border-radius:4px 4px 0 0;padding:.75em .75em 0 .75em}.cdk-high-contrast-active .mat-form-field-appearance-fill .mat-form-field-flex{outline:solid 1px}.mat-form-field-appearance-fill .mat-form-field-underline::before{content:\\\"\\\";display:block;position:absolute;bottom:0;height:1px;width:100%}.mat-form-field-appearance-fill .mat-form-field-ripple{bottom:0;height:2px}.cdk-high-contrast-active .mat-form-field-appearance-fill .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-fill:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-fill._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}.mat-form-field-appearance-fill .mat-form-field-subscript-wrapper{padding:0 1em}\\n\", \".mat-input-element{font:inherit;background:transparent;color:currentColor;border:none;outline:none;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit;box-sizing:content-box}.mat-input-element:-moz-ui-invalid{box-shadow:none}.mat-input-element::-ms-clear,.mat-input-element::-ms-reveal{display:none}.mat-input-element,.mat-input-element::-webkit-search-cancel-button,.mat-input-element::-webkit-search-decoration,.mat-input-element::-webkit-search-results-button,.mat-input-element::-webkit-search-results-decoration{-webkit-appearance:none}.mat-input-element::-webkit-contacts-auto-fill-button,.mat-input-element::-webkit-caps-lock-indicator,.mat-input-element::-webkit-credentials-auto-fill-button{visibility:hidden}.mat-input-element[type=date],.mat-input-element[type=datetime],.mat-input-element[type=datetime-local],.mat-input-element[type=month],.mat-input-element[type=week],.mat-input-element[type=time]{line-height:1}.mat-input-element[type=date]::after,.mat-input-element[type=datetime]::after,.mat-input-element[type=datetime-local]::after,.mat-input-element[type=month]::after,.mat-input-element[type=week]::after,.mat-input-element[type=time]::after{content:\\\" \\\";white-space:pre;width:1px}.mat-input-element::-webkit-inner-spin-button,.mat-input-element::-webkit-calendar-picker-indicator,.mat-input-element::-webkit-clear-button{font-size:.75em}.mat-input-element::placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element::-moz-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::-moz-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element::-webkit-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::-webkit-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element:-ms-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element:-ms-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-form-field-hide-placeholder .mat-input-element::placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-moz-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-webkit-input-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element:-ms-input-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}textarea.mat-input-element{resize:vertical;overflow:auto}textarea.mat-input-element.cdk-textarea-autosize{resize:none}textarea.mat-input-element{padding:2px 0;margin:-2px 0}select.mat-input-element{-moz-appearance:none;-webkit-appearance:none;position:relative;background-color:transparent;display:inline-flex;box-sizing:border-box;padding-top:1em;top:-1em;margin-bottom:-1em}select.mat-input-element::-ms-expand{display:none}select.mat-input-element::-moz-focus-inner{border:0}select.mat-input-element:not(:disabled){cursor:pointer}select.mat-input-element::-ms-value{color:inherit;background:none}.mat-focused .cdk-high-contrast-active select.mat-input-element::-ms-value{color:inherit}.mat-form-field-type-mat-native-select .mat-form-field-infix::after{content:\\\"\\\";width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;position:absolute;top:50%;right:0;margin-top:-2.5px;pointer-events:none}[dir=rtl] .mat-form-field-type-mat-native-select .mat-form-field-infix::after{right:auto;left:0}.mat-form-field-type-mat-native-select .mat-input-element{padding-right:15px}[dir=rtl] .mat-form-field-type-mat-native-select .mat-input-element{padding-right:0;padding-left:15px}.mat-form-field-type-mat-native-select .mat-form-field-label-wrapper{max-width:calc(100% - 10px)}.mat-form-field-type-mat-native-select.mat-form-field-appearance-outline .mat-form-field-infix::after{margin-top:-5px}.mat-form-field-type-mat-native-select.mat-form-field-appearance-fill .mat-form-field-infix::after{margin-top:-10px}\\n\", \".mat-form-field-appearance-legacy .mat-form-field-label{transform:perspective(100px);-ms-transform:none}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon{width:1em}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button{font:inherit;vertical-align:baseline}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button .mat-icon{font-size:inherit}.mat-form-field-appearance-legacy .mat-form-field-underline{height:1px}.cdk-high-contrast-active .mat-form-field-appearance-legacy .mat-form-field-underline{height:0;border-top:solid 1px}.mat-form-field-appearance-legacy .mat-form-field-ripple{top:0;height:2px;overflow:hidden}.cdk-high-contrast-active .mat-form-field-appearance-legacy .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}.cdk-high-contrast-active .mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}.mat-form-field-appearance-legacy.mat-form-field-invalid:not(.mat-focused) .mat-form-field-ripple{height:1px}\\n\", \".mat-form-field-appearance-outline .mat-form-field-wrapper{margin:.25em 0}.mat-form-field-appearance-outline .mat-form-field-flex{padding:0 .75em 0 .75em;margin-top:-0.25em;position:relative}.mat-form-field-appearance-outline .mat-form-field-prefix,.mat-form-field-appearance-outline .mat-form-field-suffix{top:.25em}.mat-form-field-appearance-outline .mat-form-field-outline{display:flex;position:absolute;top:.25em;left:0;right:0;bottom:0;pointer-events:none}.mat-form-field-appearance-outline .mat-form-field-outline-start,.mat-form-field-appearance-outline .mat-form-field-outline-end{border:1px solid currentColor;min-width:5px}.mat-form-field-appearance-outline .mat-form-field-outline-start{border-radius:5px 0 0 5px;border-right-style:none}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-start{border-right-style:solid;border-left-style:none;border-radius:0 5px 5px 0}.mat-form-field-appearance-outline .mat-form-field-outline-end{border-radius:0 5px 5px 0;border-left-style:none;flex-grow:1}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-end{border-left-style:solid;border-right-style:none;border-radius:5px 0 0 5px}.mat-form-field-appearance-outline .mat-form-field-outline-gap{border-radius:.000001px;border:1px solid currentColor;border-left-style:none;border-right-style:none}.mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-outline-gap{border-top-color:transparent}.mat-form-field-appearance-outline .mat-form-field-outline-thick{opacity:0}.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-start,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-end,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-gap{border-width:2px}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline{opacity:0;transition:opacity 100ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline{opacity:0;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline .mat-form-field-subscript-wrapper{padding:0 1em}.mat-form-field-appearance-outline._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-start,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-end,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-gap{transition:none}\\n\", \".mat-form-field-appearance-standard .mat-form-field-flex{padding-top:.75em}.mat-form-field-appearance-standard .mat-form-field-underline{height:1px}.cdk-high-contrast-active .mat-form-field-appearance-standard .mat-form-field-underline{height:0;border-top:solid 1px}.mat-form-field-appearance-standard .mat-form-field-ripple{bottom:0;height:2px}.cdk-high-contrast-active .mat-form-field-appearance-standard .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}.cdk-high-contrast-active .mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}.mat-form-field-appearance-standard:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-standard._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}\\n\"]\n            },] }\n];\nMatFormField.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [ElementRef,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD_DEFAULT_OPTIONS,] }] },\n    { type: Platform },\n    { type: NgZone },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatFormField.propDecorators = {\n    appearance: [{ type: Input }],\n    hideRequiredMarker: [{ type: Input }],\n    hintLabel: [{ type: Input }],\n    floatLabel: [{ type: Input }],\n    underlineRef: [{ type: ViewChild, args: ['underline',] }],\n    _connectionContainerRef: [{ type: ViewChild, args: ['connectionContainer', { static: true },] }],\n    _inputContainerRef: [{ type: ViewChild, args: ['inputContainer',] }],\n    _label: [{ type: ViewChild, args: ['label',] }],\n    _controlNonStatic: [{ type: ContentChild, args: [MatFormFieldControl,] }],\n    _controlStatic: [{ type: ContentChild, args: [MatFormFieldControl, { static: true },] }],\n    _labelChildNonStatic: [{ type: ContentChild, args: [MatLabel,] }],\n    _labelChildStatic: [{ type: ContentChild, args: [MatLabel, { static: true },] }],\n    _placeholderChild: [{ type: ContentChild, args: [MatPlaceholder,] }],\n    _errorChildren: [{ type: ContentChildren, args: [MAT_ERROR, { descendants: true },] }],\n    _hintChildren: [{ type: ContentChildren, args: [_MAT_HINT, { descendants: true },] }],\n    _prefixChildren: [{ type: ContentChildren, args: [MAT_PREFIX, { descendants: true },] }],\n    _suffixChildren: [{ type: ContentChildren, args: [MAT_SUFFIX, { descendants: true },] }]\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatFormFieldModule {\n}\nMatFormFieldModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    MatError,\n                    MatFormField,\n                    MatHint,\n                    MatLabel,\n                    MatPlaceholder,\n                    MatPrefix,\n                    MatSuffix,\n                ],\n                imports: [\n                    CommonModule,\n                    MatCommonModule,\n                    ObserversModule,\n                ],\n                exports: [\n                    MatCommonModule,\n                    MatError,\n                    MatFormField,\n                    MatHint,\n                    MatLabel,\n                    MatPlaceholder,\n                    MatPrefix,\n                    MatSuffix,\n                ],\n            },] }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_ERROR, MAT_FORM_FIELD, MAT_FORM_FIELD_DEFAULT_OPTIONS, MAT_PREFIX, MAT_SUFFIX, MatError, MatFormField, MatFormFieldControl, MatFormFieldModule, MatHint, MatLabel, MatPlaceholder, MatPrefix, MatSuffix, _MAT_HINT, getMatFormFieldDuplicatedHintError, getMatFormFieldMissingControlError, getMatFormFieldPlaceholderConflictError, matFormFieldAnimations };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}