{"ast":null,"code":"import { __extends, __generator, __read } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Disposer } from \"./Disposer\";\nimport { EventDispatcher } from \"./EventDispatcher\";\nimport * as $object from \"./Object\";\nimport * as $iter from \"./Iterator\";\nimport * as $string from \"./String\";\n/**\r\n * A disposable dictionary, which when disposed itself will call `dispose()`\r\n * method on all its items.\r\n */\nvar DictionaryDisposer = /** @class */function (_super) {\n  __extends(DictionaryDisposer, _super);\n  function DictionaryDisposer(dict) {\n    var _this = this;\n    var disposer = dict.events.on(\"removed\", function (x) {\n      x.oldValue.dispose();\n    }, undefined, false);\n    _this = _super.call(this, function () {\n      disposer.dispose();\n      // TODO clear the dictionary ?\n      $iter.each(dict.iterator(), function (a) {\n        var v = a[1];\n        v.dispose();\n      });\n    }) || this;\n    return _this;\n  }\n  return DictionaryDisposer;\n}(Disposer);\nexport { DictionaryDisposer };\n/**\r\n * A Dictionary is collection where values of some type can be mapped to\r\n * string keys.\r\n *\r\n * You might call it an \"associative list\" or \"associative array\".\r\n */\nvar Dictionary = /** @class */function () {\n  /**\r\n   * Constructor\r\n   */\n  function Dictionary() {\n    /**\r\n     * Event dispatcher.\r\n     */\n    this.events = new EventDispatcher();\n    this._dictionary = {};\n  }\n  /**\r\n   * Returns `true` if key exists in Dictionary.\r\n   *\r\n   * @param key  The key to search for\r\n   * @return `true` if key exists, `false` if it doesn't\r\n   */\n  Dictionary.prototype.hasKey = function (key) {\n    return $object.hasKey(this._dictionary, key);\n  };\n  /**\r\n   * Returns the value for a specific key.\r\n   *\r\n   * @param key  The key to search for\r\n   * @return Value for the key, or `undefined` if it doesn't exist\r\n   */\n  Dictionary.prototype.getKey = function (key) {\n    return this._dictionary[key];\n  };\n  /**\r\n   * Inserts value at specific key.\r\n   *\r\n   * Will thrown an exception if the key already exists in the dictionary.\r\n   *\r\n   * @param key    Key\r\n   * @param value  Value\r\n   */\n  Dictionary.prototype.insertKey = function (key, value) {\n    if ($object.hasKey(this._dictionary, key)) {\n      throw new Error(\"Key \" + key + \" already exists in dictionary\");\n    } else {\n      this._dictionary[key] = value;\n      if (this.events.isEnabled(\"insertKey\")) {\n        this.events.dispatchImmediately(\"insertKey\", {\n          type: \"insertKey\",\n          target: this,\n          key: key,\n          newValue: value\n        });\n      }\n    }\n  };\n  /**\r\n   * Adds or updates key/value into dictionary.\r\n   *\r\n   * If the key already exists, the old value will be overwritten.\r\n   *\r\n   * If the new value is exactly the same as the old value (using ===), it won't do anything.\r\n   *\r\n   * @param key    Key\r\n   * @param value  Value\r\n   */\n  Dictionary.prototype.setKey = function (key, value) {\n    if ($object.hasKey(this._dictionary, key)) {\n      var oldValue = this._dictionary[key];\n      if (oldValue !== value) {\n        this._dictionary[key] = value;\n        if (this.events.isEnabled(\"setKey\")) {\n          this.events.dispatchImmediately(\"setKey\", {\n            type: \"setKey\",\n            target: this,\n            key: key,\n            oldValue: oldValue,\n            newValue: value\n          });\n        }\n        if (this.events.isEnabled(\"removed\")) {\n          this.events.dispatchImmediately(\"removed\", {\n            type: \"removed\",\n            target: this,\n            oldValue: oldValue\n          });\n        }\n      }\n    } else {\n      this._dictionary[key] = value;\n      if (this.events.isEnabled(\"insertKey\")) {\n        this.events.dispatchImmediately(\"insertKey\", {\n          type: \"insertKey\",\n          target: this,\n          key: key,\n          newValue: value\n        });\n      }\n    }\n  };\n  /**\r\n   * Updates the value at specific `key` using custom function.\r\n   *\r\n   * Passes in current value into the function, and uses its output as a new\r\n   * value.\r\n   *\r\n   * If the new value is exactly the same as the old value (using ===), it won't do anything.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param key  Key\r\n   * @param fn   Function to transform the value\r\n   */\n  Dictionary.prototype.updateKey = function (key, fn) {\n    if ($object.hasKey(this._dictionary, key)) {\n      var oldValue = this._dictionary[key];\n      var newValue = fn(oldValue);\n      if (oldValue !== newValue) {\n        this._dictionary[key] = newValue;\n        if (this.events.isEnabled(\"setKey\")) {\n          this.events.dispatchImmediately(\"setKey\", {\n            type: \"setKey\",\n            target: this,\n            key: key,\n            oldValue: oldValue,\n            newValue: newValue\n          });\n        }\n        if (this.events.isEnabled(\"removed\")) {\n          this.events.dispatchImmediately(\"removed\", {\n            type: \"removed\",\n            target: this,\n            oldValue: oldValue\n          });\n        }\n      }\n    } else {\n      throw new Error(\"Key \" + key + \" doesn't exist in dictionary\");\n    }\n  };\n  /**\r\n   * Removes value at specific `key` from dictionary.\r\n   *\r\n   * @param key  Key to remove\r\n   */\n  Dictionary.prototype.removeKey = function (key) {\n    if ($object.hasKey(this._dictionary, key)) {\n      var oldValue = this._dictionary[key];\n      delete this._dictionary[key];\n      if (this.events.isEnabled(\"removeKey\")) {\n        this.events.dispatchImmediately(\"removeKey\", {\n          type: \"removeKey\",\n          target: this,\n          key: key,\n          oldValue: oldValue\n        });\n      }\n      if (this.events.isEnabled(\"removed\")) {\n        this.events.dispatchImmediately(\"removed\", {\n          type: \"removed\",\n          target: this,\n          oldValue: oldValue\n        });\n      }\n    }\n  };\n  /**\r\n   * [insertKeyIfEmpty description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo description\r\n   * @param key      [description]\r\n   * @param ifEmpty  [description]\r\n   * @return [description]\r\n   */\n  Dictionary.prototype.insertKeyIfEmpty = function (key, ifEmpty) {\n    if (!this.hasKey(key)) {\n      this.insertKey(key, ifEmpty());\n    }\n    return this.getKey(key);\n  };\n  /**\r\n   * Removes all items from the dictionary.\r\n   */\n  Dictionary.prototype.clear = function () {\n    var _this = this;\n    // TODO dispatch this after clear\n    if (this.events.isEnabled(\"removed\")) {\n      $object.each(this._dictionary, function (key, value) {\n        _this.events.dispatchImmediately(\"removed\", {\n          type: \"removed\",\n          target: _this,\n          oldValue: value\n        });\n      });\n    }\n    this._dictionary = {};\n    if (this.events.isEnabled(\"cleared\")) {\n      this.events.dispatchImmediately(\"cleared\", {\n        type: \"cleared\",\n        target: this\n      });\n    }\n  };\n  /**\r\n   * Copies items from another Dictionary.\r\n   *\r\n   * @param source  A Dictionary to copy items from\r\n   */\n  Dictionary.prototype.copyFrom = function (source) {\n    var _this = this;\n    $iter.each(source.iterator(), function (a) {\n      // TODO fix this type cast\n      _this.setKey(a[0], a[1]);\n    });\n  };\n  /**\r\n   * Returns an interator that can be used to iterate through all items in\r\n   * the dictionary.\r\n   *\r\n   * @return Iterator\r\n   */\n  Dictionary.prototype.iterator = function () {\n    // @todo fix this type after the Iterator bug is fixed\n    // https://github.com/Microsoft/TypeScript/issues/16730\n    return $object.entries(this._dictionary);\n  };\n  /**\r\n   * Returns an ES6 iterator for the keys/values of the dictionary.\r\n   */\n  Dictionary.prototype[Symbol.iterator] = function () {\n    var _a, _b, _i, key;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = [];\n          for (_b in this._dictionary) _a.push(_b);\n          _i = 0;\n          _c.label = 1;\n        case 1:\n          if (!(_i < _a.length)) return [3 /*break*/, 4];\n          key = _a[_i];\n          if (!$object.hasKey(this._dictionary, key)) return [3 /*break*/, 3];\n          return [4 /*yield*/, [key, this._dictionary[key]]];\n        case 2:\n          _c.sent();\n          _c.label = 3;\n        case 3:\n          _i++;\n          return [3 /*break*/, 1];\n        case 4:\n          return [2 /*return*/];\n      }\n    });\n  };\n  /**\r\n   * Calls `f` for each key/value in the dictionary.\r\n   */\n  Dictionary.prototype.each = function (f) {\n    $iter.each(this.iterator(), function (_a) {\n      var _b = __read(_a, 2),\n        key = _b[0],\n        value = _b[1];\n      return f(key, value);\n    });\n  };\n  /**\r\n   * Returns an iterator that can be used to iterate through all items in\r\n   * the dictionary, ordered by key.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Iterator\r\n   */\n  Dictionary.prototype.sortedIterator = function () {\n    return $iter.sort(this.iterator(), function (x, y) {\n      return $string.order(x[0], y[0]);\n    });\n  };\n  return Dictionary;\n}();\nexport { Dictionary };\n/**\r\n * A version of a [[Dictionary]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\nvar DictionaryTemplate = /** @class */function (_super) {\n  __extends(DictionaryTemplate, _super);\n  /**\r\n   * Constructor\r\n   *\r\n   * @param t Template object\r\n   */\n  function DictionaryTemplate(t) {\n    var _this = _super.call(this) || this;\n    _this.template = t;\n    return _this;\n  }\n  Object.defineProperty(DictionaryTemplate.prototype, \"template\", {\n    /**\r\n     * @return Template object\r\n     */\n    get: function () {\n      return this._template;\n    },\n    /**\r\n     * A \"template\" object to copy all properties from when creating new list\r\n     * items.\r\n     *\r\n     * @param v  Template object\r\n     */\n    set: function (v) {\n      v.isTemplate = true;\n      this._template = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all elements from other dictionary.\r\n   *\r\n   * @param source  Source dictionary\r\n   */\n  DictionaryTemplate.prototype.copyFrom = function (source) {\n    var _this = this;\n    $iter.each(source.iterator(), function (a) {\n      // TODO fix this type cast\n      // TODO why does this need to clone ?\n      _this.setKey(a[0], a[1].clone());\n    });\n  };\n  /**\r\n   * Instantiates a new object of the specified type, adds it to specified\r\n   * `key` in the dictionary, and returns it.\r\n   *\r\n   * @param make  Item type to use. Will use the default type for the dictionary if not specified.\r\n   * @return      Newly created item\r\n   */\n  DictionaryTemplate.prototype.create = function (key) {\n    var _this = this;\n    return this.insertKeyIfEmpty(key, function () {\n      return _this.template.clone();\n    });\n  };\n  return DictionaryTemplate;\n}(Dictionary);\nexport { DictionaryTemplate };","map":{"version":3,"names":["__extends","__generator","__read","Disposer","EventDispatcher","$object","$iter","$string","DictionaryDisposer","_super","dict","_this","disposer","events","on","x","oldValue","dispose","undefined","call","each","iterator","a","v","Dictionary","_dictionary","prototype","hasKey","key","getKey","insertKey","value","Error","isEnabled","dispatchImmediately","type","target","newValue","setKey","updateKey","fn","removeKey","insertKeyIfEmpty","ifEmpty","clear","copyFrom","source","entries","Symbol","_a","_b","_i","_c","label","push","length","sent","f","sortedIterator","sort","y","order","DictionaryTemplate","t","template","Object","defineProperty","get","_template","set","isTemplate","enumerable","configurable","clone","create"],"sources":["D:/alodelivery test/node_modules/@amcharts/amcharts4/.internal/core/utils/Dictionary.js"],"sourcesContent":["import { __extends, __generator, __read } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Disposer } from \"./Disposer\";\r\nimport { EventDispatcher } from \"./EventDispatcher\";\r\nimport * as $object from \"./Object\";\r\nimport * as $iter from \"./Iterator\";\r\nimport * as $string from \"./String\";\r\n/**\r\n * A disposable dictionary, which when disposed itself will call `dispose()`\r\n * method on all its items.\r\n */\r\nvar DictionaryDisposer = /** @class */ (function (_super) {\r\n    __extends(DictionaryDisposer, _super);\r\n    function DictionaryDisposer(dict) {\r\n        var _this = this;\r\n        var disposer = dict.events.on(\"removed\", function (x) {\r\n            x.oldValue.dispose();\r\n        }, undefined, false);\r\n        _this = _super.call(this, function () {\r\n            disposer.dispose();\r\n            // TODO clear the dictionary ?\r\n            $iter.each(dict.iterator(), function (a) {\r\n                var v = a[1];\r\n                v.dispose();\r\n            });\r\n        }) || this;\r\n        return _this;\r\n    }\r\n    return DictionaryDisposer;\r\n}(Disposer));\r\nexport { DictionaryDisposer };\r\n/**\r\n * A Dictionary is collection where values of some type can be mapped to\r\n * string keys.\r\n *\r\n * You might call it an \"associative list\" or \"associative array\".\r\n */\r\nvar Dictionary = /** @class */ (function () {\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Dictionary() {\r\n        /**\r\n         * Event dispatcher.\r\n         */\r\n        this.events = new EventDispatcher();\r\n        this._dictionary = {};\r\n    }\r\n    /**\r\n     * Returns `true` if key exists in Dictionary.\r\n     *\r\n     * @param key  The key to search for\r\n     * @return `true` if key exists, `false` if it doesn't\r\n     */\r\n    Dictionary.prototype.hasKey = function (key) {\r\n        return $object.hasKey(this._dictionary, key);\r\n    };\r\n    /**\r\n     * Returns the value for a specific key.\r\n     *\r\n     * @param key  The key to search for\r\n     * @return Value for the key, or `undefined` if it doesn't exist\r\n     */\r\n    Dictionary.prototype.getKey = function (key) {\r\n        return this._dictionary[key];\r\n    };\r\n    /**\r\n     * Inserts value at specific key.\r\n     *\r\n     * Will thrown an exception if the key already exists in the dictionary.\r\n     *\r\n     * @param key    Key\r\n     * @param value  Value\r\n     */\r\n    Dictionary.prototype.insertKey = function (key, value) {\r\n        if ($object.hasKey(this._dictionary, key)) {\r\n            throw new Error(\"Key \" + key + \" already exists in dictionary\");\r\n        }\r\n        else {\r\n            this._dictionary[key] = value;\r\n            if (this.events.isEnabled(\"insertKey\")) {\r\n                this.events.dispatchImmediately(\"insertKey\", {\r\n                    type: \"insertKey\",\r\n                    target: this,\r\n                    key: key,\r\n                    newValue: value\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Adds or updates key/value into dictionary.\r\n     *\r\n     * If the key already exists, the old value will be overwritten.\r\n     *\r\n     * If the new value is exactly the same as the old value (using ===), it won't do anything.\r\n     *\r\n     * @param key    Key\r\n     * @param value  Value\r\n     */\r\n    Dictionary.prototype.setKey = function (key, value) {\r\n        if ($object.hasKey(this._dictionary, key)) {\r\n            var oldValue = this._dictionary[key];\r\n            if (oldValue !== value) {\r\n                this._dictionary[key] = value;\r\n                if (this.events.isEnabled(\"setKey\")) {\r\n                    this.events.dispatchImmediately(\"setKey\", {\r\n                        type: \"setKey\",\r\n                        target: this,\r\n                        key: key,\r\n                        oldValue: oldValue,\r\n                        newValue: value\r\n                    });\r\n                }\r\n                if (this.events.isEnabled(\"removed\")) {\r\n                    this.events.dispatchImmediately(\"removed\", {\r\n                        type: \"removed\",\r\n                        target: this,\r\n                        oldValue: oldValue\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._dictionary[key] = value;\r\n            if (this.events.isEnabled(\"insertKey\")) {\r\n                this.events.dispatchImmediately(\"insertKey\", {\r\n                    type: \"insertKey\",\r\n                    target: this,\r\n                    key: key,\r\n                    newValue: value\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Updates the value at specific `key` using custom function.\r\n     *\r\n     * Passes in current value into the function, and uses its output as a new\r\n     * value.\r\n     *\r\n     * If the new value is exactly the same as the old value (using ===), it won't do anything.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param key  Key\r\n     * @param fn   Function to transform the value\r\n     */\r\n    Dictionary.prototype.updateKey = function (key, fn) {\r\n        if ($object.hasKey(this._dictionary, key)) {\r\n            var oldValue = this._dictionary[key];\r\n            var newValue = fn(oldValue);\r\n            if (oldValue !== newValue) {\r\n                this._dictionary[key] = newValue;\r\n                if (this.events.isEnabled(\"setKey\")) {\r\n                    this.events.dispatchImmediately(\"setKey\", {\r\n                        type: \"setKey\",\r\n                        target: this,\r\n                        key: key,\r\n                        oldValue: oldValue,\r\n                        newValue: newValue\r\n                    });\r\n                }\r\n                if (this.events.isEnabled(\"removed\")) {\r\n                    this.events.dispatchImmediately(\"removed\", {\r\n                        type: \"removed\",\r\n                        target: this,\r\n                        oldValue: oldValue\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            throw new Error(\"Key \" + key + \" doesn't exist in dictionary\");\r\n        }\r\n    };\r\n    /**\r\n     * Removes value at specific `key` from dictionary.\r\n     *\r\n     * @param key  Key to remove\r\n     */\r\n    Dictionary.prototype.removeKey = function (key) {\r\n        if ($object.hasKey(this._dictionary, key)) {\r\n            var oldValue = this._dictionary[key];\r\n            delete this._dictionary[key];\r\n            if (this.events.isEnabled(\"removeKey\")) {\r\n                this.events.dispatchImmediately(\"removeKey\", {\r\n                    type: \"removeKey\",\r\n                    target: this,\r\n                    key: key,\r\n                    oldValue: oldValue\r\n                });\r\n            }\r\n            if (this.events.isEnabled(\"removed\")) {\r\n                this.events.dispatchImmediately(\"removed\", {\r\n                    type: \"removed\",\r\n                    target: this,\r\n                    oldValue: oldValue\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * [insertKeyIfEmpty description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo description\r\n     * @param key      [description]\r\n     * @param ifEmpty  [description]\r\n     * @return [description]\r\n     */\r\n    Dictionary.prototype.insertKeyIfEmpty = function (key, ifEmpty) {\r\n        if (!this.hasKey(key)) {\r\n            this.insertKey(key, ifEmpty());\r\n        }\r\n        return this.getKey(key);\r\n    };\r\n    /**\r\n     * Removes all items from the dictionary.\r\n     */\r\n    Dictionary.prototype.clear = function () {\r\n        var _this = this;\r\n        // TODO dispatch this after clear\r\n        if (this.events.isEnabled(\"removed\")) {\r\n            $object.each(this._dictionary, function (key, value) {\r\n                _this.events.dispatchImmediately(\"removed\", {\r\n                    type: \"removed\",\r\n                    target: _this,\r\n                    oldValue: value\r\n                });\r\n            });\r\n        }\r\n        this._dictionary = {};\r\n        if (this.events.isEnabled(\"cleared\")) {\r\n            this.events.dispatchImmediately(\"cleared\", {\r\n                type: \"cleared\",\r\n                target: this\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Copies items from another Dictionary.\r\n     *\r\n     * @param source  A Dictionary to copy items from\r\n     */\r\n    Dictionary.prototype.copyFrom = function (source) {\r\n        var _this = this;\r\n        $iter.each(source.iterator(), function (a) {\r\n            // TODO fix this type cast\r\n            _this.setKey(a[0], a[1]);\r\n        });\r\n    };\r\n    /**\r\n     * Returns an interator that can be used to iterate through all items in\r\n     * the dictionary.\r\n     *\r\n     * @return Iterator\r\n     */\r\n    Dictionary.prototype.iterator = function () {\r\n        // @todo fix this type after the Iterator bug is fixed\r\n        // https://github.com/Microsoft/TypeScript/issues/16730\r\n        return $object.entries(this._dictionary);\r\n    };\r\n    /**\r\n     * Returns an ES6 iterator for the keys/values of the dictionary.\r\n     */\r\n    Dictionary.prototype[Symbol.iterator] = function () {\r\n        var _a, _b, _i, key;\r\n        return __generator(this, function (_c) {\r\n            switch (_c.label) {\r\n                case 0:\r\n                    _a = [];\r\n                    for (_b in this._dictionary)\r\n                        _a.push(_b);\r\n                    _i = 0;\r\n                    _c.label = 1;\r\n                case 1:\r\n                    if (!(_i < _a.length)) return [3 /*break*/, 4];\r\n                    key = _a[_i];\r\n                    if (!$object.hasKey(this._dictionary, key)) return [3 /*break*/, 3];\r\n                    return [4 /*yield*/, [key, this._dictionary[key]]];\r\n                case 2:\r\n                    _c.sent();\r\n                    _c.label = 3;\r\n                case 3:\r\n                    _i++;\r\n                    return [3 /*break*/, 1];\r\n                case 4: return [2 /*return*/];\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Calls `f` for each key/value in the dictionary.\r\n     */\r\n    Dictionary.prototype.each = function (f) {\r\n        $iter.each(this.iterator(), function (_a) {\r\n            var _b = __read(_a, 2), key = _b[0], value = _b[1];\r\n            return f(key, value);\r\n        });\r\n    };\r\n    /**\r\n     * Returns an iterator that can be used to iterate through all items in\r\n     * the dictionary, ordered by key.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Iterator\r\n     */\r\n    Dictionary.prototype.sortedIterator = function () {\r\n        return $iter.sort(this.iterator(), function (x, y) { return $string.order(x[0], y[0]); });\r\n    };\r\n    return Dictionary;\r\n}());\r\nexport { Dictionary };\r\n/**\r\n * A version of a [[Dictionary]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\r\nvar DictionaryTemplate = /** @class */ (function (_super) {\r\n    __extends(DictionaryTemplate, _super);\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param t Template object\r\n     */\r\n    function DictionaryTemplate(t) {\r\n        var _this = _super.call(this) || this;\r\n        _this.template = t;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DictionaryTemplate.prototype, \"template\", {\r\n        /**\r\n         * @return Template object\r\n         */\r\n        get: function () {\r\n            return this._template;\r\n        },\r\n        /**\r\n         * A \"template\" object to copy all properties from when creating new list\r\n         * items.\r\n         *\r\n         * @param v  Template object\r\n         */\r\n        set: function (v) {\r\n            v.isTemplate = true;\r\n            this._template = v;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Copies all elements from other dictionary.\r\n     *\r\n     * @param source  Source dictionary\r\n     */\r\n    DictionaryTemplate.prototype.copyFrom = function (source) {\r\n        var _this = this;\r\n        $iter.each(source.iterator(), function (a) {\r\n            // TODO fix this type cast\r\n            // TODO why does this need to clone ?\r\n            _this.setKey(a[0], a[1].clone());\r\n        });\r\n    };\r\n    /**\r\n     * Instantiates a new object of the specified type, adds it to specified\r\n     * `key` in the dictionary, and returns it.\r\n     *\r\n     * @param make  Item type to use. Will use the default type for the dictionary if not specified.\r\n     * @return      Newly created item\r\n     */\r\n    DictionaryTemplate.prototype.create = function (key) {\r\n        var _this = this;\r\n        return this.insertKeyIfEmpty(key, function () { return _this.template.clone(); });\r\n    };\r\n    return DictionaryTemplate;\r\n}(Dictionary));\r\nexport { DictionaryTemplate };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}